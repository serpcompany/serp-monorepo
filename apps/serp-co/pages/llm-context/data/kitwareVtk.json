[
  {
    "owner": "kitware",
    "repo": "vtk",
    "content": "TITLE: Using VTK Modules with New System (CMake)\nDESCRIPTION: Example of how to use VTK modules in CMake with the new module system introduced in VTK 9. It demonstrates the updated syntax for finding packages, linking libraries, and handling auto-initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  #9.0 # Compatibility support is not provided if 9.0 is requested.\n  REQUIRED\n  COMPONENTS\n    # Old component names are OK, but deprecated.\n    #vtkCommonCore\n    #vtkRenderingOpenGL2\n    # New names reflect the target names in use.\n    CommonCore\n    RenderingOpenGL2)\n# No longer needed; warns or errors depending on the version requested when\n# finding VTK.\n#include(${VTK_USE_FILE})\n\nadd_library(usesvtk ...)\n# VTK_LIBRARIES is provided for compatibility, but not recommended.\n#target_link_libraries(usesvtk ${visibility} ${VTK_LIBRARIES})\ntarget_link_libraries(usesvtk ${visibility} VTK::CommonCore VTK::RenderingOpenGL2)\n\n# Rather than defining a single `VTK_DEFINITIONS` for use by all relevant\n# targets, the definitions are made as needed with the exact set needed for the\n# listed modules.\nvtk_module_autoinit(\n  TARGETS usesvtk\n  #MODULES ${VTK_LIBRARIES} # Again, works, but is not recommended.\n  MODULES VTK::CommonCore VTK::RenderingOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: VTK XML StructuredGrid Structure Example\nDESCRIPTION: Example of VTK XML format for StructuredGrid datasets. This format explicitly defines point coordinates while using the extent to implicitly define the cell structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"StructuredGrid\" ...>\n  <StructuredGrid WholeExtent=\"x1 x2 y1 y2 z1 z2\">\n    <Piece Extent=\"x1 x2 y1 y2 z1 z2\">\n    <PointData>...</PointData>\n    <CellData>...</CellData>\n    <Points>...</Points>\n    </Piece>\n  </StructuredGrid>\n</VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Basic VTK CMake Configuration\nDESCRIPTION: Basic CMake configuration for finding and linking VTK libraries. Shows how to use find_package to locate VTK components and link them to an executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_cpp.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n  .. list of vtk modules to link to\n)\n\n# your executable\nadd_executable(testExample ...)\n\n# link to required VTK libraries\ntarget_link_libraries(testExample\n  PRIVATE\n   ${VTK_LIBRARIES}\n)\n\nvtk_module_autoinit(\n  TARGETS testExample\n  MODULES ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK in virtual environment on Linux/macOS\nDESCRIPTION: Creates a Python virtual environment and installs VTK package locally for Linux and macOS systems\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_python.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv ./env\nsource ./env/bin/activate\npip install vtk\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing JSON in C++\nDESCRIPTION: This snippet demonstrates how to serialize a nlohmann::json object to a string and how to deserialize a JSON string back to a nlohmann::json object. It also shows pretty printing of a JSON object.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// create object from string literal\njson j = \"{ \\\"happy\\\": true, \\\"pi\\\": 3.141 }\"_json;\n\n// or even nicer with a raw string literal\nauto j2 = R\"(\n  {\n    \"happy\": true,\n    \"pi\": 3.141\n  }\n)\"_json;\n\n// explicit conversion to string\nstd::string s = j.dump();    // {\"happy\":true,\"pi\":3.141}\n\n// serialization with pretty printing\n// pass in the amount of spaces to indent\nstd::cout << j.dump(4) << std::endl;\n// {\n//     \"happy\": true,\n//     \"pi\": 3.141\n// }\n```\n\n----------------------------------------\n\nTITLE: Adding Options and Flags in CLI11 (C++)\nDESCRIPTION: Shows the primary methods for adding options, flags, and subcommands in CLI11. Demonstrates different function signatures that support binding to variables, callback functions, and various data types including primitives, containers, and custom types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Add options\napp.add_option(option_name, help_str=\"\")\n\napp.add_option(option_name,\n               variable_to_bind_to, // bool, char(see note), int, float, vector, enum, std::atomic, or string-like, or anything with a defined conversion from a string or that takes an int, double, or string in a constructor. Also allowed are tuples, std::array or std::pair. Also supported are complex numbers, wrapper types, and containers besides vectors of any other supported type.\n               help_string=\"\")\n\napp.add_option_function<type>(option_name,\n               function <void(const type &value)>, // type can be any type supported by add_option\n               help_string=\"\")\n\n// char as an option type is supported before 2.0 but in 2.0 it defaulted to allowing single non numerical characters in addition to the numeric values.\n\n// There is a template overload which takes two template parameters the first is the type of object to assign the value to, the second is the conversion type.  The conversion type should have a known way to convert from a string, such as any of the types that work in the non-template version.  If XC is a std::pair and T is some non pair type.  Then a two argument constructor for T is called to assign the value.  For tuples or other multi element types, XC must be a single type or a tuple like object of the same size as the assignment type\napp.add_option<typename T, typename XC>(option_name,\n               T &output, // output must be assignable or constructible from a value of type XC\n               help_string=\"\")\n\n// Add flags\napp.add_flag(option_name,\n             help_string=\"\")\n\napp.add_flag(option_name,\n             variable_to_bind_to, // bool, int, float, complex, containers, enum, std::atomic, or string-like, or any singular object with a defined conversion from a string like add_option\n             help_string=\"\")\n\napp.add_flag_function(option_name,\n             function <void(std::int64_t count)>,\n             help_string=\"\")\n\napp.add_flag_callback(option_name,function<void(void)>,help_string=\"\")\n\n// Add subcommands\nApp* subcom = app.add_subcommand(name, description);\n\nOption_group *app.add_option_group(name,description);\n```\n\n----------------------------------------\n\nTITLE: Complete VTK XML Example with PolyData\nDESCRIPTION: Complete example of VTK XML file defining a cube with scalar data on points and faces, including both parallel and serial specifications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n  <VTKFile type=\"PPolyData\" version=\"0.1\" byte_order=\"LittleEndian\">\n    <PPolyData GhostLevel=\"0\">\n      <PPointData Scalars=\"my_scalars\">\n        <PDataArray type=\"Float32\" Name=\"my_scalars\"/>\n      </PPointData>\n        <PCellData Scalars=\"cell_scalars\" Normals=\"cell_normals\">\n          <PDataArray type=\"Int32\" Name=\"cell_scalars\"/>\n           <PDataArray type=\"Float32\" Name=\"cell_normals\" NumberOfComponents=\"3\"/>\n        </PCellData>\n        <PPoints>\n          <PDataArray type=\"Float32\" NumberOfComponents=\"3\"/>\n        </PPoints>\n        <Piece Source=\"polyEx0.vtp\"/>\n    </PPolyData>\n  </VTKFile>\n\n\n  <?xml version=\"1.0\"?>\n    <VTKFile type=\"PolyData\" version=\"0.1\" byte_order=\"LittleEndian\">\n      <PolyData>\n        <Piece NumberOfPoints=\"8\" NumberOfVerts=\"0\" NumberOfLines=\"0\"\n               NumberOfStrips=\"0\" NumberOfPolys=\"6\">\n        <Points>\n          <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n            0 0 0 1 0 0 1 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 1\n          </DataArray>\n        </Points>\n        <PointData Scalars=\"my_scalars\">\n          <DataArray type=\"Float32\" Name=\"my_scalars\" format=\"ascii\">\n            0 1 2 3 4 5 6 7\n         </DataArray>\n        </PointData>\n        <CellData Scalars=\"cell_scalars\" Normals=\"cell_normals\">\n          <DataArray type=\"Int32\" Name=\"cell_scalars\" format=\"ascii\">\n           0 1 2 3 4 5\n          </DataArray>\n          <DataArray type=\"Float32\" Name=\"cell_normals\"\n                     NumberOfComponents=\"3\" format=\"ascii\">\n            0 0 -1 0 0 1 0 -1 0 0 1 0 -1 0 0 1 0 0\n          </DataArray>\n        </CellData>\n        <Polys>\n          <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n             0 1 2 3 4 5 6 7 0 1 5 4 2 3 7 6 0 4 7 3 1 2 6 5\n          </DataArray>\n          <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n             4 8 12 16 20 24\n          </DataArray>\n        </Polys>\n      </Piece>\n    </PolyData>\n   </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Connecting VTK pipeline with >> operator in Python\nDESCRIPTION: This snippet demonstrates the new Python API for connecting VTK pipeline objects using the `>>` operator. It provides a more concise and readable way to link a `vtkSphereSource` to a `vtkShrinkFilter`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/new-python-api-for-pipelines.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ns = vtkSphereSource()\nsr = vtkShrinkFilter()\ns >> sr\n```\n\n----------------------------------------\n\nTITLE: Accessing VTK Constants in Python\nDESCRIPTION: Demonstrates how to access various types of constants defined in VTK headers from Python. Shows accessing both preprocessor-defined constants and enum values from their respective modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n>>> from vtkmodules.vtkCommonCore import VTK_DOUBLE_MAX\n>>> VTK_DOUBLE_MAX\n1.0000000000000001e+299\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> vtkCommand.ErrorEvent\n39\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Qt Image Viewer CMake Project\nDESCRIPTION: Sets up a CMake project for a Qt-based image viewer using VTK libraries. Handles dependency checking for required VTK components (GUISupportQt, IOImage, InteractionImage, RenderingOpenGL2) and Qt Widgets. Configures build target with proper library linking and VTK module auto-initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/ImageViewer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(QtImageViewer)\n\nfind_package(VTK\n  COMPONENTS\n    GUISupportQt\n    IOImage\n    InteractionImage\n    RenderingOpenGL2\n    TestingCore)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nset(Srcs main.cxx)\n\nadd_executable(qtimageviewer\n  ${Srcs})\ntarget_link_libraries(qtimageviewer\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS qtimageviewer\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Installing VTK in virtual environment on Windows CMD\nDESCRIPTION: Creates a Python virtual environment and installs VTK package locally using Windows Command Prompt\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_python.md#2025-04-21_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\npython -m venv env\n.\\env\\activate.bat\npip install vtk\n```\n\n----------------------------------------\n\nTITLE: Converting between C++ std::vector and Python sequences\nDESCRIPTION: Examples of how C++ methods using std::vector types are wrapped to Python. Shows how a C++ method returning a vector is received as a tuple in Python and how Python sequences can be passed to C++ methods accepting vectors.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nconst std::vector<std::string>& GetPaths()\nstd::vector<std::string> GetPaths()\n```\n\nLANGUAGE: Python\nCODE:\n```\nGetPaths() -> Tuple[str]\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid SetPaths(const std::vector<std::string>& paths)\nvoid SetPaths(std::vector<std::string> paths)\n```\n\nLANGUAGE: Python\nCODE:\n```\nSetPaths(paths: Sequence[str]) -> None\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid GetPaths(std::vector<std::string>& paths)\n```\n\nLANGUAGE: Python\nCODE:\n```\nGetPaths(paths: MutableSequence[str]) -> None\n```\n\n----------------------------------------\n\nTITLE: Range-Based Map Iteration Example in C++\nDESCRIPTION: Demonstrates the recommended way to iterate over a map using range-based for loop with auto keyword, avoiding common pitfalls and unnecessary copies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nfor (const auto& item : some_map) {\n    const KeyType& key = item.first;\n    const ValType& value = item.second;\n    // The rest of the loop can now just refer to key and value,\n    // a reader can see the types in question, and we've avoided\n    // the too-common case of extra copies in this iteration.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Build Options\nDESCRIPTION: Configures various build options for VTK, including iOS and Android builds, WebGPU support, and shared library settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(VTK_IOS_BUILD \"Build vtk.framework for iOS\" OFF)\nmark_as_advanced(VTK_IOS_BUILD)\nif (VTK_IOS_BUILD)\n  include(vtkiOS)\n  return()\nendif()\n\noption(VTK_ANDROID_BUILD \"Build VTK for Android\" OFF)\nmark_as_advanced(VTK_ANDROID_BUILD)\nif (VTK_ANDROID_BUILD)\n  include(vtkAndroid)\n  return()\nendif()\n\ninclude(vtkCMakeBackports)\n\noption(VTK_WHEEL_BUILD \"Build in such a way that Python wheels are supported\" OFF)\nmark_as_advanced(VTK_WHEEL_BUILD)\nif (VTK_WHEEL_BUILD)\n  include(vtkWheelPreparation)\nendif ()\n\ninclude(CMakeDependentOption)\n# (vtk/vtk#19315) Enable by default after WebGPU support is completed.\noption(VTK_ENABLE_WEBGPU \"Enable the WebGPU experimental rendering backend.\" OFF)\n\ninclude(GNUInstallDirs)\n\nadd_library(vtkbuild INTERFACE)\nadd_library(VTK::vtkbuild ALIAS vtkbuild)\n\n# Choose static or shared libraries.\noption(BUILD_SHARED_LIBS \"Build VTK with shared libraries.\" ON)\nset(VTK_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})\nset(CMAKE_CXX_VISIBILITY_PRESET \"hidden\")\nset(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\n```\n\n----------------------------------------\n\nTITLE: Defining TOC Structure in Sphinx Documentation\nDESCRIPTION: Sphinx toctree directive defining the main navigation structure for VTK developer documentation, including sections for git workflows, testing procedures, dashboard usage, third-party management, and coding conventions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:titlesonly:\n:caption: Contents\n:maxdepth: 1\n\ngit/develop\ntesting\ngit/test\ngit/dashboard\ngit/thirdparty\ngit/thirdparty-projects\n\ngit/deprecation\nrelease_process\ncoding_conventions\nabout_this_documentation\n```\n\n----------------------------------------\n\nTITLE: Deserializer Function Signature in C++\nDESCRIPTION: Function signature for deserializing VTK class instances from nlohmann::json\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_serialization.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstatic void Deserialize_vtkClassName(const nlohmann::json&, vtkObjectBase*, vtkDeserializer*)\n```\n\n----------------------------------------\n\nTITLE: Template Alias Example in C++\nDESCRIPTION: Shows how to use template aliases instead of typedefs for better readability and consistency with normal declarations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ntemplate<typename T> using MyAllocList = std::list<T, MyAlloc<T>>;\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement Formatting in VTK C++\nDESCRIPTION: Demonstrates the required formatting for conditional statements using the modified Allman style with 2-space indentation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nif (test)\n{\n  clause\n}\n```\n\n----------------------------------------\n\nTITLE: Class Documentation Format in VTK C++\nDESCRIPTION: Shows the required Doxygen documentation format for class declarations in header files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n * @class vtkclassname\n * @brief one line description\n *\n * Longer description of class here.\n*/\n```\n\n----------------------------------------\n\nTITLE: Cloning VTK Source using Git\nDESCRIPTION: Commands to create a directory and clone the VTK repository with its submodules using Git\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/vtk\ngit clone --recursive https://gitlab.kitware.com/vtk/vtk.git ~/vtk/source\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module with CMake\nDESCRIPTION: This snippet adds a module to the VTK project using the `vtk_module_add_module` command in a CMake file. It specifies the module `VTK::IOSegY`, along with its classes and private classes. This configuration is crucial for the integration of the module within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOSegY\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes})\n```\n\n----------------------------------------\n\nTITLE: Handling Observer CallData in VTK Python\nDESCRIPTION: Shows how to handle the CallData parameter in VTK event callbacks by specifying the CallDataType attribute. Demonstrates both direct assignment and decorator-based methods for setting the CallDataType.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n>>> from vtkmodules.vtkCommonCore import vtkCommand, VTK_INT\n>>>\n>>> def onError(object, event, calldata):\n>>>     print('object: %s - event: %s - msg: %s' % (object.GetClassName(), event, calldata))\n>>>\n>>> onError.CallDataType = VTK_INT\n>>>\n>>> lt = vtkLookupTable()\n>>> lt.AddObserver(vtkCommand.ErrorEvent, onError)\n1\n>>> lt.SetTableRange(2,1)\nobject: vtkLookupTable - event: ErrorEvent - msg: ERROR:\nIn /home/user/VTK/Common/Core/vtkLookupTable.cxx, line 122\nvtkLookupTable (0x6b40b30): Bad table range: [2, 1]\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> from vtkmodules.util.misc import calldata_type\n>>>\n>>> @calldata_type(VTK_INT)\n>>> def onError(object, event, calldata):\n>>>     print('object: %s - event: %s - msg: %s' % (object.GetClassName(),\n                                                        event, calldata))\n```\n\n----------------------------------------\n\nTITLE: Creating Commits in a Topic Branch\nDESCRIPTION: Basic Git commands for editing files and creating commits in a topic branch.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ edit file1 file2 file3\n$ git add file1 file2 file3\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Building VTK Python Wheel with CMake and Ninja\nDESCRIPTION: Commands to configure, build and create a Python wheel for VTK. Requires CMake, Ninja build system, and the wheel package installed via pip.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_python_wheels.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncmake -GNinja -DVTK_WHEEL_BUILD=ON -DVTK_WRAP_PYTHON=ON path/to/vtk/source\nninja\npython3 setup.py bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: CTest Command Line Arguments for VTK Testing\nDESCRIPTION: Common command line arguments for controlling test execution with CTest, including filtering tests by name, running test subsets, and parallel test execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--R TestNameSubstringToInclude to choose tests by name\n\n--E TestNameSubstringToExclude to reject tests by name\n\n--I start,stop,step to run a portion of the tests\n\n--j N to run N tests simultaneously.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Unknown Symbol Resolver in ExprTk\nDESCRIPTION: Creates a custom Unknown Symbol Resolver (USR) that only accepts symbols with 'var_' prefix as variables. This helps prevent typos in expressions from being treated as valid variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_68\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\ntemplate <typename T>\nstruct my_usr final : public parser_t::unknown_symbol_resolver\n{\n   typedef typename parser_t::unknown_symbol_resolver usr_t;\n\n   bool process(const std::string& unknown_symbol,\n                typename usr_t::usr_symbol_type& st,\n                T& default_value,\n                std::string& error_message) override\n   {\n      if (0 != unknown_symbol.find(\"var_\"))\n      {\n         error_message = \"Invalid symbol: \" + unknown_symbol;\n         return false;\n      }\n\n      st = usr_t::e_usr_variable_type;\n      default_value = T(123.123);\n\n      return true;\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Threshold in vtkThreshold\nDESCRIPTION: Shows the new way to set thresholds in vtkThreshold using properties instead of deprecated methods.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvtkSmartPointer<vtkThreshold> threshold = vtkSmartPointer<vtkThreshold>::New();\n\n// Use these properties instead of deprecated methods\nthreshold->SetLowerThreshold(10.0);\nthreshold->SetUpperThreshold(20.0);\nthreshold->SetThresholdFunction(vtkThreshold::THRESHOLD_BETWEEN);\n```\n\n----------------------------------------\n\nTITLE: Basic Symbol Table and Expression Usage in C++\nDESCRIPTION: Demonstrates basic setup and usage of ExprTk's symbol table, expression, and parser components with variable manipulation and expression evaluation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\ntypedef exprtk::parser<double>       parser_t;\n\ndouble x = 0;\ndouble y = 0;\n\nsymbol_table_t symbol_table;\nexpression_t   expression;\nparser_t       parser;\n\nstd::string expression_string = \"x * y + 3\";\n\nsymbol_table.add_variable(\"x\",x);\nsymbol_table.add_variable(\"y\",y);\n\nexpression.register_symbol_table(symbol_table);\n\nparser.compile(expression_string,expression);\n\nx = 1.0;\ny = 2.0;\nexpression.value(); // 1 * 2 + 3\n\nx = 3.7;\nexpression.value(); // 3.7 * 2 + 3\n\ny = -9.0;\nexpression.value(); // 3.7 * -9 + 3\n\n// 'x * -9 + 3' for x in range of [0,100) in steps of 0.0001\nfor (x = 0.0; x < 100.0; x += 0.0001)\n{\n   expression.value(); // x * -9 + 3\n}\n```\n\n----------------------------------------\n\nTITLE: Building VTK on Unix Systems\nDESCRIPTION: Command to build VTK on Linux/macOS systems\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncmake --build ~/vtk/build\n```\n\n----------------------------------------\n\nTITLE: Cloning VTK Repository with Git\nDESCRIPTION: Commands to clone the VTK repository from GitLab and initialize its submodules. This creates a local copy of the entire VTK codebase.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/download.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://gitlab.kitware.com/vtk/vtk.git VTK\n$ cd VTK\n$ git submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Including nlohmann/json in C++ Code\nDESCRIPTION: Basic code snippet showing how to include the nlohmann/json library in C++ code and create a convenience alias for the json class.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\n#include <nlohmann/json.hpp>\n\n// for convenience\nusing json = nlohmann::json;\n```\n\n----------------------------------------\n\nTITLE: Installing VTK globally using pip\nDESCRIPTION: Simple installation of VTK package using pip package manager\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_python.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vtk\n```\n\n----------------------------------------\n\nTITLE: Executing Triple Array Dispatch By ValueType in C++\nDESCRIPTION: This example demonstrates how to execute a triple array dispatch using `vtkArrayDispatch::Dispatch3ByValueType`.  This dispatcher takes a vtkTypeList of ValueTypes for each array and restricts dispatch to only arrays in `vtkArrayDispatch::Arrays` that have one of the specified value types. This is useful when the array implementation is unknown, but the value type is known or restricted.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\n// Complete unknown:\nvtkDataArray *array1 = ...;\n// Some array holding unsigned chars:\nvtkDataArray *array2 = ...;\n// Some array holding either floats or doubles:\nvtkDataArray *array3 = ...;\n\n// Typedef the dispatch to a more manageable name:\ntypedef vtkArrayDispatch::Dispatch3ByValueType\n  <\n  vtkArrayDispatch::AllTypes,\n  vtkTypeList::Create<unsigned char>,\n  vtkArrayDispatch::Reals\n  > MyDispatch;\n\n// Execute the dispatch:\nMyDispatch::Execute(array1, array2, array3, someWorker);\n```\n\n----------------------------------------\n\nTITLE: Option Group Management in CLI11\nDESCRIPTION: Demonstrates methods for managing options within option groups\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\nogroup->add_option(option_pointer);\nogroup->add_options(option_pointer);\nogroup->add_options(option1,option2,option3,...);\n```\n\n----------------------------------------\n\nTITLE: Defining a Stateful Dispatch Functor in C++\nDESCRIPTION: This code snippet shows how to define a stateful dispatch functor in C++. The functor stores results (tuple and component indices) that are accessible to the caller after the functor's execution. The `operator()` is templated to handle arrays of a specific type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\n// Example of a stateful dispatch functor:\nstruct FindMax\n{\n  // Functor state, holds results that are accessible to the caller:\n  vtkIdType Tuple;\n  int Component;\n\n  // Set initial values:\n  FindMax() : Tuple(-1), Component(-1) {}\n\n  // Template method to set Tuple and Component ivars:\n  template <typename ArrayT>\n  void operator()(ArrayT *array)\n  {\n    /* Do stuff... */\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationStringVectorKey in VTK XML\nDESCRIPTION: Shows the XML structure for defining a vtkInformationStringVectorKey with multiple string values, including whitespace and newlines.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"StringVector\" location=\"XMLTestKey\" length=\"3\">\n  <Value index=\"0\">\n    First\n  </Value>\n  <Value index=\"1\">\n    Second (with whitespace!)\n  </Value>\n  <Value index=\"2\">\n    Third (with\nnewline!)\n  </Value>\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Build on Unix Systems\nDESCRIPTION: Commands to create build directory and configure VTK build on Linux/macOS\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/vtk/build\ncd ~/vtk/build\nccmake -GNinja ../path/to/vtk/source\n```\n\n----------------------------------------\n\nTITLE: Specialized Enum-to-JSON Conversion using NLOHMANN_JSON_SERIALIZE_ENUM in C++\nDESCRIPTION: This snippet demonstrates how to map enum values to JSON strings instead of integers using the NLOHMANN_JSON_SERIALIZE_ENUM macro. This approach provides more robust serialization when enum values might change over time.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n// example enum type declaration\nenum TaskState {\n    TS_STOPPED,\n    TS_RUNNING,\n    TS_COMPLETED,\n    TS_INVALID=-1,\n};\n\n// map TaskState values to JSON as strings\nNLOHMANN_JSON_SERIALIZE_ENUM( TaskState, {\n    {TS_INVALID, nullptr},\n    {TS_STOPPED, \"stopped\"},\n    {TS_RUNNING, \"running\"},\n    {TS_COMPLETED, \"completed\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying VTK Installation in Python\nDESCRIPTION: Python commands to verify successful VTK installation by importing the package and checking its version\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import vtk\n>>> print(vtk.__version__)\n9.2.6\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Validator by Name in CLI11 (C++)\nDESCRIPTION: This snippet demonstrates how to retrieve a named validator from an option. It uses the `get_validator` method with a name, which returns a pointer to the validator. If the validator is not found, it throws a `CLI::OptionNotFound` exception.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nopt->get_validator(name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecation Macros in C++\nDESCRIPTION: Demonstrates how to use VTK deprecation macros to mark classes, methods, and functions as deprecated. Shows proper include statement and syntax for deprecation annotations with reason messages.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include \"vtkDeprecation.h\" // Include the macros.\n\n// A deprecated class.\nclass VTK_DEPRECATED_IN_X_Y_Z(\"reason for deprecation\") OPT_EXPORT_MACRO oldClass {\npublic:\n  // A deprecated method.\n  VTK_DEPRECATED_IN_X_Y_Z(\"reason for deprecation\")\n  void oldMethod();\n};\n\n// A deprecated function.\nVTK_DEPRECATED_IN_X_Y_Z(\"reason for deprecation\")\nvoid oldFunction();\n```\n\n----------------------------------------\n\nTITLE: Using VTK Template Classes in Python\nDESCRIPTION: Demonstrates how to use C++ template classes through VTK's Python wrappers, showing template instantiation and key lookup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n>>> vtkSOADataArrayTemplate\n<template vtkCommonCorePython.vtkSOADataArrayTemplate>\n>>> vtkSOADataArrayTemplate.keys()\n['char', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int',\n'uint', 'int64', 'uint64', 'float32', 'float64']\n>>> c = vtkSOADataArrayTemplate['float64']\n>>> c\n<class 'vtkmodules.vtkCommonCore.vtkSOADataArrayTemplate_IdE'>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Build Settings in CMake\nDESCRIPTION: This snippet demonstrates how to set various build options for VTK using CMake variables. It includes common settings like shared libraries, CUDA support, and Python wrapping, as well as less common options for logging, testing, and specific features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build_settings.md#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Common build variables\nset(BUILD_SHARED_LIBS ON)\nset(VTK_USE_CUDA OFF)\nset(VTK_USE_MPI OFF)\nset(VTK_WRAP_PYTHON OFF)\n\n# Less common build variables\nset(VTK_BUILD_EXAMPLES OFF)\nset(VTK_ENABLE_LOGGING ON)\nset(VTK_LOGGING_TIME_PRECISION 3)\nset(VTK_BUILD_TESTING OFF)\nset(VTK_ENABLE_KITS OFF)\nset(VTK_ENABLE_WRAPPING ON)\nset(VTK_WRAP_JAVA OFF)\nset(VTK_JAVA_RELEASE_VERSION 8)\nset(VTK_WRAP_SERIALIZATION OFF)\nset(VTK_BUILD_MAVEN_PKG OFF)\nset(VTK_SMP_IMPLEMENTATION_TYPE \"Sequential\")\nset(VTK_ENABLE_CATALYST OFF)\nset(VTK_WEBASSEMBLY_64_BIT OFF)\nset(VTK_WEBASSEMBLY_EXCEPTIONS OFF)\nset(VTK_WEBASSEMBLY_THREADS OFF)\nset(VTK_TESTING_WASM_ENGINE \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for VTK in CMake\nDESCRIPTION: Sets up various CMake options for VTK build configuration, including 64-bit IDs, future const and bool usage, debug leaks, and object factory behavior. These options allow fine-tuning of VTK's build process and feature set.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SIZEOF_VOID_P GREATER 4)\n set(vtk_use_64bit_ids_default ON)\nelse ()\n set(vtk_use_64bit_ids_default OFF)\nendif ()\n\noption(VTK_USE_64BIT_IDS \"Build VTK with 64 bit ids\" \"${vtk_use_64bit_ids_default}\")\nmark_as_advanced(VTK_USE_64BIT_IDS)\n\noption(VTK_USE_FUTURE_CONST \"Adds more const to APIs. Opt-in because it may break compatibility\" OFF)\nmark_as_advanced(VTK_USE_FUTURE_CONST)\n\noption(VTK_USE_FUTURE_BOOL \"Changes some ints to bools. Opt-in because it may break compatibility\" OFF)\nmark_as_advanced(VTK_USE_FUTURE_BOOL)\n\noption(VTK_DEBUG_LEAKS \"Build leak checking support into VTK.\" OFF)\nmark_as_advanced(VTK_DEBUG_LEAKS)\n\ncmake_dependent_option(VTK_DEBUG_RANGE_ITERATORS\n  \"Detect usage errors with the for-range iterators (SLOW).\" OFF\n  \"CMAKE_BUILD_TYPE STREQUAL \\\"Debug\\\"\" OFF)\nmark_as_advanced(VTK_DEBUG_RANGE_ITERATORS)\ncmake_dependent_option(VTK_ALWAYS_OPTIMIZE_ARRAY_ITERATORS\n  \"Enable additional optimizations for array iterators in Debug builds.\" OFF\n  \"NOT VTK_DEBUG_RANGE_ITERATORS\" OFF)\nmark_as_advanced(VTK_ALWAYS_OPTIMIZE_ARRAY_ITERATORS)\n\noption(VTK_ALL_NEW_OBJECT_FACTORY\n  \"Build all vtkObject derived classes with object factory new methods.\" OFF)\nmark_as_advanced(VTK_ALL_NEW_OBJECT_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Including VTK Documentation Sections\nDESCRIPTION: Markdown include directives that import various sections of the VTK documentation with heading offset adjustments\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./system_requirements.md\n:heading-offset: 1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./using_python.md\n:heading-offset: 1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./using_jupyter.md\n:heading-offset: 1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./using_cpp.md\n:heading-offset: 1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./using_js.md\n:heading-offset: 1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./using_webassembly.md\n:heading-offset: 1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ./using_frameworks.md\n:heading-offset: 1\n```\n\n----------------------------------------\n\nTITLE: Working with Enum Classes in VTK\nDESCRIPTION: This code snippet provides an example of using an enum class in VTK, explaining how to access and validate its members within the class's namespace. VTK must be installed for this to work.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n    >>> from vtkmodules.vtkCommonCore import vtkEventDataAction\n    >>> vtkEventDataAction.Press\n    1\n    >>> isinstance(vtkEventDataAction.Press, vtkEventDataAction)\n    True\n```\n\n----------------------------------------\n\nTITLE: Implementing Observer Callbacks in VTK Python\nDESCRIPTION: Demonstrates how to create and register observer callback functions in Python to respond to VTK events. Shows the basic pattern for setting up an observer that prints information when a Modified event occurs.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n>>> def onObjectModified(object, event):\n>>>     print('object: %s - event: %s' % (object.GetClassName(), event))\n>>>\n>>> o = vtkObject()\n>>> o.AddObserver(vtkCommand.ModifiedEvent, onObjectModified)\n1\n>>> o.Modified()\nobject: vtkObject - event: ModifiedEvent\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Data Loading in vtkGLTFDocumentLoader\nDESCRIPTION: New API methods added to vtkGLTFDocumentLoader for controlling which types of data are loaded from a GLTF file. These methods allow toggling the loading of animations, images, and skin matrices independently.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/gltf-toggle-data.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nSetLoadAnimation(bool)  // Load animation keyframes (default: true)\nSetLoadImages(bool)     // Load model images (default: true)\nSetLoadSkinMatrix(bool) // Load inverse bind matrices for model Skin (default: true)\n```\n\n----------------------------------------\n\nTITLE: Parsing and Modifying JSON with RapidJSON in C++\nDESCRIPTION: This example demonstrates the basic workflow of using RapidJSON: parsing a JSON string into a Document object, modifying a value in the DOM, and finally serializing it back to a JSON string. It uses the Document, Writer, and StringBuffer classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/rapidjson/fidesrapidjson/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// rapidjson/example/simpledom/simpledom.cpp`\n#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n#include <iostream>\n\nusing namespace rapidjson;\n\nint main() {\n    // 1. Parse a JSON string into DOM.\n    const char* json = \"{\\\"project\\\":\\\"rapidjson\\\",\\\"stars\\\":10}\";\n    Document d;\n    d.Parse(json);\n\n    // 2. Modify it by DOM.\n    Value& s = d[\"stars\"];\n    s.SetInt(s.GetInt() + 1);\n\n    // 3. Stringify the DOM\n    StringBuffer buffer;\n    Writer<StringBuffer> writer(buffer);\n    d.Accept(writer);\n\n    // Output {\"project\":\"rapidjson\",\"stars\":11}\n    std::cout << buffer.GetString() << std::endl;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing VTK pipeline with update() and output in Python\nDESCRIPTION: This snippet demonstrates how to execute a VTK pipeline and access its output using the `update()` and `output` methods. The pipeline is defined using the `>>` operator, executed using `update()`, and the resulting output data is stored in the `result` variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/new-python-api-for-pipelines.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nresult = (vtkSphereSource() >> vtkShrinkFilter()).update().output\n```\n\n----------------------------------------\n\nTITLE: Partition Size Calculations for PolyData in HDF5\nDESCRIPTION: Formulas for calculating the size of various components (Points, Connectivity, Offsets, PointData, CellData) for a specific partition in the PolyData format. These calculations are used to determine the amount of data to read for each partition, with separate calculations for different cell categories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nPoints: NumberOfPoints[i] * 3 * sizeof(Points[0][0])\n{CellCategory}/Connectivity: {CellCategory}/NumberOfConnectivityIds[i] * sizeof({CellCategory}/Connectivity[0])\n{CellCategory}/Offsets: ({CellCategory}/NumberOfCells[i] + 1) * sizeof({CellCategory}/Offsets[0])\nPointData: NumberOfPoints[i] * sizeof(point_array_k[0])\nCellData: (∑j {CellCategory_j}/NumberOfCells[i]) * sizeof(cell_array_k[0])\n```\n\n----------------------------------------\n\nTITLE: Installing VTK for Python using pip\nDESCRIPTION: Commands for installing VTK using pip package manager. This provides a basic VTK installation with core functionality, though it won't include specialized modules that depend on external libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vtk\n```\n\n----------------------------------------\n\nTITLE: Setting up a WebGPU Compute Shader in VTK with C++\nDESCRIPTION: This C++ snippet demonstrates the setup, configuration, and execution of a compute shader using vtkWebGPUComputePipeline and vtkWebGPUComputePass. The snippet covers creation of input and output buffers, assigning shader source and entry points, and dispatching compute passes. Essential functions like AddBuffer(), SetWorkgroups(), Dispatch(), ReadBufferFromGPU(), and Update() are used to manage and synchronize data between CPU and GPU, ensuring proper execution and data retrieval.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::vector<float> inputValues;\n// ...\n// Fill the input vector with data\n// ...\n\n// Creating the input buffer to the compute shader\nvtkNew<vtkWebGPUComputeBuffer> inputBuffer;\ninputBuffer->SetGroup(0);\ninputBuffer->SetBinding(0);\ninputBuffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_ONLY_COMPUTE_STORAGE);\ninputBuffer->SetData(inputValues);\ninputBuffer->SetDataType(vtkWebGPUComputeBuffer::BufferDataType::STD_VECTOR);\n\n// Creating the output buffer of the compute shader\nvtkNew<vtkWebGPUComputeBuffer> outputBuffer;\noutputBuffer->SetGroup(0);\noutputBuffer->SetBinding(1);\noutputBuffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_WRITE_MAP_COMPUTE_STORAGE);\noutputBuffer->SetByteSize(inputValues.size() * sizeof(float));\n\n// Creating the compute pipeline\nvtkNew<vtkWebGPUComputePipeline> computePipeline;\nvtkSmartPointer<vtkWebGPUComputePass> computePass = computePipeline->CreateComputePass();\ncomputePass->SetShaderSource(computeShaderSource);\ncomputePass->SetShaderEntryPoint(\"computeMainFunction\");\ncomputePass->AddBuffer(inputBuffer);\n// Getting the index of the output buffer for later mapping with ReadBufferFromGPU()\nint outputBufferIndex = computePipeline->AddBuffer(outputBuffer);\n\ncomputePass->SetWorkgroups(workgroupsX, workgroupsY, workgroupsZ);\n\n// We\\'ve set up everything, ready to dispatch\ncomputePass->Dispatch();\n\n// Vector that will contain the results of the compute shader\nstd::vector<float> outputData(outputBufferSize);\n\n// Function called by ReadBufferFromGPU() whose purpose is to copy\n// the data into your result buffer (outputData here).\nauto onBufferMapped = [](const void* mappedData, void* userdata)\n{\n  std::vector<float>* outputDataVector = reinterpret_cast<std::vector<float>*>(userdata);\n\n  // You must know in advance how many elements you\\'re going to read from the mappedData.\n  // We\\'re using the size of outputDataVector here because we resized it to just the right\n  // size so that\\'s just the right number of elements. If you don\\'t want or can\\'t use a\n  // std::vector for that purpose, you can still pass the number of elements as the third\n  // argument of ReadBufferFromGPU().\n  vtkIdType elementCount = outputDataVector->size();\n\n  const float* mappedDataAsF32 = static_cast<const float*>(mappedData);\n  for (int i = 0; i < elementCount; i++)\n  {\n    (*outputDataVector)[i] = mappedDataAsF32[i];\n  }\n};\n\n// Mapping the buffer on the CPU to get the results from the GPU\ncomputePass->ReadBufferFromGPU(outputBufferIndex, onBufferMapped, &outputData);\n// Update() to actually execute WebGPU commands. Without this, the compute shader won\\'t execute.\n// Update() is called on the compute pipeline and not the compute pass because it is the\n// compute pipeline that orchestrates the execution of all compute passes\ncomputePipeline->Update();\n\n// ... Do something with the output data\n```\n\n----------------------------------------\n\nTITLE: Executing Compute Pass in VTK WebGPU Renderer\nDESCRIPTION: This code snippet illustrates how the `ComputePass()` method executes the compute pipelines before rendering, allowing the render stage to utilize the results of the compute operations. It iterates through the compute pipelines and dispatches them.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nvoid vtkWebGPURenderer::ComputePass()\n{\n  // Executing the compute pipelines before the rendering so that the\n  // render can take the compute pipelines results into account\n  for (vtkWebGPUComputePipeline* pipeline : this->ComputePipelines)\n  {\n    pipeline->Dispatch();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOImage Module with Image Readers and Writers\nDESCRIPTION: This CMake script configures the VTK IOImage module by defining class lists for various image format readers and writers, setting private headers, and registering the module in the VTK framework. It includes support for common formats like BMP, JPEG, PNG, TIFF, as well as specialized medical image formats such as DICOM and NIFTI.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBMPReader\n  vtkBMPWriter\n  vtkDEMReader\n  vtkDICOMImageReader\n  vtkGESignaReader\n  vtkHDRReader\n  vtkImageExport\n  vtkImageImport\n  vtkImageImportExecutive\n  vtkImageReader\n  vtkImageReader2\n  vtkImageReader2Collection\n  vtkImageReader2Factory\n  vtkImageWriter\n  vtkJPEGReader\n  vtkJPEGWriter\n  vtkJSONImageWriter\n  vtkMedicalImageProperties\n  vtkMedicalImageReader2\n  vtkMetaImageReader\n  vtkMetaImageWriter\n  vtkMRCReader\n  vtkNIFTIImageHeader\n  vtkNIFTIImageReader\n  vtkNIFTIImageWriter\n  vtkNrrdReader\n  vtkOMETIFFReader\n  vtkPNGReader\n  vtkPNGWriter\n  vtkPNMReader\n  vtkPNMWriter\n  vtkPostScriptWriter\n  vtkSEPReader\n  vtkSLCReader\n  vtkTGAReader\n  vtkTIFFReader\n  vtkTIFFWriter\n  vtkVolume16Reader\n  vtkVolumeReader)\n\nset(private_headers\n  vtkNIFTIImagePrivate.h\n  vtkTIFFReaderInternal.h)\n\nvtk_module_add_module(VTK::IOImage\n  PRIVATE_HEADERS ${private_headers}\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOImage)\n```\n\n----------------------------------------\n\nTITLE: Enabling VTK Modules with CMake\nDESCRIPTION: CMake configuration command to enable specific VTK modules during the build configuration stage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/modules/index.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DVTK_MODULE_ENABLE_<module name>=WANT ...\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Math Module Classes\nDESCRIPTION: Defines the main classes to be included in the VTK Common Math module, including numerical solvers, matrices, and mathematical utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAmoebaMinimizer\n  vtkFFT\n  vtkFunctionSet\n  vtkInitialValueProblemSolver\n  vtkMatrix3x3\n  vtkMatrix4x4\n  vtkPolynomialSolversUnivariate\n  vtkQuaternionInterpolator\n  vtkRungeKutta2\n  vtkRungeKutta4\n  vtkRungeKutta45\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ghost Objects in VTK with Python\nDESCRIPTION: This Python code demonstrates the concept of ghost objects in VTK. It creates a `vtkObject`, adds a custom attribute (`tag`), stores it in a `vtkVariantArray`, and then deletes the Python object. The attribute is preserved in the ghost object until the C++ object is deleted.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nobj = vtkObject()\nobj.tag = 'FirstObject'\nva = vtkVariantArray()\nva.InsertNextValue(obj)\ndel obj\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-touch Gestures with PinchHandler in QML for VTK\nDESCRIPTION: This snippet demonstrates how to set up a PinchHandler in QML to enable multi-touch gestures for a QQuickVTKItem. It shows how to connect the handler's signals to the item's slots for translation, scaling, and rotation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/qml-multitouch.md#2025-04-21_snippet_0\n\nLANGUAGE: QML\nCODE:\n```\nQVTKItem{\n  id: qvtkitem\n  anchors.fill: parent\n}\n\nPinchHandler {\n  id: pch\n  target: null\n  onTranslationChanged: (delta) => qvtkitem.pinchHandlerTranslate(pch.centroid.position, delta)\n  onScaleChanged: (delta) => qvtkitem.pinchHandlerScale(pch.centroid.position, delta)\n  onRotationChanged: (delta) => qvtkitem.pinchHandlerRotate(pch.centroid.position, delta)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Module Sources with New System (CMake)\nDESCRIPTION: Example of how to declare source files for a VTK module using the new module system in CMake. It shows the explicit declaration of different types of source files and handling of optional dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkPublicClass)\nset(private_classes\n  vtkPrivateClass)\nset(sources\n  helper.cpp\n  public_helper.cpp\n  vtkImplSource.cxx)\nset(headers\n  public_header.h\n  public_helper.h\n  template.h)\nset(private_headers\n  helper.h\n  private_template.h)\n\nset(template_classes\n  vtkPublicTemplate)\nset(private_template_classes\n  vtkPrivateTemplate)\nset(templates\n  template.tcc)\nset(private_templates\n  private_template.tcc)\n\n# Optional dependencies are detected as targets.\nif (TARGET vtkSomeDep)\n  # Optional classes may not be public (though there's no way to actually\n  # enforce it, optional dependencies are always treated as private.\n  list(APPEND private_classes\n    vtkOptional)\nendif ()\n\nvtk_module_add_module(vtkModuleName\n  # File pairs which follow VTK's conventions. The headers will be wrapped and\n  # installed.\n  CLASSES ${classes}\n  # File pairs which follow VTK's conventions, but are not for use outside the\n  # module.\n  PRIVATE_CLASSES ${private_classes}\n  # Standalone sources (those without headers or which do not follow VTK's\n  # conventions).\n  SOURCES ${sources}\n  # Standalone headers (those without sources or which do not follow VTK's\n  # conventions). These will be installed.\n  HEADERS ${public_headers}\n  # Standalone headers (those without sources or which do not follow VTK's\n  # conventions), but are not for use outside the module.\n  PRIVATE_HEADERS ${private_headers}\n\n  # Templates are also supported.\n\n  # Template file pairs which follow VTK's conventions. Both files will be\n  # installed (only the headers will be wrapped).\n  TEMPLATE_CLASSES ${template_classes}\n  # Template file pairs which follow VTK's conventions, but are not for use\n  # outside the module.\n  PRIVATE_TEMPLATE_CLASSES ${private_template_classes}\n  # Standalone template files (those without headers or which do not follow\n  # VTK's conventions). These will be installed.\n  TEMPLATES ${templates}\n  # Standalone template files (those without headers or which do not follow\n  # VTK's conventions), but are not for use outside the module.\n  PRIVATE_TEMPLATES ${private_templates}\n)\n```\n\n----------------------------------------\n\nTITLE: Converting between C++ Smart Pointers and Python Objects\nDESCRIPTION: Shows how C++ vtkSmartPointer<T> is automatically converted to type T objects in Python. In Python, the smart pointer appears the same as the object it points to, but maintains reference counting under the hood.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nvtkSmartPointer<vtkObject> TakeObject()\n```\n\nLANGUAGE: Python\nCODE:\n```\nTakeObject() -> vtkObject\n```\n\nLANGUAGE: C++\nCODE:\n```\nstd::vector<vtkSmartPointer<vtkObject>> GetObjects()\n```\n\nLANGUAGE: Python\nCODE:\n```\nGetObject() -> Tuple[vtkObject]\n```\n\n----------------------------------------\n\nTITLE: GitLab Push Dry Run Command\nDESCRIPTION: Example of using git gitlab-push command with dry-run option to preview data object pushing to GitLab.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git gitlab-push --dry-run --no-topic\n*       refs/data/SHA512/477e6028...:refs/data/SHA512/477e6028...   [new branch]\nPushed refs/data/SHA512/477e6028... and removed local ref.\n```\n\n----------------------------------------\n\nTITLE: Unstructured Grid Example in VTK Legacy Format\nDESCRIPTION: An example of a VTK legacy format unstructured grid file. The file contains point coordinates, cell definitions, cell types, and both point and cell data attributes including scalars, vectors, and a custom lookup table.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_9\n\nLANGUAGE: plain text\nCODE:\n```\n# vtk DataFile Version 2.0\nUnstructured Grid Example\nASCII\nDATASET UNSTRUCTURED_GRID\n\nPOINTS 27 float\n0 0 0  1 0 0  2 0 0  0 1 0  1 1 0  2 1 0\n0 0 1  1 0 1  2 0 1  0 1 1  1 1 1  2 1 1\n0 1 2  1 1 2  2 1 2  0 1 3  1 1 3  2 1 3\n0 1 4  1 1 4  2 1 4  0 1 5  1 1 5  2 1 5\n0 1 6  1 1 6  2 1 6\n\nCELLS 11 60\n8 0 1 4 3 6 7 10 9\n8 1 2 4 5 7 8 10 11\n4 6 10 9 12\n4 11 14 10 13\n6 15 16 17 14 13 12\n6 18 15 19 16 20 17\n4 22 23 20 19\n3 21 22 18\n3 22 19 18\n2 26 25\n1 24\n\nCELL_TYPES 11\n12\n11\n10\n8\n7\n6\n9\n5\n4\n3\n1\n\nPOINT_DATA 27\nSCALARS scalars float 1\nLOOKUP_TABLE default\n0.0 1.0 2.0 3.0 4.0 5.0\n6.0 7.0 8.0 9.0 10.0 11.0\n12.0 13.0 14.0 15.0 16.0 17.0\n18.0 19.0 20.0 21.0 22.0 23.0\n24.0 25.0 26.0\n\nVECTORS vectors float\n1 0 0  1 1 0  0 2 0  1 0 0  1 1 0  0 2 0\n1 0 0  1 1 0  0 2 0  1 0 0  1 1 0  0 2 0\n0 0 1  0 0 1  0 0 1  0 0 1  0 0 1  0 0 1\n0 0 1  0 0 1  0 0 1  0 0 1  0 0 1  0 0 1\n0 0 1  0 0 1  0 0 1\n\nCELL_DATA 11\nSCALARS scalars float 1\nLOOKUP_TABLE CellColors\n0.0 1.0 2.0 3.0 4.0 5.0\n6.0 7.0 8.0 9.0 10.0\n\nLOOKUP_TABLE CellColors 11\n.4 .4 1 1\n.4 1 .4 1\n.4 1 1 1\n1 .4 .4 1\n1 .4 1 1\n1 1 .4 1\n1 1 1 1\n1 .5 .5 1\n.5 1 .5 1\n.5 .5 .5 1\n1 .5 .4 1\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Features and Dependencies\nDESCRIPTION: Sets up various VTK features and dependencies, including MPI support, Python threading, CUDA, Kokkos, logging, and Catalyst support.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\noption(VTK_USE_MPI \"Support MPI\" OFF)\n\noption(VTK_SERIAL_TESTS_USE_MPIEXEC \"Used on HPC to run serial tests on compute nodes\" OFF)\nmark_as_advanced(VTK_SERIAL_TESTS_USE_MPIEXEC)\n\n# For platforms that don't support Python threads (do any exist?)\noption(VTK_NO_PYTHON_THREADS \"Disable Python Threads support\" OFF)\nmark_as_advanced(VTK_NO_PYTHON_THREADS)\n# This setting must be ON for Python concurrency\ncmake_dependent_option(VTK_PYTHON_FULL_THREADSAFE \"Wrap all Python calls with the GIL\" ON\n  \"NOT VTK_NO_PYTHON_THREADS\" OFF)\nmark_as_advanced(VTK_PYTHON_FULL_THREADSAFE)\n\n#-----------------------------------------------------------------------------\n# Add an option to enable memkind\nif (UNIX AND NOT APPLE)\n  option(VTK_USE_MEMKIND \"Build support for extended memory\" OFF)\nendif()\n\n#-----------------------------------------------------------------------------\n# Add an option to enable/disable components that have CUDA.\noption(VTK_USE_CUDA \"Support CUDA compilation\" OFF)\nif(VTK_USE_CUDA)\n  # This needs to be a top level flag as enable_language needs\n  # to be called from CMake entry point for variables to have\n  # the correct scope.\n  enable_language(CUDA)\nendif()\n\n#-----------------------------------------------------------------------------\n# Add an option to enable/disable KOKKOS support.\ncmake_dependent_option(VTK_USE_KOKKOS \"Support KOKKOS backend accelerator\" OFF\n  \"CMAKE_VERSION VERSION_GREATER_EQUAL 3.21;NOT VTK_USE_CUDA\" OFF)\nmark_as_advanced(VTK_USE_KOKKOS)\n\n#-----------------------------------------------------------------------------\n# Add an option to enable/disable logging support.\noption(VTK_ENABLE_LOGGING \"Enable logging support.\" ON)\nmark_as_advanced(VTK_ENABLE_LOGGING)\n\nset(VTK_LOGGING_TIME_PRECISION \"3\"\n  CACHE STRING \"Precision of loguru scope timers. 3=ms, 6=us, 9=ns\")\nmark_as_advanced(VTK_LOGGING_TIME_PRECISION)\nset(known_logging_precisions 3 6 9)\nset_property(CACHE VTK_LOGGING_TIME_PRECISION\n  PROPERTY\n    STRINGS ${known_logging_precisions})\n\n#-----------------------------------------------------------------------------\n# Add an option to enable/disable catalyst2 support.\noption(VTK_ENABLE_CATALYST \"Build catalyst-dependent modules, including the VTK catalyst implementation.\" OFF)\nmark_as_advanced(VTK_ENABLE_CATALYST)\n\n#-----------------------------------------------------------------------------\n# Add an option to enable/disable SPDX generation\n# Remove the \"Experimental\" once https://gitlab.kitware.com/vtk/vtk/-/issues/18999 is addressed\noption(VTK_GENERATE_SPDX \"Generate SPDX file for each module.\" OFF)\nmark_as_advanced(VTK_GENERATE_SPDX)\n\ninclude(vtkEncodeString)\n```\n\n----------------------------------------\n\nTITLE: Comparing Printf and Iostreams Formatting in C++\nDESCRIPTION: This snippet compares the syntax for formatting a floating-point number using printf and iostreams in C++.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nstd::cout << std::setprecision(2) << std::fixed << 1.23456 << \"\\n\";\n```\n\nLANGUAGE: C++\nCODE:\n```\nprintf(\"%.2f\\n\", 1.23456);\n```\n\n----------------------------------------\n\nTITLE: Implementing a FindMax Worker with vtkArrayDispatch in C++\nDESCRIPTION: This code snippet demonstrates a templated FindMax worker struct that locates the maximum value in an array using vtkArrayDispatch. It identifies the tuple and component coordinates of the maximum value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n// Stores the tuple/component coordinates of the maximum value:\nstruct FindMax\n{\n  vtkIdType Tuple; // Result\n  int Component; // Result\n\n  FindMax() : Tuple(-1), Component(-1) {}\n\n  template <typename ArrayT>\n  void operator()(ArrayT *array)\n  {\n    // The type to use for temporaries, and a temporary to store\n    // the current maximum value:\n    typedef typename ArrayT::ValueType ValueType;\n    ValueType max = std::numeric_limits<ValueType>::min();\n\n    // Iterate through all tuples and components, noting the location\n    // of the largest element found.\n    vtkIdType numTuples = array->GetNumberOfTuples();\n    int numComps = array->GetNumberOfComponents();\n    for (vtkIdType tupleIdx = 0; tupleIdx < numTuples; ++tupleIdx)\n      {\n      for (int compIdx = 0; compIdx < numComps; ++compIdx)\n        {\n        if (max < array->GetTypedComponent(tupleIdx, compIdx))\n          {\n          max = array->GetTypedComponent(tupleIdx, compIdx);\n          this->Tuple = tupleIdx;\n          this->Component = compIdx;\n          }\n        }\n      }\n  }\n};\n\nvoid someFunction(vtkDataArray *array)\n{\n  FindMax maxWorker;\n  vtkArrayDispatch::Dispatch::Execute(array, maxWorker);\n  // Do work using maxWorker.Tuple and maxWorker.Component...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationDoubleVectorKey in VTK XML\nDESCRIPTION: Illustrates the XML structure for defining a vtkInformationDoubleVectorKey with multiple double values, each specified with an index.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"DoubleVector\" location=\"XMLTestKey\" length=\"3\">\n  <Value index=\"0\">\n    1\n  </Value>\n  <Value index=\"1\">\n    90\n  </Value>\n  <Value index=\"2\">\n    260\n  </Value>\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CommonDataModel Module Classes\nDESCRIPTION: Defines the main list of VTK classes that are part of the CommonDataModel module, including data structures, locators, geometric primitives, and iterators.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAMRBox\n  vtkAMRUtilities\n  vtkAbstractCellArray\n  # ... additional classes ...\n  vtkUniformGridAMRDataIterator)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of scnlib for Reading Input from stdin in C++\nDESCRIPTION: Demonstrates how to read two integers from standard input using scnlib, with error handling and output formatting. The example shows the basic pattern of using scn::prompt to read values according to a format string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <scn/scan.h>\n#include <print> // for std::println (C++23)\n\nint main() {\n    // Read two integers from stdin\n    // with an accompanying message\n    if (auto result =\n            scn::prompt<int, int>(\"What are your two favorite numbers? \", \"{} {}\")) {\n        auto [a, b] = result->values();\n        std::println(\"Oh, cool, {} and {}!\", a, b);\n    } else {\n        std::println(stderr, \"Error: {}\", result.error().msg());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing VTK Object Information for Debugging\nDESCRIPTION: Example showing how to print VTK object information for debugging. When print() is called on a VTK object, the C++ PrintSelf() method is invoked to display useful debugging information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> o = vtkObject()\n>>> print(o)\nvtkObject (0x55858308a210)\n  Debug: Off\n  Modified Time: 85\n  Reference Count: 1\n  Registered Events: (none)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Tests with Different Validation Methods\nDESCRIPTION: Example of adding tests with various image comparison methods using CMake configuration\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/image-testing-framework.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(myModuleCxxTests tests\n  Test1.cxx, LOOSE_VALID\n  Test2.cxx # TIGHT_VALID by default\n  Test3.cxx, LEGACY_VALID)\n```\n\n----------------------------------------\n\nTITLE: Chaining Compute Passes with WebGPU in C++\nDESCRIPTION: This snippet sets up two compute passes in a WebGPU compute pipeline. The first pass multiplies elements from two input vectors, and the second pass adds a constant to the results of the first pass. Dependencies include `vtkWebGPUComputeBuffer` for buffer management and `vtkWebGPUComputePipeline` for pass execution. Inputs are vectors of data, outputting a modified vector on the CPU.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nconst int DATA_SIZE = 1000;\n\nconst char* secondPassShader = R\"(\n@group(0) @binding(0) var<storage, read_write> inputOutput: array<f32>;\n\n@compute @workgroup_size(32, 1, 1)\nfn computeFunctionAdd(@builtin(global_invocation_id) id: vec3<u32>)\n{\n    if (id.x >= arrayLength(&inputOutput))\n    {\n        return;\n    }\n\n    inputOutput[id.x] = inputOutput[id.x] + 42.0f;\n})\";\n\nconst char* firstPassShader = R\"(\n@group(0) @binding(0) var<storage, read> inputVector1: array<i32>;\n@group(0) @binding(1) var<storage, read> inputVector2: array<f32>;\n@group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n\n@compute @workgroup_size(32, 1, 1)\nfn computeFunction(@builtin(global_invocation_id) id: vec3<u32>)\n{\n    if (id.x >= arrayLength(&inputVector1))\n    {\n        return;\n    }\n\n    outputData[id.x] = f32(inputVector1[id.x]) * inputVector2[id.x];\n})\";\n\n// This first vector will be using a vtkDataArray as its data source\nvtkNew<vtkIntArray> inputDataArray;\n// Fill inputDataArray ...\n\n// The second input to the compute pass uses a std::vector.\nstd::vector<float> inputVector2Values(DATA_SIZE);\n// Fill inputVector2Values...\n\n// Creating the input buffer to the compute pass\nvtkNew<vtkWebGPUComputeBuffer> inputValues1Buffer;\ninputValues1Buffer->SetLabel(\"First input buffer\");\ninputValues1Buffer->SetGroup(0);\ninputValues1Buffer->SetBinding(0);\ninputValues1Buffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_ONLY_COMPUTE_STORAGE);\ninputValues1Buffer->SetDataType(vtkWebGPUComputeBuffer::BufferDataType::VTK_DATA_ARRAY);\ninputValues1Buffer->SetData(inputDataArray);\n\n// Creating the second input buffer for the compute pass\nvtkNew<vtkWebGPUComputeBuffer> inputValues2Buffer;\ninputValues2Buffer->SetLabel(\"Second input buffer\");\ninputValues2Buffer->SetGroup(0);\ninputValues2Buffer->SetBinding(1);\ninputValues2Buffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_ONLY_COMPUTE_STORAGE);\ninputValues2Buffer->SetDataType(vtkWebGPUComputeBuffer::BufferDataType::STD_VECTOR);\ninputValues2Buffer->SetData(inputVector2Values);\n\n// Creating the output buffer to the compute pass\nvtkNew<vtkWebGPUComputeBuffer> outputBuffer;\noutputBuffer->SetLabel(\"Output buffer\");\noutputBuffer->SetGroup(0);\noutputBuffer->SetBinding(2);\noutputBuffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_WRITE_MAP_COMPUTE_STORAGE);\noutputBuffer->SetByteSize(DATA_SIZE * sizeof(float));\n\n// Creating the compute pipeline\nvtkNew<vtkWebGPUComputePipeline> computePipeline;\n// Creating the compute pass\nvtkSmartPointer<vtkWebGPUComputePass> multiplyComputePass = computePipeline->CreateComputePass();\n\n// Configuring the compute pass\nmultiplyComputePass->SetShaderSource(firstPassShader);\nmultiplyComputePass->SetShaderEntryPoint(\"computeFunction\");\nmultiplyComputePass->AddBuffer(inputValues1Buffer);\nmultiplyComputePass->AddBuffer(inputValues2Buffer);\nmultiplyComputePass->AddBuffer(outputBuffer);\n\nvtkSmartPointer<vtkWebGPUComputePass> addComputePass = computePipeline->CreateComputePass();\naddComputePass->SetShaderSource(secondPassShader);\naddComputePass->SetShaderEntryPoint(\"computeFunctionAdd\");\n// Setting the output buffer (of the first compute pass) on the (0, 0) binding point of\n// the second pass\noutputBuffer->SetGroup(0);\noutputBuffer->SetBinding(0);\n// Using the output buffer of the first as the input and output (we're going to read and write\n// from it) of the second pass. We're also storing its index because we're going to need the\n// index when reading the buffer from the GPU back to the CPU\nint outputBufferIndex = addComputePass->AddBuffer(outputBuffer);\n\n// Dispatching the compute with\nint nbXGroups = std::ceil(DATA_SIZE / 32.0f);\nmultiplyComputePass->SetWorkgroups(nbXGroups, 1, 1);\nmultiplyComputePass->Dispatch();\n\naddComputePass->SetWorkgroups(nbXGroups, 1, 1);\naddComputePass->Dispatch();\n\n// Output buffer for the result data\nstd::vector<float> outputData;\noutputData.resize(DATA_SIZE);\n\nauto onBufferMapped = [](const void* mappedData, void* userdata) {\n  std::vector<float>* out = reinterpret_cast<std::vector<float>*>(userdata);\n  vtkIdType elementCount = out->size();\n\n  const float* mappedDataTyped = static_cast<const float*>(mappedData);\n  for (int i = 0; i < elementCount; i++)\n  {\n    (*out)[i] = mappedDataTyped[i];\n  }\n};\n\n// Mapping the buffer on the CPU to get the results from the GPU\naddComputePass->ReadBufferFromGPU(outputBufferIndex, onBufferMapped, &outputData);\n// Update() the compute pipeline to execute commands in the order they were emitted:\n// 1) multiplyComputePass->Dispatch()\n// 2) addComputePass->Dispatch()\n// 3) addComputePass->ReadBufferFromGPU()\ncomputePipeline->Update();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VTK Enum Usage in Python\nDESCRIPTION: This snippet demonstrates how enum types from the VTK library are used in Python. It highlights the creation of an enum and checking its type. This requires the VTK library to be available in the Python environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\n    >>> from vtkmodules.vtkCommonColor import vtkColorSeries\n    >>> vtkColorSeries.COOL\n    2\n    >>> isinstance(vtkColorSeries.ColorSchemes, vtkColorSeries.COOL)\n    >>> cs = vtkColorSeries()\n    >>> cs.SetColorScheme(vtkColorSeries.COOL)\n```\n\n----------------------------------------\n\nTITLE: Python Class Override Example in VTK\nDESCRIPTION: Demonstrates how to use the new override decorator feature in VTK 9.2.0 to create custom subclasses of VTK classes. This allows for class interposition while maintaining limitations regarding C++ virtual functions and class hierarchy.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vtkmodules.vtkCommonCore import vtkPoints\n\n@vtkPoints.override\nclass foo(vtkPoints):\n  pass\n\no = vtkPoints() # o is actually an instance of foo\n```\n\n----------------------------------------\n\nTITLE: Problematic VTK Override Implementation\nDESCRIPTION: Demonstrates an incorrect implementation of VTK class override that modifies pre-existing C++ object attributes, which should be avoided.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\n@vtkImageData.override\nclass CustomImageData(vtkImageData):\n    def __init__(self, spacing=(1.0, 1.0, 1.0)):\n        self.SetSpacing(spacing)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with VTK and Qt Dependencies\nDESCRIPTION: Sets up a CMake project called SimpleView with VTK and Qt dependencies. Configures required VTK components including GUI support, InfoVis core, and Qt views. Handles version requirements and dependency checks.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/SimpleView/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(SimpleView)\n\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    GUISupportQt\n    InfovisCore\n    RenderingFreeType\n    ViewsQt)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Widgets Gui)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\" OR NOT TARGET \"Qt${VTK_QT_VERSION}::Gui\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: SetGet Macro Documentation in VTK C++\nDESCRIPTION: Illustrates the proper documentation format for SetGet macro pairs using Doxygen group marking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n///@{\n/**\n * Set / get the sharpness of decay of the splats.\n * This is the exponent constant in the Gaussian\n * equation. Normally this is a negative value.\n */\nvtkSetMacro(ExponentFactor,double);\nvtkGetMacro(ExponentFactor,double);\n///@}\n```\n\n----------------------------------------\n\nTITLE: Describing UnstructuredGrid using HDF5 in VTK\nDESCRIPTION: The snippet showcases an HDF5 structure representing an UnstructuredGrid from a partitioned 'can' example in ParaView. It details several datasets for storing cell data, connectivity, and point data attributes such as displacement and velocity. The structure highlights the use of unlimited data spaces suitable for evolving datasets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_35\n\nLANGUAGE: HDF5\nCODE:\n```\nHDF5 \"ExternalData/Testing/Data/can-pvtu.hdf\" {\nGROUP \"/\" {\n   GROUP \"VTKHDF\" {\n      ATTRIBUTE \"Type\" {\n         DATATYPE  H5T_STRING {\n            STRSIZE 16;\n            STRPAD H5T_STR_NULLPAD;\n            CSET H5T_CSET_ASCII;\n            CTYPE H5T_C_S1;\n         }\n         DATASPACE  SCALAR\n         DATA {\n         (0): \"UnstructuredGrid\"\n         }\n      }\n      ATTRIBUTE \"Version\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n         DATA {\n         (0): 1, 0\n         }\n      }\n      GROUP \"CellData\" {\n         DATASET \"EQPS\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 5480 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"vtkGhostType\" {\n            DATATYPE  H5T_STD_U8LE\n            DATASPACE  SIMPLE { ( 5480 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"vtkOriginalCellIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 5480 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      DATASET \"Connectivity\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 43840 ) / ( H5S_UNLIMITED ) }\n      }\n      GROUP \"FieldData\" {\n         DATASET \"ElementBlockIds\" {\n            DATATYPE  H5T_STD_I32LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         DATASET \"Info_Records\" {\n            DATATYPE  H5T_STD_I8LE\n            DATASPACE  SIMPLE { ( 4, 81 ) / ( 4, 81 ) }\n         }\n         DATASET \"KE\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n         }\n         DATASET \"NSTEPS\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n         }\n         DATASET \"QA_Records\" {\n            DATATYPE  H5T_STD_I8LE\n            DATASPACE  SIMPLE { ( 24, 33 ) / ( 24, 33 ) }\n         }\n         DATASET \"TMSTEP\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n         }\n         DATASET \"TimeValue\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         DATASET \"Title\" {\n            DATATYPE  H5T_STRING {\n               STRSIZE H5T_VARIABLE;\n               STRPAD H5T_STR_NULLTERM;\n               CSET H5T_CSET_ASCII;\n               CTYPE H5T_C_S1;\n            }\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         DATASET \"XMOM\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n         }\n         DATASET \"YMOM\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n         }\n         DATASET \"ZMOM\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n         }\n      }\n      DATASET \"NumberOfCells\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n      }\n      DATASET \"NumberOfConnectivityIds\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n      }\n      DATASET \"NumberOfPoints\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n      }\n      DATASET \"Offsets\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 5483 ) / ( H5S_UNLIMITED ) }\n      }\n      GROUP \"PointData\" {\n         DATASET \"ACCL\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 8076, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n         DATASET \"DISPL\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 8076, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n         DATASET \"GlobalNodeId\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 8076 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"PedigreeNodeId\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 8076 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"VEL\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 8076, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n         DATASET \"vtkGhostType\" {\n            DATATYPE  H5T_STD_U8LE\n            DATASPACE  SIMPLE { ( 8076 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      DATASET \"Points\" {\n         DATATYPE  H5T_IEEE_F64LE\n         DATASPACE  SIMPLE { ( 8076, 3 ) / ( H5S_UNLIMITED, 3 ) }\n      }\n      DATASET \"Types\" {\n         DATATYPE  H5T_STD_U8LE\n         DATASPACE  SIMPLE { ( 5480 ) / ( H5S_UNLIMITED ) }\n      }\n   }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pass-by-Reference in VTK Python\nDESCRIPTION: Demonstrates how to handle C++ pass-by-reference parameters in Python using the reference type. Shows creating reference objects, passing them to methods, and retrieving the updated values.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nvoid GetCellAtId(vtkIdType cellId, vtkIdType& cellSize, vtkIdType const*& cellPoints)\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> from vtkmodules.vtkCommonCore import reference\n>>> from vtkmodules.vtkCommonDataModel import vtkCellArray\n>>>\n>>> # Build a cell array\n>>> a = vtkCellArray()\n>>> a.InsertNextCell(3, (1, 3, 0))\n>>>\n>>> # Create the reference objects\n>>> n = reference(0)\n>>> t = reference((0,))\n>>>\n>>> # Call the pass-by-reference method\n>>> a.GetCellAtId(0, n, t)\n>>>\n>>> n.get()\n3\n>>> t.get()\n(1, 3, 0)\n```\n\n----------------------------------------\n\nTITLE: Chaining VTK pipeline with >> operator in Python\nDESCRIPTION: This snippet demonstrates how to chain multiple VTK pipeline objects using the `>>` operator to create a complete pipeline. The resulting `pipeline` variable represents the entire processing chain from the `vtkSphereSource` to the `vtkShrinkFilter`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/new-python-api-for-pipelines.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npipeline = vtkSphereSource() >> vtkShrinkFilter()\n```\n\n----------------------------------------\n\nTITLE: Setting 32-bit Storage for VTK Cell Arrays in C++\nDESCRIPTION: This snippet shows two methods to set 32-bit storage for VTK cell arrays, which can further improve IBO construction performance. The first method uses a compile-time flag, while the second uses runtime function calls.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/index-buffer-creation-performances.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nVTK_USE_64BIT_IDS=OFF\n```\n\nLANGUAGE: C++\nCODE:\n```\nvtkCellArray::SetDefaultStorageIs64Bit(false);\n```\n\nLANGUAGE: C++\nCODE:\n```\npolydata->GetPolys()->ConvertTo32BitStorage();\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecation Warnings in VTK Source\nDESCRIPTION: Shows how to suppress deprecation warnings in VTK source files by setting the VTK_DEPRECATION_LEVEL macro to 0. This is used when implementing deprecated features within VTK itself.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/deprecation.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// Hide VTK_DEPRECATED_IN_X_Y_Z() warnings for this class.\n#define VTK_DEPRECATION_LEVEL 0\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Version Suffix\nDESCRIPTION: CMake configuration to customize the version suffix for VTK wheel packages. Controls the development version string appended to the package version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_python_wheels.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(VTK_VERSION_SUFFIX \"dev0\" CACHE STRING \"\")\n```\n\n----------------------------------------\n\nTITLE: Adding Python MPI Test for VTK\nDESCRIPTION: This CMake command adds a Python MPI test named 'TestCleanArrays.py' to the VTK project. The test is configured with NO_DATA, NO_OUTPUT, and NO_VALID options, indicating it doesn't require input data, doesn't produce output, and doesn't have a validation step.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python_mpi(TestCleanArrays.py NO_DATA NO_OUTPUT NO_VALID)\n```\n\n----------------------------------------\n\nTITLE: Opening Built Documentation on Windows\nDESCRIPTION: Opens the built VTK documentation in the default web browser on Windows systems using the start command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_7\n\nLANGUAGE: bat\nCODE:\n```\nstart _build\\html\\index.html\n```\n\n----------------------------------------\n\nTITLE: Classic VTK Import Method in Python\nDESCRIPTION: Alternative approach to importing VTK that uses the legacy 'vtk' module available since VTK 4.0. This imports everything at once but can be slower due to VTK's large size.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport vtk\n```\n\n----------------------------------------\n\nTITLE: Serializing Third-Party Types in C++\nDESCRIPTION: Explains how to serialize third-party types by specializing the adl_serializer template. Includes an example for boost::optional.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n// partial specialization (full specialization works too)\nnamespace nlohmann {\n    template <typename T>\n    struct adl_serializer<boost::optional<T>> {\n        static void to_json(json& j, const boost::optional<T>& opt) {\n            if (opt == boost::none) {\n                j = nullptr;\n            } else {\n              j = *opt; // this will call adl_serializer<T>::to_json which will\n                        // find the free function to_json in T's namespace!\n            }\n        }\n\n        static void from_json(const json& j, boost::optional<T>& opt) {\n            if (j.is_null()) {\n                opt = boost::none;\n            } else {\n                opt = j.template get<T>(); // same as above, but with\n                                           // adl_serializer<T>::from_json\n            }\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Source Directory Configuration\nDESCRIPTION: Defines the list of source directories containing VTK modules and components\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtk_source_directories\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Accelerators\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Charts\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Common\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Domains\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Filters\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Geovis\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/GUISupport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Imaging\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Infovis\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Interaction\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/IO\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Parallel\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Rendering\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Serialization\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Testing\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Utilities\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Views\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Web\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Wrapping\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Build with Emscripten CMake\nDESCRIPTION: Commands to configure VTK build using emcmake with CMake, setting various build options including WebGPU support and shared libraries settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/VTK/build\n$ emcmake cmake \\\n  -S .. \\\n  -B . \\\n  -G \"Ninja\" \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DBUILD_SHARED_LIBS:BOOL=OFF \\\n  -DVTK_ENABLE_WEBGPU:BOOL=ON \\\n  -DVTK_MODULE_ENABLE_VTK_RenderingLICOpenGL2:STRING=DONT_WANT\n```\n\n----------------------------------------\n\nTITLE: Compiling and Evaluating Expressions with ExprTk in C++\nDESCRIPTION: A complete example demonstrating how to use ExprTk to compile and evaluate a mathematical expression. It includes creating a custom function, setting up a symbol table with variables, compiling an expression string, handling compilation errors, and evaluating the expression.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_114\n\nLANGUAGE: C++\nCODE:\n```\n#include <cstdio>\n#include <string>\n\n#include \"exprtk.hpp\"\n\ntemplate <typename T>\nstruct myfunc final : public exprtk::ifunction<T>\n{\n   myfunc() : exprtk::ifunction<T>(2) {}\n\n   T operator()(const T& v1, const T& v2) override\n   {\n      return T(1) + (v1 * v2) / T(3);\n   }\n};\n\nint main()\n{\n   typedef exprtk::symbol_table<double> symbol_table_t;\n   typedef exprtk::expression<double>   expression_t;\n   typedef exprtk::parser<double>       parser_t;\n   typedef exprtk::parser_error::type   error_t;\n\n   const std::string expression_string =\n      \"z := 2 myfunc([4 + sin(x / pi)^3],y ^ 2)\";\n\n   double x = 1.1;\n   double y = 2.2;\n   double z = 3.3;\n\n   myfunc<double> mf;\n\n   symbol_table_t symbol_table;\n   symbol_table.add_constants();\n   symbol_table.add_variable(\"x\",x);\n   symbol_table.add_variable(\"y\",y);\n   symbol_table.add_variable(\"z\",z);\n   symbol_table.add_function(\"myfunc\",mf);\n\n   expression_t expression;\n   expression.register_symbol_table(symbol_table);\n\n   parser_t parser;\n\n   if (!parser.compile(expression_string,expression))\n   {\n      // A compilation error has occurred. Attempt to\n      // print all errors to stdout.\n\n      printf(\"Error: %s\\tExpression: %s\\n\",\n             parser.error().c_str(),\n             expression_string.c_str());\n\n      for (std::size_t i = 0; i < parser.error_count(); ++i)\n      {\n         // Include the specific nature of each error\n         // and its position in the expression string.\n\n         error_t error = parser.get_error(i);\n\n         printf(\"Error: %02d Position: %02d \"\n                \"Type: [%s] \"\n                \"Message: %s \"\n                \"Expression: %s\\n\",\n                static_cast<int>(i),\n                static_cast<int>(error.token.position),\n                exprtk::parser_error::to_str(error.mode).c_str(),\n                error.diagnostic.c_str(),\n                expression_string.c_str());\n      }\n\n      return 1;\n   }\n\n   // Evaluate the expression and obtain its result.\n\n   double result = expression.value();\n\n   printf(\"Result: %10.5f\\n\",result);\n\n   return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Locale-Dependent Floating-Point Numbers with Fast Float\nDESCRIPTION: This snippet illustrates using the fast_float library's from_chars_advanced function to parse a string with a custom decimal separator, such as a comma. It shows how to set parse options and check for successful parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  std::string input = \"3,1416 xyz \";\n  double result;\n  fast_float::parse_options options{fast_float::chars_format::general, ','};\n  auto answer = fast_float::from_chars_advanced(input.data(), input.data() + input.size(), result, options);\n  if ((answer.ec != std::errc()) || ((result != 3.1416))) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n  std::cout << \"parsed the number \" << result << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOExport Module with CMake\nDESCRIPTION: Defines the list of exporter classes included in the VTK IOExport module and adds them to the build system. The exporters support various file formats including GLTF, JSON, OBJ, SVG, X3D, and others. The module is registered with the VTK build system and test mangling is added.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkExporter\n  vtkGLTFExporter\n  vtkIVExporter\n  vtkJSONDataSetWriter\n  vtkJSONRenderWindowExporter\n  vtkJSONSceneExporter\n  vtkOBJExporter\n  vtkOOGLExporter\n  vtkPOVExporter\n  vtkRIBExporter\n  vtkRIBLight\n  vtkRIBProperty\n  vtkSVGContextDevice2D\n  vtkSVGExporter\n  vtkSingleVTPExporter\n  vtkVRMLExporter\n  vtkX3D\n  vtkX3DExporter\n  vtkX3DExporterFIWriter\n  vtkX3DExporterWriter\n  vtkX3DExporterXMLWriter)\n\nvtk_module_add_module(VTK::IOExport\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOExport)\n```\n\n----------------------------------------\n\nTITLE: ExprTk Switch Statement Implementation\nDESCRIPTION: Example of the ExprTk switch statement which acts as a multi-way branch mechanism. The first true case condition determines the result; otherwise, the default value is used.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_7\n\nLANGUAGE: ExprTk\nCODE:\n```\nswitch\n{\n   case x > (y + z) : 2 * x / abs(y - z);\n   case x < 3       : sin(x + y);\n   default          : 1 + x;\n}\n```\n\n----------------------------------------\n\nTITLE: Examining VTK Factory Object Types in Python\nDESCRIPTION: Example showing how factory classes return objects of different types than expected. This demonstrates how VTK's factory mechanism allows for implementation overrides.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> a = vtkActor()\n>>> type(a)\n<class 'vtkmodules.vtkRenderingOpenGL2.vtkOpenGLActor'>\n```\n\n----------------------------------------\n\nTITLE: Complete Magnitude Calculation Implementation\nDESCRIPTION: Shows a complete implementation of vector magnitude calculation using array dispatch with value type restrictions and optimized access patterns.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nstruct CalcMagnitudeWorker\n{\n  template <typename VectorArray, typename MagnitudeArray>\n  void operator()(VectorArray *vectors, MagnitudeArray *magnitude)\n  {\n    VTK_ASSUME(vectors->GetNumberOfComponents() == 3);\n    VTK_ASSUME(magnitude->GetNumberOfComponents() == 1);\n\n    vtkDataArrayAccessor<VectorArray> v(vectors);\n    vtkDataArrayAccessor<MagnitudeArray> m(magnitude);\n\n    vtkIdType numVectors = vectors->GetNumberOfTuples();\n    for (vtkIdType tupleIdx = 0; tupleIdx < numVectors; ++tupleIdx)\n      {\n      m.Set(tupleIdx, 0, std::sqrt(v.Get(tupleIdx, 0) * v.Get(tupleIdx, 0) +\n                                   v.Get(tupleIdx, 1) * v.Get(tupleIdx, 1) +\n                                   v.Get(tupleIdx, 2) * v.Get(tupleIdx, 2)));\n      }\n  }\n};\n\nvoid calcMagnitude(vtkDataArray *vectors, vtkDataArray *magnitude)\n{\n  CalcMagnitudeWorker worker;\n  typedef vtkArrayDispatch::Dispatch2ByValueType\n    <\n      vtkArrayDispatch::AllTypes,\n      vtkArrayDispatch::Reals\n    > Dispatcher;\n\n  if (!Dispatcher::Execute(vectors, magnitude, worker))\n    {\n    worker(vectors, magnitude); // vtkDataArray fallback\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing VTK Module System Commands\nDESCRIPTION: This snippet shows how to reference VTK-specific module system commands within the documentation. It includes links to VTK documentation for module scanning and finding functions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/ModuleSystem.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n[vtk_module_scan]: https://vtk.org/doc/nightly/html/group__module.html#ga35849d7807a98a60e99e0a1c8ff54181\n```\n\n----------------------------------------\n\nTITLE: Building VTK on Windows with Ninja\nDESCRIPTION: Command to build VTK in Release configuration on Windows using Ninja\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncmake --build %HOMEPATH%\\vtk\\build --config Release\n```\n\n----------------------------------------\n\nTITLE: Cloning VTK Repository\nDESCRIPTION: Command to create a local clone of the main VTK repository with all submodules\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://gitlab.kitware.com/vtk/vtk.git VTK\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Points Array in VTK\nDESCRIPTION: Creates and populates a vtkPoints array with random 3D coordinates in the range [-1,1].\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n  vtkNew<vtkPoints> pts;\n  pts->SetDataTypeToFloat();\n  pts->SetNumberOfPoints(numPts);\n  for ( auto i=0; i < numPts; ++i)\n  {\n    pts->SetPoint(i, vtkMath::Random(-1,1), vtkMath::Random(-1,1), vtkMath::Random(-1,1));\n  }\n```\n\n----------------------------------------\n\nTITLE: VTK Object Registration and Serialization Methods\nDESCRIPTION: Key method references for registering and serializing VTK objects using vtkObjectManager. Includes UpdateStatesFromObjects and GetState for serialization operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_manager.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nvtkObjectManager::UpdateStatesFromObjects\\nGetState(identifier)\n```\n\n----------------------------------------\n\nTITLE: Observing DeleteEvent with Object Information in VTK Object in Python\nDESCRIPTION: This Python code demonstrates how to add an observer to a `vtkObject` for the `DeleteEvent` and extract identifying information before the deletion occurs. The lambda function prints the event type and a representation of the object, which is captured before deletion.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\no = vtkObject()\no.AddObserver('DeleteEvent',lambda x,e,r=repr(o): print(e, r))\ndel o\n```\n\n----------------------------------------\n\nTITLE: Complete VTK CMake Configuration\nDESCRIPTION: Full CMake configuration for a cylinder example, including all necessary components and proper linking setup with vtk_module_autoinit.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_cpp.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK COMPONENTS\n  CommonColor\n  CommonCore\n  FiltersSources\n  InteractionStyle\n  RenderingContextOpenGL2\n  RenderingCore\n  RenderingFreeType\n  RenderingGL2PSOpenGL2\n  RenderingOpenGL2\n)\n\nadd_executable(CylinderExample CylinderExample.cxx)\ntarget_link_libraries(CylinderExample PRIVATE ${VTK_LIBRARIES})\n# vtk_module_autoinit is needed\nvtk_module_autoinit(\n  TARGETS CylinderExample\n  MODULES ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local ExternalData Store with CMake\nDESCRIPTION: Shows how to configure a local ExternalData object store directory shared among multiple builds using CMake configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cmake -DExternalData_OBJECT_STORES=/home/user/.ExternalData ../VTK\n```\n\n----------------------------------------\n\nTITLE: Defining Cells Element in XML\nDESCRIPTION: This snippet illustrates the Cells element which defines connectivity and types for the cells within the dataset across multiple DataArray elements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n    <Cells>\n      <DataArray type=\"Int32\" Name=\"connectivity\" .../>\n      <DataArray type=\"Int32\" Name=\"offsets\" .../>\n      <DataArray type=\"UInt8\" Name=\"types\" .../>\n    </Cells>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module with Wrapping Support using CMake\nDESCRIPTION: Sets up a VTK module with wrapping capabilities by defining a classes variable and adding it to the module configuration. Uses the vtk_module_add_module command to create a Wrapping::Wrappable module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/module/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkWrapped)\n\nvtk_module_add_module(Wrapping::Wrappable\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Conversion Constructor Example\nDESCRIPTION: Demonstrates automatic type conversion using constructors in VTK's Python interface.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n>>> variantArray.InsertNextItem(1)\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies\nDESCRIPTION: Apt commands to install required build dependencies on Ubuntu/Debian systems\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install \\\nbuild-essential \\\ncmake \\\ncmake-curses-gui \\\nmesa-common-dev \\\nmesa-utils \\\nfreeglut3-dev \\\nninja-build\n```\n\n----------------------------------------\n\nTITLE: Installing VTK via Python pip\nDESCRIPTION: Commands for installing VTK Python package using pip, including both standard PyPI installation and installation from custom wheels server.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/resources.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vtk\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --extra-index-url https://wheels.vtk.org vtk\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Module with PugiXML License and Versioning\nDESCRIPTION: This snippet sets up the VTK module configuration for the PugiXML library, including license details and versioning. It specifies internal information such as license files, SPDX identifiers, copyright text, download location, and standard include directories. It aligns the PugiXML targets for use in the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkpugixml/LICENSE.md\"\n    SPDX_LICENSE_IDENTIFIER\n      \"MIT\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2006-2020 Arseny Kapoulkine\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/pugixml.git@for/vtk-20241202-1.14\"\n    VERSION\n      \"1.14\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE pugixml\n    TARGETS pugixml::pugixml\n            pugixml\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VTK Factory Pattern with Implementation Modules\nDESCRIPTION: Interactive Python session demonstrating how implementation modules like vtkRenderingOpenGL2 override factory classes. Shows how importing an implementation module changes the type of object returned.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from vtkmodules.vtkRenderingCore import vtkRenderWindow\n>>> renwin = vtkRenderWindow()\n>>> type(renwin)\n<class 'vtkmodules.vtkRenderingCore.vtkRenderWindow'>\n>>>\n>>> import vtkmodules.vtkRenderingOpenGL2\n>>> renwin2 = vtkRenderWindow()\n>>> type(renwin2)\n<class 'vtkmodules.vtkRenderingOpenGL2.vtkXOpenGLRenderWindow'>\n```\n\n----------------------------------------\n\nTITLE: Observing DeleteEvent in VTK Object in Python\nDESCRIPTION: This Python code demonstrates how to add an observer to a `vtkObject` for the `DeleteEvent`. The lambda function prints the event type and the object itself. Note that the object is None within the observer because it has already been deleted.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\no = vtkObject()\no.AddObserver('DeleteEvent', lambda o,e: print(e, o))\ndel o\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Modules with Old System (CMake)\nDESCRIPTION: Example of how to declare VTK modules using the old module system in CMake. It shows the use of vtk_module function with various options for dependencies and module properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT SOME_OPTION)\n  set(depends)\n  if (SOME_OTHER_OPTION)\n    list(APPEND depends vtkSomeDep)\n  endif ()\n  vtk_module(vtkModuleName\n    GROUPS\n      # groups the module belongs to\n    KIT\n      # the kit the module belongs to\n    IMPLEMENTS\n      # modules containing vtkObjectFactory instances that are implemented here\n    DEPENDS\n      # public dependencies\n      #${depends} # no analogy in the new system\n    PRIVATE_DEPENDS\n      # private dependencies\n      ${depends}\n    COMPILE_DEPENDS\n      # modules which must be built before this one but which are not actually\n      # linked.\n    TEST_DEPENDS\n      # test dependencies\n    TEST_OPTIONAL_DEPENDS\n      # optional test dependencies\n      ${depends}\n    #EXCLUDE_FROM_WRAPPING\n      # present for modules which cannot be wrapped\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Cell Grid Source Project with CMake and Qt\nDESCRIPTION: Complete CMake configuration for building a VTK Cell Grid Source application. Sets up project requirements, finds VTK and Qt dependencies, configures source files, and sets up build targets with proper linking. Includes automatic MOC processing for Qt integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/CellGridSource/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(CellGridSource)\n\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    CommonDataModel\n    CommonExecutionModel\n    FiltersCellGrid\n    RenderingCellGrid\n    InteractionStyle\n    InteractionWidgets\n    GUISupportQt)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Core Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Core\" OR NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\n# Set your files and resources here\nset(Srcs\n  CellGridSource.cxx\n  ArrayGroupModel.cxx\n)\n\n# Instruct CMake to run moc automatically when needed.\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\n\n# CMAKE_AUTOMOC in ON so the MocHdrs will be automatically wrapped.\nadd_executable(CellGridSource\n  ${Srcs})\ntarget_link_libraries(CellGridSource\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Core\"\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS CellGridSource\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Correct Conditional VTK Override Implementation\nDESCRIPTION: Shows the proper way to implement VTK class overrides with conditional modifications to avoid affecting pre-existing C++ objects.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\n@vtkImageData.override\nclass CustomImageData(vtkImageData):\n    def __init__(self, spacing=None):\n        if spacing is not None:\n            self.SetSpacing(spacing)\n```\n\n----------------------------------------\n\nTITLE: Adding SerializationManager Module\nDESCRIPTION: This snippet uses `vtk_module_add_module` to add the `VTK::SerializationManager` module to the VTK build system, specifying the classes and source files associated with the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::SerializationManager\n  CLASSES ${classes}\n  SOURCES ${_vtk_serdes_registrar_source})\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization for User-Defined Types in C++\nDESCRIPTION: Shows how to implement custom serialization for user-defined types using to_json and from_json functions. Includes an example of a 'person' struct and its serialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace ns {\n    // a simple struct to model a person\n    struct person {\n        std::string name;\n        std::string address;\n        int age;\n    };\n}\n\nns::person p = {\"Ned Flanders\", \"744 Evergreen Terrace\", 60};\n\n// convert to JSON: copy each value into the JSON object\njson j;\nj[\"name\"] = p.name;\nj[\"address\"] = p.address;\nj[\"age\"] = p.age;\n\n// ...\n\n// convert from JSON: copy each value from the JSON object\nns::person p {\n    j[\"name\"].template get<std::string>(),\n    j[\"address\"].template get<std::string>(),\n    j[\"age\"].template get<int>()\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// create a person\nns::person p {\"Ned Flanders\", \"744 Evergreen Terrace\", 60};\n\n// conversion: person -> json\njson j = p;\n\nstd::cout << j << std::endl;\n// {\"address\":\"744 Evergreen Terrace\",\"age\":60,\"name\":\"Ned Flanders\"}\n\n// conversion: json -> person\nauto p2 = j.template get<ns::person>();\n\n// that's it\nassert(p == p2);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing json = nlohmann::json;\n\nnamespace ns {\n    void to_json(json& j, const person& p) {\n        j = json{{\"name\", p.name}, {\"address\", p.address}, {\"age\", p.age}};\n    }\n\n    void from_json(const json& j, person& p) {\n        j.at(\"name\").get_to(p.name);\n        j.at(\"address\").get_to(p.address);\n        j.at(\"age\").get_to(p.age);\n    }\n} // namespace ns\n```\n\n----------------------------------------\n\nTITLE: Building VTK Framework\nDESCRIPTION: Commands to build VTK framework using make or ninja build systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/VTKViewer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npath/to/VTK-build> make -j8\n```\n\nLANGUAGE: bash\nCODE:\n```\npath/to/VTK-iOS-build> ninja\n```\n\n----------------------------------------\n\nTITLE: Compiling VTK with WebAssembly\nDESCRIPTION: The snippet demonstrates how to use CMake in combination with Emscripten to compile VTK examples into WebAssembly format with threading support enabled. It requires VTK.wasm with `VTK_WEBASSEMBLY_THREADS` set to `ON` and uses the Ninja build system. The CMake command sets the source and build directories and specifies the VTK directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/AsyncClipper/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/Cone \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Enabling VTK Modules with CMake Configuration\nDESCRIPTION: Shows how to enable a VTK module during CMake configuration using command line options. The example demonstrates enabling a specific module like VTK::IOImage which contains components like vtkPNGWriter.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/supported_data_formats.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DVTK_MODULE_ENABLE_<module name>=WANT ...\n```\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DVTK_MODULE_ENABLE_VTK_IOImage=WANT ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Testing Environment in CMake for VTK\nDESCRIPTION: Sets up Node.js testing configuration including minimum version requirements, WebAssembly memory settings, and platform-specific import paths. Registers multiple JavaScript test modules for execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/Testing/JavaScript/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtk_nodejs_min_version \"23.8.0\")\nfind_package(NodeJS \"${vtk_nodejs_min_version}\" REQUIRED)\nif (VTK_WEBASSEMBLY_64_BIT)\n  set(_vtk_node_args \"--experimental-wasm-memory64\")\nendif ()\nset(_vtk_testing_nodejs_exe \"${NodeJS_INTERPRETER}\")\n\nif (CMAKE_HOST_WIN32)\n  list(APPEND _vtk_node_args\n    --import \"file://$<TARGET_FILE:VTK::WasmSceneManager>\")\nelse ()\n  list(APPEND _vtk_node_args\n    --import \"$<TARGET_FILE:VTK::WasmSceneManager>\")\nendif ()\nvtk_add_test_module_javascript_node(\n  testBlobs.mjs\n  testInitialize.mjs,NO_DATA\n  testInvoke.mjs\n  testSkipProperty.mjs\n  testStates.mjs)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Configuration Files in C++\nDESCRIPTION: Code snippet showing how to allow multiple configuration files to be specified using the --config option.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\napp.set_config(\"--config\")->expected(1, X);\n```\n\n----------------------------------------\n\nTITLE: Creating vtkNetCDFCFReader from XArray Data in Python\nDESCRIPTION: Shows how to create a vtkNetCDFCFReader instance directly from XArray data using the new integration. This allows XArray data to be used in VTK pipelines with zero-copy optimization where possible.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-XArrayToNetCDFCFReader.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreader = xarray_data.vtk.reader()\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring VTK Dependencies\nDESCRIPTION: Locates and configures required VTK components including pipeline, interaction, and rendering modules\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    FiltersSources\n    InteractionStyle\n    RenderingOpenGL2\n    RenderingUI\n)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Implementing Loop Runtime Checks in ExprTk C++\nDESCRIPTION: Demonstrates how to implement loop runtime checks to prevent infinite loops or excessive execution time in ExprTk expressions. Shows how to create and register a custom loop runtime check handler with the parser.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_101\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::parser<T> parser_t;\ntypedef exprtk::loop_runtime_check loop_runtime_check_t;\n\nmy_loop_rtc loop_rtc;\nloop_runtime_check.loop_set = loop_runtime_check_t::e_all_loops;\nloop_runtime_check.max_loop_iterations = 100000;\n\nparser_t parser;\n\nparser.register_loop_runtime_check(loop_rtc);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring WebGPU Textures and Texture Views in C++\nDESCRIPTION: This snippet demonstrates how to create a texture, configure its properties (dimension, format, mode, etc.), and create a texture view to access it in a compute pass. It shows how to set up the binding and group for shader access.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// First creating the texture\nvtkNew<vtkWebGPUComputeTexture> myTexture;\n\n// Configuring the texture\nmyTexture->SetDimension(vtkWebGPUComputeTexture::TextureDimension::DIMENSION_2D)\nmyTexture->SetFormat(vtkWebGPUComputeTexture::TextureFormat::RGBA8_UNORM);\nmyTexture->SetMode(vtkWebGPUComputeTexture::TextureMode::READ_WRITE_STORAGE);\nmyTexture->SetSampleType(vtkWebGPUComputeTexture::TextureSampleType::FLOAT);\nmyTexture->SetSize(1280, 720);\nmyTexture->SetMipLevelCount(1);\n\nint textureIndex = myComputePass->AddTexture(myTexture);\n\nvtkSmartPointer<vtkWebGPUComputeTextureView> textureView;\ntextureView = myComputePasss->CreateTextureView(textureIndex);\ntextureView->SetBaseMipLevel(0);\ntextureView->SetMode(vtkWebGPUComputeTextureView::TextureViewMode::WRITE_ONLY_STORAGE);\n// The shader interacts with texture views, not textures so the binding/group is\n// on the texture view, not the texture\ntextureView->SetGroup(0);\ntextureView->SetBinding(0);\n\nmyComputePass->AddTextureView(textureView);\n```\n\n----------------------------------------\n\nTITLE: Interactive Git Rebase\nDESCRIPTION: Command to perform an interactive rebase to revise commits in a topic branch\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git rebase -i HEAD~3\n```\n\n----------------------------------------\n\nTITLE: Importing Specific VTK Modules in Python\nDESCRIPTION: Example showing how to import specific VTK modules and classes to reduce load time. This approach is recommended for production code to minimize dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vtkmodules.vtkCommonCore import vtkObject\nfrom vtkmodules.vtkFiltersSources import vtkConeSource, vtkSphereSource\nfrom vtkmodules.vtkRenderingCore import (\n    vtkActor,\n    vtkDataSetMapper,\n    vtkRenderer,\n    vtkRenderWindow\n)\nimport vtkmodules.vtkRenderingOpenGL2\n```\n\n----------------------------------------\n\nTITLE: Using VTK_ASSUME for Optimization Hints in C++\nDESCRIPTION: This snippet demonstrates how to use VTK_ASSUME to provide the compiler with optimization hints about array properties that are guaranteed to be true. This can lead to more efficient code generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nVTK_ASSUME(pointsArray->GetNumberOfComponents() == 3);\n```\n\n----------------------------------------\n\nTITLE: VTK ImageData Override with Initialization\nDESCRIPTION: Example showing override initialization when VTK objects are created in C++ and later exposed to Python. Demonstrates adding custom attributes to VTK objects.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkImagingSources import vtkImageGridSource\nfrom vtkmodules.vtkCommonDataModel import vtkImageData\n\n@vtkImageData.override\nclass CustomImageData(vtkImageData):\n    def __init__(self, filename=None):\n        self.filename = filename\n\nsource = vtkImageGridSource()\nsource.SetDataSpacing(0.1, 0.1, 0.1)\nsource.Update()\ndata = source.GetOutput()\n```\n\n----------------------------------------\n\nTITLE: Reading a String with scnlib in C++\nDESCRIPTION: Shows how to read a std::string from a string input using scnlib. This example demonstrates parsing a single word and accessing both the read value and the remaining unparsed content.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <scn/scan.h>\n#include <print>\n\nint main() {\n    // Reading a std::string will read until the first whitespace character\n    if (auto result = scn::scan<std::string>(\"Hello world!\", \"{}\")) {\n        // Will output \"Hello\":\n        // Access the read value with result->value()\n        std::println(\"{}\", result->value());\n        \n        // Will output \" world\":\n        // result->range() returns a subrange containing the unused input\n        // C++23 is required for the std::string_view range constructor used below\n        std::println(\"{}\", std::string_view{result->range()});\n    } else {\n        std::println(\"Couldn't parse a word: {}\", result.error().msg());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VTK_UNBLOCKTHREADS for Concurrency in Python\nDESCRIPTION: This snippet introduces the VTK_UNBLOCKTHREADS wrapper hint which enables methods to release the GIL for better concurrency in Python threads. It specifically hints the Update() methods to allow them to execute concurrently without blocking the Python interpreter. The hint is effective only when VTK_PYTHON_FULL_THREADSAFE is set to ON during configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/python-hint-unblock.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// Hint to release the GIL for concurrent execution\nVTK_UNBLOCKTHREADS(Update);\n\n// Make sure VTK_PYTHON_FULL_THREADSAFE is ON\n#define VTK_PYTHON_FULL_THREADSAFE ON\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Template Parameters\nDESCRIPTION: Demonstrates the syntax for working with VTK templates that have multiple parameters in Python.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n>>> vtkTuple['float64',4]([1.0, 2.0, 3.0, 4.0])\nvtkmodules.vtkCommonMath.vtkTuple_IdLi4EE([1.0, 2.0, 3.0, 4.0])\n```\n\n----------------------------------------\n\nTITLE: Coordinate System Configuration\nDESCRIPTION: Introduces a more generic coordinate configuration with automatic main axis detection and optional origin shifting\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/legend-scale-actor.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nactor->SetCoordinates(coordinates);\nactor->SetOrigin(originPoint);\n```\n\n----------------------------------------\n\nTITLE: Setting up SMP Backends in CMake\nDESCRIPTION: Configures threading backends for SMP in VTK. Iterates over a list of backends, setting related CMake variables and choosing the default implementation. Dependencies include appropriate CMake version and syntax support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(smp_backends\n  OpenMP\n  Sequential\n  STDThread\n  TBB)\nforeach (smp_backend IN LISTS smp_backends)\n  string(TOLOWER \"${smp_backend}\" smp_backend_lower)\n  string(TOUPPER \"${smp_backend}\" smp_backend_upper)\n  set(\"VTK_SMP_ENABLE_${smp_backend_upper}\" \"${vtk_smp_enable_${smp_backend_lower}}\")\n  if (VTK_SMP_IMPLEMENTATION_TYPE STREQUAL smp_backend)\n    set(\"VTK_SMP_DEFAULT_IMPLEMENTATION_${smp_backend_upper}\" 1)\n  else ()\n    set(\"VTK_SMP_DEFAULT_IMPLEMENTATION_${smp_backend_upper}\" 0)\n  endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: VTK Volume Example\nDESCRIPTION: This example demonstrates a VTK file format for representing a volume using structured points. It defines the dimensions, aspect ratio, origin, point data, and scalar values for the volume. It is intended for representing volumetric data with associated attributes, such as scalar fields.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_8\n\nLANGUAGE: vtk\nCODE:\n```\n\"# vtk DataFile Version 2.0\\nVolume example\\nASCII\\nDATASET STRUCTURED_POINTS\\nDIMENSIONS 3 4 6\\nASPECT_RATIO 1 1 1\\nORIGIN 0 0 0\\nPOINT_DATA 72\\nSCALARS volume_scalars char 1\\nLOOKUP_TABLE default\\n0 0 0 0 0 0 0 0 0 0 0 0\\n0 5 10 15 20 25 25 20 15 10 5 0\\n0 10 20 30 40 50 50 40 30 20 10 0\\n0 10 20 30 40 50 50 40 30 20 10 0\\n0 5 10 15 20 25 25 20 15 10 5 0\\n0 0 0 0 0 0 0 0 0 0 0 0\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Support for VTK-m Filters\nDESCRIPTION: Sets up CUDA-specific configurations when CUDA is available, including language settings for source files and compiler options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  # Temporarily suppress \"has address taken but no possible call to it\" warnings,\n  # until we figure out its implications.\n  # We are disabling all warnings as nvlink has no known way to suppress\n  # individual warning types.\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\n\n  list(TRANSFORM classes APPEND \".cxx\" OUTPUT_VARIABLE cuda_impl)\n  set_source_files_properties(${cuda_impl} PROPERTIES LANGUAGE CUDA)\n  vtk_module_set_properties(VTK::AcceleratorsVTKmFilters CUDA_SEPARABLE_COMPILATION ON)\n\n  vtk_module_compile_options(VTK::AcceleratorsVTKmFilters\n    PUBLIC $<$<COMPILE_LANGUAGE:CUDA>:-Xcudafe --diag_suppress=extra_semicolon>)\nelseif (TARGET vtkm::kokkos_cuda)\n\n  list(TRANSFORM classes APPEND \".cxx\" OUTPUT_VARIABLE cuda_impl)\n  set_source_files_properties(${cuda_impl} PROPERTIES LANGUAGE CUDA)\n  kokkos_compilation(SOURCE ${cuda_impl})\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing CLI11 Callback Example in C++\nDESCRIPTION: Demonstrates setting up callbacks in a CLI11 application including preparse, parse complete, and final callbacks.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\napp.parse_complete_callback(ac1);\napp.final_callback(ac2);\nauto sub1=app.add_subcommand(\"sub1\")->parse_complete_callback(c1)->preparse_callback(pc1);\nauto sub2=app.add_subcommand(\"sub2\")->final_callback(c2)->preparse_callback(pc2);\napp.preparse_callback( pa);\n\n... A bunch of other options\n```\n\n----------------------------------------\n\nTITLE: Array Dispatch with Same Value Type Example\nDESCRIPTION: Demonstrates double array dispatch where array1 is restricted to specific AOS types and array2 shares the same value type. Uses vtkArrayDispatch::Dispatch2ByArrayWithSameValueType for type-safe operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef vtkTypeList;:Create<vtkFloatArray, vtkDoubleArray,\n                            vtkIntArray, vtkIdTypeArray> Array1Types;\n\ntypedef typename vtkArrayDispatch::FilterArraysByValueType\n  <\n  vtkArrayDispatch::Arrays,\n  vtkTypeList::Create<float, double, int, vtkIdType>\n  > Array2Types;\n\ntypedef vtkArrayDispatch::Dispatch2ByArrayWithSameValueType\n  <\n  Array1Types,\n  Array2Types\n  > MyDispatch;\n\nMyDispatch::Execute(array1, array2, someWorker);\n```\n\n----------------------------------------\n\nTITLE: std::mutex Usage in VTK\nDESCRIPTION: `vtkCriticalSection` has been removed from VTK and developers should now use `std::mutex` from the standard library. This change promotes cross-platform compatibility and standardizes threading mechanisms.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Python Pickling Support for VTK Data Objects\nDESCRIPTION: Demonstrates how to use Python's pickle module with VTK data objects, enabling serialization and deserialization of VTK data structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vtkmodules.util.pickle_support\nfrom vtkmodules.vtkFiltersSources import vtkSphereSource\nimport pickle\n\nsphereSrc = vtkSphereSource()\nsphereSrc.Update()\n\npickled = pickle.dumps(sphereSrc.GetOutput())\nunpickled = pickle.loads(pickled)\n\nprint(unpickled)\n```\n\n----------------------------------------\n\nTITLE: Building VTK with Emscripten using CMake\nDESCRIPTION: This snippet demonstrates how to configure and build the VTK library with Emscripten using CMake. It specifies the generator, source, and build directories, along with necessary variables like VTK_DIR. Make sure to have CMake and Emscripten properly set up before running this command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/WrappedMace \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for VTK Documentation on Linux/macOS\nDESCRIPTION: Creates and activates a Python virtual environment for building VTK documentation on Linux or macOS systems. This isolates the documentation dependencies from the system Python installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd Documentation/docs\n\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building VTK with WebGPU\nDESCRIPTION: This shell script snippet is used to configure and build the VTK library with support for WebGPU. It specifies directories for source and build, enables WebGPU support, and links the Dawn library.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncmake \\\n-S /path/to/vtk/src \\\n-B /path/to/vtk/build \\\n-GNinja \\\n-DVTK_ENABLE_WEBGPU=ON \\\n-DDawn_DIR=/path/to/where/dawn/is/installed/lib/cmake/Dawn \\\n-DVTK_BUILD_TESTING=ON\n\ncmake --build\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Symbol Table with Constant and Variable in ExprTk (C++)\nDESCRIPTION: Illustrates using an immutable symbol table with both a constant and a variable. The constant is folded at compile-time, while the variable's updates are observable during expression evaluation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nsymbol_table_t immutable_symbol_table\n   (symbol_table_t::symtab_mutability_type::e_immutable);\n\nT x = 0.0;\n\nconst std::string expression_str = \"x + (y + y)\";\n\nimmutable_symbol_table.add_variable(\"x\" , x    );\nimmutable_symbol_table.add_constant(\"y\" , 123.0);\n\nexpression_t expression;\nexpression.register_symbol_table(immutable_symbol_table);\n\nparser_t parser;\nparser.compile(expression_str, expression);\n\nfor (; x < 10.0; ++x)\n{\n   const auto expected_value = x + (123.0 + 123.0);\n   const auto result_value   = expression.value();\n   assert(expression.value() !=  expected_value);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Core CXX Tests\nDESCRIPTION: Adds C++ tests for the VTK Filters Core module. Each test file is listed with optional flags like NO_VALID to indicate tests that don't require image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersCoreCxxTests tests\n  Test3DLinearGridPlaneCutterCellData.cxx\n  TestAppendArcLength.cxx,NO_VALID\n  TestAppendDataSets.cxx,NO_VALID\n  TestAppendFilter.cxx,NO_VALID\n  TestAppendMolecule.cxx,NO_VALID\n  TestAppendPartitionedDataSetCollection.cxx,NO_VALID\n  TestAppendPolyData.cxx,NO_VALID\n  TestAppendSelection.cxx,NO_VALID\n  TestArrayCalculator.cxx,NO_VALID\n  TestArrayRename.cxx,NO_VALID\n  TestAssignAttribute.cxx,NO_VALID\n  TestAttributeDataToTableFilter.cxx,NO_VALID\n  TestAttributeDataToTableHyperTreeGrid.cxx,NO_VALID\n  TestBinCellDataFilter.cxx,NO_VALID\n  TestCategoricalPointDataToCellData.cxx,NO_VALID\n  TestCategoricalResampleWithDataSet.cxx,NO_VALID\n  TestCellCenters.cxx,NO_VALID\n  TestCellDataToPointData.cxx,NO_VALID\n  TestCenterOfMass.cxx,NO_VALID\n  TestCleanPolyData.cxx,NO_VALID\n  TestCleanPolyData2.cxx,NO_VALID\n  TestCleanPolyDataWithGhostCells.cxx\n  TestClipPolyData.cxx,NO_VALID\n  TestCompositeDataProbeFilterWithHyperTreeGrid.cxx\n  TestConnectivityFilter.cxx,NO_VALID\n  TestCutter.cxx,NO_VALID\n  TestDataObjectToPartitionedDataSetCollection.cxx,NO_VALID\n  TestDecimatePolylineFilter.cxx\n  TestDecimatePro.cxx,NO_VALID\n  TestDecimateProDegenerateTriangles.cxx,NO_VALID\n  TestDelaunay2D.cxx\n  TestDelaunay2DBestFittingPlane.cxx,NO_VALID\n  TestDelaunay2DConstrained.cxx,NO_VALID\n  TestDelaunay2DFindTriangle.cxx,NO_VALID\n  TestDelaunay2DMeshes.cxx,NO_VALID\n  TestDelaunay3D.cxx,NO_VALID\n  TestExplicitStructuredGridCrop.cxx\n  TestExplicitStructuredGridToUnstructuredGrid.cxx\n  TestExecutionTimer.cxx,NO_VALID\n  TestExtractCells.cxx,NO_VALID\n  TestExtractCellsAlongPolyLine.cxx,NO_VALID\n  TestFeatureEdges.cxx,NO_VALID\n  TestFieldDataToDataSetAttribute.cxx,NO_VALID\n  TestFlyingEdges.cxx\n  TestGenerateIdsHTG.cxx,NO_VALID,NO_OUTPUT\n  TestGenerateRegionIds.cxx,NO_VALID\n  TestGlyph3D.cxx\n  TestGlyph3DFollowCamera.cxx,NO_VALID\n  TestHedgeHog.cxx,NO_VALID\n  TestHyperTreeGridProbeFilter.cxx\n  TestResampleHyperTreeGridWithDataSet.cxx\n  TestImageDataToExplicitStructuredGrid.cxx\n  TestImplicitPolyDataDistance.cxx\n  TestImplicitPolyDataDistanceCube.cxx,NO_VALID\n  TestImplicitProjectOnPlaneDistance.cxx\n  TestMaskPoints.cxx,NO_VALID\n  TestMaskPointsModes.cxx\n  TestNamedComponents.cxx,NO_VALID\n  TestPartitionedDataSetCollectionConvertors.cxx,NO_VALID\n  TestPlaneCutter.cxx,NO_VALID\n  TestPointDataToCellData.cxx,NO_VALID\n  TestPolyDataConnectivityFilter.cxx,NO_VALID\n  TestPolyDataNormals.cxx,NO_VALID\n  TestPolyDataTangents.cxx\n  TestProbeFilter.cxx,NO_VALID\n  TestProbeFilterImageInput.cxx\n  TestProbeFilterOutputAttributes.cxx,NO_VALID\n  TestQuadricDecimationRegularization.cxx\n  TestQuadricDecimationMapPointData.cxx\n  TestResampleToImage.cxx,NO_VALID\n  TestResampleToImage2D.cxx,NO_VALID\n  TestResampleWithDataSet.cxx,\n  TestResampleWithDataSet2.cxx\n  TestResampleWithDataSet3.cxx\n  TestRemoveDuplicatePolys.cxx,NO_VALID\n  TestSmoothPolyDataFilter.cxx,NO_VALID\n  TestSMPPipelineContour.cxx,NO_VALID\n  TestSlicePlanePrecision.cxx,NO_VALID\n  TestStaticCleanPolyData.cxx,NO_VALID\n  TestStripper.cxx,NO_VALID\n  TestStructuredGridAppend.cxx,NO_VALID\n  TestSynchronizedTemplates2D.cxx,NO_VALID\n  TestSynchronizedTemplates2DRGB.cxx,NO_DATA,NO_VALID\n  TestThreshold.cxx,NO_VALID\n  TestThresholdPoints.cxx,NO_VALID\n  TestTransposeTable.cxx,NO_VALID\n  TestTriangleMeshPointNormals.cxx\n  TestTubeBender.cxx\n  TestTubeFilter.cxx\n  TestUnstructuredGridQuadricDecimation.cxx,NO_VALID\n  TestUnstructuredGridToExplicitStructuredGrid.cxx\n  TestUnstructuredGridToExplicitStructuredGridEmpty.cxx\n  TestVaryRadiusTubeFilter.cxx\n  UnitTestMaskPoints.cxx,NO_VALID\n  UnitTestMergeFilter.cxx,NO_VALID\n  TestContourImplicitArrays.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Bind Group Layout and Bind Group Entries in VTK WebGPU\nDESCRIPTION: This code snippet illustrates how `AddBuffer()` creates `BindGroupLayoutEntry` and `BindGroupEntry` associated with the buffer. These entries are used to build the `BindGroupLayout` and `BindGroup` during the `Dispatch()` call, which are crucial for configuring the compute pipeline.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// Creating the layout entry and the bind group entry for this buffer. These entries will be used\n// later when creating the bind groups / bind group layouts\nAddBindGroupLayoutEntry(buffer->GetGroup(), buffer->GetBinding(), buffer->GetMode());\nAddBindGroupEntry(wgpuBuffer, buffer->GetGroup(), buffer->GetBinding(), buffer->GetMode(), 0);\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingSceneGraph Classes in CMake\nDESCRIPTION: Defines a list of classes to be included in the VTK RenderingSceneGraph module. These classes represent various nodes in the scene graph, including actors, cameras, lights, mappers, and renderers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/SceneGraph/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkActorNode\n  vtkCameraNode\n  vtkLightNode\n  vtkMapperNode\n  vtkPolyDataMapperNode\n  vtkRendererNode\n  vtkViewNode\n  vtkViewNodeFactory\n  vtkVolumeMapperNode\n  vtkVolumeNode\n  vtkWindowNode)\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Argument Function in C++ with ExprTk\nDESCRIPTION: Shows how to create a variable argument function 'boo' using the ivararg_function interface in ExprTk. The function takes a vector of scalar arguments and returns a scalar result.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_50\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct boo final : public exprtk::ivararg_function<T>\n{\n   inline T operator()(const std::vector<T>& arglist) override\n   {\n      T result = T(0);\n\n      for (std::size_t i = 0; i < arglist.size(); ++i)\n      {\n         result += arglist[i] / arglist[i > 0 ? (i - 1) : 0];\n      }\n\n      return result;\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Subcommand Case Sensitivity\nDESCRIPTION: Options to control case sensitivity and parsing behavior of subcommands and options in CLI11\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\n.ignore_case()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.ignore_underscore()\n```\n\n----------------------------------------\n\nTITLE: Building OpenXR-SDK with CMake\nDESCRIPTION: These commands detail how to clone, build, and configure the OpenXR-SDK using CMake.  This is a prerequisite for building VTK with OpenXR support. The build is configured in Release mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\n> git clone git@github.com:KhronosGroup/OpenXR-SDK.git\n> mkdir OpenXR-SDK-build\n> cd OpenXR-SDK-build\nOpenXR-SDK-build > cmake ../OpenXR-SDK\nOpenXR-SDK-build > cmake --build . --config \"Release\"\n\n```\n\n----------------------------------------\n\nTITLE: Building VTK Project with Emscripten and CMake\nDESCRIPTION: This shell command is for building a VTK project using Emscripten. It uses `emcmake` to configure the project with CMake, specifies the build generator as Ninja, and sets the source and build directories. The `VTK_DIR` should point to the location where VTK for WebAssembly is built. Running these commands generates the build files, ready for compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/MultiCone \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Motion FX Module Classes and Tests\nDESCRIPTION: Sets up the VTK Motion FX I/O module by defining classes, adding the module to VTK, and configuring test mangling. Includes the vtkMotionFXCFGReader class and establishes necessary module dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MotionFX/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMotionFXCFGReader)\n\nvtk_module_add_module(VTK::IOMotionFX\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOMotionFX)\n```\n\n----------------------------------------\n\nTITLE: Using Basic Validators in CLI11 (C++)\nDESCRIPTION: Demonstrates how to use basic validators like ExistingFile and Range to check option inputs.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n->check(CLI::ExistingFile);\n->check(CLI::Range(0,10));\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Scopes with Loguru in C++\nDESCRIPTION: This C++ code snippet demonstrates the usage of scopes in Loguru for indenting log messages. It initializes the logging, defines a function scope, and uses `LOG_SCOPE_FUNCTION` and `VLOG_SCOPE_F` macros to manage indentation, as well as demonstrating conditional logging with `LOG_IF_F`.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/README.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nint main(int argc, char* argv[])\n{\n\tloguru::init(argc, argv);\n\tLOG_SCOPE_FUNCTION(INFO);\n\tLOG_F(INFO, \"Doing some stuff...\");\n\tfor (int i=0; i<2; ++i) {\n\t\tVLOG_SCOPE_F(1, \"Iteration %d\", i);\n\t\tauto result = some_expensive_operation();\n\t\tLOG_IF_F(WARNING, result == BAD, \"Bad result\");\n\t}\n\tLOG_F(INFO, \"Time to go!\");\n\treturn 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Module\nDESCRIPTION: This snippet adds a module to the VTK Filters for Python integration. It utilizes the classes defined earlier and integrates the Python algorithm class into the VTK module system. No external dependencies are required, and it is part of the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersPython\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI11 Options in C++\nDESCRIPTION: This snippet demonstrates various methods to configure options in CLI11, including setting required options, expected values, type specifications, dependencies, and more. It shows the chaining syntax for option configuration and explains different ways to specify options on the command line.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n->required()\n->expected(N)\n->expected(MIN,MAX)\n->type_name(typename)\n->type_size(N)\n->type_size(MIN,MAX)\n->needs(opt)\n->excludes(opt)\n->envname(name)\n->group(name)\n->ignore_case()\n->ignore_underscore()\n->disable_flag_override()\n->allow_extra_args(true/false)\n->delimiter(char)\n->description(str)\n->multi_option_policy(CLI::MultiOptionPolicy::Throw)\n->check(std::string(const std::string &), validator_name=\"\",validator_description=\"\")\n->transform(std::string(std::string &), validator_name=\"\",validator_description=\"\")\n->each(void(const std::string &))\n->configurable(false)\n->capture_default_str()\n->default_function(std::string())\n->always_capture_default()\n->default_str(string)\n->default_val(value)\n->run_callback_for_default()\n->option_text(string)\n->force_callback()\n->trigger_on_parse()\n```\n\n----------------------------------------\n\nTITLE: Handling Infinity in JSON Format with Custom Fast Float Options\nDESCRIPTION: This snippet demonstrates parsing a string representing 'inf' in a JSON-compliant format using the fast_float library. It shows how to configure parse options to allow non-standard values and validate the parsed result.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  std::string input = \"inf\"; // not valid in JSON but we allow it with json_or_infnan\n  double result;\n  fast_float::parse_options options{fast_float::chars_format::json_or_infnan};\n  auto answer = fast_float::from_chars_advanced(input.data(), input.data() + input.size(), result, options);\n  if (answer.ec != std::errc() || (!std::isinf(result))) { std::cerr << \"should have parsed infinity\\n\"; return EXIT_FAILURE; }\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests for VTK RenderingOpenGL2 Module in CMake\nDESCRIPTION: Configures a large set of C++ tests for the VTK RenderingOpenGL2 module, specifying test files and their properties such as data requirements and validation settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingOpenGL2CxxTests tests\n  TestBlockVisibility.cxx\n  TestBlurAndSobelPasses.cxx\n  TestCameraShiftScale.cxx,NO_DATA\n  TestCoincident.cxx\n  TestCoincidentFloor.cxx\n  TestCompositeDataOverlappingCells.cxx,\n  TestCompositeDataPointGaussian.cxx,NO_DATA\n  TestCompositeDataPointGaussianSelection.cxx,NO_DATA\n  TestComputeShader.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  TestCubeMap.cxx\n  TestCubeMap2.cxx\n  TestCubeMapRerender.cxx\n  TestCustomCursorShape.cxx,NO_VALID\n  TestDepthOfFieldPass.cxx\n  TestDepthPeelingOcclusionQuery.cxx\n  TestDepthPeelingPass.cxx\n  TestDepthPeelingPassViewport.cxx\n  TestEDLPass.cxx\n  TestEquirectangularToCubeMap.cxx\n  TestFXAAFilter.cxx\n  TestFXAAPass.cxx\n  TestFXAAWithEDLPass.cxx\n  TestFlipRenderFramebuffer.cxx\n  TestFloor.cxx,LOOSE_VALID\n  TestFluidMapper.cxx\n  TestFramebufferHDR.cxx\n  TestFramebufferPass.cxx\n  TestGaussianBlurPass.cxx\n  TestGlyph3DMapperCellPicking.cxx\n  TestGlyph3DMapperCulling.cxx\n  TestGlyph3DMapperEdges.cxx\n  TestGlyph3DMapperPickability.cxx,NO_DATA\n  TestGlyph3DMapperTreeIndexingCompositeGlyphs.cxx,NO_DATA\n  TestHiddenLineRemovalPass.cxx\n  TestLightingMapLuminancePass.cxx\n  TestLightingMapNormalsPass.cxx\n  TestMultiTexturing.cxx\n  TestMultiTexturingInterpolateScalars.cxx\n  TestNormalMapping.cxx\n  TestNormalMappingWithEdges.cxx\n  TestOffscreenRenderingResize.cxx\n  TestOutlineGlowPass.cxx\n  TestOrderIndependentTranslucentPass.cxx\n  TestPanoramicProjectionPass.cxx,NO_DATA\n  TestPBRClearCoat.cxx\n  TestPBREdgeTint.cxx\n  TestPBRHdrEnvironment.cxx\n  TestPBRAnisotropy.cxx\n  TestPBRColorMultiplier.cxx\n  TestPBRIrradianceHDR.cxx\n  TestPBRMapping.cxx\n  TestPBRMaterials.cxx\n  TestPBRMaterialsCoat.cxx\n  TestPBRTextureInterpolateScalars.cxx\n  TestPointFillPass.cxx\n  TestPointGaussianMapper.cxx\n  TestPointGaussianMapperAnisotropic.cxx\n  TestPointGaussianMapperOpacity.cxx\n  TestPointGaussianSelection.cxx,NO_DATA\n  TestProgramPointSize.cxx\n  TestPropPicker2Renderers.cxx,NO_DATA\n  TestRemoveActorNonCurrentContext.cxx\n  TestRenderToImage.cxx\n  TestSetZBuffer.cxx\n  TestShadowMapBakerPass.cxx\n  TestShadowMapPass.cxx\n  TestSharedRenderWindow.cxx\n  TestDirectSelectionRendering.cxx\n  TestSimpleMotionBlur.cxx\n  TestSobelGradientMagnitudePass.cxx\n  TestSphereMap.cxx\n  TestSpherePoints.cxx\n  TestSphereVertex.cxx\n  TestSRGB.cxx\n  TestSSAAPass.cxx\n  TestSSAOPass.cxx\n  TestSSAOPassWithRenderer.cxx\n  TestSurfaceInterpolationSwitch.cxx\n  TestTessellationShader.cxx,NO_DATA\n  TestTexture16Bits.cxx,NO_DATA\n  TestTexture32Bits.cxx,NO_DATA\n  TestTextureBufferEmulation.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  TestTextureInterpolateScalars.cxx\n  TestToneMappingPass.cxx,NO_DATA\n  TestUserShader.cxx\n  TestUserShader2.cxx\n  TestUserShader2D.cxx,NO_DATA\n  TestValuePassFloatingPoint.cxx\n  TestValuePassFloatingPoint2.cxx\n  TestVBOPLYMapper.cxx\n  TestVBOPointsLines.cxx\n  TestWindowBlits.cxx\n  UnitTestOpenGLUniforms.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up ExprTk Expression with File I/O Package\nDESCRIPTION: Demonstrates how to make a specific package (file I/O) available within an expression by adding it to the expression's symbol table. This example shows the complete workflow of defining types, creating a package instance, setting up a symbol table, registering the symbol table with an expression, compiling, and executing the expression.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_89\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\nexprtk::rtl::io::file::package<T> fileio_package;\n\nconst std::string expression_string =\n   \" var file_name := 'file.txt';       \"\n   \" var stream    := null;             \"\n   \"                                    \"\n   \" stream := open(file_name,'w');     \"\n   \"                                    \"\n   \" write(stream,'Hello world....\\\n'); \"\n   \"                                    \"\n   \" close(stream);                     \"\n   \"                                    \";\n\nsymbol_table_t symbol_table;\nsymbol_table.add_package(fileio_package);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.compile(expression_string,expression);\n\nexpression.value();\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly Project with CMake\nDESCRIPTION: This snippet provides the commands needed to build a WebAssembly project using CMake with specific configurations for VTK. It requires Emscripten and proper paths to the VTK installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/ConeMultiBackend \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Defining VTK FiltersCore Module Classes and Headers in CMake\nDESCRIPTION: Defines the VTK FiltersCore module by specifying the classes, public headers, and private headers. The classes list contains over 100 filter implementations that are core to VTK's data processing pipeline. The module is registered with vtk_module_add_module and configured for test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtk3DLinearGridCrinkleExtractor\n  vtk3DLinearGridPlaneCutter\n  vtkAppendArcLength\n  vtkAppendCompositeDataLeaves\n  vtkAppendDataSets\n  vtkAppendFilter\n  vtkAppendPartitionedDataSetCollection\n  vtkAppendPolyData\n  vtkAppendSelection\n  vtkArrayCalculator\n  vtkArrayRename\n  vtkAssignAttribute\n  vtkAttributeDataToFieldDataFilter\n  vtkAttributeDataToTableFilter\n  vtkBinCellDataFilter\n  vtkBinnedDecimation\n  vtkCellCenters\n  vtkCellDataToPointData\n  vtkCenterOfMass\n  vtkCleanPolyData\n  vtkClipPolyData\n  vtkCompositeCutter\n  vtkCompositeDataProbeFilter\n  vtkConnectivityFilter\n  vtkConstrainedSmoothingFilter\n  vtkContour3DLinearGrid\n  vtkContourFilter\n  vtkContourGrid\n  vtkContourHelper\n  vtkConvertToMultiBlockDataSet\n  vtkConvertToPartitionedDataSetCollection\n  vtkConvertToPolyhedra\n  vtkCutter\n  vtkDataObjectGenerator\n  vtkDataObjectToDataSetFilter\n  vtkDataSetEdgeSubdivisionCriterion\n  vtkDataSetToDataObjectFilter\n  vtkDecimatePolylineAngleStrategy\n  vtkDecimatePolylineCustomFieldStrategy\n  vtkDecimatePolylineDistanceStrategy\n  vtkDecimatePolylineFilter\n  vtkDecimatePro\n  vtkDelaunay2D\n  vtkDelaunay3D\n  vtkEdgeSubdivisionCriterion\n  vtkElevationFilter\n  vtkExecutionTimer\n  vtkExplicitStructuredGridCrop\n  vtkExplicitStructuredGridToUnstructuredGrid\n  vtkExtractCells\n  vtkExtractCellsAlongPolyLine\n  vtkExtractEdges\n  vtkFeatureEdges\n  vtkFieldDataToAttributeDataFilter\n  vtkFieldDataToDataSetAttribute\n  vtkFlyingEdges2D\n  vtkFlyingEdges3D\n  vtkFlyingEdgesPlaneCutter\n  vtkGenerateIds\n  vtkGenerateRegionIds\n  vtkGlyph2D\n  vtkGlyph3D\n  vtkGridSynchronizedTemplates3D\n  vtkHedgeHog\n  vtkHull\n  vtkHyperTreeGridProbeFilter\n  vtkHyperTreeGridProbeFilterUtilities\n  vtkIdFilter\n  vtkImageAppend\n  vtkImageDataToExplicitStructuredGrid\n  vtkImplicitPolyDataDistance\n  vtkImplicitProjectOnPlaneDistance\n  vtkMarchingCubes\n  vtkMarchingSquares\n  vtkMaskFields\n  vtkMaskPoints\n  vtkMaskPolyData\n  vtkMassProperties\n  vtkMergeDataObjectFilter\n  vtkMergeFields\n  vtkMergeFilter\n  vtkMoleculeAppend\n  vtkMultiObjectMassProperties\n  vtkOrientPolyData\n  vtkPackLabels\n  vtkPassThrough\n  vtkPlaneCutter\n  vtkPointDataToCellData\n  vtkPolyDataConnectivityFilter\n  vtkPolyDataEdgeConnectivityFilter\n  vtkPolyDataNormals\n  vtkPolyDataPlaneClipper\n  vtkPolyDataPlaneCutter\n  vtkPolyDataTangents\n  vtkPolyDataToUnstructuredGrid\n  vtkProbeFilter\n  vtkQuadricClustering\n  vtkQuadricDecimation\n  vtkRearrangeFields\n  vtkRectilinearSynchronizedTemplates\n  vtkRemoveDuplicatePolys\n  vtkRemoveUnusedPoints\n  vtkResampleToImage\n  vtkResampleWithDataSet\n  vtkReverseSense\n  vtkSimpleElevationFilter\n  vtkSmoothPolyDataFilter\n  vtkSphereTreeFilter\n  vtkSplitSharpEdgesPolyData\n  vtkStructuredDataPlaneCutter\n  vtkStaticCleanPolyData\n  vtkStaticCleanUnstructuredGrid\n  vtkStreamerBase\n  vtkStreamingTessellator\n  vtkStripper\n  vtkStructuredGridAppend\n  vtkStructuredGridOutlineFilter\n  vtkSurfaceNets2D\n  vtkSurfaceNets3D\n  vtkSynchronizedTemplates2D\n  vtkSynchronizedTemplates3D\n  vtkSynchronizedTemplatesCutter3D\n  vtkTensorGlyph\n  vtkThreshold\n  vtkThresholdPoints\n  vtkTransposeTable\n  vtkTriangleFilter\n  vtkTriangleMeshPointNormals\n  vtkTubeBender\n  vtkTubeFilter\n  vtkUnstructuredGridQuadricDecimation\n  vtkUnstructuredGridToExplicitStructuredGrid\n  vtkVectorDot\n  vtkVectorNorm\n  vtkVoronoi2D\n  vtkWindowedSincPolyDataFilter)\n\nset(headers\n  vtkDecimatePolylineStrategy.h)\n\nset(private_headers\n  vtk3DLinearGridInternal.h)\n\nvtk_module_add_module(VTK::FiltersCore\n  CLASSES ${classes}\n  HEADERS ${headers}\n  PRIVATE_HEADERS ${private_headers})\n\nvtk_add_test_mangling(VTK::FiltersCore)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON objects from JSON literals in C++\nDESCRIPTION: This snippet provides multiple methods to create nlohmann::json objects directly from literals. It demonstrates using raw string literals, user-defined literals, and initializer lists.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Using (raw) string literals and json::parse\njson ex1 = json::parse(R\"(\n  {\n    \"pi\": 3.141,\n    \"happy\": true\n  }\n)\");\n\n// Using user-defined (raw) string literals\nusing namespace nlohmann::literals;\njson ex2 = R\"(\n  {\n    \"pi\": 3.141,\n    \"happy\": true\n  }\n)\"_json;\n\n// Using initializer lists\njson ex3 = {\n  {\"happy\", true},\n  {\"pi\", 3.141},\n};\n```\n\n----------------------------------------\n\nTITLE: Using Template Overloads in CLI11 (C++)\nDESCRIPTION: Demonstrates how to use the two-parameter template overload of add_option to restrict input types or control type conversion. Shows examples with basic types, variants, and containers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\ndouble val\napp.add_option<double,unsigned int>(\"-v\",val);\n```\n\n----------------------------------------\n\nTITLE: VTK Math Function Mappings\nDESCRIPTION: Mapping of VTK wrapper functions to their std:: counterparts for handling mathematical operations like isnan, isfinite, and isinf. These wrappers are provided to work around compiler performance issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nvtk::isnan -> std::isnan\nvtk::isfinite -> std::isfinite\nvtk::isisinfnan -> std::isinf\n```\n\n----------------------------------------\n\nTITLE: STL-like JSON Container Operations in C++\nDESCRIPTION: Demonstrates STL-like container operations for JSON arrays and objects including pushing elements, iteration, access operations, and property checking. Shows both array and object manipulation patterns.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\njson j;\nj.push_back(\"foo\");\nj.push_back(1);\nj.push_back(true);\n\nj.emplace_back(1.78);\n\nfor (json::iterator it = j.begin(); it != j.end(); ++it) {\n  std::cout << *it << '\\n';\n}\n\nfor (auto& element : j) {\n  std::cout << element << '\\n';\n}\n\nconst auto tmp = j[0].template get<std::string>();\nj[1] = 42;\nbool foo = j.at(2);\n\nj == R\"([\"foo\", 1, true, 1.78])\"_json;\n\nj.size();\nj.empty();\nj.type();\nj.clear();\n\nj.is_null();\nj.is_boolean();\nj.is_number();\nj.is_object();\nj.is_array();\nj.is_string();\n\njson o;\no[\"foo\"] = 23;\no[\"bar\"] = false;\no[\"baz\"] = 3.141;\n\no.emplace(\"weather\", \"sunny\");\n\nfor (json::iterator it = o.begin(); it != o.end(); ++it) {\n  std::cout << it.key() << \" : \" << it.value() << \"\\n\";\n}\n\nfor (auto& el : o.items()) {\n  std::cout << el.key() << \" : \" << el.value() << \"\\n\";\n}\n\nfor (auto& [key, value] : o.items()) {\n  std::cout << key << \" : \" << value << \"\\n\";\n}\n\nif (o.contains(\"foo\")) {\n}\n\nif (o.find(\"foo\") != o.end()) {\n}\n\nint foo_present = o.count(\"foo\");\nint fob_present = o.count(\"fob\");\n\no.erase(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK classes with keyword arguments in Python\nDESCRIPTION: This code snippet demonstrates initializing VTK classes such as vtkSphereSource and vtkElevationFilter in Python using keyword arguments during construction. This allows for setting properties directly during object creation, improving code readability and conciseness. The snippet also prints the range of the scalar values of the output point data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-property-initialization-for-vtk-class-from-python-constructor.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ns = vtkSphereSource(center=(1, 0, 0), generate_normals=False, radius=10, theta_resolution=20)\ne = vtkElevationFilter(low_point=(1, 0, -10), high_point=(1, 0, 10), input_connection=s.output_port)\ne.Update()\nprint(e.output.point_data.scalars.range) # prints (0.0, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scalar Function in C++ with ExprTk\nDESCRIPTION: Demonstrates how to create a custom 3-parameter scalar function 'foo' using the ifunction interface in ExprTk. The function takes three scalar inputs and returns a scalar result.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_49\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct foo final : public exprtk::ifunction<T>\n{\n   foo() : exprtk::ifunction<T>(3)\n   {}\n\n   T operator()(const T& v1, const T& v2, const T& v3) override\n   {\n      return T(1) + (v1 * v2) / T(v3);\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values and Array Returns\nDESCRIPTION: Shows how null values and array returns are handled in VTK's Python interface.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = vtkActor()\n>>> print(a.GetPosition())\n(0.0, 0.0, 0.0)\n\n>>> a = vtkActor()\n>>> a.SetMapper(None)\n>>> print(a.GetMapper())\nNone\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK iOS Build with CMake\nDESCRIPTION: Commands to configure VTK build for iOS using CMake with specific options for device and simulator architectures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/VTKViewer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npath/to/VTK-iOS-build> ccmake -DVTK_IOS_BUILD=ON /path/to/VTK\n```\n\nLANGUAGE: bash\nCODE:\n```\npath/to/VTK-iOS-build> ccmake -DVTK_IOS_BUILD=ON /path/to/VTK -G Ninja\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Magnitudes Using vtkDataArray API in C++\nDESCRIPTION: This snippet demonstrates how to calculate the magnitudes of 3-component vectors using the generic vtkDataArray API. While inefficient, it showcases the flexibility of working with vtkDataArray without knowing the underlying data type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// 3 component magnitude calculation using the vtkDataArray API.\n// Inefficient, but easy to write:\nvoid calcMagnitude(vtkDataArray *vectors, vtkDataArray *magnitude)\n{\n  vtkIdType numVectors = vectors->GetNumberOfTuples();\n  for (vtkIdType tupleIdx = 0; tupleIdx < numVectors; ++tupleIdx)\n    {\n    // What data types are magnitude and vectors using?\n    // We don't care! These methods all use double.\n    magnitude->SetComponent(tupleIdx, 0,\n      std::sqrt(vectors->GetComponent(tupleIdx, 0) *\n                vectors->GetComponent(tupleIdx, 0) +\n                vectors->GetComponent(tupleIdx, 1) *\n                vectors->GetComponent(tupleIdx, 1) +\n                vectors->GetComponent(tupleIdx, 2) *\n                vectors->GetComponent(tupleIdx, 2));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Point Attribute Buffers from VTK Rendering Pipeline in WebGPU Compute\nDESCRIPTION: This snippet shows how to access existing point attribute buffers from a VTK rendering pipeline for use in a WebGPU compute pass. It demonstrates how to retrieve the buffer, set bindings, and understand the uniform values provided for offset and length.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nint bufferGroup = 0, bufferBinding = 0;\nint uniformsGroup = 0, uniformsBinding = 1;\n\nvtkSmartPointer<vtkWebGPUComputeRenderBuffer> pointColorsRenderBuffer =\n  webGPUMapper->AcquirePointAttributeComputeRenderBuffer(vtkWebGPUPolyDataMapper::PointDataAttributes::COLORS,\n  bufferGroup, bufferBinding, uniformsGroup, uniformsBinding);\n```\n\n----------------------------------------\n\nTITLE: Executing Unrestricted Single Array Dispatch in C++\nDESCRIPTION: This code snippet shows how to execute an unrestricted single array dispatch using `vtkArrayDispatch::Dispatch`.  It takes an array and a worker functor as input.  The dispatcher automatically iterates through all possible array types and calls the worker with the appropriate array type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nvtkArrayDispatch::Dispatch::Execute(array, worker);\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Module Dependencies in Python\nDESCRIPTION: The `vtkmodules.register_vtk_module_dependencies` function allows users to automate imports when a VTK module is loaded.  This is especially useful for enhancing native VTK classes with Python classes using the `@override` capability. It takes the VTK module name and a list of import strings as arguments.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/python-numpy-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"vtkmodules.register_vtk_module_dependencies(vtk_module_name, *import_strings)\"\n```\n\n----------------------------------------\n\nTITLE: Managing Third-Party Libraries with vtk_module_third_party in CMake\nDESCRIPTION: This snippet configures the integration of a third-party library, specifying licensing, copyright details, download location, and version requirements. It also sets up target inclusion paths for the VTK project. No explicit dependencies aside from CMake are necessary. Key parameters include LICENSE_FILES, SPDX_LICENSE_IDENTIFIER, and PACKAGE PNG. This setup expects accurate path and library version specifications for correct usage.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkpng/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"Libpng\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 1995-2024 The PNG Reference Library Authors.\"\n      \"Copyright (c) 2018-2024 Cosmin Truta.\"\n      \"Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson.\"\n      \"Copyright (c) 1996-1997 Andreas Dilger.\"\n      \"Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/png.git@for/vtk-20240416-1.6.44\"\n    VERSION\n      \"1.6.44\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE PNG\n    TARGETS PNG::PNG\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: New Pipeline Update Methods in vtkAlgorithm\nDESCRIPTION: New methods added to vtkAlgorithm class for easier and more predictable pipeline updates.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nint Update(int port, vtkInformationVector* requests);\nint Update(vtkInformation* requests);\nint UpdatePiece(int piece, int numPieces, int ghostLevels, const int extents[6]=0);\nint UpdateExtent(const int extents[6]);\nint UpdateTimeStep(double time,\n    int piece=-1, int numPieces=1, int ghostLevels=0, const int extents[6]=0);\n```\n\n----------------------------------------\n\nTITLE: Test Data Management Commands\nDESCRIPTION: Series of commands for managing test data files including building, running tests, and copying baseline images\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../VTK-build\n$ cmake .\n$ make\n$ ctest -R MyTest\n$ cd ../VTK\n$ mkdir -p Some/Module/Testing/Data/Baseline\n$ cp ../VTK-build/Testing/Temporary/MyTest.png Some/Module/Testing/Data/Baseline\n```\n\n----------------------------------------\n\nTITLE: Generating lex.yy.c from vtkParse.l using flex\nDESCRIPTION: Steps to generate the lexical analyzer code (lex.yy.c) from the vtkParse.l file using flex. This process includes running flex, formatting the output, and making necessary modifications to the generated code.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflex --nodefault --noline -olex.yy.c vtkParse.l\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Warnings Once per Session in Python\nDESCRIPTION: This Python code snippet shows how to display each deprecation warning only once per session using the `warnings` module. It configures the filter to show `DeprecationWarning` only once.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nwarnings.filterwarnings('once', category=DeprecationWarning)\n```\n\n----------------------------------------\n\nTITLE: Label Value Formatting Options\nDESCRIPTION: Supports multiple label formatting modes including fixed-point and scientific notation for flexible numeric display\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/legend-scale-actor.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nactor->SetLabelFormat(\"%6.2f\"); // Fixed-point\nactor->SetLabelFormat(\"%6.2e\"); // Scientific notation\n```\n\n----------------------------------------\n\nTITLE: Including Quick Start Guide in Documentation\nDESCRIPTION: Sphinx include directive to embed the develop quickstart guide content with a heading offset of 1 level.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{include} develop_quickstart.md\n:heading-offset: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Context2D Module in CMake\nDESCRIPTION: This snippet defines the classes for the VTK::PythonContext2D module, adds the module to the project, and sets up test mangling. It includes the vtkPythonItem class and configures the module using CMake commands.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/PythonContext2D/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPythonItem)\n\nvtk_module_add_module(VTK::PythonContext2D\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::PythonContext2D)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Field Metadata in Conduit with Ghost Cell Handling\nDESCRIPTION: This snippet demonstrates how to create a Conduit mesh with cell ghost values and add VTK-specific metadata using the state/metadata/vtk_fields node. It shows how to define replacement values to convert custom ghost cell indicators to VTK's standard HIDDENCELL value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-state_metadata_vtk_fields-vtkConduitSource.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconduit_cpp::Node mesh;\nCreateUniformMesh(3, 3, 3, mesh);\n\nstd::vector<int> cellGhosts(8, 0);\ncellGhosts[2] = 1;\n\nconduit_cpp::Node resCellFields = mesh[\"fields/other_ghosts\"];\nresCellFields[\"association\"] = \"element\";\nresCellFields[\"topology\"] = \"mesh\";\nresCellFields[\"volume_dependent\"] = \"false\";\nresCellFields[\"values\"] = cellGhosts;\n\nstd::vector<int> cellGhostValuesToReplace(1, 1);\nstd::vector<int> cellGhostReplacementValues(1, vtkDataSetAttributes::HIDDENCELL);\n\nstd::vector<int> cellGhostsMetaData(1, 1);\nconduit_cpp::Node ghostMetaData = mesh[\"state/metadata/vtk_fields/other_ghosts\"];\nghostMetaData[\"attribute_type\"] = \"Ghosts\";\nghostMetaData[\"values_to_replace\"] = cellGhostValuesToReplace;\nghostMetaData[\"replacement_values\"] = cellGhostReplacementValues;\n```\n\n----------------------------------------\n\nTITLE: Defining InteractionStyle Classes in VTK\nDESCRIPTION: Sets up a list of VTK interaction style classes that will be part of the InteractionStyle module. These classes provide different ways for users to interact with VTK visualizations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkInteractorStyleDrawPolygon\n  vtkInteractorStyleFlight\n  vtkInteractorStyleImage\n  vtkInteractorStyleJoystickActor\n  vtkInteractorStyleJoystickCamera\n  vtkInteractorStyleMultiTouchCamera\n  vtkInteractorStyleRubberBand2D\n  vtkInteractorStyleRubberBand3D\n  vtkInteractorStyleRubberBandPick\n  vtkInteractorStyleRubberBandZoom\n  vtkInteractorStyleTerrain\n  vtkInteractorStyleTrackball\n  vtkInteractorStyleTrackballActor\n  vtkInteractorStyleTrackballCamera\n  vtkInteractorStyleUnicam\n  vtkInteractorStyleUser\n\n  vtkInteractorStyleSwitch\n  vtkParallelCoordinatesInteractorStyle)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Dependencies for VTK RenderingQt in CMake\nDESCRIPTION: Includes the vtkQt CMake module, finds the required Qt package with the Widgets component, and links it to the VTK RenderingQt module. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Qt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(vtkQt)\nvtk_module_find_package(\n  PACKAGE     \"Qt${vtk_qt_major_version}\"\n  COMPONENTS  Widgets\n  FORWARD_VERSION_REQ MINOR\n  VERSION_VAR         \"Qt${vtk_qt_major_version}_VERSION\")\nvtk_module_link(VTK::RenderingQt PUBLIC \"Qt${vtk_qt_major_version}::Widgets\")\nvtk_add_test_mangling(VTK::RenderingQt)\n```\n\n----------------------------------------\n\nTITLE: Polygonal Dataset Format in VTK\nDESCRIPTION: Format for polygonal datasets including vertices, lines, polygons, and triangle strips. Defines topology through points and various primitive types.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nDATASET POLYDATA\nPOINTS n dataType\np0x p0y p0z\np1x p1y p1z\n...\np(n-1)x p(n-1)y p(n-1)z\n\nVERTICES n size\nnumPoints0, i0, j0, k0, ...\nnumPoints1, i1, j1, k1, ...\n...\nnumPointsn-1, in-1, jn-1, kn-1, ...\n\nLINES n size\nnumPoints0, i0, j0, k0, ...\nnumPoints1, i1, j1, k1, ...\n...\nnumPointsn-1, in-1, jn-1, kn-1, ...\n\nPOLYGONS n size\nnumPoints0, i0, j0, k0, ...\nnumPoints1, i1, j1, k1, ...\n...\nnumPointsn-1, in-1, jn-1, kn-1, ...\n\nTRIANGLE_STRIPS n size\nnumPoints0, i0, j0, k0, ...\nnumPoints1, i1, j1, k1, ...\n...\nnumPointsn-1, in-1, jn-1, kn-1, ...\n```\n\n----------------------------------------\n\nTITLE: InvokeEvent Method Documentation Example\nDESCRIPTION: The Python method signatures for `InvokeEvent`, showing how to use it to fire events and interpret the return values indicating if an event was aborted.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n    InvokeEvent(self, event:int, callData:Any) -> int\n    C++: int InvokeEvent(unsigned long event, void* callData)\n    InvokeEvent(self, event:str, callData:Any) -> int\n    C++: int InvokeEvent(const char* event, void* callData)\n    InvokeEvent(self, event:int) -> int\n    C++: int InvokeEvent(unsigned long event)\n    InvokeEvent(self, event:str) -> int\n    C++: int InvokeEvent(const char* event)\n\n    This method invokes an event and returns whether the event was\n    aborted or not. If the event was aborted, the return value is 1,\n    otherwise it is 0.\n```\n\n----------------------------------------\n\nTITLE: Custom data source for JSON parsing in C++\nDESCRIPTION: This snippet provides an example of how to implement a custom iterator for parsing JSON data. It demonstrates the concept of LegacyInputIterator for custom data structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstruct MyContainer {\n  void advance();\n  const char& get_current();\n};\n\nstruct MyIterator {\n    using difference_type = std::ptrdiff_t;\n    using value_type = char;\n    using pointer = const char*;\n    using reference = const char&;\n    using iterator_category = std::input_iterator_tag;\n\n    MyIterator& operator++() {\n        MyContainer.advance();\n        return *this;\n    }\n\n    bool operator!=(const MyIterator& rhs) const {\n        return rhs.target != target;\n    }\n\n    reference operator*() const {\n        return target.get_current();\n    }\n\n    MyContainer* target = nullptr;\n};\n\nMyIterator begin(MyContainer& tgt) {\n    return MyIterator{&tgt};\n}\n\nMyIterator end(const MyContainer&) {\n    return {};\n}\n\nvoid foo() {\n    MyContainer c;\n    json j = json::parse(c);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK InfovisCore Module Classes and Tests\nDESCRIPTION: Defines a list of VTK InfovisCore module classes and sets up the module with test mangling. The configuration includes data processing, graph manipulation, and visualization components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAddMembershipArray\n  vtkAdjacencyMatrixToEdgeTable\n  vtkArrayNorm\n  vtkArrayToTable\n  vtkCollapseGraph\n  vtkCollapseVerticesByArray\n  vtkContinuousScatterplot\n  vtkDotProductSimilarity\n  vtkEdgeCenters\n  vtkExpandSelectedGraph\n  vtkExtractSelectedGraph\n  vtkExtractSelectedTree\n  vtkGenerateIndexArray\n  vtkGraphHierarchicalBundleEdges\n  vtkGroupLeafVertices\n  vtkKCoreDecomposition\n  vtkMergeColumns\n  vtkMergeGraphs\n  vtkMergeTables\n  vtkMutableGraphHelper\n  vtkNetworkHierarchy\n  vtkPipelineGraphSource\n  vtkPruneTreeFilter\n  vtkRandomGraphSource\n  vtkReduceTable\n  vtkRemoveHiddenData\n  vtkRemoveIsolatedVertices\n  vtkSparseArrayToTable\n  vtkStreamGraph\n  vtkStringToCategory\n  vtkStringToNumeric\n  vtkTableToArray\n  vtkTableToGraph\n  vtkTableToSparseArray\n  vtkTableToTreeFilter\n  vtkThresholdGraph\n  vtkThresholdTable\n  vtkTransferAttributes\n  vtkTransposeMatrix\n  vtkTreeDifferenceFilter\n  vtkTreeFieldAggregator\n  vtkTreeLevelsFilter\n  vtkVertexDegree\n  vtkWordCloud)\n\nvtk_module_add_module(VTK::InfovisCore\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::InfovisCore)\n```\n\n----------------------------------------\n\nTITLE: Creating Shader Module, Bind Groups, and Compute Pipeline in VTK WebGPU Dispatch\nDESCRIPTION: This code snippet shows how the `Dispatch()` method creates the shader module, bind groups, and the compute pipeline if they haven't been initialized yet. This deferred initialization ensures that all required buffer information is available before creating these resources.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nif (!Initialized)\n{\n  CreateShaderModule();\n  CreateBindGroups();\n  CreateComputePipeline();\n\n  Initialized = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Main C++ Tests for VTK Common Data Model\nDESCRIPTION: Configures the main set of C++ tests for the VTK Common Data Model module. It specifies test files and options such as NO_DATA, NO_VALID, and NO_OUTPUT for certain tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonDataModelCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  ${memkind_tests}\n  LagrangeHexahedron.cxx\n  BezierInterpolation.cxx\n  CellTreeLocator.cxx\n  TestBezier.cxx\n  TestAngularPeriodicDataArray.cxx\n  TestArrayListTemplate.cxx\n  TestCellInflation.cxx\n  TestColor.cxx\n  TestCoordinateFrame.cxx\n  TestVector.cxx\n  TestVectorOperators.cxx\n  TestAMRBox.cxx\n  TestBiQuadraticQuad.cxx\n  TestCellArray.cxx\n  TestCellArrayTraversal.cxx\n  TestCompositeDataSets.cxx\n  TestCompositeDataSetRange.cxx\n  TestComputeBoundingSphere.cxx\n  TestDataAssembly.cxx\n  TestDataAssemblyUtilities.cxx\n  TestDataSetAttributes.cxx\n  TestDataObject.cxx\n  TestDataObjectTreeRange.cxx\n  TestFieldList.cxx\n  TestGenericCell.cxx\n  TestGraph.cxx\n  TestGraph2.cxx\n  TestGraphAttributes.cxx\n  TestHigherOrderCell.cxx\n  TestHyperTreeGridBitmask.cxx\n  TestHyperTreeGridBounds.cxx\n  TestHyperTreeGridCursors.cxx\n  TestHyperTreeGridElderChildIndex.cxx\n  TestImageDataFindCell.cxx\n  TestImageDataInterpolation.cxx\n  TestImageDataOrientation.cxx\n  TestImageDataTransformCoordinates.cxx\n  TestImageIterator.cxx\n  TestInformationDataObjectKey.cxx\n  TestInterpolationDerivs.cxx\n  TestInterpolationFunctions.cxx\n  TestMappedGridDeepCopy.cxx\n  TestMappedGridShallowCopy.cxx\n  TestMeshMTime.cxx\n  TestPath.cxx\n  TestPentagonalPrism.cxx\n  TestPiecewiseFunction.cxx\n  TestPiecewiseFunctionLogScale.cxx\n  TestPixelExtent.cxx\n  TestPointLocators.cxx\n  TestPolyDataRemoveCell.cxx\n  TestPolygon.cxx\n  TestPolygonBoundedTriangulate.cxx\n  TestPolygonNormalOverflow.cxx\n  TestPolyhedron0.cxx\n  TestPolyhedron1.cxx\n  TestPolyhedron3.cxx\n  TestPolyhedronCombinatorialContouring.cxx\n  TestPolyhedronConvexity.cxx\n  TestPolyhedronConvexityMultipleCells.cxx\n  TestPolyhedronTriangulateFaces.cxx\n  TestPolyhedralCellsInUG.cxx\n  TestPyramid.cxx\n  TestQuadraticPolygon.cxx\n  TestRect.cxx\n  TestSMPFeatures.cxx\n  TestSelectionExpression.cxx\n  TestSelectionSubtract.cxx\n  TestSetCellsPolyhedronBackCompatibility.cxx\n  TestSimpleIncrementalOctreePointLocator.cxx\n  TestSortFieldData.cxx\n  TestStaticCellLocator.cxx\n  TestStructuredCellArray.cxx\n  TestTable.cxx\n  TestThreadedCopy.cxx\n  TestTreeBFSIterator.cxx\n  TestTreeDFSIterator.cxx\n  TestTriangle.cxx\n  TestTetra.cxx\n  TimePointLocators.cxx\n  otherCellBoundaries.cxx\n  otherCellPosition.cxx\n  otherCellTypes.cxx\n  otherCellGrid.cxx\n  otherColorTransferFunction.cxx\n  otherEmptyCell.cxx\n  otherFieldData.cxx\n  otherHyperTreeGrid.cxx\n  otherImageData.cxx\n  otherPolyData.cxx\n  otherRectilinearGrid.cxx\n  otherStructuredGrid.cxx\n  otherUniformGrid.cxx\n  otherUnstructuredGrid.cxx\n  quadCellConsistency.cxx\n  quadraticEvaluation.cxx\n  TestBoundingBox.cxx\n  TestPlane.cxx\n  TestStaticCellLinks.cxx\n  TestStructuredData.cxx\n  TestDataObjectTypes.cxx\n  TestPolyDataRemoveDeletedCells.cxx\n  UnitTestCells.cxx\n  UnitTestImplicitDataSet.cxx\n  UnitTestImplicitVolume.cxx\n  UnitTestLine.cxx\n  UnitTestPlanesIntersection.cxx\n  UnitTestTriangleIntersection.cxx\n  TestHyperTreeGridGeometricLocator.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Out-of-Range Float Handling Example with fast_float in C++\nDESCRIPTION: Examples showing how the library handles out-of-range floating-point values. Very small values are parsed as zero and very large values as infinity, with the error code indicating the out-of-range condition.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n  double result = -1;\n  std::string str = \"3e-1000\";\n  auto r = fast_float::from_chars(str.data(), str.data() + str.size(), result);\n  // r.ec == std::errc::result_out_of_range\n  // r.ptr == str.data() + 7\n  // result == 0\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup in CLI11\nDESCRIPTION: Shows how to set up configuration file handling in CLI11\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\napp.set_config(option_name=\"\",\n               default_file_name=\"\",\n               help_string=\"Read an ini file\",\n               required=false)\n```\n\n----------------------------------------\n\nTITLE: Reconstructed Interactive Test Command\nDESCRIPTION: This snippet shows the reconstructed test command for running the TestUserShader2D test interactively, with the addition of the '-I' argument to keep the browser open.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/python3 \\\n\"/path/to/vtk/Testing/WebAssembly/runner.py\" \\\n\"--engine=/path/to/vtk/.gitlab/chrome/chrome\" \\\n\"--exit\" \\\n\"/path/to/vtk/build/bin/vtkRenderingOpenGL2CxxTests.js\" \\\n\"TestUserShader2D\"\n\"-I\"\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Catalyst Configuration in CMake\nDESCRIPTION: This snippet sets up a third-party Catalyst module in VTK, specifying package components and versions. It requires CMake and the VTK build system. Core parameters include 'catalyst', 'SDK', and 'catalyst::catalyst'. This setup ensures the correct version of Catalyst is used within the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Catalyst/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_external(\n  PACKAGE catalyst\n  COMPONENTS SDK\n  TARGETS catalyst::catalyst\n  VERSION \"2.0\")\n```\n\n----------------------------------------\n\nTITLE: Lambda Implementation of Hull Processing\nDESCRIPTION: Shows how to implement the same hull processing functionality using a C++ lambda function with vtkSMPTools::For().\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n  vtkSMPTools::For(0, numPts, [&](vtkIdType ptId, vtkIdType endPtId) {\n    for (; ptId < endPtId; ++ptId)\n    {\n      double v, coord[3];\n      pts->GetPoint(ptId, coord);\n      for (auto j = 0; j < numPlanes; j++)\n      {\n        v = -(planes[j * 4 + 0] * coord[0] + planes[j * 4 + 1] * coord[1] +\n          planes[j * 4 + 2] * coord[2]);\n        // negative means further in + direction of plane\n        if (v < planes[j * 4 + 3])\n        {\n          planes[j * 4 + 3] = v;\n        }\n      }\n    }\n  }); // end lambda\n```\n\n----------------------------------------\n\nTITLE: vtkDataArray Integer Tuple Access API in C++\nDESCRIPTION: These methods, `GetIntegerTuple`, `SetIntegerTuple`, `GetUnsignedTuple`, and `SetUnsignedTuple`, are added to the `vtkDataArray` class. They allow direct access to integer data as 64-bit signed or unsigned integers, providing a reliable way to handle large integer values without casting. A pointer to a 64-bit integer array of sufficient size to hold the tuple is required as input.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/array-api.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid GetIntegerTuple(vtkIdType tupleIdx, vtkTypeInt64* tuple);\nvoid SetIntegerTuple(vtkIdType tupleIdx, vtkTypeInt64* tuple);\n\nvoid GetUnsignedTuple(vtkIdType tupleIdx, vtkTypeUInt64* tuple);\nvoid SetUnsignedTuple(vtkIdType tupleIdx, vtkTypeUInt64* tuple);\n```\n\n----------------------------------------\n\nTITLE: NewInstance Example with vtkImplicitArray\nDESCRIPTION: Demonstrates the NewInstance behavior for creating new array instances and copying values.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvtkSmartPointer<vtkDataArray> originalArr = SomeMethodProvidingAnArray();\nvtkSmartPointer<vtkDataArray> newArr = vtk::TakeSmartPointer(originalArr->NewInstance());\nnewArr->SetNumberOfTuples(1);\nnewArr->SetComponent(0, 0, originalArr->GetComponent(0, 0));\nCHECK(originalArr->getComponent(0, 0) == newArr->GetComponent(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Configuring Python3 Testing Environment in VTK CMake\nDESCRIPTION: Sets up Python3 interpreter for testing and configures a specific test for marshal hint header consistency. Uses CMake's find_package to locate Python3 and configures VTK-specific test using vtk_add_test_python command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Marshalling/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python3 QUIET COMPONENTS Interpreter)\nif (Python3_FOUND)\n  set(_vtk_testing_python_exe \"$<TARGET_FILE:Python3::Interpreter>\")\n  vtk_add_test_python(\n    TestMarshalHintHeaderConsistency,marshal_macro_annotate_headers.py,NO_DATA,NO_OUTPUT,NO_VALID --test)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Converting Between UTF-8 and Wide Strings in CLI11\nDESCRIPTION: This snippet shows the function signatures for converting between UTF-8 and wide strings in CLI11. It includes functions for narrowing (wide to UTF-8) and widening (UTF-8 to wide) strings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_42\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace CLI {\n    std::string narrow(const std::wstring &str);\n    std::string narrow(const wchar_t *str);\n    std::string narrow(const wchar_t *str, std::size_t size);\n    std::string narrow(std::wstring_view str);  // C++17\n\n    std::wstring widen(const std::string &str);\n    std::wstring widen(const char *str);\n    std::wstring widen(const char *str, std::size_t size);\n    std::wstring widen(std::string_view str);  // C++17\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test Scripts for VTK\nDESCRIPTION: This snippet uses the `vtk_add_test_python` function to include various Python files as tests within the VTK build environment. Each file represents a different test case related to functionalities such as fixed point ray casting, Gaussian processing, and volume picking. The required prerequisites include a properly configured VTK build system that supports Python testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nvtk_add_test_python(\n  TestFixedPointRayCasterLinearCropped.py\n  TestFixedPointRayCasterLinear.py\n  TestFixedPointRayCasterNearestCropped.py\n  TestFixedPointRayCasterNearest.py\n  cursor3D.py\n  VolumePicker.py\n  VolumePickerCrop.py\n  gaussian.py\n  TestGPURayCastIndependentComponent.py\n  TestGPURayCastIndependentComponentMIP.py\n  TestGPURayCastIndependentComponentMinIP.py\n  TestGPURayCastUserShader.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Basic Mathematical Expression Examples in ExprTk\nDESCRIPTION: Examples demonstrating various mathematical expressions that can be parsed and evaluated using ExprTk, including arithmetic operations, functions, and control structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nsqrt(1 - (3 / x^2))\nclamp(-1, sin(2 * pi * x) + cos(y / 2 * pi), +1)\nsin(2.34e-3 * x)\nif(((x[2] + 2) == 3) and ((y + 5) <= 9),1 + w, 2 / z)\ninrange(-2,m,+2) == if(({-2 <= m} and [m <= +2]),1,0)\n({1/1}*[1/2]+(1/3))-{1/4}^[1/5]+(1/6)-({1/7}+[1/8]*(1/9))\na * exp(2.2 / 3.3 * t) + c\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Movie Writer Classes\nDESCRIPTION: Sets up a list of movie writer classes based on platform-specific video support flags. Dynamically includes vtkAVIWriter and vtkMP4Writer for Windows platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkGenericMovieWriter)\n```\n\n----------------------------------------\n\nTITLE: Using nlohmann_json with CMake External Package\nDESCRIPTION: CMake snippet demonstrating how to find and link against an externally installed nlohmann_json library using find_package().\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\n# CMakeLists.txt\nfind_package(nlohmann_json 3.2.0 REQUIRED)\n...\nadd_library(foo ...)\n...\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Development Version from Master\nDESCRIPTION: Command to install the latest development version of VTK from the master branch, including pre-release versions and bypassing cache.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/available_python_wheels.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --extra-index-url https://wheels.vtk.org vtk --pre --no-cache\n```\n\n----------------------------------------\n\nTITLE: Using the compute Helper Function with Different Variable Counts in ExprTk\nDESCRIPTION: Demonstrates the various overloads of the compute helper function for evaluating expressions with different numbers of variables. The example shows four scenarios: no variables, one variable (x), two variables (x, y), and three variables (x, y, z).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_93\n\nLANGUAGE: C++\nCODE:\n```\nT result = T(0);\n\n// No variables overload\nconst std::string no_vars = \"abs(1 - (3 / pi)) * 5\";\n\nif (!exprtk::compute(no_vars,result))\n   printf(\"Failed to compute: %s\",no_vars.c_str());\nelse\n   printf(\"Result: %15.5f\\n\",result);\n\n// One variable 'x' overload\nT x = T(123.456);\n\nconst std::string one_var = \"abs(x - (3 / pi)) * 5\";\n\nif (!exprtk::compute(one_var, x, result))\n   printf(\"Failed to compute: %s\",one_var.c_str());\nelse\n   printf(\"Result: %15.5f\\n\",result);\n\n// Two variables 'x' and 'y' overload\nT y = T(789.012);\n\nconst std::string two_var = \"abs(x - (y / pi)) * 5\";\n\nif (!exprtk::compute(two_var, x, y, result))\n   printf(\"Failed to compute: %s\",two_var.c_str());\nelse\n   printf(\"Result: %15.5f\\n\",result);\n\n// Three variables 'x', 'y' and 'z' overload\nT z = T(345.678);\n\nconst std::string three_var = \"abs(x - (y / pi)) * z\";\n\nif (!exprtk::compute(three_var, x, y, z, result))\n   printf(\"Failed to compute: %s\",three_var.c_str());\nelse\n   printf(\"Result: %15.5f\\n\",result);\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Binary Formats (BSON, CBOR, MessagePack, UBJSON) in C++\nDESCRIPTION: This snippet demonstrates how to serialize JSON data to various binary formats including BSON, CBOR, MessagePack, and UBJSON for efficient data transfer. It also shows how to deserialize binary data back to JSON.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\n// create a JSON value\njson j = R\"({\"compact\": true, \"schema\": 0})\"_json;\n\n// serialize to BSON\nstd::vector<std::uint8_t> v_bson = json::to_bson(j);\n\n// 0x1B, 0x00, 0x00, 0x00, 0x08, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x00, 0x01, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n\n// roundtrip\njson j_from_bson = json::from_bson(v_bson);\n\n// serialize to CBOR\nstd::vector<std::uint8_t> v_cbor = json::to_cbor(j);\n\n// 0xA2, 0x67, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xF5, 0x66, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00\n\n// roundtrip\njson j_from_cbor = json::from_cbor(v_cbor);\n\n// serialize to MessagePack\nstd::vector<std::uint8_t> v_msgpack = json::to_msgpack(j);\n\n// 0x82, 0xA7, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xC3, 0xA6, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00\n\n// roundtrip\njson j_from_msgpack = json::from_msgpack(v_msgpack);\n\n// serialize to UBJSON\nstd::vector<std::uint8_t> v_ubjson = json::to_ubjson(j);\n\n// 0x7B, 0x69, 0x07, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x54, 0x69, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x69, 0x00, 0x7D\n\n// roundtrip\njson j_from_ubjson = json::from_ubjson(v_ubjson);\n```\n\n----------------------------------------\n\nTITLE: VTK Installation Directory Structure\nDESCRIPTION: Shows the expected directory structure after successful VTK installation, including binary, include, library and share folders.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/build_windows_vs.md#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nc:\\program file\\VTK\\bin\nc:\\program file\\VTK\\include\nc:\\program file\\VTK\\lib\nc:\\program file\\VTK\\share\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters Geometry Module Classes and Configuration in CMake\nDESCRIPTION: This CMake script defines the list of classes to be included in the VTK::FiltersGeometry module, adds the module to the VTK build system, and configures test mangling. The classes primarily focus on various geometry filter implementations for different data structures like structured grids, unstructured grids, and image data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAbstractGridConnectivity\n  vtkAttributeSmoothingFilter\n  vtkCompositeDataGeometryFilter\n  vtkDataSetRegionSurfaceFilter\n  vtkDataSetSurfaceFilter\n  vtkExplicitStructuredGridSurfaceFilter\n  vtkGeometryFilter\n  vtkHierarchicalDataSetGeometryFilter\n  vtkImageDataGeometryFilter\n  vtkImageDataToUniformGrid\n  vtkLinearToQuadraticCellsFilter\n  vtkMarkBoundaryFilter\n  vtkProjectSphereFilter\n  vtkRecoverGeometryWireframe\n  vtkRectilinearGridGeometryFilter\n  vtkRectilinearGridPartitioner\n  vtkStructuredAMRGridConnectivity\n  vtkStructuredAMRNeighbor\n  vtkStructuredGridConnectivity\n  vtkStructuredGridGeometryFilter\n  vtkStructuredGridPartitioner\n  vtkStructuredNeighbor\n  vtkStructuredPointsGeometryFilter\n  vtkUnstructuredGridGeometryFilter)\n\nvtk_module_add_module(VTK::FiltersGeometry\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersGeometry)\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with pip on Linux/macOS\nDESCRIPTION: Installs the required Python packages for building VTK documentation on Linux or macOS using pip. The dependencies are specified in the requirements.txt file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Option Parser in C++\nDESCRIPTION: Example of adding a custom option parser that counts the number of times an option was given.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_40\n\nLANGUAGE: cpp\nCODE:\n```\napp.add_option(\"--fancy-count\", [](std::vector<std::string> val){\n    std::cout << \"This option was given \" << val.size() << \" times.\" << std::endl;\n    return true;\n    });\n```\n\n----------------------------------------\n\nTITLE: CMake Test Configuration\nDESCRIPTION: Example of adding a test in CMakeLists.txt using ExternalData_add_test to reference test data files\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nExternalData_add_test(\"${_vtk_build_TEST_DATA_TARGET}\"\n  NAME ${_vtk_build_test}Cxx-MyTest\n  COMMAND <VTK_MODULE_NAME>CxxTests MyTest\n          ... -V DATA{../Data/Baseline/MyTest.png,:} ...\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting WebGPU Memory Log Verbosity in VTK\nDESCRIPTION: There are two methods to view detailed GPU memory usage information for textures and buffers in the WebGPU rendering backend. You can either set an environment variable or use the WebGPU configuration API.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-memory-auditing-for-webgpu-backend.md#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nVTK_WEBGPU_MEMORY_LOG_VERBOSITY\n```\n\nLANGUAGE: plain\nCODE:\n```\nvtkWebGPUConfiguration::SetGPUMemoryLogVerbosity\n```\n\n----------------------------------------\n\nTITLE: Iterating Through XML Nodes in C++ with pugixml\nDESCRIPTION: This code snippet demonstrates how to use pugixml to open an XML file, iterate through specific nodes ('Tool' nodes under 'Profile' and 'Tools'), and print the filename and timeout attribute of tools that have a timeout value greater than 0. The code uses the DOM-like interface of pugixml to traverse the XML tree.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/vtkpugixml/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"pugixml.hpp\"\n#include <iostream>\n\nint main()\n{\n    pugi::xml_document doc;\n    pugi::xml_parse_result result = doc.load_file(\"xgconsole.xml\");\n    if (!result)\n        return -1;\n        \n    for (pugi::xml_node tool: doc.child(\"Profile\").child(\"Tools\").children(\"Tool\"))\n    {\n        int timeout = tool.attribute(\"Timeout\").as_int();\n        \n        if (timeout > 0)\n            std::cout << \"Tool \" << tool.attribute(\"Filename\").value() << \" has timeout \" << timeout << \"\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing macOS XCode Command Line Tools\nDESCRIPTION: Command to install XCode command line developer tools on macOS\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Building VTK-m and Creating VTK Module Interface\nDESCRIPTION: Adds the VTK-m subdirectory to the build, sets up job pools, and creates a VTK module interface for VTK-m functionality. This enables VTK code to access VTK-m features through a consistent interface.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(vtk-m)\nvtkm_setup_job_pool()\n\nvtk_module_add_module(VTK::vtkvtkm\n  HEADER_ONLY)\n# vtkm_cont_testing does not refer to unit tests but to the vtkm testing library.\nvtk_module_link(VTK::vtkvtkm INTERFACE vtkm_cont vtkm_cont_testing vtkm_filter)\n```\n\n----------------------------------------\n\nTITLE: Adding a Render Buffer to Compute Pipeline in VTK WebGPU\nDESCRIPTION: This code snippet illustrates how a render buffer is added to a compute pipeline using `AddRenderBuffer()`. Contrary to `AddBuffer()`, no actual buffer creation or data upload occurs at this stage because the data attributes buffer of the mapper is not yet available. The actual buffer setup happens during the render call.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nvtkNew<vtkWebGPUComputePipeline> myPipeline;\n// 2)\nmyPipeline->AddRenderBuffer(pointColorsRenderBuffer);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK-m Parallel Backends Based on VTK Settings\nDESCRIPTION: Retrieves VTK's SMP backends and enables corresponding VTK-m backends (OpenMP, TBB, CUDA, Kokkos) based on VTK configuration. This ensures consistency between VTK and VTK-m parallel processing capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(vtk_smp_backends GLOBAL\n  PROPERTY _vtk_smp_backends)\n\nif (\"OpenMP\" IN_LIST vtk_smp_backends)\n  set(VTKm_ENABLE_OPENMP ON)\nendif ()\n\nif (\"TBB\" IN_LIST vtk_smp_backends)\n  set(VTKm_ENABLE_TBB ON)\nendif ()\n\nset(VTKm_ENABLE_CUDA \"${VTK_USE_CUDA}\")\nset(VTKm_ENABLE_KOKKOS \"${VTK_USE_KOKKOS}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Common VTK Implementation Modules\nDESCRIPTION: Code showing how to import important implementation modules that provide functionality for VTK factory classes. These modules are often needed for rendering and interaction.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport vtkmodules.vtkInteractionStyle\nimport vtkmodules.vtkRenderingFreeType\n```\n\n----------------------------------------\n\nTITLE: Setting a Cell as Ghost Cell in VTK (Before and After Implementation Change)\nDESCRIPTION: Demonstrates how to mark a cell as a ghost cell before and after the implementation change. The new method uses bitwise operations to preserve other existing flag bits that might be set for the cell.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/changes_6.3/ghosts_and_blanking.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// Old way to specify that a cell is a ghost cell\ngrid->GetCellData()->GetArray(\"vtkGhostLevels\")->SetValue(cellId, ghostLevel)\n\n// New way to specify that a cell is a ghost cell\nvtkUnsignedCharArray* ghosts = grid->GetCellGhostArray();\nghosts->SetValue(cellId, ghosts->GetValue(cellId) | vtkDataSetAttributes::DUPLICATECELL);\n```\n\n----------------------------------------\n\nTITLE: VTK Binary File Byte Order Methods\nDESCRIPTION: Methods used to specify the byte order when reading or writing binary VTK files on different systems. Used when working with file formats that don't explicitly define byte ordering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_1\n\nLANGUAGE: vtk\nCODE:\n```\nSetDataByteOrderToBigEndian()\nSetDataByteOrderToLittleEndian()\n```\n\n----------------------------------------\n\nTITLE: Manual Marshal Handler Registration Template\nDESCRIPTION: Template for implementing a manual marshal registration handler for custom VTK classes\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_serialization.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nint RegisterHandlers_vtkClassNameSerDesHelper(void* ser, void* deser, void* invoker)\n{\n  // See RegisterHandlers_vtkObjectSerDes for what must go here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using vtkIndexedArray in C++\nDESCRIPTION: Demonstrates how to create a vtkIndexedArray from a base array and an index list. The example shows initialization of a base array, creation of an index list, and setup of the indexed array.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvtkNew<vtkIntArray> baseArr;\nbaseArr->SetNumberOfComponents(3);\nbaseArr->SetNumberOfComponents(100);\nauto range = vtk::DataArrayValueRange<3>(baseArr);\nstd::iota(range.begin(), range.end(), 0);\n\nvtkNew<vtkIdList> indexes;\nindexes->SetNumberOfIds(30);\nfor (idx = 0; idx < 30; idx++)\n{\n    indexes->SetId(ids, 10*idx);\n}\n\nvtkNew<vtkIndexedArray<int>> indexed;\nindexed->SetBackend(std::make_shared<vtkIndexedImplicitBackend<int>>(indexes, baseArr));\nindexed->SetNumberOfComponents(1);\nindexed->SetNumberOfComponents(indexes->GetNumberOfIds());\nCHECK(indexed->GetValue(13) == 130); // always true\n```\n\n----------------------------------------\n\nTITLE: STL Container to JSON Conversion in C++\nDESCRIPTION: Shows conversion from various STL containers (vectors, deques, lists, sets, maps) to JSON arrays and objects. Demonstrates both sequence and associative container conversions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<int> c_vector {1, 2, 3, 4};\njson j_vec(c_vector);\n\nstd::deque<double> c_deque {1.2, 2.3, 3.4, 5.6};\njson j_deque(c_deque);\n\nstd::list<bool> c_list {true, true, false, true};\njson j_list(c_list);\n\nstd::forward_list<int64_t> c_flist {12345678909876, 23456789098765, 34567890987654, 45678909876543};\njson j_flist(c_flist);\n\nstd::array<unsigned long, 4> c_array {{1, 2, 3, 4}};\njson j_array(c_array);\n\nstd::set<std::string> c_set {\"one\", \"two\", \"three\", \"four\", \"one\"};\njson j_set(c_set);\n\nstd::unordered_set<std::string> c_uset {\"one\", \"two\", \"three\", \"four\", \"one\"};\njson j_uset(c_uset);\n\nstd::multiset<std::string> c_mset {\"one\", \"two\", \"one\", \"four\"};\njson j_mset(c_mset);\n\nstd::unordered_multiset<std::string> c_umset {\"one\", \"two\", \"one\", \"four\"};\njson j_umset(c_umset);\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ and Python Test Directories with Test Data in VTK CMake\nDESCRIPTION: This CMake snippet conditionally includes C++ test directories if not disabled and Python test directories if Python wrapping is enabled. For Python tests, it also registers required test data files including head sequence images and track data files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/headsq/,REGEX:.*\n    Data/track1.binary.vtk\n    Data/track2.binary.vtk\n    Data/track3.binary.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method Signatures - Legacy VTK API\nDESCRIPTION: List of removed legacy API method signatures, including point/cell access methods, dispatcher replacements, and output window configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.2.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvtkPlot::GetNearestPoint(const vtkVector2f&, const vtkVector2f&, vtkVector2f*)\nvtkConvexPointSet::GetEdgePoints(int, int*&)\nvtkPolyData::GetPointCells(vtkIdType, unsigned short&, vtkIdType*&)\nvtkAlgorithm::SetProgress()\nvtkIdFilter::SetIdsArrayName()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK FiltersCellGrid Classes\nDESCRIPTION: Defines the core classes for the VTK FiltersCellGrid module including registrar, algorithms, queries, responders, calculator bases, and cell types.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  # Registrar\n  vtkFiltersCellGrid\n\n  # Algorithms\n  vtkCellGridCellCenters\n  vtkCellGridCellSource\n  vtkCellGridComputeSides\n  vtkCellGridElevation\n  vtkCellGridPointProbe\n  vtkCellGridTransform\n  vtkUnstructuredGridToCellGrid\n  vtkCellGridToUnstructuredGrid\n  vtkCellGridWarp\n\n  # Queries\n  vtkCellGridElevationQuery\n\n  # Responders\n  vtkDGBoundsResponder\n  vtkDGCellCenterResponder\n  vtkDGCellSourceResponder\n  vtkDGCopyResponder\n  vtkDGElevationResponder\n  vtkDGEvaluator\n  vtkDGRangeResponder\n  vtkDGSidesResponder\n  vtkDGTranscribeCellGridCells\n  vtkDGTranscribeUnstructuredCells\n  vtkDGTransformResponder\n  vtkDGWarp\n\n  # Calculator bases\n  vtkInterpolateCalculator\n  vtkCellAttributeInformation\n\n  # Calculator implementations\n  vtkDGInterpolateCalculator\n  vtkDGAttributeInformation\n\n  # Cell types\n  vtkDGCell\n  vtkDGEdge\n  vtkDGHex\n  vtkDGPyr\n  vtkDGQuad\n  vtkDGTet\n  vtkDGTri\n  vtkDGVert\n  vtkDGWdg\n  vtkDeRhamCell\n\n  # Numerics and low-level classes\n  vtkDGConstantOperators\n  vtkDGHGradOperators\n  vtkDGHCurlOperators\n  vtkDGHDivOperators\n  vtkDGOperatorEntry\n  vtkDGOperation\n  vtkDGArraysInputAccessor\n  vtkDGArrayOutputAccessor\n  vtkUnstructuredGridFieldAnnotations\n)\n```\n\n----------------------------------------\n\nTITLE: Setting TBB Backend in VTK SMP Framework\nDESCRIPTION: Example showing how to programmatically set the TBB backend for VTK's SMP framework using vtkSMPTools::SetBackend()\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkSMPTools::SetBackend(\"TBB\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Preconditions in VTK Python\nDESCRIPTION: Shows how the Python wrappers perform bounds checking and precondition verification before calling C++ methods. When preconditions fail, a ValueError is raised with an informative message.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = vtkFloatArray()\n>>> a.GetValue(10)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: expects 0 <= id && id < GetNumberOfValues()\n```\n\n----------------------------------------\n\nTITLE: Integrating Expat with CMake Find_Package Config Mode\nDESCRIPTION: Example showing how to use CMake's config mode to include Expat library. Uses lowercase expat and supports feature selection through optional components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nproject(hello VERSION 1.0.0)\n\nfind_package(expat 2.2.8 CONFIG REQUIRED char dtd ns)\n\nadd_executable(hello\n    hello.c\n)\n\ntarget_link_libraries(hello PUBLIC expat::expat)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK::IOGeometry Module in CMake\nDESCRIPTION: This CMake script configures the VTK::IOGeometry module by defining public classes (readers and writers for various geometry formats), private implementation classes, and additional headers. It then registers the module using vtk_module_add_module and adds test mangling configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAVSucdReader\n  vtkBYUReader\n  vtkBYUWriter\n  #vtkCGMWriter # Needs vtkViewport.\n  vtkChacoReader\n  vtkFacetWriter\n  vtkFLUENTReader\n  vtkGAMBITReader\n  vtkGLTFDocumentLoader\n  vtkGLTFReader\n  vtkGLTFTexture\n  vtkGLTFWriter\n  vtkHoudiniPolyDataWriter\n  vtkIVWriter\n  vtkMCubesReader\n  vtkMCubesWriter\n  vtkMFIXReader\n  vtkOBJReader\n  vtkOBJWriter\n  vtkOFFReader\n  vtkOpenFOAMReader\n  vtkParticleReader\n  vtkProStarReader\n  vtkPTSReader\n  vtkSTLReader\n  vtkSTLWriter\n  vtkTecplotReader\n  vtkWindBladeReader)\n\nset(private_classes\n  vtkGLTFDocumentLoaderInternals\n  vtkGLTFWriterUtils\n  vtkGLTFUtils)\n\nset(headers\n  GLTFSampler.h)\n\nvtk_module_add_module(VTK::IOGeometry\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  HEADERS ${headers}\n  )\nvtk_add_test_mangling(VTK::IOGeometry)\n```\n\n----------------------------------------\n\nTITLE: JSON Pointer and Patch Operations in C++\nDESCRIPTION: Implements JSON Pointer (RFC 6901) and JSON Patch (RFC 6902) operations for accessing and modifying JSON values. Shows how to apply patches and calculate differences between JSON values.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\njson j_original = R\"({\n  \"baz\": [\"one\", \"two\", \"three\"],\n  \"foo\": \"bar\"\n})\"_json;\n\nj_original[\"/baz/1\"_json_pointer];\n\njson j_patch = R\"([\n  { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n  { \"op\": \"add\", \"path\": \"/hello\", \"value\": [\"world\"] },\n  { \"op\": \"remove\", \"path\": \"/foo\"}\n])\"_json;\n\njson j_result = j_original.patch(j_patch);\n\njson::diff(j_result, j_original);\n```\n\n----------------------------------------\n\nTITLE: Defining Array Information Structure in VTK XML\nDESCRIPTION: Demonstrates the structure for embedding array information in DataArray XML elements using InformationKey elements. Each InformationKey specifies attributes for name, location, and optionally length for vector keys.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<DataArray [...]>\n  <InformationKey name=\"KeyName\" location=\"KeyLocation\" [ length=\"N\" ]>\n    [...]\n  </InformationKey>\n  <InformationKey [...]>\n    [...]\n  </InformationKey>\n  [...]\n</DataArray>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK PDF Export Tests with CMake\nDESCRIPTION: Sets up test cases for PDF export functionality in VTK. Includes test definitions for PDF context export, shading, polydata export, and transformed text. The tests are only configured if Ghostscript is available on the system. Uses VTK's testing framework to set up CXX tests with specific requirements for floating point handling and rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportPDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../../../../CMake/vtkGhostscript.cmake)\n\nif(VTK_GHOSTSCRIPT_EXECUTABLE)\n  set(PDFTests\n    TestPDFContextExport.cxx,NO_DATA\n    TestPDFContextShading.cxx,NO_DATA\n    TestPDFExporterContextPolyData.cxx\n    TestPDFTransformedText.cxx,NO_DATA\n  )\n\n  vtk_add_test_cxx(vtkIOExportPDFCxxTests tests\n    ${PDFTests}\n    )\n  vtk_test_cxx_executable(vtkIOExportPDFCxxTests tests\n    DISABLE_FLOATING_POINT_EXCEPTIONS\n    RENDERING_FACTORY\n    )\n\n  include(../../../../CMake/vtkTestingPDF.cmake)\n  vtk_add_pdf_test_cxx(${PDFTests})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project\nDESCRIPTION: This snippet initializes the CMake project, defines the minimum required CMake version, sets the project name (MYNAME), and specifies the project version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickChartsOn3DScene/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(MYNAME QtQuickChartsOn3DScene)\n\nproject(${MYNAME} VERSION 1.0)\n```\n\n----------------------------------------\n\nTITLE: Fixing Particle Reading Handling for Missing Header - C++\nDESCRIPTION: This code modifies the vtkAMReXParticlesReader class to ensure it can read particle data files even when a top-level header is absent. When the header is missing, the time step is initialized to 0, allowing the reader to proceed without the usual data from the header. This is essential for improving usability in scenarios where header files may not be consistently available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/fix-amrex-particle-reader-without-top-level-header.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkAMReXParticlesReader::vtkAMReXParticlesReader() {\n    // Sets the default time step to 0 if the header is missing\n    this->TimeStep = 0;\n    this->ReadParticlesWithoutHeader = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Double Array Dispatch By Array Type in C++\nDESCRIPTION: This code snippet demonstrates how to execute a double array dispatch using `vtkArrayDispatch::Dispatch2ByArray` when the exact array types are restricted.  It requires defining type lists for both input arrays, specifying the possible array implementations.  This is particularly useful when the input arrays have known implementations, like `vtkFloatArray` or `vtkDoubleArray`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\n// input has an unknown implementation, but an integral ValueType.\nvtkDataArray *input = ...;\n\n// Output is always either vtkFloatArray or vtkDoubleArray:\nvtkDataArray *output = someCondition ? vtkFloatArray::New()\n                                     : vtkDoubleArray::New();\n\n// Define the valid ArrayTypes for input by filtering\n// vtkArrayDispatch::Arrays to remove non-integral types:\ntypedef typename vtkArrayDispatch::FilterArraysByValueType\n  <\n  vtkArrayDispatch::Arrays,\n  vtkArrayDispatch::Integrals\n  >::Result InputTypes;\n\n// For output, create a new vtkTypeList with the only two possibilities:\ntypedef vtkTypeList::Create<vtkFloatArray, vtkDoubleArray> OutputTypes;\n\n// Typedef the dispatch to a more manageable name:\ntypedef vtkArrayDispatch::Dispatch2ByArray\n  <\n  InputTypes,\n  OutputTypes\n  > MyDispatch;\n\n// Execute the dispatch:\nMyDispatch::Execute(input, output, someWorker);\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for VTK Tests with CMake\nDESCRIPTION: This snippet links the necessary Qt libraries (`Qt${vtk_qt_major_version}::Quick` and `Qt${vtk_qt_major_version}::Qml`) to the test executable `vtkGUISupportQtQuickCxxTests`. The `PRIVATE` keyword indicates that these libraries are only needed for linking the executable itself and not for any dependent libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(vtkGUISupportQtQuickCxxTests\n  PRIVATE\n    \"Qt${vtk_qt_major_version}::Quick\"\n    \"Qt${vtk_qt_major_version}::Qml\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Git Fetch and Rebase\nDESCRIPTION: Commands to fetch latest upstream changes and rebase current branch on master in case of merge conflicts\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch origin\n$ git rebase origin/master\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOFides Module Classes and Dependencies\nDESCRIPTION: Defines and configures the VTK IOFides module with reader and writer classes, links required dependencies, and adds test mangling. Also includes conditional MPI support configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Fides/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkFidesReader\n  vtkFidesWriter)\n\nvtk_module_add_module(VTK::IOFides\n  CLASSES           ${classes})\n\nvtk_module_link(VTK::IOFides PRIVATE VTK::fides)\nvtk_add_test_mangling(VTK::IOFides)\n\nif (VTK_USE_MPI)\n    vtk_module_definitions(VTK::IOFides PRIVATE IOFIDES_HAVE_MPI)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining DataArray Element for Value Storage\nDESCRIPTION: This snippet defines the DataArray element, describing how to store sequences of values with attributes like type, name, number of components, and format.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n    <DataArray type=\"Float32\" Name=\"vectors\" NumberOfComponents=\"3\"\n               format=\"appended\" offset=\"0\"/>\n    <DataArray type=\"Float32\" Name=\"scalars\" format=\"binary\">\n               bAAAAAAAAAAAAIA/AAAAQAAAQEAAAIBA... </DataArray>\n    <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n               10 20 30 ... </DataArray>\n```\n\n----------------------------------------\n\nTITLE: Setting Round Points in vtkProperty for VTK\nDESCRIPTION: This code demonstrates how to use the new SetPoint2DShape() method to configure points to be rendered as round rather than the default square shape. Note that this setting is ignored when RenderPointsAsSpheres is enabled, and is only implemented in the WebGPU rendering module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-point-2d-shape-setting-for-vtkProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvtkProperty::SetPoint2DShape(vtkProperty::Point2DShapeType::Round)\n```\n\n----------------------------------------\n\nTITLE: Registering Free Functions and Lambdas in ExprTk Symbol Table\nDESCRIPTION: Shows how to register free functions and lambda expressions with an ExprTk symbol table. This includes examples of registering a one-parameter function, a two-parameter template function, and a three-parameter lambda.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_62\n\nLANGUAGE: C++\nCODE:\n```\ndouble compute1(double v0)\n{\n   return 2.0 * std::abs(v0);\n}\n\ntemplate <typename T>\nT compute2(T v0, T v1)\n{\n   return 2.0 * v0 + v1 / 3.0;\n}\n.\n.\n.\n\ntypedef exprtk::symbol_table<double> symbol_table_t;\n\nsymbol_table_t symbol_table;\n\nsymbol_table.add_function(\"compute1\", compute1);\nsymbol_table.add_function(\"compute2\", compute2<double>);\n\nsymbol_table.add_function(\n   \"compute3\",\n   [](double v0, double v1, double v2) -> double\n   { return v0 / v1 + v2; });\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK Rendering Module in CMake\nDESCRIPTION: This snippet sets up a list of classes related to the VTK rendering process, which can be included in a VTK module configuration. The classes are grouped under a variable for modular use in CMake. It's essential for organizing the rendering capabilities in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VtkJS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\\n  vtkVtkJSSceneGraphSerializer\\n  vtkVtkJSViewNodeFactory\\n)\n```\n\n----------------------------------------\n\nTITLE: Finding and Handling VTK Dependencies\nDESCRIPTION: This snippet uses find_package to locate VTK, specifying required components such as FiltersSources, InteractionStyle, RenderingOpenGL2, RenderingWebGPU, and RenderingUI. If VTK is not found, the example build is skipped.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    FiltersSources      # VTK pipeline\n    InteractionStyle    # Mouse handling\n    RenderingOpenGL2    # For Rendering with OpenGL\n    RenderingWebGPU     # For Rendering with WebGPU\n    RenderingUI         # For SDL2 Window\n)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Implementing VTK EnSight Gold Reader Classes\nDESCRIPTION: Implementation of two new classes (vtkEnSightGoldCombinedReader and vtkEnSightSOSGoldReader) for handling EnSight gold casefiles and SOS files. The reader features simplified class hierarchy, improved file operations through EnSightFile class, selective part loading, static geometry caching, and outputs vtkPartitionedDataSetCollection.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/ensight-gold-rewrite.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass vtkEnSightGoldCombinedReader;\nclass vtkEnSightSOSGoldReader;\n```\n\n----------------------------------------\n\nTITLE: Connecting VTK pipeline with SetInputConnection in Python\nDESCRIPTION: This snippet demonstrates the traditional method of connecting VTK pipeline objects using `SetInputConnection`. It shows how to link a `vtkSphereSource` to a `vtkShrinkFilter` using the output port of the source as input for the filter.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/new-python-api-for-pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ns = vtkSphereSource()\nsr = vtkShrinkFilter()\nsr.SetInputConnection(s.GetOutputPort())\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Using CMake\nDESCRIPTION: This snippet configures the CMake build system to add a series of Python test scripts for the VTK project. Each test file is specified alongside optional flags that indicate data handling parameters such as NO_DATA and NO_VALID. The inclusion of these tests ensures that various VTK modules are properly validated during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestCellArray.py,NO_DATA,NO_VALID,NO_RT\n  TestEmptyXML.py,NO_DATA,NO_VALID,NO_RT\n  TestReadXMLUnstructuredGridWithTime.py,NO_VALID,NO_RT\n  TestWriteRandomHyperTreeGridAppendBinaryMode1.py,NO_DATA,NO_VALID,NO_RT\n  TestWriteReadRandomHyperTreeGridAppendBinaryMode1.py,NO_DATA,NO_VALID,NO_RT\n  TestXMLMultiBlock.py,NO_DATA,NO_VALID,NO_RT\n  TestXMLTimeInField.py,NO_DATA,NO_VALID,NO_RT\n  # TestXMLHyperTreeGrid.py # test code does not run (fix me!)\n  TestXMLImageDataIO.py\n  TestXMLPolyDataIO.py\n  TestXMLRectilinearGridIO.py\n  TestXMLStructuredGridIO.py\n  TestXMLTableIO.py,NO_VALID\n  TestXMLUnstructuredGridIO.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Web Python Files\nDESCRIPTION: Defines a list of Python files that comprise the VTK web module functionality. These files are located in the vtkmodules/web directory and provide various web-related features like camera handling, dataset building, and rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(files\n  vtkmodules/web/__init__.py\n  vtkmodules/web/camera.py\n  vtkmodules/web/dataset_builder.py\n  vtkmodules/web/errors.py\n  vtkmodules/web/protocols.py\n  vtkmodules/web/query_data_model.py\n  vtkmodules/web/render_window_serializer.py\n  vtkmodules/web/testing.py\n  vtkmodules/web/vtkjs_helper.py\n  vtkmodules/web/venv.py\n  vtkmodules/web/wslink.py\n  vtkmodules/web/utils.py)\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitLab - Shell Command\nDESCRIPTION: Command to push local commit changes to a user's fork on GitLab using a custom git alias.\nSOURCE: https://github.com/kitware/vtk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git gitlab-push\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Access Runtime Checks in ExprTk C++\nDESCRIPTION: Shows how to implement vector access runtime checks to catch and handle potential memory access violations during expression evaluation. The example demonstrates creating a custom handler class and registering it with the parser.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_99\n\nLANGUAGE: C++\nCODE:\n```\nstruct my_vector_access_rtc final :\n   public exprtk::vector_access_runtime_check\n{\n   bool handle_runtime_violation(violation_context& context)\n   override\n   {\n      // Handling of the violation\n      return ...;\n   }\n};\n\n\nmy_vector_access_rtc vartc;\n\nexprtk::symbol_table<T> symbol_table;\n\nT i;\nT x;\nT y;\nstd::vector<T> vec = { 0, 1, 2, 3, 4 };\n\nsymbol_table.add_variable(\"i\"  , i  );\nsymbol_table.add_variable(\"x\"  , x  );\nsymbol_table.add_variable(\"y\"  , y  );\nsymbol_table.add_vector  (\"vec\", vec);\n\nexprtk::expression<T> expression;\nexprtk::parser<T> parser;\n\nparser.register_vector_access_runtime_check(vartc);\n\nstd::string expression = \"vec[i + vec[]] := x + y\";\n\nparser.compile(expression_str, expression);\n\ntry\n{\n   expression.value();\n}\ncatch (std::runtime_error& rte)\n{\n   printf(\"Exception: %s\\n\", rte.what());\n}\n```\n\n----------------------------------------\n\nTITLE: VTK Component Selection Example\nDESCRIPTION: Example CMake configuration showing suggested VTK components for a cylinder example application. Demonstrates module selection based on VTKModulesForCxx script output.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_cpp.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n COMPONENTS\n    CommonColor\n    CommonCore\n    FiltersSources\n    RenderingCore\n    #\n    # These modules are suggested since they implement an existing module.\n    # You may need to uncomment one or more of these.\n    # If vtkRenderWindow is used and you want to use OpenGL,\n    #   you also need the RenderingOpenGL2 module.\n    # If vtkRenderWindowInteractor is used,\n    #    uncomment RenderingUI and possibly InteractionStyle.\n    # If text rendering is used, uncomment RenderingFreeType\n    #\n    # InteractionStyle  # implements VTK::RenderingCore\n    # RenderingCellGrid # implements VTK::RenderingCore\n    # RenderingFreeType # implements VTK::RenderingCore\n    # RenderingOpenGL2  # implements VTK::RenderingCore\n    # RenderingUI       # implements VTK::RenderingCore\n)\n```\n\n----------------------------------------\n\nTITLE: Using VTK Enum Class Macros\nDESCRIPTION: New support for enum class setters and getters via vtkGetEnumMacro and vtkSetEnumMacro\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.0.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvtk{Get,Set}EnumMacro\n```\n\n----------------------------------------\n\nTITLE: Detailed Error Enumeration in ExprTk Expression Compilation in C++\nDESCRIPTION: Example demonstrating how to enumerate and display all errors encountered during ExprTk expression compilation, including error position, type, and diagnostic message.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_86\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::parser<T>          parser_t;\ntypedef exprtk::parser_error::type error_t;\n\nif (!parser.compile(expression_string,expression))\n{\n   for (std::size_t i = 0; i < parser.error_count(); ++i)\n   {\n      typedef exprtk::parser_error::type error_t;\n\n      error_t error = parser.get_error(i);\n\n      printf(\"Error[%02d] Position: %02d Type: [%14s] Msg: %s\\n\",\n             i,\n             error.token.position,\n             exprtk::parser_error::to_str(error.mode).c_str(),\n             error.diagnostic.c_str());\n   }\n\n   return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using VTK Type Lists for Array Dispatch\nDESCRIPTION: Demonstrates how to create a type list containing vtkFloatArray and vtkIntArray types, then use it with vtkArrayDispatch for specialized array handling. This pattern helps reduce template instantiations by constraining array types.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Create a typelist of 2 types, vtkFloatArray and vtkIntArray:\ntypedef vtkTypeList::Create<vtkFloatArray, vtkIntArray> MyArrays;\n\nWorker someWorker = ...;\nvtkDataArray *someArray = ...;\n\n// Use vtkArrayDispatch to generate code paths for these arrays:\nvtkArrayDispatch::DispatchByArray<MyArrays>(someArray, someWorker);\n```\n\n----------------------------------------\n\nTITLE: VTK XML ImageData Structure Example\nDESCRIPTION: Example of VTK XML format for ImageData datasets. This format specifies the dataset's extent, origin, and spacing, with data organized into point and cell attributes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"ImageData\" ...>\n  <ImageData WholeExtent=\"x1 x2 y1 y2 z1 z2\"\n   Origin=\"x0 y0 z0\" Spacing=\"dx dy dz\">\n   <Piece Extent=\"x1 x2 y1 y2 z1 z2\">\n      <PointData>...</PointData>\n      <CellData>...</CellData>\n   </Piece>\n   </ImageData>\n</VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Array Parameter Passing in VTK\nDESCRIPTION: Examples of passing arrays and vectors between Python and VTK methods, including mutable array operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = vtkActor()\n>>> p = (100.0, 200.0, 100.0)\n>>> a.SetPosition(p)\n\n>>> z = [0.0, 0.0, 0.0]\n>>> vtkMath.Cross((1,0,0),(0,1,0),z)\n>>> print(z)\n[0.0, 0.0, 1.0]\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake and Project Definition\nDESCRIPTION: This snippet initializes the CMake environment, specifying the minimum required version and defining the project name as ConeMultiBackend.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(ConeMultiBackend)\n```\n\n----------------------------------------\n\nTITLE: Compiling VTK with Ninja\nDESCRIPTION: Command to compile VTK using the Ninja build system after configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/VTK/build\n$ ninja\n```\n\n----------------------------------------\n\nTITLE: Configuring LibXml2 Package for CMake\nDESCRIPTION: Sets up package configuration files for LibXml2 using CMake's configure_package_config_file and write_basic_package_version_file commands. This allows other projects to easily find and use LibXml2 as a dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_package_config_file(\n    libxml2-config.cmake.cmake.in libxml2-config.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libxml2-${PROJECT_VERSION}\n)\n\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/libxml2-config.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libxml2-${PROJECT_VERSION}\n    COMPONENT development\n)\n\nwrite_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/libxml2-config-version.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY ExactVersion\n)\n\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/libxml2-config-version.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libxml2-${PROJECT_VERSION}\n    COMPONENT development\n)\n\ninstall(\n    EXPORT LibXml2\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libxml2-${PROJECT_VERSION}\n    NAMESPACE LibXml2::\n    FILE libxml2-export.cmake\n    COMPONENT development\n)\n```\n\n----------------------------------------\n\nTITLE: Instantiating VTK Objects in Python\nDESCRIPTION: Example of instantiating VTK objects that are derived from vtkObjectBase. In Python, these classes can be instantiated by calling the constructor directly, which is different from C++ where New() is used.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\no = vtkObject()\n```\n\n----------------------------------------\n\nTITLE: Including WebAssembly Testing Documentation (Markdown)\nDESCRIPTION: A Markdown include directive that references a README file containing WebAssembly testing documentation located in the Testing/WebAssembly directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/WebAssemblyTestSuiteArchitecture.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../../../Testing/WebAssembly/README.md\n```\n\n----------------------------------------\n\nTITLE: Adding WebGPU C++ Tests with VTK and CMake\nDESCRIPTION: This snippet demonstrates how a series of C++ tests are added to the VTK build system using the `vtk_add_test_cxx` function. The tests target WebGPU rendering capabilities and are configured with various parameters, such as size, line width, translucency, and verify options. Each test is associated with a `.cxx` file, with options to indicate whether the data or validation is needed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingWebGPUCxxTests tests\n  TestActorFaceCullingProperty.cxx,NO_DATA\n  TestAxesActor.cxx,NO_DATA\n  TestCellScalarMappedColors.cxx,NO_DATA\n  ...\n  TestVertexRendering.cxx,NO_DATA\n  TestWireframe.cxx,NO_DATA)\n\nvtk_add_test_cxx(vtkRenderingWebGPUCxxTests tests\n  --verify\n  TestComputeTriangulationVerifyPointIds,TestComputeTriangulation.cxx,NO_DATA,NO_VALID)\n\nvtk_add_test_cxx(vtkRenderingWebGPUCxxTests tests\n  --translucent\n  TestLineRenderingTranslucent,TestLineRendering.cxx,NO_DATA)\n\n...\n\nvtk_test_cxx_executable(vtkRenderingWebGPUCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Initializing vtkFrustum Implicit Function in C++\nDESCRIPTION: The vtkFrustum class is a new implicit function in VTK that represents a frustum. It can be customized using setters for vertical/horizontal angles and near plane distance. The function's position, orientation, and scale can be adjusted using a transform.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/frustum-implicit-widget.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkFrustum* frustum = vtkFrustum::New();\nfrustum->SetVerticalAngle(30.0);\nfrustum->SetHorizontalAngle(45.0);\nfrustum->SetNearPlaneDistance(1.0);\n\nvtkTransform* transform = vtkTransform::New();\ntransform->Translate(1.0, 2.0, 3.0);\ntransform->RotateWXYZ(45.0, 0.0, 1.0, 0.0);\nfrustum->SetTransform(transform);\n```\n\n----------------------------------------\n\nTITLE: VTK External Module Wrapping Documentation\nDESCRIPTION: Markdown documentation explaining how VTK modules can be wrapped when built outside of the main VTK source tree.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Wrapping example\n\nThis example shows how VTK modules built outside of VTK can be wrapped.\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GDAL Module with CMake\nDESCRIPTION: Sets up the VTK GDAL I/O module by finding the GDAL package dependency, defining the module classes, adding the module to VTK, linking against the GDAL library, and adding test mangling. This establishes the necessary components for VTK to read and process geographic data through GDAL.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GDAL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE GDAL)\n\nset(classes\n  vtkGDAL\n  vtkGDALRasterReader\n  vtkGDALVectorReader)\n\nvtk_module_add_module(VTK::IOGDAL\n  CLASSES ${classes})\nvtk_module_link(VTK::IOGDAL\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    GDAL::GDAL)\nvtk_add_test_mangling(VTK::IOGDAL)\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic Branch in Git\nDESCRIPTION: Commands for creating new topic branches from master or release branches, including options for backporting changes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch origin\n$ git checkout -b my-topic origin/master\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Atomic vs Non-Atomic Operations in VTK\nDESCRIPTION: Example comparing atomic and non-atomic integer operations in a multi-threaded environment to demonstrate thread safety issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nint Total = 0;\nstd::atomic<vtkTypeInt32> TotalAtomic(0);\nconstexpr int Target = 1000000;\nconstexpr int NumThreads = 2;\n\nVTK_THREAD_RETURN_TYPE MyFunction(void *)\n{\n  for (int i=0; i<Target/NumThreads; i++)\n  {\n    ++Total;\n    ++TotalAtomic;\n  }\n  return VTK_THREAD_RETURN_VALUE;\n}\n\n// Now exercise atomics\nvtkNew<vtkMultiThreader> mt;\nmt->SetSingleMethod(MyFunction, NULL);\nmt->SetNumberOfThreads(NumThreads);\nmt->SingleMethodExecute();\nstd::cout << Total << \" \" << TotalAtomic.load() << endl;\n```\n\n----------------------------------------\n\nTITLE: Using Specialized Enum-to-JSON Conversion in C++\nDESCRIPTION: This snippet shows how to use the specialized enum conversion defined with NLOHMANN_JSON_SERIALIZE_ENUM. It demonstrates converting enum values to JSON strings, JSON strings to enum values, and handling undefined JSON values.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\n// enum to JSON as string\njson j = TS_STOPPED;\nassert(j == \"stopped\");\n\n// json string to enum\njson j3 = \"running\";\nassert(j3.template get<TaskState>() == TS_RUNNING);\n\n// undefined json value to enum (where the first map entry above is the default)\njson jPi = 3.14;\nassert(jPi.template get<TaskState>() == TS_INVALID );\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings and Library Type\nDESCRIPTION: Sets up build configuration parameters including shared/static library type, position independent code settings, and namespace configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(KWSYS_NAMESPACE MATCHES \"^kwsys$\")\n  set(KWSYS_NAME_IS_KWSYS 1)\nelse()\n  set(KWSYS_NAME_IS_KWSYS 0)\nendif()\n\nif(KWSYS_BUILD_SHARED)\n  set(KWSYS_BUILD_SHARED 1)\n  set(KWSYS_LIBRARY_TYPE SHARED)\nelse()\n  set(KWSYS_BUILD_SHARED 0)\n  set(KWSYS_LIBRARY_TYPE STATIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining and Compiling an ExprTk Expression (C++)\nDESCRIPTION: Shows how to define an expression string, set up a symbol table with variables, compile the expression, and evaluate it using ExprTk. This example demonstrates the basic workflow of using ExprTk for expression evaluation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nconst std::string foo_str =\n   \" w := 2 * x^y + z; \"\n   \" abs(x - y) / z;   \";\n\nT x, y, z, w;\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\nsymbol_table.add_variable(\"y\",y);\nsymbol_table.add_variable(\"z\",z);\nsymbol_table.add_variable(\"w\",w);\n\nexpression_t foo;\nfoo.register_symbol_table(symbol_table);\n\nparser_t parser;\nif (!parser.compile(foo_str,foo))\n{\n   // Error in expression...\n   return;\n}\n\nT result = foo.value();\n```\n\n----------------------------------------\n\nTITLE: Methods Moved to Private in vtkAdaptiveDataSetSurfaceFilter\nDESCRIPTION: List of methods that have been moved to private access in the vtkAdaptiveDataSetSurfaceFilter class in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/htg-representation-decimation.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nAddFace\nProcessLeaf1D\nProcessLeaf2D\nProcessLeaf3D\nProcessTrees\nRecursivelyProcessTree1DAnd2D\nRecursivelyProcessTree3D\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Project\nDESCRIPTION: This CMake command adds multiple Python test files to the VTK testing suite. It includes tests for matrix to transform conversion, thin plate warping in 2D and 3D, threaded point transformation, and cylindrical and spherical coordinate transformations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Transforms/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  MatrixToTransform.py\n  TestThinPlateWarp.py\n  TestThinPlateWarp3D.py\n  TestThreadedPointTransformation.py,NO_VALID\n  cylindrical.py\n  spherical.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Serving VTK.wasm with Python server\nDESCRIPTION: This snippet demonstrates how to serve the built VTK.wasm application using a Python HTTP server. This is required because the application uses web workers and needs `SharedArrayBuffer`, which requires specific HTTP headers to be configured by the server.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd out/build\npython3 ./server.py\n```\n\n----------------------------------------\n\nTITLE: Adding VTK PostgreSQL IO Module\nDESCRIPTION: Configures the VTK IO PostgreSQL module, adding specified classes and initializing auto-generated source files\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOPostgreSQL\n  CLASSES ${classes}\n  SOURCES vtkIOPostgreSQL_AutoInit.cxx)\n```\n\n----------------------------------------\n\nTITLE: Callback and Parsing Configuration\nDESCRIPTION: Configure parsing callbacks and execution order for subcommands and applications\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_28\n\nLANGUAGE: c++\nCODE:\n```\n.callback(void() function)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.parse_complete_callback(void() function)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.final_callback(void() function)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.immediate_callback()\n```\n\n----------------------------------------\n\nTITLE: Module Management Configuration\nDESCRIPTION: Sets up the requested and rejected modules lists based on various build options like Python, Java, and Serialization support\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtk_requested_modules)\nset(vtk_rejected_modules)\nif (VTK_WRAP_PYTHON)\n  list(APPEND vtk_requested_modules\n    VTK::WrappingPythonCore)\n  set(\"_vtk_module_reason_VTK::WrappingPythonCore\"\n    \"via `VTK_WRAP_PYTHON`\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factories (CMake)\nDESCRIPTION: Example of how to set up object factories in VTK using CMake. It shows the declaration of source files and overrides for object factories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  vtkObjectFactoryImpl.cxx\n  # This path is made by `vtk_object_factory_configure` later.\n  \"${CMAKE_CURRENT_BINARY_DIR}/${vtk-module}ObjectFactory.cxx\")\n\n# Make a list of base classes we will be overriding.\nset(overrides vtkObjectFactoryBase)\n# Make a variable declaring what the override for the class is.\nset(vtk_module_vtkObjectFactoryBase_override \"vtkObjectFactoryImpl\")\n```\n\n----------------------------------------\n\nTITLE: Updating VTK Repository\nDESCRIPTION: Command to update a local VTK repository with the latest changes from upstream when no local modifications have been made.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/download.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git pull\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Line Arguments Tests\nDESCRIPTION: Sets up the test arguments for the command line arguments tests. These arguments are used to verify the command line parsing functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nset(KWSYS_TEST_ARGS_testCommandLineArguments\n  --another-bool-variable\n  --long3=opt\n  --set-bool-arg1\n  -SSS ken brad bill andy\n  --some-bool-variable=true\n  --some-double-variable12.5\n  --some-int-variable 14\n  \"--some-string-variable=test string with space\"\n  --some-multi-argument 5 1 8 3 7 1 3 9 7 1\n  -N 12.5 -SS=andy -N 1.31 -N 22\n  -SS=bill -BBtrue -SS=brad\n  -BBtrue\n  -BBfalse\n  -SS=ken\n  -A\n  -C=test\n  --long2 hello\n  )\nset(KWSYS_TEST_ARGS_testCommandLineArguments1\n  --ignored\n  -n 24\n  --second-ignored\n  \"-m=test value\"\n  third-ignored\n  -p\n  some junk at the end\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring QML Files with CMake\nDESCRIPTION: This snippet iterates through a list of QML files and uses CMake's `configure_file` command to process them. The `.in` extension suggests these files are templates that are processed during configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (qml_file IN LISTS qml_files)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/${qml_file}.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${qml_file}\"\n    @ONLY)\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Serving WebAssembly Build with Python\nDESCRIPTION: This snippet demonstrates how to serve the generated WebAssembly build files using a simple HTTP server in Python. It requires Python 3 installed on the system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd out/build\npython3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data for CMake Modules\nDESCRIPTION: This CMake snippet defines the configuration for including specific test data files necessary for testing modules within the VTK project. It sets up the file paths for C++ and conditionally, for Python, depending on the presence of VTK_WRAP_PYTHON. The dependencies include the test data files located in the 'Data' directory. There are conditional directives that check for specific configurations before adding subdirectories ensuring modular and optional testing capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/mbwavelet_ascii.q\n  Data/mbwavelet_ascii.xyz\n  Data/goldenBallBaseline200.vtu\n)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/beach.jpg\n    Data/earth.ppm)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Reading from a Range with scnlib in C++\nDESCRIPTION: Shows how scnlib can work with standard C++ ranges, including transformations like std::views::reverse. This example demonstrates parsing an integer from a reversed range, highlighting the library's flexibility with different input sources.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <scn/scan.h>\n\n#include <ranges>\n\nint main() {\n    auto result = scn::scan<int>(\"123\" | std::views::reverse, \"{}\");\n    // result == true\n    // result->begin() is an iterator into a reverse_view\n    // result->range() is empty\n    // result->value() == 321\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Function in C++ with ExprTk\nDESCRIPTION: Demonstrates how to create a generic function 'too' using the igeneric_function interface in ExprTk. The function can handle parameters of different types (scalar, vector, string) and returns a scalar result.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_51\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct too final : public exprtk::igeneric_function<T>\n{\n   typedef typename exprtk::igeneric_function<T>::parameter_list_t\n                                                  parameter_list_t;\n\n   too()\n   {}\n\n   inline T operator()(parameter_list_t parameters) override\n   {\n      for (std::size_t i = 0; i < parameters.size(); ++i)\n      {\n         ...\n      }\n\n      return T(0);\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK PLY Reader and Writer Tests in CMake\nDESCRIPTION: This snippet sets up multiple test cases for VTK's PLY reader and writer components. It includes tests for basic reading and writing, as well as specific features like intensity, point clouds, alpha channels, and normals.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOPLYCxxTests tests\n  TestPLYReader.cxx\n  TestPLYReaderIntensity.cxx\n  TestPLYReaderPointCloud.cxx\n  TestPLYWriterAlpha.cxx\n  TestPLYWriter.cxx,NO_VALID\n  TestPLYWriterString.cxx,NO_VALID,NO_OUTPUT\n  TestPLYWriterNormals.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Multisample Anti-Aliasing in VTK using Environment Variables\nDESCRIPTION: Describes the possible values for the VTK_FORCE_MSAA environment variable to troubleshoot rendering problems related to Multisample anti-aliasing in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/runtime_settings.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. `0` to disable MSAA\n2. `1` to enable it regardless even when the driver is known to have problems with MSAA\n```\n\n----------------------------------------\n\nTITLE: Using vtkSmartPointer in Python API\nDESCRIPTION: Added support for vtkSmartPointer<T> parameters and return values in wrapped Python APIs. Also supports std::vector<vtkSmartPointer<T>> which appears as a tuple in Python with conversion from any sequence when converting to C++.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.2.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvtkSmartPointer<T>\\nstd::vector<vtkSmartPointer<T>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Compositor in ExprTk for C++\nDESCRIPTION: Shows how to use the function compositor to define and construct functions using ExprTk syntax. The compositor allows for creating functions that return a scalar value and consume up to six parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_58\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T>         symbol_table_t;\ntypedef exprtk::function_compositor<T>  compositor_t;\ntypedef typename compositor_t::function function_t;\n\nT avogadro = T(6.022e23);\n\nsymbol_table_t symbol_table;\n\nsymbol_table.add_constant(\"avogadro\", avogadro);\n\ncompositor_t compositor(symbol_table);\n\n// Define function koo0(v1, v2) { ... }\ncompositor.add(\n   function_t(\"koo0\"),\n   .vars(\"v1\", \"v2\")\n   .expression\n   (\n      \" 1 + cos(v1 * v2) / avogadro; \"\n   ));\n\n// Define function koo1(x, y, z) { ... }\ncompositor.add(\n   function_t()\n   .name(\"koo1\")\n   .var(\"x\").var(\"y\").var(\"z\")\n   .expression\n   (\n      \"1 + koo0(x * y, 3) / z;\"\n   ));\n```\n\n----------------------------------------\n\nTITLE: Serving the Built VTK Application\nDESCRIPTION: This Python snippet shows how to start a simple HTTP server to serve the files generated in the build process. Ensure Python is installed and use the command in the build output directory to access the application via a web browser at the specified address.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd out/build\npython3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Compiling Multiple Expressions with ExprTk Parser\nDESCRIPTION: Demonstrates how to compile multiple string expressions into ExprTk expression objects using a parser, and collecting them in a vector. Each expression is compiled in sequence and added to the collection if compilation succeeds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nconst std::string expression_str[3] =\n   {\n      \"x + 1\",\n      \"2x + y\",\n      \"sin(k + w)\"\n   };\n\nstd::vector<expression_t> expression_list;\n\nparser_t       parser;\nexpression_t   expression;\nsymbol_table_t symbol_table;\n\nexpression.register_symbol_table(symbol_table);\n\nfor (std::size_t i = 0; i < 3; ++i)\n{\n   if (parser.compile(expression_str[i],expression))\n   {\n      expression_list.push_back(expression);\n   }\n   else\n     std::cout << \"Error in \" << expression_str[i] << \"\\n\";\n}\n\nfor (auto& e : expression_list)\n{\n   e.value();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Configuring Tests in CMake\nDESCRIPTION: The snippet utilizes the defined classes to add the VTK rendering module via 'vtk_module_add_module'. It also prepares the module for testing through 'vtk_add_test_mangling', which helps ensure the module integrates correctly within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VtkJS/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingVtkJS\\n  CLASSES ${classes})\\nvtk_add_test_mangling(VTK::RenderingVtkJS)\n```\n\n----------------------------------------\n\nTITLE: Creating and Checking for Ghost Arrays in VTK (Before and After Implementation Change)\nDESCRIPTION: Shows the API changes for creating new ghost arrays and checking if ghost cells exist. The new methods better reflect that a ghost array may contain both ghost cells and blank cells, not just ghost levels.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/changes_6.3/ghosts_and_blanking.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// Old way to create a new ghost array\nvtkDataSet::GenerateGhostLevelArray\n\n// New way to create a new ghost array\nvtkDataSet::GenerateGhostArray\n\n// Old way to test if there are any ghost cells\ngrid->GetCellData()->GetArray(\"vtkGhostLevels\") != NULL\n\n// New way to test if there are any ghost cells\ngrid->HasAnyGhostCells()\n\n// Old way to get a pointer to the ghost array\ngrid->GetCellData()->GetArray(\"vtkGhostLevels\")\n\n// New way to get a pointer to the ghost array\ngrid->GetCellGhostArray()\n```\n\n----------------------------------------\n\nTITLE: Defining SPDX Tags in VTK Source Files\nDESCRIPTION: Example of how to include SPDX copyright and license identifier tags in VTK source files. These tags are parsed for SPDX file generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/ModuleSystem.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// SPDX-FileCopyrightText: Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n// SPDX-FileCopyrightText: Copyright (c) Awesome contributor\n// SPDX-License-Identifier: BSD-3-Clause\n```\n\n----------------------------------------\n\nTITLE: Same Value Type Dispatch Example\nDESCRIPTION: Shows how to use vtkArrayDispatch::Dispatch2BySameValueType for dispatching arrays with matching value types from a restricted set of valid value types.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef vtkTypeList::Create<float, double, int, vtkIdType> ValidValueTypes;\n\ntypedef vtkArrayDispatch::Dispatch2BySameValueType\n  <\n  ValidValueTypes\n  > MyDispatch;\n\nMyDispatch::Execute(array1, array2, someWorker);\n```\n\n----------------------------------------\n\nTITLE: Converting UTF-8 Strings to Filesystem Paths in CLI11\nDESCRIPTION: This snippet demonstrates how to use CLI11's to_path function to convert UTF-8 strings to filesystem paths, which is particularly useful on Windows where paths are typically wide strings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_43\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string utf8_name = \"Hello Halló Привет 你好 👩‍🚀❤️.txt\";\n\nstd::filesystem::path p = CLI::to_path(utf8_name);\nstd::ifstream stream(CLI::to_path(utf8_name));\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Configure Header Files\nDESCRIPTION: Generates and configures header files for VTK from templates using CMake's configuration abilities. Depends on existing template files in the source directory and ensures generated headers are placed in the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (generated_header IN LISTS generated_headers)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/${generated_header}.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${generated_header}\"\n    @ONLY)\n  list(APPEND headers\n    \"${CMAKE_CURRENT_BINARY_DIR}/${generated_header}\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific VTK RenderWindow Override\nDESCRIPTION: Shows how to chain Python overrides with C++ factory overrides, specifically for vtkRenderWindow on Windows systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\n@vtkWin32OpenGLRenderWindow.override\nclass CustomRenderWindow(vtkWin32OpenGLRenderWindow):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Introducing vtkForceStaticMesh Temporal Dataset Filter\nDESCRIPTION: A VTK filter that caches geometric structure for datasets with changing attributes, supporting both vtkPolyData and vtkUnstructuredGrid. Enables performance optimization by minimizing geometry regeneration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-ForceStaticMeshFilter.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Key components\n// - Works with vtkDataSet\n// - Works with vtkCompositeDataSet\n// - Caches geometry\n// - Supports GetMeshMTime() method\n```\n\n----------------------------------------\n\nTITLE: Updating vtkLog Macro Usage for C++\nDESCRIPTION: This snippet demonstrates the correct usage of the vtkLog macro, which now requires a trailing semi-colon. This change ensures that code compiles cleanly with the clang warning about extra semi-colons. Essential for maintaining compatibility with both old and new versions of VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/macro-semi-colons.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkLog(ERROR, \"No output data.\");\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package Dependencies\nDESCRIPTION: Locates and imports required VTK components for rendering and interaction in the Android project\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK COMPONENTS\n  vtkInteractionStyle\n  vtkRenderingOpenGL2\n  vtkRenderingFreeType\n  vtkTestingCore\n  vtkTestingRendering\n)\ninclude(${VTK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK Module Configuration\nDESCRIPTION: Configures and adds the VTK::AcceleratorsVTKmDataModel module with specified sources, headers, and properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkmConfigDataModel.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmConfigDataModel.h\"\n  @ONLY)\n\nlist(APPEND headers\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmConfigDataModel.h\")\n\nvtk_module_add_module(VTK::AcceleratorsVTKmDataModel\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  CLASSES ${classes}\n  NOWRAP_CLASSES  ${nowrap_classes}\n  PRIVATE_HEADERS ${private_headers})\nvtk_module_set_property(VTK::AcceleratorsVTKmDataModel\n  PROPERTY  JOB_POOL_COMPILE\n  VALUE     vtkm_pool)\n_vtk_module_real_target(vtkm_accel_target VTK::AcceleratorsVTKmDataModel)\nvtkm_add_target_information(${vtkm_accel_target}\n                            EXTENDS_VTKM\n                            MODIFY_CUDA_FLAGS\n                            DEVICE_SOURCES ${sources})\n```\n\n----------------------------------------\n\nTITLE: VTK Directory Structure Example\nDESCRIPTION: Shows the expected folder structure after extracting VTK source code into the project directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/build_windows_vs.md#2025-04-21_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nc:\\data\\cpp\\vtk\\build    <--empty\nc:\\data\\cpp\\vtk\\src\nc:\\data\\cpp\\vtk\\src\\Accelerators\nc:\\data\\cpp\\vtk\\src\\Charts\nc:\\data\\cpp\\vtk\\src\\...\n```\n\n----------------------------------------\n\nTITLE: Using VTK String Token Hashing in C++\nDESCRIPTION: Shows how to use vtkStringToken for string hashing at compile time with switch statement pattern matching.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#include \"vtkStringToken.h\"\nusing namespace vtk::literals;\nvtkStringToken t;\nswitch (t.GetId())\n{\n  case \"foo\"_hash: foo(); break;\n  case \"bar\"_hash: bar(); break;\n  default: vtkErrorMacro(\"Unknown token \" << t.Data()); break;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VTK ANARI Rendering Module\nDESCRIPTION: Defines the VTK::RenderingAnari module with its classes, source files, and header directories, including object factory generated files and non-wrapped classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingAnari\n  HEADER_DIRECTORIES\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  NOWRAP_CLASSES ${nowrap_classes}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Recovering Original Data File from ExternalData\nDESCRIPTION: Shows the commands to recover an original data file from its ExternalData stored format before committing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd Some/Module/Testing/Data/Baseline\n$ mv .ExternalData_SHA512_$(cat MyTest.png.sha512) MyTest.png\n```\n\n----------------------------------------\n\nTITLE: Time Metadata Structure in VTK XML Format\nDESCRIPTION: Example XML structure showing how time metadata is embedded as a field array named TimeValue in VTK XML files. The array contains a single double precision value that represents the time step value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLTimeInFieldData.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"PolyData\" version=\"1.0\" byte_order=\"LittleEndian\" header_type=\"UInt64\">\n  <PolyData>\n    <FieldData>\n      <DataArray type=\"Float64\" Name=\"TimeValue\" NumberOfTuples=\"1\">1.24\n      </DataArray>\n    </FieldData>\n    ...\n</VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Modern VTK 7.1+ Vector Magnitude Calculation Implementation\nDESCRIPTION: Updated implementation using VTK 7.1 features including vtkArrayDispatch and vtkDataArrayAccessor for efficient array access across different memory layouts.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstruct CalcMagnitudeWorker\n{\n  template <typename VectorArray, typename MagnitudeArray>\n  void operator()(VectorArray *vectors, MagnitudeArray *magnitude)\n  {\n    VTK_ASSUME(vectors->GetNumberOfComponents() == 3);\n    VTK_ASSUME(magnitude->GetNumberOfComponents() == 1);\n\n    vtkDataArrayAccessor<VectorArray> v(vectors);\n    vtkDataArrayAccessor<MagnitudeArray> m(magnitude);\n\n    vtkIdType numVectors = vectors->GetNumberOfTuples();\n    for (vtkIdType tupleIdx = 0; tupleIdx < numVectors; ++tupleIdx)\n      {\n      m.Set(tupleIdx, 0, std::sqrt(v.Get(tupleIdx, 0) * v.Get(tupleIdx, 0) +\n                                   v.Get(tupleIdx, 1) * v.Get(tupleIdx, 1) +\n                                   v.Get(tupleIdx, 2) * v.Get(tupleIdx, 2)));\n      }\n  }\n};\n\nvoid calcMagnitude(vtkDataArray *vectors, vtkDataArray *magnitude)\n{\n  CalcMagnitudeWorker worker;\n\n  typedef vtkArrayDispatch::Dispatch2ByValueType\n    <\n      vtkArrayDispatch::AllTypes,\n      vtkArrayDispatch::Reals\n    > Dispatcher;\n\n  if (!Dispatcher::Execute(vectors, magnitude, worker))\n    {\n    worker(vectors, magnitude);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Volume Rendering\nDESCRIPTION: This snippet sets up a CMake configuration for compiling a C++ project that uses VTK libraries for volume rendering. It specifies main.cxx as the source file and creates a shared library named VolumeRender. It requires VTK libraries along with Android and log as dependencies, ensuring that the required libraries are linked appropriately.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/jni/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  main.cxx\n)\n\nadd_library(VolumeRender SHARED ${sources})\ntarget_link_libraries(VolumeRender ${VTK_LIBRARIES}\n  android\n  log\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Magnitudes Using GetVoidPointer in C++\nDESCRIPTION: This snippet shows an efficient implementation of vector magnitude calculation using GetVoidPointer. It assumes an array-of-structs (AOS) memory layout and uses vtkTemplateMacro for type-safe access to raw memory buffers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// 3-component magnitude calculation using GetVoidPointer.\n// Efficient and fast, but assumes AOS memory layout\ntemplate <typename ValueType>\nvoid calcMagnitudeWorker(ValueType *vectors, ValueType *magnitude,\n                         vtkIdType numVectors)\n{\n  for (vtkIdType tupleIdx = 0; tupleIdx < numVectors; ++tupleIdx)\n    {\n    // We now have access to the raw memory buffers, and assuming\n    // AOS memory layout, we know how to access them.\n    magnitude[tupleIdx] =\n      std::sqrt(vectors[3 * tupleIdx + 0] *\n                vectors[3 * tupleIdx + 0] +\n                vectors[3 * tupleIdx + 1] *\n                vectors[3 * tupleIdx + 1] +\n                vectors[3 * tupleIdx + 2] *\n                vectors[3 * tupleIdx + 2]);\n    }\n}\n\nvoid calcMagnitude(vtkDataArray *vectors, vtkDataArray *magnitude)\n{\n  assert(\"Arrays must have same datatype!\" &&\n         vtkDataTypesCompare(vectors->GetDataType(),\n                             magnitude->GetDataType()));\n  switch (vectors->GetDataType())\n    {\n    vtkTemplateMacro(calcMagnitudeWorker<VTK_TT*>(\n      static_cast<VTK_TT*>(vectors->GetVoidPointer(0)),\n      static_cast<VTK_TT*>(magnitude->GetVoidPointer(0)),\n      vectors->GetNumberOfTuples());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flag Syntax with Negation in CLI11 (C++)\nDESCRIPTION: Shows special syntax for flag options that allows for negative flags. The example demonstrates how to configure a flag that can be set to true with one option and false with another.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\napp.add_flag(\"--flag,!--no-flag\",result,\"help for flag\");\n```\n\n----------------------------------------\n\nTITLE: Fetching Merge Request Changes\nDESCRIPTION: Git commands to fetch and checkout changes from a merge request branch\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch https://gitlab.kitware.com/$username/vtk.git $branch\n$ git checkout FETCH_HEAD -b $branch\n\n# Alternative direct checkout\n$ git checkout FETCH_HEAD\n\n# Cherry-pick option\n$ git cherry-pick ..FETCH_HEAD\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Module Dependencies Using Python Script\nDESCRIPTION: Command line example showing how to use the FindNeededModules.py utility script to determine module dependencies for VTK-dependent code. The script requires a build tree JSON file and generates find_package commands.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/ModuleSystem.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUtilities/Maintenance/FindNeededModules.py -s /path/to/sources -j path/to/vtk_build/modules.json\n```\n\n----------------------------------------\n\nTITLE: Describing ImageData using HDF5 in VTK\nDESCRIPTION: The snippet illustrates an HDF5 file structure representing ImageData generated from a wavelet source in ParaView. It defines several attributes such as direction, origin, and spacing. Additionally, it includes various datasets for handling scalars and gradients. The data format suits both serial and parallel processing without partitioning.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_34\n\nLANGUAGE: HDF5\nCODE:\n```\nHDF5 \"ExternalData/Testing/Data/mandelbrot-vti.hdf\" {\nGROUP \"/\" {\n   GROUP \"VTKHDF\" {\n      ATTRIBUTE \"Direction\" {\n         DATATYPE  H5T_IEEE_F64LE\n         DATASPACE  SIMPLE { ( 9 ) / ( 9 ) }\n         DATA {\n         (0): 1, 0, 0, 0, 1, 0, 0, 0, 1\n         }\n      }\n      ATTRIBUTE \"Origin\" {\n         DATATYPE  H5T_IEEE_F64LE\n         DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n         DATA {\n         (0): -1.75, -1.25, 0\n         }\n      }\n      ATTRIBUTE \"Spacing\" {\n         DATATYPE  H5T_IEEE_F64LE\n         DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n         DATA {\n         (0): 0.131579, 0.125, 0.0952381\n         }\n      }\n      ATTRIBUTE \"Type\" {\n         DATATYPE  H5T_STRING {\n            STRSIZE 9;\n            STRPAD H5T_STR_NULLPAD;\n            CSET H5T_CSET_ASCII;\n            CTYPE H5T_C_S1;\n         }\n         DATASPACE  SCALAR\n         DATA {\n         (0): \"ImageData\"\n         }\n      }\n      ATTRIBUTE \"Version\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n         DATA {\n         (0): 1, 0\n         }\n      }\n      ATTRIBUTE \"WholeExtent\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 6 ) / ( 6 ) }\n         DATA {\n         (0): 0, 19, 0, 20, 0, 21\n         }\n      }\n      GROUP \"PointData\" {\n         ATTRIBUTE \"Scalars\" {\n            DATATYPE  H5T_STRING {\n               STRSIZE 18;\n               STRPAD H5T_STR_NULLPAD;\n               CSET H5T_CSET_ASCII;\n               CTYPE H5T_C_S1;\n            }\n            DATASPACE  SCALAR\n            DATA {\n            (0): \"IterationsGradient\"\n            }\n         }\n         DATASET \"Iterations\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n         DATASET \"IterationsGradient\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 22, 21, 20, 3 ) / ( 22, 21, 20, 3 ) }\n         }\n         DATASET \"Iterations_double\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n         DATASET \"point_index_llong\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n         DATASET \"xextent_int\" {\n            DATATYPE  H5T_STD_I32LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n         DATASET \"xextent_long\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n         DATASET \"xextent_uint\" {\n            DATATYPE  H5T_STD_U32LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n         DATASET \"xextent_ulong\" {\n            DATATYPE  H5T_STD_U64LE\n            DATASPACE  SIMPLE { ( 22, 21, 20 ) / ( 22, 21, 20 ) }\n         }\n      }\n   }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git command to create and checkout a new branch for development\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b your_branch\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master Branch with Git\nDESCRIPTION: Commands to update the local master branch from origin and optionally sync with GitLab fork.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout master\n$ git pull\n```\n\n----------------------------------------\n\nTITLE: Handling Control-C and Color Output in Unix-like Systems\nDESCRIPTION: This snippet shows how to set up a signal handler for Control-C (SIGINT) and use the Rang library for colored output in Unix-like systems. It includes a signal handler function and setup code for the main function.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_46\n\nLANGUAGE: cpp\nCODE:\n```\n#include <csignal>\nvoid signal_handler(int s) {\n    std::cout << std::endl << rang::style::reset << rang::fg::red << rang::fg::bold;\n    std::cout << \"Control-C detected, exiting...\" << rang::style::reset << std::endl;\n    std::exit(1); // will call the correct exit func, no unwinding of the stack though\n}\n\n// In main function:\nstruct sigaction sigIntHandler;\nsigIntHandler.sa_handler = signal_handler;\nsigemptyset(&sigIntHandler.sa_mask);\nsigIntHandler.sa_flags = 0;\nsigaction(SIGINT, &sigIntHandler, nullptr);\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Auto Initialization\nDESCRIPTION: This snippet links the VTK libraries to the target executable using `target_link_libraries()`. It also uses `vtk_module_autoinit()` to automatically initialize the required VTK modules, ensuring that VTK functions are properly initialized at runtime.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${MYNAME} PRIVATE ${VTK_LIBRARIES})\nvtk_module_autoinit( TARGETS ${MYNAME} MODULES ${VTK_LIBRARIES} )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MotionFX C++ Tests\nDESCRIPTION: Sets up C++ test cases for the VTK MotionFX CFG reader component. Configures multiple test files including gear systems, planetary motion, position files, and clover patterns. Uses the vtk_add_test_cxx and vtk_test_cxx_executable CMake functions to establish the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MotionFX/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOMotionFXCxxTests tests\n  NO_OUTPUT\n  TestMotionFXCFGReader2Gears.cxx\n  TestMotionFXCFGReaderPlanetary.cxx\n  TestMotionFXCFGReaderPositionFile.cxx\n  TestMotionFXCFGReaderClover.cxx\n  )\nvtk_test_cxx_executable(vtkIOMotionFXCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding nlohmann_json dependency in Meson build system\nDESCRIPTION: This Meson code snippet shows how to add nlohmann_json as a dependency in a Meson build configuration, using the system-wide library found by pkg-config.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_31\n\nLANGUAGE: meson\nCODE:\n```\njson = dependency('nlohmann_json', required: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MINC IO Module Classes and Headers\nDESCRIPTION: Defines the classes and headers for VTK's MINC IO module and adds them to the build system. Includes various reader and writer classes for MINC images, MNI objects, tag points, and transforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MINC/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMINCImageAttributes\n  vtkMINCImageReader\n  vtkMINCImageWriter\n  vtkMNIObjectReader\n  vtkMNIObjectWriter\n  vtkMNITagPointReader\n  vtkMNITagPointWriter\n  vtkMNITransformReader\n  vtkMNITransformWriter)\n\nset(headers\n  vtkMINC.h)\n\nvtk_module_add_module(VTK::IOMINC\n  CLASSES ${classes}\n  HEADERS ${headers})\nvtk_add_test_mangling(VTK::IOMINC)\n```\n\n----------------------------------------\n\nTITLE: Installing nlohmann_json with CPM.cmake in CMake\nDESCRIPTION: This snippet demonstrates how to add the nlohmann_json library to a CMake project using CPM.cmake. It specifies the GitHub repository and version to download from.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nCPMAddPackage(\n    NAME nlohmann_json\n    GITHUB_REPOSITORY nlohmann/json\n    VERSION 3.9.1)\n```\n\n----------------------------------------\n\nTITLE: Configuring FFMPEG Package Dependencies in CMake\nDESCRIPTION: Defines required FFMPEG components and version requirements for VTK integration. Specifies minimum version 2.3.3 and required components including avformat, avcodec, avutil, and swscale.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE FFMPEG\n  VERSION 2.3.3\n  FORWARD_VERSION_REQ MINOR\n  COMPONENTS\n    avformat\n    avcodec\n    avutil\n    swscale\n  OPTIONAL_COMPONENTS\n    swresample)\n```\n\n----------------------------------------\n\nTITLE: Configuring KWSys Library in CMake\nDESCRIPTION: This CMake script is used to configure the KWSys library, specifying settings such as the namespace, build options, and installation paths for integration with VTK. It sets up necessary flags and options for building the library, ensuring compatibility and proper placement within the VTK project. Dependencies or prerequisites include having CMake installed and access to the VTK build environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Configure KWSys to be named \"vtksys\".\nSET(KWSYS_NAMESPACE vtksys)\nSET(KWSYS_BUILD_PIC 1)\nSET(KWSYS_ALIAS_TARGET VTK::vtksys)\nSET(KWSYS_USE_Base64 1)\nSET(KWSYS_USE_CommandLineArguments 1)\nSET(KWSYS_USE_DynamicLoader 1)\nSET(KWSYS_USE_Process 1)\nSET(KWSYS_USE_RegularExpression 1)\nSET(KWSYS_USE_SystemTools 1)\nSET(KWSYS_USE_SystemInformation 1)\nSET(KWSYS_USE_MD5 1)\nSET(KWSYS_USE_Glob 1)\nset(KWSYS_HEADER_ROOT ${CMAKE_CURRENT_BINARY_DIR})\nSET(KWSYS_INSTALL_COMPONENT_NAME_RUNTIME ${_vtk_build_TARGETS_COMPONENT})\nSET(KWSYS_INSTALL_COMPONENT_NAME_DEVELOPMENT ${_vtk_build_HEADERS_COMPONENT})\nif(_vtk_build_TARGET_SPECIFIC_COMPONENTS)\n  string(PREPEND KWSYS_INSTALL_COMPONENT_NAME_RUNTIME VTK::vtksys-)\n  string(PREPEND KWSYS_INSTALL_COMPONENT_NAME_DEVELOPMENT VTK::vtksys-)\nendif()\nSET(KWSYS_INSTALL_EXPORT_NAME ${_vtk_build_INSTALL_EXPORT})\nset(KWSYS_SYSTEMTOOLS_SUPPORT_WINDOWS_SLASHES 1)\nset(KWSYS_ENCODING_DEFAULT_CODEPAGE CP_UTF8)\n\nif(NOT VTK_INSTALL_NO_LIBRARIES)\n  set(KWSYS_INSTALL_BIN_DIR ${_vtk_build_RUNTIME_DESTINATION})\n  set(KWSYS_INSTALL_LIB_DIR ${_vtk_build_LIBRARY_DESTINATION})\nendif()\nif(_vtk_build_INSTALL_HEADERS)\n  set(KWSYS_INSTALL_INCLUDE_DIR ${_vtk_build_HEADERS_DESTINATION})\nendif()\n\nvtk_module_third_party_internal(\n  STANDARD_INCLUDE_DIRS\n  LICENSE_FILES           \"vtksys/Copyright.txt\"\n  SPDX_LICENSE_IDENTIFIER \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT     \"Copyright 2000-2016 Kitware, Inc. and Contributors\"\n  SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/utils/kwsys.git\"\n  VERSION                 \"master\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Third-Party Integration in VTK\nDESCRIPTION: Sets up HDF5 as a third-party module in VTK with license information, version details, and configuration options. Handles both internal and external builds with specific target configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDF5_EXTERNALLY_CONFIGURED 1)\n\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkhdf5/COPYING\"\n      \"vtkhdf5/COPYING_LBNL_HDF5\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright 2006 by The HDF Group.\"\n      \"Copyright 1998-2006 by The Board of Trustees of the University of Illinois.\"\n      \"Copyright (c) 2016, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Dept. of Energy).\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/hdf5.git@for/vtk-20220414-1.13.1\"\n    VERSION\n      \"1.13.1\"\n    STANDARD_INCLUDE_DIRS\n    INTERFACE\n  EXTERNAL\n    PACKAGE       HDF5\n    COMPONENTS    C HL\n    TARGETS       hdf5::hdf5\n                  hdf5::hdf5_hl\n    USE_VARIABLES HDF5_IS_PARALLEL\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Direct Pipeline Request Example\nDESCRIPTION: Example demonstrating how to make direct pipeline requests using information keys.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef vtkStreamingDemandDrivenPipeline vtkSDDP;\nvtkNew<vtkRTAnalyticSource> source;\nint updateExtent[6] = {0, 5, 0, 5, 2, 2};\nvtkNew<vtkInformation> requests;\nrequests->Set(vtkSDDP::UPDATE_EXTENT(), updateExtent, 6);\nreader->Update(requests.GetPointer());\n```\n\n----------------------------------------\n\nTITLE: Querying XML with XPath in C++ using pugixml\nDESCRIPTION: This C++ code snippet demonstrates how to use pugixml with XPath to select XML nodes that satisfy a certain condition (Timeout attribute greater than 0).  It loads an XML file, uses XPath to query for 'Tool' nodes with a 'Timeout' attribute greater than 0, and then iterates through the results to print the filename and timeout attribute of each matching tool.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/vtkpugixml/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include \"pugixml.hpp\"\n#include <iostream>\n\nint main()\n{\n    pugi::xml_document doc;\n    pugi::xml_parse_result result = doc.load_file(\"xgconsole.xml\");\n    if (!result)\n        return -1;\n        \n    pugi::xpath_node_set tools_with_timeout = doc.select_nodes(\"/Profile/Tools/Tool[@Timeout > 0]\");\n    \n    for (pugi::xpath_node node: tools_with_timeout)\n    {\n        pugi::xml_node tool = node.node();\n        std::cout << \"Tool \" << tool.attribute(\"Filename\").value() <<\n            \" has timeout \" << tool.attribute(\"Timeout\").as_int() << \"\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Arguments based on Platform\nDESCRIPTION: This CMake snippet defines the arguments for the TestMySQLTableReadWrite test based on the operating system. If it's Windows, it uses `simple_table_win.vtk`; otherwise, it uses `simple_table.vtk`. This accounts for potential differences in file paths or formats between Windows and other systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    set(TestMySQLTableReadWrite_ARGS\n      DATA{../Data/Input/simple_table_win.vtk})\n  else()\n    set(TestMySQLTableReadWrite_ARGS\n      DATA{../Data/Input/simple_table.vtk})\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining the Executable Target and Linking Libraries\nDESCRIPTION: This snippet defines the executable target named LabeledMesh and links it with the necessary VTK libraries needed for its functionalities. It ensures that the target is properly constructed with the required dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Annotation/Cxx/LabeledMesh/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(LabeledMesh MACOSX_BUNDLE\n  LabeledMesh.cxx)\ntarget_link_libraries(LabeledMesh\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: AOS Implementation of GetTypedComponent Method in C++\nDESCRIPTION: This code shows how the GetTypedComponent method is implemented in an Array-of-Structs (AOS) data array. This implementation can potentially benefit from compiler optimizations when the number of components is known at compile time.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nValueType vtkAOSDataArrayTemplate::GetTypedComponent(vtkIdType tuple,\n                                                     int comp) const\n{\n  // AOSData is a ValueType* pointing at the base of the array data.\n  return this->AOSData[tuple * this->NumberOfComponents + comp];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variant Types with CLI11 (C++)\nDESCRIPTION: Example showing how to use std::variant with CLI11's add_option to support multiple types for a single option. Different conversion types can be specified based on the option name.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nusing vtype=std::variant<int, double, std::string>;\n vtype v1;\napp.add_option<vtype,std:string>(\"--vs\",v1);\napp.add_option<vtype,int>(\"--vi\",v1);\napp.add_option<vtype,double>(\"--vf\",v1);\n```\n\n----------------------------------------\n\nTITLE: Installing VTK from PyPI\nDESCRIPTION: Basic pip command to install VTK package from the Python Package Index (PyPI).\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/available_python_wheels.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vtk\n```\n\n----------------------------------------\n\nTITLE: Creating Template Objects in Python\nDESCRIPTION: Shows how to create and configure objects from templated classes in VTK's Python interface.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = vtkSOADataArrayTemplate['float32']()\n>>> a.SetNumberOfComponents(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Third-Party Module for LibHaru in CMake\nDESCRIPTION: This snippet configures the VTK third-party module for LibHaru. It specifies license details, version information, and setup for both internal and external builds. The internal configuration includes SPDX identifiers and download location, while the external setup specifies package requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtklibharu/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"Zlib\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (C) 1999-2006 Takeshi Kanno\"\n      \"Copyright (C) 2007-2009 Antony Dovgal\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/libharu.git@for/vtk-20241208-2.4.4\"\n    VERSION\n      \"2.4.4\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE LibHaru\n    VERSION 2.4.0\n    TARGETS LibHaru::LibHaru\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for VTK Documentation on Windows\nDESCRIPTION: Creates and activates a Python virtual environment for building VTK documentation on Windows. Uses the Python launcher (py) to execute venv with the latest Python interpreter.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\ncd Documentation\\docs\n\npy -m venv .venv\n.\\.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationStringKey in VTK XML\nDESCRIPTION: Shows the XML structure for defining a vtkInformationStringKey with a multi-line string value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"String\" location=\"XMLTestKey\">\n  Test String!\nLine2\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Execution Model Classes in CMake\nDESCRIPTION: Defines a comprehensive list of VTK algorithm and execution model classes to be included in the CommonExecutionModel module. Includes core algorithm classes, pipeline components, and specialized data processing classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAggregateToPartitionedDataSetCollection\n  vtkAlgorithm\n  vtkAlgorithmOutput\n  vtkAnnotationLayersAlgorithm\n  vtkArrayDataAlgorithm\n  vtkCachedStreamingDemandDrivenPipeline\n  vtkCastToConcrete\n  vtkCellGridAlgorithm\n  vtkCompositeDataPipeline\n  vtkCompositeDataSetAlgorithm\n  vtkDataObjectAlgorithm\n  vtkDataSetAlgorithm\n  vtkDemandDrivenPipeline\n  vtkDirectedGraphAlgorithm\n  vtkEndFor\n  vtkEnsembleSource\n  vtkExecutionAggregator\n  vtkExecutionRange\n  vtkExecutive\n  vtkExplicitStructuredGridAlgorithm\n  vtkExtentRCBPartitioner\n  vtkExtentSplitter\n  vtkExtentTranslator\n  vtkFilteringInformationKeyManager\n  vtkForEach\n  vtkGraphAlgorithm\n  vtkHierarchicalBoxDataSetAlgorithm\n  vtkHyperTreeGridAlgorithm\n  vtkImageAlgorithm\n  vtkImageInPlaceFilter\n  vtkImageProgressIterator\n  vtkImageToStructuredGrid\n  vtkImageToStructuredPoints\n  vtkInformationDataObjectMetaDataKey\n  vtkInformationExecutivePortKey\n  vtkInformationExecutivePortVectorKey\n  vtkInformationIntegerRequestKey\n  vtkMoleculeAlgorithm\n  vtkMultiBlockDataSetAlgorithm\n  vtkMultiTimeStepAlgorithm\n  vtkParallelReader\n  vtkPartitionedDataSetAlgorithm\n  vtkPartitionedDataSetCollectionAlgorithm\n  vtkPassInputTypeAlgorithm\n  vtkPiecewiseFunctionAlgorithm\n  vtkPiecewiseFunctionShiftScale\n  vtkPointSetAlgorithm\n  vtkPolyDataAlgorithm\n  vtkProgressObserver\n  vtkReaderAlgorithm\n  vtkRectilinearGridAlgorithm\n  vtkSMPProgressObserver\n  vtkScalarTree\n  vtkSelectionAlgorithm\n  vtkSimpleImageToImageFilter\n  vtkSimpleReader\n  vtkSimpleScalarTree\n  vtkSpanSpace\n  vtkSphereTree\n  vtkStreamingDemandDrivenPipeline\n  vtkStructuredGridAlgorithm\n  vtkTableAlgorithm\n  vtkThreadedCompositeDataPipeline\n  vtkThreadedImageAlgorithm\n  vtkTimeRange\n  vtkTreeAlgorithm\n  vtkTrivialConsumer\n  vtkTrivialProducer\n  vtkUndirectedGraphAlgorithm\n  vtkUniformGridPartitioner\n  vtkUnstructuredGridAlgorithm\n  vtkUnstructuredGridBaseAlgorithm\n\n  # New AMR classes\n  vtkNonOverlappingAMRAlgorithm\n  vtkOverlappingAMRAlgorithm\n  vtkUniformGridAMRAlgorithm)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK MPI Parallel Classes\nDESCRIPTION: Defines a list of VTK classes for MPI parallel IO operations including PLOT3D and WindBlade readers.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMPIMultiBlockPLOT3DReader\n  vtkPWindBladeReader)\n```\n\n----------------------------------------\n\nTITLE: VTK Cube Example\nDESCRIPTION: This example demonstrates a VTK file format for representing a cube using polygonal faces. It defines points, polygons, cell data (scalars and normals), field data, point data (scalars and a lookup table), and the lookup table itself. This legacy format is commonly used to represent 3D geometries with associated attributes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_7\n\nLANGUAGE: vtk\nCODE:\n```\n\"# vtk DataFile Version 2.0\\nCube example\\nASCII\\nDATASET POLYDATA\\nPOINTS 8 float\\n0.0 0.0 0.0\\n1.0 0.0 0.0\\n1.0 1.0 0.0\\n0.0 1.0 0.0\\n0.0 0.0 1.0\\n1.0 0.0 1.0\\n1.0 1.0 1.0\\n0.0 1.0 1.0\\nPOLYGONS 6 30\\n4 0 1 2 3\\n4 4 5 6 7\\n4 0 1 5 4\\n4 2 3 7 6\\n4 0 4 7 3\\n4 1 2 6 5\\nCELL_DATA 6\\nSCALARS cell_scalars int 1\\nLOOKUP_TABLE default\\n0\\n1\\n2\\n3\\n4\\n5\\nNORMALS cell_normals float\\n0 0 -1\\n0 0 1\\n0 -1 0\\n0 1 0\\n-1 0 0\\n1 0 0\\nFIELD FieldData 2\\ncellIds 1 6 int\\n0 1 2 3 4 5\\nfaceAttributes 2 6 float\\n0.0 1.0 1.0 2.0 2.0 3.0 3.0 4.0 4.0 5.0 5.0 6.0\\nPOINT_DATA 8\\nSCALARS sample_scalars float 1\\nLOOKUP_TABLE my_table\\n0.0\\n1.0\\n2.0\\n3.0\\n4.0\\n5.0\\n6.0\\n7.0\\nLOOKUP_TABLE my_table 8\\n0.0 0.0 0.0 1.0\\n1.0 0.0 0.0 1.0\\n0.0 1.0 0.0 1.0\\n1.0 1.0 0.0 1.0\\n0.0 0.0 1.0 1.0\\n1.0 0.0 1.0 1.0\\n0.0 1.0 1.0 1.0\\n1.0 1.0 1.0 1.0\\n\"\n```\n\n----------------------------------------\n\nTITLE: Subcommand and Option Management\nDESCRIPTION: Methods for adding, removing, and querying subcommands and options\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\n.add_subcommand(name=\"\", description=\"\")\n```\n\nLANGUAGE: c++\nCODE:\n```\n.remove_subcommand(App)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.got_subcommand(App_or_name)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.get_subcommands(filter)\n```\n\n----------------------------------------\n\nTITLE: Fixing vtkPlotBar::GetBounds Logic for Log Scale in C++\nDESCRIPTION: This code snippet corrects the behavior of the GetBounds method in the vtkPlotBar class. It ensures that when the 'unscaled' parameter is set to true, the method returns unscaled bounds; otherwise, it returns scaled bounds. This adjustment is crucial for accurate data representation in visualizations that utilize logarithmic scaling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/fix-vtkPlotBar-GetBounds.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid vtkPlotBar::GetBounds(double* bounds, bool unscaled) {\n    if (unscaled) {\n        // Return unscaled bounds\n    } else {\n        // Return scaled bounds\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Components\nDESCRIPTION: This snippet searches for required VTK components needed for the project, such as ChartsCore, InfovisCore, and various rendering modules. It uses the 'find_package' command to locate these components and checks for their availability, providing conditional logic for course of action based on the results.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Charts/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8 FATAL_ERROR)\nproject(Charts)\n\nfind_package(VTK\n  COMPONENTS\n    ChartsCore\n  OPTIONAL_COMPONENTS\n    CommonSystem\n    GUISupportQt\n    InfovisCore\n    RenderingOpenGL2\n    RenderingContextOpenGL2\n    ViewsInfovis\n    ViewsContext2D\n    ViewsQt)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Optimized VTK Array Downcasting with vtkArrayDownCast\nDESCRIPTION: Shows the preferred method of downcasting arrays using vtkArrayDownCast, which automatically chooses between FastDownCast and SafeDownCast based on array type support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ArrayType>\nvoid DoSomeAction(vtkAbstractArray *array)\n{\n  ArrayType *myArray = vtkArrayDownCast<ArrayType>(array);\n  if (myArray)\n    {\n    // ... (do work with myArray)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents\nDESCRIPTION: Sphinx toctree directive that defines the documentation structure and hierarchy. Sets up the main navigation with maxdepth of 1 and includes key sections like getting started, API docs, build instructions etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:maxdepth: 1\n:caption: Contents\nabout\ngetting_started/index\nlearning\nsupported_data_formats\nsupported_hardware\nmodules/index\nbuild_instructions/index.md\napi/index\nadvanced/index\ndesign_documents/index\ndevelopers_guide/index\nresources\nrelease_details/index\n```\n\n----------------------------------------\n\nTITLE: Formatting a string with fmt library in C++\nDESCRIPTION: Example of using fmt::format to create a formatted string with a placeholder. The placeholder {} is replaced with the value 42.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"The answer is {}.\", 42);\n// s == \"The answer is 42.\"\n```\n\n----------------------------------------\n\nTITLE: Unstructured Grid Dataset Format in VTK\nDESCRIPTION: Format for unstructured grid datasets with arbitrary cell combinations. Includes points, cells, and cell types definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nDATASET UNSTRUCTURED_GRID\nPOINTS n dataType\np0x p0y p0z\np1x p1y p1z\n...\np(n-1)x p(n-1)y p(n-1)z\n\nCELLS n size\nnumPoints0, i0, j0, k0, ...\nnumPoints1, i1, j1, k1, ...\nnumPoints2, i2, j2, k2, ...\n...\nnumPointsn-1, in-1, jn-1, kn-1, ...\n\nCELL_TYPES n\ntype0\ntype1\ntype2\n...\ntypen-1\n```\n\n----------------------------------------\n\nTITLE: Repeated Reading with scnlib in C++\nDESCRIPTION: Demonstrates how to perform repeated parsing operations with scnlib. This example shows reading multiple integers from a string into a vector, updating the input range after each successful parse.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <scn/scan.h>\n#include <vector>\n\nint main() {\n    std::vector<int> vec{};\n    auto input = scn::ranges::subrange{\"123 456 789\"sv};\n    \n    while (auto result = scn::scan<int>(input), \"{}\"))) {\n        vec.push_back(result->value());\n        input = result->range();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uniforms in WebGPU with C++\nDESCRIPTION: This snippet illustrates the use of uniforms in a WebGPU compute shader. A uniform is treated as a `vtkWebGPUComputeBuffer` with a specific buffer mode for storing constant data. Inputs are a data vector and a float uniform; the shader processes these inputs and the uniform's value is retrieved through uniform buffering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nconst char* shaderSource = R\"(\n@group(0) @binding(0) var<storage, read> inputBuffer: array<i32, 128>;\n@group(0) @binding(1) var<uniform> myUniform: f32;\n\n@compute @workgroup_size(32, 1, 1)\nfn computeFunction(@builtin(global_invocation_id) id: vec3<u32>)\n{\n  // ...\n  // Do something\n  // ...\n})\";\n\nint main()\n{\n  // Ipnut data vector\n  std::vector<int> inputVector1Values(128);\n  // ...\n  // Fill the data\n  // ...\n\n  // Creating the input buffer to the compute shader\n  vtkNew<vtkWebGPUComputeBuffer> inputBuffer;\n  inputBuffer->SetGroup(0);\n  inputBuffer->SetBinding(0);\n  inputBuffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_ONLY_COMPUTE_STORAGE);\n  inputBuffer->SetData(inputVector1Values);\n  inputBuffer->SetLabel(\"First input buffer\");\n  inputBuffer->SetDataType(vtkWebGPUComputeBuffer::BufferDataType::STD_VECTOR);\n\n  // Creating a buffer for the additional uniform\n  float myUniform = 2.5f;\n  std::vector<float> uniformData = { myUniform };\n  vtkNew<vtkWebGPUComputeBuffer> uniformBuffer;\n  uniformBuffer->SetGroup(0);\n  uniformBuffer->SetBinding(1);\n  uniformBuffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::UNIFORM_BUFFER);\n  uniformBuffer->SetData(uniformData);\n  uniformBuffer->SetLabel(\"Uniform buffer\");\n  uniformBuffer->SetDataType(vtkWebGPUComputeBuffer::BufferDataType::STD_VECTOR);\n\n  // .... Add the uniformBuffer to a compute pass as usual\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Deprecation Warnings in Python\nDESCRIPTION: This Python code snippet shows how to ignore deprecation warnings using the `warnings` module. It filters out warnings of the `DeprecationWarning` category, preventing them from being displayed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Extraction Classes in CMake\nDESCRIPTION: Defines a list of VTK filter classes that are part of the FiltersExtraction module. These classes primarily handle various data extraction operations in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBlockSelector\n  vtkConvertSelection\n  vtkExpandMarkedElements\n  vtkExtractBlock\n  vtkExtractBlockUsingDataAssembly\n  vtkExtractCellsByType\n  vtkExtractDataArraysOverTime\n  vtkExtractDataOverTime\n  vtkExtractDataSets\n  vtkExtractExodusGlobalTemporalVariables\n  vtkExtractGeometry\n  vtkExtractGrid\n  vtkExtractLevel\n  vtkExtractParticlesOverTime\n  vtkExtractPolyDataGeometry\n  vtkExtractRectilinearGrid\n  vtkExtractSelectedArraysOverTime\n  vtkExtractSelectedRows\n  vtkExtractSelection\n  vtkExtractTensorComponents\n  vtkExtractTimeSteps\n  vtkExtractUnstructuredGrid\n  vtkExtractVectorComponents\n  vtkFrustumSelector\n  vtkHierarchicalDataExtractDataSets\n  vtkHierarchicalDataExtractLevel\n  vtkLocationSelector\n  vtkProbeSelectedLocations\n  vtkSelector\n  vtkValueSelector)\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Basic Logging with Loguru in C++\nDESCRIPTION: This code snippet demonstrates basic usage of the Loguru logging library in C++. It initializes the library, adds file outputs, sets stderr verbosity, and logs messages at different verbosity levels and with conditional checks.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <loguru.hpp>\n\n…\n\n// Optional, but useful to time-stamp the start of the log.\n// Will also detect verbosity level on command line as -v.\nloguru::init(argc, argv);\n\n// Put every log message in \"everything.log\":\nloguru::add_file(\"everything.log\", loguru::Append, loguru::Verbosity_MAX);\n\n// Only log INFO, WARNING, ERROR and FATAL to \"latest_readable.log\":\nloguru::add_file(\"latest_readable.log\", loguru::Truncate, loguru::Verbosity_INFO);\n\n// Only show most relevant things on stderr:\nloguru::g_stderr_verbosity = 1;\n\nLOG_SCOPE_F(INFO, \"Will indent all log messages within this scope.\");\nLOG_F(INFO, \"I'm hungry for some %.3f!\", 3.14159);\nLOG_F(2, \"Will only show if verbosity is 2 or higher\");\nVLOG_F(get_log_level(), \"Use vlog for dynamic log level (integer in the range 0-9, inclusive)\");\nLOG_IF_F(ERROR, badness, \"Will only show if badness happens\");\nauto fp = fopen(filename, \"r\");\nCHECK_F(fp != nullptr, \"Failed to open file '%s'\", filename);\nCHECK_GT_F(length, 0); // Will print the value of `length` on failure.\nCHECK_EQ_F(a, b, \"You can also supply a custom message, like to print something: %d\", a + b);\n\n// Each function also comes with a version prefixed with D for Debug:\nDCHECK_F(expensive_check(x)); // Only checked #if !NDEBUG\nDLOG_F(INFO, \"Only written in debug-builds\");\n\n// Turn off writing to stderr:\nloguru::g_stderr_verbosity = loguru::Verbosity_OFF;\n\n// Turn off writing err/warn in red:\nloguru::g_colorlogtostderr = false;\n\n// Throw exceptions instead of aborting on CHECK fails:\nloguru::set_fatal_handler([](const loguru::Message& message){\n\tthrow std::runtime_error(std::string(message.prefix) + message.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Options in TOML-like Format\nDESCRIPTION: Example of defining configuration options in a TOML-like format, including sections and various value types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_35\n\nLANGUAGE: toml\nCODE:\n```\n# Sections map to subcommands\n[subcommand]\nin_subcommand = Wow\nsub.subcommand = true\n\"sub\".\"subcommand2\" = \"string_value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK PLY Reader Texture UV Faces Test in CMake\nDESCRIPTION: This snippet sets up a test case for VTK's PLY reader, specifically for testing texture UV mapping with faces. It uses a textured square faces PLY file and a stacked VTK logos PNG image as input.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOPLYCxxTests tests\n  TestPLYReaderTextureUVFaces,TestPLYReaderTextureUV.cxx squareTexturedFaces.ply\n  two_vtk_logos_stacked.png\n)\n```\n\n----------------------------------------\n\nTITLE: Module Setup for VTK::CommonCore\nDESCRIPTION: Configures the VTK::CommonCore module properties including compilation features, linking, and managing include directories. Supported platforms are SunOS and Android, with threading and memory kind library dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::CommonCore\n  HEADER_DIRECTORIES\n  CLASSES           ${classes}\n  TEMPLATE_CLASSES  ${template_classes}\n  NOWRAP_TEMPLATE_CLASSES ${nowrap_template_classes}\n  SOURCES           ${sources}\n  TEMPLATES         ${templates}\n  HEADERS           ${headers}\n  NOWRAP_HEADERS    ${nowrap_headers}\n  PRIVATE_HEADERS   ${private_headers}\n  PRIVATE_TEMPLATES ${private_templates})\nvtk_add_test_mangling(VTK::CommonCore)\nif (vtk_include_dirs)\n  vtk_module_include(VTK::CommonCore\n    PRIVATE\n      ${vtk_include_dirs})\nendif ()\n\nvtk_module_link(VTK::CommonCore\n  PUBLIC\n    Threads::Threads\n    ${vtk_smp_libraries}\n    ${vtk_memkind_libraries}\n  PRIVATE\n    # Need nsl to resolve gethostbyname on SunOS-5.8 and socket also\n    $<$<PLATFORM_ID:SunOS>:socket>\n    $<$<PLATFORM_ID:SunOS>:nsl>\n    $<$<PLATFORM_ID:Android>:log>\n    )\nvtk_module_compile_features(VTK::CommonCore\n  PUBLIC\n    cxx_std_11)\n```\n\n----------------------------------------\n\nTITLE: ExprTk Control Structures and String Operations\nDESCRIPTION: Demonstration of control structures, loops, and string processing capabilities in ExprTk expressions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nwhile (x <= 100) { x -= 1; }\nx <= 'abc123' and (y in 'AString') or ('1x2y3z' != z)\n((x + 'abc') like '*123*') or ('a123b' ilike y)\nsgn(+1.2^3.4z / -5.6y) <= {-7.8^9 / -10.11x }\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom License for a VTK Module\nDESCRIPTION: This snippet demonstrates how to specify a custom license for a VTK module in the vtk.module file. It includes the license identifier, custom license file path, and license name.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/spdx_and_sbom.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSPDX_LICENSE_IDENTIFIER\n  LicenseRef-CustomLicense\nSPDX_CUSTOM_LICENSE_FILE\n  LICENSE\nSPDX_CUSTOM_LICENSE_NAME\n  CustomLicense\n```\n\n----------------------------------------\n\nTITLE: Adding Qt-based Examples\nDESCRIPTION: Conditionally includes additional Qt-based example directories when Qt support is available. Includes EasyView and CustomLinkView, with optional StatsView when SQL support is present.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::GUISupportQt AND TARGET VTK::ViewsQt)\n  add_subdirectory(EasyView)\n  add_subdirectory(CustomLinkView)\n  if (TARGET VTK::IOSQL AND TARGET VTK::FiltersStatistics)\n    add_subdirectory(StatsView)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Parsing Floating-Point Numbers with from_chars in C++\nDESCRIPTION: Basic function signatures for the from_chars functions that parse floating-point numbers from character sequences. These functions convert ASCII strings to float and double types with exact rounding.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nfrom_chars_result from_chars(char const *first, char const *last, float &value, ...);\nfrom_chars_result from_chars(char const *first, char const *last, double &value, ...);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Zlib Third-Party Module in CMake\nDESCRIPTION: This snippet configures the Zlib library as a third-party module for VTK. It defines both internal and external options, specifying license details, version information, and SPDX identifiers for the internal configuration, while setting up package targets for external usage.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkzlib/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"Zlib\"\n    SPDX_COPYRIGHT_TEXT\n      \"(C) 1995-2024 Jean-loup Gailly and Mark Adler\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/zlib.git@for/vtk-20240416-1.3.1\"\n    VERSION\n      \"1.3.1\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE ZLIB\n    TARGETS ZLIB::ZLIB\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Defining a Three-Array Worker Functor in C++\nDESCRIPTION: This code snippet demonstrates how to define a worker functor in C++ for handling three arrays of potentially different types.  The `operator()` is templated to accept different array types, allowing the dispatcher to call it with appropriate array combinations. This example is designed for use with the VTK array dispatch system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nstruct ThreeArrayWorker\n{\n  template <typename Array1T, typename Array2T, typename Array3T>\n  void operator()(Array1T *array1, Array2T *array2, Array3T *array3)\n  {\n  /* Do stuff... */\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Validator with Description in CLI11 (C++)\nDESCRIPTION: This code snippet demonstrates how to create a custom validator with a description, where the operation function is set later. It creates a validator with the provided description and an empty validator name.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nCLI::Validator(validator_description);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Accelerators VTKm Core C++ Tests with CUDA Support\nDESCRIPTION: This CMake snippet sets up C++ tests for VTK Accelerators VTKm Core, including special handling for CUDA. It configures test executables, sets source file properties for CUDA files, and applies specific CUDA flags and compiler options to address compatibility issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# We are splitting the tests into two executables to workaround an issue in\n# cuda. With all the tests in the same executable several tests are failing\n# in cuda. We have not identified the root cause of the problem yet.\nvtk_add_test_cxx(vtkAcceleratorsVTKmCoreCxxTests tests\n  TestVTKMDataArray.cxx,NO_VALID\n  TestVTKMImplicitDataArray.cxx,NO_VALID\n  )\n\nif (TARGET vtkm::cuda OR TARGET vtkm::kokkos_cuda)\n  foreach(src IN LISTS tests)\n    string(REPLACE \",\" \";\" src ${src})\n    list(GET src 0 src)\n\n    set_source_files_properties(${src} PROPERTIES LANGUAGE CUDA)\n  endforeach()\n\n  #the tests aren't scoped as a child directory of vtkAcceleratorsVTKmCore\n  #so we need to redo this logic\n  vtkm_get_cuda_flags(CMAKE_CUDA_FLAGS)\n\n  # Temporarily suppress \"has address taken but no possible call to it\" warnings,\n  # until we figure out its implications.\n  # We are disabling all warnings as nvlink has no known way to suppress\n  # individual warning types.\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\nendif()\n\nvtk_test_cxx_executable(vtkAcceleratorsVTKmCoreCxxTests tests)\n\nif (TARGET vtkm::cuda)\n  # When cuda is enabled VTK::AcceleratorsVTKmCore is built statically but with fpic\n  # enabled so the tests are also built with fpic enabled\n  set_target_properties(vtkAcceleratorsVTKmCoreCxxTests PROPERTIES\n    CUDA_ARCHITECTURES OFF\n    POSITION_INDEPENDENT_CODE ON\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building VTK for Android with CMake\nDESCRIPTION: This snippet describes how to configure CMake to build VTK for Android. It sets the `VTK_ANDROID_BUILD` option to `ON` to enable the Android-specific build configurations. The user should create a separate build directory, run CMake from that directory, set the flag, configure, and then generate the build files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/ReadMe.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n* Create a binary directory for VTK. Typically I will create vtkandroid next to my vtk source tree.\n\n* Run cmake on vtkandroid with -DVTK_ANDROID_BUILD=ON, if you use the gui add a\n* boolean entry with that name prior to configuring and set it on.\n\n* configure and generate as usual\n\n* Once done run ninja or make as appropriate\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Script Modifications\nDESCRIPTION: Commands for creating and formatting patches to contribute changes to the dashboard scripts. Includes branch creation and patch generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/dashboard.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b my-topic-branch\n$ git format-patch origin/dashboard\n```\n\n----------------------------------------\n\nTITLE: Building Block-Parallel Algorithms with DIY in C++\nDESCRIPTION: This C++ code snippet provides a basic DIY program illustrating the implementation of block-parallel algorithms. The program uses DIY's block structure, a master object, callback functions, and message exchanges to implement parallel computation across blocks using message passing. Dependencies include an MPI installation, such as MPICH. The block structure 'Block' holds local and average values, while functions 'enqueue_local' and 'average' handle the message exchange and data processing, respectively.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/vtkdiy2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n    // --- main program --- //\n\n    struct Block { float local, average; };             // define your block structure\n\n    Master master(world);                               // world = MPI_Comm\n    ...                                                 // populate master with blocks\n    master.foreach(&enqueue_local);                     // call enqueue_local() for each block\n    master.exchange();                                  // exchange enqueued data between blocks\n    master.foreach(&average);                           // call average() for each block\n\n    // --- callback functions --- //\n\n    // enqueue block data prior to exchanging it\n    void enqueue_local(Block* b,                        // current block\n                       const Proxy& cp)                 // communication proxy provides access to the neighbor blocks\n    {\n        for (size_t i = 0; i < cp.link()->size(); i++)  // for all neighbor blocks\n            cp.enqueue(cp.link()->target(i), b->local); // enqueue the data to be sent to this neighbor\n                                                        // block in the next exchange\n    }\n\n    // use the received data after exchanging it, in this case compute its average\n    void average(Block* b,                              // current block\n                 const Proxy& cp)                       // communication proxy provides access to the neighbor blocks\n    {\n        float x, average = 0;\n        for (size_t i = 0; i < cp.link()->size(); i++)  // for all neighbor blocks\n        {\n            cp.dequeue(cp.link()->target(i).gid, x);    // dequeue the data received from this\n                                                        // neighbor block in the last exchange\n            average += x;\n        }\n        b->average = average / cp.link()->size();\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Points Element with DataArray\nDESCRIPTION: This snippet shows how to define the Points element within a dataset, specifying coordinates through a DataArray element that includes number of components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n    <Points>\n      <DataArray NumberOfComponents=\"3\" .../>\n    </Points>\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Build\nDESCRIPTION: Commands to install the compiled VTK project using Ninja.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/VTK/build\n$ ninja install\n```\n\n----------------------------------------\n\nTITLE: Custom Getter/Setter Annotation in C++\nDESCRIPTION: Demonstrates how to annotate getter and setter functions with custom property names using VTK_MARSHALGETTER and VTK_MARSHALSETTER macros when function names don't match property names.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/marshalling_hints.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nVTK_MARSHALGETTER(property)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nVTK_MARSHALSETTER(property)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Return Paths in ExprTk Expressions in C++\nDESCRIPTION: Example showing how to work with expressions that have multiple exit paths, including both normal completion and return statement invocations. The code demonstrates checking if a return was invoked and processing the returned results.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_84\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\ntypedef exprtk::parser<double>       parser_t;\n\ndouble x = 100.0;\ndouble y = 200.0;\n\nsymbol_table_t symbol_table;\nexpression_t   expression;\nparser_t       parser;\n\nsymbol_table.add_variable (\"x\", x);\nsymbol_table.add_variable (\"y\", y);\n\nexpression.register_symbol_table(symbol_table);\n\nconst std::string expression_string =\n   \" for (var i := 0; i < 10; i += 1)       \"\n   \" {                                      \"\n   \"    if (i > x)                          \"\n   \"    {                                   \"\n   \"       return [x + y, 'return-call 1']; \"\n   \"    }                                   \"\n   \"    else if (i > y)                     \"\n   \"    {                                   \"\n   \"       return [x - y, 'return-call 2']; \"\n   \"    }                                   \"\n   \" };                                     \"\n   \"                                        \"\n   \" x / y                                  \";\n\nparser.compile(expression_str, expression);\n\nconst auto result = expression.value();\n\nif (expression.return_invoked())\n{\n   const auto results = expression.results();\n\n   for (std::size_t i = 0; i <  results.count(); ++i)\n   {\n      const auto& rtrn_result = results[i];\n      .\n      .\n      .\n   }\n}\nelse\n{\n   printf(\"result: %f\\n\",result);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verdict as VTK Third Party Module\nDESCRIPTION: Defines Verdict as a third-party module for VTK with both internal and external options. The configuration includes license information, version details, and target specifications for proper integration into the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkverdict/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright 2003,2006,2019 National Technology & Engineering Solutions of Sandia, LLC (NTESS).\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/verdict.git@for/vtk-20241230-1.4.2\"\n    VERSION\n      \"1.4.2\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE Verdict\n    TARGETS Verdict::verdict\n    VERSION       \"1.4.0\"\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Preparing a temporary directory for upstream content\nDESCRIPTION: This set of commands prepares a temporary directory (`xdmf2vtk-tmp`) to checkout the upstream xdmf2/vtk branch. It initializes a Git repository in the directory, pulls the `xdmf2vtk-upstream` branch, and then removes all files to prepare for the reduced content.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"mkdir xdmf2vtk-tmp\ncd xdmf2vtk-tmp\ngit init\ngit pull .. xdmf2vtk-upstream\nrm -rf *\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Geovis Module with GDAL\nDESCRIPTION: This CMake configuration sets up the VTK::GeovisGDAL module to work with GDAL for raster data processing. It finds the GDAL package, defines the relevant classes (vtkGDALRasterConverter, vtkGDALRasterReprojection, vtkRasterReprojectionFilter), adds the module, links it with the GDAL library, and ensures correct symbol mangling. Dependencies include the GDAL library and the VTK build system. The configuration is constrained to operate under shared builds when the library is private.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/GDAL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE GDAL)\n\nset(classes\n  vtkGDALRasterConverter\n  vtkGDALRasterReprojection\n  vtkRasterReprojectionFilter)\n\nvtk_module_add_module(VTK::GeovisGDAL\n  CLASSES ${classes})\nvtk_module_link(VTK::GeovisGDAL\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    GDAL::GDAL)\nvtk_add_test_mangling(VTK::GeovisGDAL)\n```\n\n----------------------------------------\n\nTITLE: MPI Initialization and Thread Support\nDESCRIPTION: This snippet explains how to request a maximum level of MPI thread support during initialization and notes the option to modify this behavior through the mpi4py.rc module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CHANGES.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nMPI_Init_thread(MPI_THREAD_MULTIPLE)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTX Schema for Parallel Processing\nDESCRIPTION: Defines classes, private classes, headers, and templates for VTX parallel schema, including various VTK-related schema components\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes_vtx vtkADIOS2VTXReader)\nset(private_classes_vtx\n  VTX/VTXSchemaManager\n  VTX/common/VTXDataArray\n  VTX/common/VTXHelper\n  VTX/schema/VTXSchema\n  VTX/schema/vtk/VTXvtkBase\n  VTX/schema/vtk/VTXvtkVTI\n  VTX/schema/vtk/VTXvtkVTU)\nset(private_headers_vtx VTX/common/VTXTypes.h)\nset(private_templates_vtx\n  VTX/common/VTXHelper.txx\n  VTX/schema/VTXSchema.txx\n  VTX/schema/vtk/VTXvtkVTI.txx\n  VTX/schema/vtk/VTXvtkVTU.txx)\n\nlist(APPEND classes   ${classes_vtx})\nlist(APPEND private_classes   ${private_classes_vtx})\nlist(APPEND private_headers   ${private_headers_vtx})\nlist(APPEND private_templates ${private_templates_vtx})\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Control and Creation in XdmfCore CMake\nDESCRIPTION: Sets up version control and creates version files if they don't exist or an update is requested. Uses the VersionCreate function to generate version information.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(VERSION_CONTROL_AUTOUPDATE OR\n    NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/XdmfVersion.hpp)\n  VersionCreate(\n    \"Xdmf\"\n    \"${XDMF_MAJOR_VERSION}\" \"${XDMF_MINOR_VERSION}\" \"${XDMF_PATCH_VERSION}\"\n    \"XDMFCORE_EXPORT\" \"XdmfCore.hpp\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factories in CMake\nDESCRIPTION: Declares object factories in a VTK project by specifying base and override classes, enabling customization of VTK object creation through these factories. This mechanism allows vtkPConnectivityFilter to override vtkConnectivityFilter and vtkPDistributedDataFilter to override vtkDistributedDataFilter.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkConnectivityFilter\n  OVERRIDE  vtkPConnectivityFilter)\nvtk_object_factory_declare(\n  BASE      vtkDistributedDataFilter\n  OVERRIDE  vtkPDistributedDataFilter)\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling in ExprTk Expression Compilation in C++\nDESCRIPTION: Example showing basic error handling when compiling an ExprTk expression. If compilation fails, the code retrieves and displays the error message.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_85\n\nLANGUAGE: C++\nCODE:\n```\nif (!parser.compile(expression_string,expression))\n{\n   printf(\"Error: %s\\n\", parser.error().c_str());\n   return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Time Step Update Example\nDESCRIPTION: Example showing how to request a particular time step from a time source using the new API.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvtkNew<vtkExodusIIReader> reader;\n// Set properties here\nreader->UpdateTimeStep(0.5);\n// or\nreader->UpdateTimeStep(0.5, 1, 2, 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Source Classes for VTK Filters\nDESCRIPTION: This code snippet initializes a list of VTK classes related to various sources such as shapes, polydata, and grids. These classes are configured in a CMake variable for further use in building the VTK module. It is essential for various geometric and graphical operations in VTK. There are no specific input parameters, as the snippet just sets up a list of classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkArcSource\n  vtkArrowSource\n  vtkButtonSource\n  vtkCellTypeSource\n  vtkConeSource\n  vtkCubeSource\n  vtkCylinderSource\n  vtkDiagonalMatrixSource\n  vtkDiskSource\n  vtkEllipseArcSource\n  vtkEllipticalButtonSource\n  vtkFrustumSource\n  vtkGlyphSource2D\n  vtkGoldenBallSource\n  vtkGraphToPolyData\n  vtkHandleSource\n  vtkHyperTreeGridPreConfiguredSource\n  vtkHyperTreeGridSource\n  vtkLineSource\n  vtkOutlineCornerFilter\n  vtkOutlineCornerSource\n  vtkOutlineSource\n  vtkParametricFunctionSource\n  vtkPartitionedDataSetSource\n  vtkPartitionedDataSetCollectionSource\n  vtkPlaneSource\n  vtkPlatonicSolidSource\n  vtkPointHandleSource\n  vtkPointSource\n  vtkPolyLineSource\n  vtkPolyPointSource\n  vtkProgrammableDataObjectSource\n  vtkProgrammableSource\n  vtkRandomHyperTreeGridSource\n  vtkRectangularButtonSource\n  vtkRegularPolygonSource\n  vtkSelectionSource\n  vtkSpatioTemporalHarmonicsSource\n  vtkSphereSource\n  vtkSuperquadricSource\n  vtkTessellatedBoxSource\n  vtkTextSource\n  vtkTexturedSphereSource\n  vtkUniformHyperTreeGridSource)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK IOODBC Classes\nDESCRIPTION: This snippet defines a list of C++ classes that belong to the VTK::IOODBC module. These classes, vtkODBCDatabase and vtkODBCQuery, are related to database connectivity using ODBC.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkODBCDatabase\n  vtkODBCQuery)\n```\n\n----------------------------------------\n\nTITLE: TriangulateIds Function Implementation\nDESCRIPTION: New function that only returns the triangulated global ids, allowing for improved performance by avoiding unnecessary data allocation of point coordinates.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef TriangulateIds(ids):\n    # New implementation returns only triangulated global ids\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running WebGPU Tests\nDESCRIPTION: This shell command is used to execute the VTK tests related to WebGPU rendering functionalities to ensure the implemented features work correctly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./bin/vtkRenderingWebGPUCxxTests\n```\n\n----------------------------------------\n\nTITLE: Supporting Both External and Embedded JSON Libraries in CMake\nDESCRIPTION: Two-file CMake pattern demonstrating how to make your project support either an externally supplied JSON library or an embedded one based on a configuration option.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\n# Top level CMakeLists.txt\nproject(FOO)\n...\noption(FOO_USE_EXTERNAL_JSON \"Use an external JSON library\" OFF)\n...\nadd_subdirectory(thirdparty)\n...\nadd_library(foo ...)\n...\n# Note that the namespaced target will always be available regardless of the\n# import method\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# thirdparty/CMakeLists.txt\n...\nif(FOO_USE_EXTERNAL_JSON)\n  find_package(nlohmann_json 3.2.0 REQUIRED)\nelse()\n  set(JSON_BuildTests OFF CACHE INTERNAL \"\")\n  add_subdirectory(nlohmann_json)\nendif()\n...\n```\n\n----------------------------------------\n\nTITLE: Serving VTK WebAssembly Code with Python\nDESCRIPTION: The snippet shows how to serve the compiled VTK WebAssembly code using a Python server. `server.py`, included in the directory, configures necessary HTTP headers to enable `SharedArrayBuffer` usage in supported browsers, which is essential for running WebAssembly code in a web worker context.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/AsyncClipper/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncd out/build\npython3 ./server.py\n```\n\n----------------------------------------\n\nTITLE: Reading JSON from streams in C++\nDESCRIPTION: This snippet shows how to deserialize and serialize JSON objects using standard input/output streams or file streams in C++. It also demonstrates pretty printing the JSON output.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// deserialize from standard input\njson j;\nstd::cin >> j;\n\n// serialize to standard output\nstd::cout << j;\n\n// the setw manipulator was overloaded to set the indentation for pretty printing\nstd::cout << std::setw(4) << j << std::endl;\n\n// read a JSON file\nstd::ifstream i(\"file.json\");\njson j;\ni >> j;\n\n// write prettified JSON to another file\nstd::ofstream o(\"pretty.json\");\no << std::setw(4) << j << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Building Dawn with CMake and Ninja\nDESCRIPTION: This shell script snippet details the process of building and installing Dawn using CMake and Ninja, which is required for VTK to support WebGPU by linking Dawn's implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B out/Debug -GNinja -DDAWN_FETCH_DEPENDENCIES=ON -DDAWN_ENABLE_INSTALL=ON\ncmake --build out/Debug\ncmake --install out/Debug --prefix /path/to/install/dawn\n```\n\n----------------------------------------\n\nTITLE: Rectilinear Grid Dataset Format in VTK\nDESCRIPTION: Format for rectilinear grid datasets with regular topology and semi-regular geometry aligned along coordinate axes. Includes dimensions and coordinate lists.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nDATASET RECTILINEAR_GRID\nDIMENSIONS nx ny nz\nX_COORDINATES nx dataType\nx0 x1 ... x(nx-1)\nY_COORDINATES ny dataType\ny0 y1 ... y(ny-1)\nZ_COORDINATES nz dataType\nz0 z1 ... z(nz-1)\n```\n\n----------------------------------------\n\nTITLE: Excluding Properties with Marshalling Hints in C++\nDESCRIPTION: Example showing how to exclude properties from serialization using the VTK_MARSHALEXCLUDE macro with specific reason codes for internal or unsupported properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/marshalling_hints.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nVTK_MARSHALEXCLUDE(VTK_MARSHAL_EXCLUDE_REASON_IS_INTERNAL)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nVTK_MARSHALEXCLUDE(VTK_MARSHAL_EXCLUDE_REASON_NOT_SUPPORTED)\n```\n\n----------------------------------------\n\nTITLE: Activating a Named Validator in CLI11 (C++)\nDESCRIPTION: This snippet activates a validator previously defined with a name. The `get_validator` method retrieves the validator by its name, and then `active()` is called to enable it, making the validator's check effective.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nopt->get_validator(\"range\")->active();\n```\n\n----------------------------------------\n\nTITLE: ExprTk If-Else Conditional Structures\nDESCRIPTION: Examples of various if-else statement formats in ExprTk, ranging from simple one-line conditionals to more complex nested structures with code blocks.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_6\n\nLANGUAGE: ExprTk\nCODE:\n```\nif (x > y) z; else w;\nif (x > y) z; else if (w != u) v;\nif (x < y) { z; w + 1; } else u;\nif ((x != y) and (z > w))\n{\n  y := sin(x) / u;\n  z := w + 1;\n}\nelse if (x > (z + 1))\n{\n  w := abs (x - y) + z;\n  u := (x + 1) > 2y ? 2u : 3u;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Problematic Custom JSON Serializer with Infinite Recursion\nDESCRIPTION: This snippet shows a flawed custom serializer implementation that can cause stack overflow due to infinite recursion. It occurs because the serializer calls itself indirectly through the BasicJsonType's json_serializer.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T, void>\nstruct bad_serializer\n{\n    template <typename BasicJsonType>\n    static void to_json(BasicJsonType& j, const T& value) {\n      // this calls BasicJsonType::json_serializer<T>::to_json(j, value);\n      // if BasicJsonType::json_serializer == bad_serializer ... oops!\n      j = value;\n    }\n\n    template <typename BasicJsonType>\n    static void to_json(const BasicJsonType& j, T& value) {\n      // this calls BasicJsonType::json_serializer<T>::from_json(j, value);\n      // if BasicJsonType::json_serializer == bad_serializer ... oops!\n      value = j.template get<T>(); // oops!\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for QtVTKRenderWindows\nDESCRIPTION: This CMake script sets up a project named QtVTKRenderWindows, ensuring that the VTK and Qt packages are located and ready for use. It specifies required components for VTK and checks their availability. Additionally, it sets automatic processing for Qt Meta-Object Compiler (moc) and User Interface Compiler (uic). The script defines several source, header, and UI files and links necessary libraries to the target executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/FourPaneViewer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(QtVTKRenderWindows)\n\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    GUISupportQt\n    IOImage\n    ImagingColor\n    ImagingGeneral\n    InteractionImage\n    InteractionStyle\n    InteractionWidgets)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\n# Set your files and resources here\nset(Srcs\n  QtVTKRenderWindowsApp.cxx\n  QtVTKRenderWindows.cxx)\n\nset(Hdrs\n  QtVTKRenderWindows.h)\n\nset(UIs\n  QtVTKRenderWindows.ui)\n\n# Instruct CMake to run moc automatically when needed.\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\n\n# CMAKE_AUTOMOC in ON so the MocHdrs will be automatically wrapped.\nadd_executable(QtVTKRenderWindows\n  ${Srcs} ${Hdrs} ${UIs})\ntarget_link_libraries(QtVTKRenderWindows\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS QtVTKRenderWindows\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package\nDESCRIPTION: Finds the VTK package and specifies the required components. This command searches for the VTK library and its components, making them available for linking in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(VTK\\n  COMPONENTS\\n    CommonColor\\n    FiltersGeneral\\n    FiltersSources\\n    InteractionStyle\\n    InteractionWidgets\\n    RenderingOpenGL2\\n    RenderingUI)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of fast_float Parsing in C++\nDESCRIPTION: A complete example demonstrating how to parse a floating-point number from a string using the fast_float library. It shows the basic error handling and result processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  std::string input = \"3.1416 xyz \";\n  double result;\n  auto answer = fast_float::from_chars(input.data(), input.data() + input.size(), result);\n  if (answer.ec != std::errc()) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n  std::cout << \"parsed the number \" << result << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing In-Source Builds for HDF5\nDESCRIPTION: Checks if the source and binary directories are the same, and if so, throws a fatal error to prevent in-source builds. Provides instructions for creating a separate build directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    message (FATAL_ERROR \"\\nERROR! ${PROJECT_NAME} DOES NOT SUPPORT IN SOURCE BUILDS!\\n\"\n      \"CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}\"\n      \" == CMAKE_CURRENT_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}\\n\"\n      \"NEXT STEPS:\\n\"\n      \"(1) Delete the CMakeCache.txt file and the CMakeFiles/ directory\\n\"\n      \"     under the source directory for ${PROJECT_NAME}, otherwise you\\n\"\n      \"     will not be able to configure ${PROJECT_NAME} correctly!\\n\"\n      \"      * For example, on linux machines do:\\n\"\n      \"        $ rm -r CMakeCache.txt CMakeFiles/\\n\"\n      \"(2) Create a different directory and configure ${PROJECT_NAME} in that directory.\\n\"\n      \"      * For example, on linux machines do:\\n\"\n      \"        $ mkdir MY_BUILD\\n\"\n      \"        $ cd MY_BUILD\\n\"\n      \"        $ cmake [OPTIONS] ..\\n\"\n      )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters Modeling Classes in CMake\nDESCRIPTION: This snippet defines a list of VTK filter classes related to modeling operations. These classes include various subdivision filters, contour filters, extrusion filters, and other geometric processing tools.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAdaptiveSubdivisionFilter\n  vtkBandedPolyDataContourFilter\n  vtkButterflySubdivisionFilter\n  vtkCollisionDetectionFilter\n  vtkContourLoopExtraction\n  vtkCookieCutter\n  vtkDijkstraGraphGeodesicPath\n  vtkDijkstraImageGeodesicPath\n  vtkFillHolesFilter\n  vtkFitToHeightMapFilter\n  vtkGeodesicPath\n  vtkGraphGeodesicPath\n  vtkHausdorffDistancePointSetFilter\n  vtkHyperTreeGridOutlineFilter\n  vtkImageDataOutlineFilter\n  vtkImprintFilter\n  vtkLinearCellExtrusionFilter\n  vtkLinearExtrusionFilter\n  vtkLinearSubdivisionFilter\n  vtkLoopSubdivisionFilter\n  vtkOutlineFilter\n  vtkPolyDataPointSampler\n  vtkProjectedTexture\n  vtkQuadRotationalExtrusionFilter\n  vtkRibbonFilter\n  vtkRotationalExtrusionFilter\n  vtkRuledSurfaceFilter\n  vtkSectorSource\n  vtkSelectEnclosedPoints\n  vtkSelectPolyData\n  vtkSpherePuzzle\n  vtkSpherePuzzleArrows\n  vtkSubdivideTetra\n  vtkTrimmedExtrusionFilter\n  vtkVolumeOfRevolutionFilter)\n```\n\n----------------------------------------\n\nTITLE: VTK File Version Header\nDESCRIPTION: Required first line of a VTK file that specifies the file version. Must match exactly with only the version number varying.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvtk DataFile Version x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK PLY Reader Texture UV Points Test in CMake\nDESCRIPTION: This snippet sets up a test case for VTK's PLY reader, specifically for testing texture UV mapping with points. It uses a textured square PLY file and a VTK PNG image as input.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOPLYCxxTests tests\n  TestPLYReaderTextureUVPoints,TestPLYReaderTextureUV.cxx squareTextured.ply\n  vtk.png\n)\n```\n\n----------------------------------------\n\nTITLE: Representation of Special VTK Types in Python\nDESCRIPTION: Example showing how special VTK types are represented when using repr() and str() functions. The repr() displays the type name followed by the str() output in parentheses.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>> v = vtkVariant()\n>> print(repr(v))\nvtkmodules.vtkCommonCore.vtkVariant((invalid))\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and C++ Standard for VTK\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.12 and enforces the C++11 standard if not defined. It ensures compatibility across build environments by setting necessary standards and version constraints for VTK-based projects.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): Let VTK dictate version constraints.\\ncmake_minimum_required(VERSION 3.12)\\nendif()\\n\\nif(NOT DEFINED CMAKE_CXX_STANDARD)\\n  set(CMAKE_CXX_STANDARD 11)\\n  set(CMAKE_CXX_STANDARD_REQUIRED True)\\n  set(CMAKE_CXX_EXTENSIONS FALSE)\\nelseif(CMAKE_CXX_STANDARD LESS 11)\\n  set(CMAKE_CXX_STANDARD 11)\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement in ExprTk (C++)\nDESCRIPTION: Demonstrates the use of a function-based conditional statement in ExprTk, showing how to use the if-statement for conditional assignment.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nx := if (y < z, y + 1, 2 * z)\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package and Dependencies\nDESCRIPTION: This snippet uses `find_package` to locate the VTK library and specifies the required components. It also checks if VTK was found, and if not, it skips the example. The listed components are essential for data handling, filtering, and rendering in VTK applications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/AMR/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonDataModel\n    FiltersExtraction\n    FiltersGeometry\n    FiltersSources\n    IOLegacy\n    IOXML\n    RenderingCore\n    TestingCore)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Old vtkPlotPoints::GetNearestPoint Method Signature in C++\nDESCRIPTION: The previous method signature for vtkPlotPoints::GetNearestPoint which accepts a point, tolerance, and location parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/changes_8.3/GetNearestPoint.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkPlotPoints::GetNearestPoint(const vtkVector2f& point, const vtkVector2f& tol, vtkVector2f* location)\n```\n\n----------------------------------------\n\nTITLE: Finding the MySQL Package\nDESCRIPTION: This snippet uses the `vtk_module_find_package` macro to locate the MySQL package.  The `PRIVATE_IF_SHARED` option means that the dependency is private if the module is built as a shared library. The `PACKAGE MySQL` argument specifies that the CMake `find_package` command should be used to locate MySQL.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE MySQL)\n```\n\n----------------------------------------\n\nTITLE: Building LZ4 - Installation using Makefile - C\nDESCRIPTION: Instructions for compiling and installing the LZ4 library using a Makefile. The make commands allow users to build the library from source and install it, which may require root permissions depending on the user's environment. The Makefile supports standard conventions for installation and can be used in parallel builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake\nmake install     # this command may require root permissions\n```\n\n----------------------------------------\n\nTITLE: Prevent In-Source Builds\nDESCRIPTION: Checks if the binary directory is the same as the source directory and throws a fatal error if they are the same. Android projects with VTK do not support in-source builds, so this prevents a misconfiguration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_BINARY_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n  message(FATAL_ERROR \"VTK Android does not support in-source builds :) .\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target named WrappedAsyncClipper using the specified source files. It also defines the C++ standard and links against the VTK libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_executable(WrappedAsyncClipper WrappedAsyncClipper.cxx WrappedAsyncClipper.h)\\ntarget_compile_features(WrappedAsyncClipper PRIVATE cxx_std_14) # for initialized lambda captures\\ntarget_link_libraries(WrappedAsyncClipper PRIVATE ${VTK_LIBRARIES})\"\n```\n\n----------------------------------------\n\nTITLE: Adding VTK CXX Tests\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` CMake macro to define a test suite for programmable filters.  It specifies the test suite name, source files, and a flag to indicate whether validation is required. The macro is used to create a named test which runs the specified C++ source files within the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersProgrammableCxxTests tests\n  TestProgrammableFilter.cxx,NO_VALID\n  TestProgrammableGlyph.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Invoking Methods on Registered Objects in vtkObjectManager (C++)\nDESCRIPTION: This function allows invoking methods on registered objects in vtkObjectManager. It takes an identifier, method name, and JSON arguments, and returns the result as JSON. This enables dynamic method calls on VTK objects managed by vtkObjectManager.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-object-manager-invoke-method.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnlohmann::json vtkObjectManager::Invoke(vtkTypeUInt32 identifier, const std::string& methodName, const nlohmann::json& args)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using a Custom Unknown Symbol Resolver\nDESCRIPTION: Demonstrates how to register and use a custom Unknown Symbol Resolver with the ExprTk parser, including registering the necessary symbol tables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_69\n\nLANGUAGE: cpp\nCODE:\n```\nT x = T(123.456);\nT y = T(789.123);\n\nsymbol_table_t unknown_var_symbol_table;\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\nsymbol_table.add_variable(\"y\",y);\n\nexpression_t expression;\nexpression.register_symbol_table(unknown_var_symbol_table);\nexpression.register_symbol_table(symbol_table);\n\nmy_usr<T> musr;\n\nparser_t parser;\nparser.enable_unknown_symbol_resolver(&musr);\n\nstd::string expression_str = \"var_x + abs(var_y - 3) * var_z\";\n\nparser.compile(expression_str,expression);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MultiBlock CMake Project\nDESCRIPTION: Sets up a CMake project for building a VTK MultiBlock example. Configures minimum CMake version, finds VTK package with required components, and sets up the executable with proper linking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/MultiBlock/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(MultiBlock)\n\nfind_package(VTK\n  COMPONENTS\n    FiltersGeneral\n    FiltersGeometry\n    FiltersSources\n    IOXML\n    RenderingCore\n    TestingCore)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nadd_executable(MultiBlock MACOSX_BUNDLE MultiBlock.cxx)\ntarget_link_libraries(MultiBlock\n  PRIVATE\n    ${VTK_LIBRARIES})\nvtk_module_autoinit(\n  TARGETS MultiBlock\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Structured Grid Dataset Format in VTK\nDESCRIPTION: Format specification for structured grid datasets with explicit point coordinates. Supports 1D, 2D, and 3D data with dimensions and point coordinates.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDATASET STRUCTURED_GRID\nDIMENSIONS nx ny nz\nPOINTS n dataType\np0x p0y p0z\np1x p1y p1z\n...\np(n-1)x p(n-1)y p(n-1)z\n```\n\n----------------------------------------\n\nTITLE: Serializing VTK_PYRAMID and VTK_WEDGE\nDESCRIPTION: This snippet illustrates how VTK_PYRAMID and VTK_WEDGE cell types are serialized into Conduit nodes, detailing the storage of shape information within the topologies hierarchy.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/conduitPyramidWedgeSupport.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\" - \\\"topologies/mesh/elements/shape\\\" = \\\"pyramid\\\"\\n - \\\"topologies/mesh/elements/shape\\\" = \\\"wedge\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Integrating WebGPU Compute Pipeline with VTK Rendering Pipeline\nDESCRIPTION: This snippet demonstrates how to add a render buffer to a compute pass and integrate a compute pipeline with a VTK WebGPU renderer. It shows how to configure the compute pipeline to execute either before or after the rendering process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvtkSmartPointer<vtkWebGPUComputePass> myComputePass = myComputePipeline->CreateComputePass()\nmyComputePass->AddRenderBuffer(pointColorsRenderBuffer);\n\nvtkWebGPURenderer* wegpuRenderer = vtkWebGPURenderer::SafeDownCast(renWin->GetRenderers()->GetFirstRenderer());\n\n// The compute pipeline will execute **before** rendering a frame.\n// Using AddPostRenderComputePipeline() will have the pipeline execute after\n// a frame is rendered\nwegpuRenderer->AddPreRenderComputePipeline(myComputePipeline);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Loop Runtime Check with Timeout in C++\nDESCRIPTION: Implementation of a custom loop runtime check (LRTC) that implements timeout functionality. The check method verifies if the current time exceeds a specified timeout and throws a runtime error if the loop has executed for too long.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_103\n\nLANGUAGE: C++\nCODE:\n```\nstruct timeout_loop_rtc final : exprtk::loop_runtime_check\n{\n   using time_point_t =\n      std::chrono::time_point<std::chrono::steady_clock>;\n\n   std::size_t iterations_ = 0;\n   time_point_t timeout_tp_;\n\n   bool check() override\n   {\n      if (std::chrono::steady_clock::now() >= timeout_tp_)\n      {\n         // handle_runtime_violation shall be invoked\n         return false;\n      }\n\n      return true;\n   }\n\n   void handle_runtime_violation\n      (const exprtk::violation_context&) override\n   {\n      throw std::runtime_error(\"Loop timed out\");\n   }\n\n   void set_timeout_time(const time_point_t& timeout_tp)\n   {\n      timeout_tp_ = timeout_tp;\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: WebGPU VTK Class Definitions\nDESCRIPTION: Defines a comprehensive list of WebGPU-related classes for rendering and computational operations in VTK\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkWebGPUActor\n  vtkWebGPUBatchedPolyDataMapper\n  vtkWebGPUCamera\n  ...\n  vtkWebGPUTextureView)\n```\n\n----------------------------------------\n\nTITLE: Initializing Symbol Tables and Expression Compilation in C++\nDESCRIPTION: Demonstrates the setup of symbol tables for constants, functions, and variables, followed by expression compilation and evaluation. Shows how to register multiple symbol tables with an expression instance.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_65\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\n\n// Setup global constants symbol table\nsymbol_table_t glbl_const_symbol_table;\nglbl_const_symbtab.add_constants(); // pi, epsilon and inf\nglbl_const_symbtab.add_constant(\"speed_of_light\",299e6);\nglbl_const_symbtab.add_constant(\"avogadro_number\",6e23);\n\n// Setup global function symbol table\nsymbol_table_t glbl_funcs_symbol_table;\nglbl_func_symbtab.add_function('distance',distance);\nglbl_func_symbtab.add_function('calc_spherevol',calc_sphrvol);\n\n// Setup global variable symbol table\nsymbol_table_t glbl_variable_symbol_table;\nglbl_variable_symbtab.add_variable('temp_outside',thermo.outside);\nglbl_variable_symbtab.add_variable('temp_inside' ,thermo.inside );\nglbl_variable_symbtab.add_variable('num_cstmrs',store.num_cstmrs);\n\ndouble x,y,z;\n\n// Setup expression specific symbol table\nsymbol_table_t symbol_table;\nsymbol_table.add_variable('x',x);\nsymbol_table.add_variable('y',y);\nsymbol_table.add_variable('z',z);\n\nexpression_t expression;\n\n// Register the various symbol tables\nexpression\n   .register_symbol_table(symbol_table);\n\nexpression\n   .register_symbol_table(glbl_funcs_symbol_table);\n\nexpression\n   .register_symbol_table(glbl_const_symbol_table);\n\nexpression\n   .register_symbol_table(glbl_variable_symbol_table);\n\nconst std::string expression_str =\n   \"abs(temp_inside - temp_outside) + 2 * speed_of_light / x\";\n\nparser_t parser;\nparser.compile(expression_str,expression);\n\nwhile (keep_evaluating)\n{\n  T result = expression.value();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Inequality Operators in ExprTk Parser (C++)\nDESCRIPTION: Shows how to enable or disable all inequality operators at once, as well as enabling/disabling specific inequality operators like less-than.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_78\n\nLANGUAGE: C++\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nparser.settings().disable_all_inequality_ops();\n\nparser\n   .compile(\"1 < 3\",expression); // compilation failure\n\nparser.settings().enable_all_inequality_ops();\n\nparser\n   .compile(\"1 < 3\",expression); // compilation success\n\n// Disabling specific inequality operator\nparser.settings()\n   .disable_inequality_operation(settings_t::e_ineq_lt);\n\nparser\n   .compile(\"1 < 3\",expression); // failure\n\nparser.settings()\n   .enable_inequality_operation(settings_t::e_ineq_lt);\n\nparser\n   .compile(\"1 < 3\",expression); // success\n```\n\n----------------------------------------\n\nTITLE: Using Dependent Entity Collector in ExprTk\nDESCRIPTION: Demonstrates how to use the Dependent Entity Collector (DEC) in ExprTk to analyze expression dependencies. This includes collecting variables, functions, and assignments used in an expression.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_63\n\nLANGUAGE: C++\nCODE:\n```\ntypedef typename parser_t::\n   dependent_entity_collector::symbol_t symbol_t;\n\nconst std::string expression_string =\n   \"z := abs(x + sin(2 * pi / y))\";\n\nT x,y,z;\n\nparser_t parser;\nsymbol_table_t symbol_table;\n\nsymbol_table.add_variable(\"x\",x);\nsymbol_table.add_variable(\"y\",y);\nsymbol_table.add_variable(\"z\",z);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\n// Collect only variable and function symbols\nparser.dec().collect_variables() = true;\nparser.dec().collect_functions() = true;\n\nif (!parser.compile(expression_string,expression))\n{\n   // error....\n}\n\nstd::deque<symbol_t> symbol_list;\n\nparser.dec().symbols(symbol_list);\n\nfor (std::size_t i = 0; i < symbol_list.size(); ++i)\n{\n   const symbol_t& symbol = symbol_list[i];\n\n   switch (symbol.second)\n   {\n      case parser_t::e_st_variable : ... break;\n      case parser_t::e_st_vector   : ... break;\n      case parser_t::e_st_string   : ... break;\n      case parser_t::e_st_function : ... break;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Context on Linux in VTK\nDESCRIPTION: This snippet describes how VTK on Linux (and other GLX-based platforms) now requests `GLX_CONTEXT_PROFILE_MASK_ARB` and `GLX_CONTEXT_CORE_PROFILE_BIT_ARB` when creating an OpenGL rendering context. This allows for specifying a core profile context, potentially improving compatibility and performance. No code is provided, only a description of the behavior.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Factory Overrides for OpenGL Components\nDESCRIPTION: Sets up factory overrides to replace base VTK classes with their OpenGL-specific implementations. This mechanism allows VTK to use the proper renderer based on the available graphics implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# setup factory overrides\nset(opengl_overrides\n  CellGridMapper\n)\n\nforeach (opengl_override IN LISTS opengl_overrides)\n  vtk_object_factory_declare(\n    BASE \"vtk${opengl_override}\"\n    OVERRIDE \"vtkOpenGL${opengl_override}\")\nendforeach ()\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGCELLGRID_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting VTK ImagingCore Classes\nDESCRIPTION: This snippet defines a list of VTK classes that will be part of the VTK::ImagingCore module. The list includes various image processing filters, interpolators, and sources.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAbstractImageInterpolator\n  vtkExtractVOI\n  vtkGenericImageInterpolator\n  vtkImageAppendComponents\n  vtkImageBlend\n  vtkImageBSplineCoefficients\n  vtkImageBSplineInternals\n  vtkImageBSplineInterpolator\n  vtkImageCacheFilter\n  vtkImageCast\n  vtkImageChangeInformation\n  vtkImageClip\n  vtkImageConstantPad\n  vtkImageDataStreamer\n  vtkImageDecomposeFilter\n  vtkImageDifference\n  vtkImageExtractComponents\n  vtkImageFlip\n  vtkImageInterpolator\n  vtkImageIterateFilter\n  vtkImageMagnify\n  vtkImageMapToColors\n  vtkImageMask\n  vtkImageMirrorPad\n  vtkImagePadFilter\n  vtkImagePermute\n  vtkImagePointDataIterator\n  vtkImagePointIterator\n  vtkImageProbeFilter\n  vtkImageResample\n  vtkImageResize\n  vtkImageReslice\n  vtkImageResliceToColors\n  vtkImageShiftScale\n  vtkImageShrink3D\n  vtkImageSincInterpolator\n  vtkImageStencilAlgorithm\n  vtkImageStencilData\n  vtkImageStencilIterator\n  vtkImageStencilSource # Needed by vtkImageStencilData\n  vtkImageSSIM\n  vtkImageThreshold\n  vtkImageTranslateExtent\n  vtkImageWrapPad\n  vtkRTAnalyticSource)\n```\n\n----------------------------------------\n\nTITLE: Find VTK Package\nDESCRIPTION: Finds the VTK package and specifies the required components. It uses `find_package` to locate VTK and its dependencies, and requires the listed rendering and interaction modules. The `include` command then imports VTK's use file to set up compiler flags and library paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK COMPONENTS\n  vtkInteractionStyle\n  vtkRenderingOpenGL2\n  vtkRenderingVolumeOpenGL2\n  vtkRenderingFreeType\n)\ninclude(${VTK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Preserving Original Value for Out-of-Range Results in C++\nDESCRIPTION: Pattern for preserving the original value when an out-of-range error occurs during parsing. This technique allows users to ignore out-of-range values rather than accepting zeros or infinities.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n  double old_result = result; // make copy\n  auto r = fast_float::from_chars(start, end, result);\n  if (r.ec == std::errc::result_out_of_range) { result = old_result; }\n```\n\n----------------------------------------\n\nTITLE: Using Constant Array Implementation\nDESCRIPTION: Shows usage of the pre-packed vtkConstantArray implementation with a constant value of 42.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvtkNew<vtkConstantArray<int>> arr42;\narr42->ConstructBackend(42);\narr42->SetNumberOfComponents(1);\narr42->SetNumberOfTuples(100);\nCHECK(arr42->GetValue(77) == 42); // always true\n```\n\n----------------------------------------\n\nTITLE: Configuring libxml2 Command-line Programs in CMake\nDESCRIPTION: Sets up build targets for the libxml2 command-line utilities (xmlcatalog and xmllint) when program building is enabled. Configures the executables, links them with required libraries, and sets up installation targets.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(LIBXML2_WITH_PROGRAMS)\n    set(\n        PROGRAMS\n        xmlcatalog\n        xmllint\n    )\n    foreach(PROGRAM ${PROGRAMS})\n        add_executable(${PROGRAM} ${PROGRAM}.c)\n        add_executable(LibXml2::${PROGRAM} ALIAS ${PROGRAM})\n        target_compile_definitions(${PROGRAM} PRIVATE SYSCONFDIR=\"${CMAKE_INSTALL_FULL_SYSCONFDIR}\")\n        target_link_libraries(${PROGRAM} LibXml2)\n        if(HAVE_LIBHISTORY)\n            target_link_libraries(${PROGRAM} history)\n        endif()\n        if(HAVE_LIBREADLINE)\n            target_link_libraries(${PROGRAM} readline)\n        endif()\n        install(TARGETS    ${PROGRAM} EXPORT LibXml2 RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT programs)\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebGPU Support for Emscripten\nDESCRIPTION: Conditionally sets WebGPU usage based on the target system, disabling for Emscripten platforms\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(VTK_USE_DAWN_WEBGPU OFF)\nelse ()\n  set(VTK_USE_DAWN_WEBGPU ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Label Text for Camera Orientation Buttons in VTK C++\nDESCRIPTION: Methods for customizing the text displayed on the six directional buttons of a vtkCameraOrientationRepresentation. These setter functions allow changing the labels for positive and negative X, Y, and Z directions, following VTK's naming conventions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-getter-setter-for-camera-orientation-widget-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkCameraOrientationRepresentation::SetXPlusLabelText(const std::string& label)\nvtkCameraOrientationRepresentation::SetXMinusLabelText(const std::string& label)\nvtkCameraOrientationRepresentation::SetYPlusLabelText(const std::string& label)\nvtkCameraOrientationRepresentation::SetYMinusLabelText(const std::string& label)\nvtkCameraOrientationRepresentation::SetZPlusLabelText(const std::string& label)\nvtkCameraOrientationRepresentation::SetZMinusLabelText(const std::string& label)\n```\n\n----------------------------------------\n\nTITLE: PLY Reader API Change\nDESCRIPTION: Changes to the vtkPLY reader function signatures to use new vtkResourceStream IO system instead of standard streams.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid(vtkResourceParser*, int, int*, unsigned int*, double*)\nPlyFile*(vtkResourceStream*, int*, char***)\nvoid(vtkResourceParser* is, std::vector<char*>* words, char line_words[], char orig_line[])\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingOpenGL Module Header\nDESCRIPTION: Generates a module-specific configuration header file that contains the compile-time settings for the RenderingOpenGL2 module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure the module specific settings into a module configured header.\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkRenderingOpenGLConfigure.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkRenderingOpenGLConfigure.h\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Component-based Array with vtkImplicitArray\nDESCRIPTION: Demonstrates an implicit array using map and mapComponent methods for component-wise data access.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct ConstComponentStruct\n{\n  int Tuple[3] = { 0, 0, 0 };\n\n  ConstComponentStruct(int tuple[3])\n  {\n    this->Tuple[0] = tuple[0];\n    this->Tuple[1] = tuple[1];\n    this->Tuple[2] = tuple[2];\n  }\n\n  // used for GetValue\n  int map(int idx) const { return this->mapComponent(idx / 3, idx % 3); }\n  // used for GetTypedComponent\n  int mapComponent(int vtkNotUsed(idx), int comp) const { return this->Tuple[comp]; }\n};\n\nvtkNew<vtkImplicitArray<::ConstComponentStruct>> genericComponentConstArr;\nint tuple[3] = { 1, 2, 3 };\ngenericComponentConstArr->ConstructBackend(tuple);\ngenericComponentConstArr->SetNumberOfComponents(3);\ngenericComponentConstArr->SetNumberOfTuples(50);\nCHECK(genericComponentConstArr->GetTypeComponent(0, 0) == 1 && genericComponentConstArr->GetTypeComponent(0, 1) == 2 && genericComponentConstArr->GetTypeComponent(0, 2) == 3); // always true\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries - CMake\nDESCRIPTION: This snippet creates an executable named 'Cone' from the source file 'Cone.cxx' and links it against the found VTK libraries. This is essential for the program to utilize VTK functionalities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(Cone Cone.cxx)\ntarget_link_libraries(Cone PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Using Custom and Composited Functions in ExprTk Expressions for C++\nDESCRIPTION: Demonstrates how to use custom and composited functions in ExprTk expressions. It shows the process of registering functions with a symbol table and using them in an expression.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_59\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double>        symbol_table_t;\ntypedef exprtk::expression<double>          expression_t;\ntypedef exprtk::parser<double>              parser_t;\ntypedef exprtk::function_compositor<double> compositor_t;\ntypedef typename compositor_t::function     function_t;\n\nfoo<double> f;\nboo<double> b;\ntoo<double> t;\ntoupper<double> tu;\n\nsymbol_table_t symbol_table;\ncompositor_t   compositor(symbol_table);\n\nsymbol_table.add_function(\"foo\",f);\nsymbol_table.add_function(\"boo\",b);\nsymbol_table.add_function(\"too\",t);\n\nsymbol_table\n   .add_function(\"toupper\", tu, symbol_table_t::e_ft_strfunc);\n\ncompositor.add(\n   function_t(\"koo\")\n   .var(\"v1\")\n   .var(\"v2\")\n   .expression\n   (\n      \"1 + cos(v1 * v2) / 3;\"\n   ));\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nconst std::string expression_str =\n   \" if (foo(1,2,3) + boo(1) > boo(1/2, 2/3, 3/4, 4/5)) \"\n   \"    koo(3,4);                                       \"\n   \" else                                               \"\n   \"    too(2 * v1 + v2 / 3, 'abcdef'[2:4], 3.3);       \"\n   \"                                                    \";\n\nparser_t parser;\nparser.compile(expression_str,expression);\n\nexpression.value();\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Stream Logging with Loguru in C++\nDESCRIPTION: This code snippet demonstrates how to use stream-style logging with Loguru. It requires defining `LOGURU_WITH_STREAMS` before including `loguru.hpp`. It shows how to log custom objects and use CHECK with streams.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define LOGURU_WITH_STREAMS 1\n#include <loguru.hpp>\n...\nLOG_S(INFO) << \"Look at my custom object: \" << a.cross(b);\nCHECK_EQ_S(pi, 3.14) << \"Maybe it is closer to \" << M_PI;\n```\n\n----------------------------------------\n\nTITLE: Invalid Reference Management Example in C++\nDESCRIPTION: Shows potential pitfalls with variable lifetime management and symbol table references, demonstrating cases that lead to undefined behavior.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\n\nsymbol_table_t symbol_table;\nexpression_t   expression;\n\nstd::deque<double > y {1.1, 2.2, 3.3};\nstd::vector<double> z {4.4, 5.5, 6.6};\ndouble* w = new double(123.456);\n\n{\n   double x = 123.4567;\n   symbol_table.add_variable(\"x\", x);\n}             // Reference to variable x has been invalidated\n\n\nsymbol_table.add_variable(\"y\", y.back());\n\ny.pop_back(); // Reference to variable y has been invalidated\n\n\nsymbol_table.add_variable(\"z\", z.front());\n\nz.erase(z.begin());\n              // Reference to variable z has been invalidated\n\nsymbol_table.add_variable(\"w\", *w);\n\ndelete w;     // Reference to variable w has been invalidated\n```\n\n----------------------------------------\n\nTITLE: Initializing and Dispatching Compute Pipeline with Regular Buffer in VTK WebGPU\nDESCRIPTION: This code snippet demonstrates the basic usage pattern for VTK's WebGPU compute API when not integrated into an existing rendering pipeline. It shows how to create and configure a compute buffer, create a compute pipeline, add the buffer to the pipeline, and then dispatch the pipeline for execution. The actual buffer setup and pipeline creation are deferred to the `AddBuffer()` and `Dispatch()` calls.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n  // 1)\n  vtkNew<vtkWebGPUComputeBuffer> inputBuffer;\n  inputBuffer->SetGroup(0);\n  inputBuffer->SetBinding(0);\n  inputBuffer->SetMode(...);\n  inputBuffer->SetData(...);\n\n  vtkNew<vtkWebGPUComputePipeline> computePipeline;\n  computePipeline->SetShaderSource(...);\n  computePipeline->SetShaderEntryPoint(...);\n\n  // 2)\n  computePipeline->AddBuffer(inputBuffer);\n\n  // ...\n\n  // 3)\n  computePipeline->Dispatch();\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Parallel Processing Build Environment\nDESCRIPTION: Sets up the CMake project and finds required VTK components for parallel processing examples. Includes configuration for MPI, imaging, filtering, and rendering components. Handles cases where VTK is not found gracefully.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ParallelProcessing/Generic/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8 FATAL_ERROR)\nproject(ParallelProcessingGeneric)\n\nfind_package(VTK\n  COMPONENTS\n    IOImage\n    ImagingCore\n    ImagingGeneral\n    FiltersSources\n    ParallelMPI\n    RenderingCore\n    RenderingParallel\n    TestingCore\n    TestingRendering\n    mpi)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Declaring Array-of-Structs Buffer in C++\nDESCRIPTION: This snippet demonstrates how to declare an array-of-structs buffer for storing multiple 3-component tuples. It's used to explain the memory layout of AOS data structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nTuple ArrayOfStructsBuffer[NumTuples];\n```\n\n----------------------------------------\n\nTITLE: Building Full-Text Index for VTK Documentation with Perl\nDESCRIPTION: The `doc_index.pl` script generates a full-text index for the VTK documentation, improving searchability and navigation within large sets of documentation files. This script is instrumental in creating a comprehensive searchable output.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\ndoc_index.pl\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Settings for Threads - CMake\nDESCRIPTION: This snippet manages the configuration for multi-threading options based on the compiler and platform. It checks for PTHREADS and Win32 threading capabilities and accordingly sets the related options for the VTK build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_USE_PTHREADS_INIT AND CMAKE_USE_WIN32_THREADS_INIT)\n  if (DEFINED _vtk_thread_impl_output)\n    set(thread_impl_output \"${_vtk_thread_impl_output}\")\n  else ()\n    execute_process(\n      COMMAND \"${CMAKE_C_COMPILER}\" -v\n      OUTPUT_VARIABLE thread_impl_output\n      ERROR_VARIABLE  thread_impl_output\n      RESULT_VARIABLE result\n      TIMEOUT         10)\n    if (result)\n      message(FATAL_ERROR\n        \"Failed to determine the thread implementation in use by the \"\n        \"compiler.\")\n    endif ()\n    string (REGEX REPLACE \".*Thread model: \\((posix|win32)\\).*\" \"\\1\" thread_impl_output \"${thread_impl_output}\")\n  endif ()\n  set(_vtk_thread_impl_output \"${thread_impl_output}\"\n    CACHE INTERNAL \"thread model detection\")\n  if (thread_impl_output MATCHES \"posix\")\n    set(VTK_USE_PTHREADS 1)\n  elseif (thread_impl_output MATCHES \"win32\")\n    set(VTK_USE_WIN32_THREADS 1)\n  else ()\n    set(VTK_USE_PTHREADS 1)\n  endif ()\nelseif (CMAKE_USE_PTHREADS_INIT)\n  set(VTK_USE_PTHREADS 1)\nelseif (CMAKE_USE_WIN32_THREADS_INIT)\n  set(VTK_USE_WIN32_THREADS 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package\nDESCRIPTION: This snippet uses the `find_package()` command to locate the VTK library and its required components. It specifies that the project requires CommonCore, FiltersSources, and GUISupportQtQuick components. The VTK_FOUND variable will be set depending on whether the VTK package is found.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    FiltersSources\n    GUISupportQtQuick)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Unified FindMax with vtkDataArrayAccessor in C++\nDESCRIPTION: This improved implementation uses vtkDataArrayAccessor to create a single worker that handles both vtkDataArray and vtkGenericDataArray efficiently. It automatically selects the appropriate API based on the array type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// Better, uses vtkDataArrayAccessor:\nstruct FindMax\n{\n  vtkIdType Tuple; // Result\n  int Component; // Result\n\n  FindMax() : Tuple(-1), Component(-1) {}\n\n  template <typename ArrayT>\n  void operator()(ArrayT *array)\n  {\n    // Create the accessor:\n    vtkDataArrayAccessor<ArrayT> access(array);\n\n    // Prepare the temporary. We'll use the accessor's APIType instead of\n    // ArrayT::ValueType, since that is appropriate for the vtkDataArray\n    // fallback:\n    typedef typename vtkDataArrayAccessor<ArrayT>::APIType ValueType;\n    ValueType max = std::numeric_limits<ValueType>::min();\n\n    // Iterate as before, but use access.Get instead of\n    // array->GetTypedComponent. GetTypedComponent is still used\n    // when ArrayT is a vtkGenericDataArray, but\n    // vtkDataArray::GetComponent is now used as a fallback when ArrayT\n    // is vtkDataArray.\n    vtkIdType numTuples = array->GetNumberOfTuples();\n    int numComps = array->GetNumberOfComponents();\n    for (vtkIdType tupleIdx = 0; tupleIdx < numTuples; ++tupleIdx)\n      {\n      for (int compIdx = 0; compIdx < numComps; ++compIdx)\n        {\n        if (max < access.Get(tupleIdx, compIdx))\n          {\n          max = access.Get(tupleIdx, compIdx);\n          this->Tuple = tupleIdx;\n          this->Component = compIdx;\n          }\n        }\n      }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Project with Emscripten in CMake\nDESCRIPTION: This CMake script sets up a VTK project for compilation with Emscripten, targeting WebAssembly. It requires VTK, specifically FiltersSources, InteractionStyle, RenderingOpenGL2, and RenderingUI components. It sets options for memory management and runtime methods for WebAssembly. The output is configured to be an HTML file named 'index.html'. The script assumes an Emscripten environment for its execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultipleCanvases/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(MultipleCanvases)\n\n# -----------------------------------------------------------------------------\n# EMSCRIPTEN only\n# -----------------------------------------------------------------------------\n\nif (NOT EMSCRIPTEN)\n  message(\"Skipping example: This needs to run inside an Emscripten build environment\")\n  return ()\nendif ()\n\n# -----------------------------------------------------------------------------\n# Handle VTK dependency\n# -----------------------------------------------------------------------------\n\nfind_package(VTK\n  COMPONENTS\n    FiltersSources      # VTK pipeline\n    InteractionStyle    # Mouse handling\n    RenderingOpenGL2    # For Rendering\n    RenderingUI         # For window\n)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\n# -----------------------------------------------------------------------------\n# Compile example code\n# -----------------------------------------------------------------------------\n\nadd_executable(MultipleCanvases MultipleCanvases.cxx)\ntarget_link_libraries(MultipleCanvases PRIVATE ${VTK_LIBRARIES})\n\n# -----------------------------------------------------------------------------\n# WebAssembly build options\n# -----------------------------------------------------------------------------\nset(emscripten_link_options)\nlist(APPEND emscripten_link_options\n  \"-sALLOW_MEMORY_GROWTH=1\"\n  \"-sSINGLE_FILE=1\"\n  \"-sEXPORTED_RUNTIME_METHODS=['ENV']\" # ENV holds the environment variables accessible by C getenv\n  \"--shell-file=${CMAKE_CURRENT_SOURCE_DIR}/index.html\"\n)\nif (CMAKE_SIZEOF_VOID_P EQUAL \"8\")\n  list(APPEND emscripten_link_options\n    \"-sMAXIMUM_MEMORY=16GB\")\nelse ()\n  list(APPEND emscripten_link_options\n    \"-sMAXIMUM_MEMORY=4GB\")\nendif ()\ntarget_link_options(MultipleCanvases\n  PUBLIC\n    ${emscripten_link_options}\n)\nset_target_properties(MultipleCanvases\nPROPERTIES \n  OUTPUT_NAME \"index\"\n  SUFFIX \".html\")\n\n# -----------------------------------------------------------------------------\n# VTK modules initialization\n# -----------------------------------------------------------------------------\n\nvtk_module_autoinit(\n  TARGETS  MultipleCanvases\n  MODULES  ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Infovis Project Dependencies\nDESCRIPTION: Sets up the CMake project and finds required VTK components for building Infovis examples. Includes core visualization, rendering, and interaction components with optional GUI support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(Infovis)\n\nfind_package(VTK\n  COMPONENTS\n    FiltersSources\n    IOInfovis\n    InfovisCore\n    InfovisLayout\n    InteractionStyle\n    RenderingCore\n    RenderingLabel\n    RenderingOpenGL2\n  OPTIONAL_COMPONENTS\n    FiltersStatistics\n    GUISupportQt\n    IOSQL\n    ViewsInfovis\n    ViewsQt)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Context Backend in VTK using Environment Variables\nDESCRIPTION: Specifies the possible values for the VTK_DEFAULT_OPENGL_WINDOW environment variable to override the default OpenGL context backend selection in VTK on Linux and Windows platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/runtime_settings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. `vtkXOpenGLRenderWindow` (Linux; applicable only when `VTK_USE_X` is `ON`, which is the default setting)\n2. `vtkWin32OpenGLRenderWindow` (Windows; applicable only when `VTK_USE_WIN32_OPENGL` is `ON`, which is the default setting)\n3. `vtkEGLRenderWindow` (applicable only when `VTK_OPENGL_HAS_EGL` is `ON`, which is the default setting)\n4. `vtkOSOpenGLRenderWindow` (OSMesa, requires that `osmesa.dll` or `libOSMesa.so` is installed)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Copyright and License Terms\nDESCRIPTION: This code block defines the copyright holder, permissions granted, and warranty disclaimer for the VTK project. It allows free use, modification, and distribution of the software, provided the copyright notice is maintained and the software is not sold.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Copyright.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*=========================================================================\nCopyright (c) 1994 The Board of Trustees of The Leland Stanford\nJunior University.  All rights reserved.\n\nPermission to use, copy, modify and distribute this software and its\ndocumentation for any purpose is hereby granted without fee, provided\nthat the above copyright notice and this permission notice appear in\nall copies of this software and that you do not sell the software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND WITHOUT WARRANTY OF ANY KIND,\nEXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n=========================================================================*/\n```\n\n----------------------------------------\n\nTITLE: Configuring 64-bit Tests in VTK Filters\nDESCRIPTION: Conditionally sets up test cases when 64-bit IDs are enabled in VTK. Includes tests for extracting values using CAD cube data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_64bit)\nif(${VTK_USE_64BIT_IDS})\n  set(test_64bit\n    TestExtractValues.cxx,NO_VALID DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/cad_cubes.vtp}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Filters Hybrid C++ Tests with CMake\nDESCRIPTION: Configures a set of C++ test files for the VTK Filters Hybrid module. Each test file is registered with the vtk_add_test_cxx command, with some tests marked with NO_VALID to indicate they don't need image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersHybridCxxTests tests\n  TemporalStatistics.cxx\n  TestHyperTreeGridAdaptiveDataSetSurfaceFilterDecimation.cxx,NO_VALID\n  TestHyperTreeGridBinary2DAdaptiveDataSetSurfaceFilter.cxx\n  TestHyperTreeGridBinary2DAdaptiveDataSetSurfaceFilterMaterial.cxx\n  TestHyperTreeGridTernary3DAdaptiveDataSetSurfaceFilter.cxx\n  TestHyperTreeGridTernary3DToUnstructuredAdaptiveDataSetSurfaceFilter.cxx\n  TestHyperTreeGridTernary3DAdaptiveDataSetSurfaceFilterMaterial.cxx\n  TestBSplineTransform.cxx\n  TestDepthSortPolyData.cxx\n  TestForceTime.cxx\n  TestGenerateTimeSteps.cxx,NO_VALID\n  TestPolyDataSilhouette.cxx\n  TestProcrustesAlignmentFilter.cxx,NO_VALID\n  TestTemporalArrayOperatorFilter.cxx,NO_VALID\n  TestTemporalCacheSimple.cxx,NO_VALID\n  TestTemporalCacheTemporal.cxx,NO_VALID\n  TestTemporalCacheMemkind.cxx,NO_VALID\n  TestTemporalCacheUndefinedTimeStep.cxx\n  TestTemporalFractal.cxx\n  TestTemporalInterpolator.cxx\n  TestTemporalInterpolatorFactorMode.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: ExprTk For Loop Implementation\nDESCRIPTION: Example of a for loop in ExprTk which includes initialization, condition, and increment expressions. The loop repeatedly evaluates statements while the condition is true.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_10\n\nLANGUAGE: ExprTk\nCODE:\n```\nfor (var x := 0; (x < n) and (x != y); x += 1)\n{\n   y := y + x / 2 - z;\n   w := u + y;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting vtkBitArray to NumPy Array\nDESCRIPTION: Converts a VTK bit array to a NumPy uint8 array using vtk_to_numpy function. Provides interoperability between VTK and NumPy data structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/bit-array-numpy-support.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbit_array = vtkBitArray()\n# Convert bit array to numpy uint8 array\nnumpy_array = vtk_to_numpy(bit_array)\n```\n\n----------------------------------------\n\nTITLE: Implementing Return Type Overloading in Generic Functions for C++\nDESCRIPTION: Demonstrates how to implement a generic function that can return either a scalar or string value type based on the input parameter sequence.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_57\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct foo final : public exprtk::igeneric_function<T>\n{\n   typedef typename exprtk::igeneric_function<T>::parameter_list_t\n                                                  parameter_list_t;\n\n   foo()\n   : exprtk::igeneric_function<T>\n     (\n       \"T:T|S:TS\",\n       igfun_t::e_rtrn_overload\n     )\n   {}\n\n   // Scalar value returning invocations\n   inline T operator()(const std::size_t& ps_index,\n                       parameter_list_t parameters) override\n   {\n      ...\n   }\n\n   // String value returning invocations\n   inline T operator()(const std::size_t& ps_index,\n                       std::string& result,\n                       parameter_list_t& parameters) override\n   {\n      ...\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Workaround for IDE Auto-completion with VTK\nDESCRIPTION: Alternative import approach that fixes auto-completion in IDEs like PyCharm for VTK 9.2.5 and earlier, by using vtkmodules.all as vtk.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vtkmodules.all as vtk\n```\n\n----------------------------------------\n\nTITLE: Formatting dates and times with fmt library in C++\nDESCRIPTION: Example showing how to format dates and times using the fmt::chrono extension. Demonstrates both default datetime formatting and custom time format specifiers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/chrono.h>\n\nint main() {\n  auto now = std::chrono::system_clock::now();\n  fmt::print(\"Date and time: {}\\n\", now);\n  fmt::print(\"Time: {:%H:%M}\\n\", now);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Compute Buffers in VTK WebGPURenderer::DeviceRender\nDESCRIPTION: This code snippet demonstrates the sequence of actions within `vtkWebGPURenderer::DeviceRender()` related to compute buffer updates. It highlights the creation of the data buffer by `UpdateGeometry()`, transform/light buffers by `CreateBuffers()`, and the configuration of render buffers via `UpdateComputePipelines()` and `UpdateComputeBuffers()`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nvoid vtkWebGPURenderer::DeviceRender()\n{\n  // 1)\n  // mappers prepare geometry SSBO and pipeline layout.\n  this->UpdateGeometry();\n\n  this->CreateBuffers(); // 2)\n  this->UpdateBufferData(); // 3)\n\n  // 4)\n  this->UpdateComputePipelines();\n\n  // 5)\n  this->ComputePass();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Offscreen Rendering Default\nDESCRIPTION: Adds module definitions for default offscreen rendering when enabled\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\n  vtk_module_definitions(VTK::RenderingCore\n    PRIVATE\n      VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\nendif()\nvtk_add_test_mangling(VTK::RenderingCore)\n```\n\n----------------------------------------\n\nTITLE: Implementing String-Returning Generic Function in C++ with ExprTk\nDESCRIPTION: Shows how to create a string-returning generic function 'toupper' using the igeneric_function interface in ExprTk. The function takes a string input and returns an uppercase version of it.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_54\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct toupper final : public exprtk::igeneric_function<T>\n{\n   typedef exprtk::igeneric_function<T> igenfunct_t;\n   typedef typename igenfunct_t::generic_type generic_t;\n   typedef typename igenfunct_t::parameter_list_t parameter_list_t;\n   typedef typename generic_t::string_view string_t;\n\n   toupper()\n   : exprtk::igeneric_function<T>(\"S\",igenfunct_t::e_rtrn_string)\n   {}\n\n   inline T operator()(std::string& result,\n                       parameter_list_t parameters) override\n   {\n      result.clear();\n\n      string_t string(parameters[0]);\n\n      for (std::size_t i = 0; i < string.size(); ++i)\n      {\n         result += std::toupper(string[i]);\n      }\n\n      return T(0);\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Auto-Initializing VTK Modules\nDESCRIPTION: This snippet automatically initializes the VTK modules required by the specified targets.  It ensures that the necessary VTK modules are properly loaded and initialized at runtime for the `HierarchicalBoxPipeline`, `Generate3DAMRDataSetWithPulse`, and `Generate2DAMRDataSetWithPulse` executables. The `MODULES` parameter uses the libraries found by `find_package(VTK)`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/AMR/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS HierarchicalBoxPipeline\n          Generate3DAMRDataSetWithPulse\n          Generate2DAMRDataSetWithPulse\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Ensuring UTF-8 Encoding for Command-Line Arguments in C++\nDESCRIPTION: This snippet demonstrates how to use CLI11's ensure_utf8 function to handle Unicode arguments correctly on Windows. It replaces the original argv with a UTF-8 encoded version before parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_41\n\nLANGUAGE: cpp\nCODE:\n```\nint main(int argc, char** argv) {\n    CLI::App app;\n    argv = app.ensure_utf8(argv);  // new argv memory is held by app\n    // ...\n    CLI11_PARSE(app, argc, argv);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fallback Path with vtkDataArrayAccessor in C++\nDESCRIPTION: This snippet demonstrates how to implement a fallback mechanism when dispatch fails by directly calling the worker with the vtkDataArray pointer. This ensures the worker always produces valid results.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nvoid someFunction(vtkDataArray *array)\n{\n  FindMax maxWorker;\n  if (!vtkArrayDispatch::Dispatch::Execute(array, maxWorker))\n    {\n    maxWorker(array); // Dispatch failed, call vtkDataArray fallback\n    }\n  // Do work using maxWorker.Tuple and maxWorker.Component -- now we know\n  // for sure that they're initialized!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Filters Geometry Test Executable in CMake\nDESCRIPTION: Combines all test sources into a single variable and creates a test executable that includes all tests. The RENDERING_FACTORY flag indicates that the tests will use VTK's rendering factory system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${no_data_tests}\n  )\nvtk_test_cxx_executable(vtkFiltersGeometryCxxTests all_tests\n  RENDERING_FACTORY\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Core CXX Tests\nDESCRIPTION: Configures a set of C++ test files for the VTK IO Core module. Includes tests for array data writing, array denormalization, serialization, various compression methods (LZ4, ZLib, LZMA), resource parsing/streaming, and URI handling.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOCoreCxxTests tests\n  NO_VALID\n  TestArrayDataWriter.cxx\n  TestArrayDenormalized.cxx\n  TestArraySerialization.cxx\n  TestCompressLZ4.cxx\n  TestCompressZLib.cxx\n  TestCompressLZMA.cxx\n  TestResourceParser.cxx\n  TestResourceStreams.cxx\n  TestURI.cxx\n  TestURILoader.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing VTK in virtual environment on Windows PowerShell\nDESCRIPTION: Creates a Python virtual environment and installs VTK package locally using Windows PowerShell\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/getting_started/using_python.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npython -m venv env\n.\\env\\Activate.ps1\npip install vtk\n```\n\n----------------------------------------\n\nTITLE: Configuring TOC Tree for VTK API Documentation\nDESCRIPTION: Sphinx toctree directive that organizes the API documentation into sections for C++, Python, and CMake modules. Uses titlesonly option to show only section titles and sets maximum depth to 1 level.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:titlesonly:\n:maxdepth: 1\n:caption: Contents\ncpp\npython\ncmake/cmake-modules.rst\n```\n\n----------------------------------------\n\nTITLE: Disabling VTK Modules with CMake\nDESCRIPTION: CMake configuration command to disable specific VTK modules during the build configuration stage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/modules/index.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DVTK_MODULE_ENABLE_<module name>=DONT_WANT ...\n```\n\n----------------------------------------\n\nTITLE: Embedding nlohmann_json Directly in CMake Project\nDESCRIPTION: CMake snippet showing how to embed the JSON library directly into an existing project by placing the source in a subdirectory and using add_subdirectory().\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n# Typically you don't care so much for a third party library's tests to be\n# run from your own project's code.\nset(JSON_BuildTests OFF CACHE INTERNAL \"\")\n\n# If you only include this third party in PRIVATE source files, you do not\n# need to install it when your main project gets installed.\n# set(JSON_Install OFF CACHE INTERNAL \"\")\n\n# Don't use include(nlohmann_json/CMakeLists.txt) since that carries with it\n# unintended consequences that will break the build.  It's generally\n# discouraged (although not necessarily well documented as such) to use\n# include(...) for pulling in other CMake projects anyways.\nadd_subdirectory(nlohmann_json)\n...\nadd_library(foo ...)\n...\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Using a Compilation Timeout Check with ExprTk Parser\nDESCRIPTION: Example of registering and using a compilation timeout check with an ExprTk parser. Sets a maximum compilation duration of 5 seconds and handles compilation errors if the process times out.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_107\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::expression<T> expression_t;\ntypedef exprtk::parser<T>     parser_t;\n\nexpression_t expression;\n\nmy_compilation_timeout_check compilation_timeout_check;\n\nparser_t parser;\nparser.\n   register_compilation_timeout_check(compilation_timeout_check);\n\nconst auto max_duration = std::chrono::seconds(5);\nconst auto timeout_tp   =\n   std::chrono::steady_clock::now() + max_duration;\n\ncompilation_timeout_check.set_timeout_time(timeout_tp);\n\nif (!parser.compile(large_expression_string, expression))\n{\n   printf(\"Error: %s\\t\\n\", parser.error().c_str());\n   return;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Database Classes\nDESCRIPTION: Declares a list of VTK classes for PostgreSQL database interactions, including database, query, reader, and writer components\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPostgreSQLDatabase\n  vtkPostgreSQLQuery\n  vtkPostgreSQLToTableReader\n  vtkTableToPostgreSQLWriter)\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Test Data Commit\nDESCRIPTION: Git commands for committing test data files and content links\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git add Some/Module/Testing/Data/Baseline/MyTest.png.sha512\n$ git add Some/Module/Testing/Data/CMakeLists.txt\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Processing Generic Function Parameters in C++ with ExprTk\nDESCRIPTION: Shows how to process parameters of different types (scalar, vector, string) in a generic function using the igeneric_function interface in ExprTk.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_52\n\nLANGUAGE: C++\nCODE:\n```\ninline T operator()(parameter_list_t parameters)\n{\n   typedef typename exprtk::igeneric_function<T>::generic_type\n                                                  generic_type;\n\n   typedef typename generic_type::scalar_view scalar_t;\n   typedef typename generic_type::vector_view vector_t;\n   typedef typename generic_type::string_view string_t;\n\n   for (std::size_t i = 0; i < parameters.size(); ++i)\n   {\n      generic_type& gt = parameters[i];\n\n      if (generic_type::e_scalar == gt.type)\n      {\n         scalar_t x(gt);\n         ...\n      }\n      else if (generic_type::e_vector == gt.type)\n      {\n         vector_t vector(gt);\n         ...\n      }\n      else if (generic_type::e_string == gt.type)\n      {\n         string_t string(gt);\n         ...\n      }\n   }\n\n   return T(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Path Handling for VTKm in VTK\nDESCRIPTION: Sets up compiler definitions to handle different include paths for VTKm based on whether it's found as an external dependency or included in VTK. This ensures proper header file resolution during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT VTKm_FOUND)\n  set_source_files_properties(TestVTKMDataSet.cxx PROPERTIES\n    COMPILE_DEFINITIONS VTKm_INCLUDED_IN_VTK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Regression Testing\nDESCRIPTION: Configures regression testing infrastructure including external data handling and test cases for the image processing examples. Sets up data URLs and testing commands.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ImageProcessing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  include(CTest)\n  if (TARGET VTK::TestingRendering)\n    set(ExternalData_BINARY_ROOT ${CMAKE_CURRENT_BINARY_DIR}/ExternalData)\n\n    list(APPEND ExternalData_URL_TEMPLATES\n      \"https://data.kitware.com/api/v1/file/hashsum/%(algo)/%(hash)/download\"\n      \"https://www.vtk.org/files/ExternalData/%(algo)/%(hash)\"\n    )\n    include(ExternalData)\n\n    ExternalData_add_test(ImageProcessingData\n      NAME    \"ImageProcessingExampleCxx-ImageBenchmark\"\n      COMMAND ImageBenchmark\n              --threads 2\n              --filter resize:kernelsize=4\n      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n\n    ExternalData_Add_Target(ImageProcessingData)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: This CMake snippet adds the VTK::IOOMF module using the `vtk_module_add_module` command. It specifies the classes, private classes, and private headers that are part of the module. The lists defined earlier are used as arguments.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOOMF\n  CLASSES           ${classes}\n  PRIVATE_CLASSES   ${private_classes}\n  PRIVATE_HEADERS   ${private_headers_core})\n```\n\n----------------------------------------\n\nTITLE: Configuring MetaIO Large File Support in CMake\nDESCRIPTION: Sets up MetaIO-specific configuration variables and adds large file support definitions when required. Disables testing and handles visibility settings for cross-platform compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(METAIO_FOR_VTK 1)\nset(VTK_ZLIB_LIBRARIES vtkzlib)\nif(VTK_REQUIRE_LARGE_FILE_SUPPORT)\n  add_definitions(\n    -D_LARGEFILE_SOURCE\n    -D_LARGEFILE64_SOURCE\n    -D_LARGE_FILES\n    -D_FILE_OFFSET_BITS=64)\nendif()\n# We never want MetaIO's tests.\nset(BUILD_TESTING OFF)\n\n# FIXME: MetaIO only exports symbols properly on Windows.\nunset(CMAKE_CXX_VISIBILITY_PRESET)\nunset(CMAKE_VISIBILITY_INLINES_HIDDEN)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Accelerators VTKm Filters CXX Tests in CMake\nDESCRIPTION: Sets up a list of CXX tests for VTK Accelerators VTKm Filters, specifying test files and validation options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkAcceleratorsVTKmFiltersCxxTests tests\n  TestVTKMAbort.cxx,NO_VALID\n  TestVTKMCleanGrid.cxx\n  TestVTKMCoordinateSystemTransform.cxx,NO_VALID\n  TestVTKMClip.cxx\n  TestVTKMClipWithImplicitFunction.cxx\n  TestVTKMExternalFaces.cxx\n  TestVTKMExtractVOI.cxx\n  TestVTKMGradient.cxx,NO_VALID\n  TestVTKMGradientAndVorticity.cxx,NO_VALID\n  TestVTKMHistogram.cxx,NO_VALID\n  TestVTKMLevelOfDetail.cxx\n  TestVTKMMarchingCubes.cxx\n  TestVTKMMarchingCubes2.cxx\n  TestVTKMNDHistogram.cxx,NO_VALID\n  TestVTKMOverride.cxx,NO_VALID\n  TestVTKMPointElevation.cxx\n  TestVTKMPointTransform.cxx\n  TestVTKMProbe.cxx,NO_VALID\n  TestVTKMPolyDataNormals.cxx\n  TestVTKMSlice.cxx,NO_VALID\n  TestVTKMThreshold.cxx\n  TestVTKMThreshold2.cxx\n  TestVTKMTriangleMeshPointNormals.cxx\n  TestVTKMWarpScalar.cxx\n  TestVTKMWarpVector.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Disabling and Re-Enabling All Control Flow Structures in ExprTk\nDESCRIPTION: Shows how to disable and then re-enable all control flow structures in the ExprTk parser. This affects whether expressions using loops, conditionals, etc. will compile.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_73\n\nLANGUAGE: cpp\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nconst std::string program =\n   \" var x := 0;                      \"\n   \" for (var i := 0; i < 10; i += 1) \"\n   \" {                                \"\n   \"   x += i;                        \"\n   \" }                                \";\n\nparser.settings().disable_all_control_structures();\n\nparser\n   .compile(program,expression); // compilation failure\n\nparser.settings().enable_all_control_structures();\n\nparser\n   .compile(program,expression); // compilation success\n```\n\n----------------------------------------\n\nTITLE: LibXML2 Feature Configuration Options\nDESCRIPTION: Configures build options for LibXML2 library, including support for various features like Python bindings, threading, and XML processing capabilities\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(LIBXML2_WITH_C14N \"Add the Canonicalization support\" ON)\noption(LIBXML2_WITH_CATALOG \"Add the Catalog support\" ON)\noption(LIBXML2_WITH_DEBUG \"Add the debugging module\" ON)\noption(LIBXML2_WITH_HTML \"Add the HTML support\" ON)\noption(LIBXML2_WITH_THREADS \"Add multithread support\" ON)\n```\n\n----------------------------------------\n\nTITLE: Generating PEGTL Header Configuration File\nDESCRIPTION: Generates a header configuration file for PEGTL library using CMake's configure_file command, creating a runtime header from a template input file.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pegtl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_pegtl.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_pegtl.h\")\n```\n\n----------------------------------------\n\nTITLE: Using pkg-config with nlohmann_json in shell scripts\nDESCRIPTION: This shell command uses pkg-config to generate the include flags that point to where the nlohmann_json library is installed, useful for bare Makefiles.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\npkg-config nlohmann_json --cflags\n```\n\n----------------------------------------\n\nTITLE: Multi-Statement Expressions in ExprTk (C++)\nDESCRIPTION: Illustrates single and multi-statement expressions in ExprTk, showing how statements are separated and how the final statement determines the expression result.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nstd::string single_statement = \" z := x + y \";\n\nstd::string multi_statement  = \" var temp := x; \"\n                              \" x := y + z;    \"\n                              \" y := temp;     \";\n```\n\n----------------------------------------\n\nTITLE: Implementing Polyline Decimation Strategies in VTK\nDESCRIPTION: Introduces new polyline decimation strategies using a strategy pattern, allowing flexible point reduction techniques for polyline data processing\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-new-polyline-decimation-strategies.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass vtkDecimatePolylineStrategy\n```\n\nLANGUAGE: C++\nCODE:\n```\nclass vtkDecimatePolylineAngleStrategy\n```\n\nLANGUAGE: C++\nCODE:\n```\nclass vtkDecimatePolylineCustomFieldStrategy\n```\n\nLANGUAGE: C++\nCODE:\n```\nclass vtkDecimatePolylineDistanceStrategy\n```\n\n----------------------------------------\n\nTITLE: Using Assert Statements in ExprTk Expressions\nDESCRIPTION: Example of registering an assert handler with the ExprTk parser and using assert statements in an expression. Shows how to create and compile an expression with runtime assertion checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_109\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\nconst std::string program =\n   \" var x := 4;                             \"\n   \"                                         \"\n   \" for (var i := 0; i < 10; i += 1)        \"\n   \" {                                       \"\n   \"    assert(i < x, 'assert statement 1'); \"\n   \" }                                       \";\n\nmy_assert_handler handler;\n\nexpression_t expression;\nparser_t parser;\n\nparser.register_assert_check(handler);\nparser.compile(program, expression);\n```\n\n----------------------------------------\n\nTITLE: Sphinx Table of Contents Tree Configuration\nDESCRIPTION: ReStructuredText directive configuring the table of contents structure with specific display settings like hidden titles and maximum depth.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/index.md#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:titlesonly:\n:hidden:\n:maxdepth: 1\nbuild_settings\n```\n\n----------------------------------------\n\nTITLE: Implicit Conversions for Basic Types in C++\nDESCRIPTION: Demonstrates implicit conversions between basic C++ types and JSON values. Includes examples for strings, booleans, and numbers, with a note on char type conversion.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n// strings\nstd::string s1 = \"Hello, world!\";\njson js = s1;\nauto s2 = js.template get<std::string>();\n// NOT RECOMMENDED\nstd::string s3 = js;\nstd::string s4;\ns4 = js;\n\n// Booleans\nbool b1 = true;\njson jb = b1;\nauto b2 = jb.template get<bool>();\n// NOT RECOMMENDED\nbool b3 = jb;\nbool b4;\nb4 = jb;\n\n// numbers\nint i = 42;\njson jn = i;\nauto f = jn.template get<double>();\n// NOT RECOMMENDED\ndouble f2 = jb;\ndouble f3;\nf3 = jb;\n\n// etc.\n```\n\nLANGUAGE: cpp\nCODE:\n```\nchar ch = 'A';                       // ASCII value 65\njson j_default = ch;                 // stores integer number 65\njson j_string = std::string(1, ch);  // stores string \"A\"\n```\n\n----------------------------------------\n\nTITLE: Extracting VTK Version Information for Documentation\nDESCRIPTION: The Perl script `doc_version.pl` extracts the current VTK version and incorporates it into the documentation set. This ensures that the generated documents correctly reflect the version of VTK being documented.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\ndoc_version.pl\n```\n\n----------------------------------------\n\nTITLE: Configuring ExodusII Third-Party Internal Module in VTK\nDESCRIPTION: Defines the ExodusII library as a third-party internal module for VTK. It specifies licensing information (BSD-3-Clause), copyright details, download location, and version (9.0.4). This configuration is essential for properly integrating the ExodusII library into the VTK ecosystem.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkexodusII/COPYRIGHT\"\n  SPDX_LICENSE_IDENTIFIER\n    \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2005-2017 National Technology & Engineering Solutions of Sandia, LLC (NTESS)\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://gitlab.kitware.com/third-party/seacas.git@exodus/for/vtk-20250313-v2025-02-27#packages/seacas/libraries/exodus\"\n  VERSION\n    \"9.0.4\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: VTK Third-Party Module Definition (double-conversion)\nDESCRIPTION: Defines a VTK third-party module for the double-conversion library.  Specifies license files, SPDX identifiers, download location, version, include directories, package name, and target.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkdoubleconversion/COPYING\"\n      \"vtkdoubleconversion/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright 2006-2011, the V8 project authors\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/double-conversion.git@for/vtk-20191226-3.1.5\"\n    VERSION\n      \"3.1.5\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE double-conversion\n    TARGETS double-conversion::double-conversion\n    STANDARD_INCLUDE_DIRS)\n\n```\n\n----------------------------------------\n\nTITLE: Expansion of CLI11_PARSE Macro\nDESCRIPTION: This snippet provides the expanded functionality of the CLI11_PARSE macro used for parsing command line arguments in a CLI application. It includes a try-catch block to handle parsing errors, ensuring that help flags or parse errors exit with the correct return code.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntry {\n    app.parse(argc, argv);\n} catch (const CLI::ParseError &e) {\n    return app.exit(e);\n}\n```\n\n----------------------------------------\n\nTITLE: VTK Package Finding and Shared Library Configuration\nDESCRIPTION: Finds required VTK components and configures shared library build options based on VTK's CommonCore library type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK COMPONENTS CommonCore Python)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nset(_shared_default ON)\nget_target_property(_vtk_libtype VTK::CommonCore TYPE)\nif (_vtk_libtype STREQUAL \"STATIC_LIBRARY\")\n  set(_shared_default OFF)\nendif ()\n\noption(BUILD_SHARED_LIBS \"Build shared or static libraries\" \"${_shared_default}\")\ninclude(CTest)\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Static and Unbound Method Calls\nDESCRIPTION: Examples of calling static and unbound methods in VTK's Python interface.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nvtkObject.SetGlobalWarningDisplay(1)\n\nw = vtkRenderWindow()\nvtkWindow.Render(w)\n```\n\n----------------------------------------\n\nTITLE: Create Custom Target for Release APK Build\nDESCRIPTION: Creates a custom target, `VolumeRender-apk-release`, which builds the release APK using the Ant build tool. This target depends on `VolumeRender-ant-configure` and `VolumeRender`, ensuring that the Android project is configured before the release build starts. This target is marked as `ALL` to be built by default.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(VolumeRender-apk-release ALL\n  COMMAND ${ANT_EXECUTABLE}\n          -file \"${CMAKE_CURRENT_BINARY_DIR}/build.xml\"\n          release)\nadd_dependencies(VolumeRender-apk-release\n  VolumeRender-ant-configure\n  VolumeRender)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK LAS Reader Test Cases\nDESCRIPTION: Adds specific test cases for the VTK LAS reader with different input files and elevation values. Creates tests for test_1.las with elevation 0 and test_2.las with elevation -90.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LAS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_vtk_las_reader_test(test_1.las 0)\nadd_vtk_las_reader_test(test_2.las -90)\n```\n\n----------------------------------------\n\nTITLE: Subclassing vtkSynchronizableActors for New Actor Types - C++\nDESCRIPTION: This code provides guidance on creating new types of synchronizable actors by subclassing vtkSynchronizableActors. Implementing the four required API methods, InitializeRenderer, CleanUpRenderer, SaveToStream, and RestoreFromStream, allows for the addition of new synchronized actors. Moreover, users need to update vtkSynchronizedRenderers::EnableSynchronizableActors to instantiate the new class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/hmd-cave-collaboration.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/*\n * To add a new type of synchronizable actor in the future, you can simply subclass vtkSynchronizableActors and implement the four api methods:\n *\n * InitializeRenderer\n * CleanUpRenderer\n * SaveToStream\n * RestoreFromStream\n */\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Addition for MSVC Versions\nDESCRIPTION: Adds a specific test only for MSVC versions newer than 2013, demonstrating version-based test configuration in the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif ((NOT DEFINED MSVC_VERSION) OR (MSVC_VERSION GREATER 1800))\n  list(APPEND all_tests\n    TestXMLWriteRead.cxx,NO_VALID,NO_DATA)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Block-Style If-Statement in ExprTk\nDESCRIPTION: Demonstrates an if-statement using block syntax with curly braces, which is equivalent to the single-line version.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_34\n\nLANGUAGE: ExprTk\nCODE:\n```\nx := if (y < z)\n{\n   y + 3\n};\n```\n\n----------------------------------------\n\nTITLE: Setting No Prior Temporal Access Key in VTK\nDESCRIPTION: This snippet describes the method to set the 'No Prior Temporal Access' key on a VTK source for in situ use. It includes details about default values and the context for its use in visualization pipelines.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/no-prior-temporal-access.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkAlgorithm::SetNoPriorTemporalAccessInformationKey()\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK Dashboard Scripts Repository\nDESCRIPTION: Shell commands to create a local Git repository and track the VTK dashboard branch. Sets up initial directory structure and remote tracking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/dashboard.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p ~/Dashboards/VTKScripts\n$ cd ~/Dashboards/VTKScripts\n$ git init\n$ git remote add -t dashboard origin https://gitlab.kitware.com/vtk/vtk.git\n$ git pull origin\n```\n\n----------------------------------------\n\nTITLE: Enabling Prolab Color Space in vtkColorTransferFunction\nDESCRIPTION: Method to set the color space to Prolab in vtkColorTransferFunction for better perceptual color interpolation. Referenced from the paper with DOI 10.1109/ACCESS.2021.3115425.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-prolab-transferfunction-interpolation.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkColorTransferFunction::SetColorSpaceToProlab()\n```\n\n----------------------------------------\n\nTITLE: Setting GL2PS Properties and Export Symbols\nDESCRIPTION: Sets properties for GL2PS library including export symbol definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/vtkgl2ps/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(gl2ps\n  PROPERTIES\n    DEFINE_SYMBOL GL2PSDLL_EXPORTS)\n```\n\n----------------------------------------\n\nTITLE: Nested If-Else-If Statement in ExprTk\nDESCRIPTION: Shows how to create cascading conditional statements with if-else-if structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_39\n\nLANGUAGE: ExprTk\nCODE:\n```\nif (x > y + 1)\n   y := abs(x - z);\nelse\n{\n   y := z + x;\n   z := x + 3;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Overloading in Generic Functions for C++\nDESCRIPTION: Shows how to implement function overloading in generic functions using parameter sequences. The 'roo' function can handle four distinct parameter sequences.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_56\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct roo final : public exprtk::igeneric_function<T>\n{\n   typedef typename exprtk::igeneric_function<T>::parameter_list_t\n                                                  parameter_list_t;\n\n   moo()\n   : exprtk::igeneric_function<T>(\"SVTT|SS|TTV|S?V*S\")\n   {}\n\n   inline T operator()(const std::size_t& ps_index,\n                       parameter_list_t parameters) override\n   {\n      ...\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Testing for Ghost Cells in VTK (Before and After Implementation Change)\nDESCRIPTION: Shows the before and after API usage for testing if a cell is a ghost cell. The old method used ghost levels stored in a 'vtkGhostLevels' array, while the new method uses bit flags in a 'vtkGhostType' array.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/changes_6.3/ghosts_and_blanking.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// Old way to test if a cell is a ghost cell\ngrid->GetCellData()->GetArray(\"vtkGhostLevels\")->GetValue(cellId) > 0\n\n// New way to test if a cell is a ghost cell\ngrid->GetCellGhostArray()->GetValue(cellId) & vtkDataSetAttributes::DUPLICATECELL\n```\n\n----------------------------------------\n\nTITLE: Configuring Stencil Data Tests\nDESCRIPTION: Sets up three specific stencil data tests (Add, Subtract, Clip) with external data dependencies and environment configurations for image comparison.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::ImagingCoreCxx-AddStencilData\n  COMMAND \"${_vtk_test_cxx_pre_args}\"\n    \"$<TARGET_FILE:vtkImagingCoreCxxTests>\" TestImageStencilData 1\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V DATA{../Data/Baseline/TestAddStencilData.png,:})\nset_property(TEST VTK::ImagingCoreCxx-AddStencilData APPEND\n  PROPERTY\n    ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Integer Types with Different Bases in C++\nDESCRIPTION: Example demonstrating how to parse the same integer value from decimal, binary, and hexadecimal representations using fast_float. The code shows base-10, base-2, and base-16 parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  uint64_t i;\n  std::string str = \"22250738585072012\";\n  auto answer = fast_float::from_chars(str.data(), str.data() + str.size(), i);\n  if (answer.ec != std::errc()) {\n    std::cerr << \"parsing failure\\n\";\n    return EXIT_FAILURE;\n  }\n  std::cout << \"parsed the number \" << i << std::endl;\n\n  std::string binstr = \"1001111000011001110110111001001010110100111000110001100\";\n\n  answer = fast_float::from_chars(binstr.data(), binstr.data() + binstr.size(), i, 2);\n  if (answer.ec != std::errc()) {\n    std::cerr << \"parsing failure\\n\";\n    return EXIT_FAILURE;\n  }\n  std::cout << \"parsed the number \" << i << std::endl;\n\n  std::string hexstr = \"4f0cedc95a718c\";\n\n  answer = fast_float::from_chars(hexstr.data(), hexstr.data() + hexstr.size(), i, 16);\n  if (answer.ec != std::errc()) {\n    std::cerr << \"parsing failure\\n\";\n    return EXIT_FAILURE;\n  }\n  std::cout << \"parsed the number \" << i << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersFlowPaths Module Classes\nDESCRIPTION: Defines a list of VTK classes that are part of the FiltersFlowPaths module, including particle tracers, streamline filters, and velocity field interpolators.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAbstractInterpolatedVelocityField\n  vtkAMRInterpolatedVelocityField\n  vtkCompositeInterpolatedVelocityField\n  vtkEvenlySpacedStreamlines2D\n  vtkLagrangianBasicIntegrationModel\n  vtkLagrangianMatidaIntegrationModel\n  vtkLagrangianParticle\n  vtkLagrangianParticleTracker\n  vtkLinearTransformCellLocator\n  vtkModifiedBSPTree\n  vtkParallelVectors\n  vtkParticlePathFilter\n  vtkParticleTracer\n  vtkParticleTracerBase\n  vtkStreaklineFilter\n  vtkStreamSurface\n  vtkStreamTracer\n  vtkTemporalInterpolatedVelocityField\n  vtkVectorFieldTopology\n  vtkVortexCore)\n```\n\n----------------------------------------\n\nTITLE: Converting GLB to B3DM Format\nDESCRIPTION: Shell commands to recursively find and convert GLB files to B3DM format using 3d-tiles-tools, then remove original GLB files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name '*.glb' -exec bash -c 'nodejs ~/external/3d-tiles-tools/tools/bin/3d-tiles-tools.js glbToB3dm ${0} ${0%.*}.b3dm' {} \\;\nfind . -name '*.glb' -exec rm {} \\;\n```\n\n----------------------------------------\n\nTITLE: Simplifying Serialization with Macros in C++\nDESCRIPTION: Demonstrates the use of NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE and NLOHMANN_DEFINE_TYPE_INTRUSIVE macros to simplify serialization code for structs and classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace ns {\n    NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(person, name, address, age)\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace ns {\n    class address {\n      private:\n        std::string street;\n        int housenumber;\n        int postcode;\n\n      public:\n        NLOHMANN_DEFINE_TYPE_INTRUSIVE(address, street, housenumber, postcode)\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: VTK iOS Build Configuration Options\nDESCRIPTION: Required CMake configuration options for building VTK framework for iOS, including architecture settings and module selections.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/VTKViewer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nVTK_BUILD_EXAMPLES = OFF\nBUILD_TESTING = OFF\nCMAKE_BUILD_TYPE = Release\nIOS_DEVICE_ARCHITECTURES = arm64;armv7\nIOS_EMBED_BITCODE = ON\nIOS_SIMULATOR_ARCHITECTURES = i386;x86_64\nModule_vtkIOGeometry = ON\nModule_vtkInteractionStyle = ON\nModule_vtkInteractionWidgets = ON\nModule_vtkRenderingOpenGL2 = ON\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Variables in Expression Parsing\nDESCRIPTION: Shows how to handle expressions with unknown variables using the unknown_symbol_resolver component. Demonstrates variable registration and automatic resolution of undefined symbols.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_66\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\nT x = T(123.456);\nT y = T(789.123);\n\nsymbol_table_t unknown_var_symbol_table;\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\nsymbol_table.add_variable(\"y\",y);\n\nexpression_t expression;\nexpression.register_symbol_table(unknown_var_symbol_table);\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.enable_unknown_symbol_resolver();\n\nconst std::string expression_str = \"x + abs(y / 3k) * z + 2\";\n\nparser.compile(expression_str,expression);\n```\n\n----------------------------------------\n\nTITLE: Reading JSON from a file using nlohmann::json in C++\nDESCRIPTION: This snippet demonstrates how to read a JSON value from a file into a nlohmann::json object. It uses an ifstream to open the file and the parse method to convert the file content into a JSON object.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <fstream>\n#include <nlohmann/json.hpp>\nusing json = nlohmann::json;\n\n// ...\n\nstd::ifstream f(\"example.json\");\njson data = json::parse(f);\n```\n\n----------------------------------------\n\nTITLE: Pushing with GitLab Script\nDESCRIPTION: Command to push changes using VTK's custom GitLab script\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: git\nCODE:\n```\ngit gitlab-push\n```\n\n----------------------------------------\n\nTITLE: Building VTK with OpenXR Support using CMake\nDESCRIPTION: These commands show how to configure and build VTK with the OpenXR module enabled, specifying the paths to the OpenXR-SDK include directory and library.  The build is configured in Release mode and requires specifying the correct paths to the OpenXR-SDK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\nVTK-build > cmake -DVTK_MODULE_ENABLE_VTK_RenderingOpenXR:STRING=YES -DOpenXR_INCLUDE_DIR:PATH=\"path/to/OpenXR-SDK/include/openxr\" -DOpenXR_LIBRARY:FILEPATH=\"path/to/OpenXR-SDK-build/src/loader/Release/openxr_loader.lib\" path/to/VTK\nVTK-build > cmake --build . --config \"Release\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating Variables in ExprTk Symbol Table (C++)\nDESCRIPTION: Demonstrates the function signatures for creating string variables and generic variables in an ExprTk symbol table. These functions return a boolean indicating success or failure of variable creation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nbool create_stringvar(const std::string& name,const std::string&)\nbool create_variable (const std::string& name, const T&         )\n```\n\n----------------------------------------\n\nTITLE: Invoker Function Signature in C++\nDESCRIPTION: Function signature for invoking methods on VTK objects using method name and JSON arguments\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_serialization.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstatic nlohmann::json Invoke_vtkClassName(vtkInvoker* invoker, vtkObjectBase* objectBase, const char* methodName, nlohmann::json args)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basis Implementation Files\nDESCRIPTION: Defines and processes basis implementation files for HGrad, HDiv, HCurl, and Constant basis functions, encoding them as shader code strings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(file IN LISTS basis_files)\n  get_filename_component(basis_name \"${file}\" NAME_WE)\n  get_filename_component(basis_path \"${file}\" DIRECTORY)\n  string(REPLACE \"/\" \"_\" basis_var \"${basis_path}/${basis_name}\")\n  vtk_encode_string(\n    INPUT         \"${file}\"\n    NAME          \"${basis_var}\"\n    EXPORT_SYMBOL \"VTKFILTERSCELLGRID_NO_EXPORT\"\n    EXPORT_HEADER \"vtkFiltersCellGridModule.h\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source)\n  list(APPEND sources\n    \"${source}\")\n  list(APPEND private_headers\n    \"${header}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Build Configuration\nDESCRIPTION: Defines source files, headers, and UI files for the project. Configures include directories and enables automatic Qt MOC and UIC processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/TouchGestureViewer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Srcs\n  QtVTKTouchscreenRenderWindowsApp.cxx\n  QtVTKTouchscreenRenderWindows.cxx)\n\nset(Hdrs\n  QtVTKTouchscreenRenderWindows.h)\n\nset(UIs\n  QtVTKTouchscreenRenderWindows.ui)\n\ninclude_directories(\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\n```\n\n----------------------------------------\n\nTITLE: Subcommand Validation and Enabling Options\nDESCRIPTION: Configure validation, enabling, and disabling of subcommands and option groups\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\n.validate_positionals()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.validate_optional_arguments()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.disable()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.disabled_by_default()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.enabled_by_default()\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-MPI VTK Filters Parallel DIY2 Tests in CMake\nDESCRIPTION: Sets up non-MPI tests for VTK Filters Parallel DIY2 module. It includes various test cases for data processing and visualization that don't require MPI.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# non-mpi tests\nvtk_add_test_cxx(vtkFiltersParallelDIY2CxxTests non_mpi_tests\n  TestAdaptiveResampleToImage.cxx,NO_VALID\n  TestExtractSubsetWithSeed.cxx\n  TestOverlappingCellsDetector.cxx,NO_VALID\n  TestGenerateGlobalIds.cxx,NO_VALID\n  TestGenerateGlobalIdsSphere.cxx,NO_VALID\n  TestRedistributeDataSetFilter.cxx,NO_VALID\n  TestRedistributeDataSetFilterOnIOSS.cxx,NO_VALID\n  TestRedistributeDataSetFilterWithPolyData.cxx\n  TestStitchImageDataWithGhosts.cxx, NO_VALID\n  TestUniformGridGhostDataGenerator.cxx,NO_VALID)\nvtk_test_cxx_executable(vtkFiltersParallelDIY2CxxTests non_mpi_tests)\n```\n\n----------------------------------------\n\nTITLE: GPU Backend Configuration\nDESCRIPTION: Configures compilation settings for different GPU backends including CUDA, Kokkos CUDA, and Kokkos HIP. Sets appropriate language and compilation flags for device sources.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n_vtk_module_real_target(vtkm_accel_target VTK::AcceleratorsVTKmCore)\nvtkm_add_target_information(${vtkm_accel_target}\n                            DROP_UNUSED_SYMBOLS\n                            EXTENDS_VTKM\n                            MODIFY_CUDA_FLAGS\n                            DEVICE_SOURCES ${sources})\n\nlist(TRANSFORM nowrap_classes APPEND \".cxx\" OUTPUT_VARIABLE device_sources)\nif(VTK_USE_KOKKOS)\n  add_compile_definitions(VTK_USE_KOKKOS)\nendif()\nif (TARGET vtkm::cuda)\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\n  set_source_files_properties(${device_sources} PROPERTIES LANGUAGE CUDA)\n  vtk_module_set_properties(VTK::AcceleratorsVTKmCore CUDA_SEPARABLE_COMPILATION ON)\n\nelseif (TARGET vtkm::kokkos_cuda)\n  set_source_files_properties(${device_sources} PROPERTIES LANGUAGE CUDA)\n  kokkos_compilation(SOURCE ${device_sources})\n\nelseif (TARGET vtkm::kokkos_hip)\n  set_source_files_properties(${device_sources} PROPERTIES LANGUAGE HIP)\n  kokkos_compilation(SOURCE ${device_sources})\n\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK PLY Reader Face Textured with Reused TCoord Test in CMake\nDESCRIPTION: This snippet sets up a test case for VTK's PLY reader, specifically for testing face texturing with reused texture coordinates. It uses a specially prepared PLY file and a VTK PNG image as input.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOPLYCxxTests tests\n  TestPLYReaderFaceTexturedWithReusedTCoord,TestPLYReaderTextureUV.cxx FaceTexturedWithReusedTCoords.ply\n  vtk.png\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 OpenGL Render Window in VTK\nDESCRIPTION: Sets up X11-based OpenGL rendering for Linux platforms by adding the X11 renderer class and configuring it as the default render window implementation when not in headless mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_X)\n  list(APPEND classes vtkXOpenGLRenderWindow)\n  if (NOT VTK_DEFAULT_RENDER_WINDOW_HEADLESS)\n    vtk_object_factory_declare(\n      BASE vtkRenderWindow\n      OVERRIDE vtkOpenGLRenderWindow)\n    set(has_vtkRenderWindow_override 1)\n  endif ()\n\n```\n\n----------------------------------------\n\nTITLE: Adding VTK ImagingCore Module\nDESCRIPTION: This snippet uses the `vtk_module_add_module` CMake function to create the VTK::ImagingCore module and associate it with the classes defined in the `classes` variable. It depends on the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::ImagingCore\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Creating VTK FFMPEG Test Executable\nDESCRIPTION: Creates the test executable for all FFMPEG tests and applies any extra libraries if needed. This generates the actual executable for running the tests and conditionally links additional libraries like XAudio2 for Windows.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOFFMPEGCxxTests tests)\nif (extra_test_libs)\nset_property(TARGET vtkIOFFMPEGCxxTests APPEND PROPERTY LINK_LIBRARIES ${extra_test_libs})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Serializer with Size Constraints in C++\nDESCRIPTION: This snippet demonstrates how to create a custom JSON serializer that only accepts types with a size <= 32 bytes. It properly handles ADL (Argument-Dependent Lookup) by using nlohmann::to_json and nlohmann::from_json.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\n// You should use void as a second template argument\n// if you don't need compile-time checks on T\ntemplate<typename T, typename SFINAE = typename std::enable_if<sizeof(T) <= 32>::type>\nstruct less_than_32_serializer {\n    template <typename BasicJsonType>\n    static void to_json(BasicJsonType& j, T value) {\n        // we want to use ADL, and call the correct to_json overload\n        using nlohmann::to_json; // this method is called by adl_serializer,\n                                 // this is where the magic happens\n        to_json(j, value);\n    }\n\n    template <typename BasicJsonType>\n    static void from_json(const BasicJsonType& j, T& value) {\n        // same thing here\n        using nlohmann::from_json;\n        from_json(j, value);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Building Task Parallelism Example\nDESCRIPTION: Sets up the build configuration for the task parallelism example. Defines source files and creates an executable with VTK library linkage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ParallelProcessing/Generic/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TaskPara_SRCS\n  TaskParallelism.cxx\n  task1.cxx\n  task2.cxx)\n\nadd_executable(TaskParallelism\n  ${TaskPara_SRCS})\ntarget_link_libraries(TaskParallelism\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configure and Create Header\nDESCRIPTION: Generates a configuration header 'hpdf_config.h' during the build process, crucial for adapting the library build to its target system. This script uses a template file and produces a finalized header in the build directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/include/hpdf_config.h.cmake\n  ${PROJECT_BINARY_DIR}/include/hpdf_config.h\n)\n```\n\n----------------------------------------\n\nTITLE: General Purpose Mathematical Functions in VTK\nDESCRIPTION: Collection of mathematical utility functions for numeric manipulation, including absolute value, rounding, logarithmic, and trigonometric operations\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_5\n\nLANGUAGE: mathematical\nCODE:\n```\nabs(): Absolute value\navg(): Average of inputs\nceil(): Smallest integer greater or equal\nclamp(): Value range restriction\nfloor(): Largest integer less or equal\nlog(): Natural logarithm\nmax(): Maximum value\nmin(): Minimum value\nsqrt(): Square root\nround(): Nearest integer rounding\n```\n\n----------------------------------------\n\nTITLE: Linux Render Window Configuration Order\nDESCRIPTION: Defines the order of render window class attempts on Linux platforms\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build_settings.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n1. vtkXOpenGLRenderWindow\n2. vtkEGLRenderWindow\n3. vtkOSOpenGLRenderWindow\n```\n\n----------------------------------------\n\nTITLE: Setting MPI Processes for VTK Tests in CMake\nDESCRIPTION: This snippet sets the number of MPI processes to be used in running the VTK IO Parallel Xdmf3 tests. The 'set' command defines this configuration, which is crucial for parallel testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXdmf3/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkIOParallelXdmf3CxxTests-MPI_NUMPROCS 2)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Gesture Detection Refactoring\nDESCRIPTION: Improves multi-touch gesture recognition to allow more flexible and intuitive user interactions by enabling dynamic gesture switching without requiring finger lift\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/multitouch-gestures.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Multi-touch gesture detection improvements\n// Allows switching between gestures without lifting fingers\n// Enables more natural interaction patterns\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for GCC/Clang in CMake\nDESCRIPTION: Configures various compiler flags for GCC and Clang, including warning suppressions, optimizations, and standard compliance flags. It also handles Android NDK specific flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nei_add_cxx_compiler_flag(\"-Wshadow\")\n\nei_add_cxx_compiler_flag(\"-Wno-psabi\")\nei_add_cxx_compiler_flag(\"-Wno-variadic-macros\")\nei_add_cxx_compiler_flag(\"-Wno-long-long\")\n\nei_add_cxx_compiler_flag(\"-fno-check-new\")\nei_add_cxx_compiler_flag(\"-fno-common\")\nei_add_cxx_compiler_flag(\"-fstrict-aliasing\")\nei_add_cxx_compiler_flag(\"-wd981\")                    # disable ICC's \"operands are evaluated in unspecified order\" remark\nei_add_cxx_compiler_flag(\"-wd2304\")                   # disable ICC's \"warning #2304: non-explicit constructor with single argument may cause implicit type conversion\" produced by -Wnon-virtual-dtor\n\ncheck_cxx_compiler_flag(\"-strict-ansi\" COMPILER_SUPPORT_STRICTANSI)\nei_add_cxx_compiler_flag(\"-Qunused-arguments\")        # disable clang warning: argument unused during compilation: '-ansi'\n\nif(COMPILER_SUPPORT_STRICTANSI)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -strict-ansi\")\nelse()\n  ei_add_cxx_compiler_flag(\"-ansi\")\nendif()\n\nif(ANDROID_NDK)\n  ei_add_cxx_compiler_flag(\"-pie\")\n  ei_add_cxx_compiler_flag(\"-fPIE\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Classes for IOXdmf3 Module\nDESCRIPTION: This snippet defines a list of C++ classes that will be included in the VTK::IOXdmf3 module. These classes are related to the Xdmf3 file format for scientific data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkXdmf3ArrayKeeper\n  vtkXdmf3ArraySelection\n  vtkXdmf3DataSet\n  vtkXdmf3HeavyDataHandler\n  vtkXdmf3LightDataHandler\n  vtkXdmf3Reader\n  vtkXdmf3SILBuilder\n  vtkXdmf3Writer)\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Error Context with Loguru in C++\nDESCRIPTION: This C++ code snippet demonstrates how to use `ERROR_CONTEXT` to log the value of variables only if a crash occurs during the execution of a particular function. This is useful for debugging purposes, especially when diagnosing rare or hard-to-reproduce issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/README.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid process_file(const char* filename)\n\t{\n\t\tERROR_CONTEXT(\"filename\", filename);\n\t\tparse_file(filename); // Only if this crashes will filename be logged.\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK CMake Project\nDESCRIPTION: Sets the minimum required CMake version and initializes the VTK project. It also sets CMake policies and includes necessary CMake modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12...3.21 FATAL_ERROR)\n\nproject(VTK)\n\nif (POLICY CMP0127)\n  cmake_policy(SET CMP0127 NEW) # cmake_dependent_option changes\nendif ()\n\nif (POLICY CMP0154)\n  cmake_policy(SET CMP0154 NEW) # optimize custom commands in PRIVATE filesets\nendif ()\n\nset(vtk_cmake_dir \"${VTK_SOURCE_DIR}/CMake\")\nlist(INSERT CMAKE_MODULE_PATH 0 \"${vtk_cmake_dir}\")\ninclude(vtkCI)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Python Wrapped Module Names List\nDESCRIPTION: Creates a list of wrapped module names by iterating through vtk_python_wrapped_modules and extracting the INTERFACE_vtk_module_library_name property from each target.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(_vtk_python_wrapped_module_names)\nforeach (_vtk_python_module IN LISTS vtk_python_wrapped_modules)\n  get_property(_vtk_python_library_name\n    TARGET    \"${_vtk_python_module}\"\n    PROPERTY  \"INTERFACE_vtk_module_library_name\")\n  list(APPEND _vtk_python_wrapped_module_names \"${_vtk_python_library_name}\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebGPU Device with Custom Settings in C++\nDESCRIPTION: Demonstrates how to create and configure a WebGPU device with specific backend (Vulkan) and power preference settings (low power consumption). The code shows the initialization of vtkWebGPUConfiguration and its integration with vtkWebGPUComputePipeline.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-user.md#2025-04-21_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n// Creating a vtkWebGPUConfiguration\nvtkNew<vtkWebGPUConfiguration> wgpuConfig;\nwgpuConfig->SetBackend(vtkWebGPUConfiguration::BackendType::Vulkan);\nwgpuConfig->SetPowerPreference(vtkWebGPUConfiguration::PowerPreferenceType::LowPower);\n\n// Creating a vtkWebGPUComputePipeline to use custom device\nvtkNew<vtkWebGPUComputePipeline> computePipeline;\ncomputePipeline->SetWGPUConfiguration(wgpuConfig);\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel UnstructuredGrid Structure in VTK XML\nDESCRIPTION: XML structure for defining parallel unstructured grid data in VTK. Includes ghost levels and piece distribution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"PUnstructuredGrid\" ...>\n    <PUnstructuredGrid GhostLevel=\"0\">\n      <PPointData>...</PPointData>\n      <PCellData>...</PCellData>\n      <PPoints>...</PPoints>\n      <Piece Source=\"unstructuredGrid0.vtu\"/>\n      ...\n    </PUnstructuredGrid>\n  </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Checking Module Origins for VTK Classes in Python\nDESCRIPTION: Code to check which module each VTK class comes from. This helps when organizing imports in your application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor c in vtkObject, vtkConeSource, vtkRenderWindow:\n    print(f\"from {c.__module__} import {c.__name__}\")\n```\n\n----------------------------------------\n\nTITLE: Final Doxygen Configuration\nDESCRIPTION: Essential Doxygen configuration directives for the VTK documentation generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_10\n\nLANGUAGE: config\nCODE:\n```\nPROJECT_NAME         = VTK\n# PROJECT_NUMBER     =\nOUTPUT_DIRECTORY     = ../../../doc\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Loguru Library using CMake\nDESCRIPTION: This snippet sets up the third-party Loguru library within the VTK project by specifying license files and identifiers. It establishes the download location and necessary versioning for Loguru. The configuration ensures compliance with licensing requirements as part of the integration process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n    LICENSE_FILES\n      \"vtkloguru/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"LicenseRef-PublicDomain-loguru\"\n    SPDX_COPYRIGHT_TEXT\n      \"NONE\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/loguru.git@for/vtk-20230822-2.1.0\"\n    SPDX_CUSTOM_LICENSE_FILE\n      \"vtkloguru/LICENSE\"\n    SPDX_CUSTOM_LICENSE_NAME\n      \"PublicDomain-loguru\"\n    VERSION\n      \"2.1\"\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK H5Part Reader Module in CMake\nDESCRIPTION: This CMake snippet configures the VTK IOH5part module. It defines the class list, adds the module to the VTK build system, sets private definitions to use the H5 16-bit API, and adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/H5part/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkH5PartReader)\n\nvtk_module_add_module(VTK::IOH5part\n  CLASSES ${classes})\n\nvtk_module_definitions(VTK::IOH5part\n  PRIVATE\n    H5_USE_16_API)\nvtk_add_test_mangling(VTK::IOH5part)\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Checks and Handler Reset in ExprTk\nDESCRIPTION: Example demonstrating how to properly reset internal state of handlers before compilation and evaluation processes to avoid erroneous timeouts. It uses both compilation timeout and loop duration runtime checks with a collection of expressions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_110\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::expression<T> expression_t;\ntypedef exprtk::parser<T>     parser_t;\n\nmy_compilation_timeout_check compilation_timeout_check;\n\nmy_loop_rtc loop_rtc;\nloop_rtc.loop_set = loop_runtime_check_t::e_all_loops;\nloop_rtc.max_loop_iterations = 100000;\n\nparser_t parser;\nparser.register_loop_runtime_check(loop_rtc);\nparser.\n   register_compilation_timeout_check(compilation_timeout_check);\n\nconst auto compile_timeout_tp = []() {\n   const auto max_duration = std::chrono::seconds(5);\n   return std::chrono::steady_clock::now() + max_duration;\n};\n\nconst auto loop_timeout_tp = []() {\n   const auto max_duration = std::chrono::seconds(10);\n   return std::chrono::steady_clock::now() + max_duration;\n};\n\nconst std::vector<std::string> expressions =\n{\n   \"x + y / 2\",\n   \"sin(x) / cos(y) + 1\",\n   \"clamp(-1, sin(2 * pi * x) + cos(y / 2 * pi), +1)\"\n};\n\nfor (const auto& expr_str : expressions)\n{\n   // Reset the timeout for the compilation RTC\n   compilation_timeout_check\n      .set_timeout_time(compile_timeout_tp());\n\n   expression_t expression;\n\n   if (!parser.compile(large_expression_string, expression))\n   {\n      printf(\"Error: %s\\t\\n\", parser.error().c_str());\n      continue;\n   }\n\n   try\n   {\n      // Reset the timeout for the loop duration RTC\n      loop_rtc.set_timeout_time(loop_timeout_tp());\n\n      expression.value();\n   }\n   catch(std::runtime_error& exception)\n   {\n      printf(\"Exception: %s\\n Expression: %s\\n\",\n             exception.what(),\n             expr_str.c_str());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 3-Component Tuple Structure in C++\nDESCRIPTION: This snippet shows how to define a structure representing a 3-component tuple using floating point numbers. It's used to illustrate the array-of-structs (AOS) memory layout concept.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Tuple { float x; float y; float z; };\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOLegacy Module Classes\nDESCRIPTION: Defines a list of VTK reader and writer classes for various data structures including composite data, polydata, grids, and tables. These classes are then added to the VTK::IOLegacy module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Legacy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkCompositeDataReader\n  vtkCompositeDataWriter\n  vtkDataObjectReader\n  vtkDataObjectWriter\n  vtkDataReader\n  vtkDataSetReader\n  vtkDataSetWriter\n  vtkDataWriter\n  vtkGenericDataObjectReader\n  vtkGenericDataObjectWriter\n  vtkGraphReader\n  vtkGraphWriter\n  vtkLegacyCellGridReader\n  vtkLegacyCellGridWriter\n  vtkPixelExtentIO\n  vtkPolyDataReader\n  vtkPolyDataWriter\n  vtkRectilinearGridReader\n  vtkRectilinearGridWriter\n  vtkSimplePointsReader\n  vtkSimplePointsWriter\n  vtkStructuredGridReader\n  vtkStructuredGridWriter\n  vtkStructuredPointsReader\n  vtkStructuredPointsWriter\n  vtkTableReader\n  vtkTableWriter\n  vtkTreeReader\n  vtkTreeWriter\n  vtkUnstructuredGridReader\n  vtkUnstructuredGridWriter)\n```\n\n----------------------------------------\n\nTITLE: Setting Regularization for vtkQuadricDecimation in VTK\nDESCRIPTION: This snippet demonstrates how to enable and configure the regularization mode for `vtkQuadricDecimation` filter in VTK. Setting `Regularize` to true activates the regularization, and `Regularization` is set to a specific value (standard deviation for Gaussian distribution).\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n\"vtkQuadricDecimation::SetRegularize(true)\" \n\n```\n\nLANGUAGE: cpp\nCODE:\n```\n\"vtkQuadricDecimation::SetRegularization(value)\"\n```\n\n----------------------------------------\n\nTITLE: Using vtkVariant Special Type in Python\nDESCRIPTION: Example of using the vtkVariant class, which can hold any type of value. This demonstrates how special VTK types that aren't derived from vtkObjectBase are wrapped in Python.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> v1 = vtkVariant('hello')\n>>> v1\nvtkmodules.vtkCommonCore.vtkVariant('hello')\n>>> v2 = vtkVariant(3.14)\n>>> v2\nvtkmodules.vtkCommonCore.vtkVariant(3.14)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCASCADE Package for VTK\nDESCRIPTION: This snippet configures the OpenCASCADE package for VTK. It checks if the OpenCASCADE version is 7.8.0 or higher and selects the appropriate module targets accordingly. If required targets are missing, it triggers a fatal error. This ensures that all necessary components are linked for module VTK::IOOCCT.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OCCT/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE OpenCASCADE\n  FORWARD_VERSION_REQ EXACT\n  VERSION_VAR \"@OpenCASCADE_MAJOR_VERSION@.@OpenCASCADE_MINOR_VERSION@.@OpenCASCADE_MAINTENANCE_VERSION@\"\n)\n\nif (OpenCASCADE_VERSION VERSION_GREATER_EQUAL \"7.8.0\")\n  set(opencascade_req_targets\n    TKDESTEP\n    TKDEIGES\n    TKernel\n    TKMath\n    TKMesh\n    TKBRep\n    TKXSBase\n    TKLCAF\n    TKXCAF)\nelse()\n  set(opencascade_req_targets\n    TKSTEP\n    TKIGES\n    TKMesh\n    TKXDESTEP\n    TKXDEIGES)\nendif()\nset(opencascade_missing_targets)\nforeach (opencascade_req_target IN LISTS opencascade_req_targets)\n  if (NOT TARGET \"${opencascade_req_target}\")\n    list(APPEND opencascade_missing_targets\n      \"${opencascade_req_target}\")\n  endif ()\nendforeach ()\nif (opencascade_missing_targets)\n  string(REPLACE \";\" \", \" opencascade_missing_targets \"${opencascade_missing_targets}\")\n  message(FATAL_ERROR\n    \"Found OpenCASCADE (${OpenCASCADE_DIR}) is missing the following required \"\n    \"targets: ${opencascade_missing_targets}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Example Project with CMake\nDESCRIPTION: This CMake snippet configures how VTK examples are added to the build process. Depending on the project setup (binary directory, platform), it uses either function or macro to handle the example directories. It is pivotal for managing platform-specific examples such as Emscripten. Dependencies include a valid CMake setup with VTK source and build directories. The main parameters include the example directory name and platform specifications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12...3.16 FATAL_ERROR)\nproject(VTKExamples)\n\nif (VTK_BINARY_DIR)\n  function (add_example dir)\n    if (vtk_cmake_build_dir)\n      add_test(\n        NAME    \"VTKExample-${dir}\"\n        COMMAND \"${CMAKE_COMMAND}\"\n                \"-Dconfig=$<CONFIGURATION>\"\n                \"-Dgenerator=${CMAKE_GENERATOR}\"\n                \"-Dsource=${CMAKE_CURRENT_SOURCE_DIR}\"\n                \"-Dbinary=${CMAKE_CURRENT_BINARY_DIR}\"\n                \"-Dexample_dir=${dir}\"\n                \"-Dbuild_type=${CMAKE_BUILD_TYPE}\"\n                \"-Dshared=${BUILD_SHARED_LIBS}\"\n                \"-Dvtk_dir=${vtk_cmake_build_dir}\"\n                \"-Dctest=${CMAKE_CTEST_COMMAND}\"\n                \"-Dplatform=${CMAKE_GENERATOR_PLATFORM}\"\n                \"-Dtoolset=${CMAKE_GENERATOR_TOOLSET}\"\n                \"-Dvtk_binary_dir=${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\"\n                -P \"${CMAKE_CURRENT_LIST_DIR}/RunExample.cmake\")\n      set_property(TEST \"VTKExample-${dir}\" APPEND\n        PROPERTY\n          SKIP_REGULAR_EXPRESSION \"Skipping example\")\n    endif ()\n  endfunction ()\nelse ()\n  macro (add_example dir)\n    add_subdirectory(\"${dir}\")\n  endmacro ()\nendif ()\n\nif (ANDROID)\n  #add_example(Android)\nelif (APPLE_IOS)\n  #add_example(iOS)\nelif (EMSCRIPTEN)\n  if (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.13\")\n    add_example(Emscripten/Cxx/AsyncClipper)\n    add_example(Emscripten/Cxx/Cone)\n    add_example(Emscripten/Cxx/ConeFullScreen)\n    add_example(Emscripten/Cxx/MultiCone)\n    add_example(Emscripten/Cxx/WrappedAsyncClipper)\n    add_example(Emscripten/Cxx/WrappedMace)\n  endif ()\nelse ()\n  add_example(AMR/Cxx)\n  add_example(Annotation/Cxx/LabeledMesh)\n  add_example(Build/vtkMy)\n  add_example(Charts/Cxx)\n  add_example(DataManipulation/Cxx)\n  #add_example(GUI/Cocoa) # xcode project\n  add_example(GUI/Qt/FourPaneViewer)\n  add_example(GUI/Qt/ImageViewer)\n  add_example(GUI/Qt/SimpleView)\n  add_example(GUI/Qt/TouchGestureViewer)\n  add_example(GUI/Qt/MinimalQtVTKApp)\n  add_example(GUI/QML/QtQuickProperty)\n  add_example(GUI/QML/QtQuickBoxWidget)\n  add_example(GUI/QML/QtQuickChartsOn3DScene)\n  add_example(GUI/QML/QtQuickCone)\n  add_example(IO/Cxx)\n  add_example(ImageProcessing/Cxx)\n  add_example(Infovis/Cxx)\n  add_example(Medical/Cxx)\n  add_example(Modelling/Cxx)\n  add_example(MultiBlock/Cxx)\n  add_example(ParallelProcessing/Generic/Cxx)\n\n  add_example(Modules/UsingVTK)\n  add_example(Modules/Wrapping)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up 2-Process MPI Tests\nDESCRIPTION: Configures MPI tests that specifically require 2 processes for execution, including test cases for non-blocking communication and process testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtkParallelMPICxxTests-MPI_NUMPROCS 2)\nvtk_add_test_mpi(vtkParallelMPICxxTests-MPI 2_proc_tests\n  TestNonBlockingCommunication.cxx\n  TestProcess.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOLSDyna Module Classes\nDESCRIPTION: Defines and configures the classes for the VTK IOLSDyna module, separating them into wrapped and non-wrapped categories. The configuration includes LS-DYNA related classes for file reading and metadata handling.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LSDyna/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  LSDynaFamily\n  LSDynaMetaData\n  vtkLSDynaReader\n  vtkLSDynaSummaryParser)\n\nset(nowrap_classes\n  vtkLSDynaPart\n  vtkLSDynaPartCollection)\n\nvtk_module_add_module(VTK::IOLSDyna\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes})\nvtk_add_test_mangling(VTK::IOLSDyna)\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Dispatch Options for VTK in CMake\nDESCRIPTION: Sets up CMake options for VTK's array dispatch functionality, including options for different array types and dispatch warnings. These options control which array types are included in the dispatcher and whether warnings are printed on dispatch failures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_DISPATCH_AOS_ARRAYS \"Include array-of-structs vtkDataArray subclasses in dispatcher.\" ON)\noption(VTK_DISPATCH_SOA_ARRAYS \"Include struct-of-arrays vtkDataArray subclasses in dispatcher.\" OFF)\noption(VTK_DISPATCH_TYPED_ARRAYS \"Include vtkTypedDataArray subclasses (e.g. old mapped arrays) in dispatcher.\" OFF) # VTK_DEPRECATED_IN_9_5_0\n\noption(VTK_DISPATCH_AFFINE_ARRAYS \"Include implicit vtkDataArray subclasses based on an affine function backend in dispatcher\" OFF)\noption(VTK_DISPATCH_CONSTANT_ARRAYS \"Include implicit vtkDataArray subclasses based on a constant backend in dispatcher\" OFF)\noption(VTK_DISPATCH_STD_FUNCTION_ARRAYS \"Include implicit vtkDataArray subclasses based on std::function in dispatcher\" OFF)\noption(VTK_DISPATCH_STRUCTURED_POINT_ARRAYS \"Include implicit vtkDataArray subclasses based on structured point backend dispatcher\" ON)\n\noption(VTK_WARN_ON_DISPATCH_FAILURE \"If enabled, vtkArrayDispatch will print a warning when a dispatch fails.\" OFF)\n\nmark_as_advanced(\n  VTK_DISPATCH_AOS_ARRAYS\n  VTK_DISPATCH_SOA_ARRAYS\n  VTK_DISPATCH_TYPED_ARRAYS # VTK_DEPRECATED_IN_9_5_0\n\n  VTK_DISPATCH_AFFINE_ARRAYS\n  VTK_DISPATCH_CONSTANT_ARRAYS\n  VTK_DISPATCH_STD_FUNCTION_ARRAYS\n  VTK_DISPATCH_STRUCTURED_POINT_ARRAYS\n\n  VTK_WARN_ON_DISPATCH_FAILURE)\n\noption(VTK_BUILD_SCALED_SOA_ARRAYS \"Include struct-of-arrays with scaled vtkDataArray implementation.\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK::ViewsInfovis Module in CMake\nDESCRIPTION: This snippet defines a list of class names to be included in the VTK::ViewsInfovis module. It covers various visualization components such as graph layouts, heatmaps, and interaction styles.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Infovis/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkApplyColors\n  vtkApplyIcons\n  vtkDendrogramItem\n  vtkGraphItem\n  vtkGraphLayoutView\n  vtkHeatmapItem\n  vtkHierarchicalGraphPipeline\n  vtkHierarchicalGraphView\n  vtkIcicleView\n  vtkInteractorStyleAreaSelectHover\n  vtkInteractorStyleTreeMapHover\n  vtkParallelCoordinatesHistogramRepresentation\n  vtkParallelCoordinatesRepresentation\n  vtkParallelCoordinatesView\n  vtkRenderedGraphRepresentation\n  vtkRenderedHierarchyRepresentation\n  vtkRenderedRepresentation\n  vtkRenderedSurfaceRepresentation\n  vtkRenderedTreeAreaRepresentation\n  vtkRenderView\n  vtkSCurveSpline\n  vtkTanglegramItem\n  vtkTreeAreaView\n  vtkTreeHeatmapItem\n  vtkTreeMapView\n  vtkTreeRingView\n  vtkViewUpdater\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA-specific Settings for VTKm Tests\nDESCRIPTION: Sets up CUDA-specific configuration for tests when CUDA is available. This includes setting the language to CUDA for source files, retrieving CUDA flags, and suppressing certain nvlink warnings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  foreach(src IN LISTS tests)\n    string(REPLACE \",\" \";\" src ${src})\n    list(GET src 0 src)\n\n    set_source_files_properties(${src} PROPERTIES LANGUAGE CUDA)\n  endforeach()\n\n  #the tests aren't scoped as a child directory of vtkAcceleratorsVTKmDataModel\n  #so we need to redo this logic\n  vtkm_get_cuda_flags(CMAKE_CUDA_FLAGS)\n\n  # Temporarily suppress \"has address taken but no possible call to it\" warnings,\n  # until we figure out its implications.\n  # We are disabling all warnings as nvlink has no known way to suppress\n  # individual warning types.\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Result Variables with ExprTk Symbol Table in C++\nDESCRIPTION: Example demonstrating how to register variables with an ExprTk symbol table to store calculation results from an expression. After expression evaluation, the registered variables are updated with the computed values.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_83\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\ntypedef exprtk::parser<double>       parser_t;\n\nconst std::string expression_string =\n   \" var x := 123.456;     \"\n   \" var s := 'ijk';       \"\n   \" result0 := x + 78.90; \"\n   \" result1 := s + '123'  \";\n\ndouble      result0;\nstd::string result1;\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable (\"result0\",result0);\nsymbol_table.add_stringvar(\"result1\",result1);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.compile(expression_string,expression);\n\nexpression.value();\n\nprintf(\"Result0: %15.5f\\n\", result0        );\nprintf(\"Result1: %s\\n\"    , result1.c_str());\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Assignment Operators in ExprTk Parser (C++)\nDESCRIPTION: Demonstrates how to enable or disable all assignment operators at once, as well as enabling/disabling specific assignment operators like addition assignment.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_79\n\nLANGUAGE: C++\nCODE:\n```\nT x = T(0);\n\nparser_t       parser;\nexpression_t   expression;\nsymbol_table_t symbol_table;\n\nsymbol_table.add_variable(\"x\",x);\n\nexpression.register_symbol_table(symbol_table);\n\nparser.settings().disable_all_assignment_ops();\n\nparser\n   .compile(\"x := 3\",expression); // compilation failure\n\nparser.settings().enable_all_assignment_ops();\n\nparser\n   .compile(\"x := 3\",expression); // compilation success\n\n// Disabling specific assignment operator\nparser.settings()\n   .disable_assignment_operation(settings_t::e_assign_addass);\n\nparser\n   .compile(\"x += 3\",expression); // failure\n\nparser.settings()\n   .enable_assignment_operation(settings_t::e_assign_addass);\n\nparser\n   .compile(\"x += 3\",expression); // success\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Windows\nDESCRIPTION: This CMake command sets a target property for the png library on Windows. It defines the PNG_BUILD_DLL symbol, which is typically used when building a DLL.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/vtkpng/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  set_target_properties(png\n    PROPERTIES\n      DEFINE_SYMBOL PNG_BUILD_DLL)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Test Cases in CMake\nDESCRIPTION: Defines a comprehensive list of XML test cases with various configuration options for VTK's IOXML testing suite. Includes conditional test additions and specific test data requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  TestAMRXMLIO.cxx,NO_VALID\n  TestDataObjectXMLIO.cxx,NO_VALID\n  TestMultiBlockDataSetWithWriteWithEmptyPolyData.cxx,NO_DATA,NO_VALID\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLTF Reader Animation Tests in CMake\nDESCRIPTION: Defines tests for the GLTF reader's animation capabilities including time-based animations, animation ranges, morphing, skinning, and multiple animations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderAnimation,TestGLTFReaderAnimation.cxx 200 DATA{../Data/glTF/BoxAnimated/BoxAnimated.gltf,BoxAnimated0.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderAnimationRange,TestGLTFReaderAnimationRange.cxx 1.807 DATA{../Data/glTF/BoxAnimated/BoxAnimated.gltf,BoxAnimated0.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderMorphing,TestGLTFReaderAnimation.cxx 200 DATA{../Data/glTF/AnimatedMorphCube/AnimatedMorphCube.gltf,AnimatedMorphCube.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderSkinning,TestGLTFReaderAnimation.cxx 200 DATA{../Data/glTF/SimpleSkin/SimpleSkin.gltf}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderMultipleAnimations,TestGLTFReaderAnimation.cxx 75 DATA{../Data/glTF/InterpolationTest/InterpolationTest.gltf,interpolation.bin,InterpolationTest_data.bin}\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating CLI11 with Rang for Colored Terminal Output\nDESCRIPTION: This snippet demonstrates how to combine CLI11 with the Rang library to add color to terminal output. It sets up error handling with colored output and resets the terminal style on exit.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_45\n\nLANGUAGE: cpp\nCODE:\n```\nstd::atexit([](){std::cout << rang::style::reset;});\ntry {\n    app.parse(argc, argv);\n} catch (const CLI::ParseError &e) {\n    std::cout << (e.get_exit_code()==0 ? rang::fg::blue : rang::fg::red);\n    return app.exit(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Executable with Link Libraries\nDESCRIPTION: Creates an executable named vtkmyEx2 from vtkmyEx2.cxx source file and links it with required VTK libraries for rendering and filtering\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Examples/Cxx/Ex2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(vtkmyEx2 vtkmyEx2.cxx)\ntarget_link_libraries(vtkmyEx2\n  VTKMY::Unsorted\n  VTK::FiltersSources VTK::RenderingCore VTK::RenderingOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Converting VTK Headers to Doxygen Format with Perl\nDESCRIPTION: The `doc_header2doxygen.pl` script converts VTK header files to a format compatible with Doxygen. This script facilitates the automatic generation of cross-referenced documentation by reformating code comments to the Doxygen style.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\ndoc_header2doxygen.pl\n```\n\n----------------------------------------\n\nTITLE: VTK Object Deserialization Methods\nDESCRIPTION: Method references for deserializing JSON state into VTK objects using vtkObjectManager. Includes UpdateObjectsFromStates and GetObjectAtId for object retrieval.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_manager.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nvtkObjectManager::UpdateObjectsFromStates\\nGetObjectAtId(identifier)\n```\n\n----------------------------------------\n\nTITLE: Building LZ4 - Installation using vcpkg - C\nDESCRIPTION: Instructions for downloading and installing the LZ4 library using the vcpkg dependency manager. This method allows for easy integration of the LZ4 library within projects that utilize vcpkg for managing their dependencies. The commands guide users through cloning the vcpkg repository, bootstrapping the tool, and installing the LZ4 library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg.exe install lz4\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific VTK Release\nDESCRIPTION: Commands to list available release tags and check out a specific VTK release version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/download.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout v6.2.0\n$ git tag\n```\n\n----------------------------------------\n\nTITLE: Adding New Basis Function Implementation Steps\nDESCRIPTION: Steps required to add support for a new basis function (like 15-node tetrahedron) to DG cells in VTK, including file modifications and registration process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// 1. Add basis function headers in Filters/CellGrid/Basis\n// Example: TetF2Basis.h and TetF2Gradient.h in Filters/CellGrid/Basis/HGrad\n\n// 2. Update CMakeLists.txt\n\n// 3. Register in appropriate operator file (e.g., vtkDGHGradOperators.cxx)\nclass vtkDGHGradOperators {\n  static void RegisterOperators() {\n    // Add new functions here\n  }\n}\n\n// 4. Update IOSS reader support in vtkIOSSCellGridUtilities.cxx\n\n// 5. Add tests with sample data\n```\n\n----------------------------------------\n\nTITLE: Structured Points Dataset Format in VTK\nDESCRIPTION: Format specification for structured points datasets supporting 1D, 2D, and 3D data. Requires dimensions, origin coordinates, and spacing values.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDATASET STRUCTURED_POINTS\nDIMENSIONS nx ny nz\nORIGIN x y z\nSPACING sx sy yz\n```\n\n----------------------------------------\n\nTITLE: Serializing Non-Default Constructible Types in C++\nDESCRIPTION: Shows how to serialize and deserialize non-default constructible or non-copyable types by specializing adl_serializer with a custom from_json method.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nstruct move_only_type {\n    move_only_type() = delete;\n    move_only_type(int ii): i(ii) {}\n    move_only_type(const move_only_type&) = delete;\n    move_only_type(move_only_type&&) = default;\n\n    int i;\n};\n\nnamespace nlohmann {\n    template <>\n    struct adl_serializer<move_only_type> {\n        // note: the return type is no longer 'void', and the method only takes\n        // one argument\n        static move_only_type from_json(const json& j) {\n            return {j.template get<int>()};\n        }\n\n        // Here's the catch! You must provide a to_json method! Otherwise, you\n        // will not be able to convert move_only_type to json, since you fully\n        // specialized adl_serializer on that type\n        static void to_json(json& j, move_only_type t) {\n            j = t.i;\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Command with ctest\nDESCRIPTION: This snippet demonstrates how to use ctest to retrieve the exact command used to run a specific unit test named 'FooUnitTest'.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nctest -R FooUnitTest -N -VV\n```\n\n----------------------------------------\n\nTITLE: Serving VTK Build with Python HTTP Server\nDESCRIPTION: This snippet shows how to serve the built VTK project using Python's built-in HTTP server module. It involves navigating to the build output directory and launching a server on port 8000. Python is required to run this server. After starting the server, the VTK output can be accessed through a web browser by navigating to the localhost address.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd out/build\npython3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial HDF IO Tests in VTK using CMake\nDESCRIPTION: Adds C++ tests for VTK's HDF IO module including reader/writer tests with temporal data support. Sets up tests with specific flags like NO_VALID and NO_OUTPUT to control test validation and output behavior.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/HDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOHDFCxxTests tests\n  TestHDFReader.cxx,NO_VALID,NO_OUTPUT\n  TestHDFReaderTemporal.cxx,NO_VALID,NO_OUTPUT\n  TestHDFWriter.cxx,NO_VALID\n  TestHDFWriterTemporal.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Printing to stdout with fmt library in C++\nDESCRIPTION: Basic example of using fmt::print to output a string to stdout. This demonstrates the simplest usage of the fmt library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/core.h>\n\nint main() {\n  fmt::print(\"Hello, world!\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Native Library\nDESCRIPTION: In this snippet, the sources for the native library are defined. It includes both the main source file and the native app glue source from the Android NDK. This is important for building the shared library correctly with all required files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/jni/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  main.cxx\n  ${CMAKE_ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c\n)\n```\n\n----------------------------------------\n\nTITLE: Chaining Validator Operations in CLI11 (C++)\nDESCRIPTION: This code snippet shows how to chain validator operations to configure a validator's behavior in a concise way. It creates a range validator, sets its description, deactivates it initially, and assigns it the name \"range\". This allows for later activation through the name.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nopt->check(CLI::Range(10,20).description(\"range is limited to sensible values\").active(false).name(\"range\"));\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests in VTK with CMake\nDESCRIPTION: This snippet uses the vtk_add_test_cxx CMake function to specify a set of C++ test files for the vtkFiltersSelection module of the VTK project. The tests included are based on file names related to 2D and 3D cell distance and linear selection. Dependencies like NO_VALID indicate possible test-specific configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Selection/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersSelectionCxxTests tests\n  NO_VALID\n  TestCellDistanceSelector2D.cxx\n  TestCellDistanceSelector3D.cxx\n  TestLinearSelector2D.cxx\n  TestLinearSelector3D.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding PDB Reader Test to VTK Test Suite\nDESCRIPTION: Adds the PDB reader test to the VTK IO Chemistry C++ test suite with specific options. This test uses a PDB data file (6VWW.pdb) and is configured with NO_VALID flag.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOChemistryCxxTests tests\n  TestPDBReader.cxx NO_VALID DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/6VWW.pdb}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding and Defining VTK Module in CMake\nDESCRIPTION: This portion details the addition of a VTK module using vtk_module_add_module, supplying it with lists of classes, sources, headers, and private headers. The module definitions and test mangling are configured with vtk_module_definitions and vtk_add_test_mangling. Dependencies include VTK CMake macros and OpenGL utility integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingParallel\n  CLASSES ${classes}\n  SOURCES ${sources}\n  HEADERS ${headers}\n  PRIVATE_HEADERS ${private_headers})\n\nvtk_module_definitions(VTK::RenderingParallel\n  PRIVATE\n    VTK_OPENGL2)\nvtk_add_test_mangling(VTK::RenderingParallel)\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking VTK::IOPDAL Module\nDESCRIPTION: Adds the VTK::IOPDAL module with the specified classes and links it with the previously configured PDAL libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOPDAL\n  CLASSES ${classes})\nvtk_module_link(VTK::IOPDAL\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    ${pdal_libraries})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for OpenTURNS Integration\nDESCRIPTION: Sets up the VTK object factory to override vtkScatterPlotMatrix with vtkOTScatterPlotMatrix and configures related source and header files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkScatterPlotMatrix\n  OVERRIDE vtkOTScatterPlotMatrix)\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKFILTERSOPENTURNS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Checking for Colorspace Extensions in C\nDESCRIPTION: Demonstrates how to check for the existence of libjpeg-turbo's colorspace extensions at compile time using a preprocessor macro.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_EXTENSIONS\n// Colorspace extensions are supported\n#endif\n```\n\n----------------------------------------\n\nTITLE: Setting Up Headers and Sources for DICOM Module\nDESCRIPTION: The setup declares header and source files required for the DICOM module. Source files include DICOMAppHelper.cxx, DICOMFile.cxx, and DICOMParser.cxx, while header files cover several DICOM-related headers including the generated DICOMCMakeConfig.h.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/DICOMParser/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  DICOMAppHelper.h\n  DICOMCallback.h\n  DICOMConfig.h\n  DICOMFile.h\n  DICOMParser.h\n  DICOMParserMap.h\n  DICOMTypes.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/DICOMCMakeConfig.h\")\n\nset(sources\n  DICOMAppHelper.cxx\n  DICOMFile.cxx\n  DICOMParser.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Module Components\nDESCRIPTION: Sets configuration flags for various module components like Catalyst, Exodus, CGNS, and determines which classes to include based on availability\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/vtkioss/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SEACAS_HAVE_CATALYST2 OFF)\nif (TARGET VTK::catalyst)\n  set(SEACAS_HAVE_CATALYST2 ON)\nendif ()\n\nset(SEACAS_HAVE_EXODUS ON)\nset(SEACAS_HAVE_CGNS ON)\nset(SEACAS_HAVE_EXONULL OFF)\n```\n\n----------------------------------------\n\nTITLE: CMake Integration for VTK Module System\nDESCRIPTION: Adapts the LZ4 build process to work with VTK's modular build configuration, allowing seamless embedding\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/README.kitware.md#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# CMake configuration for embedding LZ4 into VTK\n```\n\n----------------------------------------\n\nTITLE: Defining Shader Files - CMake\nDESCRIPTION: This snippet sets the list of shader files used for rendering with OpenGL, which are required for defining the graphics pipeline in volume rendering operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(shader_files\n  shaders/raycasterfs.glsl\n  shaders/raycastervs.glsl\n  shaders/vtkglProjectedTetrahedraFS.glsl\n  shaders/vtkglProjectedTetrahedraVS.glsl)\n```\n\n----------------------------------------\n\nTITLE: Checking Video for Windows Capture Support in VTK\nDESCRIPTION: Demonstrates how to check for Video for Windows capture support in VTK. The macro has been renamed and moved to vtkIOVideoConfigure.h, but the old name is provided for compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <vtkIOVideoConfigure.h>\n\n#ifdef VTK_USE_VIDEO_FOR_WINDOWS_CAPTURE\n  // Video for Windows capture is supported\n#endif\n\n#ifdef VTK_USE_VFW_CAPTURE\n  // Old macro name, still supported for compatibility\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring SPDX for Third-Party Modules in CMakeLists.txt\nDESCRIPTION: This snippet shows how to configure SPDX information for third-party modules in a CMakeLists.txt file using the vtk_module_third_party call. It includes license, copyright, and download location information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/spdx_and_sbom.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/repo.git@hash_or_tag\"\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK Test Data Configuration in CMake\nDESCRIPTION: This snippet initializes the VTK test data by specifying a variety of data files including raster, jpeg, png, ply, and others. These files can be used in testing various aspects of the VTK system, such as GIS processing, texture mapping, and skybox handling. No external dependencies are needed, but the specified data files must exist at the given locations. Inputs are data files and outputs are configuration paths within CMake.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/GIS/raster.tif\n  Data/autoshop.jpg\n  Data/anisotropyTex.png\n  Data/bunny.ply\n  Data/dgHexahedra.dg\n  Data/clouds.jpeg\n  Data/dragon.ply\n  Data/normalMapping.png\n  Data/skybox-nx.jpg\n  Data/skybox-ny.jpg\n  Data/skybox-nz.jpg\n  Data/skybox-px.jpg\n  Data/skybox-py.jpg\n  Data/skybox-pz.jpg\n  Data/skybox/,REGEX:.*\\.jpg\n  Data/spiaggia_di_mondello_1k.hdr\n  Data/,REGEX:vtk_.*\\.png\n  Data/wintersun.jpg)\n```\n\n----------------------------------------\n\nTITLE: Creating an Assert Handler in ExprTk\nDESCRIPTION: Implementation of a custom assert handler for ExprTk expressions. The handler processes assertion failures by outputting the condition, message, ID, and code offset where the assertion failed.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_108\n\nLANGUAGE: C++\nCODE:\n```\nstruct my_assert_handler final : public exprtk::assert_check\n{\n   void handle_assert(const assert_context& ctxt) override\n   {\n      printf(\"condition: [%s] \\n\", ctxt.condition.c_str());\n      printf(\"message:   [%s] \\n\", ctxt.message  .c_str());\n      printf(\"id:        [%s] \\n\", ctxt.id       .c_str());\n      printf(\"offset:    [%lu]\\n\", ctxt.offet            );\n      // throw std::runtime_error(.....); \n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK 3DS Importer Tests\nDESCRIPTION: Sets up tests for 3DS file import functionality and OBJ export verification.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImportCxxTests tests\n  NO_VALID\n  TestImport3DSExportOBJ,TestImportExportOBJ.cxx\n  DATA{../../../../Testing/Data/iflamigm.3ds}\n  ${TEMP}/iflamigm\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Buffers to Internal Lists in VTK WebGPU Compute API\nDESCRIPTION: This code snippet shows how the `AddBuffer()` method in the VTK WebGPU compute API adds the buffer and its associated WebGPU buffer to internal lists. These lists are used later by `ReadBufferFromGPU()` to retrieve the buffer size and the `wgpu::Buffer` for mapping operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// Adding the buffers to the lists\nthis->Buffers.push_back(buffer);\nthis->WGPUBuffers.push_back(wgpuBuffer);\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Components\nDESCRIPTION: This snippet uses `find_package` to locate VTK and its required components, such as CommonCore, CommonColor, ChartsCore, GUISupportQtQuick, and RenderingContextOpenGL2. It checks if VTK is found and handles the case where it's not, displaying a message and returning from the CMake script.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickChartsOn3DScene/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    CommonColor\n    ChartsCore\n    GUISupportQtQuick\n    RenderingContextOpenGL2)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping ${MYNAME}: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using FileOnDefaultPath Transform with Configuration Option\nDESCRIPTION: Example of using the FileOnDefaultPath transform to look for configuration files in a default path as well as the current one.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\napp.set_config(\"--config\")->transform(CLI::FileOnDefaultPath(\"/to/default/path/\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Library as VTK Third-Party Module in CMake\nDESCRIPTION: Sets up TIFF library as a third-party dependency for VTK, specifying license information, version details, and build options. It provides both internal build configuration (with SPDX metadata) and external linking options when the system TIFF library is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtktiff/LICENSE.md\"\n    SPDX_LICENSE_IDENTIFIER\n      \"libtiff\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 1988-1997 Sam Leffler\"\n      \"Copyright (c) 1991-1997 Silicon Graphics, Inc.\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/tiff.git@for/vtk-20241212-4.7.0\"\n    VERSION\n      \"4.7.0\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE TIFF\n    TARGETS TIFF::TIFF\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenVR Input Files\nDESCRIPTION: This snippet specifies the installation of OpenVR input files to a designated data root directory within the package.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  FILES ${openvr_input_files}\n  DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/vr_actions/\"\n  COMPONENT   runtime\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOLAS Module with LibLAS Dependencies\nDESCRIPTION: Sets up the VTK IOLAS module with libLAS dependencies and configures version-specific Boost components. Handles different dependency requirements based on libLAS version, particularly for versions before 1.8.2 or specifically for version 1.8.2b1.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LAS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE libLAS)\n\nset(classes\n  vtkLASReader)\n\nvtk_module_add_module(VTK::IOLAS\n  CLASSES ${classes})\n\nset(liblas_boost_dependencies)\nif (libLAS_VERSION VERSION_LESS \"1.8.2\" OR\n    libLAS_VERSION STREQUAL \"1.8.2b1\")\n  if (libLAS_VERSION STREQUAL \"1.8.2b1\")\n    set(boost_components\n      iostreams program_options serialization thread)\n  else ()\n    set(boost_components\n      program_options thread system iostreams filesystem)\n  endif ()\n  vtk_module_find_package(PRIVATE_IF_SHARED\n    PACKAGE Boost\n    COMPONENTS ${boost_components}\n    FORWARD_VERSION_REQ EXACT\n    VERSION_VAR         \"@Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@.@Boost_SUBMINOR_VERSION@\")\n  foreach (boost_component IN LISTS boost_components)\n    list(APPEND liblas_boost_dependencies\n      \"Boost::${boost_component}\")\n  endforeach ()\nendif ()\n\nvtk_module_link(VTK::IOLAS\n  PRIVATE\n    # XXX(liblas-1.8.2): Use these when the minimum version is 1.8.2+.\n    # Currently, the imported target names vary based on the platform. In\n    # addition, the include interface is not set up properly. See\n    # https://github.com/libLAS/libLAS/pull/153.\n    # las las_c\n    ${libLAS_LIBRARIES}\n    ${liblas_boost_dependencies})\nvtk_module_include(VTK::IOLAS\n  PRIVATE\n    ${libLAS_INCLUDE_DIRS})\nvtk_add_test_mangling(VTK::IOLAS)\n```\n\n----------------------------------------\n\nTITLE: Configuring HyperTreeGrid Threshold Memory Strategy\nDESCRIPTION: Defines three memory representation strategies for vtkHyperTreeGridThreshold, allowing flexible output memory management during thresholding operations. Provides options for shallow copying, indexed array generation, and full reconstruction.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-MemoryStrategiesHTGThreshold.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nenum MemoryStrategy {\n  MaskInput = 0,\n  CopyStructureAndIndexArrays = 1,\n  DeepThreshold = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Using BoundsFunctor with VTK SMP Tools\nDESCRIPTION: Example showing how to use the BoundsFunctor with vtkSMPTools::For to compute bounds in parallel.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n  vtkFloatArray* ptsArray = vtkFloatArray::SafeDownCast(pts->GetData());\n  BoundsFunctor calcBounds(ptsArray);\n  vtkSMPTools::For(0, numPts, calcBounds);\n  std::array<double,6>& bds = calcBounds.Bounds;\n```\n\n----------------------------------------\n\nTITLE: Python VTK Import Example\nDESCRIPTION: Example showing how the vtk import actually provides the vtkmodules.all module through internal remapping.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import vtk\n>>> vtk.__name__\n'vtkmodules.all'\n```\n\n----------------------------------------\n\nTITLE: Including Qt Module and Finding Package\nDESCRIPTION: Includes Qt configuration, finds the appropriate Qt version package with Widgets and Sql components, and sets version requirements\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(vtkQt)\nvtk_module_find_package(\n  PACKAGE     \"Qt${vtk_qt_major_version}\"\n  COMPONENTS  Widgets Sql\n  FORWARD_VERSION_REQ MINOR\n  VERSION_VAR         \"Qt${vtk_qt_major_version}_VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationUnsignedLongKey in VTK XML\nDESCRIPTION: Illustrates the XML structure for defining a vtkInformationUnsignedLongKey with a single unsigned long value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"UnsignedLong\" location=\"XMLTestKey\">\n  9\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serialization Helper Sources - CMake\nDESCRIPTION: This snippet conditionally appends source files related to serialization helpers if VTK wrapping for serialization is enabled. It prepares the necessary files for supporting serialization of VTK data arrays.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Hand written (de)serialization routines\nset(serialization_helper_sources)\nif (VTK_WRAP_SERIALIZATION)\n  list(APPEND serialization_helper_sources\n    vtkDataArraySerDesHelper.cxx\n    vtkStringArraySerDesHelper.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::ViewsInfovis Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK::ViewsInfovis module using the previously defined classes and sets up test mangling for the module. It uses VTK-specific CMake functions for module configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Infovis/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::ViewsInfovis\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ViewsInfovis)\n```\n\n----------------------------------------\n\nTITLE: Find VTK package\nDESCRIPTION: This snippet uses the `find_package` command to locate the VTK library and specifies the required components (CommonCore, CommonExecutionModel) and optional components (RenderingOpenGL2, Python).\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    CommonExecutionModel\n  OPTIONAL_COMPONENTS\n    RenderingOpenGL2\n    Python)\n```\n\n----------------------------------------\n\nTITLE: Handling VTK-m Compatibility Issue\nDESCRIPTION: Conditionally adds a test that fails with VTK-m due to a known bug (#804). The test is only included when VTK_ENABLE_VTKM_OVERRIDES is disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# This test fails on vtk-m due to bug #804 (vtk/vtkm)\n# TODO: Remove from condition when fixed\nif (NOT VTK_ENABLE_VTKM_OVERRIDES)\n  vtk_add_test_cxx(vtkFiltersCoreCxxTests no_vtkm_tests\n    TestThresholdComponents.cxx,NO_VALID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using the integrate Helper Function in ExprTk\nDESCRIPTION: Demonstrates how to perform numerical integration of a single-variable expression over a specified range using Simpson's rule. Shows two approaches: integrating with a variable reference and integrating using the variable name as a string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_94\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\nconst std::string expression_string = \"sqrt(1 - (x^2))\";\n\nT x = T(0);\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.compile(expression_string,expression);\n\n....\n\n// Integrate in domain [-1,1] using a reference to x variable\nT area1 = exprtk::integrate(expression, x, T(-1), T(1));\n\n// Integrate in domain [-1,1] using name of x variable\nT area2 = exprtk::integrate(expression, \"x\", T(-1), T(1));\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Width and Line Width Independence in VTK\nDESCRIPTION: These new methods in the vtkProperty class allow for independent control of edge thickness. SetEdgeWidth() sets the thickness of cell edges, while SetUseLineWidthForEdgeThickness() determines whether to use LineWidth or EdgeWidth for edge thickness.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-edge-width-property.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkProperty::SetEdgeWidth(float)\nvtkProperty::SetUseLineWidthForEdgeThickness(bool)\n```\n\n----------------------------------------\n\nTITLE: Parsing HDF5 Library Version Information using CMake\nDESCRIPTION: Extracts version information from lt_vers.am file and calculates SOVERSION numbers for different HDF5 library components. The script uses regex patterns to parse interface, revision, and age version numbers, then calculates major version numbers using the libtool versioning scheme.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# parse the full soversion number from config/lt_vers.am and include in H5_SOVERS_INFO\n#-----------------------------------------------------------------------------\nfile (READ ${HDF5_SOURCE_DIR}/config/lt_vers.am _lt_vers_am_contents)\nstring (REGEX REPLACE \".*LT_VERS_INTERFACE[ \\t]+=[ \\t]+([0-9]*).*$\"\n    \"\\\\1\" H5_LIB_SOVERS_INTERFACE ${_lt_vers_am_contents})\nstring (REGEX REPLACE \".*LT_VERS_REVISION[ \\t]+=[ \\t]+([0-9]*).*$\"\n    \"\\\\1\" H5_LIB_SOVERS_MINOR ${_lt_vers_am_contents})\nstring (REGEX REPLACE \".*LT_VERS_AGE[ \\t]+=[ \\t]+([0-9]*).*$\"\n    \"\\\\1\" H5_LIB_SOVERS_RELEASE ${_lt_vers_am_contents})\nmath (EXPR H5_LIB_SOVERS_MAJOR ${H5_LIB_SOVERS_INTERFACE}-${H5_LIB_SOVERS_RELEASE})\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.15.0\")\n  #message (VERBOSE \"SOVERSION: ${H5_LIB_SOVERS_MAJOR}.${H5_LIB_SOVERS_RELEASE}.${H5_LIB_SOVERS_MINOR}\")\nendif ()\n\n# Similar patterns repeated for tools, C++, Fortran, HL, HL C++, HL Fortran, and Java components\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests with Data and Validation\nDESCRIPTION: This CMake command adds Python tests to the VTK project. These tests include data and output validation. The command specifies two test files to be added.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestDataEncoder.py\n  TestRemoteInteractionAdapter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Dependencies and Adding SQLite Module in VTK\nDESCRIPTION: Sets up thread dependencies and configures the SQLite module with its source files and headers. This defines the core module structure for VTK::sqlite.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PACKAGE Threads)\n\nvtk_module_add_module(VTK::sqlite\n  SOURCES sqlite3.c\n  HEADERS sqlite3.h\n          vtk_sqlite_mangle.h\n          \"${CMAKE_CURRENT_BINARY_DIR}/vtksqlite_export.h\"\n  HEADERS_SUBDIR \"vtksqlite\")\n```\n\n----------------------------------------\n\nTITLE: Defining VTX Tests in CMake\nDESCRIPTION: This snippet sets up tests specifically for VTX files using ADIOS2 within VTK. It uses `vtk_add_test_cxx` to add VTX related tests, again specifying the source files and data dependencies. This includes unit tests and rendering tests for VTX format.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# VTX tests\nvtk_add_test_cxx(vtkIOADIOS2VTXCxxTests tests TESTING_DATA NO_OUTPUT\n  UnitTestIOADIOS2VTX.cxx,NO_VALID\n  #TestIOADIOS2VTX_VTI3D.cxx,\n  TestIOADIOS2VTX_VTI3DRendering.cxx,NO_VALID\n  #TestIOADIOS2VTX_VTU3D.cxx,NO_VALID\n  TestIOADIOS2VTX_VTU3DRendering.cxx,NO_VALID\n  TestIOADIOS2VTX_VTU2DRendering.cxx,NO_VALID\n  TestIOADIOS2VTX_VTU1DRendering.cxx,NO_VALID)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Executable and Test Target\nDESCRIPTION: Creates an executable target that links against the previously created library and sets up a test case for it.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/UsingVTK/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(vtk_using_exe uses_vtk_exe.cxx)\ntarget_link_libraries(vtk_using_exe PRIVATE vtk_using_lib)\n\nadd_test(NAME vtk_using_exe\n  COMMAND vtk_using_exe)\n```\n\n----------------------------------------\n\nTITLE: ExprTk Ternary Conditional Operator\nDESCRIPTION: Examples of ternary conditional operators in ExprTk, providing a compact form of conditional expressions that can be nested for more complex evaluations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_14\n\nLANGUAGE: ExprTk\nCODE:\n```\nx ? y : z\nx + 1 > 2y ? z + 1 : (w / v)\nmin(x,y) > z ? (x < y + 1) ? x : y : (w * v)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel CGNS Support in CMake\nDESCRIPTION: Sets up parallel support for CGNS based on HDF5 configuration. It checks if HDF5 has parallel support and enables or disables the CGNS_ENABLE_PARALLEL option accordingly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): Adapted for ParaView.\nif (CGNS_ENABLE_HDF5 AND HDF5_NEED_MPI)\n  set(CGNS_ENABLE_PARALLEL \"OFF\" CACHE BOOL \"Enable or disable parallel interface ?\")\n  mark_as_advanced(CLEAR CGNS_ENABLE_PARALLEL)\n  # Check that HDF5 has parallel support\n  if (NOT (HDF5_IS_PARALLEL OR HDF5_ENABLE_PARALLEL))\n    message(FATAL_ERROR \"HDF5 has been found, but is missing parallel support.\")\n  endif()\nelse ()\n  set(CGNS_ENABLE_PARALLEL \"OFF\")\n  mark_as_advanced(FORCE CGNS_ENABLE_PARALLEL)\nendif ()\nelse ()\nset(CGNS_ENABLE_PARALLEL ${H5_HAVE_PARALLEL})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Logical Operators in ExprTk Parser (C++)\nDESCRIPTION: Shows how to enable or disable all logical operators at once, as well as enabling/disabling specific logical operators like 'and'.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_76\n\nLANGUAGE: C++\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nparser.settings().disable_all_logic_ops();\n\nparser\n   .compile(\"1 or not(0 and 1)\",expression); // compilation failure\n\nparser.settings().enable_all_logic_ops();\n\nparser\n   .compile(\"1 or not(0 and 1)\",expression); // compilation success\n\n// Disabling specific logical operator\nparser.settings()\n   .disable_logic_operation(settings_t::e_logic_and);\n\nparser\n   .compile(\"1 or not(0 and 1)\",expression); // failure\n\nparser.settings()\n   .enable_logic_operation(settings_t::e_logic_and);\n\nparser\n   .compile(\"1 or not(0 and 1)\",expression); // success\n```\n\n----------------------------------------\n\nTITLE: Generating 3D Heat Map Data with ADIOS2 in C++\nDESCRIPTION: This snippet generates a 3D heat map dataset using the ADIOS2 library. It includes point data added based on the corresponding source code and is executed using 2 processes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Data/ADIOS2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// HeatMap3D\n// Generated by adios2/examples/hello/bpReader/helloBPReaderHeatMap3D.cpp with 2 processes. The point data is added based on the source code.\n```\n\n----------------------------------------\n\nTITLE: Building VTK with CMake using Ninja\nDESCRIPTION: This snippet demonstrates the process of creating a build system for a VTK example using emcmake and CMake with Ninja as the generator. It is necessary to have emcmake configured and VTK built for WebAssembly. The example must be specified with the correct source and build directories. Dependencies include emcmake and CMake. The output is a built VTK project prepared for serving.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/Cone \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SimpleCocoaVTK\nDESCRIPTION: This CMake configuration initializes the SimpleCocoaVTK project, checks for required VTK components, and establishes paths for source and header files. It sets properties for Objective-C ARC compilation and defines macOS bundle parameters. Dependencies include VTK and macOS developer tools like Xcode for building .xib interface files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Cocoa/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\n\nproject(SimpleCocoaVTK)\n\nif(NOT VTK_BINARY_DIR)\n  find_package(VTK COMPONENTS\n    RenderingOpenGL2\n    InteractionStyle\n    RenderingFreeType\n    FiltersSources\n    RenderingGL2PSOpenGL2\n  )\n  if(NOT VTK_DIR)\n    message(FATAL_ERROR \"Please set VTK_DIR.\")\n  endif()\nendif()\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT EXECUTABLE_OUTPUT_PATH)\n  set (EXECUTABLE_OUTPUT_PATH ${SimpleCocoaVTK_BINARY_DIR})\nendif()\n\nset (SimpleCocoaVTK_SRCS\n  ${SimpleCocoaVTK_SOURCE_DIR}/main.mm\n  ${SimpleCocoaVTK_SOURCE_DIR}/BasicVTKView.mm\n  ${SimpleCocoaVTK_SOURCE_DIR}/CustomLayer.mm\n  ${SimpleCocoaVTK_SOURCE_DIR}/CustomView.mm\n  ${SimpleCocoaVTK_SOURCE_DIR}/MyDocument.mm\n  ${SimpleCocoaVTK_SOURCE_DIR}/MyWindowController.mm\n)\n\nset_source_files_properties(main.mm\n                            BasicVTKView.mm\n                            CustomLayer.mm\n                            CustomView.mm\n                            MyDocument.mm\n                            MyWindowController.mm\n                            PROPERTIES COMPILE_FLAGS \"-fobjc-arc\")\n\nset (SimpleCocoaVTK_HDRS\n  ${SimpleCocoaVTK_SOURCE_DIR}/BasicVTKView.h\n  ${SimpleCocoaVTK_SOURCE_DIR}/CustomLayer.h\n  ${SimpleCocoaVTK_SOURCE_DIR}/CustomView.h\n  ${SimpleCocoaVTK_SOURCE_DIR}/MyDocument.h\n  ${SimpleCocoaVTK_SOURCE_DIR}/MyWindowController.h\n)\n\nset (SimpleCocoaVTK_XIBS\n  MainMenu\n  MyWindow\n)\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(MACOSX_BUNDLE_GUI_IDENTIFIER \"org.vtk.SimpleCocoaVTK\")\nset(MACOSX_BUNDLE_BUNDLE_NAME ${PROJECT_NAME})\n\nset(MACOSX_BUNDLE_NSMAIN_NIB_FILE \"MainMenu\")\nset(MACOSX_BUNDLE_NSPRINCIPAL_CLASS \"NSApplication\")\n\nadd_executable(SimpleCocoaVTK MACOSX_BUNDLE ${SimpleCocoaVTK_SRCS} ${SimpleCocoaVTK_HDRS})\n\ntarget_link_libraries(SimpleCocoaVTK \"-framework Cocoa -framework OpenGL -framework QuartzCore\"\n                      ${VTK_LIBRARIES})\n\nset_target_properties(SimpleCocoaVTK PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${SimpleCocoaVTK_SOURCE_DIR}/Info-CMake.plist)\n\nfind_program(IBTOOL ibtool HINTS \"/usr/bin\" \"${OSX_DEVELOPER_ROOT}/usr/bin\")\nif (${IBTOOL} STREQUAL \"IBTOOL-NOTFOUND\")\n  message(SEND_ERROR \"ibtool can not be found and is needed to compile the .xib files. It should have been installed with the Apple developer tools. The default system paths were searched in addition to ${OSX_DEVELOPER_ROOT}/usr/bin\")\nendif()\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command (TARGET SimpleCocoaVTK PRE_BUILD\n                      COMMAND mkdir -p ${EXECUTABLE_OUTPUT_PATH}/\\${CONFIGURATION}/SimpleCocoaVTK.app/Contents/Resources)\n\nforeach(xib ${SimpleCocoaVTK_XIBS})\n  add_custom_command (TARGET SimpleCocoaVTK POST_BUILD\n                      COMMAND ${IBTOOL} --errors --warnings --notices --output-format human-readable-text --compile ${EXECUTABLE_OUTPUT_PATH}/\\${CONFIGURATION}/SimpleCocoaVTK.app/Contents/Resources/${xib}.nib ${SimpleCocoaVTK_SOURCE_DIR}/${xib}.xib\n                      COMMENT \"Compiling ${SimpleCocoaVTK_SOURCE_DIR}/${xib}.xib\")\n\nendforeach()\n\nvtk_module_autoinit(\n  TARGETS SimpleCocoaVTK\n  MODULES ${VTK_LIBRARIES}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Installing JOGL Dependencies with Maven\nDESCRIPTION: Maven commands to download required JOGL and Gluegen libraries from Java.net repository. These commands fetch both the main JARs and platform-specific native libraries using classifiers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \\\n  -DrepoUrl=http://download.java.net/maven/2/  \\\n  -Dartifact=org.jogamp.gluegen:gluegen-rt:2.3.2\n\nmvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \\\n  -DrepoUrl=http://download.java.net/maven/2/  \\\n  -Dartifact=org.jogamp.gluegen:gluegen-rt:2.3.2:jar:CLASSIFIER\n\nmvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \\\n  -DrepoUrl=http://download.java.net/maven/2/  \\\n  -Dartifact=org.jogamp.jogl:jogl-all:2.3.2\n\nmvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \\\n  -DrepoUrl=http://download.java.net/maven/2/  \\\n  -Dartifact=org.jogamp.jogl:jogl-all:2.3.2:jar:CLASSIFIER\n\ncmake --build build --source vtk-source \\\n  -DVTK_WRAP_JAVA=ON \\\n  -DVTK_JAVA_JOGL_COMPONENT=ON \\\n  -DJOGL_VERSION=\"2.3.2\" \\\n  -DJOGL_GLUE=$HOME/.m2/repository/org/jogamp/gluegen/gluegen-rt/2.3.2/gluegen-rt-2.3.2.jar \\\n  -DJOGL_LIB=$HOME/.m2/repository/org/jogamp/jogl/jogl-all/2.3.2/jogl-all-2.3.2.jar\n\n# Substitute $INSTALLDIR\ncmake --install build --prefix $INSTALLDIR\n```\n\n----------------------------------------\n\nTITLE: Handling VTK Package Dependency in CMake\nDESCRIPTION: This code snippet finds and links the required VTK components for the project: FiltersSources, InteractionStyle, RenderingOpenGL2, and RenderingUI. The build is aborted if VTK is not found.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    FiltersSources      # VTK pipeline\n    InteractionStyle    # Mouse handling\n    RenderingOpenGL2    # For Rendering\n    RenderingUI         # For SDL2 Window\n)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building VTK.wasm with Emscripten and CMake\nDESCRIPTION: This snippet shows how to configure and build a VTK.wasm project using Emscripten and CMake. It requires VTK.wasm to be compiled with `VTK_WEBASSEMBLY_THREADS=ON`. It sets the VTK_DIR to point to the location where VTK was built.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/Cone \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Using MPI Communicator with Points\nDESCRIPTION: This code illustrates the transition from indexing a communicator object to explicitly specifying destination and source for send and receive operations, which enhances clarity in communications.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CHANGES.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD[0].Send(...)\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD[0].Recv(...)\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD[0].Bcast(...)\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD.Send(..., dest=0)\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD.Recv(..., source=0)\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD.Bcast(..., root=0)\n```\n\n----------------------------------------\n\nTITLE: Using Hull Functor with vtkSMPTools::For\nDESCRIPTION: Demonstrates how to invoke the parallel processing using the HullFunctor with vtkSMPTools::For().\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n  HullFunctor hull(pts,planes);\n  vtkSMPTools::For(0,numPts, hull);\n```\n\n----------------------------------------\n\nTITLE: Using std::atomic Instead of vtkAtomic in VTK\nDESCRIPTION: Shows the replacement of the deprecated vtkAtomic with std::atomic from the C++ standard library.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <atomic>\n\nstd::atomic<int> atomicVariable(0);\n// Use std::atomic instead of vtkAtomic\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK LAS Reader Test Generation Function\nDESCRIPTION: CMake function that generates test source files for the VTK LAS reader. Takes a test input file and elevation parameter, configures a test source file from a template, and adds it to the test list.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LAS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(VTK_LAS_READER_TESTS)\nfunction(add_vtk_las_reader_test test_input elevation)\n  get_filename_component(VTK_LAS_READER_POSTFIX ${test_input} NAME_WE)\n  set(VTK_LAS_READER_TEST_INPUT \"${test_input}\")\n  set(VTK_LAS_READER_ELEVATION \"${elevation}\")\n  set(test_source \"TestLASReader_${VTK_LAS_READER_POSTFIX}.cxx\")\n  configure_file(TestLASReader.cxx.in ${test_source})\n  set(VTK_LAS_READER_TESTS ${VTK_LAS_READER_TESTS} ${test_source} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Printing containers with fmt library in C++\nDESCRIPTION: Shows how to print container contents (like vectors) using the fmt::ranges extension. This automatically formats the container with appropriate delimiters.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#include <vector>\n#include <fmt/ranges.h>\n\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  fmt::print(\"{}\\\n\", v);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VTK ANARI Module Classes\nDESCRIPTION: Lists all the classes that are part of the VTK::RenderingAnari module, including various node types, renderer, and mapper implementations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAnariActorNode\n  vtkAnariCameraNode\n  vtkAnariCompositePolyDataMapperNode\n  vtkAnariDevice\n  vtkAnariGlyph3DMapperNode\n  vtkAnariLightNode\n  vtkAnariPass\n  vtkAnariPolyDataMapperNode\n  vtkAnariRenderer\n  vtkAnariSceneGraph\n  vtkAnariViewNodeFactory\n  vtkAnariFollowerNode\n  vtkAnariProfiling\n  vtkAnariVolumeNode\n  vtkAnariVolumeMapperNode\n  vtkAnariVolumeMapper\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Error Reporting in VTK\nDESCRIPTION: Sets up OpenGL error detection and reporting options, allowing users to enable/disable error checking in both debug and release builds through CMake options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Detect and clear OpenGL errors. If not then other classes/user code\n# may detect VTK's OpenGL errors and vice-versa.\nset(VTK_REPORT_OPENGL_ERRORS ON CACHE BOOL \"Enable OpenGL error check and report\")\ncmake_dependent_option(VTK_REPORT_OPENGL_ERRORS_IN_RELEASE_BUILDS\n  \"Enable OpenGL error check and reporting in non-debug builds.\" OFF\n  VTK_REPORT_OPENGL_ERRORS OFF)\nmark_as_advanced(VTK_REPORT_OPENGL_ERRORS)\nmark_as_advanced(VTK_REPORT_OPENGL_ERRORS_IN_RELEASE_BUILDS)\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkOpenGLError.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkOpenGLError.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Test\nDESCRIPTION: This CMake code snippet adds the classes defined in the \"classes\" variable to the VTK::FiltersSelection module, and includes a function to add a test for mangling within this module. Dependencies include the VTK modules setup and associated CMake functions for module and test management.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Selection/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersSelection\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersSelection)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingFreeTypeFontConfig Module\nDESCRIPTION: Adds the VTK::RenderingFreeTypeFontConfig module to the project, specifying the classes, sources, and private headers to be included.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingFreeTypeFontConfig\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the VTK InteractionWidgets Module\nDESCRIPTION: Uses the vtk_module_add_module function to create the InteractionWidgets module with the specified classes and serialization helper sources. Also adds test mangling configuration for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::InteractionWidgets\n  CLASSES ${classes}\n  SOURCES ${serialization_helper_sources})\nvtk_add_test_mangling(VTK::InteractionWidgets)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Boost Graph Module\nDESCRIPTION: Creates the InfovisBoostGraphAlgorithms module using the defined classes and headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/BoostGraphAlgorithms/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::InfovisBoostGraphAlgorithms\n  CLASSES ${classes}\n  HEADERS ${headers})\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for VTK Filters General Module\nDESCRIPTION: Combines all test groups and creates the test executable with specific configuration options. Disables floating-point exceptions and configures the rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${data_tests}\n  )\n\nvtk_test_cxx_executable(vtkFiltersGeneralCxxTests all_tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Example WrapPython.cmake Command Usage\nDESCRIPTION: Demonstrates the command to invoke WrapPython.cmake script for generating Python bindings for a VTK class. Shows the required parameters for the Python wrapper generation process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/WrappingTools.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DCLASS=vtkClass \\\n      -DOUTPUT_DIR=${output_dir}/Python \\\n      -P ${VTK_SOURCE_DIR}/Wrapping/Tools/WrapPython.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Xdmf in CMake\nDESCRIPTION: Sets up build options like shared libraries, testing, documentation and language wrappers. Many options are conditionally overridden to integrate with VTK's build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  set(BUILD_SHARED 1)\nendif()\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/XdmfConfig.hpp.in\n               ${CMAKE_CURRENT_BINARY_DIR}/XdmfConfig.hpp)\n\nif (FALSE) # XXX(kitware): force settings\n# Enable CMake testing\noption(XDMF_BUILD_TESTING \"Build Tests\" OFF)\nif(XDMF_BUILD_TESTING)\n  enable_testing()\n  include(CTest)\nendif()\nelse ()\nset(XDMF_BUILD_TESTING OFF)\nendif ()\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\nlist(APPEND CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_SOURCE_DIR}/CMake\n  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/VersionSuite)\nif(XDMF_BUILD_TESTING)\n  list(APPEND CMAKE_MODULE_PATH\n    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/TestingSuite)\nendif()\n\ninclude(XdmfFunctions)\n\n# Should we build with documentation\nif (FALSE) # XXX(kitware): force settings\noption(XDMF_BUILD_DOCUMENTATION OFF)\nelse ()\nset(XDMF_BUILD_DOCUMENTATION OFF)\nendif ()\nif(XDMF_BUILD_DOCUMENTATION)\n  add_subdirectory(doc)\nendif()\n\nif (FALSE) # XXX(kitware): force settings\n# Wrapper Setup\noption(XDMF_WRAP_PYTHON OFF)\noption(XDMF_WRAP_JAVA OFF)\nelse ()\nset(XDMF_WRAP_PYTHON OFF)\nset(XDMF_WRAP_JAVA OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Fortran Concatenation Test Program\nDESCRIPTION: Fortran program to test preprocessor concatenation functionality\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: fortran\nCODE:\n```\nCONCATENATE(PRO,GRAM) testconcat\n         IMPLICIT NONE\n          integer a\n          a = 10\n      END PROGRAM testconcat\n```\n\n----------------------------------------\n\nTITLE: Adding HierarchicalBoxPipeline Executable\nDESCRIPTION: This snippet creates an executable named `HierarchicalBoxPipeline` from the source file `HierarchicalBoxPipeline.cxx`. It links the VTK libraries to the executable, making the VTK functions available in the C++ code. `MACOSX_BUNDLE` indicates that it's a macOS application bundle.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/AMR/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(HierarchicalBoxPipeline MACOSX_BUNDLE\n  HierarchicalBoxPipeline.cxx)\ntarget_link_libraries(HierarchicalBoxPipeline\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring TGA Reader Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK TGA reader using a VTK logo TGA sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTGAReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/vtk.tga}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Parallel NetCDF MPI Tests in CMake\nDESCRIPTION: Conditionally sets up MPI-based tests for VTK IO Parallel NetCDF. This block is only executed if VTK_USE_LARGE_DATA is true and the VTK::ParallelMPI target exists. It adds two test files for PSLAC reader tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(VTK_USE_LARGE_DATA AND TARGET VTK::ParallelMPI)\n  vtk_add_test_mpi(vtkIOParallelNetCDFCxxTests-MPI tests\n    TESTING_DATA\n    PSLACReaderLinear.cxx\n    PSLACReaderQuadratic.cxx\n    )\n  vtk_test_cxx_executable(vtkIOParallelNetCDFCxxTests-MPI tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: VTK Blob Management Methods\nDESCRIPTION: Method references for managing data array blobs in VTK, used to prevent duplicate data storage. Includes GetBlob and RegisterBlob operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_manager.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nGetBlob\\nRegisterBlob\n```\n\n----------------------------------------\n\nTITLE: HDF5 Data Structure Definition\nDESCRIPTION: This snippet defines the structure of an HDF5 file designed to store temporal polydata. It outlines the groups, datasets, attributes, and datatypes used to organize and represent the data, facilitating its use within visualization and analysis applications like VTK. It includes information about points, polygons, lines, cell data, point data, and how they change over time (steps).\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_39\n\nLANGUAGE: HDF5\nCODE:\n```\nHDF5 \"ExternalData/Testing/Data/test_transient_poly_data.hdf\" {\nGROUP \"/\" {\n   GROUP \"VTKHDF\" {\n      ATTRIBUTE \"Type\" {\n         DATATYPE  H5T_STRING {\n            STRSIZE 8;\n            STRPAD H5T_STR_NULLPAD;\n            CSET H5T_CSET_ASCII;\n            CTYPE H5T_C_S1;\n         }\n         DATASPACE  SCALAR\n      }\n      ATTRIBUTE \"Version\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n      }\n      GROUP \"CellData\" {\n         DATASET \"Materials\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 8160 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Lines\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 0 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      DATASET \"NumberOfPoints\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n      }\n      GROUP \"PointData\" {\n         DATASET \"Normals\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 4120, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n         DATASET \"Warping\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 4120, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n      }\n      DATASET \"Points\" {\n         DATATYPE  H5T_IEEE_F32LE\n         DATASPACE  SIMPLE { ( 2060, 3 ) / ( H5S_UNLIMITED, 3 ) }\n      }\n      GROUP \"Polygons\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 12240 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 4090 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Steps\" {\n         ATTRIBUTE \"NSteps\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SCALAR\n         }\n         GROUP \"CellDataOffsets\" {\n            DATASET \"Materials\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n            }\n         }\n         DATASET \"CellOffsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10, 4 ) / ( H5S_UNLIMITED, 4 ) }\n         }\n         DATASET \"ConnectivityIdOffsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10, 4 ) / ( H5S_UNLIMITED, 4 ) }\n         }\n         DATASET \"NumberOfParts\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"PartOffsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         GROUP \"PointDataOffsets\" {\n            DATASET \"Normals\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n            }\n            DATASET \"Warping\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n            }\n         }\n         DATASET \"PointOffsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Values\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Strips\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 0 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Vertices\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 0 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 10 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n   }\n}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ImagingColor Module Classes\nDESCRIPTION: Defines a list of VTK classes for color space conversions and adds them to the VTK::ImagingColor module. Includes various color space transformation classes and sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Color/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkImageHSIToRGB\n  vtkImageHSVToRGB\n  vtkImageLuminance\n  vtkImageMapToRGBA\n  vtkImageMapToWindowLevelColors\n  vtkImageQuantizeRGBToIndex\n  vtkImageRGBToHSI\n  vtkImageRGBToHSV\n  vtkImageRGBToXYZ\n  vtkImageRGBToYIQ\n  vtkImageXYZToLAB\n  vtkImageYIQToRGB)\n\nvtk_module_add_module(VTK::ImagingColor\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingColor)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Common Math Module\nDESCRIPTION: Configures and adds the Common Math module to the VTK build system with all defined components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::CommonMath\n  CLASSES           ${classes}\n  TEMPLATES         ${templates}\n  TEMPLATE_CLASSES  ${template_classes}\n  HEADERS           ${headers}\n  NOWRAP_CLASSES    ${nowrap_classes}\n)\nvtk_add_test_mangling(VTK::CommonMath)\n```\n\n----------------------------------------\n\nTITLE: Inverting Validators in CLI11 (C++)\nDESCRIPTION: Demonstrates how to invert a validator using the ! operator to create a negative condition check.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n->check(!CLI::PositiveNumber);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersGeneral Module Classes\nDESCRIPTION: Defines a set of VTK filter classes that provide general data processing functionality. Includes classes for operations like clipping, warping, reflection, and various data transformations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAnimateModes\n  vtkAnnotationLink\n  vtkAppendLocationAttributes\n  vtkAppendPoints\n  vtkApproximatingSubdivisionFilter\n  vtkAreaContourSpectrumFilter\n  vtkAxes\n  vtkAxisAlignedReflectionFilter\n  vtkBlankStructuredGrid\n  vtkBlankStructuredGridWithImage\n  vtkBlockIdScalars\n  vtkBooleanOperationPolyDataFilter\n  vtkBoxClipDataSet\n  vtkBrownianPoints\n  vtkCellDerivatives\n  vtkCellValidator\n  vtkCleanUnstructuredGrid\n  vtkCleanUnstructuredGridCells\n  vtkClipClosedSurface\n  vtkClipConvexPolyData\n  vtkClipDataSet\n  vtkClipVolume\n  vtkCoincidentPoints\n  vtkContourTriangulator\n  vtkCountFaces\n  vtkCountVertices\n  vtkCursor2D\n  vtkCursor3D\n  vtkCurvatures\n  vtkDataSetGradient\n  vtkDataSetGradientPrecompute\n  vtkDataSetTriangleFilter\n  vtkDateToNumeric\n  vtkDeflectNormals\n  vtkDeformPointSet\n  vtkDensifyPolyData\n  vtkDicer\n  vtkDiscreteFlyingEdges2D\n  vtkDiscreteFlyingEdges3D\n  vtkDiscreteFlyingEdgesClipper2D\n  vtkDiscreteMarchingCubes\n  vtkDistancePolyDataFilter\n  vtkEdgePoints\n  vtkEqualizerFilter\n  vtkExplodeDataSet\n  vtkExtractArray\n  vtkExtractGhostCells\n  vtkExtractSelectedFrustum\n  vtkExtractSelectionBase\n  vtkFiniteElementFieldDistributor\n  vtkGradientFilter\n  vtkGraphLayoutFilter\n  vtkGraphToPoints\n  vtkGraphWeightEuclideanDistanceFilter\n  vtkGraphWeightFilter\n  vtkGroupDataSetsFilter\n  vtkGroupTimeStepsFilter\n  vtkHierarchicalDataLevelFilter\n  vtkHyperStreamline\n  vtkIconGlyphFilter\n  vtkImageDataToPointSet\n  vtkImageMarchingCubes\n  vtkInterpolateDataSetAttributes\n  vtkInterpolatingSubdivisionFilter\n  vtkIntersectionPolyDataFilter\n  vtkJoinTables\n  vtkLevelIdScalars\n  vtkLinkEdgels\n  vtkLoopBooleanPolyDataFilter\n  vtkMarchingContourFilter\n  vtkMatricizeArray\n  vtkMergeArrays\n  vtkMergeCells\n  vtkMergeTimeFilter\n  vtkMergeVectorComponents\n  vtkMultiBlockDataGroupFilter\n  vtkMultiBlockMergeFilter\n  vtkMultiThreshold\n  vtkNormalizeMatrixVectors\n  vtkOBBDicer\n  vtkOBBTree\n  vtkOverlappingAMRLevelIdScalars\n  vtkPassArrays\n  vtkPassSelectedArrays\n  vtkPointConnectivityFilter\n  vtkPolyDataStreamer\n  vtkPolyDataToReebGraphFilter\n  vtkProbePolyhedron\n  vtkQuadraturePointInterpolator\n  vtkQuadraturePointsGenerator\n  vtkQuadratureSchemeDictionaryGenerator\n  vtkQuantizePolyDataPoints\n  vtkRandomAttributeGenerator\n  vtkRectilinearGridClip\n  vtkRectilinearGridToPointSet\n  vtkRectilinearGridToTetrahedra\n  vtkRecursiveDividingCubes\n  vtkReflectionFilter\n  vtkRemovePolyData\n  vtkRotationFilter\n  vtkSampleImplicitFunctionFilter\n  vtkShrinkFilter\n  vtkShrinkPolyData\n  vtkSpatialRepresentationFilter\n  vtkSpatioTemporalHarmonicsAttribute\n  vtkSphericalHarmonics\n  vtkSplineFilter\n  vtkSplitByCellScalarFilter\n  vtkSplitColumnComponents\n  vtkSplitField\n  vtkStructuredGridClip\n  vtkSubPixelPositionEdgels\n  vtkSubdivisionFilter\n  vtkSynchronizeTimeFilter\n\n  vtkTableBasedClipDataSet\n  vtkTableFFT\n  vtkTableToPolyData\n  vtkTableToStructuredGrid\n  vtkTemporalPathLineFilter\n  vtkTemporalStatistics\n  vtkTessellatorFilter\n  vtkTimeSourceExample\n  vtkTransformFilter\n  vtkTransformPolyDataFilter\n  vtkUncertaintyTubeFilter\n  vtkVertexGlyphFilter\n  vtkVolumeContourSpectrumFilter\n  vtkVoxelContoursToSurfaceFilter\n  vtkWarpLens\n  vtkWarpScalar\n  vtkWarpTo\n  vtkWarpVector\n  vtkYoungsMaterialInterface)\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factories for Parallel Processing in CMake\nDESCRIPTION: These snippets declare object factories for vtkResampleToImage and vtkResampleWithDataSet, overriding them with parallel versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkResampleToImage\n  OVERRIDE  vtkPResampleToImage)\nvtk_object_factory_declare(\n  BASE      vtkResampleWithDataSet\n  OVERRIDE  vtkPResampleWithDataSet)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test with vtk_add_test_cxx\nDESCRIPTION: This CMake command defines a C++ test using the vtk_add_test_cxx macro. It specifies the test name, flags (NO_VALID), and the source file (TestOggTheoraWriter.cxx) to be included in the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOOggTheoraCxxTests tests\n  NO_VALID\n  TestOggTheoraWriter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling Missing VTK\nDESCRIPTION: This snippet checks if the VTK package was found and, if not, prints a message and returns from the CMake script. This prevents the build from failing if VTK is not available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT VTK_FOUND)\n  message(\"Skipping ${MYNAME}: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building the Token Library with CMake and Ninja\nDESCRIPTION: This code outlines the steps to build and test the `token` library using CMake and Ninja build systems. It includes all the necessary commands to configure, compile, and test the library. Ensure that CMake, Ninja, and the `nlohmann_json` library are installed and properly configured in the environment. The `token_NAMESPACE` configuration option can be set to customize the namespace.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake -G Ninja /path/to/token/source\nninja install\nctest\n```\n\n----------------------------------------\n\nTITLE: Compiling Executable and Linking VTK Libraries\nDESCRIPTION: This snippet adds an executable named ConeMultiBackend, built from ConeMultiBackend.cxx, and links it against the required VTK libraries using target_link_libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(ConeMultiBackend ConeMultiBackend.cxx)\ntarget_link_libraries(ConeMultiBackend PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Adding WrapHierarchy Executable for VTK\nDESCRIPTION: Adds the WrapHierarchy executable and sets up linking and compile options, with special handling for Emscripten builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET \"${ns}::WrapHierarchy\")\n  vtk_module_add_executable(WrapHierarchy\n    DEVELOPMENT\n    BASENAME vtkWrapHierarchy\n    vtkWrapHierarchy.c)\n  target_link_libraries(WrapHierarchy\n    PRIVATE\n      \"${ns}::WrappingTools\")\n  if (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n    target_compile_options(WrapHierarchy\n      PRIVATE\n        \"-pthread\")\n    target_link_options(WrapHierarchy\n      PRIVATE\n        \"-pthread\"\n        \"-Wno-pthreads-mem-growth\"\n        \"SHELL:-s ALLOW_MEMORY_GROWTH=1\"\n        \"SHELL:-s NODERAWFS=1\")\n  endif ()\n  add_executable(\"${ns}::WrapHierarchy\" ALIAS\n    WrapHierarchy)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting and Processing Shader Files in CMake\nDESCRIPTION: The snippets demonstrate the process of setting shader file lists and encoding them as strings using vtk_encode_string. The encoded strings are appended to source and header lists for further processing. Dependencies include VTK CMake functions and modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkClientServerCompositePass\n  vtkClientServerSynchronizedRenderers\n  vtkCompositedSynchronizedRenderers\n  vtkCompositer\n  vtkCompositeRenderManager\n  vtkCompositeRGBAPass\n  vtkCompositeZPass\n  vtkCompressCompositer\n  vtkImageRenderManager\n  vtkParallelRenderManager\n  vtkPHardwareSelector\n  vtkSynchronizableActors\n  vtkSynchronizableAvatars\n  vtkSynchronizedRenderers\n  vtkSynchronizedRenderWindows\n  vtkTreeCompositer)\n\nset(shader_files\n  vtkCompositeZPassShader_fs.glsl)\nset(public_shader_files\n  vtkCompositeZPassFS.glsl)\n\nset(sources)\nset(private_headers)\nforeach (shader_file IN LISTS shader_files)\n  vtk_encode_string(\n    INPUT         \"${shader_file}\"\n    EXPORT_HEADER \"vtkRenderingParallelModule.h\"\n    EXPORT_SYMBOL \"VTKRENDERINGPARALLEL_NO_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source)\n  list(APPEND sources ${source})\n  list(APPEND private_headers ${header})\nendforeach ()\nset(headers)\nforeach (shader_file IN LISTS public_shader_files)\n  vtk_encode_string(\n    INPUT         \"${shader_file}\"\n    EXPORT_HEADER \"vtkRenderingParallelModule.h\"\n    EXPORT_SYMBOL \"VTKRENDERINGPARALLEL_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source\n    ABI_MANGLE_HEADER       \"vtkABINamespace.h\"\n    ABI_MANGLE_SYMBOL_BEGIN \"VTK_ABI_NAMESPACE_BEGIN\"\n    ABI_MANGLE_SYMBOL_END   \"VTK_ABI_NAMESPACE_END\")\n  list(APPEND sources ${source})\n  list(APPEND headers ${header})\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK InteractionWidgets Module Classes in CMake\nDESCRIPTION: Sets up a comprehensive list of widget-related classes for the VTK InteractionWidgets module. The classes include various types of widgets, representations, point placers, and interpolators that enable interactive visualization components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtk3DCursorRepresentation\n  vtk3DCursorWidget\n  vtk3DWidget\n  vtkAbstractPolygonalHandleRepresentation3D\n  vtkAbstractSplineRepresentation\n  vtkAbstractWidget\n  vtkAffineRepresentation\n  vtkAffineRepresentation2D\n  vtkAffineWidget\n  vtkAngleRepresentation\n  vtkAngleRepresentation2D\n  vtkAngleRepresentation3D\n  vtkAngleWidget\n  vtkAxesTransformRepresentation\n  vtkAxesTransformWidget\n  vtkBalloonRepresentation\n  vtkBalloonWidget\n  vtkBezierContourLineInterpolator\n  vtkBiDimensionalRepresentation\n  vtkBiDimensionalRepresentation2D\n  vtkBiDimensionalWidget\n  vtkBorderRepresentation\n  vtkBorderWidget\n  vtkBoundedPlanePointPlacer\n  vtkBoundedWidgetRepresentation\n  vtkBoxRepresentation\n  vtkBoxWidget\n  vtkBoxWidget2\n  vtkBrokenLineWidget\n  vtkButtonRepresentation\n  vtkButtonWidget\n  vtkCamera3DRepresentation\n  vtkCamera3DWidget\n  vtkCameraHandleSource\n  vtkCameraOrientationWidget\n  vtkCameraOrientationRepresentation\n  vtkCameraPathRepresentation\n  vtkCameraPathWidget\n  vtkCameraRepresentation\n  vtkCameraWidget\n  vtkCaptionRepresentation\n  vtkCaptionWidget\n  vtkCellCentersPointPlacer\n  vtkCenteredSliderRepresentation\n  vtkCenteredSliderWidget\n  vtkCheckerboardRepresentation\n  vtkCheckerboardWidget\n  vtkClosedSurfacePointPlacer\n  vtkCompassRepresentation\n  vtkCompassWidget\n  vtkConstrainedPointHandleRepresentation\n  vtkContinuousValueWidget\n  vtkContinuousValueWidgetRepresentation\n  vtkContourLineInterpolator\n  vtkContourRepresentation\n  vtkContourWidget\n  vtkCoordinateFrameRepresentation\n  vtkCoordinateFrameWidget\n  vtkCurveRepresentation\n  vtkDijkstraImageContourLineInterpolator\n  vtkDisplaySizedImplicitPlaneWidget\n  vtkDisplaySizedImplicitPlaneRepresentation\n  vtkDistanceRepresentation\n  vtkDistanceRepresentation2D\n  vtkDistanceRepresentation3D\n  vtkDistanceWidget\n  vtkEllipsoidTensorProbeRepresentation\n  vtkEqualizerContextItem\n  vtkEvent\n  vtkFinitePlaneRepresentation\n  vtkFinitePlaneWidget\n  vtkFixedSizeHandleRepresentation3D\n  vtkFocalPlaneContourRepresentation\n  vtkFocalPlanePointPlacer\n  vtkHandleRepresentation\n  vtkHandleWidget\n  vtkHoverWidget\n  vtkImageActorPointPlacer\n  vtkImageCroppingRegionsWidget\n  vtkImageOrthoPlanes\n  vtkImagePlaneWidget\n  vtkImageTracerWidget\n  vtkImplicitAnnulusRepresentation\n  vtkImplicitAnnulusWidget\n  vtkImplicitConeRepresentation\n  vtkImplicitConeWidget\n  vtkImplicitCylinderRepresentation\n  vtkImplicitCylinderWidget\n  vtkImplicitFrustumRepresentation\n  vtkImplicitFrustumWidget\n  vtkImplicitImageRepresentation\n  vtkImplicitPlaneRepresentation\n  vtkImplicitPlaneWidget\n  vtkImplicitPlaneWidget2\n  vtkLightRepresentation\n  vtkLightWidget\n  vtkLinearContourLineInterpolator\n  vtkLineRepresentation\n  vtkLineWidget\n  vtkLineWidget2\n  vtkLogoRepresentation\n  vtkLogoWidget\n  vtkMagnifierRepresentation\n  vtkMagnifierWidget\n  vtkMeasurementCubeHandleRepresentation3D\n  vtkOrientationMarkerWidget\n  vtkOrientationRepresentation\n  vtkOrientationWidget\n  vtkOrientedGlyphContourRepresentation\n  vtkOrientedGlyphFocalPlaneContourRepresentation\n  vtkOrientedPolygonalHandleRepresentation3D\n  vtkParallelopipedRepresentation\n  vtkParallelopipedWidget\n  vtkPlaneWidget\n  vtkPlaybackRepresentation\n  vtkPlaybackWidget\n  vtkPointCloudRepresentation\n  vtkPointCloudWidget\n  vtkPointHandleRepresentation2D\n  vtkPointHandleRepresentation3D\n  vtkPointPlacer\n  vtkPointWidget\n  vtkPolyDataContourLineInterpolator\n  vtkPolyDataPointPlacer\n  vtkPolyDataSourceWidget\n  vtkPolygonalHandleRepresentation3D\n  vtkPolygonalSurfaceContourLineInterpolator\n  vtkPolygonalSurfacePointPlacer\n  vtkPolyLineRepresentation\n  vtkPolyLineWidget\n  vtkProgressBarRepresentation\n  vtkProgressBarWidget\n  vtkProp3DButtonRepresentation\n  vtkRectilinearWipeRepresentation\n  vtkRectilinearWipeWidget\n  vtkResliceCursor\n  vtkResliceCursorActor\n  vtkResliceCursorLineRepresentation\n  vtkResliceCursorPicker\n  vtkResliceCursorPolyDataAlgorithm\n  vtkResliceCursorRepresentation\n  vtkResliceCursorThickLineRepresentation\n  vtkResliceCursorWidget\n  vtkScalarBarRepresentation\n  vtkScalarBarWidget\n  vtkSeedRepresentation\n  vtkSeedWidget\n  vtkSliderRepresentation\n  vtkSliderRepresentation2D\n  vtkSliderRepresentation3D\n  vtkSliderWidget\n  vtkSphereHandleRepresentation\n  vtkSphereRepresentation\n  vtkSphereWidget\n  vtkSphereWidget2\n  vtkSplineRepresentation\n  vtkSplineWidget\n  vtkSplineWidget2\n  vtkTensorProbeRepresentation\n  vtkTensorProbeWidget\n  vtkTensorRepresentation\n  vtkTensorWidget\n  vtkTerrainContourLineInterpolator\n  vtkTerrainDataPointPlacer\n  vtkTextRepresentation\n  vtkTexturedButtonRepresentation\n  vtkTexturedButtonRepresentation2D\n  vtkTextWidget\n  vtkWidgetCallbackMapper\n  vtkWidgetEvent\n  vtkWidgetEventTranslator\n  vtkWidgetRepresentation\n  vtkWidgetSet\n  vtkXYPlotWidget\n  )\n```\n\n----------------------------------------\n\nTITLE: VTK Lagrange Hexahedron Node Numbering ASCII Diagram\nDESCRIPTION: ASCII diagram showing the node numbering changes for VTK_LAGRANGE_HEXAHEDRON between VTK 9.0 and 9.1. The diagram illustrates how the (0,1) edge is swapped with the (1,1) edge to match VTK_QUADRATIC_HEXAHEDRON numbering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n       +_____+_____+                        +_____+_____+\n       |\\          :\\                       |\\          :\\\n       | +         : +                      | +         : +\n       |  \\     19 +  \\                     |  \\     18 +  \\\n    18 +   +-----+-----+                 19 +   +-----+-----+\n       |   |       :   |                    |   |       :   |\n       |__ | _+____:   |                    |__ | _+____:   |\n       \\   +        \\  +                    \\   +        \\  +\n        +  |         + |                     +  |         + |\n         \\ |          \\|                      \\ |          \\|\n           +_____+_____+                        +_____+_____+\n```\n\n----------------------------------------\n\nTITLE: Using Coordinates Element to Define Extent\nDESCRIPTION: This snippet defines the Coordinates element to specify the point coordinates along each axis by using multiple DataArray elements for extensibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n    <Coordinates>\n      <DataArray .../>\n      <DataArray .../>\n    </Coordinates>\n```\n\n----------------------------------------\n\nTITLE: VTK Object Registration Handler Implementation\nDESCRIPTION: Example implementation of a registration handler for vtkObject that sets up serialization, deserialization, and invocation handlers\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_serialization.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nint RegisterHandlers_vtkObjectSerDes(void* ser, void* deser, void* invoker)\n{\n  int success = 0;\n  if (auto* asObjectBase = static_cast<vtkObjectBase*>(ser))\n  {\n    if (auto* serializer = vtkSerializer::SafeDownCast(asObjectBase))\n    {\n      serializer->RegisterHandler(typeid(vtkObject), Serialize_vtkObject);\n      success = 1;\n    }\n  }\n  if (auto* asObjectBase = static_cast<vtkObjectBase*>(deser))\n  {\n    if (auto* deserializer = vtkDeserializer::SafeDownCast(asObjectBase))\n    {\n      deserializer->RegisterHandler(typeid(vtkObject), Deserialize_vtkObject);\n      deserializer->RegisterConstructor(\"vtkObject\", []() { return vtkObject::New(); });\n      success = 1;\n    }\n  }\n  if (auto* asObjectBase = static_cast<vtkObjectBase*>(invoker))\n  {\n    if (auto* invokerObject = vtkDeserializer::SafeDownCast(asObjectBase))\n    {\n      invokerObject->RegisterHandler(typeid(vtkObject), Invoke_vtkObject);\n      success = 1;\n    }\n  }\n  return success;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Mode Unknown Symbol Resolver in ExprTk\nDESCRIPTION: Creates an extended mode USR that can handle different types of variables. This implementation supports both scalar variables (with 'var_' prefix) and string variables (with 'str_' prefix).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_70\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nstruct my_usr final : public parser_t::unknown_symbol_resolver\n{\n  typedef typename parser_t::unknown_symbol_resolver usr_t;\n\n  my_usr()\n  : usr_t(usr_t::e_usrmode_extended)\n  {}\n\n  bool process(const std::string& unknown_symbol,\n               symbol_table_t&    symbol_table,\n               std::string&       error_message) override\n  {\n     bool result = false;\n\n     if (0 == unknown_symbol.find(\"var_\"))\n     {\n        // Default value of zero\n        result = symbol_table.create_variable(unknown_symbol,0);\n\n        if (!result)\n        {\n           error_message = \"Failed to create variable...\";\n        }\n     }\n     else if (0 == unknown_symbol.find(\"str_\"))\n     {\n        // Default value of empty string\n        result = symbol_table.create_stringvar(unknown_symbol,\"\");\n\n        if (!result)\n        {\n           error_message = \"Failed to create string variable...\";\n        }\n     }\n     else\n        error_message = \"Indeterminable symbol type.\";\n\n     return result;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing UTF-16 Strings with fast_float in C++\nDESCRIPTION: Example demonstrating how to parse floating-point numbers from non-ASCII strings using UTF-16 encoded input. The fast_float library supports UTF-8, UTF-16, and UTF-32 inputs.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  std::u16string input = u\"3.1416 xyz \";\n  double result;\n  auto answer = fast_float::from_chars(input.data(), input.data() + input.size(), result);\n  if (answer.ec != std::errc()) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n  std::cout << \"parsed the number \" << result << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding PDAL Package in CMake for VTK Module\nDESCRIPTION: Locates the PDAL package with a minimum version of 2.0. This is used as a private dependency if the module is shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE PDAL\n  VERSION 2.0)\n```\n\n----------------------------------------\n\nTITLE: Compile-time Parsing with fast_float in C++20\nDESCRIPTION: Example demonstrating how to use fast_float for compile-time parsing in C++20 using constexpr and consteval. This allows for number parsing during compilation rather than at runtime.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// consteval forces compile-time evaluation of the function in C++20.\nconsteval double parse(std::string_view input) {\n  double result;\n  auto answer = fast_float::from_chars(input.data(), input.data() + input.size(), result);\n  if (answer.ec != std::errc()) { return -1.0; }\n  return result;\n}\n\n// This function should compile to a function which\n// merely returns 3.1415.\nconstexpr double constexptest() {\n  return parse(\"3.1415 input\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel RectilinearGrid Structure in VTK XML\nDESCRIPTION: XML structure for defining a parallel rectilinear grid dataset in VTK. Specifies whole extent, ghost levels, and piece distribution across files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"PRectilinearGrid\" ...>\n    <PRectilinearGrid WholeExtent=\"x1 x2 y1 y2 z1 z2\"\n                      GhostLevel=\"#\">\n      <PPointData>...</PPointData>\n      <PCellData>...</PCellData>\n      <PCoordinates>...</PCoordinates>\n      <Piece Extent=\"x1 x2 y1 y2 z1 z2\"\n             Source=\"rectilinearGrid0.vtr\"/>\n      ...\n    </PRectilinearGrid>\n  </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Combining All Tests and Creating Test Executable\nDESCRIPTION: Combines all previously defined test sets into a single list and creates the test executable for VTK Common Data Model C++ tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${data_tests}\n  ${output_tests}\n  ${custom_tests}\n  )\nvtk_test_cxx_executable(vtkCommonDataModelCxxTests all_tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ABI Namespace with Custom Visibility\nDESCRIPTION: CMake configuration example showing how to define a custom ABI namespace 'vtk9_custom' with hidden visibility attributes. This demonstrates the use of VTK_ABI_NAMESPACE_NAME and VTK_ABI_NAMESPACE_ATTRIBUTES flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/abi-mangling-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DVTK_ABI_NAMESPACE_NAME=vtk9_custom \\\n      -DVTK_ABI_NAMESPACE_ATTRIBUTES=\"__attribute__ ((visibility (\\\"hidden\\\")))\" \\\n      $source_path\n```\n\n----------------------------------------\n\nTITLE: Initializing AMReX MultiLevel to Conduit Blueprint Conversion Function\nDESCRIPTION: A C++ function to convert AMReX multi-level data structures into a Conduit Node for Catalyst visualization, supporting multiple levels, variable names, geometries, and refinement ratios\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/catalyst2-amr-support.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid MultiLevelToBlueprint (int n_levels,\n                            const Vector<const MultiFab*> &mfs,\n                            const Vector<std::string> &varnames,\n                            const Vector<Geometry> &geoms,\n                            Real time_value,\n                            const Vector<int> &level_steps,\n                            const Vector<IntVect> &ref_ratio,\n                            conduit::Node &bp_mesh);\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Views Infovis Test Executable\nDESCRIPTION: Creates the test executable for VTK Views Infovis tests with specific configuration flags. Disables floating point exceptions and enables rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Infovis/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkViewsInfovisCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Creating Release and Debug APK Targets\nDESCRIPTION: Defines custom CMake targets for building release and debug Android APK packages using Ant\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(NativeVTK-apk-release ALL\n  COMMAND ${ANT_EXECUTABLE}\n          -file \"${CMAKE_CURRENT_BINARY_DIR}/build.xml\"\n          release)\nadd_dependencies(NativeVTK-apk-release\n  NativeVTK-ant-configure\n  NativeVTK)\n\nadd_custom_target(NativeVTK-apk-debug ALL\n  COMMAND ${ANT_EXECUTABLE}\n          -file \"${CMAKE_CURRENT_BINARY_DIR}/build.xml\"\n          debug)\nadd_dependencies(NativeVTK-apk-debug\n  NativeVTK-apk-release\n  NativeVTK-ant-configure\n  NativeVTK)\n```\n\n----------------------------------------\n\nTITLE: Function Compositor Error Handling in ExprTk in C++\nDESCRIPTION: Example demonstrating how to handle errors during function composition in ExprTk, which is similar to parser error handling but specific to the function compositor component.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_88\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::function_compositor<T>  compositor_t;\ntypedef typename compositor_t::function function_t;\n\ncompositor_t compositor;\n\nconst bool compositor_result =\ncompositor.add(\n   function_t(\"foobar\")\n   .vars(\"x\",\"y\")\n   .expression\n   ( \" x + y / z \" ));\n\nif (!compositor_result)\n{\n   printf(\"Error: %s\\n\", compositor.error().c_str());\n\n   for (std::size_t i = 1; i < compositor.error_count(); ++i)\n   {\n      typedef exprtk::parser_error::type error_t;\n\n      error_t error = compositor.get_error(i);\n\n      printf(\"Err No.: %02d  Pos: %02d  Type: [%14s] Msg: %s\\n\",\n             static_cast<unsigned int>(i),\n             static_cast<unsigned int>(error.token.position),\n             exprtk::parser_error::to_str(error.mode).c_str(),\n             error.diagnostic.c_str());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Clean Target for iOS Examples in CMake\nDESCRIPTION: Creates a custom target that cleans the binary directory using a separate CMake script called CleanExamples.cmake. This ensures a fresh environment before copying the example files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(iOS-examples-rm ALL\n  COMMAND ${CMAKE_COMMAND}\n    -D BIN_DIR=\"${CMAKE_CURRENT_BINARY_DIR}\"\n    -P \"${CMAKE_CURRENT_SOURCE_DIR}/CleanExamples.cmake\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package Components\nDESCRIPTION: This snippet attempts to find specified components from the VTK library, which are essential for the project's functionality. If VTK is not found, a message is displayed, and further execution is halted.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Annotation/Cxx/LabeledMesh/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    FiltersGeneral\n    FiltersSources\n    RenderingCore\n    RenderingLabel)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Imaging Hybrid C++ Tests with CMake\nDESCRIPTION: This snippet configures C++ tests for the VTK Imaging Hybrid module using CMake. It defines two test files and specifies test options, with one test having NO_DATA, NO_VALID, and NO_OUTPUT flags. The test executable is configured with floating point exception handling disabled and rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Hybrid/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkImagingHybridCxxTests tests\n  TestImageToPoints.cxx\n  TestSampleFunction.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  )\nvtk_test_cxx_executable(vtkImagingHybridCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FFMPEG OpenGL2 C++ Tests\nDESCRIPTION: Adds C++ test case TestMovieSphere.cxx without validation and configures the test executable for VTK FFMPEG OpenGL2 rendering tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FFMPEGOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingFFMPEGOpenGL2CxxTests tests\n  TestMovieSphere.cxx,NO_VALID\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingFFMPEGOpenGL2CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Using positional arguments with fmt library in C++\nDESCRIPTION: Demonstrates using positional arguments in fmt::format. The arguments are indexed using {0}, {1} notation, allowing for reordering and reuse of arguments.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"I'd rather be {1} than {0}.\", \"right\", \"happy\");\n// s == \"I'd rather be happy than right.\"\n```\n\n----------------------------------------\n\nTITLE: VTK Overlapping AMR HDF5 Structure\nDESCRIPTION: Describes an Adaptive Mesh Refinement (AMR) data structure with two refinement levels. Contains point data, cell data, and field data for a Gaussian pulse source, including spacing, origin, and version information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_37\n\nLANGUAGE: HDF5\nCODE:\n```\nHDF5 \"ExternalData/Testing/Data/amr_gaussian_pulse.hdf\" {\nGROUP \"/\" {\n   GROUP \"VTKHDF\" {\n      ATTRIBUTE \"Origin\" {\n         DATATYPE  H5T_IEEE_F64LE\n         DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n         DATA {\n         (0): -2, -2, 0\n         }\n      }\n      ATTRIBUTE \"Type\" {\n         DATATYPE  H5T_STRING {\n            STRSIZE 14;\n            STRPAD H5T_STR_NULLPAD;\n            CSET H5T_CSET_ASCII;\n            CTYPE H5T_C_S1;\n         }\n         DATASPACE  SCALAR\n         DATA {\n         (0): \"OverlappingAMR\"\n         }\n      }\n      ATTRIBUTE \"Version\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n         DATA {\n         (0): 1, 0\n         }\n      }\n      GROUP \"Level0\" {\n         ATTRIBUTE \"Spacing\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n            DATA {\n            (0): 0.5, 0.5, 0.5\n            }\n         }\n         DATASET \"AMRBox\" {\n            DATATYPE  H5T_STD_I32LE\n            DATASPACE  SIMPLE { ( 1, 6 ) / ( 1, 6 ) }\n            DATA {\n            (0,0): 0, 4, 0, 4, 0, 4\n            }\n         }\n         GROUP \"CellData\" {\n            DATASET \"Centroid\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 125, 3 ) / ( 125, 3 ) }\n            }\n            DATASET \"Gaussian-Pulse\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 125 ) / ( 125 ) }\n            }\n            DATASET \"vtkGhostType\" {\n               DATATYPE  H5T_STD_U8LE\n               DATASPACE  SIMPLE { ( 125 ) / ( 125 ) }\n            }\n         }\n         GROUP \"FieldData\" {\n            DATASET \"KE\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 44 ) / ( 44 ) }\n            }\n         }\n         GROUP \"PointData\" {\n            DATASET \"Coord Result\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 216 ) / ( 216 ) }\n            }\n         }\n      }\n      GROUP \"Level1\" {\n         ATTRIBUTE \"Spacing\" {\n            DATATYPE  H5T_IEEE_F64LE\n            DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }\n            DATA {\n            (0): 0.25, 0.25, 0.25\n            }\n         }\n         DATASET \"AMRBox\" {\n            DATATYPE  H5T_STD_I32LE\n            DATASPACE  SIMPLE { ( 2, 6 ) / ( 2, 6 ) }\n            DATA {\n            (0,0): 0, 3, 0, 5, 0, 9,\n            (1,0): 6, 9, 4, 9, 0, 9\n            }\n         }\n         GROUP \"CellData\" {\n            DATASET \"Centroid\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 480, 3 ) / ( 480, 3 ) }\n            }\n            DATASET \"Gaussian-Pulse\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 480 ) / ( 480 ) }\n            }\n            DATASET \"vtkGhostType\" {\n               DATATYPE  H5T_STD_U8LE\n               DATASPACE  SIMPLE { ( 480 ) / ( 480 ) }\n            }\n         }\n         GROUP \"FieldData\" {\n            DATASET \"KE\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 88 ) / ( 88 ) }\n            }\n         }\n         GROUP \"PointData\" {\n            DATASET \"Coord Result\" {\n               DATATYPE  H5T_IEEE_F64LE\n               DATASPACE  SIMPLE { ( 770 ) / ( 770 ) }\n            }\n         }\n      }\n   }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK VRML Importer Tests\nDESCRIPTION: Defines test cases for the VRML importer, including normal vector handling tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImportCxxTests tests\n  TestVRMLImporter.cxx,NO_VALID\n  TestVRMLNormals.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Return Values in ExprTk Expressions (C++)\nDESCRIPTION: Demonstrates how to handle multiple return values from an ExprTk expression, including processing different return types (scalar, vector, string).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_81\n\nLANGUAGE: C++\nCODE:\n```\nconst std::string expression_string =\n   \" if (x < y)                                   \"\n   \"    return [x + 1,'return-call 1'];           \"\n   \" else if (x > y)                              \"\n   \"    return [y / 2, y + 1, 'return-call 2'];   \"\n   \" else if (equal(x,y))                         \"\n   \"    x + y;                                    \"\n   \" return [x, y, x + y, x - y, 'return-call 3'] \";\n\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\ntypedef exprtk::parser<double>       parser_t;\n\nsymbol_table_t symbol_table;\nexpression_t   expression;\nparser_t       parser;\n\ndouble x = 0;\ndouble y = 0;\n\nsymbol_table.add_variable(\"x\",x);\nsymbol_table.add_variable(\"y\",y);\n\nexpression.register_symbol_table(symbol_table);\n\nparser.compile(expression_string,expression);\n\nT result = expression.value();\n\nif (expression.return_invoked())\n{\n   typedef exprtk::results_context<T> results_context_t;\n   typedef typename results_context_t::type_store_t type_t;\n   typedef typename type_t::scalar_view scalar_t;\n   typedef typename type_t::vector_view vector_t;\n   typedef typename type_t::string_view string_t;\n\n   const results_context_t& results = expression.results();\n\n   for (std::size_t i = 0; i < results.count(); ++i)\n   {\n      type_t t = results[i];\n\n      switch (t.type)\n      {\n         case type_t::e_scalar : ...\n                                 break;\n\n         case type_t::e_vector : ...\n                                 break;\n\n         case type_t::e_string : ...\n                                 break;\n\n         default               : continue;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting VTK Object Representation in Python\nDESCRIPTION: Example showing how VTK objects are represented in Python. The repr() shows both the C++ object address (in parentheses) and the Python wrapper object address (after 'at').\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> a = vtkFloatArray()\n>>> a\n<vtkmodules.vtkCommonCore.vtkFloatArray(0x5653a6a6f700) at 0x7f0e7aecf5e0>\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel StructuredGrid Structure in VTK XML\nDESCRIPTION: XML structure for defining a parallel structured grid dataset in VTK. Includes whole extent, ghost levels, and piece distribution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"PStructuredGrid\" ...>\n    <PStructuredGrid WholeExtent=\"x1 x2 y1 y2 z1 z2\"\n                     GhostLevel=\"#\">\n      <PPointData>...</PPointData>\n      <PCellData>...</PCellData>\n      <PPoints>...</PPoints>\n      <Piece Extent=\"x1 x2 y1 y2 z1 z2\"\n             Source=\"structuredGrid0.vts\"/>\n      ...\n    </PStructuredGrid>\n  </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Adding Core CXX Tests for VTK Filters General Module\nDESCRIPTION: Adds the main set of C++ tests for the VTK Filters General module. Each test is specified with an optional NO_VALID flag indicating that the test doesn't require image comparison validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersGeneralCxxTests tests\n  ArrayExtractFactoredArray.cxx,NO_VALID\n  ArrayMatricizeArray.cxx,NO_VALID\n  ArrayNormalizeMatrixVectors.cxx,NO_VALID\n  BoxClipPolyData.cxx\n  BoxClipTetrahedra.cxx\n  BoxClipTriangulate.cxx,NO_VALID\n  BoxClipTriangulateAndInterpolate.cxx\n  TestAppendLocationAttributes.cxx,NO_VALID\n  TestAppendPoints.cxx,NO_VALID\n  TestBlockIdScalars.cxx,NO_VALID\n  TestBooleanOperationPolyDataFilter.cxx\n  TestBooleanOperationPolyDataFilter2.cxx\n  TestCellValidator.cxx,NO_VALID\n  TestCellValidatorFilter.cxx,NO_VALID\n  TestCleanUnstructuredGridStrategies.cxx,NO_VALID\n  TestContourTriangulator.cxx\n  TestContourTriangulatorBadData.cxx\n  TestContourTriangulatorCutter.cxx\n  TestContourTriangulatorHoles.cxx\n  TestContourTriangulatorMarching.cxx\n  TestCountFaces.cxx,NO_VALID\n  TestCountVertices.cxx,NO_VALID\n  TestDeflectNormals.cxx\n  TestDeformPointSet.cxx\n  TestDensifyPolyData.cxx\n  TestDistancePolyDataFilter.cxx,LOOSE_VALID\n  TestDistancePolyDataFilter2.cxx\n  TestExplodeDataSet.cxx,NO_VALID\n  TestExtractGhostCells.cxx,NO_VALID\n  TestGraphWeightEuclideanDistanceFilter.cxx,NO_VALID\n  TestGroupDataSetsFilter.cxx,NO_VALID\n  TestHOStableClip.cxx,NO_VALID\n  TestImageDataToPointSet.cxx,NO_VALID\n  TestIntersectionPolyDataFilter.cxx\n  TestIntersectionPolyDataFilter2.cxx,NO_VALID\n  TestIntersectionPolyDataFilter3.cxx\n  TestIntersectionPolyDataFilter4.cxx,NO_VALID\n  TestJoinTables.cxx,NO_VALID\n  TestLoopBooleanPolyDataFilter.cxx\n  TestMergeArrays.cxx,NO_VALID\n  TestMergeCells.cxx,NO_VALID\n  TestMergeTimeFilter.cxx,NO_VALID\n  TestMergeVectorComponents.cxx,NO_VALID\n  TestOverlappingAMRLevelIdScalars.cxx,NO_VALID\n  TestPassArrays.cxx,NO_VALID\n  TestPassSelectedArrays.cxx,NO_VALID\n  TestPassThrough.cxx,NO_VALID\n  TestRandomAttributeGeneratorFilter.cxx,NO_VALID\n  TestRandomAttributeGeneratorHTG.cxx,NO_VALID,NO_OUTPUT\n  TestRectilinearGridToPointSet.cxx,NO_VALID\n  TestReflectionFilter.cxx,NO_VALID\n  TestSpatioTemporalHarmonicsAttribute.cxx\n  TestSplitByCellScalarFilter.cxx,NO_VALID\n  TestTableBasedClipDataSet.cxx,NO_VALID\n  TestTableFFT.cxx,NO_VALID\n  TestTableSplitColumnComponents.cxx,NO_VALID\n  TestTemporalPathLineFilter.cxx,NO_VALID\n  TestTessellator.cxx,NO_VALID\n  TestTransformFilter.cxx,NO_VALID\n  TestTransformPolyDataFilter.cxx,NO_VALID\n  TestUncertaintyTubeFilter.cxx\n  TestWarpScalarGenerateEnclosure.cxx\n  UnitTestMultiThreshold.cxx,NO_VALID\n  expCos.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Example VTK Legacy File with Metadata\nDESCRIPTION: A complete example of a VTK Legacy file demonstrating the use of metadata blocks for arrays. It includes component names and various types of information keys.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOLegacyInformationFormat.md#2025-04-21_snippet_0\n\nLANGUAGE: vtk\nCODE:\n```\n# vtk DataFile Version 4.1\nvtk output\nASCII\nDATASET UNSTRUCTURED_GRID\nPOINTS 6 float\n0 0 0 1 0 0 0.5 1 0\n0.5 0.5 1 0.5 -1 0 0.5 -0.5 1\n\nMETADATA\nCOMPONENT_NAMES\nX%20coordinates\nY%20coordinates\nZ%20coordinates\nINFORMATION 8\nNAME Double LOCATION TestKey\nDATA 1\nNAME DoubleVector LOCATION TestKey\nDATA 3 1 90 260\nNAME IdType LOCATION TestKey\nDATA 5\nNAME String LOCATION TestKey\nDATA Test%20String!%0ALine2\nNAME Integer LOCATION TestKey\nDATA 408\nNAME IntegerVector LOCATION TestKey\nDATA 3 1 5 45\nNAME StringVector LOCATION TestKey\nDATA 3\nFirst\nSecond%20(with%20whitespace!)\nThird%20(with%0Anewline!)\nNAME UnsignedLong LOCATION TestKey\nDATA 9\n\nCELLS 3 15\n4 0 1 2 3\n4 0 4 1 5\n4 5 3 1 0\n\nCELL_TYPES 3\n10\n10\n10\n\nCELL_DATA 3\nFIELD FieldData 1\nvtkGhostType 1 3 unsigned_char\n0 1 1\nMETADATA\nCOMPONENT_NAMES\nGhost%20level%20information\nINFORMATION 1\nNAME UNITS_LABEL LOCATION vtkDataArray\nDATA radians\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling and Enabling Base Functions in ExprTk\nDESCRIPTION: Demonstrates how to selectively disable and re-enable specific base functions ('sin' and 'cos') in the ExprTk parser.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_72\n\nLANGUAGE: cpp\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nparser.settings()\n   .disable_base_function(settings_t::e_bf_sin)\n   .disable_base_function(settings_t::e_bf_cos);\n\nparser\n   .compile(\"(sin(x) / cos(x)) == tan(x)\",expression); // failure\n\nparser.settings()\n   .enable_base_function(settings_t::e_bf_sin)\n   .enable_base_function(settings_t::e_bf_cos);\n\nparser\n   .compile(\"(sin(x) / cos(x)) == tan(x)\",expression); // success\n```\n\n----------------------------------------\n\nTITLE: Applying Validators with Application Index in CLI11 (C++)\nDESCRIPTION: This code snippet demonstrates how to apply validators to specific elements of an option using the `application_index` method.  This is useful when an option represents a pair or tuple, and each element needs to satisfy different validation rules.  The validators ensure the first element is a positive number and the second is an existing file.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nopt->check(CLI::Validator(CLI::PositiveNumber).application_index(0));\nopt->check(CLI::Validator(CLI::ExistingFile).application_index(1));\n```\n\n----------------------------------------\n\nTITLE: VTK Library Linking and Initialization\nDESCRIPTION: Links VTK libraries to the project and auto-initializes VTK modules for the target application\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickCone/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${MYNAME} PRIVATE ${VTK_LIBRARIES})\nvtk_module_autoinit(TARGETS ${MYNAME} MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of C++ Tests in CMake\nDESCRIPTION: This snippet checks if C++ testing is enabled and adds the 'Cxx' subdirectory to the build if it is. It uses the vtk_testing_cxx_disabled variable to determine whether to include C++ tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Image/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Block-Style If-Else Statement in ExprTk\nDESCRIPTION: Demonstrates an if-else statement using block syntax with curly braces for multiple operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_38\n\nLANGUAGE: ExprTk\nCODE:\n```\nif (x < y)\n{\n   y := z + x;\n   z := x + 3;\n}\nelse\n   y := x - z;\n```\n\n----------------------------------------\n\nTITLE: Reading Fire Dynamics Simulator Output with VTK\nDESCRIPTION: Specialized VTK reader for processing FDS simulation metadata and associated output files, generating a vtkPartitionedDataSetCollection with comprehensive simulation data\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-FDSReader.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkFDSReader* reader = vtkFDSReader::New();\n// Supports reading:\n// - Grids\n// - Devices\n// - HRR Data\n// - Slice Data\n// - Boundary Representations\n```\n\n----------------------------------------\n\nTITLE: Detailed VTK Object Factory Declaration\nDESCRIPTION: Demonstrates explicit declaration of object factory overrides and module configuration using modern VTK CMake APIs. Includes class registration, override relationships, and module setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkObjectFactoryImpl)\n\n# Explicitly declare the override relationship.\nvtk_object_factory_declare(\n  BASE      vtkObjectFactoryBase\n  OVERRIDE  vtkObjectFactoryImpl)\n# Collects the set of declared overrides and writes out a source file.\nvtk_object_factory_declare(\n  # The path to the source is returned as a variable.\n  SOURCE_FILE factory_source\n  # As is its header file.\n  HEADER_FILE factory_header\n  # The export macro is now explicitly passed (instead of assumed based on the\n  # current module context).\n  EXPORT_MACRO MODULE_EXPORT)\n\nvtk_module_add_module(vtkModuleName\n  CLASSES ${classes}\n  SOURCES \"${factory_source}\"\n  PRIVATE_HEADERS \"${factory_header}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional FFMPEG Version Check\nDESCRIPTION: Adds additional class support based on FFMPEG version check. Includes vtkFFMPEGVideoSource for FFMPEG versions 3.1 or later.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT FFMPEG_VERSION VERSION_LESS \"3.1\")\n  list(APPEND classes\n    vtkFFMPEGVideoSource)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Chemistry Test Executable\nDESCRIPTION: Creates a test executable for VTK IO Chemistry tests with specific configuration options. The executable disables floating point exceptions and enables rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOChemistryCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Rendering Parallel LIC Module in CMake\nDESCRIPTION: Adds the VTK Rendering Parallel LIC module to the build, specifying classes, sources, headers, and private headers. This sets up the module for compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingParallelLIC\n  CLASSES ${classes}\n  SOURCES ${sources} ${vtk_object_factory_source}\n  HEADERS ${headers}\n  PRIVATE_HEADERS ${private_headers} ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Setting Classes and Configuring Object Factory in CMake\nDESCRIPTION: This snippet initializes the VTK classes to be used, such as vtkOpenGLAvatar and vtkVRRay, and configures the VTK object factory with base and override settings for the vtkAvatar. Dependencies include VTK rendering classes and the configuration requires specifying base classes and overrides.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VRModels/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkOpenGLAvatar\n  vtkVRRay)\n\nvtk_object_factory_declare(\n  BASE \"vtkAvatar\"\n  OVERRIDE \"vtkOpenGLAvatar\")\n```\n\n----------------------------------------\n\nTITLE: Defining VTK::RenderingCellGrid Module with vtk_module_add_module\nDESCRIPTION: Adds the RenderingCellGrid module to the VTK build system, specifying all components including classes, sources, headers, and private headers. This creates the module with all the necessary components and relationships.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingCellGrid\n  CLASSES ${classes}\n  SOURCES ${sources} ${vtk_object_factory_source}\n  HEADERS ${headers}\n  NOWRAP_HEADERS ${nowrap_headers}\n  PRIVATE_HEADERS ${private_headers} ${vtk_object_factory_header}\n)\nvtk_add_test_mangling(VTK::RenderingCellGrid)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Parallel Flow Paths Module in CMake\nDESCRIPTION: Adds the VTK Parallel Flow Paths module to the build system. It includes the previously defined classes, object factory source, and header files. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallelFlowPaths\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::FiltersParallelFlowPaths)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Theora Third-Party Module in CMake\nDESCRIPTION: Configures the Theora library as a third-party module in VTK. Specifies license information, version, and handles both internal and external build options with appropriate targets.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtktheora/COPYING\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (C) 2002-2009 Xiph.org Foundation\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/theora.git@for/vtk-20220517-1.1.1\"\n    VERSION\n      \"1.1.1\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE THEORA\n    TARGETS ${theora_external_targets}\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android NDK Settings for C++11 Support\nDESCRIPTION: Application.mk configuration to enable modern C++ support on Android. This switches to the LLVM C++ library, uses the Clang compiler, and enables RTTI and exceptions to fix Android's default old compiler settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nAPP_STL := c++_shared\nNDK_TOOLCHAIN_VERSION := clang3.6\nAPP_CPPFLAGS += -frtti -fexceptions\n```\n\n----------------------------------------\n\nTITLE: Configuring VPIC as VTK Third-Party Internal Module in CMake\nDESCRIPTION: This CMake configuration defines the integration of the VPIC library as an internal third-party module in VTK. It specifies licensing information (BSD-3-Clause-USGov), copyright attribution to Los Alamos National Security, source code location, and enables standard include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkvpic/LICENSE\"\n  SPDX_LICENSE_IDENTIFIER\n    \"LicenseRef-BSD-3-Clause-USGov\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2007, Los Alamos National Security, LLC\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://github.com/lanl/vpic.git\"\n  SPDX_CUSTOM_LICENSE_FILE\n    \"vtkvpic/LICENSE\"\n  SPDX_CUSTOM_LICENSE_NAME\n    \"BSD-3-Clause-USGov\"\n  VERSION\n    \"unknown\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI-based VTK Filters Parallel DIY2 Tests in CMake\nDESCRIPTION: Sets up MPI-based tests for VTK Filters Parallel DIY2 module. It configures tests with 2, 4, and 5 processes, and includes various test cases for parallel data processing and visualization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::mpi)\n\n  set (vtkFiltersParallelDIY2CxxTests-MPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkFiltersParallelDIY2CxxTests-MPI tests\n    TESTING_DATA\n    TestGhostCellsGenerator.cxx,NO_VALID\n    TestOverlappingCellsDetector.cxx,NO_VALID\n    TestPResampleHyperTreeGridWithDataSet.cxx\n    TestPResampleToImageCompositeDataSet.cxx\n    TestPResampleWithDataSet2.cxx\n    TestPResampleWithDataSet.cxx\n    TestProbeLineFilter.cxx,NO_VALID\n    TestPUniformGridGhostDataGenerator.cxx,NO_VALID\n    TestPUnstructuredGridGhostCellsGenerator.cxx,NO_VALID\n    TestRedistributeDataSetFilter.cxx\n    TestRedistributeDataSetFilterImplicitArray.cxx,NO_VALID\n    TestRedistributeDataSetFilterOnIOSS.cxx,NO_VALID\n    TestStructuredGridGhostDataGenerator.cxx,NO_VALID\n    TestUnstructuredGridGeometryFilterGhostCells.cxx,NO_VALID)\n\n  if(TARGET VTK::FiltersParallelMPI)\n    vtk_add_test_mpi(vtkFiltersParallelDIY2CxxTests-MPI tests\n      TESTING_DATA\n      TestPResampleToImage.cxx)\n  endif ()\n\n  # We want 4 processes to test the vtkAggregateDataSetFilter properly.\n  set (vtkFiltersParallelDIY2CxxTests-MPI_NUMPROCS 4)\n  vtk_add_test_mpi(vtkFiltersParallelDIY2CxxTests-MPI no_data_tests_4_procs\n    DIYAggregateDataSet.cxx\n    TestAdaptiveResampleToImage.cxx\n    TestGenerateGlobalIds.cxx\n    )\n\n  # We want at least 5 processes to test the TestDIYGenerateCuts properly.\n  # See https://gitlab.kitware.com/paraview/paraview/-/issues/21396\n  set (vtkFiltersParallelDIY2CxxTests-MPI_NUMPROCS 5)\n  vtk_add_test_mpi(vtkFiltersParallelDIY2CxxTests-MPI no_data_tests_5_procs\n    TestDIYGenerateCuts.cxx\n    )\n\n  set(all_tests\n    ${tests}\n    ${no_data_tests_4_procs}\n    ${no_data_tests_5_procs}\n    )\n\n  vtk_test_cxx_executable(vtkFiltersParallelDIY2CxxTests-MPI all_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Parallel MPI Tests for VTK Filters\nDESCRIPTION: This snippet checks if the VTK::ParallelMPI target is available and adds a series of tests that assess descriptive, correlative, and random statistics for parallel processing in VTK. The tests include various statistical methods tailored for MPI execution. The snippet ensures that the tests are only added when the MPI target is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelStatistics/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n  vtk_add_test_mpi(vtkFiltersParallelStatisticsCxxTests-MPI tests\n    TestPDescriptiveStatistics.cxx\n    TestPCorrelativeStatistics.cxx\n    TestRandomPContingencyStatisticsMPI.cxx\n    TestRandomPKMeansStatisticsMPI.cxx\n    TestRandomPMomentStatisticsMPI.cxx\n    TestRandomPOrderStatisticsMPI.cxx\n    )\n  vtk_test_cxx_executable(vtkFiltersParallelStatisticsCxxTests-MPI tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Auto-Processing Tools\nDESCRIPTION: Enables automatic Qt meta-object compiler (MOC), resource compiler (RCC), and UI compiler (UIC) processing for the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/StatsView/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\nset(CMAKE_AUTOUIC ON)\n```\n\n----------------------------------------\n\nTITLE: Defining HDF5 Structure for VTK PartitionedDataSetCollection\nDESCRIPTION: This HDF5 structure defines a VTK PartitionedDataSetCollection with two blocks and an assembly. It includes detailed group and dataset definitions for each block, including attributes, cell data, point data, and connectivity information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_38\n\nLANGUAGE: HDF5\nCODE:\n```\nHDF5 \"composite.hdf\" {\nGROUP \"/\" {\n   GROUP \"VTKHDF\" {\n      ATTRIBUTE \"Type\" {\n         DATATYPE  H5T_STRING {\n            STRSIZE 28;\n            STRPAD H5T_STR_NULLTERM;\n            CSET H5T_CSET_ASCII;\n            CTYPE H5T_C_S1;\n         }\n         DATASPACE  SCALAR\n      }\n      ATTRIBUTE \"Version\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n      }\n      GROUP \"Assembly\" {\n         GROUP \"blockName0\" {\n            SOFTLINK \"Block0\" {\n               LINKTARGET \"/VTKHDF/Block0\"\n            }\n         }\n         GROUP \"blockName2\" {\n            SOFTLINK \"Block1\" {\n               LINKTARGET \"/VTKHDF/Block1\"\n            }\n         }\n         GROUP \"groupName0\" {\n            GROUP \"blockName1\" {\n               SOFTLINK \"Block1\" {\n                  LINKTARGET \"/VTKHDF/Block1\"\n               }\n            }\n         }\n      }\n      GROUP \"Block0\" {\n         ATTRIBUTE \"Index\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SCALAR\n         }\n         ATTRIBUTE \"Type\" {\n            DATATYPE  H5T_STRING {\n               STRSIZE 8;\n               STRPAD H5T_STR_NULLTERM;\n               CSET H5T_CSET_ASCII;\n               CTYPE H5T_C_S1;\n            }\n            DATASPACE  SCALAR\n         }\n         ATTRIBUTE \"Version\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n         }\n         GROUP \"CellData\" {\n            DATASET \"Materials\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 96 ) / ( 96 ) }\n            }\n         }\n         GROUP \"Lines\" {\n            DATASET \"Connectivity\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 0 ) / ( 0 ) }\n            }\n            DATASET \"NumberOfCells\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"NumberOfConnectivityIds\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"Offsets\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n         }\n         DATASET \"NumberOfPoints\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         GROUP \"PointData\" {\n            DATASET \"Normals\" {\n               DATATYPE  H5T_IEEE_F32LE\n               DATASPACE  SIMPLE { ( 50, 3 ) / ( 50, 3 ) }\n            }\n            DATASET \"Warping\" {\n               DATATYPE  H5T_IEEE_F32LE\n               DATASPACE  SIMPLE { ( 50, 3 ) / ( 50, 3 ) }\n            }\n         }\n         DATASET \"Points\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 50, 3 ) / ( 50, 3 ) }\n         }\n         GROUP \"Polygons\" {\n            DATASET \"Connectivity\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 288 ) / ( 288 ) }\n            }\n            DATASET \"NumberOfCells\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"NumberOfConnectivityIds\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"Offsets\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 97 ) / ( 97 ) }\n            }\n         }\n         GROUP \"Strips\" {\n            DATASET \"Connectivity\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 0 ) / ( 0 ) }\n            }\n            DATASET \"NumberOfCells\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"NumberOfConnectivityIds\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"Offsets\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n         }\n         GROUP \"Vertices\" {\n            DATASET \"Connectivity\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 0 ) / ( 0 ) }\n            }\n            DATASET \"NumberOfCells\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"NumberOfConnectivityIds\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n            DATASET \"Offsets\" {\n               DATATYPE  H5T_STD_I64LE\n               DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n            }\n         }\n      }\n      GROUP \"Block1\" {\n         ATTRIBUTE \"Index\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SCALAR\n         }\n         ATTRIBUTE \"Type\" {\n            DATATYPE  H5T_STRING {\n               STRSIZE 16;\n               STRPAD H5T_STR_NULLTERM;\n               CSET H5T_CSET_ASCII;\n               CTYPE H5T_C_S1;\n            }\n            DATASPACE  SCALAR\n         }\n         ATTRIBUTE \"Version\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n         }\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 8 ) / ( 8 ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         DATASET \"NumberOfPoints\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n         }\n         DATASET \"Points\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 8, 3 ) / ( 8, 3 ) }\n         }\n         DATASET \"Types\" {\n            DATATYPE  H5T_STD_U8LE\n            DATASPACE  SIMPLE { ( 1 ) / ( 1 ) }\n         }\n      }\n   }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Using the derivative Helper Function in ExprTk\nDESCRIPTION: Shows how to calculate the numerical derivative of a single-variable expression at a given point using the five-point stencil method. Demonstrates two approaches: differentiating with a variable reference and differentiating using the variable name as a string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_95\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\nconst std::string expression_string = \"sqrt(1 - (x^2))\";\n\nT x = T(0);\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.compile(expression_string,expression);\n\n....\n\n// Differentiate expression at value of x = 12.3 using a reference\n// to the x variable\nx = T(12.3);\nT derivative1 = exprtk::derivative(expression, x);\n\n// Differentiate expression where value x = 45.6 using name\n// of the x variable\nx = T(45.6);\nT derivative2 = exprtk::derivative(expression, \"x\");\n```\n\n----------------------------------------\n\nTITLE: Perl Script for VTK 3.2 Code Upgrade\nDESCRIPTION: UpgradeFrom32.pl script that automatically identifies and replaces deprecated classes and methods with their new counterparts in VTK 4.0.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nUpgradeFrom32.pl\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes of World Communicator\nDESCRIPTION: This code demonstrates how to retrieve values of predefined attributes attached to the world communicator using the Get_attr method on the MPI.COMM_WORLD instance.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CHANGES.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntag_ub = MPI.COMM_WORLD.Get_attr(MPI.TAG_UB)\n```\n\n----------------------------------------\n\nTITLE: VTK Module Test Data Configuration\nDESCRIPTION: Example of adding test data references using vtk_module_test_data in CMakeLists.txt\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/lines.vtp)\n```\n\n----------------------------------------\n\nTITLE: Adding Option Groups in CLI11\nDESCRIPTION: Shows how to add and configure option groups in CLI11\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\n.add_option_group(name,description)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOSS Third-Party Module in CMake\nDESCRIPTION: Sets up the VTK IOSS module as a third-party component, specifying license information, version, and include directories. It also handles external package configuration and target setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkioss/COPYRIGHT\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright(C) 1999-2017 National Technology & Engineering Solutions of Sandia, LLC (NTESS)\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/seacas.git@ioss/for/vtk-20250313-v2025-02-27/seacas/libraries/ioss/\"\n    VERSION\n      \"2025-02-27\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE SEACASIoss\n    TARGETS Ioss\n    USE_VARIABLES SEACASIoss_INCLUDE_DIRS\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for EasyView Project with VTK and Qt\nDESCRIPTION: This CMake snippet configures the EasyView project with automatic Qt MOC, RCC, and UIC processing. It sets up source files, UI files, headers, and resources, finds Qt dependencies, and creates an executable that links against VTK and Qt libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/EasyView/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(EasyView)\n\n# Instruct CMake to run moc automatically when needed.\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\nset(CMAKE_AUTOUIC ON)\n\n# Set your files and resources here\nset(Srcs\n  EasyView.cxx\n  main.cxx)\nset(UIs\n  EasyView.ui)\nset(Hdrs\n  EasyView.h)\nset(Rcs\n  Icons/icons.qrc)\n\n# We have ui files\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nsource_group(\"Resources\" FILES\n  ${UIs}\n  ${Rcs}\n)\n\nadd_executable(EasyView\n  MACOSX_BUNDLE  ${Srcs} ${Hdrs} ${UIs} ${Rcs})\ntarget_link_libraries(EasyView\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS EasyView\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: VTK Image Probe Filter Usage\nDESCRIPTION: New vtkImageProbeFilter class that functions similarly to vtkProbeFilter but specifically for vtkImageData\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.0.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvtkImageProbeFilter\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking the Native Library\nDESCRIPTION: This snippet adds a shared library named 'NativeVTK' using the specified source files. It also links the library with necessary dependencies such as VTK libraries, Android framework libraries, and the log library.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/jni/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(NativeVTK SHARED ${sources})\ntarget_link_libraries(NativeVTK ${VTK_LIBRARIES}\n  android\n  log\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Shader Files for VTK in CMake\nDESCRIPTION: Processes GLSL shader test files by encoding and preparing them for C++ compilation in the VTK rendering tests. The script iterates over a set list of shader files and encodes them into a format suitable for inclusion in the C++ build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_shader_files\n  TestGPURayCastUserShader2_FS.glsl\n  )\nunset(shader_c_files)\nforeach(file ${test_shader_files})\n  vtk_encode_string(\n    INPUT         \"${file}\"\n    SOURCE_OUTPUT source)\n  list(APPEND shader_c_files ${source})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting OSPRay and VisRTX Build Options in CMake\nDESCRIPTION: Defines CMake options for enabling OSPRay and VisRTX ray tracing backends, including a denoiser option for OSPRay.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_ENABLE_OSPRAY \"Enable OSPRay RayTracing backend\" ON)\ncmake_dependent_option(VTKOSPRAY_ENABLE_DENOISER\n  \"build OSPRay Renderer using OpenImageDenoise\" OFF\n  \"VTK_ENABLE_OSPRAY\" OFF)\n\noption(VTK_ENABLE_VISRTX \"Enable VisRTX RayTracing backend\" OFF)\nif (VTK_ENABLE_VISRTX)\n  list(APPEND sources RTWrapper/VisRTX/VisRTXBackend.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Point Data Arrays in VTK XML\nDESCRIPTION: XML structure for defining point data arrays in VTK parallel formats. Includes scalar and vector data specifications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<PPointData Scalars=\"Temperature\" Vectors=\"Velocity\">\n      <PDataArray Name=\"Velocity\" .../>\n      <PDataArray Name=\"Temperature\" .../>\n      <PDataArray Name=\"Pressure\" .../>\n   </PPointData>\n```\n\n----------------------------------------\n\nTITLE: Computing Second Derivatives with ExprTk in C++\nDESCRIPTION: Demonstrates how to compute the second derivative of a mathematical expression using the ExprTk library. The example shows two methods: using a reference to the variable and using the variable name as a string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_97\n\nLANGUAGE: C++\nCODE:\n```\nconst std::string expression_string = \"sqrt(1 - (x^2))\";\n\nT x = T(0);\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.compile(expression_string,expression);\n\n....\n\n// Second derivative of expression where value of x = 12.3 using a\n// reference to x variable\nx = T(12.3);\nT derivative1 = exprtk::second_derivative(expression,x);\n\n// Second derivative of expression where value of x = 45.6 using\n// name of x variable\nx = T(45.6);\nT derivative2 = exprtk::second_derivative(expression, \"x\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for libxml2 in VTK\nDESCRIPTION: Sets up platform-specific and optional library dependencies for libxml2. This includes module support dependencies, UNIX math library, Windows networking libraries, and optional components like iconv, ICU, LZMA, threading, and zlib.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(LIBXML2_WITH_MODULES)\n    if(HAVE_DLOPEN)\n        # target_link_libraries(LibXml2 PRIVATE dl)\n        # set(MODULE_PLATFORM_LIBS \"-ldl\")\n        vtk_module_link(VTK::libxml2 PRIVATE dl)\n    endif()\n\n    if(HAVE_SHLLOAD)\n        # target_link_libraries(LibXml2 PRIVATE dld)\n        # set(MODULE_PLATFORM_LIBS \"-ldld\")\n        vtk_module_link(VTK::libxml2 PRIVATE dld)\n    endif()\nendif()\n\nif(UNIX)\n    # target_link_libraries(LibXml2 PRIVATE m)\n    # set(LIBM \"-lm\")\n    vtk_module_link(VTK::libxml2 PRIVATE m)\nendif()\n\nif(WIN32)\n    # target_link_libraries(LibXml2 PRIVATE ws2_32)\n    # set(WINSOCK_LIBS \"-lws2_32\")\n    vtk_module_link(VTK::libxml2 PRIVATE ws2_32)\n    # target_link_libraries(LibXml2 PRIVATE bcrypt)\n    # set(CRYPTO_LIBS \"-lbcrypt\")\n    vtk_module_link(VTK::libxml2 PRIVATE bcrypt)\nendif()\n\nif(LIBXML2_WITH_ICONV)\n    # target_link_libraries(LibXml2 PUBLIC Iconv::Iconv)\n    # if(NOT Iconv_IS_BUILT_IN)\n    #     set(ICONV_LIBS \"-liconv\")\n    #  endif()\n    vtk_module_link(VTK::libxml2 PUBLIC Iconv::Iconv)\nendif()\n\nif(LIBXML2_WITH_ICU)\n    # target_link_libraries(LibXml2 PRIVATE ICU::data ICU::i18n ICU::uc)\n    # if(WIN32)\n    #     set(ICU_LDFLAGS \"-licudt -licuin -licuuc\")\n    # else()\n    #     set(ICU_LDFLAGS \"-licudata -licui18n -licuuc\")\n    # endif()\n    vtk_module_link(VTK::libxml2 PRIVATE ICU::data ICU::i18n ICU::uc)\n    # list(APPEND XML_PRIVATE_LIBS \"${ICU_LDFLAGS}\")\n    # pkg_check_modules(ICU_PC IMPORTED_TARGET icu-i18n)\n    # if(ICU_PC_FOUND)\n    #     list(APPEND XML_PC_REQUIRES icu-i18n)\n    # else()\n    #     list(APPEND XML_PC_LIBS \"${ICU_LDFLAGS}\")\n    # endif()\nendif()\n\nif(LIBXML2_WITH_LZMA)\n    # target_link_libraries(LibXml2 PRIVATE LibLZMA::LibLZMA)\n    # set(LibLZMA_LDFLAGS \"-llzma\")\n    vtk_module_link(VTK::libxml2 PRIVATE LibLZMA::LibLZMA)\n    # list(APPEND XML_PRIVATE_LIBS \"${LibLZMA_LDFLAGS}\")\n    # pkg_check_modules(LibLZMA_PC IMPORTED_TARGET liblzma)\n    # if(LibLZMA_PC_FOUND)\n    #     list(APPEND XML_PC_REQUIRES liblzma)\n    # else()\n    #     list(APPEND XML_PC_LIBS \"${LibLZMA_LDFLAGS}\")\n    # endif()\nendif()\n\nif(LIBXML2_WITH_THREADS)\n\t# target_link_libraries(LibXml2 PRIVATE Threads::Threads)\n\t# set(THREAD_LIBS ${CMAKE_THREAD_LIBS_INIT})\n\tvtk_module_link(VTK::libxml2 PRIVATE Threads::Threads)\nendif()\n\nif(LIBXML2_WITH_ZLIB)\n\t# target_link_libraries(LibXml2 PRIVATE ZLIB::ZLIB)\n\t# set(Z_LIBS \"-lz\")\n\tvtk_module_link(VTK::libxml2 PRIVATE VTK::zlib)\n  #  list(APPEND XML_PRIVATE_LIBS \"${ZLIB_LDFLAGS}\")\n  #  pkg_check_modules(ZLIB_PC IMPORTED_TARGET zlib)\n  #  if(ZLIB_PC_FOUND)\n  #    list(APPEND XML_PC_REQUIRES zlib)\n  #  else()\n  #    list(APPEND XML_PC_LIBS \"${ZLIB_LDFLAGS}\")\n  #  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Geometry No-Data Tests in CMake\nDESCRIPTION: Defines a set of tests that don't require input data files. These tests are flagged with NO_DATA, NO_VALID, and NO_OUTPUT to indicate they don't need data files, image validation, or output checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersGeometryCxxTests no_data_tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestGeometryFilterCellData.cxx\n  TestMappedUnstructuredGrid.cxx\n  TestStructuredAMRGridConnectivity.cxx\n  TestStructuredGridConnectivity.cxx\n  UnitTestDataSetSurfaceFilter.cxx\n  UnitTestProjectSphereFilter.cxx\n  TestMatchBoundariesIgnoringCellOrder.cxx\n  TestUnstructuredGridGeometryFilterDegenerateCells.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Combining Validators with Logical Operators in CLI11 (C++)\nDESCRIPTION: Shows how to combine multiple validators using logical operators & and | for more complex checks.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n->check(CLI::Range(0,10)|CLI::Range(20,30));\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Extraction Module\nDESCRIPTION: Adds the FiltersExtraction module to VTK using the defined classes and configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersExtraction\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersExtraction)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zero Parameter Function Trait in C++\nDESCRIPTION: Demonstrates how to enable the zero parameter trait for a function in ExprTk. This allows the function to be called with or without parentheses when it has no parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_61\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct foo final : public exprtk::ivararg_function<T>\n{\n   foo()\n   {\n      exprtk::enable_zero_parameters(*this);\n   }\n\n   inline T operator()(const std::vector<T>& arglist) override\n   { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Tests\nDESCRIPTION: This snippet adds a VTK module named 'FiltersSources' and configures it using the provided list of classes. Additionally, it includes a test for name mangling in the module. This step is necessary to organize and verify the correct functionality of VTK classes in the module. No specific parameters required.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersSources\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersSources)\n```\n\n----------------------------------------\n\nTITLE: Create Custom Target for Debug APK Build\nDESCRIPTION: Creates a custom target, `VolumeRender-apk-debug`, which builds the debug APK using the Ant build tool. This target depends on `VolumeRender-apk-release`, `VolumeRender-ant-configure` and `VolumeRender`, ensuring the release APK has already been built and the project is configured before the debug build starts.  This target is marked as `ALL` to be built by default.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(VolumeRender-apk-debug ALL\n  COMMAND ${ANT_EXECUTABLE}\n          -file \"${CMAKE_CURRENT_BINARY_DIR}/build.xml\"\n          debug)\nadd_dependencies(VolumeRender-apk-debug\n  VolumeRender-apk-release\n  VolumeRender-ant-configure\n  VolumeRender)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties for Error Handling in CMake\nDESCRIPTION: This snippet sets a property on a specific test (`VTK::IOADIOS2Cxx-UnitTestIOADIOS2VTX`) to disable checking of fail regular expressions. This is used when the test is expected to produce pipeline errors as part of its execution and verification.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# This test loads several \"bad\" files to make sure the reader correctly\n# responds and does not crash. But we do expect pipeline errors, so turn\n# off the checking of fail regular expressions.\nset_property(TEST VTK::IOADIOS2Cxx-UnitTestIOADIOS2VTX PROPERTY FAIL_REGULAR_EXPRESSION)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Build Library and Handling Emscripten Flags - CMake\nDESCRIPTION: This snippet creates a library target and sets up the necessary flags and modules for compiling with Emscripten for WebAssembly support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(vtkbuild INTERFACE)\nadd_library(VTKTestExternalWasm::vtkbuild ALIAS vtkbuild)\n\nlist(APPEND CMAKE_MODULE_PATH \"${VTK_TOP_DIR}/CMake\")\ninclude(\"${VTK_SOURCE_DIR}/CMake/vtkTesting.cmake\")\ninclude(\"${VTK_SOURCE_DIR}/CMake/vtkEmscripten.cmake\")\ninclude(\"${VTK_SOURCE_DIR}/CMake/vtkCompilerPlatformFlags.cmake\")\ninclude(\"${VTK_SOURCE_DIR}/CMake/vtkCompilerWarningFlags.cmake\")\ninclude(\"${VTK_SOURCE_DIR}/CMake/vtkOpenGLOptions.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Defining and Setting Options in CMake\nDESCRIPTION: This snippet defines and sets options related to explicit alignment and C++ exceptions handling in tests and examples using CMake. It controls whether aligned memory and exception support should be disabled with specific compiler flags or definitions. There are no external dependencies, but it assumes CMake is properly installed and configured for the project. Inputs include the project macros such as EIGEN_TEST_NO_EXPLICIT_ALIGNMENT, and outputs are status messages indicating the set options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\noption(EIGEN_TEST_NO_EXPLICIT_ALIGNMENT \"Disable explicit alignment (hence vectorization) in tests/examples\" OFF)\nelse ()\nset(EIGEN_TEST_NO_EXPLICIT_ALIGNMENT OFF)\nendif ()\nif(EIGEN_TEST_NO_EXPLICIT_ALIGNMENT)\n  add_definitions(-DEIGEN_DONT_ALIGN=1)\n  message(STATUS \"Disabling alignment in tests/examples\")\nendif()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): hardcoding settings.\noption(EIGEN_TEST_NO_EXCEPTIONS \"Disables C++ exceptions\" OFF)\nelse ()\nset(EIGEN_TEST_NO_EXCEPTIONS OFF)\nendif ()\nif(EIGEN_TEST_NO_EXCEPTIONS)\n  ei_add_cxx_compiler_flag(\"-fno-exceptions\")\n  message(STATUS \"Disabling exceptions in tests/examples\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Paths - Core Data Files\nDESCRIPTION: Defines the paths to various VTK test data files including HTG files, VTK files, images, and other geometric data formats needed for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/HTG/random_attributes.htg\n  Data/HTG/shell_3d.htg\n  Data/Quadratic/CylinderQuadratic.vtk\n  Data/Tango/TangoIcons.png\n  Data/TriangulatorBadData.vtk\n  Data/UCD2D/UCD_00005.inp\n  Data/2DScalar.vti\n  Data/can.vtu\n  Data/cow.vtp\n  Data/distTest.vtm\n  Data/explicitStructuredGrid.vtu\n  Data/fullhead15.png\n  Data/hexa.vtk\n  Data/mb-of-mps.vtm\n  Data/mb_single_piece_empty_data.vtm\n  Data/mine_with_dates.vtp\n  Data/quadraticTetra01.vtu\n  Data/rectGrid.vtr\n  Data/scalars.vti\n  Data/sphereMirror.vtpc\n  Data/sphereMirror_0_0.vtp\n  Data/sphereMirror_1_0.vtp\n  Data/structGrid.vts\n  Data/waveletMaterial.vti)\n```\n\n----------------------------------------\n\nTITLE: New GetMinSpatialDimension Method in vtkDataSet Class\nDESCRIPTION: A new method GetMinSpatialDimension has been added to the vtkDataSet class that returns the minimum spatial dimension of the dataset. This provides a way to determine the lowest geometric dimension represented by the dataset.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/add-GetMinSpatialDimension-vtkDataSet.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkDataSet::GetMinSpatialDimension()\n```\n\n----------------------------------------\n\nTITLE: Using CLI11's AutoTimer for Code Block Timing\nDESCRIPTION: This snippet shows how to use CLI11's AutoTimer class to easily time a block of code. The timer automatically prints the elapsed time when the block ends.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_44\n\nLANGUAGE: cpp\nCODE:\n```\n{\nCLI::AutoTimer timer {\"My Long Process\", CLI::Timer::Big};\nsome_long_running_process();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK OpenGL Overrides in CMake\nDESCRIPTION: This snippet sets up the class dependencies for the VTK OpenGL module. It begins by defining the classes that need to be mapped by OpenGL, specifically targeting 'vtkOpenGLMoleculeMapper'. It subsequently establishes OpenGL-specific overrides for these classes by configuring the object factory. The VTK module, 'DomainsChemistryOpenGL2', is then added with the specified class and source dependencies, including header configuration. This setup is crucial for enabling OpenGL functionality within the VTK framework and requires CMake as a dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ChemistryOpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOpenGLMoleculeMapper\n  )\n\n# Now for the object factory.\nset(opengl_overrides\n  MoleculeMapper\n  )\n\nforeach(_override ${opengl_overrides})\n  vtk_object_factory_declare(\n    BASE vtk${_override}\n    OVERRIDE vtkOpenGL${_override})\nendforeach()\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKDOMAINSCHEMISTRYOPENGL2_EXPORT\")\n\nvtk_module_add_module(VTK::DomainsChemistryOpenGL2\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::DomainsChemistryOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests for VTK InfovisCore Module\nDESCRIPTION: Defines a comprehensive list of C++ tests for the InfovisCore module using the vtk_add_test_cxx macro. This includes tests that require data and those that don't, with various options like NO_VALID and NO_DATA.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkInfovisCoreCxxTests tests\n  ${NEEDS_DATA}\n  ArrayDotProductSimilarity.cxx,NO_VALID,NO_DATA\n  ArraySparseArrayToTable.cxx,NO_VALID\n  ArrayTableToSparseArray.cxx,NO_VALID\n  ArrayToTable.cxx,NO_VALID\n  ArrayTransposeMatrix.cxx,NO_VALID\n  TestArrayNorm.cxx,NO_VALID,NO_DATA\n  TestCollapseVerticesByArray.cxx,NO_VALID\n  TestContinuousScatterPlot.cxx,NO_VALID\n  TestExtractSelectedTree.cxx,NO_VALID\n  TestExtractSelectedGraph.cxx,NO_VALID\n  TestGraphAlgorithms.cxx\n  TestMergeGraphs.cxx,NO_VALID\n  TestPruneTreeFilter.cxx\n  TestRandomGraphSource.cxx,NO_VALID\n  TestReduceTable.cxx,NO_VALID\n  TestRemoveIsolatedVertices.cxx,NO_VALID\n  TestStreamGraph.cxx,NO_VALID\n  TestTableToArray.cxx,NO_VALID\n  TestTableToGraph.cxx\n  TestThresholdTable.cxx,NO_VALID\n  TestTreeDifferenceFilter.cxx,NO_VALID\n  TestWordCloud\n  UnitTestWordCloud\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting classes for VTK::GUISupportQt Module\nDESCRIPTION: This snippet defines the list of classes that will be part of the VTK::GUISupportQt module. These classes are typically Qt-based widgets and adapters used to integrate VTK rendering with Qt applications.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  QFilterTreeProxyModel\n  QVTKApplication\n  QVTKInteractor\n  QVTKInteractorAdapter\n  QVTKOpenGLNativeWidget\n  QVTKOpenGLStereoWidget\n  QVTKOpenGLWindow\n  QVTKRenderWindowAdapter\n  QVTKTableModelAdapter\n  vtkEventQtSlotConnect\n  vtkQWidgetRepresentation\n  vtkQWidgetTexture\n  vtkQWidgetWidget\n  vtkQtAbstractModelAdapter\n  vtkQtAnnotationLayersModelAdapter\n  vtkQtConnection\n  vtkQtDebugLeaksModel\n  vtkQtDebugLeaksView\n  vtkQtTableModelAdapter\n  vtkQtTreeModelAdapter)\n```\n\n----------------------------------------\n\nTITLE: Controller Model JSON\nDESCRIPTION: This JSON snippet defines the structure for specifying controller models for different OpenXR interaction profiles. It maps interaction profiles to asset paths for left and right controller models, enabling VTK to render custom controller models in OpenXR applications. Relative paths are specified from the root of the model archive.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"interaction_profile\": \"/interaction_profiles/htc/vive_controller\",\n    \"asset_paths\": {\n      \"left_controller\": \"htc_vive/scene.gltf\",\n      \"right_controller\": \"htc_vive/scene.gltf\"\n    }\n  },\n  {\n    \"interaction_profile\": \"/interaction_profiles/valve/index_controller\",\n    \"asset_paths\": {\n      \"left_controller\": \"valve_index/left/scene.gltf\",\n      \"right_controller\": \"valve_index/right/scene.gltf\"\n    }\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Grammar Rule using PEGTL in C++\nDESCRIPTION: This C++ snippet uses the PEGTL library to define a parsing rule for integers, which may have an optional sign. The provided rule uses PEGTL's combinators to create the rule for integers consisting of a sequence of digits possibly prefixed by '+' or '-'. It requires the PEGTL library and uses templates for rule creation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pegtl/vtkpegtl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// PEG rule for integers consisting of a non-empty\\n// sequence of digits with an optional sign:\\n\\n// sign ::= '+' / '-'\\n// integer ::= sign? digit+\\n\\n// The same parsing rule implemented with the PEGTL:\\n\\nusing namespace tao::pegtl;\\n\\nstruct sign : one< '+', '-' > {};\\nstruct integer : seq< opt< sign >, plus< digit > > {};\n```\n\n----------------------------------------\n\nTITLE: VTK Matrix Class Documentation Example\nDESCRIPTION: This example provides documentation for the `vtkMatrix4x4` class, describing its function as a representation of 4x4 transformation matrices. It includes inheritance details and important considerations for use in 3D rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\n    vtkMatrix4x4 - represent and manipulate 4x4 transformation matrices\n\n    Superclass: vtkObject\n\n    vtkMatrix4x4 is a class to represent and manipulate 4x4 matrices.\n    Specifically, it is designed to work on 4x4 transformation matrices\n    found in 3D rendering using homogeneous coordinates [x y z w]. Many\n    of the methods take an array of 16 doubles in row-major format. Note\n    that OpenGL stores matrices in column-major format, so the matrix\n    contents must be transposed when they are moved between OpenGL and\n    VTK.\n    @sa\n    vtkTransform\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL C++ Test Executable\nDESCRIPTION: This CMake command creates the test executable for the MySQL C++ tests. It uses the `vtk_test_cxx_executable` macro, which ensures that the necessary VTK libraries are linked and that the executable is properly configured for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOMySQLCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Including VTK Array Dispatch Documentation\nDESCRIPTION: CMake include directive that references the Array Dispatch documentation file from the VTK Doxygen documentation path.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/array_dispatch.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n{include} ../../Doxygen/ArrayDispatch-VTK-7-1.md\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package Dependencies - CMake\nDESCRIPTION: This section of the CMake file attempts to find the necessary VTK components required for the Cone example. If VTK is not found, it provides a message and skips the configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    FiltersSources      # VTK pipeline\n    InteractionStyle    # Mouse handling\n    RenderingOpenGL2    # For Rendering\n    RenderingUI         # For SDL2 Window\n)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining ExodusII Source Files in CMake\nDESCRIPTION: Extensive list of source files for the ExodusII library, including both deprecated and current implementation files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  src/deprecated/ex_get_concat_node_sets.c\n  src/deprecated/ex_get_concat_side_sets.c\n  src/deprecated/ex_get_elem_attr.c\n  src/deprecated/ex_get_elem_attr_names.c\n  src/deprecated/ex_get_elem_blk_ids.c\n  src/deprecated/ex_get_elem_block.c\n  src/deprecated/ex_get_elem_conn.c\n  src/deprecated/ex_get_elem_map.c\n  src/deprecated/ex_get_elem_num_map.c\n  src/deprecated/ex_get_elem_var.c\n  src/deprecated/ex_get_elem_var_tab.c\n  src/deprecated/ex_get_elem_var_time.c\n  src/deprecated/ex_get_glob_var_time.c\n  src/deprecated/ex_get_glob_vars.c\n  src/deprecated/ex_get_n_attr.c\n  src/deprecated/ex_get_n_conn.c\n  src/deprecated/ex_get_n_coord.c\n  src/deprecated/ex_get_n_elem_attr.c\n  src/deprecated/ex_get_n_elem_conn.c\n  src/deprecated/ex_get_n_elem_num_map.c\n  src/deprecated/ex_get_n_elem_var.c\n  src/deprecated/ex_get_n_nodal_var.c\n  src/deprecated/ex_get_n_node_num_map.c\n  src/deprecated/ex_get_n_node_set.c\n  src/deprecated/ex_get_n_node_set_df.c\n  src/deprecated/ex_get_n_one_attr.c\n  src/deprecated/ex_get_n_side_set.c\n  src/deprecated/ex_get_n_side_set_df.c\n  src/deprecated/ex_get_n_var.c\n  src/deprecated/ex_get_nodal_var.c\n  src/deprecated/ex_get_nodal_var_time.c\n  src/deprecated/ex_get_node_map.c\n  src/deprecated/ex_get_node_num_map.c\n  src/deprecated/ex_get_node_set.c\n  src/deprecated/ex_get_node_set_dist_fact.c\n  src/deprecated/ex_get_node_set_ids.c\n  src/deprecated/ex_get_node_set_param.c\n  src/deprecated/ex_get_nset_var.c\n  src/deprecated/ex_get_nset_var_tab.c\n  src/deprecated/ex_get_one_elem_attr.c\n  src/deprecated/ex_get_partial_elem_attr.c\n  src/deprecated/ex_get_partial_elem_conn.c\n  src/deprecated/ex_get_partial_elem_map.c\n  src/deprecated/ex_get_partial_elem_num_map.c\n  src/deprecated/ex_get_partial_elem_var.c\n  src/deprecated/ex_get_partial_nodal_var.c\n  src/deprecated/ex_get_partial_node_num_map.c\n  src/deprecated/ex_get_partial_node_set.c\n  src/deprecated/ex_get_partial_node_set_df.c\n  src/deprecated/ex_get_partial_side_set.c\n  src/deprecated/ex_get_partial_side_set_df.c\n  src/deprecated/ex_get_side_set.c\n  src/deprecated/ex_get_side_set_dist_fact.c\n  src/deprecated/ex_get_side_set_ids.c\n  src/deprecated/ex_get_side_set_param.c\n  src/deprecated/ex_get_sset_var.c\n  src/deprecated/ex_get_sset_var_tab.c\n  src/deprecated/ex_get_var_name.c\n  src/deprecated/ex_get_var_names.c\n  src/deprecated/ex_get_var_param.c\n  src/deprecated/ex_get_var_tab.c\n  src/deprecated/ex_put_concat_node_sets.c\n  src/deprecated/ex_put_concat_side_sets.c\n  src/deprecated/ex_put_concat_var_param.c\n  src/deprecated/ex_put_elem_attr.c\n  src/deprecated/ex_put_elem_attr_names.c\n  src/deprecated/ex_put_elem_block.c\n  src/deprecated/ex_put_elem_conn.c\n  src/deprecated/ex_put_elem_map.c\n  src/deprecated/ex_put_elem_num_map.c\n  src/deprecated/ex_put_elem_var.c\n  src/deprecated/ex_put_elem_var_slab.c\n  src/deprecated/ex_put_elem_var_tab.c\n  src/deprecated/ex_put_glob_vars.c\n  src/deprecated/ex_put_n_attr.c\n  src/deprecated/ex_put_n_coord.c\n  src/deprecated/ex_put_n_elem_attr.c\n  src/deprecated/ex_put_n_elem_conn.c\n  src/deprecated/ex_put_n_elem_num_map.c\n  src/deprecated/ex_put_n_nodal_var.c\n  src/deprecated/ex_put_n_node_num_map.c\n  src/deprecated/ex_put_n_node_set.c\n  src/deprecated/ex_put_n_node_set_df.c\n  src/deprecated/ex_put_n_one_attr.c\n  src/deprecated/ex_put_n_side_set.c\n  src/deprecated/ex_put_n_side_set_df.c\n  src/deprecated/ex_put_n_var.c\n  src/deprecated/ex_put_nodal_var_slab.c\n  src/deprecated/ex_put_node_map.c\n  src/deprecated/ex_put_node_num_map.c\n  src/deprecated/ex_put_node_set.c\n  src/deprecated/ex_put_node_set_dist_fact.c\n  src/deprecated/ex_put_node_set_param.c\n  src/deprecated/ex_put_nset_var.c\n  src/deprecated/ex_put_nset_var_tab.c\n  src/deprecated/ex_put_one_elem_attr.c\n  src/deprecated/ex_put_partial_elem_attr.c\n  src/deprecated/ex_put_partial_elem_conn.c\n  src/deprecated/ex_put_partial_elem_map.c\n  src/deprecated/ex_put_partial_elem_num_map.c\n  src/deprecated/ex_put_partial_nodal_var.c\n  src/deprecated/ex_put_partial_node_num_map.c\n  src/deprecated/ex_put_partial_node_set.c\n  src/deprecated/ex_put_partial_node_set_df.c\n  src/deprecated/ex_put_partial_side_set.c\n  src/deprecated/ex_put_partial_side_set_df.c\n  src/deprecated/ex_put_side_set.c\n  src/deprecated/ex_put_side_set_dist_fact.c\n  src/deprecated/ex_put_side_set_param.c\n  src/deprecated/ex_put_sset_var.c\n  src/deprecated/ex_put_sset_var_tab.c\n  src/deprecated/ex_put_var_name.c\n  src/deprecated/ex_put_var_names.c\n  src/deprecated/ex_put_var_param.c\n  src/deprecated/ex_put_var_tab.c\n\n  src/ex__get_glob_vars_multi_time.c\n  src/ex__get_nodal_var_multi_time.c\n  src/ex__put_homogenous_block_params.c\n  src/ex__put_nodal_var_multi_time.c\n\n  src/ex_add_attr.c\n  src/ex_close.c\n  src/ex_conv.c\n  src/ex_copy.c\n  src/ex_create.c\n  src/ex_create_group.c\n  src/ex_create_par.c\n  src/ex_cvt_nodes_to_sides.c\n  src/ex_err.c\n  src/ex_field_utils.c\n  src/ex_get_all_times.c\n  src/ex_get_assemblies.c\n  src/ex_get_assembly.c\n  src/ex_get_attr.c\n  src/ex_get_attr_names.c\n  src/ex_get_attr_param.c\n  src/ex_get_attribute.c\n  src/ex_get_blob.c\n  src/ex_get_blobs.c\n  src/ex_get_block.c\n  src/ex_get_block_id_map.c\n  src/ex_get_block_param.c\n  src/ex_get_block_params.c\n  src/ex_get_cmap_params.c\n  src/ex_get_concat_sets.c\n  src/ex_get_concat_side_set_node_count.c\n  src/ex_get_conn.c\n  src/ex_get_coord.c\n  src/ex_get_coord_names.c\n  src/ex_get_coordinate_frames.c\n  src/ex_get_eb_info_global.c\n  src/ex_get_elem_cmap.c\n  src/ex_get_elem_type.c\n  src/ex_get_entity_count_per_polyhedra.c\n  src/ex_get_field_metadata.c\n  src/ex_get_glob_var_time_int.c\n  src/ex_get_glob_vars_int.c\n  src/ex_get_group_id.c\n  src/ex_get_group_ids.c\n  src/ex_get_id_map.c\n  src/ex_get_ids.c\n  src/ex_get_info.c\n  src/ex_get_init.c\n  src/ex_get_init_ext.c\n  src/ex_get_init_global.c\n  src/ex_get_init_info.c\n  src/ex_get_loadbal_param.c\n  src/ex_get_map.c\n  src/ex_get_map_param.c\n  src/ex_get_name.c\n  src/ex_get_names.c\n  src/ex_get_nodal_var_time_int.c\n  src/ex_get_node_cmap.c\n  src/ex_get_ns_param_global.c\n  src/ex_get_num_map.c\n  src/ex_get_object_truth_vector.c\n  src/ex_get_one_attr.c\n  src/ex_get_partial_attr.c\n  src/ex_get_partial_conn.c\n  src/ex_get_partial_coord.c\n  src/ex_get_partial_coord_component.c\n  src/ex_get_partial_id_map.c\n  src/ex_get_partial_nodal_var_int.c\n  src/ex_get_partial_num_map.c\n  src/ex_get_partial_one_attr.c\n  src/ex_get_partial_set.c\n  src/ex_get_partial_set_dist_fact.c\n  src/ex_get_partial_var.c\n  src/ex_get_processor_elem_maps.c\n  src/ex_get_processor_node_maps.c\n  src/ex_get_prop.c\n  src/ex_get_prop_array.c\n  src/ex_get_prop_names.c\n  src/ex_get_qa.c\n  src/ex_get_reduction_variable_names.c\n  src/ex_get_reduction_variable_param.c\n  src/ex_get_reduction_vars.c\n  src/ex_get_set.c\n  src/ex_get_set_dist_fact.c\n  src/ex_get_set_param.c\n  src/ex_get_sets.c\n  src/ex_get_side_set_node_count.c\n  src/ex_get_side_set_node_list.c\n  src/ex_get_side_set_node_list_len.c\n  src/ex_get_ss_param_global.c\n  src/ex_get_time.c\n  src/ex_get_truth_table.c\n  src/ex_get_var.c\n  src/ex_get_var_multi_time.c\n  src/ex_get_var_time.c\n  src/ex_get_variable_name.c\n  src/ex_get_variable_names.c\n  src/ex_get_variable_param.c\n  src/ex_inquire.c\n  src/ex_int_get_block_param.c\n  src/ex_ne_util.c\n  src/ex_open.c\n  src/ex_open_par.c\n  src/ex_opts.c\n  src/ex_put_all_var_param.c\n  src/ex_put_all_var_param_ext.c\n  src/ex_put_assemblies.c\n  src/ex_put_attr.c\n  src/ex_put_attr_names.c\n  src/ex_put_attr_param.c\n  src/ex_put_attribute.c\n  src/ex_put_blobs.c\n  src/ex_put_block.c\n  src/ex_put_block_param.c\n  src/ex_put_block_params.c\n  src/ex_put_cmap_params.c\n  src/ex_put_cmap_params_cc.c\n  src/ex_put_concat_all_blocks.c\n  src/ex_put_concat_elem_block.c\n  src/ex_put_concat_sets.c\n  src/ex_put_conn.c\n  src/ex_put_coord.c\n  src/ex_put_coord_names.c\n  src/ex_put_coordinate_frames.c\n  src/ex_put_eb_info_global.c\n  src/ex_put_elem_cmap.c\n  src/ex_put_entity_count_per_polyhedra.c\n  src/ex_put_field_metadata.c\n  src/ex_put_id_map.c\n  src/ex_put_info.c\n  src/ex_put_init.c\n  src/ex_put_init_ext.c\n  src/ex_put_init_global.c\n  src/ex_put_init_info.c\n  src/ex_put_loadbal_param.c\n  src/ex_put_loadbal_param_cc.c\n  src/ex_put_map.c\n  src/ex_put_map_param.c\n  src/ex_put_name.c\n  src/ex_put_names.c\n  src/ex_put_nodal_var.c\n  src/ex_put_node_cmap.c\n  src/ex_put_ns_param_global.c\n  src/ex_put_num_map.c\n  src/ex_put_one_attr.c\n  src/ex_put_partial_attr.c\n  src/ex_put_partial_conn.c\n  src/ex_put_partial_coord.c\n  src/ex_put_partial_coord_component.c\n  src/ex_put_partial_id_map.c\n  src/ex_put_partial_nodal_var_int.c\n  src/ex_put_partial_num_map.c\n  src/ex_put_partial_one_attr.c\n  src/ex_put_partial_set.c\n  src/ex_put_partial_set_dist_fact.c\n  src/ex_put_partial_var.c\n  src/ex_put_processor_elem_maps.c\n  src/ex_put_processor_node_maps.c\n  src/ex_put_prop.c\n  src/ex_put_prop_array.c\n  src/ex_put_prop_names.c\n  src/ex_put_qa.c\n  src/ex_put_reduction_variable_names.c\n  src/ex_put_reduction_variable_param.c\n  src/ex_put_reduction_vars.c\n  src/ex_put_set.c\n  src/ex_put_set_dist_fact.c\n  src/ex_put_set_param.c\n  src/ex_put_sets.c\n  src/ex_put_ss_param_global.c\n  src/ex_put_time.c\n  src/ex_put_truth_table.c\n  src/ex_put_var.c\n  src/ex_put_var_multi_time.c\n  src/ex_put_variable_name.c\n  src/ex_put_variable_names.c\n  src/ex_put_variable_param.c\n  src/ex_threadsafe.c\n  src/ex_update.c\n  src/ex_utils.c)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (Planar LIC, Perlin Noise) in CMake\nDESCRIPTION: This snippet defines a test with `ExternalData_add_test` to evaluate planar LIC using Perlin noise.  The parameters passed to `TestSurfaceLIC` configure Perlin noise, adjust its size and grain, control the maximum noise value, enable contrast enhancement, color by magnitude, and enable anti-aliasing. It allows evaluating LIC with Perlin noise and its effects.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICPlanarVectorNormalizeOffMediumGrainPerlin\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICPlanarVectorNormalizeOffMediumGrainPerlin.png,:}\"\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/SurfaceVectors.vtk}\n    --camera-config=3\n    --vectors=V\n    --normalize-vectors=0\n    --step-size=2\n    --num-steps=400\n    --generate-noise-texture=1\n    --noise-type=2\n    --noise-texture-size=256\n    --noise-grain-size=8\n    --max-noise-value=0.8\n    --enhance-contrast=4\n    --color-by-mag=1\n    --color-mode=1\n    --anti-alias=1\n    )\n```\n\n----------------------------------------\n\nTITLE: Processing GLSL Shader Files with vtk_encode_string\nDESCRIPTION: Loops through shader files and uses vtk_encode_string to convert them into C++ headers and sources. The encoded files will be exported with the appropriate module export macro.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nunset(shader_h_files)\nforeach(file IN LISTS shader_files)\n  vtk_encode_string(\n    INPUT         \"${file}\"\n    EXPORT_SYMBOL \"VTKRENDERINGCELLGRID_NO_EXPORT\"\n    EXPORT_HEADER \"vtkRenderingCellGridModule.h\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source\n  )\n  list(APPEND sources \"${source}\")\n  list(APPEND private_headers \"${header}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding SDL2 Test for Emscripten in CMake\nDESCRIPTION: Adds an SDL2-specific test for Emscripten builds when SDL2 is enabled in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  if (VTK_USE_SDL2)\n    vtk_add_test_cxx(vtkRenderingOpenGL2CxxTests tests TestSDL2.cxx)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Server test executable and running Python test\nDESCRIPTION: This snippet conditionally creates a client-server test executable using `vtk_module_test_executable` and then uses `ExternalData_add_test` to run a Python test that simulates a client-server interaction. The Python script is executed with specific parameters for port number, server/client roles, and data directories. Environment variables and image comparison methods are also configured.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (Python3_EXECUTABLE AND\n    NOT CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  vtk_module_test_executable(\n    vtkRenderingParallel-TestClientServerRendering TestClientServerRendering.cxx)\n\n  ExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n    NAME vtkRenderingParallel-TestClientServerRendering\n    COMMAND ${Python3_EXECUTABLE}\n      ${VTK_SOURCE_DIR}/CMake/vtkTestDriver.py\n      --process\n        $<TARGET_FILE:vtkRenderingParallel-TestClientServerRendering>\n        --port 12367\n        --server\n      -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n        --process\n        $<TARGET_FILE:vtkRenderingParallel-TestClientServerRendering>\n        --port 12367\n        -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n        -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n        -V \"DATA{../Data/Baseline/TestClientServerRendering.png,:}\"\n  set_property(TEST vtkRenderingParallel-TestClientServerRendering\n    PROPERTY\n      ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PROJ subdirectories in VTK build\nDESCRIPTION: Adds the necessary PROJ subdirectories (data, include, src) to the build process while conditionally excluding others that VTK handles differently. This customizes the PROJ build for VTK integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${PROJ_SOURCE_DIR}/src)\n\nadd_subdirectory(data)\nadd_subdirectory(include)\nadd_subdirectory(src)\nif (FALSE) # XXX(kitware): Hide unnecessary directories.\nadd_subdirectory(man)\nadd_subdirectory(cmake)\nif(BUILD_TESTING)\n  add_subdirectory(test)\nendif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK InfovisLayout Module Classes and Setup\nDESCRIPTION: Defines a list of VTK InfovisLayout module classes and sets up the module with test mangling. The classes include various layout strategies and algorithms for information visualization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Layout/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkArcParallelEdgeStrategy\n  vtkAreaLayout\n  vtkAreaLayoutStrategy\n  vtkAssignCoordinates\n  vtkAssignCoordinatesLayoutStrategy\n  vtkAttributeClustering2DLayoutStrategy\n  vtkBoxLayoutStrategy\n  vtkCirclePackFrontChainLayoutStrategy\n  vtkCirclePackLayout\n  vtkCirclePackLayoutStrategy\n  vtkCirclePackToPolyData\n  vtkCircularLayoutStrategy\n  vtkClustering2DLayoutStrategy\n  vtkCommunity2DLayoutStrategy\n  vtkConeLayoutStrategy\n  vtkConstrained2DLayoutStrategy\n  vtkCosmicTreeLayoutStrategy\n  vtkEdgeLayout\n  vtkEdgeLayoutStrategy\n  vtkFast2DLayoutStrategy\n  vtkForceDirectedLayoutStrategy\n  vtkGeoEdgeStrategy\n  vtkGeoMath\n  vtkGraphLayout\n  vtkGraphLayoutStrategy\n  vtkIncrementalForceLayout\n  vtkKCoreLayout\n  vtkPassThroughEdgeStrategy\n  vtkPassThroughLayoutStrategy\n  vtkPerturbCoincidentVertices\n  vtkRandomLayoutStrategy\n  vtkSimple2DLayoutStrategy\n  vtkSimple3DCirclesStrategy\n  vtkSliceAndDiceLayoutStrategy\n  vtkSpanTreeLayoutStrategy\n  vtkSplineGraphEdges\n  vtkSquarifyLayoutStrategy\n  vtkStackedTreeLayoutStrategy\n  vtkTreeLayoutStrategy\n  vtkTreeMapLayout\n  vtkTreeMapLayoutStrategy\n  vtkTreeMapToPolyData\n  vtkTreeOrbitLayoutStrategy\n  vtkTreeRingToPolyData)\n\nvtk_module_add_module(VTK::InfovisLayout\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::InfovisLayout)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files with configure_file in CMake\nDESCRIPTION: This snippet uses the configure_file command to process and generate CMake configuration header files. It takes an input template file, vtk_png.h.in, from the current source directory and creates an output file, vtk_png.h, in the current binary directory. This process ensures header configurations are set up correctly during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_png.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_png.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FreeType Third-Party Module in CMake\nDESCRIPTION: Defines the FreeType module as a third-party dependency for VTK, specifying license files, version, and both internal and external usage configurations. It includes SPDX licensing details and download information for proper attribution.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkfreetype/docs/FTL.TXT\"\n      \"vtkfreetype/LICENSE.TXT\"\n    SPDX_LICENSE_IDENTIFIER\n      \"FTL\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright 1996-2002, 2006 by David Turner, Robert Wilhelm, and Werner Lemberg\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/freetype.git@for/vtk-20250101-2.13.3\"\n    VERSION\n      \"2.13.3\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE Freetype\n    TARGETS Freetype::Freetype\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling LZ4 DLL with MinGW on Linux\nDESCRIPTION: Example command for cross-compiling LZ4 dynamic library for Windows using MinGW toolchain on a Linux host\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/lib/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake BUILD_STATIC=no CC=x86_64-w64-mingw32-gcc DLLTOOL=x86_64-w64-mingw32-dlltool OS=Windows_NT\n```\n\n----------------------------------------\n\nTITLE: Testing Large Data with VTK\nDESCRIPTION: This snippet checks if large data usage is enabled and configures testing data and directory inclusions for VTK modules related to VPIC fields and hydro at specific time intervals. The inclusion is based on a condition that checks the VTK_USE_LARGE_DATA variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/VPIC/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_module_test_data(\n    Data/VPIC/global.vpc\n    Data/VPIC/fields/T.0/,REGEX:.*\n    Data/VPIC/fields/T.100/,REGEX:.*\n    Data/VPIC/hydro/T.0/,REGEX:.*\n    Data/VPIC/hydro/T.100/,REGEX:.*)\n\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable with vtk_test_cxx_executable\nDESCRIPTION: This snippet employs the `vtk_test_cxx_executable` macro to create a C++ test executable for the tests defined above. It disables floating-point exceptions and specifies the rendering factory to be used during the test execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ChemistryOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkDomainsChemistryOpenGL2CxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories for Large Data in CMake\nDESCRIPTION: This CMake snippet configures VTK module test data for large datasets and adds C++ subdirectories when VTK_USE_LARGE_DATA is enabled. It uses regex to include all files from the 'hemi.draw' directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelLSDyna/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_module_test_data(\n    Data/LSDyna/hemi.draw/,REGEX:.*)\n\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android OpenGL Render Window in VTK\nDESCRIPTION: Sets up Android-specific EGL render window implementation by declaring appropriate factory overrides and including required Android NDK headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (ANDROID)\n  # Add some custom overrides\n  vtk_object_factory_declare(\n    BASE vtkRenderWindow\n    OVERRIDE vtkEGLRenderWindow)\n  set(has_vtkRenderWindow_override 1)\n  include_directories(\"${CMAKE_ANDROID_NDK}/sources/android/native_app_glue\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for Wrapping\nDESCRIPTION: This snippet defines the classes that will be wrapped using VTK's wrapping mechanism.  In this case, only `vtkOpenXRRemotingRenderWindow` will be wrapped.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes vtkOpenXRRemotingRenderWindow)\n```\n\n----------------------------------------\n\nTITLE: Configuring for Emscripten in CMake\nDESCRIPTION: This snippet configures CMake to enable WebAssembly-related test settings if the system name is Emscripten. It sets a CMake variable to enable tests in the browser. The snippet also includes linking options for Asyncify when using Emscripten, allowing the use of asynchronous APIs with a specific stack size.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(_vtk_test_cxx_wasm_enabled_in_browser ON)\nendif ()\n\n...\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  # Enable asyncify for webgpu async API\n  target_link_options(vtkRenderingWebGPUCxxTests\n    PRIVATE\n      \"-sASYNCIFY=1\"\n      #~297 nesting levels\n      \"-sASYNCIFY_STACK_SIZE=81920\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Windows Render Window Configuration\nDESCRIPTION: Specifies the render window classes available for Windows platforms\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build_settings.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n* vtkWin32OpenGLRenderWindow\n* vtkOSOpenGLRenderWindow\n```\n\n----------------------------------------\n\nTITLE: Adding Skip Methods for File Cell Sections\nDESCRIPTION: Introduces dedicated methods in vtkEnSightDataSet to efficiently ignore file cell sections during RequestInfo pass, improving parsing speed and reducing computational overhead\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/ensight-reader-improvements.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Implement new skip methods in vtkEnSightDataSet\n// Duplicate some reading logic for faster parsing during RequestInfo\n```\n\n----------------------------------------\n\nTITLE: Serving Built VTK WebAssembly Module Locally\nDESCRIPTION: This Python command serves the built VTK WebAssembly module locally on port 8000. It requires Python 3 to be installed and changes the directory to 'out/build' where the build artifacts are located. It uses Python's built-in HTTP server to serve files over HTTP, enabling local testing by opening the browser to the specified localhost address.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultipleCanvases/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd out/build\npython3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel MPI Test Count in CMake\nDESCRIPTION: This snippet checks if the parallel MPI target is available and sets the number of processes to 2. It then adds MPI-specific test scripts for execution. The configuration is crucial for testing parallel capabilities of the VTK library.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n  set(testParallelXMLWriters_NUMPROCS 2)\n  vtk_add_test_python_mpi(\n      testParallelXMLWriters.py,NO_VALID\n      testParallelMultiBlockWriter.py,NO_VALID\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersAMR Module Classes\nDESCRIPTION: Defines a list of VTK AMR filter classes and adds them to the FiltersAMR module. The classes handle various AMR operations including cut plane, gaussian pulse source, resampling, slicing, and conversion to multi-block.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/AMR/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAMRCutPlane\n  vtkAMRGaussianPulseSource\n  vtkAMRResampleFilter\n  vtkAMRSliceFilter\n  vtkAMRToMultiBlockFilter\n  vtkImageToAMR\n  vtkParallelAMRUtilities)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files for VTK Module\nDESCRIPTION: This snippet installs the generated header file to the appropriate location in the VTK installation directory. It uses vtk_module_install_headers to specify the file to be installed, which is produced from the previous configure_file command.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_scn.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Executable Target with CMake\nDESCRIPTION: This CMake code snippet adds an executable target named `vtkmyEx1` using the `add_executable` command. The executable is built from the source file `vtkmyEx1.cxx`. It then links the executable against specified VTK libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Examples/Cxx/Ex1/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_executable(vtkmyEx1 vtkmyEx1.cxx)\ntarget_link_libraries(vtkmyEx1 VTKMY::Unsorted VTKMY::Common VTKMY::Imaging)\"\n```\n\n----------------------------------------\n\nTITLE: Vector Assignment Operations\nDESCRIPTION: Shows how to assign values between variables and vectors, including assigning a variable to every element of a vector and assigning a vector's first element to a variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_47\n\nLANGUAGE: cpp\nCODE:\n```\nvar x    := 3;\nvar y[3] := { 1, 2, 3 };\ny := x + 1;\n\nvar x    := 3;\nvar y[3] := { 1, 2, 3 };\nx := y + 1;\n```\n\n----------------------------------------\n\nTITLE: MPI Configuration Setup\nDESCRIPTION: Configures MPI support for FIDES when VTK MPI is available, setting necessary definitions and libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FIDES_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})\nset(FIDES_ENABLE_TESTING OFF)\nset(FIDES_ENABLE_EXAMPLES OFF)\n\nif (TARGET VTK::mpi)\n  set(FIDES_USE_MPI TRUE)\n  set(MPI_DEFS FIDES_USE_MPI)\n  set(MPI_LIBS VTK::mpi)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IO Export CXX Tests\nDESCRIPTION: Adds C++ tests for various VTK export formats including X3D, JSON, OBJ, GLTF, VTP, SVG, and RIB using the vtk_add_test_cxx function.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOExportCxxTests tests\n  X3DTest.cxx,NO_DATA,NO_VALID\n  TestJSONRenderWindowExporter.cxx,NO_DATA,NO_VALID\n  TestOBJExporter.cxx,NO_DATA,NO_VALID\n  TestGLTFExporter.cxx,NO_DATA,NO_VALID\n  TestSingleVTPExporter.cxx,NO_DATA,NO_VALID\n  ${SVGTests}\n  TestRIBExporter.cxx,NO_VALID\n  UnitTestRIB.cxx,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Third-Party Module for Fast Float\nDESCRIPTION: Defines the Fast Float library integration as a third-party module in VTK with both internal and external configurations. Specifies license information, version requirements, and module properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkfast_float/LICENSE-MIT\"\n    SPDX_LICENSE_IDENTIFIER\n      \"MIT\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2021 The fast_float authors\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/fast_float.git@for/vtk-20250313-8.0.2\"\n    VERSION\n      \"8.0.2\"\n    STANDARD_INCLUDE_DIRS\n    HEADER_ONLY\n  EXTERNAL\n    VERSION \"7.0.0\"\n    PACKAGE FastFloat\n    TARGETS FastFloat::fast_float\n    STANDARD_INCLUDE_DIRS\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOImport Module Classes and Properties\nDESCRIPTION: Defines lists of classes, non-wrappable classes, and headers for the VTK IOImport module. Sets up the module configuration using vtk_module_add_module and adds test mangling support.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtk3DSImporter\n  vtkGLTFImporter\n  vtkImporter\n  vtkVRMLImporter\n  vtkOBJImporter)\n\nset(nowrap_classes\n  vtkOBJImporterInternals)\n\nset(headers\n  vtk3DS.h)\n\nvtk_module_add_module(VTK::IOImport\n  CLASSES ${classes}\n  NOWRAP_CLASSES  ${nowrap_classes}\n  HEADERS ${headers})\nvtk_add_test_mangling(VTK::IOImport)\n```\n\n----------------------------------------\n\nTITLE: Depicting String Definition Statement Syntax in ASCII Art\nDESCRIPTION: This diagram shows the structure of a string definition statement. It includes a variable name, followed by a symbol and assignment operator, then a string expression, ending with a semicolon.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_116\n\nLANGUAGE: ASCII Art\nCODE:\n```\n+-------------------------------------------------------------+\n|                                                             |\n|   [var] --> [symbol] --> [:=] --> [str-expression] ---> [;] |\n|                                                             |\n+-------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Logic with vtkArrayDispatch in C++\nDESCRIPTION: This snippet shows how to handle dispatch failures by implementing a fallback mechanism. It checks the return value of Execute() to determine if the dispatch was successful.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n// Stores the tuple/component coordinates of the maximum value:\nstruct FindMax\n{ /* As before... */ };\n\nvoid someFunction(vtkDataArray *array)\n{\n  FindMax maxWorker;\n  if (!vtkArrayDispatch::Dispatch::Execute(array, maxWorker))\n    {\n    // Reimplement FindMax::operator(), but use the vtkDataArray API's\n    // \"virtual double GetComponent()\" instead of the more efficient\n    // \"ValueType GetTypedComponent()\" from vtkGenericDataArray.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Parameter Constraints in VTK\nDESCRIPTION: This snippet provides guidelines on the acceptable formats for Python strings passed as C++ char parameters in VTK methods. It specifies that only single-character strings are valid and describes the handling of Unicode characters restricted to code values up to 255. Additionally, it instructs on using `chr(n)` for passing numeric char parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/python-char-length.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPreviously Python strings like `''` and `'x\\0'` or even `'x\\0y'` would be accepted by VTK methods requiring a C++ `char` parameter. Now, only strings of length 1 are accepted. Unicode characters are allowed as long as the code value is 255 or less, otherwise ValueError is raised. To pass a number via a `char` parameter, use `chr(n)`.\n```\n\n----------------------------------------\n\nTITLE: Configuring ExprTk Parser with Custom Compilation Options\nDESCRIPTION: Shows how to instantiate an ExprTk parser with specific compilation options. In this example, only the joiner, commutative check, and strength reduction options are enabled when creating the parser instance.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef exprtk::parser<NumericType>::settings_t settings_t;\n\nconst std::size_t compile_options =\n                     settings_t::e_joiner            +\n                     settings_t::e_commutative_check +\n                     settings_t::e_strength_reduction;\n\nparser_t parser(compile_options);\n```\n\n----------------------------------------\n\nTITLE: Defining Programmable Filter Classes in VTK\nDESCRIPTION: Sets a list of programmable filter classes used in the VTK module. Includes filters for attribute data manipulation, general filtering, and programmable glyph generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkProgrammableAttributeDataFilter\n  vtkProgrammableFilter\n  vtkProgrammableGlyphFilter)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS OpenGL Render Window in VTK\nDESCRIPTION: Sets up iOS-specific OpenGL rendering by declaring the iOS render window implementation and configuring required Objective-C++ flags for iOS platform support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (APPLE_IOS)\n  # Add some custom overrides\n  vtk_object_factory_declare(\n    BASE vtkRenderWindow\n    OVERRIDE vtkIOSRenderWindow)\n  set(has_vtkRenderWindow_override 1)\n  list(APPEND sources vtkIOSRenderWindow.mm)\n  list(APPEND headers vtkIOSRenderWindow.h)\n  # Set specified Objective-C++ flags, if any.\n  if (VTK_REQUIRED_OBJCXX_FLAGS)\n    set_source_files_properties(\n      vtkIOSRenderWindow.mm\n      PROPERTIES\n        COMPILE_FLAGS \"${VTK_REQUIRED_OBJCXX_FLAGS}\")\n  endif ()\nendif ()\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings in Python for VTK\nDESCRIPTION: This code snippet demonstrates how to enable deprecation warnings in Python for VTK. By default, Python silences `DeprecationWarning`, so this code uses the `warnings` module to filter and display these warnings when using deprecated VTK APIs. This allows developers to be aware of deprecated features and update their code accordingly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport warnings\nwarnings.filterwarnings(\"default\", category=DeprecationWarning)\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC-Specific Compiler Flags in CMake\nDESCRIPTION: Configures compiler flags specific to Microsoft Visual C++ compiler, including warning suppressions and exception handling options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc /wd4127 /wd4505 /wd4714\")\n\n# replace all /Wx by /W4\nstring(REGEX REPLACE \"/W[0-9]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\ncheck_cxx_compiler_flag(\"/openmp\" COMPILER_SUPPORT_OPENMP)\nif(COMPILER_SUPPORT_OPENMP)\n  set(EIGEN_TEST_OPENMP OFF)\n  if(EIGEN_TEST_OPENMP)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /openmp\")\n    message(STATUS \"Enabling OpenMP in tests/examples\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalyst Channel for AMReX Mesh Data\nDESCRIPTION: JSON configuration for setting up a Catalyst channel with the 'amrmesh' type, allowing direct integration of AMReX blueprint mesh data into ParaView Catalyst visualization pipeline\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/catalyst2-amr-support.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ncatalyst: {\n  state: {...},\n  channels: {\n    mesh: {\n      type: \"amrmesh\",\n      data: bp_mesh,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Compatibility Checks\nDESCRIPTION: Performs comprehensive system header and function existence checks to ensure cross-platform compatibility\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MSVC)\n    check_include_files(arpa/inet.h HAVE_ARPA_INET_H)\n    check_function_exists(gettimeofday HAVE_GETTIMEOFDAY)\n    check_include_files(netdb.h HAVE_NETDB_H)\n    check_include_files(sys/socket.h HAVE_SYS_SOCKET_H)\n    check_include_files(unistd.h HAVE_UNISTD_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersGeneral Non-Wrappable Classes\nDESCRIPTION: Specifies classes that should not be wrapped for language bindings. Currently includes only the vtkReflectionUtilities class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(no_wrap_classes\n  vtkReflectionUtilities)\n```\n\n----------------------------------------\n\nTITLE: Setting Private Headers for VTK::GUISupportQt Module\nDESCRIPTION: This snippet defines the list of private header files that will be used internally within the VTK::GUISupportQt module.  These headers are not exposed as part of the public API.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(private_headers\n  QVTKInteractorInternal.h)\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Arithmetic Operators in ExprTk Parser (C++)\nDESCRIPTION: Demonstrates how to enable or disable all arithmetic operators at once, as well as enabling/disabling specific arithmetic operators like addition.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_77\n\nLANGUAGE: C++\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nparser.settings().disable_all_arithmetic_ops();\n\nparser\n   .compile(\"1 + 2 / 3\",expression); // compilation failure\n\nparser.settings().enable_all_arithmetic_ops();\n\nparser\n   .compile(\"1 + 2 / 3\",expression); // compilation success\n\n// Disabling specific arithmetic operator\nparser.settings()\n   .disable_arithmetic_operation(settings_t::e_arith_add);\n\nparser\n   .compile(\"1 + 2 / 3\",expression); // failure\n\nparser.settings()\n   .enable_arithmetic_operation(settings_t::e_arith_add);\n\nparser\n   .compile(\"1 + 2 / 3\",expression); // success\n```\n\n----------------------------------------\n\nTITLE: Adding No Data VTK Filters Reduction C++ Tests\nDESCRIPTION: Adds C++ tests that don't require data, valid results, or output for the VTK Filters Reduction module using the vtk_add_test_cxx CMake function.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersReductionCxxTests no_data_tests\n  NO_DATA NO_VALID NO_OUTPUT\n  ${implicit_no_data_tests}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake script configures test data for a VTK module and conditionally includes C++ and Python subdirectories. It specifies a VDB file for test data and adds C++ and Python subdirectories based on certain conditions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/sphere_points.vdb)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: Generates the main test executable for GL2PS OpenGL2 rendering tests with rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingGL2PSOpenGL2CxxTests tests RENDERING_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Using IsMember Validator with Filters in CLI11 (C++)\nDESCRIPTION: Shows how to use the IsMember validator with ignore_case and ignore_underscore filters for flexible matching.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nCLI::IsMember({\"choice1\", \"choice2\"}, CLI::ignore_case, CLI::ignore_underscore)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLUT-based Rendering Tests for VTK in CMake\nDESCRIPTION: This CMake snippet sets up tests for VTK's external rendering using GLUT. It finds the GLUT package, adds a C++ test, creates a test executable, and links it with GLUT. The configuration is skipped for Apple platforms due to known issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/External/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE)\n  # GLUT tests don't work on Apple.\n  # see discussion on vtk/vtk!5169\n\n  find_package(GLUT REQUIRED)\n\n  vtk_add_test_cxx(vtkRenderingExternalCxxTests tests\n    TestGLUTRenderWindow.cxx\n    )\n\n  vtk_test_cxx_executable(vtkRenderingExternalCxxTests tests)\n  target_link_libraries(vtkRenderingExternalCxxTests PRIVATE\n    GLUT::GLUT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Web Python Module Dependencies\nDESCRIPTION: Sets a global property to specify the required wslink dependency version for VTK web Python modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Python/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL APPEND\n  PROPERTY\n    vtk_web_python_modules \"wslink>=1.0.4\")\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Project\nDESCRIPTION: Uses the vtk_add_test_python CMake function to register multiple Python scripts as test cases. These tests verify functionality related to point interpolation, texture mapping, and data visualization algorithms in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Hybrid/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  genHead.py\n  iceCream.py\n  shepards.py\n  triangularTexture.py\n  TestCheckerboardSplatter.py\n  TestShepardsMethod.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Threads Package for VTK\nDESCRIPTION: This snippet uses the `vtk_module_find_package` function to locate the Threads package. This is a prerequisite for the VTK::exodusII module as it depends on threading capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_find_package(PACKAGE Threads)\"\n```\n\n----------------------------------------\n\nTITLE: Validating 3D Tiles\nDESCRIPTION: Commands to validate 3D Tiles datasets using the 3d-tiles-validator tool.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/external/3d-tiles-validator/validator/\nnode ./bin/3d-tiles-validator.js -i ~/projects/VTK/build/Testing/Temporary/jacksonville-3dtiles-points/tileset.json\nnode ./bin/3d-tiles-validator.js -i ~/projects/VTK/build/Testing/Temporary/jacksonville-3dtiles-colorpoints/tileset.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Hull Functor for Parallel Processing\nDESCRIPTION: Defines a functor class that evaluates points against planes and adjusts plane bounds. Used with vtkSMPTools::For() for parallel processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct HullFunctor\n{\n  vtkPoints *InPts;\n  std::vector<double>& Planes;\n\n  HullFunctor(vtkPoints *inPts, std::vector<double>& planes) : InPts(inPts), Planes(planes) {}\n\n  void operator()(vtkIdType ptId, vtkIdType endPtId)\n  {\n    vtkPoints *inPts = this->InPts;\n    std::vector<double>& planes = this->Planes;\n    auto numPlanes = planes.size() / 4;\n\n    for (; ptId < endPtId; ++ptId)\n    {\n      double v, coord[3];\n      inPts->GetPoint(ptId, coord);\n      for (size_t j = 0; j < numPlanes; j++)\n      {\n        v = -(planes[j * 4 + 0] * coord[0] + planes[j * 4 + 1] * coord[1] +\n          planes[j * 4 + 2] * coord[2]);\n        // negative means further in + direction of plane\n        if (v < planes[j * 4 + 3])\n        {\n          planes[j * 4 + 3] = v;\n        }\n      }\n    }\n }\n}; //HullFunctor\n```\n\n----------------------------------------\n\nTITLE: Inspecting Git Data References\nDESCRIPTION: Commands to inspect and verify data objects stored as Git references in the local repository.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git for-each-ref --format=\"%(refname)\" refs/data\nrefs/data/SHA512/477e6028...\n$ git cat-file blob refs/data/SHA512/477e6028... | sha512sum\n477e6028...  -\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL C++ Tests\nDESCRIPTION: This CMake snippet adds the specified C++ test files to the VTK test suite using the `vtk_add_test_cxx` macro.  It configures tests for MySQL database interaction, including reading and writing tables. The tests are grouped under the name `vtkIOMySQLCxxTests`.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOMySQLCxxTests tests\n    NO_DATA NO_VALID\n    TestMySQLDatabase.cxx\n    TestMySQLTableReadWrite.cxx\n    )\n```\n\n----------------------------------------\n\nTITLE: Clamp Macro Documentation in VTK C++\nDESCRIPTION: Demonstrates documentation format for SetClamp macros including valid range specification.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n * Should the data with value 0 be ignored? Valid range (0, 1).\n */\nvtkSetClampMacro(IgnoreZero, int, 0, 1);\nvtkGetMacro(IgnoreZero, int);\n```\n\n----------------------------------------\n\nTITLE: Tokenize Strings Using Shell Command\nDESCRIPTION: This shell command demonstrates the use of the `tokenize` utility to convert strings into their corresponding integer hashes using the FNV-1a algorithm. It outputs a consistent hash for strings across all platforms. The inputs to this command are the strings to be tokenized, and the output is the hash in hexadecimal format. Ensure the `tokenize` executable is available in the `bin` directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n% ./bin/tokenize \"\" a b c ab bc ac abc\n0x811c9dc5 = \"\"\n0xe40c292c = \"a\"\n0xe70c2de5 = \"b\"\n0xe60c2c52 = \"c\"\n0x4d2505ca = \"ab\"\n0x3e2ba9f2 = \"bc\"\n0x4e25075d = \"ac\"\n0x1a47e90b = \"abc\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Factory Overrides for VTK Filters Parallel Module in CMake\nDESCRIPTION: Declares object factory overrides for specific VTK classes, allowing for polymorphic behavior in the parallel filters module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkConvertToMultiBlockDataSet\n  OVERRIDE vtkPConvertToMultiBlockDataSet\n  )\n\nvtk_object_factory_declare(\n  BASE      vtkAxisAlignedReflectionFilter\n  OVERRIDE  vtkPAxisAlignedReflectionFilter\n  )\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKFILTERSPARALLEL_EXPORT\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking VFW Capture Support\nDESCRIPTION: This code block checks if vfw32 supports video capture functions by attempting to compile a test program (`vtkTestvfw32Capture.cxx`) and linking against `vfw32`. If compilation fails, a fatal error message is displayed, indicating that VFW capture is not supported.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_VIDEO_FOR_WINDOWS_CAPTURE)\n  try_compile(vtk_vfw_capture_works\n    \"${CMAKE_CURRENT_BINARY_DIR}/CMakeTmp\"\n    SOURCES \"${CMAKE_CURRENT_LIST_DIR}/vtkTestvfw32Capture.cxx\"\n    LINK_LIBRARIES vfw32\n    OUTPUT_VARIABLE _vfw_capture_output)\n  mark_as_advanced(vtk_vfw_capture_works)\n\n  if (NOT vtk_vfw_capture_works)\n    message(FATAL_ERROR\n      \"`VTK_USE_VFW_CAPTURE` was requested, but support detection failed: ${_vfw_capture_output}.\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Example WrapHierarchy.cmake Command Usage\nDESCRIPTION: Demonstrates how to call the WrapHierarchy.cmake script to generate hierarchy files for wrapping VTK modules. It shows the required parameters for setting up the wrapping process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/WrappingTools.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DCLASS=VTK::AnActorClass \\\n      -DOUTPUT_DIR=${output_dir}/Wrapping \\\n      -Dparent_path=${parent_path} \\\n      -DvtkCommonCore_SOURCE_DIR=${moduledir}/CommonCore \\\n      -P ${VTK_SOURCE_DIR}/Wrapping/Tools/WrapHierarchy.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Four-Process MPI Test for Parallel Connectivity\nDESCRIPTION: Sets up a four-process MPI test for parallel connectivity. This test uses specific data and does not perform validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkFiltersParallelGeometryCxxTests-MPI_NUMPROCS 4)\nvtk_add_test_mpi(vtkFiltersParallelGeometryCxxTests-MPI data_tests_4_procs\n  ParallelConnectivity4,ParallelConnectivity.cxx,TESTING_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Test Data Files for VTK Module Testing in CMake\nDESCRIPTION: Defines a comprehensive list of test data files and directories for VTK module testing. Uses regex patterns and recursive directory inclusion to manage test data resources.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/42400-IDGH.stl\n  Data/AMR/Enzo/DD0010/,REGEX:.*\n  Data/IncOctPntLocData.dat\n  Data/IncOctPntLocResult.dat\n\n  Data/jacksonville_15.obj\n  Data/jacksonville_15.mtl\n  Data/jacksonville_15.png\n\n  Data/OpenFOAM/DimFields/cavity/,REGEX:.*\n  Data/OpenFOAM/DimFields/cavity/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/DimFields/cavity/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/DimFields/cavity/0/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/cavity/,REGEX:.*\n  Data/OpenFOAM/cavity/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/0/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/0.5/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/1/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/1.5/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/2/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/cavity/2.5/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/precision/case01/,REGEX:.*\n  Data/OpenFOAM/precision/case01/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/precision/case01/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/precision/case01/0/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/largePolyhedral/,REGEX:.*\n  Data/OpenFOAM/largePolyhedral/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/largePolyhedral/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/largePolyhedral/2002/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/regex/,REGEX:.*\n  Data/OpenFOAM/regex/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/regex/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/regex/0/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/simplifiedSiwek-serial/,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-serial/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-serial/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-serial/0/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-serial/0.005/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-serial/0.01/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/simplifiedSiwek-uncollated/,REGEX:.*\n  Data/OpenFOAM/simplifiedSiwek-uncollated/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-uncollated/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-uncollated/processor0/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-uncollated/processor1/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-uncollated/processor2/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/simplifiedSiwek-uncollated/processor3/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/squareBend/,REGEX:.*\n  Data/OpenFOAM/squareBend/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/squareBend/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/squareBend/50/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/squareBend/100/,RECURSE:,REGEX:.*$\n\n  Data/OpenFOAM/valuePointPatch/,REGEX:.*\n  Data/OpenFOAM/valuePointPatch/system/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/valuePointPatch/constant/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/valuePointPatch/2002/,RECURSE:,REGEX:.*$\n\n  Data/TecPlot/,REGEX:.*\n  Data/Viewpoint/cow.obj\n  Data/3D_cylinder_surf.msh\n  Data/3D_cylinder_vol.msh\n  Data/fluent_quad.msh\n  Data/absolute_indices.obj\n  Data/cellcentered.tec\n  Data/cellsnd.ascii.inp\n  Data/cellsnd.bin.inp\n  Data/flow.tec\n  Data/flow.tec.gz\n  Data/malformed.obj\n  Data/malformed.glb\n  Data/checkerboard_colorful.obj # Copyright Michael Migliore, Mathieu Westphal under BSD-3 license.\n  Data/obj_double_sphere.obj\n  Data/obj_multiline.obj\n  Data/obj_multitexture.obj\n  Data/obj_multitexture_notexture.obj\n  Data/obj_singletexture.obj\n  Data/obj_with_normals_and_tcoords.obj\n  Data/objGroup_1a.obj\n  Data/objGroup_1b.obj\n  Data/objGroup_2a.obj\n  Data/objGroup_2b.obj\n  Data/post.vtk\n  Data/prostar.cel\n  Data/prostar.vrt\n  Data/relative_indices.obj\n  Data/room.cas\n  Data/room.dat\n  Data/uGridEx.vtk)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOParallelLSDyna Module in CMake\nDESCRIPTION: This snippet defines the classes for the VTK IOParallelLSDyna module, adds the module to the VTK project, and sets up test mangling. It includes the vtkPLSDynaReader class and uses CMake functions specific to VTK module configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelLSDyna/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPLSDynaReader)\n\nvtk_module_add_module(VTK::IOParallelLSDyna\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOParallelLSDyna)\n```\n\n----------------------------------------\n\nTITLE: Configuring BP5 Random Access Compile Definition\nDESCRIPTION: Determines BP5 random access support based on ADIOS2 version and sets compile-time definition\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(adios_have_bp5_random_access 0)\nif (ADIOS2_VERSION VERSION_GREATER_EQUAL \"2.8.0\")\n  set(adios_have_bp5_random_access 1)\nendif ()\nset_property(SOURCE VTX/VTXSchemaManager.cxx vtkADIOS2CoreImageReader.cxx APPEND\n  PROPERTY\n    COMPILE_DEFINITIONS \"IOADIOS2_BP5_RANDOM_ACCESS=$<BOOL:${adios_have_bp5_random_access}>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Legacy C++ Tests\nDESCRIPTION: Defines a set of C++ test cases for the VTK IO Legacy module. Tests include various legacy data format handling capabilities like array metadata, composite data, ghost cells, and different grid types.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Legacy/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOLegacyCxxTests tests\n  TestLegacyArrayMetaData.cxx,NO_VALID\n  TestLegacyCompositeDataReaderWriter.cxx,NO_VALID\n  TestLegacyGhostCellsImport.cxx\n  TestLegacyMappedUnstructuredGrid.cxx,NO_DATA,NO_VALID\n  TestLegacyPartitionedDataSetCollectionReaderWriter.cxx,NO_DATA,NO_VALID\n  TestLegacyPartitionedDataSetReaderWriter.cxx,NO_DATA,NO_VALID\n  TestLegacyPolyDataReaderErrorCodePath.cxx, NO_VALID\n  TestLegacyDataSetWriterSetFileVersion.cxx,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Output Window Process Inner Build\nDESCRIPTION: Configures the inner build process that creates the Windows Output Window Process executable and encoding utilities. Sets up target dependencies and custom commands for generating encoded output.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/OutputWindowProcess/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nELSE()\n  PROJECT(VTK_OWP_INNER)\n\n  ADD_EXECUTABLE(vtkWin32OutputWindowProcess WIN32 vtkWin32OutputWindowProcess.c)\n  SET(VTK_OWP_EXE vtkWin32OutputWindowProcess)\n  GET_TARGET_PROPERTY(VTK_OWP_EXE_PATH ${VTK_OWP_EXE} LOCATION)\n\n  IF(NOT BORLAND)\n    TARGET_LINK_LIBRARIES(vtkWin32OutputWindowProcess gdi32)\n  ENDIF()\n\n  ADD_EXECUTABLE(vtkEncodeExecutable vtkEncodeExecutable.c)\n  SET(VTK_ENCODE_EXE vtkEncodeExecutable)\n  ADD_CUSTOM_COMMAND(\n    OUTPUT ${VTK_OWP_OUTPUT}\n    COMMAND ${VTK_ENCODE_EXE}\n    ARGS ${VTK_OWP_EXE_PATH} ${VTK_OWP_OUTPUT} ${VTK_OWP_NAME}\n    DEPENDS ${VTK_OWP_EXE} ${VTK_ENCODE_EXE}\n    )\n\n  ADD_CUSTOM_TARGET(vtk_owp_encode DEPENDS ${VTK_OWP_OUTPUT})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding NetCDF C++ Tests with vtk_add_test_cxx\nDESCRIPTION: This CMake command adds a set of C++ tests for the VTK IONetCDF module. It specifies the source files to be included in the test, and configures execution options, such as disabling validation and output.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIONetCDFCxxTests tests\n  SLACMultipleModes.cxx\n  SLACParticleReader.cxx\n  SLACReaderLinear.cxx\n  SLACReaderQuadratic.cxx\n  TestMPASReader.cxx\n  TestNetCDFCAMReader.cxx\n  TestNetCDFPOPReader.cxx\n  TestNetCDFCFWriter.cxx\n  TestNetCDFUGRIDReader.cxx,NO_VALID,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK C++ Tests with CMake\nDESCRIPTION: This snippet registers multiple VTK C++ test sources with CMake, specifying options and test names, and compiles them into an executable for verification against test data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOAMRCxxTests tests\n  NO_VALID NO_OUTPUT\n  TestAMRFlashReader.cxx\n  TestAMReXGridReaderNodalMultiFab.cxx\n  TestAMReXParticlesReader.cxx\n  TestAMReXGridReaderNonZeroOrigin.cxx\n  TestEnzoReader.cxx\n  TestVelodyneReader.cxx\n  )\nvtk_test_cxx_executable(vtkIOAMRCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Support for XDMF2\nDESCRIPTION: Sets up optional MPI support for XDMF2. When enabled, it finds MPI packages, sets up include paths and libraries, and adds required compiler definitions. When disabled, it uses serial mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#optional dependencies\n#MPI\nif (FALSE) # XXX(kitware): hardcode settings\noption(XDMF_BUILD_MPI \"XDMF should use MPI\" OFF)\nmark_as_advanced(XDMF_BUILD_MPI)\nelse ()\nset(XDMF_BUILD_MPI OFF)\nendif ()\nif (XDMF_BUILD_MPI)\n  find_package(MPI REQUIRED)\n  include_directories(${MPI_C_INCLUDE_PATH})\n  set(XDMF_MPI_LIBRARIES ${MPI_C_LIBRARIES})\n  if (MPI_CXX_LIBRARIES)\n    list(APPEND XDMF_MPI_LIBRARIES ${MPI_CXX_LIBRARIES})\n  endif()\n  add_definitions(-DMPICH_IGNORE_CXX_SEEK)\nelse()\n  add_definitions(-DUSE_SERIAL_XMDF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test Mangling\nDESCRIPTION: This snippet adds test mangling to the VTK::FiltersSMP module using the `vtk_add_test_mangling` CMake function. This ensures that tests are properly configured and executed for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersSMP)\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite with Custom Options on Windows\nDESCRIPTION: Example of how to compile SQLite on Windows with additional custom compile-time options, specifically showing how to omit deprecated features.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_8\n\nLANGUAGE: batch\nCODE:\n```\nnmake /f Makefile.msc OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3.exe\n```\n\n----------------------------------------\n\nTITLE: Working with Binary Data in JSON using CBOR and MessagePack in C++\nDESCRIPTION: This snippet demonstrates handling binary data types from CBOR in the nlohmann/json library. It shows reading binary values, accessing the underlying std::vector<std::uint8_t>, setting binary subtypes, and serializing to MessagePack.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\n// CBOR byte string with payload 0xCAFE\nstd::vector<std::uint8_t> v = {0x42, 0xCA, 0xFE};\n\n// read value\njson j = json::from_cbor(v);\n\n// the JSON value has type binary\nj.is_binary(); // true\n\n// get reference to stored binary value\nauto& binary = j.get_binary();\n\n// the binary value has no subtype (CBOR has no binary subtypes)\nbinary.has_subtype(); // false\n\n// access std::vector<std::uint8_t> member functions\nbinary.size(); // 2\nbinary[0]; // 0xCA\nbinary[1]; // 0xFE\n\n// set subtype to 0x10\nbinary.set_subtype(0x10);\n\n// serialize to MessagePack\nauto cbor = json::to_msgpack(j); // 0xD5 (fixext2), 0x10, 0xCA, 0xFE\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdmf Project Settings in CMake\nDESCRIPTION: Sets up basic Xdmf project configuration including version numbers, platform-specific definitions, and output paths. Some settings are conditionally applied based on VTK integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): use VTK's CMake policies\ncmake_minimum_required(VERSION 2.8.5)\nendif ()\n\nproject(Xdmf)\n\n\nif(WIN32)\n  ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_DEPRECATE)\n  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\nendif()\n\nif (FALSE) # XXX(kitware): force settings\nset(XDMF_LIBNAME \"Xdmf\" CACHE STRING \"Name for this xdmf library to avoid collision\")\nendif ()\n\nset(XDMF_MAJOR_VERSION 3)\nset(XDMF_MINOR_VERSION 0)\nset(XDMF_PATCH_VERSION 0)\nset(XDMF_VERSION \"${XDMF_MAJOR_VERSION}.${XDMF_MINOR_VERSION}.${XDMF_PATCH_VERSION}\")\n\nif (FALSE) # XXX(kitware): VTK's module system handles output directories\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/bin\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Arrays in VTK XML\nDESCRIPTION: XML structure for defining coordinate arrays in VTK parallel formats using PCoordinates element.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<PCoordinates>\n      <PDataArray .../>\n      <PDataArray .../>\n      <PDataArray .../>\n   </PCoordinates>\n```\n\n----------------------------------------\n\nTITLE: Finding ADIOS2 Package with CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate the ADIOS2 library with specific version and component requirements.  It marks the `CXX` component as required and `MPI` as optional. This ensures that the necessary ADIOS2 libraries are available for the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ADIOS2 2.4 REQUIRED\n  COMPONENTS CXX\n  OPTIONAL_COMPONENTS MPI)\n```\n\n----------------------------------------\n\nTITLE: Cloning VTK Repository - Shell Commands\nDESCRIPTION: Commands to clone the main VTK repository from GitLab and navigate to the project directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://gitlab.kitware.com/vtk/vtk.git VTK\n$ cd VTK\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Memory Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for reading PNG images from memory in VTK using a VTK logo PNG sample.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestPNGReaderReadFromMemory.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/vtk.png}\")\n```\n\n----------------------------------------\n\nTITLE: Sharing and Pushing Topic Branches\nDESCRIPTION: Commands for checking and pushing topic branches to a GitLab fork.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout my-topic\n$ git prepush\n$ git gitlab-push\n```\n\n----------------------------------------\n\nTITLE: Using vtkCompositeArray for Array Concatenation\nDESCRIPTION: Shows how to use vtkCompositeArray to concatenate multiple arrays into a single virtual array.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<vtkDataArray*> baseArrays(16);\nvtkNew<vtkDoubleArray> baseArray;\nbaseArray->SetNumberOfComponents(3);\nbaseArray->SetNumberOfTuples(10);\nbaseArray->Fill(0.0);\n\nstd::fill(baseArrays.begin(), baseArrays.end(), baseArray);\nvtkSmartPointer<vtkCompositeArray<double>> composite = vtkCompositeArrayUtilities::Concatenate<double>(baseArrays); // nTuples = 160\n\nCHECK(composite->GetComponent(42, 1) == 0.0); // always true\n```\n\n----------------------------------------\n\nTITLE: Including Filter Plugins for HDF5 in CMake\nDESCRIPTION: Includes the CMakePlugins.cmake file and configures plugin support for HDF5 if HDF5_PACKAGE_EXTLIBS is enabled and HDF5_NO_PACKAGES is not set. Adds plugin library packaging when plugin support is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninclude (CMakePlugins.cmake)\n\nif (HDF5_PACKAGE_EXTLIBS AND NOT HDF5_NO_PACKAGES)\n  if (HDF5_ENABLE_PLUGIN_SUPPORT AND PLUGIN_FOUND)\n    PACKAGE_PLUGIN_LIBRARY (${HDF5_ALLOW_EXTERNAL_SUPPORT})\n#    option (HDF5_TEST_PLUGIN \"Execute plugin tests\" ON)\n#    mark_as_advanced (HDF5_TEST_PLUGIN)\n\n#    TEST_PLUGIN_LIBRARY ()\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Tiled RGB Reader Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK TIFF reader with tiled RGB format support using a gourd image tiled TIFF example.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTIFFReaderTiledRGB,TestTIFFReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/libtiff/gourds_tiled_200x300.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Adding the VTK RenderingOpenGL2 Module\nDESCRIPTION: Registers the RenderingOpenGL2 module with the VTK build system, including all the classes, sources, headers and generated object factory code.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingOpenGL2\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  SOURCES ${sources} ${vtk_object_factory_source}\n  HEADERS ${headers}\n  NOWRAP_HEADERS ${nowrap_headers}\n  PRIVATE_HEADERS ${private_headers} ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: VTK {fmt} Fork Configuration\nDESCRIPTION: Documentation of key modifications made to {fmt} library for VTK integration, including whitespace handling for commit checks, CMake build system integration, and namespace mangling from 'fmt' to 'vtkfmt'.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# {fmt} fork for VTK\n\nThis branch contains changes required to embed {fmt} in VTK.\n\n* Ignore whitespace for VTK's commit checks.\n* Add VTK-specific CMakeLists.txt to integrate into VTK's build system.\n* mangle namespace `fmt` as `vtkfmt`\n```\n\n----------------------------------------\n\nTITLE: Basic If-Statement in ExprTk\nDESCRIPTION: Example of a basic if-statement that returns the value of the consequent expression when the condition is true, otherwise returning a quiet NaN value.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_33\n\nLANGUAGE: ExprTk\nCODE:\n```\nx := if (y < z) y + 3;\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: CMake configuration that adds multiple Python test files to the VTK test suite. The tests are configured with NO_DATA, NO_VALID, and NO_OUTPUT flags, indicating they don't require input data, validation data, or output comparison.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  PythonSmoke.py\n  TestArrayArguments.py\n  TestArrays.py\n  TestBuffer.py\n  TestCommand.py\n  TestDefaultArgs.py\n  TestEmptyInput.py\n  TestEnums.py\n  TestExecuteMethodFinalizeCrash.py\n  TestExpects.py\n  TestFilePath.py\n  TestGhost.py\n  TestImplicitArrayInstanciation.py\n  TestInvokeEvent.py\n  TestIterateCollection.py\n  TestNumpyInterface.py\n  TestNumpySupport.py\n  TestNumpyWeakReference.py\n  TestObjectName.py\n  TestOperators.py\n  TestOverloads.py\n  TestPassByReference.py\n  TestPointers.py\n  TestSOADataArrays.py\n  TestSetGet.py\n  TestSingleton.py\n  TestStrings.py\n  TestSubClass.py\n  TestSwigPointer.py\n  TestTerminationCrash.py\n  TestVariant.py\n  TestVersion.py\n  TestWeakref.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Git Rebase Commands for Release Branch\nDESCRIPTION: Commands for rebasing branches onto the release branch when preparing code for a VTK release. Includes options for both direct rebase and creating a new branch for the release.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/release_process.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git rebase --onto=origin/release origin/master $branch_name\n$ git gitlab-push -f\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b ${branch_name}-release $branch_name\n$ git rebase --onto=origin/release origin/master ${branch_name}-release\n$ git gitlab-push\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Expat XML Parser in CMake\nDESCRIPTION: Sets up various build options and configuration parameters for the Expat library, including whether to build tools, examples, tests, shared libraries, and documentation. These options control the features and components included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXPAT_BUILD_TOOLS OFF)\nset(EXPAT_BUILD_EXAMPLES OFF)\nset(EXPAT_BUILD_TESTS OFF)\nset(EXPAT_SHARED_LIBS \"${BUILD_SHARED_LIBS}\")\nset(EXPAT_BUILD_DOCS OFF)\nset(EXPAT_BUILD_FUZZERS OFF)\nset(EXPAT_WITH_LIBBSD OFF)\nset(EXPAT_ENABLE_INSTALL OFF)\nset(EXPAT_CONTEXT_BYTES 1024)\nset(EXPAT_DTD ON)\nset(EXPAT_GE ON)\nset(EXPAT_NS ON)\nset(EXPAT_WARNINGS_AS_ERRORS OFF)\nif(NOT WIN32 OR _EXPAT_HELP)\n    set(EXPAT_DEV_URANDOM ON)\n    set(EXPAT_WITH_GETRANDOM \"AUTO\")\n    set(EXPAT_WITH_SYS_GETRANDOM \"AUTO\")\nendif()\nset(EXPAT_CHAR_TYPE \"char\")\nset(EXPAT_ATTR_INFO OFF)\n# so windows and emscripten use 64bit buffer lengths\nset(EXPAT_LARGE_SIZE ON)\nset(EXPAT_MIN_SIZE OFF)\nif(MSVC OR _EXPAT_HELP)\n    set(EXPAT_MSVC_STATIC_CRT OFF)\nendif()\nset(_EXPAT_M32 OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Large Data Test Modules in CMake\nDESCRIPTION: This snippet configures the test data modules for VTK using CMake, conditioned on not having testing disabled and enabling large data support. It declares test data directories and files based on regular expressions and includes a subdirectory for C++ tests. Dependencies include a configured CMake environment with VTK options set. Expected input is the CMake condition flags, and output is the registered test data and subdirectory inclusion.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled AND VTK_USE_LARGE_DATA)\n  vtk_module_test_data(\n    Data/NetCDF/,REGEX:.*\n    Data/SLAC/ll-9cell-f523/ll-9cell-f523.ncdf\n    Data/SLAC/ll-9cell-f523/mode0.l0.R2.457036E+09I2.778314E+04.m3\n    Data/SLAC/pic-example/,REGEX:.*\\.mod\n    Data/SLAC/pic-example/,REGEX:.*\\.ncdf\n    Data/SLAC/pillbox/,REGEX:.*\n    Data/okanagan.vti)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Git Commits - Shell Commands\nDESCRIPTION: Example commands showing the workflow for editing files, staging changes, and creating commits in the VTK repository.\nSOURCE: https://github.com/kitware/vtk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ edit file1 file2 file3\n$ git add file1 file2 file3\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Installing vtk_eigen.h Header File\nDESCRIPTION: This CMake code uses the `vtk_module_install_headers` macro to install the generated `vtk_eigen.h` header file. The header is located in the `${CMAKE_CURRENT_BINARY_DIR}` directory, where it was previously generated by the `configure_file` command. This step makes the header available for inclusion in other parts of the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_eigen.h\")\n```\n\n----------------------------------------\n\nTITLE: String Variable Definition Examples\nDESCRIPTION: Examples showing different ways to initialize and manipulate string variables in ExprTk, including basic assignments, string concatenation, and range operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_45\n\nLANGUAGE: cpp\nCODE:\n```\nvar x := 'abc';\nvar x := '';\nvar x := 'abc' + '123';\nvar x := 'abc123'[2:4];\nvar x := 'abc';\nvar y := x;\nvar x := 'abc123';\nvar y := x[2:4];\nvar x := 'abc';\nvar y := x + '123';\nvar x := 'abc';\nvar y := (x + '123')[1:3];\n```\n\n----------------------------------------\n\nTITLE: Adding VTK MPI Image Module\nDESCRIPTION: Adds the MPI Image module to VTK with specified classes, sources, and headers. Includes test mangling configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIImage/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOMPIImage\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOMPIImage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Large Data Tests in VTK\nDESCRIPTION: Sets up large data testing conditions for VTK based on platform and endianness. Downloads test data for WindBladeReader if conditions are met.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(enable_large_data_tests FALSE)\nif (VTK_USE_LARGE_DATA AND NOT WIN32)\n  if (DEFINED VTK_WORDS_BIGENDIAN AND NOT VTK_WORDS_BIGENDIAN)\n    vtk_module_test_data(\n      Data/WindBladeReader/,REGEX:.*\n      Data/WindBladeReader/field/,REGEX:.*\n      Data/WindBladeReader/turbine/,REGEX:.*)\n    set(enable_large_data_tests TRUE)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Module Classes in CMake\nDESCRIPTION: This snippet sets a variable with a list of classes for a VTK module and adds the module with the specified classes to CMake. It also prepares the module for testing by mangling the test names for consistency.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/DataModel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkMappedUnstructuredGridGenerator)\n\nvtk_module_add_module(VTK::TestingDataModel\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::TestingDataModel)\n```\n\n----------------------------------------\n\nTITLE: Adding SPDX Tags to Source Files\nDESCRIPTION: This snippet demonstrates how to add SPDX tags to the top of source files in a VTK module. It includes copyright information and license identifier.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/spdx_and_sbom.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// SPDX-FileCopyrightText: Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n// SPDX-FileCopyrightText: Copyright (c) Awesome contributor\n// SPDX-License-Identifier: BSD-3-Clause\n```\n\n----------------------------------------\n\nTITLE: Defining Compilation Definitions for VTK Tests with CMake\nDESCRIPTION: This snippet defines a compilation definition (`QT_NO_KEYWORDS`) for the test executable `vtkGUISupportQtQuickCxxTests`. The `PRIVATE` keyword indicates that this definition is only applied when compiling the executable itself. This definition likely disables Qt's keyword-based syntax extensions.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(vtkGUISupportQtQuickCxxTests PRIVATE QT_NO_KEYWORDS)\n```\n\n----------------------------------------\n\nTITLE: Creating MPI test executable\nDESCRIPTION: This snippet creates an executable for the MPI tests using `vtk_test_cxx_executable`. The `all_tests` variable contains the list of source files for the MPI tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${no_data_tests}\n  )\nvtk_test_cxx_executable(vtkRenderingParallelCxxTests-MPI all_tests)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Format Benchmarks Repository\nDESCRIPTION: This snippet shows how to clone the format-benchmarks repository and generate Makefiles using CMake for running benchmarks.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n$ cd format-benchmark\n$ cmake .\n```\n\n----------------------------------------\n\nTITLE: Enabling Control Structures in ExprTk Parser (C++)\nDESCRIPTION: Demonstrates how to enable specific control structures, such as for loops, in the ExprTk parser settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_75\n\nLANGUAGE: C++\nCODE:\n```\nparser.settings()\n   .enable_control_structure(settings_t::e_ctrl_for_loop);\n\nparser\n   .compile(program,expression); // success\n```\n\n----------------------------------------\n\nTITLE: Finding and Validating ADIOS2 Package with MPI\nDESCRIPTION: Checks ADIOS2 package compatibility with VTK's MPI configuration, ensuring version 2.4 or higher and matching MPI requirements\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE ADIOS2\n  VERSION 2.4)\nif (TARGET VTK::ParallelMPI AND NOT ADIOS2_HAVE_MPI)\n  message(FATAL_ERROR \"VTK built with MPI requires ADIOS2 built with MPI\")\nelseif (NOT TARGET VTK::ParallelMPI AND ADIOS2_HAVE_MPI)\n  message(FATAL_ERROR \"VTK built without MPI requires ADIOS2 built without MPI\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters Points Classes in CMake\nDESCRIPTION: Defines a list of class names for the VTK Filters Points module. These classes represent various point-based filters and operations in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBoundedPointSource\n  vtkConnectedPointsFilter\n  vtkConvertToPointCloud\n  vtkDensifyPointCloudFilter\n  vtkEllipsoidalGaussianKernel\n  vtkEuclideanClusterExtraction\n  vtkExtractEnclosedPoints\n  vtkExtractHierarchicalBins\n  vtkExtractPointCloudPiece\n  vtkExtractPoints\n  vtkExtractSurface\n  vtkFitImplicitFunction\n  vtkGaussianKernel\n  vtkGeneralizedKernel\n  vtkHierarchicalBinningFilter\n  vtkInterpolationKernel\n  vtkLinearKernel\n  vtkMaskPointsFilter\n  vtkPCACurvatureEstimation\n  vtkPCANormalEstimation\n  vtkPointCloudFilter\n  vtkPointDensityFilter\n  vtkPointInterpolator\n  vtkPointInterpolator2D\n  vtkPointOccupancyFilter\n  vtkPointSmoothingFilter\n  vtkPoissonDiskSampler\n  vtkProbabilisticVoronoiKernel\n  vtkProjectPointsToPlane\n  vtkRadiusOutlierRemoval\n  vtkSPHCubicKernel\n  vtkSPHInterpolator\n  vtkSPHKernel\n  vtkSPHQuarticKernel\n  vtkSPHQuinticKernel\n  vtkShepardKernel\n  vtkSignedDistance\n  vtkStatisticalOutlierRemoval\n  vtkUnsignedDistance\n  vtkVoronoiKernel\n  vtkVoxelGrid\n  vtkWendlandQuinticKernel)\n```\n\n----------------------------------------\n\nTITLE: Missing Semicolon Error in ExprTk If-Statements\nDESCRIPTION: Shows how missing a semicolon after an if-statement can lead to unintended multiplication with the next statement.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_35\n\nLANGUAGE: ExprTk\nCODE:\n```\nx := if (y < z) y + 3  // missing semi-colon ';'\nw + x\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands to build and run specific tests in the VTK project\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake . && cmake --build .\nctest -VV -R yourTest\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties\nDESCRIPTION: Configures specific properties for vtkResourceParser.cxx to exclude it from wrapper generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(vtkResourceParser.cxx\n  PROPERTIES WRAP_EXCLUDE ON)\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: Example of creating a git commit with a properly formatted message\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit commit -m \"General domain: Short yet informative reason for the change\"\n```\n\n----------------------------------------\n\nTITLE: MSVC Compiler Warnings Configuration\nDESCRIPTION: Sets up MSVC-specific compiler warning flags and applies them to the VTK Accelerators VTKm Core module. Handles both CUDA and non-CUDA compilation cases.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC)\n  set(msvc_warning_flags\n    /wd4702\n    /wd4512\n    /wd4510\n    /wd4503\n    )\n  set(vtkm_msvc_flags)\n  foreach (msvc_warning_flag IN LISTS msvc_warning_flags)\n    if (TARGET vtkm::cuda)\n      list(APPEND vtkm_msvc_flags\n        $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=${msvc_warning_flag},${msvc_warning_flag}>)\n    else ()\n      list(APPEND vtkm_msvc_flags\n        ${msvc_warning_flag})\n    endif ()\n  endforeach ()\n  vtk_module_compile_options(VTK::AcceleratorsVTKmCore\n    PRIVATE\n      ${vtkm_msvc_flags})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK EnSight MPI Tests\nDESCRIPTION: Configures MPI-based parallel tests for VTK EnSight IO module when MPI support is available. Sets up tests for SOS Reader and Combined Reader with 2 processes each.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  set(TestEnSightSOSReaderMandelbrotMPI_NUMPROCS 2)\n  set(TestEnSightCombinedReaderMPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkIOEnSightCxxTests-MPI mpiTests TESTING_DATA\n    TestEnSightSOSReaderMandelbrotMPI.cxx\n    TestEnSightCombinedReaderMPI.cxx\n  )\n  vtk_test_cxx_executable(vtkIOEnSightCxxTests-MPI mpiTests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK ADIOS2 Module with Linkage\nDESCRIPTION: Adds the VTK ADIOS2 module with specified classes, headers, and templates, and links against the ADIOS2 library\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOADIOS2\n  CLASSES   ${classes}\n  PRIVATE_CLASSES   ${private_classes}\n  PRIVATE_HEADERS   ${private_headers}\n  PRIVATE_TEMPLATES ${private_templates})\nvtk_module_link(VTK::IOADIOS2 NO_KIT_EXPORT_IF_SHARED PRIVATE adios2::adios2)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data for VTK Module Configuration\nDESCRIPTION: This snippet defines a function to include various data files necessary for VTK module testing. It lists out relevant test data files and applies regex where necessary to include other directories. The context is essential for setting up a test environment for VTK modules, ensuring all needed data is included for testing purposes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/can.ex2\n  Data/HeadMRVolume.mhd\n  Data/MagnitudeImage_256x256x148\n  Data/headsq/,REGEX:.*\n  Data/headmr3blocks/headmr3blocks.vtm\n  Data/headmr3blocks/headmr3blocks/,REGEX:.*\n  Data/hncma-atlas.vti\n  Data/ironProt.vtk\n  Data/neghip.slc\n  Data/sphere.slc\n  Data/tooth.nhdr\n  Data/tooth.raw\n  Data/tooth_2dtransf.png\n  Data/vase_1comp.vti\n  Data/vase_4comp.vti)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Auto-Processing in CMake\nDESCRIPTION: Enables automatic processing of Qt meta-object compiler (moc), resource compiler (rcc), and UI compiler (uic) features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CustomLinkView/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\nset(CMAKE_AUTOUIC ON)\n```\n\n----------------------------------------\n\nTITLE: Templated VTK Array Test Loop Configuration\nDESCRIPTION: Dynamic generation of test cases for templated array classes using a foreach loop over value types. Includes configuration for AoS, SoA, and scaled array variants.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(value_type ${value_types})\n  string(REPLACE \" \" \"_\" pretty_value_type \"${value_type}\")\n  add_data_array_test(\n    \"AoS_${pretty_value_type}\"\n    vtkAOSDataArrayTemplate.h\n    \"${value_type}\"\n    \"vtkAOSDataArrayTemplate<${value_type}>\")\n  add_data_array_test(\n    \"SoA_${pretty_value_type}\"\n    vtkSOADataArrayTemplate.h\n    \"${value_type}\"\n    \"vtkSOADataArrayTemplate<${value_type}>\")\n\n  if(VTK_BUILD_SCALED_SOA_ARRAYS)\n    add_data_array_test(\n      \"ScaleAoS_${pretty_value_type}\"\n      vtkScaleAOSDataArrayTemplate.h\n      \"${value_type}\"\n      \"vtkScaleAOSDataArrayTemplate<${value_type}>\")\n    add_data_array_test(\n      \"ScaleSoA_${pretty_value_type}\"\n      vtkScaledSOADataArrayTemplate.h\n      \"${value_type}\"\n      \"vtkScaledSOADataArrayTemplate<${value_type}>\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for OpenVR Module\nDESCRIPTION: This snippet defines a list of classes that are included in the VTK OpenVR module, which are necessary for various rendering functionalities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOpenVRCamera\n  vtkOpenVRControlsHelper\n  vtkOpenVRDefaultOverlay\n  vtkOpenVRInteractorStyle\n  vtkOpenVRModel\n  vtkOpenVROverlay\n  vtkOpenVRRenderer\n  vtkOpenVRRenderWindow\n  vtkOpenVRRenderWindowInteractor)\n```\n\n----------------------------------------\n\nTITLE: Configuring nlohmann_json for PROJ in CMake\nDESCRIPTION: Sets up the configuration for using nlohmann_json in the PROJ project, either from an external source or internally.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(NLOHMANN_JSON_ORIGIN external)\nset(MIN_NLOHMANN_JSON_VERSION 3.7.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for VTK InteractionStyle Module\nDESCRIPTION: Combines the generated object factory source files with any serialization helper sources to create the complete list of source files for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  ${vtk_object_factory_source}\n  ${serialization_helper_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Project with VTK Integration\nDESCRIPTION: Sets up a CMake project for HDF5 sources with a conditional version requirement that's handled by VTK instead. The project is configured for C language compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): cmake versions are handled by VTK.\ncmake_minimum_required (VERSION 3.12)\nendif ()\nproject (HDF5_SRC C)\n\n#-----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Library Interface Definition\nDESCRIPTION: This snippet creates an interface library named `kwiml`. It then defines the include directories for the interface, specifying different directories for build and install interfaces. Finally, it exports the created target.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kwiml INTERFACE)\ntarget_include_directories(kwiml INTERFACE\n  $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${KWIML_INSTALL_INCLUDE_DIR}>\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n  )\nexport(TARGETS kwiml\n  NAMESPACE kwiml::\n  FILE kwiml-targets.cmake\n  )\ninstall(TARGETS kwiml\n  DESTINATION lib\n  EXPORT kwiml-targets\n  )\ninstall(EXPORT kwiml-targets\n  NAMESPACE kwiml::\n  DESTINATION ${KWIML_INSTALL_PACKAGE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Paths with CMake\nDESCRIPTION: Defines test data paths for VTK module testing, specifically for MotionFX components including gears, planetary, position files, and clover data sets. Also includes the C++ source directory for compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MotionFX/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/MotionFX/2_gears/,REGEX:.*\n  Data/MotionFX/planetary/,REGEX:.*\n  Data/MotionFX/position_file/,REGEX:.*\n  Data/MotionFX/clover/,REGEX:.*)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Extraction Filter Tests\nDESCRIPTION: Configures the main test suite for VTK Filters Extraction module, including various test cases for different extraction operations and data types.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersExtractionCxxTests tests\n  TestConvertSelection.cxx,NO_VALID\n  TestExpandMarkedElements.cxx\n  TestExtractBlock.cxx,NO_VALID,NO_DATA\n  TestExtractBlockUsingDataAssembly.cxx,NO_VALID\n  TestExtractDataArraysOverTime.cxx,NO_VALID\n  TestExtractExodusGlobalTemporalVariables.cxx,NO_VALID\n  TestExtractGridPieces.cxx,NO_VALID\n  TestExtraction.cxx\n  TestExtractionExpression.cxx\n  TestExtractParticlesOverTime.cxx,NO_VALID,NO_DATA\n  TestExtractPolyDataGeometry.cxx,NO_VALID\n  TestExtractRectilinearGrid.cxx,NO_VALID,NO_DATA\n  TestExtractRows.cxx,NO_VALID,NO_DATA\n  TestExtractSelectedArraysOverTime.cxx,NO_VALID\n  TestExtractSelection.cxx\n  TestExtractThresholdsMultiBlock.cxx,NO_VALID\n  TestExtractTimeSteps.cxx,NO_VALID\n  TestHyperTreeGridSelection.cxx,NO_VALID,NO_DATA\n  ${test_64bit}\n  ${test_ioss}\n  )\n```\n\n----------------------------------------\n\nTITLE: Committing Updated xdmf2 Content with Custom Metadata\nDESCRIPTION: Adds all new xdmf2 files and creates a commit with customized author information to reflect the upstream source. The date and commit message should be adjusted to match the version being imported.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add --all\n\nGIT_AUTHOR_NAME='XDMF Developers' \\\nGIT_AUTHOR_EMAIL='xdmf@lists.kitware.com' \\\nGIT_AUTHOR_DATE='2012-08-01 16:14:03 -0500' \\\ngit commit -m 'xdmf2 2012-08-01 (reduced)' &&\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Dependencies and Include Directories\nDESCRIPTION: Sets up module dependencies, linking libraries, and include directories for the Fides module build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (${MPI_DEFS})\nvtk_module_definitions(VTK::fides PUBLIC ${MPI_DEFS})\nendif()\nif (ADIOS_DEFS)\nvtk_module_definitions(VTK::fides PRIVATE ${ADIOS_DEFS})\nendif()\nvtk_module_link(VTK::fides\n  PRIVATE\n    adios2::adios2\n    fides_rapidjson)\nvtk_module_include(VTK::fides\n  PUBLIC\n    $<BUILD_INTERFACE:${FIDES_SOURCE_DIR}>\n    $<BUILD_INTERFACE:${FIDES_BINARY_DIR}/fides>\n    $<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkfides/fides>\n  )\n```\n\n----------------------------------------\n\nTITLE: Serializer Function Signature in C++\nDESCRIPTION: Function signature for serializing VTK class instances using nlohmann::json\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_serialization.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nstatic nlohmann:json Serialize_vtkClassName(vtkObjectBase*, vtkSerializer*)\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Module in CMake\nDESCRIPTION: The snippet configures a third-party module using CMake. It specifies the license, version, copyright, and download location of the `ogg` library. Dependencies include a suitable CMake environment and the `vtk_module_third_party` function. The function registers the library's integration details, useful for building VTK with external libraries. It uses parameters like `INTERNAL`, `EXTERNAL`, and `PACKAGE` to configure project-specific settings. The output sets up the ogg library for inclusion in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkogg/COPYING\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2002, Xiph.org Foundation\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/ogg.git@for/vtk-20210804-1.3.5\"\n    VERSION\n      \"1.3.5\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE OGG\n    TARGETS OGG::OGG\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Common System Module and Linking Dependencies\nDESCRIPTION: This snippet adds the VTK Common System module and links it with necessary dependencies, including platform-specific libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::CommonSystem\n  CLASSES ${classes})\nvtk_module_link(VTK::CommonSystem\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    $<$<PLATFORM_ID:WIN32>:wsock32>\n    Threads::Threads)\nvtk_add_test_mangling(VTK::CommonSystem)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Results from ExprTk Expressions in C++\nDESCRIPTION: Example showing how to extract multiple results of different types (scalar, string, vector) from an ExprTk expression's results context after evaluation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_82\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::results_context<T> results_context_t;\nconst results_context_t& results = expression.results();\n\nif (results.count() == 4)\n{\n   T result_x0;\n   T result_x1;\n   std::string result_s;\n   std::vector<T> result_v;\n\n   results.get_scalar(0, result_x0);\n   results.get_scalar(1, result_x1);\n   results.get_string(3, result_s );\n   results.get_vector(2, result_v );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying SPDX License and Copyright in vtk.module File\nDESCRIPTION: This snippet shows how to specify the SPDX license identifier and copyright text in a vtk.module file. It sets the license to BSD-3-Clause and includes the copyright information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/spdx_and_sbom.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSPDX_LICENSE_IDENTIFIER\n  BSD-3-Clause\nSPDX_COPYRIGHT_TEXT\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests for MathTextActor and RenderString\nDESCRIPTION: This snippet uses the `vtk_add_test_python` macro to add Python tests related to `MathTextActor` and `RenderString`. These tests likely verify the correct rendering and functionality of math text and string rendering capabilities in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestMathTextActor.py\n  TestMathTextActor3D.py\n  TestRenderString.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Running TestOpenXRRemotingInitialization with IP Address\nDESCRIPTION: Command to run the TestOpenXRRemotingInitialization test, specifying the player application's IP address as an argument.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvtkRenderingOpenXRRemotingCxxTests.exe \"TestOpenXRRemotingInitialization\" -playerIP XX.XX.XX.XX\n```\n\n----------------------------------------\n\nTITLE: Setting Emscripten Link Options\nDESCRIPTION: This snippet defines a list of Emscripten-specific link options, including WASM compilation, modularization, asynchronous operations, memory growth allowance, export name configuration, and exporting runtime methods. These options are then applied to the ConeMultiBackend executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(emscripten_link_options)\n\nlist(APPEND emscripten_link_options\n  \"-sWASM=1\"\n  \"-sMODULARIZE=1\"\n  \"-sASYNCIFY=1\"\n  \"-sALLOW_MEMORY_GROWTH=1\"\n  \"-sEXPORT_NAME=createConeMultiBackendModule\"\n  \"-sEXPORTED_RUNTIME_METHODS=['ENV']\" # ENV holds the environment variables accessible by C getenv\n)\n\ntarget_link_options(ConeMultiBackend\n  PUBLIC\n    ${emscripten_link_options}\n)\n```\n\n----------------------------------------\n\nTITLE: New Polyhedral Cell Storage Structure\nDESCRIPTION: Describes the new storage layout for polyhedral cells in vtkUnstructuredGrid, using vtkCellArray for improved memory management and access\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/vtk-polyhedral-cells-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// New Storage Structure\n* **Connectivity** (vtkCellArray): point ids for polyhedral elements\n* **Faces** (vtkCellArray): polygonal face definitions\n* **FaceLocations** (vtkCellArray): references to element faces\n```\n\n----------------------------------------\n\nTITLE: Setting Up libprotobuf-mutator for Fuzz Testing in CMake\nDESCRIPTION: Configures and builds the libprotobuf-mutator library as an external project for use in fuzz testing. It sets up the necessary paths, build options, and dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Protobuf REQUIRED)\n\nset(ProtobufMutator_PREFIX libprotobuf-mutator)\nset(ProtobufMutator_PATH ${CMAKE_CURRENT_BINARY_DIR}/${ProtobufMutator_PREFIX}/src/${ProtobufMutator_PREFIX})\nset(ProtobufMutator_BUILD_PATH ${ProtobufMutator_PATH}-build)\nset(ProtobufMutator_INCLUDE_DIR ${ProtobufMutator_PATH})\nset(ProtobufMutator_LIBRARIES ${ProtobufMutator_BUILD_PATH}/src/libfuzzer/libprotobuf-mutator-libfuzzer.a ${ProtobufMutator_BUILD_PATH}/src/libprotobuf-mutator.a)\n\nExternalProject_Add(\n    ${ProtobufMutator_PREFIX}\n    PREFIX ${ProtobufMutator_PREFIX}\n    GIT_REPOSITORY https://github.com/google/libprotobuf-mutator.git\n    GIT_TAG 57928f41ae52bb27666aa15b310130d086dac245  # v1.4-16-g57928f4\n    CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n    CMAKE_CACHE_ARGS\n        -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}\n        -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}\n        -DLIB_PROTO_MUTATOR_EXAMPLES:BOOL=OFF\n        -DLIB_PROTO_MUTATOR_TESTING:BOOL=OFF\n    BUILD_BYPRODUCTS ${ProtobufMutator_LIBRARIES}\n    UPDATE_COMMAND true\n    INSTALL_COMMAND true)\n```\n\n----------------------------------------\n\nTITLE: Adding Test with vtk_add_test_cxx\nDESCRIPTION: This snippet utilizes the vtk_add_test_cxx command to define a set of tests for the Nlohmann JSON C++ components. It specifies the test name, potential data states, and the associated C++ test file for the tests. The defined test will run under various conditions specified by NO_DATA, NO_VALID, and NO_OUTPUT flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtknlohmannjsonCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeNlohmannJson.cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Microscopy Domain Module\nDESCRIPTION: This snippet uses the vtk_module_add_module CMake function to define the VTK::DomainsMicroscopy module.  It specifies the module name and the classes to include.  This macro handles building the module based on the listed classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::DomainsMicroscopy\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK libxml2 Module Configuration\nDESCRIPTION: Configures the libxml2 library as a VTK module, setting up source files, headers, directories, and compile definitions. It configures build settings for both static and shared library builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::libxml2\n  HEADER_DIRECTORIES\n  SOURCES ${LIBXML2_SRCS}\n  HEADERS ${LIBXML2_HDRS}\n  HEADERS_SUBDIR \"vtklibxml2\")\ntarget_compile_definitions(libxml2\n  PRIVATE\n    _GNU_SOURCE\n    _REENTRANT)\n\nif(NOT BUILD_SHARED_LIBS)\n  target_compile_definitions(libxml2\n    PRIVATE\n      LIBXML_STATIC)\nendif()\n\ntarget_include_directories(libxml2\n  PRIVATE\n    \"${CMAKE_CURRENT_SOURCE_DIR}/include/libxml\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/include/libxml\"\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtklibxml2/include>\")\n```\n\n----------------------------------------\n\nTITLE: Processing VTK Remote Module Definitions in CMake\nDESCRIPTION: This CMake snippet includes the base remote module functionality and then processes all files with the '*.remote.cmake' pattern. It skips hidden files (those that begin with a dot) and includes each valid remote module definition file found in the directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Functions to fetch remote modules.\ninclude(vtkModuleRemote)\n\nfile(GLOB remotes \"*.remote.cmake\")\nforeach(remote_module ${remotes})\n  if (remote_module MATCHES \"/\\\\.\")\n    continue ()\n  endif ()\n  include(${remote_module})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: PointData Element in XML\nDESCRIPTION: This snippet illustrates the PointData element that holds various associated data for points in a dataset, including scalars and vectors with their corresponding DataArray elements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n  <PointData Scalars=\"Temperature\" Vectors=\"Velocity\">\n    <DataArray Name=\"Velocity\" .../>\n    <DataArray Name=\"Temperature\" .../>\n    <DataArray Name=\"Pressure\" .../>\n  </PointData>\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Core Module\nDESCRIPTION: Configures and adds the VTK Python wrapping core module with specified classes, headers, and version suffix.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/PythonCore/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::WrappingPythonCore\n  CLASSES ${classes}\n  HEADERS ${headers}\n  PRIVATE_CLASSES ${private_classes}\n  PRIVATE_HEADERS ${private_headers}\n  LIBRARY_NAME_SUFFIX \"${vtk_python_version_major}.${vtk_python_version_minor}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters HyperTree C++ Tests in CMake\nDESCRIPTION: This snippet uses VTK-specific CMake functions to add the C++ tests for the Filters HyperTree module and create the test executable. It sets up the tests to be built and run as part of the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersHyperTreeCxxTests tests ${test_sources})\nvtk_test_cxx_executable(vtkFiltersHyperTreeCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Including RST Macros and CMake Module Documentation\nDESCRIPTION: RST directives to include a macro file and reference CMake module documentation for VTK Java wrapping functionality\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/vtkModuleWrapJava.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: macros.hrst\n.. cmake-module:: ../../../../CMake/vtkModuleWrapJava.cmake\n```\n\n----------------------------------------\n\nTITLE: Adding Options for CLI Application in C++\nDESCRIPTION: This code snippet illustrates how to set up a command line interface (CLI) application using the CLI11 library. It demonstrates creating an instance of the CLI app, adding options, and parsing command line arguments. The snippet also ensures that UTF-8 encoding is handled correctly for the arguments passed to the app.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint main(int argc, char** argv) {\n    CLI::App app{\"App description\"};\n    argv = app.ensure_utf8(argv);\n\n    std::string filename = \"default\";\n    app.add_option(\"-f,--file\", filename, \"A help string\");\n\n    CLI11_PARSE(app, argc, argv);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Setting Properties\nDESCRIPTION: This snippet creates the executable `kwiml_test` using the collected source files. It also sets properties for compile definitions, include usage (disabling C_INCLUDE_WHAT_YOU_USE and CXX_INCLUDE_WHAT_YOU_USE), and the runtime output directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_executable(kwiml_test ${test_srcs})\nset_property(TARGET kwiml_test PROPERTY COMPILE_DEFINITIONS ${test_defs})\nset_property(TARGET kwiml_test PROPERTY C_INCLUDE_WHAT_YOU_USE \\\"\\\")\nset_property(TARGET kwiml_test PROPERTY CXX_INCLUDE_WHAT_YOU_USE \\\"\\\")\nset_property(TARGET kwiml_test PROPERTY\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\"\n```\n\n----------------------------------------\n\nTITLE: Creating OpenGL Version Probe Executable for VTK\nDESCRIPTION: Creates an executable that can probe the OpenGL version at runtime on desktop platforms when not using GLES, which helps with compatibility testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT ANDROID AND\n    NOT APPLE_IOS AND\n    NOT CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\" AND\n    NOT VTK_OPENGL_USE_GLES)\n  set(probe_no_install)\n  if (NOT _vtk_build_INSTALL_HEADERS)\n    set(probe_no_install\n      NO_INSTALL)\n  endif ()\n  vtk_module_add_executable(vtkProbeOpenGLVersion\n    ${probe_no_install}\n    vtkProbeOpenGLVersion.cxx)\n  target_link_libraries(vtkProbeOpenGLVersion\n    PRIVATE\n      VTK::RenderingOpenGL2)\n  vtk_module_autoinit(\n    TARGETS vtkProbeOpenGLVersion\n    MODULES VTK::RenderingOpenGL2)\nendif ()\nvtk_add_test_mangling(VTK::RenderingOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Configuring CGNS Header Files for Installation in CMake\nDESCRIPTION: Prepares a list of CGNS header files for installation, including conditional inclusions based on build options such as Fortran support, parallel processing, and legacy features.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  vtk_cgns_mangle.h\n  cgnslib.h\n  cgns_io.h\n  ${CMAKE_CURRENT_BINARY_DIR}/cgnsconfig.h\n  ${CMAKE_CURRENT_BINARY_DIR}/cgnstypes.h)\n\nif (CGNS_ENABLE_FORTRAN)\n  if(DEFINED CMAKE_Fortran_MODULE_DIRECTORY)\n    list(APPEND headers\n      ${CMAKE_Fortran_MODULE_DIRECTORY}/cgns.mod)\n  else()\n    list(APPEND headers\n      $<TARGET_FILE_DIR:cgns_static>/cgns.mod)\n  endif()\nendif ()\n\nif (CGNS_ENABLE_PARALLEL)\n  list(APPEND headers\n    pcgnslib.h)\nendif ()\n\nif (CGNS_ENABLE_LEGACY)\n  list(APPEND headers\n    adf/ADF.h)\n  if (CGNS_ENABLE_HDF5)\n    list(APPEND headers\n      adfh/ADFH.h)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Windows API Name Mangling Example - C++\nDESCRIPTION: Demonstrates how Windows.h defines API functions for both ASCII and Unicode support using macro definitions, which can cause naming conflicts.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.WindowsMangling.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nWINUSERAPI int WINAPI GetClassNameA(HWND hWnd, LPSTR lpClassName,\n                                    int nMaxCount);\nWINUSERAPI int WINAPI GetClassNameW(HWND hWnd, LPWSTR lpClassName,\n                                    int nMaxCount);\n#ifdef UNICODE\n#define GetClassName  GetClassNameW\n#else\n#define GetClassName  GetClassNameA\n#endif // !UNICODE\n```\n\n----------------------------------------\n\nTITLE: Conditional Class Appending based on VTK Features\nDESCRIPTION: This snippet conditionally appends `vtkTDxQtUnixDevices` to the list of classes if both `VTK_USE_X` and `VTK_USE_TDX` are enabled.  This is likely for supporting specific input devices or platforms when building the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_X AND VTK_USE_TDX)\n  list(APPEND classes\n    vtkTDxQtUnixDevices)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ExprTk Supported Escape Characters\nDESCRIPTION: List of white-space and control characters supported in ExprTk expressions\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_112\n\nLANGUAGE: text\nCODE:\n```\n'\\n', '\\r', '\\t', '\\b', '\\v', '\\f'\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Test Data and Directory Setup\nDESCRIPTION: Configures additional test data files and adds Python tests directory when Python wrapping is enabled in VTK. Includes specific data files for Python tests such as 3D models and image files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/Viewpoint/cow.g\n    Data/Viewpoint/cow.obj\n    Data/beach.tif\n    Data/blow.vtk\n    Data/headsq/,REGEX:.*\n    Data/masonry.bmp)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This CMake code snippet adds the 'Ex1' subdirectory to the build process.  It includes the CMakeLists.txt file within the 'Ex1' directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Examples/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Ex1)\n```\n\n----------------------------------------\n\nTITLE: Qt Widgets Package Configuration\nDESCRIPTION: Finds and configures Qt Widgets package dependency, with version matching VTK's Qt version. Includes error handling for missing Qt components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/StatsView/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Encoding Shader Files for VTK Rendering Parallel LIC in CMake\nDESCRIPTION: Encodes GLSL shader files as strings, generating corresponding header and source files. This allows embedding shader code directly into the C++ source.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(shader_files\n  vtkPSurfaceLICComposite_CompFS.glsl)\n\nset(sources)\nset(private_headers)\nforeach(shader_file IN LISTS shader_files)\n  vtk_encode_string(\n    INPUT         \"${shader_file}\"\n    EXPORT_HEADER \"vtkRenderingParallelLICModule.h\"\n    EXPORT_SYMBOL \"VTKRENDERINGPARALLELLIC_NO_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source)\n  list(APPEND sources ${source})\n  list(APPEND private_headers ${header})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Python Module Initialization and Installation\nDESCRIPTION: Configures and installs Python __init__.py file and exports CMake targets for the wrapped modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(python_modules)\nforeach(module ${modules})\n  _vtk_module_get_module_property(\"${module}\"\n    PROPERTY  \"library_name\"\n    VARIABLE  library_name)\n  list(APPEND python_modules \"'${library_name}'\")\nendforeach()\n\nlist(JOIN python_modules ,  python_modules_string)\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/__init__.py.in\"\n  \"${CMAKE_BINARY_DIR}/${python_destination}/wrapping/__init__.py\"\n  @ONLY)\ninstall(\n  FILES       \"${CMAKE_BINARY_DIR}/${python_destination}/wrapping/__init__.py\"\n  DESTINATION \"${python_destination}/wrapping/\")\n\nexport(\n  EXPORT    wrapping_export\n  NAMESPACE Wrapping::\n  FILE      \"${CMAKE_BINARY_DIR}/${python_destination}/wrapping/wrapping_export-targets.cmake\")\ninstall(\n  EXPORT      wrapping_export\n  NAMESPACE   Wrapping::\n  FILE        wrapping_export-targets.cmake\n  DESTINATION \"${python_destination}/cmake/wrapping\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK-m Override Options\nDESCRIPTION: Defines a CMake option to enable VTK-m overrides of corresponding VTK filters via the object factory, and creates a macro for adding overrides.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#=============================================================================\n# Option to enable VTK-m override of corresponding VTK filters. Note that\n# there is also a run-time option that needs to be enabled. It can be accessed\n# via the static function `vtkmFilterOverrides::SetEnabled(bool)`\n#\noption (VTK_ENABLE_VTKM_OVERRIDES \"Override VTK filters using the object factory\" OFF)\nmark_as_advanced(VTK_ENABLE_VTKM_OVERRIDES)\n\nmacro (_vtkm_add_override override_base override_sub)\n  vtk_object_factory_declare(BASE ${override_base} OVERRIDE ${override_sub})\n  list (APPEND VTKM_OVERRIDES_INITIALIZER_LIST \"{\\\"${override_base}\\\", \\\"${override_sub}\\\"}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 API Version in CMake\nDESCRIPTION: Sets the default API version for HDF5 with a preference for v114. This code handles the configuration of API version preferences and sets the appropriate flags based on the selected version.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFAULT_API_VERSION)\n  set (DEFAULT_API_VERSION \"v114\")\nendif ()\nset (H5_USE_114_API_DEFAULT 0)\nif (DEFAULT_API_VERSION MATCHES \"v114\")\n  set (H5_USE_114_API_DEFAULT 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting MPI Test Parameters in CMake\nDESCRIPTION: This snippet defines the number of processes for certain MPI-based tests related to ADIOS2. These variables control the parallel execution environment for specific test cases, setting the groundwork for parallel I/O testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  set(TestADIOS2BPReaderSingleTimeStep_NUMPROCS 2)\n  # For now vtkMultiBlockVolumeMapper does not support rendering in parallel\n  set(TestADIOS2BPReaderMultiTimeSteps_NUMPROCS 2)\n  set(TestADIOS2BPReaderMultiTimeSteps2D_NUMPROCS 2)\n  vtk_add_test_mpi(vtkIOADIOS2CxxTests-MPI mpiTests TESTING_DATA\n    TestADIOS2BPReaderMPISingleTimeStep.cxx\n    TestADIOS2BPReaderMPIMultiTimeSteps3D.cxx,NO_VALID\n    TestADIOS2BPReaderMPIMultiTimeSteps2D.cxx)\n  vtk_test_cxx_executable(vtkIOADIOS2CxxTests-MPI mpiTests)\n\n  # VTX tests\n  set(TestIOADIOS2VTX_VTI3DRendering_NUMPROCS 2)\n  vtk_add_test_mpi(vtkIOADIOS2VTXCxxTests-MPI mpiTests TESTING_DATA NO_OUTPUT\n    TestIOADIOS2VTX_VTI3DRendering.cxx,NO_VALID)\n\n  vtk_test_cxx_executable(vtkIOADIOS2VTXCxxTests-MPI mpiTests)\n  target_link_libraries(vtkIOADIOS2VTXCxxTests-MPI PUBLIC adios2::adios2)\nelse ()\n```\n\n----------------------------------------\n\nTITLE: Register override in VTK\nDESCRIPTION: In VTK, `vtkObjectBase`'s `Register` is no longer virtual, and to control register counting/garbage collecting behavior, `vtkObjectBase::UsesGarbageCollector` should be overridden instead. The `vtkInformationKey` and `vtkGarbageCollectorImpl` classes have been modified to adhere to this.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining PolyData Structure in XML\nDESCRIPTION: This snippet defines the structure of a PolyData element in VTK's XML format, specifying its points and cells along with relevant attributes for each piece.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"PolyData\" ...>\n  <PolyData>\n    <Piece NumberOfPoints=\"#\" NumberOfVerts=\"#\" NumberOfLines=\"#\"\n      NumberOfStrips=\"#\" NumberOfPolys=\"#\">\n    <PointData>...</PointData>\n    <CellData>...</CellData>\n    <Points>...</Points>\n    <Verts>...</Verts>\n    <Lines>...</Lines>\n    <Strips>...</Strips>\n    <Polys>...</Polys>\n   </Piece>\n  </PolyData>\n</VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Flow Paths Test Cases\nDESCRIPTION: Configures a set of C++ test cases for the VTK Filters Flow Paths module. Includes tests for BSP trees, streamlines, particle tracers, and vector field topology.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersFlowPathsCxxTests tests\n  TestBSPTree.cxx\n  TestBSPTreeWithGhostArrays.cxx\n  TestCellLocatorsLinearTransform.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  TestEvenlySpacedStreamlines2D.cxx\n  TestStreamTracer.cxx,NO_VALID\n# TestStreamTracerSurface.cxx #19221\n  TestStreamSurface.cxx\n  TestAMRInterpolatedVelocityField.cxx,NO_VALID\n  TestParallelVectors.cxx\n  TestParticleTracers.cxx,NO_VALID\n  TestLagrangianIntegrationModel.cxx,NO_VALID\n  TestLagrangianParticle.cxx,NO_VALID\n  TestLagrangianParticleTracker.cxx\n  TestLagrangianParticleTrackerWithGravity.cxx,NO_VALID\n  TestStreamTracerImplicitArray.cxx,NO_VALID\n  TestVortexCore.cxx,NO_VALID\n  TestVectorFieldTopology.cxx\n  TestVectorFieldTopologyAMR.cxx\n  TestVectorFieldTopologyNoIterativeSeeding.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK Regression Testing with External Data\nDESCRIPTION: Configures regression testing for the finance example using external data sources from Kitware data repositories. Includes test setup and environment configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modelling/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_TESTING)\n  include(CTest)\n  if (TARGET VTK::TestingRendering)\n\n    ######## Regression Testing ########\n    set(ExternalData_BINARY_ROOT ${CMAKE_CURRENT_BINARY_DIR}/ExternalData)\n\n    list(APPEND ExternalData_URL_TEMPLATES\n      # Data published by Girder\n      \"https://data.kitware.com/api/v1/file/hashsum/%(algo)/%(hash)/download\"\n\n      # Data published by developers using git-gitlab-push.\n      \"https://www.vtk.org/files/ExternalData/%(algo)/%(hash)\"\n    )\n    include(ExternalData)\n\n    ExternalData_add_test(ModellingData\n      NAME    \"ModellingExampleCxx-finance\"\n      COMMAND finance\n        DATA{${CMAKE_CURRENT_SOURCE_DIR}/Data/financial.txt}\n        -V DATA{${CMAKE_CURRENT_SOURCE_DIR}/Baseline/finance.png}\n      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n    set_property(TEST ModellingExampleCxx-finance\n      PROPERTY\n        ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n\n    ExternalData_Add_Target(ModellingData)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK OpenXR Classes and Headers in CMake\nDESCRIPTION: Sets up lists of VTK OpenXR classes, non-wrapped classes, and headers for the module configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOpenXRRenderWindow\n  vtkOpenXRRenderWindowInteractor\n  vtkOpenXRCamera\n  vtkOpenXRControlsHelper\n  vtkOpenXRModel\n  vtkOpenXRRenderer\n  vtkOpenXRInteractorStyle\n  vtkOpenXRSceneObserver\n  vtkOpenXRSceneComponent\n  )\n\nset(nowrap_classes\n  vtkOpenXRManager\n  vtkOpenXRManagerGraphics\n  vtkOpenXRManagerOpenGLGraphics\n  vtkOpenXRManagerConnection\n  )\n\nset(nowrap_headers\n  vtkOpenXR.h\n  vtkOpenXRPlatform.h\n  vtkOpenXRUtilities.h\n  XrExtensions.h\n  XrGraphicsExtensions.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Using VTK Modules with Old System (CMake)\nDESCRIPTION: Example of how to use VTK modules in CMake with the old module system from VTK 8.2 and earlier. It shows finding VTK packages, including use files, and linking libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  REQUIRED\n  COMPONENTS\n    vtkCommonCore\n    vtkRenderingOpenGL2)\ninclude(${VTK_USE_FILE})\n\nadd_library(usesvtk ...)\ntarget_link_libraries(usesvtk ${visibility} ${VTK_LIBRARIES})\ntarget_include_directories(usesvtk ${visibility} ${VTK_INCLUDE_DIRS})\n\n# Pass any VTK autoinit defines to the target.\ntarget_compile_definitions(usesvtk PRIVATE ${VTK_DEFINITIONS})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOExodus Module with CMake\nDESCRIPTION: This CMake snippet configures the VTK IOExodus module by defining various classes related to Exodus II file format processing. It specifies regular classes, template classes, classes that should not be wrapped, and headers that should not be wrapped, then adds the module to the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkCPExodusIIElementBlock\n  vtkCPExodusIIInSituReader\n  vtkExodusIICache\n  vtkExodusIIReader\n  vtkExodusIIReaderParser\n  vtkExodusIIWriter\n  vtkModelMetadata)\n\nset(template_classes\n  vtkCPExodusIINodalCoordinatesTemplate\n  vtkCPExodusIIResultsArrayTemplate)\n\nset(nowrap_classes\n  vtkExodusIIReaderVariableCheck)\n\nset(nowrap_headers\n  vtkExodusIIReaderPrivate.h)\n\nvtk_module_add_module(VTK::IOExodus\n  CLASSES ${classes}\n  TEMPLATE_CLASSES ${template_classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  NOWRAP_HEADERS ${nowrap_headers})\nvtk_add_test_mangling(VTK::IOExodus)\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Options in INI Format\nDESCRIPTION: Equivalent configuration options defined in INI format, demonstrating comments, sections, and various value types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\n; Comments are supported, using a ;\n; The default section is [default], case-insensitive\n\nvalue = 1\nstr = \"A string\"\nvector = 1 2 3\nstr_vector = \"one\" \"two\" \"and three\"\n\n; Sections map to subcommands\n[subcommand]\nin_subcommand = Wow\nsub.subcommand = true\n```\n\n----------------------------------------\n\nTITLE: Processing Shader Files\nDESCRIPTION: Iterates through shader files to generate corresponding C++ source and header files using VTK's string encoding.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(shader_h_files)\nset(shader_cxx_files)\nforeach (shader_file IN LISTS shader_files)\n  vtk_encode_string(\n    INPUT         \"${shader_file}\"\n    EXPORT_HEADER \"vtkRenderingLICOpenGL2Module.h\"\n    EXPORT_SYMBOL \"VTKRENDERINGLICOPENGL2_NO_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source)\n  list(APPEND shader_cxx_files ${source})\n  list(APPEND shader_h_files ${header})\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with VTK and Qt Dependencies\nDESCRIPTION: Sets up a CMake project for a minimal Qt VTK application. Configures minimum CMake version, finds required VTK and Qt packages, and sets up build targets with proper linking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/MinimalQtVTKApp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(MinimalQtVTKApp)\n\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    GUISupportQt)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Core Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Core\" OR NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\n# Set your files and resources here\nset(Srcs\n  MinimalQtVTKApp.cxx)\n\n# Instruct CMake to run moc automatically when needed.\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\n\n\n# CMAKE_AUTOMOC in ON so the MocHdrs will be automatically wrapped.\nadd_executable(MinimalQtVTKApp\n  ${Srcs})\ntarget_link_libraries(MinimalQtVTKApp\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Core\"\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS MinimalQtVTKApp\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Geometry Standard Tests in CMake\nDESCRIPTION: Defines a set of standard C++ tests for VTK's Filters Geometry module. Tests are specified with file names and optional flags like NO_VALID to indicate tests that don't require image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersGeometryCxxTests tests\n  TestDataSetRegionSurfaceFilter.cxx\n  TestDataSetSurfaceFieldData.cxx,NO_VALID\n  TestDataSetSurfaceFilterQuadraticTetsGhostCells.cxx,NO_VALID\n  TestDataSetSurfaceFilterWith1DGrids.cxx,NO_VALID\n  TestDataSetSurfaceFilterWithBlankedImageData.cxx\n  TestExplicitStructuredGridSurfaceFilter.cxx\n  TestExtractSurfaceNonLinearSubdivision.cxx\n  TestFastUnstructuredGridWithPolyDataGeometryFilter.cxx,NO_DATA\n  TestGeometryFilterDegeneratedCells.cxx\n  TestImageDataToUniformGrid.cxx,NO_VALID\n  TestLinearToQuadraticCellsFilter.cxx\n  TestProjectSphereFilter.cxx,NO_VALID\n  TestRecoverGeometryWireframe.cxx\n  TestRegularGridDataSetSurfaceFilter.cxx\n  TestStructuredAMRNeighbor.cxx,NO_VALID\n  TestUnstructuredGridGeometryFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Standard C++ Tests in CMake\nDESCRIPTION: This snippet defines standard C++ tests for ADIOS2 integration within VTK. It uses `vtk_add_test_cxx` to add tests that do not require MPI, specifying the source files and data dependencies. It creates the `vtkIOADIOS2CxxTests` executable and then sets it up for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n  vtk_add_test_cxx(vtkIOADIOS2CxxTests tests TESTING_DATA\n    TestADIOS2BPReaderSingleTimeStep.cxx\n    TestADIOS2BPReaderMultiTimeSteps3D.cxx\n    TestADIOS2BPReaderMultiTimeSteps2D.cxx)\n\n  vtk_test_cxx_executable(vtkIOADIOS2CxxTests tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Modelling Project with CMake\nDESCRIPTION: Sets up a CMake project for VTK modeling examples including version requirements, output directories, and required VTK components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modelling/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(Modelling)\n\ninclude(GNUInstallDirs)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    FiltersGeneral\n    IOXML\n    ImagingHybrid\n    InteractionStyle\n    RenderingCore\n    RenderingOpenGL2\n    vtksys\n  OPTIONAL_COMPONENTS\n    TestingRendering)\n```\n\n----------------------------------------\n\nTITLE: Configuring GZip Compression Support for XDMF\nDESCRIPTION: Sets up optional GZip compression support for XDMF by adding the necessary source files and defining the XDMF_USE_GZIP preprocessor symbol.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): hardcode settings\noption(XDMF_USE_GZIP \"Build GZip Compression\" OFF)\nelse ()\nset(XDMF_USE_GZIP OFF)\nendif ()\nmark_as_advanced(XDMF_USE_GZIP)\nif(XDMF_USE_GZIP)\n  set(XdmfSources ${XdmfSources} ${XdmfGzipSource})\n  add_definitions(\"-DXDMF_USE_GZIP\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory Overrides\nDESCRIPTION: Declares object factory overrides for WindBlade and PLOT3D readers to use their MPI-enabled versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkWindBladeReader\n  OVERRIDE  vtkPWindBladeReader)\nvtk_object_factory_declare(\n  BASE      vtkMultiBlockPLOT3DReader\n  OVERRIDE  vtkMPIMultiBlockPLOT3DReader)\n```\n\n----------------------------------------\n\nTITLE: Installation Directory Configuration\nDESCRIPTION: Sets up installation directories and export name if not already defined.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FIDES_INSTALL_INCLUDE_DIR)\n  set(FIDES_INSTALL_INCLUDE_DIR \"include/fides\")\nendif()\n\nif (NOT DEFINED FIDES_EXPORT_NAME)\n  set(FIDES_EXPORT_NAME \"FidesTargets\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Targets for VTK-m Backends\nDESCRIPTION: Creates imported interface targets that wrap VTK-m backend libraries (CUDA, Kokkos-CUDA, Kokkos-HIP). This makes it easier for VTK components to conditionally link against specific backends when available.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET vtkm_cuda)\n  add_library(\"vtkm::cuda\" INTERFACE IMPORTED GLOBAL)\n  target_link_libraries(\"vtkm::cuda\" INTERFACE vtkm_cuda)\nendif()\n\nif (TARGET vtkm_kokkos_cuda)\n  add_library(\"vtkm::kokkos_cuda\" INTERFACE IMPORTED GLOBAL)\n  target_link_libraries(\"vtkm::kokkos_cuda\" INTERFACE vtkm_kokkos_cuda)\nendif()\n\nif (TARGET vtkm_kokkos_hip)\n  add_library(\"vtkm::kokkos_hip\" INTERFACE IMPORTED GLOBAL)\n  target_link_libraries(\"vtkm::kokkos_hip\" INTERFACE vtkm_kokkos_hip)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting VTKm Module Configuration and Class List\nDESCRIPTION: Sets up the VTKm module configuration by disabling deprecated virtual methods and defining a list of VTKm filter classes to be included in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(VTKm_NO_DEPRECATED_VIRTUAL ON)\n\nlist(INSERT CMAKE_MODULE_PATH 0\n  \"${VTK_SOURCE_DIR}/ThirdParty/vtkm/vtkvtkm/vtk-m/CMake\")\n\nset(classes\n  vtkmAverageToCells\n  vtkmAverageToPoints\n  vtkmCleanGrid\n  vtkmClip\n  vtkmContour\n  vtkmCoordinateSystemTransform\n  vtkmExternalFaces\n  vtkmExtractVOI\n  vtkmGradient\n  vtkmHistogram\n  vtkmImageConnectivity\n  vtkmLevelOfDetail\n  vtkmNDHistogram\n  vtkmPointElevation\n  vtkmPointTransform\n  vtkmPolyDataNormals\n  vtkmProbe\n  vtkmSlice\n  vtkmThreshold\n  vtkmTriangleMeshPointNormals\n  vtkmWarpScalar\n  vtkmWarpVector\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK RenderingGL2PSOpenGL2 Module\nDESCRIPTION: Sets up a list of classes to be included in the VTK RenderingGL2PSOpenGL2 module. Currently, it only includes the vtkOpenGLGL2PSHelperImpl class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOpenGLGL2PSHelperImpl)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory for Module Testing\nDESCRIPTION: Includes the Cxx subdirectory, typically used for adding C++ test implementations and source files\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for VTK H5Part Module\nDESCRIPTION: Defines the list of header files for the H5Part module, including H5Block, H5MultiBlock, and H5Part components along with utility headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/vtkh5part/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  src/H5BlockErrors.h\n  src/H5Block.h\n  src/H5BlockPrivate.h\n  src/H5BlockReadWrite.h\n  src/H5BlockTypes.h\n  src/H5MultiBlockErrors.h\n  src/H5MultiBlock.h\n  src/H5MultiBlockPrivate.h\n  src/H5MultiBlockReadWrite.h\n  src/H5MultiBlockTypes.h\n  src/H5PartAttrib.h\n  src/H5PartErrors.h\n  src/H5PartF.h\n  src/H5Part.h\n  src/H5PartPrivate.h\n  src/H5PartTypes.h\n  src/Underscore.h\n  src/vtk_h5part_mangle.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/src/vtkh5part_export.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Compatibility Option CMake\nDESCRIPTION: Defines a CMake option to toggle between using the newer or legacy version of the zSpace SDK. It uses a boolean option and marks it as advanced for the build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ZSpace/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_ZSPACE_USE_COMPAT_SDK \"Set to \\\"ON\\\" to use the newer version of the zSpace SDK (\\\"Core Compatibility SDK\\\") instead of the legacy one (\\\"Core SDK\\\")\" ON)\nmark_as_advanced(VTK_ZSPACE_USE_COMPAT_SDK)\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Changes\nDESCRIPTION: Commands to fetch and reset local branch to match remote changes\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: git\nCODE:\n```\ngit fetch gitlab\ngit reset --hard gitlab/your_branch\n```\n\n----------------------------------------\n\nTITLE: Updating Compute Pipelines and Buffers in VTK WebGPU Renderer\nDESCRIPTION: These code snippets show how compute pipelines and render buffers are updated within the `vtkWebGPURenderer`. `UpdateComputePipelines()` sets the `WGPUConfiguration` for the pipeline, while `UpdateComputeBuffers()` configures the render buffer's properties and adds it to the pipeline after the mapper's data buffer is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nvoid vtkWebGPURenderer::UpdateComputePipelines()\n{\n  for (vtkSmartPointer<vtkWebGPUComputePipeline> computePipeline : this->NotSetupComputePipelines)\n  {\n    computePipeline->SetWGPUConfiguration(webGPURenderWindow->GetWGPUConfiguration());\n\n    this->UpdateComputeBuffers(computePipeline);\n  }\n}\n\nvoid vtkWebGPURenderer::UpdateComputeBuffers()\n{\n  for (vtkSmartPointer<vtkWebGPUComputeRenderBuffer> renderBuffer : wgpuMapper->GetComputeRenderBuffers())\n  {\n    vtkWebGPUPolyDataMapper::PointDataAttributes bufferAttribute = renderBuffer->GetBufferAttribute();\n\n    // Setup of the render buffer\n    renderBuffer->SetMode(vtkWebGPUComputeBuffer::BufferMode::READ_WRITE_COMPUTE_STORAGE);\n    renderBuffer->SetByteSize(wgpuMapper->GetPointAttributeByteSize(bufferAttribute));\n    renderBuffer->SetRenderBufferOffset(wgpuMapper->GetPointAttributeByteOffset(bufferAttribute) / sizeof(float));\n    renderBuffer->SetRenderBufferElementCount(wgpuMapper->GetPointAttributeByteSize(bufferAttribute) / wgpuMapper->GetPointAttributeElementSize(bufferAttribute));\n    renderBuffer->SetWGPUBuffer(wgpuMapper->GetPointDataWGPUBuffer());\n\n    // Setup done, the render buffer can be added to the pipeline\n    vtkWebGPUComputePipeline* associatedPipeline = renderBuffer->GetAssociatedPipeline();\n    associatedPipeline->SetupRenderBuffer(renderBuffer);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Symbol Tables Registration in C++\nDESCRIPTION: Demonstrates how to register multiple symbol tables with a single expression and explains symbol resolution order.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<double> symbol_table_t;\ntypedef exprtk::expression<double>   expression_t;\ntypedef exprtk::parser<double>       parser_t;\n\nsymbol_table_t symbol_table0;\nsymbol_table_t symbol_table1;\n\nexpression_t   expression;\nparser_t       parser;\n\ndouble x0 = 123.0;\ndouble x1 = 678.0;\n\nstd::string expression_string = \"x + 1\";\n\nsymbol_table0.add_variable(\"x\",x0);\nsymbol_table1.add_variable(\"x\",x1);\n\nexpression.register_symbol_table(symbol_table0);\nexpression.register_symbol_table(symbol_table1);\n\nparser.compile(expression_string,expression);\n\nexpression.value(); // 123 + 1\n```\n\n----------------------------------------\n\nTITLE: Obtaining SQLite Source Code using Fossil\nDESCRIPTION: Commands to download and access the SQLite source code using the Fossil version control system. This allows for efficient access to different versions of SQLite after initial download.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/sqlite\ncd ~/sqlite\nfossil open https://sqlite.org/src\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Tests in VTK - CMake\nDESCRIPTION: This snippet adds MPI tests for the specified VTK components using the vtk_add_test_mpi command. It allows for the inclusion of various test files and optional parameters indicating testing data or validity. This configuration is necessary for evaluating the functionality of parallel VTK components under test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkFiltersParallelFlowPathsCxxTests-MPI tests\n  TestPLagrangianParticleTracker.cxx,TESTING_DATA\n  TestPStream.cxx,TESTING_DATA\n  TestPStreamGeometry.cxx\n  #  TestPParticleTracers.cxx\n  TestPStreamAMR.cxx,TESTING_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Conduit MPI Tests\nDESCRIPTION: Sets up parallel MPI tests when VTK Parallel MPI support is available, including both standard and device memory tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  vtk_add_test_mpi(vtkConduitCxxTests-MPI mpitests\n    TESTING_DATA NO_VALID NO_OUTPUT\n    TestDataObjectToConduit.cxx\n    TestConduitSource.cxx)\n\n  if (TARGET VTK::AcceleratorsVTKmDataModel)\n    vtk_add_test_mpi(vtkConduitCxxTests-MPI mpitests\n      TESTING_DATA NO_VALID NO_OUTPUT\n      TestConduitSourceDeviceMemory.cxx)\n  endif()\n\n  vtk_test_cxx_executable(vtkConduitCxxTests-MPI mpitests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOParallelNetCDF Module\nDESCRIPTION: Adds the VTK::IOParallelNetCDF module to the project, specifying classes, sources, and private headers. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOParallelNetCDF\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOParallelNetCDF)\n```\n\n----------------------------------------\n\nTITLE: CLI11 Command Line Usage Example\nDESCRIPTION: Shows how to use CLI11 commands and subcommands from the command line\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nprogram --opt1 opt1_val  sub1 --sub1opt --sub1optb val sub2 --sub2opt sub1 --sub1opt2 sub2 --sub2opt2 val\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Including Directories with CMake\nDESCRIPTION: This snippet adds the VTK double conversion module and specifies which directories to include during the build. 'vtk_module_add_module' is used to include headers and sources within the module, and 'vtk_module_include' specifies the public directories that should be included when the module is used. This ensures that the module is correctly integrated into the VTK build setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/vtkdoubleconversion/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::doubleconversion\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkdoubleconversion\")\nvtk_module_include(VTK::doubleconversion\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/double-conversion>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Compiler Options for Expat\nDESCRIPTION: Sets up Microsoft Visual C++ compiler options and version checks for building Expat. Ensures compatibility with supported MSVC versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    set(_EXPAT_MSVC_REQUIRED_INT 1800)  # i.e. 12.0/2013/1800; see PR #426\n    set(_EXPAT_MSVC_SUPPORTED_INT 1920)\n    set(_EXPAT_MSVC_SUPPORTED_DISPLAY \"Visual Studio 16.0/2019/${_EXPAT_MSVC_SUPPORTED_INT}\")\n\n    if(MSVC_VERSION VERSION_LESS ${_EXPAT_MSVC_SUPPORTED_INT})\n        if(MSVC_VERSION VERSION_LESS ${_EXPAT_MSVC_REQUIRED_INT})\n            message(SEND_ERROR \"MSVC_VERSION ${MSVC_VERSION} is TOO OLD to compile Expat without errors.\")\n            message(SEND_ERROR \"Please use officially supported ${_EXPAT_MSVC_SUPPORTED_DISPLAY} or later.  Thank you!\")\n        else()\n            message(WARNING \"MSVC_VERSION ${MSVC_VERSION} is NOT OFFICIALLY SUPPORTED by Expat.\")\n            message(WARNING \"Please use ${_EXPAT_MSVC_SUPPORTED_DISPLAY} or later.  Thank you!\")\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up C and C++ Tests in CMake for KWSys\nDESCRIPTION: This snippet configures the C and C++ tests for the KWSys project. It sets up executable output directories, creates test executables, links them with the appropriate libraries, and adds the tests to CTest.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n# Setup testing if not being built as part of another project.\nif(KWSYS_STANDALONE OR CMake_SOURCE_DIR)\n  if(BUILD_TESTING)\n    # Compute the location of executables.\n    set(EXEC_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\n    if(CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n      set(EXEC_DIR \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n    endif()\n\n    # C tests\n    set(KWSYS_C_TESTS\n      testEncode.c\n      testTerminal.c\n      )\n    if(KWSYS_STANDALONE)\n      set(KWSYS_C_TESTS ${KWSYS_C_TESTS} testFail.c)\n    endif()\n    create_test_sourcelist(\n      KWSYS_C_TEST_SRCS ${KWSYS_NAMESPACE}TestsC.c\n      ${KWSYS_C_TESTS}\n      )\n    add_executable(${KWSYS_NAMESPACE}TestsC ${KWSYS_C_TEST_SRCS})\n    set_property(TARGET ${KWSYS_NAMESPACE}TestsC PROPERTY LABELS ${KWSYS_LABELS_EXE})\n    target_link_libraries(${KWSYS_NAMESPACE}TestsC ${KWSYS_TARGET_C_LINK})\n    foreach(testfile ${KWSYS_C_TESTS})\n      get_filename_component(test \"${testfile}\" NAME_WE)\n      add_test(kwsys.${test} ${EXEC_DIR}/${KWSYS_NAMESPACE}TestsC ${test} ${KWSYS_TEST_ARGS_${test}})\n      set_property(TEST kwsys.${test} PROPERTY LABELS ${KWSYS_LABELS_TEST})\n    endforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting PROJ Version Information in CMake\nDESCRIPTION: Defines the version information for the PROJ project, including major, minor, and patch versions, as well as API and build versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproj_version(MAJOR 8 MINOR 1 PATCH 0)\nset(PROJ_API_VERSION \"22\")\nset(PROJ_BUILD_VERSION \"23.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory for ExodusIIWriter in CMake\nDESCRIPTION: Declares an object factory for vtkExodusIIWriter, overriding it with vtkPExodusIIWriter. This allows for runtime substitution of classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelExodus/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkExodusIIWriter\n  OVERRIDE  vtkPExodusIIWriter)\n```\n\n----------------------------------------\n\nTITLE: Example WrapJavaGPD.cmake Command Usage\nDESCRIPTION: Shows how to invoke the WrapJavaGPD.cmake script to generate Java bindings for a VTK class. This script is part of the Java wrapping infrastructure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/WrappingTools.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -DCLASS=vtkClass \\\n      -DJAVA_PACKAGE=package.name \\\n      -DOUTPUT_DIR=${output_dir}/Java \\\n      -P ${VTK_SOURCE_DIR}/Wrapping/Tools/WrapJavaGPD.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for OpenGL Rendering\nDESCRIPTION: Configures the VTK object factory mechanism to handle the render window class overrides with appropriate export macros for the RenderingOpenGL2 module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGOPENGL2_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Test Directory Inclusion in CMake\nDESCRIPTION: Conditionally adds the Python test subdirectory if VTK's Python wrapping is enabled. This ensures Python tests are only built when Python support is configured in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK::IOEngys Module with CMake\nDESCRIPTION: This snippet defines the classes for the VTK::IOEngys module, adds the module to the VTK build system, and sets up test mangling. The module contains a single class, vtkBTSReader.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Engys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBTSReader\n  )\n\nvtk_module_add_module(VTK::IOEngys\n        CLASSES ${classes})\n\nvtk_add_test_mangling(VTK::IOEngys)\n```\n\n----------------------------------------\n\nTITLE: HDF5 Collective Metadata Feature Check\nDESCRIPTION: C code to verify HDF5 collective metadata APIs support (HDF5 >= 1.10.0)\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include \"hdf5.h\"\nint main(void)\n{\n   hid_t foo;\n   H5Pset_coll_metadata_write(foo, 1);\n   H5Pset_all_coll_metadata_ops(foo, 1);\n   return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless OpenGL Render Window in VTK\nDESCRIPTION: Sets up the headless OpenGL render window implementation as a fallback when either headless mode is explicitly enabled or no platform-specific override has been configured.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_DEFAULT_RENDER_WINDOW_HEADLESS OR NOT has_vtkRenderWindow_override)\n  vtk_object_factory_declare(\n    BASE vtkRenderWindow\n    OVERRIDE vtkOSOpenGLRenderWindow)\nendif ()\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing Tetrahedron Cell Building in Ensight Reader\nDESCRIPTION: Improves performance by using specialized cell insertion method for tetrahedron cells and reading connectivity data in a single block instead of cell-by-cell approach\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/ensight-reader-improvements.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Use specific vtkUnstructuredGrid::InsertNextCell for tetrahedron cells\n// Read tetrahedron cell connectivity as a single block\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering Qt C++ Tests in CMake\nDESCRIPTION: This CMake code snippet sets up C++ tests for the VTK Rendering Qt module. It adds a test named 'vtkRenderingQtCxxTests' with the 'TestQtInitialization.cxx' file, and creates a test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingQtCxxTests tests\n  NO_VALID\n  TestQtInitialization.cxx\n  )\n\nvtk_test_cxx_executable(vtkRenderingQtCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOInfovis Module Classes\nDESCRIPTION: Defines two sets of classes for the VTK IOInfovis module - public classes for various file format readers/writers and private classes for internal implementation. The configuration includes readers for formats like BIOM, Chaco, DIMACS, delimited text, and tree formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Infovis/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBiomTableReader\n  vtkChacoGraphReader\n  vtkDelimitedTextReader\n  vtkDIMACSGraphReader\n  vtkDIMACSGraphWriter\n  vtkFixedWidthTextReader\n  vtkISIReader\n  vtkMultiNewickTreeReader\n  vtkNewickTreeReader\n  vtkNewickTreeWriter\n  vtkPhyloXMLTreeReader\n  vtkPhyloXMLTreeWriter\n  vtkRISReader\n  vtkTemporalDelimitedTextReader\n  vtkTulipReader\n  vtkXGMLReader\n  vtkXMLTreeReader)\n\nset(private_classes\n  vtkDelimitedTextCodecIteratorPrivate)\n\nvtk_module_add_module(VTK::IOInfovis\n  PRIVATE_CLASSES ${private_classes}\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOInfovis)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for Reeb Graph Filters - CMake\nDESCRIPTION: This snippet defines a set of classes that are part of the VTK Filters Reeb Graph module. These classes will be used for creating various Reeb Graph filters, which are essential for topology simplification and surface representation. The variable 'classes' holds the list of these filter classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ReebGraph/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkReebGraphSimplificationFilter\n  vtkReebGraphSurfaceSkeletonFilter\n  vtkReebGraphToJoinSplitTreeFilter\n  vtkReebGraphVolumeSkeletonFilter\n  vtkUnstructuredGridToReebGraphFilter)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Tests Directory Addition\nDESCRIPTION: Adds the C++ tests directory if C++ testing is not disabled in the VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Block End\nDESCRIPTION: This snippet closes a conditional block in CMake using the `endif()` command. This block likely encompasses the status message outputs, allowing the build process to handle different scenarios based on the availability of specific features.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"endif ()\"\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring VTK Dependencies\nDESCRIPTION: Locates required VTK components and handles package finding logic. Includes core VTK modules, filters, IO components, and rendering modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Medical/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    CommonDataModel\n    CommonTransforms\n    FiltersCore\n    FiltersGeneral\n    FiltersGeometry\n    FiltersModeling\n    IOImage\n    IOXML\n    ImagingCore\n    ImagingStatistics\n    InteractionStyle\n    RenderingCore\n    RenderingVolume\n    RenderingOpenGL2\n    RenderingVolumeOpenGL2\n  OPTIONAL_COMPONENTS\n    TestingCore\n    TestingRendering)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File for VTK PugiXML\nDESCRIPTION: This snippet configures the header file for the PugiXML library specific to the VTK project, taking a template file and generating the actual header file in the build directory. It allows customization of the headers used within the VTK build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_pugixml.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_pugixml.h\")\n```\n\n----------------------------------------\n\nTITLE: Microsoft Media Foundation Support Option\nDESCRIPTION: Configures a CMake option for Microsoft Media Foundation support, with compile-time detection and error handling for Windows platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(VTK_USE_MICROSOFT_MEDIA_FOUNDATION \"Enable using Microsoft Media Foundation (mfreadwrite) for video input and output.\" OFF\n  WIN32 OFF)\nmark_as_advanced(VTK_USE_MICROSOFT_MEDIA_FOUNDATION)\n```\n\n----------------------------------------\n\nTITLE: vtkInteractorEventRecorder::ReadEvent Update\nDESCRIPTION: The `vtkInteractorEventRecorder::ReadEvent()` method has been updated to accept a string argument: `ReadEvent(const std::string&)`. This likely involves providing the event data as a string, instead of another format.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configuring VTK Parallel DIY MPI Tests\nDESCRIPTION: Configures and adds test cases for VTK's Parallel DIY module when MPI support is available. Sets up multiple test executables and configures MPI-specific test parameters including process count.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/DIY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  vtk_add_test_cxx(vtkParallelDIYCxxTests-MPI tests\n    TestDIYDataArraySerialization.cxx,NO_DATA NO_VALID)\n\n  vtk_test_cxx_executable(vtkParallelDIYCxxTests tests)\n\n  set(vtkParallelDIYCxxTests-MPI_NUMPROCS 3)\n  vtk_add_test_mpi(vtkParallelDIYCxxTests-MPI tests\n    NO_DATA\n    TestDIYDataExchanger.cxx\n    TestDIYUtilities.cxx)\n\n  vtk_test_cxx_executable(vtkParallelDIYCxxTests-MPI tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Automatic Initialization of VTK Modules for the Target\nDESCRIPTION: This snippet uses vtk_module_autoinit to automatically initialize VTK modules for the LabeledMesh target. It simplifies the initialization process by linking the specified VTK libraries with the target.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Annotation/Cxx/LabeledMesh/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS LabeledMesh\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI-based VTK Filters Parallel CXX Tests\nDESCRIPTION: Sets up MPI-based parallel C++ tests for VTK Filters Parallel module when VTK::ParallelMPI is available. It configures tests with 2 and 4 MPI processes, including tests with and without data dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  set(vtkFiltersParallelCxxTests-MPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkFiltersParallelCxxTests-MPI tests\n    TESTING_DATA\n    DistributedData.cxx\n    DistributedDataRenderPass.cxx\n    PTextureMapToSphere.cxx\n    TestPHyperTreeGridProbeFilter.cxx\n    TestPExtractDataArraysOverTime.cxx,NO_VALID\n    TestPartitionBalancer.cxx,NO_VALID\n    TransmitImageData.cxx\n    TransmitImageDataRenderPass.cxx\n    TransmitRectilinearGrid.cxx\n    TransmitStructuredGrid.cxx\n    )\n  vtk_add_test_mpi(vtkFiltersParallelCxxTests-MPI no_data_tests\n    ParallelResampling.cxx\n    UnitTestPMaskPoints.cxx\n    TestGenerateProcessIds.cxx,NO_VALID\n    TestGenerateProcessIdsHTG.cxx,NO_VALID\n    TestPAxisAlignedReflectionFilter.cxx,NO_VALID\n    TestPOutlineFilter.cxx,NO_VALID\n    )\n\n  # We want 4 processes to test the vtkAggregateDataSetFilter\n  # and vtkHyperTreeGridGhostCellsGenerator properly\n  set(vtkFiltersParallelCxxTests-MPI_NUMPROCS 4)\n  vtk_add_test_mpi(vtkFiltersParallelCxxTests-MPI no_data_tests_4_procs\n    AggregateDataSet.cxx\n    TestGenerateGlobalIdsHTG.cxx,NO_VALID\n  )\n  vtk_add_test_mpi(vtkFiltersParallelCxxTests-MPI tests_4_procs\n    TESTING_DATA\n    TestHyperTreeGridGhostCellsGenerator.cxx,NO_VALID\n  )\n\n\n  set(all_tests\n    ${tests}\n    ${no_data_tests}\n    ${no_data_tests_4_procs}\n    ${tests_4_procs}\n    )\n  vtk_test_cxx_executable(vtkFiltersParallelCxxTests-MPI all_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP Reader with 8-bit Restriction Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK BMP reader with 8-bit restriction functionality using a masonry image sample.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestBMPReaderDoNotAllow8BitBMP.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/masonry.bmp}\")\n```\n\n----------------------------------------\n\nTITLE: Deprecation of vtkPolygon::Triangulate and vtkQuadraticPolygon::Triangulate\nDESCRIPTION: Marks the vtkPolygon::Triangulate and vtkQuadraticPolygon::Triangulate methods as deprecated, steering users towards new implementations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nvoid vtkPolygon::Triangulate(/* parameters */) {\n    // Deprecated implementation\n}\n\nvoid vtkQuadraticPolygon::Triangulate(/* parameters */) {\n    // Deprecated implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Imaging OpenGL2 C++ Tests with CMake\nDESCRIPTION: This CMake snippet adds a C++ test for the VTK Imaging OpenGL2 module and creates an executable for running the tests with rendering factory support. It specifically includes the TestOpenGLImageGradient.cxx test file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkImagingOpenGL2CxxTests tests\n  TestOpenGLImageGradient.cxx\n  )\n\nvtk_test_cxx_executable(vtkImagingOpenGL2CxxTests tests RENDERING_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Integrating Expat with CMake Find_Package Module Mode\nDESCRIPTION: Example showing how to use CMake's FindEXPAT module to include Expat library in a project. Uses uppercase EXPAT and requires CMake 3.10+.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nproject(hello VERSION 1.0.0)\n\nfind_package(EXPAT 2.2.8 MODULE REQUIRED)\n\nadd_executable(hello\n    hello.c\n)\n\ntarget_link_libraries(hello PUBLIC EXPAT::EXPAT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Render Window Backend VTK C++\nDESCRIPTION: This C++ code snippet demonstrates how to use vtkWebGPURenderWindow to set a preferred graphics backend at runtime for different operating systems with options like D3D11, D3D12, OpenGL, etc. This requires the VTK library and assumes the availability of the relevant backend on the system. This configuration ensures the render window uses the desired backend when rendering content. The inputs are backend types chosen via method calls, and output is the rendered window utilizing the selected backend.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-graphics-backend-preference-for-webgpu-rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkNew<vtkRenderWindow> renWin\n// requests webgpu implementation for a D3D12 backend\nrenderWindow->SetBackendTypeToD3D12();\n// Similarly,\n// renderWindow->SetBackendTypeToD3D11();\n// renderWindow->SetBackendTypeToOpenGL();\n// renderWindow->SetBackendTypeToOpenGLES();\n// renderWindow->SetBackendTypeToMetal();\n// renderWindow->SetBackendTypeToVulkan();\n//..\nrenderWindow->Render();\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Subdirectory for C++ Sources\nDESCRIPTION: Instructs CMake to include and process the Cxx subdirectory during the build configuration. This ensures that C++ source files and related build targets in the Cxx directory are compiled and integrated into the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Template-Based SafeDownCast Implementation\nDESCRIPTION: Demonstrates a templated implementation using SafeDownCast, which cannot take advantage of FastDownCast optimizations due to not all array types supporting it.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename ArrayType>\nvoid DoSomeAction(vtkAbstractArray *array)\n{\n  ArrayType *myArray = ArrayType::SafeDownCast(array);\n  if (myArray)\n    {\n    // ... (do work with myArray)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring VTK Library Target\nDESCRIPTION: Sets up a library target that uses VTK, configuring its link dependencies, include directories, and generating export headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/UsingVTK/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(vtk_using_lib uses_vtk.cxx)\ntarget_link_libraries(vtk_using_lib PRIVATE VTK::CommonCore VTK::CommonDataModel)\ntarget_include_directories(vtk_using_lib PUBLIC \"${CMAKE_CURRENT_BINARY_DIR}\")\ninclude(GenerateExportHeader)\ngenerate_export_header(vtk_using_lib)\n```\n\n----------------------------------------\n\nTITLE: Defining Point Coordinates in VTK XML\nDESCRIPTION: XML structure for defining point coordinates in VTK parallel formats using PPoints element.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<PPoints>\n      <PDataArray NumberOfComponents=\"3\" .../>\n    </PPoints>\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring VTK H5Part Module\nDESCRIPTION: Sets up the VTK H5Part module with source files and headers, configuring include directories and module properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/vtkh5part/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::h5part\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkh5part\")\nvtk_module_include(VTK::h5part\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/src>\")\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Subdirectory Inclusion in CMake\nDESCRIPTION: This snippet conditionally includes the `Cxx` subdirectory if the variable `vtk_testing_cxx_disabled` is not set (or is false). This allows disabling C++ tests based on a configuration option.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CellGrid Tests in CMake\nDESCRIPTION: Configures C++ test cases for the VTK CellGrid IO module. Sets up two test files (TestCellGridReadWrite.cxx and TestCellGridInheritance.cxx) without validation requirements and creates the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CellGrid/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOCellGridCxxTests tests\n  TestCellGridReadWrite.cxx,NO_VALID\n  TestCellGridInheritance.cxx,NO_VALID\n)\nvtk_test_cxx_executable(vtkIOCellGridCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Resources\nDESCRIPTION: Defines source files, UI files, headers, and resource files for the CustomLinkView application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CustomLinkView/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Srcs\n  CustomLinkView.cxx\n  main.cxx)\nset(UIs\n  CustomLinkView.ui)\nset(Hdrs\n  CustomLinkView.h)\nset(Rcs\n  Icons/icons.qrc)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenXR Test Files in CMake for VTK\nDESCRIPTION: Defines a list of OpenXR test files. It includes a base test and conditionally adds runtime and interactive tests based on the previously defined options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(openxr_tests\n  TestOpenXRInstantiation.cxx,NO_VALID)\n\nif (VTK_OPENXR_TESTING_ENABLE_RUNTIME_TESTS)\n  list (APPEND openxr_tests\n    TestOpenXRInitialization.cxx,NO_VALID\n    TestOpenXRRendering.cxx\n    TestOpenXRRenderingVolume.cxx)\nendif ()\n\nif (VTK_OPENXR_TESTING_ENABLE_INTERACTIVE_TESTS)\n  list (APPEND openxr_tests\n    TestOpenXRInteractiveBox.cxx,NO_VALID\n    TestOpenXRInteractiveDragon.cxx,NO_VALID)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Volume Rendering Test Files in CMake\nDESCRIPTION: Defines a list of C++ test files that are part of the volume rendering suite and adds them to the VTK test suite using CMake. It establishes dependencies required to run the GPU ray-casting tests with specific configurations related to volume rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset (VolumeOpenGL2CxxTests\n  TestGPURayCastCellData.cxx\n  TestGPURayCastChangedArray.cxx\n  TestGPURayCastDepthPeeling.cxx\n  TestGPURayCastDepthPeelingBoxWidget.cxx\n  TestGPURayCastDepthPeelingBlendModes.cxx\n  TestGPURayCastDepthPeelingClip.cxx\n  TestGPURayCastDepthPeelingOpaque.cxx\n  TestGPURayCastDepthPeelingTransVol.cxx\n  TestGPURayCastDepthPeelingTransparentPolyData.cxx\n  TestGPURayCastIsosurface.cxx\n  TestGPURayCastJittering.cxx\n  TestGPURayCastModelTransformMatrix.cxx\n  TestGPURayCastMultiVolumeClipping.cxx\n  TestGPURayCastSlicePlane.cxx\n  TestGPURayCastSSAO.cxx\n  TestGPURayCastTextureStreaming.cxx\n  TestGPURayCastTextureStreamingMask.cxx\n  TestGPURayCastToggleJittering.cxx\n  TestGPURayCastUserShader.cxx\n  TestGPURayCastUserShader2.cxx\n  TestSurfaceProbeVolumeMapper.cxx\n  )\n\n# everyone gets these tests\nvtk_add_test_cxx(vtkRenderingVolumeOpenGL2CxxTests tests\n  ${VolumeOpenGL2CxxTests}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This snippet sets the minimum required version for CMake and handles specific CMake policies based on the version being used.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles versions.\ncmake_minimum_required(VERSION 3.20)\nif(COMMAND cmake_policy)\n  cmake_policy(SET CMP0003 NEW)\nendif()\n\nif (${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.10\")\n  cmake_policy(SET CMP0015 NEW)\nendif()\nif (${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.13\")\n  cmake_policy(SET CMP0081 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CGNS Library Output Names and Properties in CMake\nDESCRIPTION: Sets the output name and properties for the CGNS static and shared libraries. It handles different naming conventions for Windows and sets version numbers for both library types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(cgns_static PROPERTIES OUTPUT_NAME cgns)\nset_target_properties(cgns_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)\nif(CGNS_BUILD_SHARED)\n  if (CMAKE_STATIC_LIBRARY_SUFFIX STREQUAL CMAKE_IMPORT_LIBRARY_SUFFIX)\n    set_target_properties(cgns_shared PROPERTIES OUTPUT_NAME cgnsdll)\n  else ()\n    set_target_properties(cgns_shared PROPERTIES OUTPUT_NAME cgns)\n  endif ()\n  set_target_properties(cgns_shared PROPERTIES CLEAN_DIRECT_OUTPUT 1)\nendif()\n\nset_target_properties(cgns_static PROPERTIES VERSION \"${CGNS_VERSION}\")\nset_target_properties(cgns_static PROPERTIES SOVERSION \"${CGNS_VERSION}\")\n\nif(CGNS_BUILD_SHARED)\n  set_target_properties(cgns_shared PROPERTIES VERSION \"${CGNS_VERSION}\")\n  set_target_properties(cgns_shared PROPERTIES SOVERSION \"${CGNS_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Expat Compiler Flags and Definitions\nDESCRIPTION: Configures compiler flags and definitions for building Expat, including visibility settings, warnings as errors, and platform-specific options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTRA_COMPILE_FLAGS)\nif(FLAG_NO_STRICT_ALIASING)\n    set(EXTRA_COMPILE_FLAGS \"${EXTRA_COMPILE_FLAGS} -fno-strict-aliasing\")\nendif()\nif(FLAG_VISIBILITY)\n  if(EXPAT_SHARED_LIBS)\n     add_definitions(-DXML_ENABLE_VISIBILITY=1)\n  endif()\n  set(EXTRA_COMPILE_FLAGS \"${EXTRA_COMPILE_FLAGS} -fvisibility=hidden\")\nendif()\nif(MINGW AND (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\"))\n    # Without __USE_MINGW_ANSI_STDIO the compiler produces a false positive\n    set(EXTRA_COMPILE_FLAGS \"${EXTRA_COMPILE_FLAGS} -Wno-pedantic-ms-format\")\nendif()\nif (EXPAT_WARNINGS_AS_ERRORS)\n    if(MSVC)\n        add_definitions(/WX)\n    else()\n        set(EXTRA_COMPILE_FLAGS \"${EXTRA_COMPILE_FLAGS} -Werror\")\n        if(MINGW)\n            # To avoid \"error: unknown conversion type character 'l' in format [-Werror=format=]\"\n            set(EXTRA_COMPILE_FLAGS \"${EXTRA_COMPILE_FLAGS} -Wno-format\")\n        endif()\n    endif()\nendif()\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${EXTRA_COMPILE_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${EXTRA_COMPILE_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering Image C++ Tests\nDESCRIPTION: Defines a set of C++ test cases for VTK's image rendering functionality using CMake. Includes tests for cell picking, slice mapping with alpha channels, background handling, interpolation, orientation, and image stack operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingImageCxxTests tests\n  TestCellPickerImage.cxx\n  TestImageSliceMapperAlpha.cxx\n  TestImageResliceMapperAlpha.cxx\n  TestImageSliceMapperBackground.cxx\n  TestImageResliceMapperBackground.cxx\n  TestImageSliceMapperBorder.cxx\n  TestImageResliceMapperBorder.cxx\n  TestImageSliceMapperInterpolation.cxx\n  TestImageResliceMapperInterpolation.cxx\n  TestImageSliceMapperOrient2D.cxx\n  TestImageResliceMapperOffAxis.cxx\n  TestImageSliceMapperOrient3D.cxx\n  TestImageSliceMapperOriented3D.cxx\n  TestImageResliceMapperOrient3D.cxx\n  TestImageResliceMapperOriented3D.cxx\n  TestImageResliceMapperOrientedFlip.cxx\n  TestImageStack.cxx\n  TestImageResliceMapperSlab.cxx\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingImageCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Inclusion\nDESCRIPTION: This CMake block conditionally adds the 'Python' subdirectory based on the 'VTK_WRAP_PYTHON' variable. If 'VTK_WRAP_PYTHON' is enabled, the 'Python' subdirectory, presumably containing Python wrapping related code, is included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Test Configuration Setup\nDESCRIPTION: Configures special test execution parameters for WebAssembly (Emscripten) environment, setting up the Python runner and test engine configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(_vtk_test_cxx_wasm_enabled_in_browser ON)\n  set(_vtk_test_cxx_pre_args\n    \"$<TARGET_FILE:Python3::Interpreter>\"\n    \"${VTK_SOURCE_DIR}/Testing/WebAssembly/runner.py\"\n    \"--engine=${VTK_TESTING_WASM_ENGINE}\"\n    \"--exit\")\nelse ()\n  set(_vtk_test_cxx_pre_args)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Combining All Test Cases for VTK Filters Parallel Geometry\nDESCRIPTION: Creates a list of all test cases by combining the main tests, single-process tests, and four-process tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${data_tests_1_proc}\n  ${data_tests_4_procs}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for VTK::IOMySQL\nDESCRIPTION: This snippet defines a list of source files that are part of the VTK::IOMySQL module.  `vtkIOMySQL_AutoInit.cxx` likely contains auto-initialization code required for the module. The `set` command assigns the source file name to the `sources` variable, which is used by `vtk_module_add_module`.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  vtkIOMySQL_AutoInit.cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK Filters Reeb Graph - CMake\nDESCRIPTION: This snippet adds test mangling for the VTK Filters Reeb Graph module. It prepares the module for testing by ensuring symbols are uniquely identified during any testing phase.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ReebGraph/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersReebGraph)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Local Vector Size in ExprTk (C++)\nDESCRIPTION: Shows how to set the maximum size for local vectors in ExprTk expressions and demonstrates successful and failed compilations based on the limit.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\nparser_t parser;\n\nparser.settings().set_max_local_vector_size(1000000);\n\nstd::string expression1 = \"var v[1e6] := [123]\";\nstd::string expression2 = \"var v[1e9] := [123]\";\n\nexpression_t expression;\n\nparser.compile(expression1, expression); // compilation success\nparser.compile(expression2, expression); // compilation error\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Classes in CMake\nDESCRIPTION: This CMake snippet configures a list of SQL-related classes and a private header for the VTK::IOSQL module. It utilizes 'vtk_module_add_module' to register the classes and 'vtk_add_test_mangling' for testing purposes. The snippet is used to set up the module attributes for building within the VTK system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SQL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\\n  vtkDatabaseToTableReader\\n  vtkRowQuery\\n  vtkRowQueryToTable\\n  vtkSQLDatabase\\n  #vtkSQLDatabaseGraphSource\\n  vtkSQLDatabaseSchema\\n  vtkSQLDatabaseTableSource\\n  #vtkSQLGraphReader\\n  vtkSQLiteDatabase\\n  vtkSQLiteQuery\\n  vtkSQLiteToTableReader\\n  vtkSQLQuery\\n  vtkTableToDatabaseWriter\\n  vtkTableToSQLiteWriter)\\n\\nset(private_headers\\n  vtkSQLiteDatabaseInternals.h)\\n\\nvtk_module_add_module(VTK::IOSQL\\n  CLASSES ${classes}\\n  PRIVATE_HEADERS ${private_headers})\\nvtk_add_test_mangling(VTK::IOSQL)\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationIdTypeKey in VTK XML\nDESCRIPTION: Demonstrates the XML structure for defining a vtkInformationIdTypeKey with a single IdType value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"IdType\" location=\"XMLTestKey\">\n  5\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: VTK Legacy Metadata Block Structure\nDESCRIPTION: Examples of different information key types in a VTK Legacy metadata block. Includes DoubleKey, DoubleVectorKey, IdTypeKey, StringKey, IntegerKey, IntegerVectorKey, StringVectorKey, and UnsignedLongKey.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOLegacyInformationFormat.md#2025-04-21_snippet_1\n\nLANGUAGE: vtk\nCODE:\n```\nNAME Double LOCATION TestKey\nDATA 1\n\nNAME DoubleVector LOCATION TestKey\nDATA 3 1 90 260\n\nNAME IdType LOCATION TestKey\nDATA 5\n\nNAME String LOCATION TestKey\nDATA Test%20String!%0ALine2\n\nNAME Integer LOCATION TestKey\nDATA 408\n\nNAME IntegerVector LOCATION TestKey\nDATA 3 1 5 45\n\nNAME StringVector LOCATION TestKey\nDATA 3\nFirst\nSecond%20(with%20whitespace!)\nThird%20(with%0Anewline!)\n\nNAME UnsignedLong LOCATION TestKey\nDATA 9\n```\n\n----------------------------------------\n\nTITLE: Building Optional SQLite Executable\nDESCRIPTION: Conditionally builds the SQLite shell executable with proper linking to the SQLite library. Includes special handling for Emscripten builds with configuration for file system access and memory management.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (vtk_sqlite_build_binary)\n  vtk_module_add_executable(sqlitebin\n    NO_INSTALL\n    shell.c)\n  add_executable(VTK::sqlitebin ALIAS sqlitebin)\n  target_link_libraries(sqlitebin\n    PRIVATE\n      VTK::sqlite)\n    if (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n      # allows sqlitebin to access host file system for generating proj.db etc.\n      # permit memory growth to generate arbitrary sized files.\n      # set EXIT_RUNTIME=1 so that stdout is flushed on exit.\n      target_link_options(sqlitebin\n        PRIVATE\n          \"-sALLOW_MEMORY_GROWTH=1\"\n          \"-sNODERAWFS=1\"\n          \"-sEXIT_RUNTIME=1\")\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Generic Filters Module Classes\nDESCRIPTION: Defines a list of VTK generic filter classes that are part of the FiltersGeneric module. These classes handle operations like clipping, contouring, cutting, and geometry filtering for generic datasets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkGenericClip\n  vtkGenericContourFilter\n  vtkGenericCutter\n  vtkGenericDataSetTessellator\n  vtkGenericGeometryFilter\n  vtkGenericGlyph3DFilter\n  vtkGenericOutlineFilter\n  vtkGenericProbeFilter\n  vtkGenericStreamTracer)\n```\n\n----------------------------------------\n\nTITLE: VTK CommonMisc Module Addition\nDESCRIPTION: Adds the VTK CommonMisc module with the specified classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::CommonMisc\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and SWIG Wrappers for Xdmf in CMake\nDESCRIPTION: Sets up Python and SWIG-related configurations for building Python wrappers. Includes a macro for creating SWIG Python modules with special handling for different platforms and optional DSM support.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# If we are wrapping either, we need swig\nif(XDMF_WRAP_PYTHON OR XDMF_WRAP_JAVA)\n  find_package(SWIG 2.0.0 REQUIRED)\n  include(${SWIG_USE_FILE})\nendif()\n\n# If we are wrapping python, let's include it in the top level\nif(XDMF_WRAP_PYTHON)\n  find_package(PythonInterp ${REQUESTED_PYTHON_VERSION} REQUIRED)\n  find_package(PythonLibs ${REQUESTED_PYTHON_VERSION} REQUIRED)\n  if (XDMF_BUILD_DSM)\n    find_package (MPI4PY REQUIRED)\n    if (MPI4PY_FOUND)\n      if (\"${PYTHON_INCLUDE_MPI4PY_DIR}\" STREQUAL \"\")\n        set(PYTHON_INCLUDE_MPI4PY_DIR ${MPI4PY_INCLUDE_DIR})\n      endif ()\n    endif ()\n    include_directories(${PYTHON_INCLUDE_DIRS} ${MPI_CXX_INCLUDE_PATH} ${PYTHON_INCLUDE_MPI4PY_DIR})\n  else ()\n    include_directories(${PYTHON_INCLUDE_DIRS})\n  endif ()\n\n  # A macro to swig and create the python files\n  # Since we essentually do the same thing inside and outside core, it\n  # would be easier as a macro\n  # Parameters:\n  #     python_name = the name of the intended target to be wrapped\n  #     ${ARGN} = any dependencies needed by the target\n  # Output:\n  #     Target Name = the output target name will have ${python_name} as its name\n  macro(XDMF_SWIG_PYTHON python_name)\n    set(CMAKE_SWIG_OUTDIR ${CMAKE_BINARY_DIR})\n    # optimize swig generation --- these are all flags corresponding to -O\n    # except -fvirtual which breaks visitor operation\n    set(CMAKE_SWIG_FLAGS ${XDMF_SWIG_FLAGS} -modern -fastdispatch -nosafecstrings -noproxydel -fastproxy -fastinit -fastunpack -fastquery -modernargs -nobuildnone)\n    #Enables DSM\n    if (XDMF_BUILD_DSM)\n      set(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} -DXDMF_BUILD_DSM)\n      if (XDMF_BUILD_DSM_THREADS)\n        set(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} -DXDMF_BUILD_DSM_THREADS)\n      endif ()\n    endif ()\n    if (TIFF_FOUND)\n      set(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} -DXDMF_BUILD_TIFF)\n    endif ()\n    set_source_files_properties(${python_name}.i PROPERTIES CPLUSPLUS ON)\n    set(swig_extra_generated_files \"\")\n    swig_add_module(${python_name}Python python ${python_name}.i)\n\n    if (NOT APPLE)\n      swig_link_libraries(${python_name}Python ${python_name} ${PYTHON_LIBRARIES})\n    else ()\n      swig_link_libraries(${python_name}Python ${python_name})\n    endif ()\n\n    set_property(DIRECTORY APPEND PROPERTY\n      ADDITIONAL_MAKE_CLEAN_FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/${python_name}.pyc\n    )\n\n    if(\"${ARGN}\" STRGREATER \"\")\n      add_dependencies(${python_name} \"${ARGN}\")\n    endif()\n\n    if(APPLE)\n      set_target_properties(${SWIG_MODULE_${python_name}Python_REAL_NAME}\n        PROPERTIES\n        LINK_FLAGS \"-undefined dynamic_lookup\")\n    endif()\n\n    set_target_properties(${SWIG_MODULE_${python_name}Python_REAL_NAME}\n      PROPERTIES\n      OUTPUT_NAME \"_${python_name}\")\n\n    set(\n      PYTHON_INSTALL_DIR\n      ${CMAKE_INSTALL_PREFIX}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/xdmf\n      )\n\n    string(TOUPPER ${python_name} python_name_upper)\n    set(${python_name_upper}_PYTHON\n      ${PYTHON_INSTALL_DIR}/${python_name}.py)\n    get_directory_property(${python_name}Parent PARENT_DIRECTORY)\n    if(NOT \"${${python_name}Parent}\" STREQUAL \"\")\n      set(${python_name_upper}_PYTHON ${${python_name_upper}_PYTHON}\n        PARENT_SCOPE)\n    endif()\n\n    install(FILES ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${python_name}.py\n      DESTINATION ${PYTHON_INSTALL_DIR})\n    install(TARGETS ${SWIG_MODULE_${python_name}Python_REAL_NAME}\n      DESTINATION ${PYTHON_INSTALL_DIR})\n  endmacro()\nendif()\n```\n\n----------------------------------------\n\nTITLE: VTK Dependency Resolution Method\nDESCRIPTION: Method reference for retrieving dependent object identifiers in the VTK object hierarchy.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/object_manager.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nvtkObjectManager::GetAllDependencies(identifier)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File for CLI11\nDESCRIPTION: This snippet creates a configuration header file for the CLI11 library in VTK. It utilizes the CMake command to configure a template header file based on the current source directory, ensuring that the build process has the necessary definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_cli11_external.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_cli11_external.h\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK Module in CMake\nDESCRIPTION: This snippet sets up the VTK IOIOSS module by specifying public and private classes, as well as private headers. Dependencies include VTK's CMake functions and any referenced class implementations. It prepares the module for building and includes a mangling test to prevent symbol collisions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkIOSSReader\n  vtkIOSSCellGridReader\n  vtkIOSSWriter\n)\n\nset(private_classes\n  vtkIOSSCellGridReaderInternal\n  vtkIOSSCellGridUtilities\n  vtkIOSSFilesScanner\n  vtkIOSSUtilities\n  vtkIOSSModel\n  vtkIOSSReaderInternal\n)\n\nset(private_headers\n  vtkIOSSReaderCommunication.h\n)\n\nvtk_module_add_module(VTK::IOIOSS\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  PRIVATE_HEADERS ${private_headers}\n)\nvtk_add_test_mangling(VTK::IOIOSS)\n```\n\n----------------------------------------\n\nTITLE: Configuring C Compiler Features for KWSys\nDESCRIPTION: Checks for the availability of ptrdiff_t, ssize_t, and clock_gettime in the C compiler. Sets compile flags for ProcessUNIX.c and System.c based on the results.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nKWSYS_PLATFORM_C_TEST(KWSYS_C_HAS_PTRDIFF_T\n  \"Checking whether C compiler has ptrdiff_t in stddef.h\" DIRECT)\nKWSYS_PLATFORM_C_TEST(KWSYS_C_HAS_SSIZE_T\n  \"Checking whether C compiler has ssize_t in unistd.h\" DIRECT)\nif(KWSYS_USE_Process)\n  KWSYS_PLATFORM_C_TEST(KWSYS_C_HAS_CLOCK_GETTIME_MONOTONIC\n    \"Checking whether C compiler has clock_gettime\" DIRECT)\nendif()\n\nset_source_files_properties(ProcessUNIX.c System.c PROPERTIES\n  COMPILE_FLAGS \"-DKWSYS_C_HAS_PTRDIFF_T=${KWSYS_C_HAS_PTRDIFF_T} -DKWSYS_C_HAS_SSIZE_T=${KWSYS_C_HAS_SSIZE_T} -DKWSYS_C_HAS_CLOCK_GETTIME_MONOTONIC=${KWSYS_C_HAS_CLOCK_GETTIME_MONOTONIC}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Test Directories in CMake\nDESCRIPTION: This CMake script registers test data files for the VTK module and sets up conditional inclusion of test subdirectories. It first registers several VTU files for testing, then conditionally includes C++ tests if enabled, and finally adds Python-specific test data and subdirectory if Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/degenerated-hexahedrons.vtu\n  Data/explicitStructuredGrid.vtu\n  Data/ghost_cells.vtu\n  Data/quadraticTetra01.vtu\n  Data/quadratic_tets_with_ghost_cells_0.vtu)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/RectGrid2.vtk\n    Data/combq.bin\n    Data/combxyz.bin\n    Data/office.binary.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building VTK with Testing Enabled\nDESCRIPTION: These commands demonstrate how to configure and build VTK with testing enabled using CMake. Enabling testing allows developers to run the VTK test suite to ensure the library is functioning correctly. The build is configured in Release mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\nVTK-build > cmake -DVTK_BUILD_TESTING:BOOL=ON path/to/VTK\nVTK-build > cmake --build . --config \"Release\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ABI Namespace Options for VTK in CMake\nDESCRIPTION: Sets up CMake cache variables for VTK's ABI (Application Binary Interface) namespace name and attributes. These options allow for symbol mangling in VTK. The code also includes logic to set default values and validate the namespace name.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(VTK_ABI_NAMESPACE_NAME\n  \"<DEFAULT>\"\n  CACHE STRING \"Inline namespace name for mangling VTK symbols.\")\nmark_as_advanced(VTK_ABI_NAMESPACE_NAME)\nset(VTK_ABI_NAMESPACE_ATTRIBUTES\n  \"<DEFAULT>\"\n  CACHE STRING \"Inline namespace attributes for mangling VTK symbols.\")\nmark_as_advanced(VTK_ABI_NAMESPACE_ATTRIBUTES)\n\nif (VTK_ABI_NAMESPACE_NAME STREQUAL \"<DEFAULT>\")\n  set(VTK_ABI_NAMESPACE_NAME \"\")\nendif ()\nset_property(GLOBAL PROPERTY _vtk_abi_namespace_name \"${VTK_ABI_NAMESPACE_NAME}\")\n\nif (VTK_ABI_NAMESPACE_ATTRIBUTES STREQUAL \"<DEFAULT>\")\n  set(VTK_ABI_NAMESPACE_ATTRIBUTES \"\")\nendif()\nset_property(GLOBAL PROPERTY _vtk_abi_namespace_attributes \"${VTK_ABI_NAMESPACE_ATTRIBUTES}\")\n\nif (VTK_ABI_NAMESPACE_NAME STREQUAL \"\")\n  set(VTK_HAS_ABI_NAMESPACE OFF)\n  set(VTK_ABI_NAMESPACE_BEGIN \"\")\n  set(VTK_ABI_NAMESPACE_END \"\")\nelse ()\n  message(STATUS \"VTK ABI namespace: ${VTK_ABI_NAMESPACE_NAME}\")\n  set(_vtk_abi_namespace_name_regex \"^[a-zA-Z0-9_]+$\")\n  if (NOT VTK_ABI_NAMESPACE_NAME MATCHES \"${_vtk_abi_namespace_name_regex}\")\n    message(FATAL_ERROR\n      \"The configured VTK_ABI_NAMESPACE_NAME='${VTK_ABI_NAMESPACE_NAME}' is \"\n      \"not supported, it must match the regular expression \"\n      \"'${_vtk_abi_namespace_name_regex}'.  To add things like attributes, \"\n      \"configure VTK with -DVTK_ABI_NAMESPACE_ATTRIBUTES='\"\n      \"__attribute__((visibility(\\\"hidden\\\")))'.\")  endif()\n  unset(_vtk_abi_namespace_name_regex)\n  set(VTK_HAS_ABI_NAMESPACE ON)\n  set(VTK_ABI_NAMESPACE_BEGIN \"inline namespace ${VTK_ABI_NAMESPACE_ATTRIBUTES} ${VTK_ABI_NAMESPACE_NAME} {\")\n  set(VTK_ABI_NAMESPACE_END \"}\")\nendif ()\n\nif (VTK_ABI_NAMESPACE_ATTRIBUTES STREQUAL \"\")\n  set(VTK_HAS_ABI_NAMESPACE_ATTRIBUTES OFF)\nelse ()\n  set(VTK_HAS_ABI_NAMESPACE_ATTRIBUTES ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Web Core Module Classes and Tests\nDESCRIPTION: Sets up the VTK Web Core module by defining required classes and adding module configuration with test mangling. The configuration includes core components for web-based visualization and interaction.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkDataEncoder\n  vtkObjectIdMap\n  vtkRemoteInteractionAdapter\n  vtkWebApplication\n  vtkWebInteractionEvent\n  vtkWebUtilities)\n\nvtk_module_add_module(VTK::WebCore\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::WebCore)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 Support for Non-Emscripten Platforms in VTK\nDESCRIPTION: Sets up SDL2 support for non-Emscripten platforms by finding the SDL2 package and linking against it when SDL2 support is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (VTK_USE_SDL2)\n  # VTK_DEPRECATED_IN_9_4_0() Remove when vtkSDL2OpenGLRenderWindow is removed.\n  list(APPEND classes vtkSDL2OpenGLRenderWindow)\n  vtk_module_find_package(PACKAGE SDL2)\n  # PUBLIC because vtkSDL2OpenGLRenderWindow.h includes SDL2.h\n  vtk_module_link(VTK::RenderingUI\n    PUBLIC\n      SDL2::SDL2)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Migrating Process ID Generation in VTK Filters\nDESCRIPTION: Example demonstrating migration from deprecated vtkProcessIdScalars to vtkGenerateProcessIds for generating process ID scalars\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvtkNew<vtkProcessIdScalars> processIdsGenerator;\nprocessIdsGenerator->SetInputConnection(someData->GetOutputPort());\nprocessIdsGenerator->SetScalarModeToCellData();\nprocessIdsGenerator->Update();\n\nvtkDataSet* pidGeneratorOutput = processIdsGenerator->GetOutput();\nvtkIntArray* pidArray = vtkIntArray::SafeDownCast(pidGeneratorOutput->GetCellData()->GetArray(\"ProcessId\"));\n```\n\nLANGUAGE: C++\nCODE:\n```\nvtkNew<vtkGenerateProcessIds> processIdsGenerator;\nprocessIdsGenerator->SetInputConnection(someData->GetOutputPort());\nprocessIdsGenerator->GeneratePointDataOff();\nprocessIdsGenerator->GenerateCellDataOn();\nprocessIdsGenerator->Update();\n\nvtkDataSet* pidGeneratorOutput = processIdsGenerator->GetOutput();\nvtkIdTypeArray* pidArray = vtkIdTypeArray::SafeDownCast(pidGeneratorOutput->GetCellData()->GetProcessIds());\n```\n\n----------------------------------------\n\nTITLE: Combining and Building VTK MPI Test Executable\nDESCRIPTION: Combines all test groups and creates the final test executable including the multi-process controller exercise component.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${no_data_tests}\n  ${2_proc_tests}\n  )\nvtk_test_cxx_executable(vtkParallelMPICxxTests-MPI all_tests\n  ExerciseMultiProcessController.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Emscripten Link Options Configuration\nDESCRIPTION: Sets Emscripten-specific link options such as embind, pthread, memory growth, and exported runtime methods. These options configure the Emscripten environment for proper execution of the application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(emscripten_link_options)\\nlist(APPEND emscripten_link_options\\n  \\\"-lembind\\\"\\n  \\\"-pthread\\\"\\n  # Enable SMP after https://gitlab.kitware.com/vtk/vtk/-/issues/19424 is resolved\\n  #\\\"-sPTHREAD_POOL_SIZE=navigator.hardwareConcurrency\\\"\\n  \\\"-sPTHREAD_POOL_SIZE=1\\\"\\n  \\\"-sALLOW_MEMORY_GROWTH=1\\\"\\n  \\\"-sALLOW_TABLE_GROWTH=1\\\"\\n  \\\"-sEXPORTED_RUNTIME_METHODS=['addFunction', 'ENV']\\\"\\n  \\\"-sOFFSCREENCANVAS_SUPPORT=1\\\"\\n  #\\\"-sASSERTIONS=1\\\"\\n  #\\\"--cpuprofiler\\\"\\n  #\\\"--memoryprofiler\\\"\\n  #\\\"--threadprofiler\\\"\\n  )\\nif (CMAKE_SIZEOF_VOID_P EQUAL \\\"8\\\")\\n  list(APPEND emscripten_link_options\\n    \\\"-sMAXIMUM_MEMORY=16GB\\\")\\nelse ()\\n  list(APPEND emscripten_link_options\\n    \\\"-sMAXIMUM_MEMORY=4GB\\\")\\nendif ()\\nlist(APPEND emscripten_compile_options\\n  \\\"-pthread\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Color C++ Tests\nDESCRIPTION: Registers C++ test files for the VTK Common Color module and creates the test executable. Includes tests for categorical colors, color series, lookup tables, and named colors, with some tests marked as NO_VALID indicating they don't require image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Color/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonColorCxxTests tests\n  TestCategoricalColors.cxx,NO_VALID\n  TestColorSeries.cxx\n  TestColorSeriesLookupTables.cxx,NO_VALID\n  TestNamedColors.cxx,NO_VALID\n  )\nvtk_test_cxx_executable(vtkCommonColorCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Renaming and Generalizing VTK HyperTreeGrid Filter for Field Generation\nDESCRIPTION: This snippet describes the renaming of 'vtkHyperTreeGridVisibleLeavesSize' to 'vtkHyperTreeGridGenerateFields'. The new filter is more generic and allows for easier addition of new fields by inheriting from 'vtkHyperTreeGridGenerateField' and overriding necessary methods.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/htg-generate-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvtkHyperTreeGridVisibleLeavesSize // Deprecated\nvtkHyperTreeGridGenerateFields // New, more generic version\nvtkHyperTreeGridGenerateField // Base class for custom field generation\n```\n\n----------------------------------------\n\nTITLE: Triangulate Function Implementation\nDESCRIPTION: Existing function that returns the triangulated points and global ids. This function is retained for backward compatibility and is crucial for most existing usages, as it provides the necessary points and ids for triangulated cells.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef Triangulate(ids, points):\n    # Implementation for returning triangulated points and global ids\n    pass\n```\n\n----------------------------------------\n\nTITLE: Copying Python Files to Build Directory\nDESCRIPTION: Creates custom commands to copy mpi4py Python files to the build directory for installation\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(python_install_files)\nforeach (python_file IN LISTS python_files)\n  set(output_python_file\n    \"${mpi4py_build_dir}/${python_file}\")\n  add_custom_command(\n    OUTPUT  \"${output_python_file}\"\n    DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/${python_file}\"\n    COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different\n            \"${CMAKE_CURRENT_SOURCE_DIR}/${python_file}\"\n            \"${output_python_file}\"\n    COMMENT \"Copying ${python_file} to the binary directory\")\n  list(APPEND python_install_files\n    \"${output_python_file}\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: New vtkPlotPoints::GetNearestPoint Method Signature in C++\nDESCRIPTION: The updated method signature for vtkPlotPoints::GetNearestPoint which now includes an additional optional segmentId parameter. This change maintains backward compatibility when VTK_LEGACY_REMOVE is OFF.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/dev/changes_8.3/GetNearestPoint.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvtkPlotPoints::GetNearestPoint(const vtkVector2f& point, const vtkVector2f& tol, vtkVector2f* location, vtkIdType* segmentId))\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Settings for CGNS in CMake\nDESCRIPTION: Sets up testing options for the CGNS project, including enabling testing, setting timeout, and including necessary CMake modules for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\noption (CGNS_BUILD_TESTING \"Build CGNS Testing\" OFF)\nif (CGNS_BUILD_TESTING)\n  set (DART_TESTING_TIMEOUT \"600\"\n      CACHE STRING\n      \"Timeout in seconds for each test (default 600=10minutes)\"\n  )\n  enable_testing ()\n  include (CTest)\n  include (${PROJECT_SOURCE_DIR}/CTestConfig.cmake)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for IOParallelExodus in CMake\nDESCRIPTION: Configures the object factory for the IOParallelExodus module, specifying source and header files, and the export macro for symbol visibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelExodus/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOPARALLELEXODUS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Commented Header File Configuration for ExodusII\nDESCRIPTION: This commented-out section shows a configuration that would generate a configured header file for ExodusII. It would take a template file (vtk_exodusII.h.in) and output it to the binary directory. This is likely kept for reference or might be uncommented in certain build configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#configure_file(\n#  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_exodusII.h.in\"\n#  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_exodusII.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Modeling C++ Tests\nDESCRIPTION: Sets up multiple C++ test cases for the VTK Filters Modeling module. It includes tests for various functionalities such as butterfly scalars, geodesic paths, extrusion, and collision detection.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersModelingCxxTests tests\n  TestButterflyScalars.cxx\n  TestDijkstraGraphGeodesicPath.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  TestLinearCellExtrusion.cxx\n  TestNamedColorsIntegration.cxx\n  TestPolyDataPointSampler.cxx\n  TestQuadRotationalExtrusion.cxx\n  TestQuadRotationalExtrusionMultiBlock.cxx\n  TestRotationalExtrusion.cxx\n  TestRotationalExtrusion2.cxx\n  TestSelectEnclosedPoints.cxx\n  TestVolumeOfRevolutionFilter.cxx\n  UnitTestCollisionDetectionFilter.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  UnitTestHausdorffDistancePointSetFilter.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  UnitTestSubdivisionFilters.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MFC Linkage Type in CMake\nDESCRIPTION: This snippet determines whether to use shared or static MFC implementation based on CMake policy CMP0091 settings or compiler flags, setting relevant variables for MFC linkage. It adjusts CMake variables based on whether a static or shared library linkage is intended, and no additional dependencies are required.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Determine whether the shared or static MFC implementation to use.\nif (use_policy_0091) # XXX(cmake-3.15)\n  if (NOT CMAKE_MSVC_RUNTIME_LIBRARY OR # The default uses `DLL`.\n      CMAKE_MSVC_RUNTIME_LIBRARY MATCHES \"DLL$\")\n    set(vtk_mfc_static 0)\n  else ()\n    set(vtk_mfc_static 1)\n  endif ()\nelse ()\n  # If \"/MT\" or \"/MTd\" is in the compiler flags, then our build\n  # products will be linked to the C runtime static lib. Otherwise,\n  # to the C runtime dll.\n  #\n  # Use the release flags.\n  if (CMAKE_CXX_FLAGS_RELEASE MATCHES \"/MT\")\n    set(vtk_mfc_static 1)\n  else ()\n    set(vtk_mfc_static 0)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Enforcing JSON Format Compliance for Number Parsing\nDESCRIPTION: This snippet illustrates how to use the fast_float library to enforce JSON formatting standards when parsing numbers. It demonstrates handling invalid JSON formats and checks for errors during parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  std::string input = \"+.1\"; // not valid\n  double result;\n  fast_float::parse_options options{fast_float::chars_format::json};\n  auto answer = fast_float::from_chars_advanced(input.data(), input.data() + input.size(), result, options);\n  if (answer.ec == std::errc()) { std::cerr << \"should have failed\\n\"; return EXIT_FAILURE; }\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake File\nDESCRIPTION: This line includes a common CMake file, presumably containing shared configurations or macros used across multiple projects. The relative path is `../Common.cmake`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickChartsOn3DScene/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../Common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test with CMake\nDESCRIPTION: This CMake snippet adds a Python test to the VTK project without requiring data, output, or validity comparison. The test specified is 'TestPythonAlgorithm.py'. It uses CMake function 'vtk_add_test_python'.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  TestPythonAlgorithm.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring FIDES Third-Party Module in VTK using CMake\nDESCRIPTION: Configures FIDES as an internal third-party module in VTK with BSD-3-Clause licensing. Specifies the module location, version, and interface settings while maintaining standard include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES           \"vtkfides/LICENSE.txt\"\n  SPDX_LICENSE_IDENTIFIER \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT     \"Copyright (c) 2019 Kitware Inc.\"\n  SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/fides.git@for/vtk-20230505-master-6922a48e\"\n  VERSION                 \"master\"\n  SUBDIRECTORY            vtkfides\n  STANDARD_INCLUDE_DIRS\n  INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Creating Target for External Data - CMake\nDESCRIPTION: This snippet creates a target to handle downloading of external data needed for testing from the VTKData group, ensuring it follows the previous test configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nExternalData_Add_Target(VTKData)\n```\n\n----------------------------------------\n\nTITLE: Registering Python Tests for VTK Image Processing\nDESCRIPTION: CMake directive that registers multiple Python test scripts to be run as part of VTK's testing system. The tests cover various image processing operations including filtering, reslicing, distance transforms, and mathematical operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  ContinuousClose2D.py\n  IdealHighPass.py\n  LaplacianEdgeEnhance.py\n  MultipleUpdateExtents.py\n  ResliceBSpline.py\n  ResliceColorWrap.py\n  ResliceInformationInput.py\n  ResliceInterpolationModes.py\n  ResliceInterpolationOblique.py\n  ResliceLanczosKaiser.py\n  ResliceMirrorOblique.py\n  ResliceMirrorPad.py\n  ResliceOptimizationOff.py\n  ReslicePermutations.py\n  ReslicePermuteResample.py\n  ReslicePermuteSlab.py\n  ResliceSlabModes.py\n  ResliceToColors.py\n  ResliceWrapOblique.py\n  ResliceWrapPad.py\n  Spectrum.py\n  TestAccumulate.py\n  TestAllFlips.py\n  TestAnisotropicDiffusion2D.py\n  TestAnisotropicDiffusion3D.py\n  TestButterworthHighPass.py\n  TestButterworthLowPass.py\n  TestCache.py\n  TestChangeInformation.py\n  TestCheckerboard.py\n  TestCityBlockDistance.py\n  TestConvolve.py\n  TestCorrelation.py\n  TestDivergence.py\n  TestDotProduct.py\n  TestEuclideanDistance.py\n  TestEuclideanDistanceCached.py\n  TestEuclideanToPolar.py\n  TestFFTCorrelation.py\n  TestGradientMagnitude.py\n  TestGradientMagnitude2.py\n  TestHSIToRGB.py\n  TestHSVToRGB.py\n  TestYIQToRGB.py\n  TestHybridMedian2D.py\n  TestIdealLowPass.py\n  TestImageCanvas.py\n  TestImageProjection.py\n  TestInPlaceFilter.py\n  TestIslandRemoval2D.py\n  TestLassoStencil.py\n  TestMapToRGBABlockStreaming.py\n  TestMapToWindowLevelColors.py\n  TestMapToWindowLevelColors2.py\n  TestMask2.py\n  TestMedian3D.py\n  TestNormalize.py\n  TestOpenClose3D.py\n  TestPermute.py\n  TestQuantizeTo16Colors.py\n  TestROIStencil.py\n  TestRange3D.py\n  TestResample.py\n  TestSeparableFilter.py\n  TestShiftScale.py\n  TestShiftScale2.py\n  TestSkeleton2D.py\n  TestSobel2D.py\n  TestSobel3D.py\n  TestStencilToImage.py\n  TestStencilWithFunction.py\n  TestStencilWithImage.py\n  TestVariance3D.py\n  TestWrapPad.py\n  resampledTexture.py\n  voxelModel.py\n  TestBlendCompound.py\n  TestBlendStencil.py\n  TestExtractVOI.py\n  TestImageWeightedSum.py\n  imageMCAll.py\n  TestAllBlends.py\n  TestAllBlendsFloat.py\n  TestAllLogic.py\n  TestAllMaskBits.py\n  TestAllMathematics.py\n  TestAllShrinks.py\n  TestImageThresholdConnectivity.py\n  TestThreshold.py\n  TestWipe.py\n  reconstructSurface.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Disabling SIMD Extensions with CMake\nDESCRIPTION: This snippet shows how to disable SIMD extensions when building libjpeg-turbo using CMake. This is recommended when using memory debuggers like Valgrind or MSan to avoid false positives.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"-DWITH_SIMD=0\"\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA512 Hash of ExternalData File\nDESCRIPTION: Demonstrates how to verify the SHA512 hash of an ExternalData file and view its stored hash value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cat Some/Module/Testing/Data/Baseline/.ExternalData_SHA512_477e6028* |sha512sum\n477e6028...  -\n$ cat Some/Module/Testing/Data/Baseline/MyTest.png.sha512\n477e6028...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Private Templates for XML Handling in CMake\nDESCRIPTION: This snippet defines private templates for handling unstructured XML data formats, which can be used for specific reader implementations within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_templates\n  vtkXMLUnstructuredPolyReader.txx)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests to CTest\nDESCRIPTION: Adds each C++ test to CTest with the appropriate arguments and test properties. This allows running the tests with 'ctest' command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(testfile ${KWSYS_CXX_TESTS})\n  get_filename_component(test \"${testfile}\" NAME_WE)\n  add_test(kwsys.${test} ${EXEC_DIR}/${KWSYS_NAMESPACE}TestsCxx ${test} ${KWSYS_TEST_ARGS_${test}})\n  set_property(TEST kwsys.${test} PROPERTY LABELS ${KWSYS_LABELS_TEST})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK-m Feature and Behavior Settings\nDESCRIPTION: Sets various VTK-m features, precision options, and behavior settings to integrate properly with VTK. This includes disabling unnecessary components like rendering, testing, documentation while enabling specific needed features.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Make sure VTK-m is compiled for VTK types.\nset(VTKm_USE_DEFAULT_TYPES_FOR_VTK ON)\n\nset(VTKm_USE_DEFAULT_SYMBOL_VISIBILITY OFF)\nset(VTKm_ENABLE_RENDERING OFF)\nset(VTKm_ENABLE_TESTING OFF)\nset(VTKm_ENABLE_TESTING_LIBRARY ON)\nset(VTKm_ENABLE_BENCHMARKS OFF)\nset(VTKm_ENABLE_DOCUMENTATION OFF)\nset(VTKm_ENABLE_EXAMPLES OFF)\nset(VTKm_ENABLE_CPACK OFF)\nset(VTKm_USE_DOUBLE_PRECISION OFF)\nset(VTKm_USE_64BIT_IDS \"${VTK_USE_64BIT_IDS}\")\nset(VTKm_NO_ASSERT ON)\n\nset(VTKm_SKIP_LIBRARY_VERSIONS \"${VTK_WHEEL_BUILD}\")\n\n# VTK-m uses stricter warning checks resulting in more warnings when VTK-m\n# is enabled.\n# Disable VTK-m warning flags and just rely on VTK's warning flags.\nset(VTKm_ENABLE_DEVELOPER_FLAGS OFF)\nset(VTKm_NO_DEPRECATED_VIRTUAL ON)\n\n# Ignore existing CMake variable in vtk-m\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n```\n\n----------------------------------------\n\nTITLE: Calculating Fragment Depth for Point Rendering in GLSL\nDESCRIPTION: This GLSL code snippet calculates the fragment depth for point rendering in VTK. It uses pre-calculated values S and W, and the normalized view coordinates to compute the final depth value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/PixelsToZBufferConversion.txt#2025-04-21_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nQ = (normalVCVSOutput.z*W - 1.0)\ngl_FragDepth = (S - gl_FragCoord.z) / Q + S;\n```\n\n----------------------------------------\n\nTITLE: Configuring PDAL Libraries Based on Version\nDESCRIPTION: Sets up the required PDAL libraries based on the PDAL version and the operating system. It handles different configurations for versions before and after 2.6.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(pdal_libraries)\nif (PDAL_VERSION VERSION_LESS \"2.6\")\n  set(pdal_libraries pdal_util)\n  if (APPLE OR WIN32)\n    list(APPEND pdal_libraries\n      pdalcpp)\n  else()\n    list(APPEND pdal_libraries\n      pdal_base)\n  endif()\nelse ()\n  list(APPEND pdal_libraries\n    pdalcpp)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating a complex JSON object in C++\nDESCRIPTION: This snippet illustrates creating a more complex nlohmann::json object with various data types including nested objects and arrays. It demonstrates how to add different types of values to the JSON object.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// create an empty structure (null)\njson j;\n\n// add a number that is stored as double (note the implicit conversion of j to an object)\nj[\"pi\"] = 3.141;\n\n// add a Boolean that is stored as bool\nj[\"happy\"] = true;\n\n// add a string that is stored as std::string\nj[\"name\"] = \"Niels\";\n\n// add another null object by passing nullptr\nj[\"nothing\"] = nullptr;\n\n// add an object inside the object\nj[\"answer\"][\"everything\"] = 42;\n\n// add an array that is stored as std::vector (using an initializer list)\nj[\"list\"] = { 1, 0, 2 };\n\n// add another object (using an initializer list of pairs)\nj[\"object\"] = { {\"currency\", \"USD\"}, {\"value\", 42.99} };\n\n// instead, you could also write (which looks very similar to the JSON above)\njson j2 = {\n  {\"pi\", 3.141},\n  {\"happy\", true},\n  {\"name\", \"Niels\"},\n  {\"nothing\", nullptr},\n  {\"answer\", {\n    {\"everything\", 42}\n  }},\n  {\"list\", {1, 0, 2}},\n  {\"object\", {\n    {\"currency\", \"USD\"},\n    {\"value\", 42.99}\n  }}\n};\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVR Module to VTK\nDESCRIPTION: This snippet adds the VTK Rendering OpenVR module to the VTK build system, including specified classes and source files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingOpenVR\n  CLASSES ${classes}\n  SOURCES \"${dashboard_source}\" ${vtk_object_factory_source} ${geometry_sources}\n  PRIVATE_HEADERS \"${dashboard_header}\" ${vtk_object_factory_header} ${geometry_headers})\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Time Steps Heat Map Data with ADIOS2 in C++\nDESCRIPTION: This snippet shows how to generate a 3D heat map dataset with multiple time steps using ADIOS2. It employs 2 processes and is created based on the indicated source.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Data/ADIOS2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// HeatMap3D_3-step\n// Generated by adios2/examples/hello/bpReader/helloBPReaderHeatMap3DMultiTimeStpes.cpp with 2 processes.\n```\n\n----------------------------------------\n\nTITLE: Configuring GLSL Shader Files\nDESCRIPTION: Lists all GLSL shader files used by the LIC implementation including anti-aliasing, line integral convolution, and surface shaders.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(shader_files\n  vtkLineIntegralConvolution2D_AAH.glsl\n  vtkLineIntegralConvolution2D_AAV.glsl\n  vtkLineIntegralConvolution2D_CE.glsl\n  vtkLineIntegralConvolution2D_EE.glsl\n  vtkLineIntegralConvolution2D_LIC0.glsl\n  vtkLineIntegralConvolution2D_LICI.glsl\n  vtkLineIntegralConvolution2D_LICN.glsl\n  vtkLineIntegralConvolution2D_VT.glsl\n  vtkStructuredGridLIC2D_fs.glsl\n  vtkSurfaceLICInterface_CE.glsl\n  vtkSurfaceLICInterface_DCpy.glsl\n  vtkSurfaceLICInterface_SC.glsl)\n```\n\n----------------------------------------\n\nTITLE: Configuring SaveOpenVDBFile Test in CMake\nDESCRIPTION: Sets up arguments for SaveOpenVDBFile test using the located vdb_print executable. It then defines Python tests and adds them using vtk_add_test_python if the vdb_print executable is found.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (OpenVDB_VDB_PRINT)\n  set(SaveOpenVDBFile_ARGS \"--VDB_PRINT_EXE\" \"${OpenVDB_VDB_PRINT}\")\n\n  set(PY_TESTS\n    NO_VALID NO_RT\n    SaveOpenVDBFile.py\n    )\n\n  vtk_add_test_python(\n    ${PY_TESTS}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Large Values with fast_float in C++\nDESCRIPTION: Example showing how the library handles very large floating-point values that exceed the representable range. These are parsed as infinity with an out-of-range error code.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n  double result = -1;\n  std::string str = \"3e1000\";\n  auto r = fast_float::from_chars(str.data(), str.data() + str.size(), result);\n  // r.ec == std::errc::result_out_of_range\n  // r.ptr == str.data() + 6\n  // result == std::numeric_limits<double>::infinity()\n```\n\n----------------------------------------\n\nTITLE: Configuring Memkind Tests in CMake for VTK\nDESCRIPTION: Sets up conditional inclusion of Memkind tests based on the VTK_USE_MEMKIND flag. If enabled, it adds TestMemkindData.cxx to the memkind_tests list.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(memkind_tests)\nif(VTK_USE_MEMKIND)\n  set(memkind_tests\n    TestMemkindData.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining XDMF2 as VTK Third-Party Internal Module in CMake\nDESCRIPTION: Configures the XDMF2 library as an internal third-party module in VTK, specifying license information, version, and other metadata required for proper integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkxdmf2/Copyright.txt\"\n  SPDX_LICENSE_IDENTIFIER\n    \"LicenseRef-BSD-4-Clause-Modif\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2002 U.S. Army Research Laboratory\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://gitlab.kitware.com/xdmf/xdmf.git\"\n  SPDX_CUSTOM_LICENSE_FILE\n    \"vtkxdmf2/Copyright.txt\"\n  SPDX_CUSTOM_LICENSE_NAME\n    \"BSD-4-Clause-Modif\"\n  VERSION\n    \"1.2.11\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK classes for IOAMR\nDESCRIPTION: This snippet sets the list of public classes that are part of the VTK::IOAMR module. These classes are related to reading AMR (Adaptive Mesh Refinement) data formats such as Enzo, FLASH, and Velodyne.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAMRBaseParticlesReader\n  vtkAMRBaseReader\n  vtkAMRDataSetCache\n  vtkAMREnzoParticlesReader\n  vtkAMREnzoReader\n  vtkAMReXGridReader\n  vtkAMReXParticlesReader\n  vtkAMRFlashParticlesReader\n  vtkAMRFlashReader\n  vtkAMRVelodyneReader)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Parallel Core Module Classes in CMake\nDESCRIPTION: Defines the list of classes that are part of the VTK Parallel Core module, which includes various communicators, controllers, and parallel processing utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkCommunicator\n  vtkDummyCommunicator\n  vtkDummyController\n  vtkFieldDataSerializer\n  vtkMultiProcessController\n  vtkMultiProcessStream\n  vtkPDirectory\n  vtkProcess\n  vtkProcessGroup\n  vtkPSystemTools\n  vtkSocketCommunicator\n  vtkSocketController\n  vtkSubCommunicator\n  vtkSubGroup\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting and Installing XdmfCore Headers\nDESCRIPTION: Gathers header files using file glob patterns and adds configuration header. Sets up VTK module installation for the headers, directing them to the appropriate subdirectories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/core/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE\n  XdmfCoreHeaders\n  \"*.hpp\" \"*.tpp\" \"*.i\"\n  \"../CMake/VersionSuite/*.hpp\")\nfile(GLOB LokiHeaders loki/*.h)\n\nset(XdmfCoreHeaders\n      ${XdmfCoreHeaders}\n      ${CMAKE_CURRENT_BINARY_DIR}/XdmfCoreConfig.hpp)\nif (FALSE)\ninstall(FILES ${XdmfCoreHeaders} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\ninstall(FILES ${LokiHeaders} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/loki)\ninstall(TARGETS XdmfCore\n  RUNTIME DESTINATION bin\n  LIBRARY DESTINATION lib\n  ARCHIVE DESTINATION lib)\nelse ()\nvtk_module_install_headers(\n  FILES   ${XdmfCoreHeaders}\n  SUBDIR  \"vtkxdmf3/core\")\nvtk_module_install_headers(\n  FILES   ${LokiHeaders}\n  SUBDIR  \"vtkxdmf3/core/loki\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Checking for unistd.h Header in Zlib Configuration\nDESCRIPTION: Checks if the system has the unistd.h header file which is required for certain UNIX functionalities in Zlib.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Check for unistd.h\n#\ncheck_include_file(unistd.h Z_HAVE_UNISTD_H)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CGNS Reader Tests in CMake\nDESCRIPTION: Configures C++ test cases for the VTK CGNS reader module. Sets up multiple test files for different CGNS reading scenarios including face meshes, flow solutions, boundary conditions, and unsteady data handling. The configuration specifies that tests should run without validation or output checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CGNS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOCGNSReaderCxxTests tests\n  NO_VALID NO_OUTPUT\n  TestCGNSFaceMesh.cxx\n  TestCGNSNoFlowSolutionPointers.cxx\n  TestCGNSReader.cxx\n  TestCGNSReaderBCDirichlet.cxx\n  TestCGNSReaderBCNeumann.cxx\n  TestCGNSReaderHOElements.cxx\n  TestCGNSReaderIgnoreMesh.cxx\n  TestCGNSReaderMeshCaching.cxx\n  TestCGNSReaderMissingBase.cxx\n  TestCGNSReaderMixedElementNodes.cxx\n  TestCGNSReaderUserDefinedData.cxx\n  TestCGNSUnsteadyFields.cxx\n  TestCGNSUnsteadyGrid.cxx\n  TestCGNSUnsteadyTemporalSolution.cxx\n  TestCGNSReaderPatchesAsElementNodes.cxx\n  TestReadCGNSSolution.cxx\n  TestCONVERGECFDCGNSReader.cxx)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOCGNSReaderCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Views Core Classes with CMake\nDESCRIPTION: Defines the list of core VTK view classes and sets up the VTK::ViewsCore module with test mangling configuration. The classes include various representation and view base classes essential for VTK visualization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkConvertSelectionDomain\n  vtkDataRepresentation\n  vtkEmptyRepresentation\n  vtkRenderViewBase\n  vtkView\n  vtkViewTheme\n  )\n\nvtk_module_add_module(VTK::ViewsCore\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ViewsCore)\n```\n\n----------------------------------------\n\nTITLE: Configuring KissFFT Scalar Type in CMake\nDESCRIPTION: Sets the scalar type for KissFFT to double precision.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KISSFFT_SCALAR_TYPE \"double\")\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable with vtk_test_cxx_executable\nDESCRIPTION: This snippet creates an executable for the Noumann JSON C++ tests by calling vtk_test_cxx_executable with the tests argument. This command processes the tests defined earlier and generates the executable which can then be run as part of the testing suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtknlohmannjsonCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Theora C++ Tests in CMake\nDESCRIPTION: Configures CMake test targets for the VTK Theora module. The configuration specifies a single test file 'TestIncludeTheora.cxx' with no data, validation or output requirements, and creates a test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtktheoraCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeTheora.cxx)\nvtk_test_cxx_executable(vtktheoraCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Executable in VTK\nDESCRIPTION: This snippet utilizes the vtk_test_cxx_executable command to define a test executable for the vtkTestingCoreCxxTests tests. This command is crucial for building the test suite executable that will run the specified test cases.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkTestingCoreCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Source Files and Resources\nDESCRIPTION: Defines source files, headers, UI files, and resource files for the SimpleView project. Configures CMake's automatic handling of Qt's MOC, UIC, and RCC tools.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/SimpleView/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Srcs\n  SimpleView.cxx\n  main.cxx)\n\nset(Hdrs\n  SimpleView.h)\n\nset(UIs\n  SimpleView.ui)\n\nset(QRCs\n  Icons/icons.qrc)\n\n# Instruct CMake to run moc automatically when needed.\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\nset(CMAKE_AUTORCC ON)\n\nsource_group(\"Resources\" FILES\n  ${UIs}\n  ${QRCs})\n```\n\n----------------------------------------\n\nTITLE: Conditional VTK Examples Build\nDESCRIPTION: Adds VTK examples subdirectory if VTK_BUILD_EXAMPLES option is enabled\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_BUILD_EXAMPLES \"Build VTK examples.\" OFF)\nif (VTK_BUILD_EXAMPLES)\n  add_subdirectory(Examples)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK OpenGL Object Factory Overrides\nDESCRIPTION: Configures object factory declarations for OpenGL-specific class overrides using a foreach loop.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ContextOpenGL2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(opengl_overrides\n  ContextActor\n  ContextDevice2D\n  ContextDevice3D\n  PropItem)\nforeach (opengl_override IN LISTS opengl_overrides)\n  vtk_object_factory_declare(\n    BASE \"vtk${opengl_override}\"\n    OVERRIDE \"vtkOpenGL${opengl_override}\")\nendforeach ()\nvtk_object_factory_declare(\n  BASE vtkAbstractContextBufferId\n  OVERRIDE vtkOpenGLContextBufferId)\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Vector Magnitude Calculation with vtkTemplateMacro\nDESCRIPTION: Pre-VTK 7.1 implementation using double dispatch pattern with vtkTemplateMacro to calculate vector magnitudes. Shows worker functions for handling different value types and memory access patterns.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename VectorType, typename MagnitudeType>\nvoid calcMagnitudeWorker2(VectorType *vectors, MagnitudeType *magnitude,\n                          vtkIdType numVectors)\n{\n  for (vtkIdType tupleIdx = 0; tupleIdx < numVectors; ++tupleIdx)\n    {\n    magnitude[tupleIdx] =\n      std::sqrt(vectors[3 * tupleIdx + 0] *\n                vectors[3 * tupleIdx + 0] +\n                vectors[3 * tupleIdx + 1] *\n                vectors[3 * tupleIdx + 1] +\n                vectors[3 * tupleIdx + 2] *\n                vectors[3 * tupleIdx + 2]);\n    }\n}\n\ntemplate <typename VectorType>\nvoid calcMagnitudeWorker1(VectorType *vectors, vtkDataArray *magnitude,\n                          vtkIdType numVectors)\n{\n  switch (magnitude->GetDataType())\n    {\n    vtkTemplateMacro(calcMagnitudeWorker2(vectors,\n      static_cast<VTK_TT*>(magnitude->GetVoidPointer(0)), numVectors);\n    }\n}\n\nvoid calcMagnitude(vtkDataArray *vectors, vtkDataArray *magnitude)\n{\n  switch (vectors->GetDataType())\n    {\n    vtkTemplateMacro(calcMagnitudeWorker1<VTK_TT*>(\n      static_cast<VTK_TT*>(vectors->GetVoidPointer(0)),\n      magnitude, vectors->GetNumberOfTuples());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GLTF Reader Primitive Mode Tests in CMake\nDESCRIPTION: Sets up tests for GLTF reader's handling of various primitive modes including points, lines, line loops, line strips, triangle fans, and triangle strips with both generated and pre-defined indices.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGeneratePointIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_POINTS.gltf,Mesh_PrimitiveMode_00.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderReadPointIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_POINTS_2.gltf,Mesh_PrimitiveMode_07.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGenerateLineIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_LINES.gltf,Mesh_PrimitiveMode_01.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderReadLineIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_LINES_2.gltf,Mesh_PrimitiveMode_08.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGenerateLineLoopIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_LINE_LOOP.gltf,Mesh_PrimitiveMode_02.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderReadLineLoopIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_LINE_LOOP_2.gltf,Mesh_PrimitiveMode_09.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGenerateLineStripIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_LINE_STRIP.gltf,Mesh_PrimitiveMode_03.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderReadLineStripIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_LINE_STRIP_2.gltf,Mesh_PrimitiveMode_10.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGenerateTriangleFanIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_TRIANGLE_FAN.gltf,Mesh_PrimitiveMode_05.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderReadTriangleFanIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_TRIANGLE_FAN_2.gltf,Mesh_PrimitiveMode_12.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGenerateTriangleStripIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_TRIANGLE_STRIP.gltf,Mesh_PrimitiveMode_04.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderReadTriangleStripIndices,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/PrimitiveModes/Mesh_PrimitiveMode_TRIANGLE_STRIP_2.gltf,Mesh_PrimitiveMode_11.bin}\n)\n```\n\n----------------------------------------\n\nTITLE: Partition Size Calculations for UnstructuredGrid in HDF5\nDESCRIPTION: Formulas for calculating the size of various components (Points, Connectivity, Offsets, Types, PointData, CellData) for a specific partition in the UnstructuredGrid format. These calculations are used to determine the amount of data to read for each partition.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nPoints: NumberOfPoints[i] * 3 * sizeof(Points[0][0])\nConnectivity: NumberOfConnectivityIds[i] * sizeof(Connectivity[0])\nOffsets: (NumberOfCells[i] + 1) * sizeof(Offsets[0])\nTypes: NumberOfCells[i] * sizeof(Types[i])\nPointData: NumberOfPoints[i] * sizeof(point_array_k[0])\nCellData: NumberOfCells[i] * sizeof(cell_array_k[0])\n```\n\n----------------------------------------\n\nTITLE: Configuring Cocoa OpenGL Render Window for macOS in VTK\nDESCRIPTION: Sets up macOS-specific Cocoa-based OpenGL rendering by configuring custom overrides, adding Objective-C++ source files, and applying required Objective-C++ compiler flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (VTK_USE_COCOA)\n  # Add some custom overrides\n  if (NOT VTK_DEFAULT_RENDER_WINDOW_HEADLESS)\n    vtk_object_factory_declare(\n      BASE vtkRenderWindow\n      OVERRIDE vtkCocoaRenderWindow)\n    set(has_vtkRenderWindow_override 1)\n  endif ()\n  list(APPEND sources\n    vtkCocoaRenderWindow.mm\n    vtkCocoaGLView.mm)\n  list(APPEND headers\n    vtkCocoaRenderWindow.h)\n  list(APPEND nowrap_headers\n    vtkCocoaGLView.h)\n  # Set specified Objective-C++ flags, if any.\n  if (VTK_REQUIRED_OBJCXX_FLAGS)\n    set_source_files_properties(\n      vtkCocoaRenderWindow.mm\n      vtkCocoaGLView.mm\n      PROPERTIES\n        COMPILE_FLAGS \"${VTK_REQUIRED_OBJCXX_FLAGS}\")\n  endif ()\n\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Parallel MPI Filters Module in CMake\nDESCRIPTION: Adds the VTK::FiltersParallelMPI module to the project using the previously defined classes. Also configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallelMPI\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersParallelMPI)\n```\n\n----------------------------------------\n\nTITLE: Configuring PTHREADS support with recursive mutex check in CMake\nDESCRIPTION: Checks for pthread support and specifically tests if PTHREAD_MUTEX_RECURSIVE is defined. If found, adds a definition to the build process. This ensures thread safety with recursive mutex capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nfind_package(Threads)\n\ninclude(CheckCSourceCompiles)\nif(MSVC)\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_C_FLAGS} /WX /W4\")\nelseif (CMAKE_LIBRARY_ARCHITECTURE STREQUAL \"wasm64-emscripten\")\n  # TODO: Remove after Memory64 lands in Phase4 https://github.com/WebAssembly/proposals\n  set(CMAKE_REQUIRED_LIBRARIES m)\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_C_FLAGS} -Wno-experimental -Werror\")\nelse()\n  set(CMAKE_REQUIRED_LIBRARIES m)\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_C_FLAGS} -Werror -Wall\")\nendif()\n\nif(Threads_FOUND AND CMAKE_USE_PTHREADS_INIT)\n  set(CMAKE_REQUIRED_LIBRARIES\n    \"${CMAKE_REQUIRED_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT}\")\n  check_c_source_compiles(\"\n#include <pthread.h>\n\nint main(int argc, char* argv[]) {\n  (void)PTHREAD_MUTEX_RECURSIVE;\n  (void)argv;\n  return argc;\n}\n  \" HAVE_PTHREAD_MUTEX_RECURSIVE_DEFN)\n  if(HAVE_PTHREAD_MUTEX_RECURSIVE_DEFN)\n    add_definitions(-DHAVE_PTHREAD_MUTEX_RECURSIVE=1)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for VTK Documentation\nDESCRIPTION: Commands to create a Python virtual environment, activate it, and install required dependencies for building the VTK documentation. This setup is specifically for Linux/macOS systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingAnnotation Classes and Module\nDESCRIPTION: Defines and configures the VTK RenderingAnnotation module components including public classes for visualization actors, private internal classes, and headers excluded from wrapping. Sets up the module using vtk_module_add_module and adds test mangling configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Annotation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAnnotatedCubeActor\n  vtkArcPlotter\n  vtkAxesActor\n  vtkAxisActor\n  vtkAxisActor2D\n  vtkAxisFollower\n  vtkBarChartActor\n  vtkCaptionActor2D\n  vtkConvexHull2D\n  vtkCornerAnnotation\n  vtkCubeAxesActor\n  vtkCubeAxesActor2D\n  vtkGraphAnnotationLayersFilter\n  vtkLeaderActor2D\n  vtkLegendBoxActor\n  vtkLegendScaleActor\n  vtkParallelCoordinatesActor\n  vtkPieChartActor\n  vtkPolarAxesActor\n  vtkPolarAxesActor2D\n  vtkProp3DAxisFollower\n  vtkRadialGridActor2D\n  vtkScalarBarActor\n  vtkSpiderPlotActor\n  vtkXYPlotActor)\n\nset(private_classes\n\"Private/vtkArcGridActorInternal\"\n\"Private/vtkAxisGridActorInternal\"\n\"Private/vtkTextActorInterfaceInternal\")\n\nset(nowrap_headers\n  vtkScalarBarActorInternal.h)\n\nvtk_module_add_module(VTK::RenderingAnnotation\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  NOWRAP_HEADERS ${nowrap_headers})\nvtk_add_test_mangling(VTK::RenderingAnnotation)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (Planar LIC, Uniform Noise) in CMake\nDESCRIPTION: This snippet sets up an external data test for planar LIC with uniform noise. It provides configuration arguments to `TestSurfaceLIC` for disabling enhanced LIC, setting a uniform noise type, adjusting noise parameters, enabling contrast enhancement, coloring by magnitude, and setting a color mode. This tests planar LIC with a specific noise pattern.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICPlanarVectorNormalizeOffMediumGrainUniform\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICPlanarVectorNormalizeOffMediumGrainUniform.png,:}\"\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/SurfaceVectors.vtk}\n    --camera-config=3\n    --vectors=V\n    --enhanced-lic=0\n    --step-size=0.25\n    --num-steps=40\n    --generate-noise-texture=1\n    --noise-type=1\n    --noise-texture-size=128\n    --noise-grain-size=2\n    --impulse-noise-prob=0.04\n    --enhance-contrast=4\n    --high-color-contrast-enhancement-factor=0.2\n    --color-by-mag=1\n    --color-mode=1\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling SIMD Extensions at Runtime (JSIMD_FORCENONE)\nDESCRIPTION: This snippet shows how to disable SIMD extensions at runtime by setting the `JSIMD_FORCENONE` environment variable to `1`. This is an alternative to disabling SIMD during the build process and is useful for testing with memory debuggers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n`JSIMD_FORCENONE` to `1`\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Executable\nDESCRIPTION: This snippet utilizes the `vtk_test_cxx_executable` CMake macro to configure the test executable.  It disables floating-point exceptions (`DISABLE_FLOATING_POINT_EXCEPTIONS`) and likely sets up a rendering factory (`RENDERING_FACTORY`). This provides a controlled environment for running the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingVolumeCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests with CMake\nDESCRIPTION: This CMake command adds Python tests to the VTK project. It specifies two test files: TestCriticalTime.py with NO_OUTPUT and NO_VALID options, and TestForceStaticMeshPy.py. These tests are likely part of the VTK testing suite to ensure proper functionality of Python bindings or specific VTK features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestCriticalTime.py,NO_OUTPUT,NO_VALID\n  TestForceStaticMeshPy.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding and Linking Boost Serialization\nDESCRIPTION: Configures the Boost serialization dependency with version requirements and links it to the VTK InfovisBoost module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Boost/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(\\n  PACKAGE     Boost\\n  COMPONENTS  serialization\\n  FORWARD_VERSION_REQ EXACT\\n  VERSION_VAR         \"@Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@.@Boost_SUBMINOR_VERSION@\")\\nvtk_module_link(VTK::InfovisBoost\\n  INTERFACE\\n    Boost::serialization)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of C++ Tests in CMake\nDESCRIPTION: Conditionally adds the Cxx subdirectory for C++ tests if vtk_testing_cxx is not disabled. This allows for selective compilation of C++ tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Windows Style Option Parsing\nDESCRIPTION: Enable parsing of command line options in Windows style format with forward slash prefixes\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\n.allow_windows_style_options()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IONetCDF Module in CMake\nDESCRIPTION: This snippet adds the defined classes to the VTK IONetCDF module using the macro 'vtk_module_add_module'. It ensures that the necessary components are included for module functionality. The expected inputs are the module name and the classes list, and it outputs the configured module setup in the VTK build environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IONetCDF\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Adding Collision Detection Tests for VTK Filters Modeling\nDESCRIPTION: Configures three specific collision detection tests with different contact modes (all contacts, first contact, and half contacts) using the TestCollisionDetection.cxx file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersModelingCxxTests tests\n  TestCollisionDetectionAllContacts,TestCollisionDetection.cxx 0)\nvtk_add_test_cxx(vtkFiltersModelingCxxTests tests\n  TestCollisionDetectionFirstContact,TestCollisionDetection.cxx 1)\nvtk_add_test_cxx(vtkFiltersModelingCxxTests tests\n  TestCollisionDetectionHalfContacts,TestCollisionDetection.cxx 2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Package Dependencies\nDESCRIPTION: Sets up Qt package dependencies for the module, specifically requiring the Qt Widgets component. Uses version-aware configuration to ensure compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Qt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkQt)\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE     \"Qt${vtk_qt_major_version}\"\n  COMPONENTS  Widgets\n  FORWARD_VERSION_REQ MINOR\n  VERSION_VAR         \"Qt${vtk_qt_major_version}_VERSION\")\nset(CMAKE_AUTOMOC 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring 64-bit Timestamps Option in CMake for VTK\nDESCRIPTION: Sets up a CMake option for using 64-bit timestamps in VTK, dependent on the system's pointer size. The option is marked as advanced to hide it from basic configuration interfaces.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakeDependentOption)\ncmake_dependent_option(VTK_USE_64BIT_TIMESTAMPS \"Build VTK with 64 bit timestamps\" OFF\n  \"NOT CMAKE_SIZEOF_VOID_P GREATER 4\" ON)\nmark_as_advanced(VTK_USE_64BIT_TIMESTAMPS)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Import Test in CMake\nDESCRIPTION: Sets up a test that verifies VTK Python modules can be properly imported. The test runs a Python script with the VTK Python interpreter and configures the necessary environment variables including PYTHONPATH and, on Windows systems, PATH.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/module/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::vtkpython)\n  add_test(NAME \"import_wrappable\"\n    COMMAND\n      \"$<TARGET_FILE:VTK::vtkpython>\"\n      \"${CMAKE_CURRENT_LIST_DIR}/import_wrappable.py\")\n  set_property(TEST \"import_wrappable\" APPEND\n    PROPERTY\n      ENVIRONMENT \"PYTHONPATH=${CMAKE_BINARY_DIR}/${python_destination}\")\n  if (WIN32)\n    set(test_path \"$ENV{PATH};${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\n    string(REPLACE \";\" \"\\;\" test_path \"${test_path}\")\n    set_property(TEST \"import_wrappable\" APPEND\n      PROPERTY\n        ENVIRONMENT \"PATH=${test_path}\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting up VTK Documentation Build Target\nDESCRIPTION: Creates a custom build target for generating Sphinx documentation with proper version numbering and output directory configuration. Includes directory creation and sphinx-build command execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Sphinx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SPHINX_BUILD_EXECUTABLE)\n  set(doc_version \"${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}-${VTK_BUILD_VERSION}\")\n  # Set output directory\n  set(pkg vtk-${doc_version})\n  set(docdir \"${CMAKE_BINARY_DIR}/share/doc/${pkg}\")\n\n\n  # Generate documentation\n  add_custom_target(SphinxDoc\n    COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${docdir}\"\n    COMMAND \"${SPHINX_BUILD_EXECUTABLE}\"\n            ${CMAKE_CURRENT_SOURCE_DIR}/../../Documentation/docs\n            \"${docdir}\"\n    )\nelse()\n  message(WARNING \"Warning: sphinx-build not found:\"\n                  \" Sphinx documentation will not be created\")\nendif(  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests with vtk_add_test_cxx\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` macro to add C++ tests for the vtkDomainsChemistryOpenGL2 module. It specifies the test executable name and the source files to be included in the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ChemistryOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkDomainsChemistryOpenGL2CxxTests tests\n  TestPDBBallAndStickShadows.cxx\n  TestPDBBallAndStickShadowsDOFSSAA.cxx\n  TestPDBBallAndStickTranslucent.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This command includes a subdirectory into the current CMake project.  `add_subdirectory(Cxx)` instructs CMake to process the CMakeLists.txt file located in the `Cxx` directory, effectively incorporating that directory's source code and build instructions into the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Color/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: WebGPU Factory Override Configuration\nDESCRIPTION: Sets up factory overrides for various VTK rendering components with WebGPU implementations\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(webgpu_overrides\n  Actor\n  Camera\n  CompositePolyDataMapperDelegator\n  # Some components marked as Not Implemented (NI)\n  Glyph3DMapper\n  Light\n  PolyDataMapper\n  ...)\n```\n\n----------------------------------------\n\nTITLE: Debugging VTK Parser Generation\nDESCRIPTION: Command to generate debug output and verbose information when creating the parser, useful for identifying rule conflicts.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbison --debug --verbose -b vtkParse vtkParse.y\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Parallel Flow Paths Classes and Overrides in CMake\nDESCRIPTION: Defines classes and object factory overrides for the VTK Parallel Flow Paths module. It sets up parallel versions of various particle tracking and stream tracing classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPLagrangianParticleTracker\n  #  vtkPParticlePathFilter\n  #vtkPParticleTracer\n  # vtkPParticleTracerBase\n  #vtkPStreaklineFilter\n  vtkPStreamTracer)\n\n# Overrides for object factory.\nset(parallel_overrides\n  LagrangianParticleTracker\n  StreamTracer\n  #ParticleTracer\n  #ParticlePathFilter\n  #StreaklineFilter\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK OBJ Importer Tests\nDESCRIPTION: Configures multiple test cases for the VTK OBJ importer, testing various OBJ file formats including those with textures, MTL files, and different vertex configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImportCxxTests tests\n  OBJImporter-TwoTrianglesWithNegativeIndices,TestOBJImporter.cxx\n    DATA{../Data/Input/TwoTrianglesWithNegativeIndices.obj}\n    DATA{../Data/Input/TwoTrianglesWithNegativeIndices.mtl}\n    DATA{../Data/Input/noise.png}\n)\n```\n\n----------------------------------------\n\nTITLE: VTK Module Configuration and Linking\nDESCRIPTION: Configures the VTK IO Movie module, adds classes dynamically, generates configuration header, and links platform-specific libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOMovie\n  CLASSES ${classes}\n  HEADERS \"${CMAKE_CURRENT_BINARY_DIR}/vtkIOMovieConfigure.h\")\n\nset(libs)\nif (VTK_USE_VIDEO_FOR_WINDOWS)\n  list(APPEND libs vfw32)\nendif ()\n\nif (VTK_USE_MICROSOFT_MEDIA_FOUNDATION)\n  list(APPEND libs mfreadwrite mfplat mfuuid)\nendif()\n\nvtk_module_link(VTK::IOMovie\n  PRIVATE ${libs})\n```\n\n----------------------------------------\n\nTITLE: Configuring vtktoken Module in CMake\nDESCRIPTION: This CMake script configures the vtktoken module for integration into the VTK project. It sets the namespace and installation directory and uses the vtk_module_third_party function to specify internal and external dependencies, licensing details, and download locations. Dependency on CMake and VTK's vtk_module_third_party function is required. The configuration focuses on ensuring proper inclusion and licensing compliance for vtktoken.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Override some configuration options before descending into vtktoken:\\nset(token_NAMESPACE \\\"vtktoken\\\")\\nset(token_PACKAGE_INSTALL_DIR \\\"${CMAKE_INSTALL_LIBDIR}/cmake\\\")\\n\\nvtk_module_third_party(\\n  INTERNAL\\n    SUBDIRECTORY \\\"vtktoken\\\"\\n    LICENSE_FILES \\\"vtktoken/license.md\\\"\\n    SPDX_LICENSE_IDENTIFIER \\\"BSD-3-Clause\\\"\\n    SPDX_COPYRIGHT_TEXT \\\"Copyright ⓒ  2020-2023 Kitware, Inc.\\\"\\n    SPDX_DOWNLOAD_LOCATION \\\"git+https://gitlab.kitware.com/utils/token.git@for/vtk\\\"\\n    VERSION \\\"23.09\\\"\\n    STANDARD_INCLUDE_DIRS\\n  EXTERNAL\\n    PACKAGE token\\n    TARGETS token\\n    STANDARD_INCLUDE_DIRS\\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking VTK Libraries\nDESCRIPTION: Compiles the WrappedMace executable and links it with the required VTK libraries\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(WrappedMace WrappedMace.cxx)\ntarget_link_libraries(WrappedMace PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring SystemTools Features for KWSys\nDESCRIPTION: Performs various compiler checks and sets compile definitions for SystemTools.cxx based on the results. Includes checks for setenv, unsetenv, environ in stdlib.h, utimes, utimensat, and struct stat members.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_USE_SystemTools)\n  if (NOT DEFINED KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP)\n    set(KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP 1)\n  endif ()\n  if (KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP)\n    set(KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP 1)\n  else ()\n    set(KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP 0)\n  endif ()\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_SETENV\n    \"Checking whether CXX compiler has setenv\" DIRECT)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_UNSETENV\n    \"Checking whether CXX compiler has unsetenv\" DIRECT)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H\n    \"Checking whether CXX compiler has environ in stdlib.h\" DIRECT)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_UTIMES\n    \"Checking whether CXX compiler has utimes\" DIRECT)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_UTIMENSAT\n    \"Checking whether CXX compiler has utimensat\" DIRECT)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_STAT_HAS_ST_MTIM\n    \"Checking whether CXX compiler struct stat has st_mtim member\" DIRECT)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_STAT_HAS_ST_MTIMESPEC\n    \"Checking whether CXX compiler struct stat has st_mtimespec member\" DIRECT)\n  set_property(SOURCE SystemTools.cxx APPEND PROPERTY COMPILE_DEFINITIONS\n    KWSYS_CXX_HAS_SETENV=${KWSYS_CXX_HAS_SETENV}\n    KWSYS_CXX_HAS_UNSETENV=${KWSYS_CXX_HAS_UNSETENV}\n    KWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H=${KWSYS_CXX_HAS_ENVIRON_IN_STDLIB_H}\n    KWSYS_CXX_HAS_UTIMES=${KWSYS_CXX_HAS_UTIMES}\n    KWSYS_CXX_HAS_UTIMENSAT=${KWSYS_CXX_HAS_UTIMENSAT}\n    KWSYS_CXX_STAT_HAS_ST_MTIM=${KWSYS_CXX_STAT_HAS_ST_MTIM}\n    KWSYS_CXX_STAT_HAS_ST_MTIMESPEC=${KWSYS_CXX_STAT_HAS_ST_MTIMESPEC}\n    )\n  if(NOT WIN32)\n    if(KWSYS_STANDALONE)\n      option(KWSYS_SYSTEMTOOLS_SUPPORT_WINDOWS_SLASHES \"If true, Windows paths will be supported on Unix as well\" ON)\n    endif()\n    if(KWSYS_SYSTEMTOOLS_SUPPORT_WINDOWS_SLASHES)\n      set_property(SOURCE SystemTools.cxx testSystemTools.cxx APPEND PROPERTY COMPILE_DEFINITIONS\n        KWSYS_SYSTEMTOOLS_SUPPORT_WINDOWS_SLASHES\n        )\n    endif()\n  endif()\n\n  # Disable getpwnam for static linux builds since it depends on shared glibc\n  get_property(SHARED_LIBS_SUPPORTED GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)\n  if(CMAKE_SYSTEM_NAME MATCHES \"Linux\" AND NOT SHARED_LIBS_SUPPORTED)\n    set_property(SOURCE SystemTools.cxx APPEND PROPERTY COMPILE_DEFINITIONS\n      HAVE_GETPWNAM=0\n      )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Packages and Options in CMake\nDESCRIPTION: This snippet uses CMake commands to find the required packages such as Doxygen, Perl, and optionally HTMLHelp. It sets various options related to Doxygen such as using short file names, keeping temporary files, and generating HTML help. These options are marked as advanced and toggled based on their values.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Doxygen REQUIRED)\nfind_package(Perl REQUIRED)\nfind_package(HTMLHelp)\n\noption(DOXYGEN_SHORT_NAMES \"Build Doxygen of VTK using short file names\" OFF)\noption(DOXYGEN_KEEP_TEMP \"Do not delete the temporary Doxygen headers\" OFF)\noption(DOXYGEN_GENERATE_HTMLHELP \"Generate HTML help (CHM) files\" ON)\nmark_as_advanced(DOXYGEN_SHORT_NAMES DOXYGEN_KEEP_TEMP DOXYGEN_GENERATE_HTMLHELP)\nif(DOXYGEN_SHORT_NAMES)\n  set(DOXYGEN_SHORT_NAMES YES)\nelse()\n  set(DOXYGEN_SHORT_NAMES NO)\nendif()\nif(DOXYGEN_GENERATE_HTMLHELP)\n  set(DOXYGEN_GENERATE_HTMLHELP YES)\nelse()\n  set(DOXYGEN_GENERATE_HTMLHELP NO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using the second_derivative Helper Function in ExprTk\nDESCRIPTION: Demonstrates the setup for calculating the numerical second derivative of a single-variable expression using Newton's difference quotient method. Shows the initial setup pattern similar to the derivative function, with types and expression compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_96\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n```\n\n----------------------------------------\n\nTITLE: Adding Python Scripts to VTK Tests\nDESCRIPTION: This CMake snippet calls the function 'vtk_add_test_python' with multiple Python files as arguments. The purpose is to register these Python scripts as part of the test suite for the VTK library. Each script corresponds to testing the reading or writing capabilities of VTK for different image formats like BMP, JPEG, MHD, TIFF, and others. The snippet does not specify any dependencies but relies on the 'vtk_add_test_python' function being defined elsewhere. Some scripts are marked with 'NO_VALID', indicating potential exceptions or special handling in the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestBMPReader.py\n  TestImageWriters.py\n  TestJPEGReader.py\n  TestMHD.py\n  TestTIFFReader.py\n  dem.py\n  TestMetaImage2D.py\n  TestNIFTIReaderWriter.py\n  TestPNGTextChunks.py,NO_VALID\n  TestSetFileNames.py\n  TestImageJSONWriter.py,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Tests (Conditional)\nDESCRIPTION: This CMake code snippet conditionally adds MPI tests if parallel processing capabilities are enabled in VTK (`VTK::FiltersParallel`, `VTK::RenderingParallel`, and `VTK::mpi`). It sets the number of processes to 4 and uses `vtk_add_test_mpi` to add MPI-enabled tests such as `TestIOSSExodusParallelWriter.cxx` and `TestIOSSExodusPartitionedFiles.cxx`.  It also conditionally adds a Catalyst-specific MPI test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::FiltersParallel AND TARGET VTK::RenderingParallel AND TARGET VTK::mpi)\n  set (vtkIOIOSSCxxTests_NUMPROCS 4)\n  vtk_add_test_mpi(vtkIOIOSSCxxTests tests\n    TestIOSSExodusParallelWriter.cxx,TESTING_DATA\n    TestIOSSExodusPartitionedFiles.cxx,TESTING_DATA\n    TestIOSSExodusRestarts.cxx,NO_VALID,TESTING_DATA)\n  if (TARGET VTK::catalyst)\n    vtk_add_test_mpi(vtkIOIOSSCxxTests tests\n      TestIOSSCatalystExodus.cxx,TESTING_DATA\n    )\n  endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: CUDA Configuration for VTK-m\nDESCRIPTION: Configures CUDA-specific settings and compilation flags when CUDA support is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\n\n  list(TRANSFORM nowrap_classes APPEND \".cxx\" OUTPUT_VARIABLE nowrap_sources)\n  set(cuda_impl ${nowrap_sources} vtkmDataSet.cxx)\n  set_source_files_properties(${cuda_impl} PROPERTIES LANGUAGE CUDA)\n\n  vtk_module_set_properties(VTK::AcceleratorsVTKmDataModel CUDA_SEPARABLE_COMPILATION ON)\n\n  vtk_module_compile_options(VTK::AcceleratorsVTKmDataModel\n    PUBLIC $<$<COMPILE_LANGUAGE:CUDA>:-Xcudafe --diag_suppress=extra_semicolon>)\n\nelseif (TARGET vtkm::kokkos_cuda)\n  list(TRANSFORM nowrap_classes APPEND \".cxx\" OUTPUT_VARIABLE nowrap_sources)\n  set(cuda_impl ${nowrap_sources} vtkmDataSet.cxx)\n  set_source_files_properties(${cuda_impl} PROPERTIES LANGUAGE CUDA)\n  kokkos_compilation(SOURCE ${cuda_impl})\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Remoting IP Address in VTK OpenXR Application\nDESCRIPTION: C++ code snippet demonstrating how to set the remoting IP address in a VTK OpenXR application using the vtkOpenXRRemotingRenderWindow class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvtkOpenXRRemotingRenderWindow::SetRemotingIPAddress(\"XX.XX.XX.XX\")\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test with 5 Processes\nDESCRIPTION: This snippet adds an MPI test named `vtkFiltersParallelMPICxxTests-MPI test_5_procs` which runs `TestDistributedPointCloudFilter5` and `TestDistributedPointCloudFilter.cxx`. The `vtk_add_test_mpi` macro is used, and the number of processes is explicitly set to 5 before defining the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkFiltersParallelMPICxxTests-MPI_NUMPROCS 5)\nvtk_add_test_mpi(vtkFiltersParallelMPICxxTests-MPI test_5_procs\n  TestDistributedPointCloudFilter5,TestDistributedPointCloudFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Imaging Morphological CXX Tests\nDESCRIPTION: Configures C++ test files for VTK's imaging morphological module. Specifies test source files and creates a test executable with specific flags for floating point exceptions and rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Morphological/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkImagingMorphologicalCxxTests tests\n  TestImageThresholdConnectivity.cxx\n  TestImageConnectivityFilter.cxx\n  )\n\nvtk_test_cxx_executable(vtkImagingMorphologicalCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring XDMF2 Tests in VTK with CMake\nDESCRIPTION: Sets up C++ tests for the VTK XDMF2 module. The first command adds a C++ test with the specified source file and test options. The second command creates the test executable from the defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkxdmf2CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeXDMF2.cxx)\nvtk_test_cxx_executable(vtkxdmf2CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test Scripts to VTK\nDESCRIPTION: This snippet uses the vtk_add_test_python command to register multiple Python test scripts (labeledContours.py and labeledMesh.py) to the VTK testing system. This enables automated testing for the functionalities implemented in these scripts. The snippet requires the VTK build environment to be properly configured with CMake.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Label/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  labeledContours.py\n  labeledMesh.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure output for libogg library\nDESCRIPTION: Sets up and installs the libogg library, including binary, library, and header files. It configures properties such as version, SOVERSION, and includes public headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\nadd_library(ogg ${OGG_HEADERS} ${OGG_SOURCES})\nadd_library(Ogg::ogg ALIAS ogg)\ntarget_include_directories(ogg PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n\nset_target_properties(\n    ogg PROPERTIES\n    SOVERSION ${LIB_SOVERSION}\n    VERSION ${LIB_VERSION}\n    PUBLIC_HEADER \"${OGG_HEADERS}\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Support for XDMF\nDESCRIPTION: Sets up optional MySQL database support for XDMF, locating the required header files and libraries if enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): hardcode settings\noption(XDMF_USE_MYSQL\n  \"Build Support for MySQL DataItems\" OFF)\nmark_as_advanced(XDMF_USE_MYSQL)\nelse ()\nset(XDMF_USE_MYSQL OFF)\nendif ()\nif(XDMF_USE_MYSQL)\n    find_path(MYSQL_INCLUDE_PATH\n        mysql.h\n        /usr/include\n        /usr/include/mysql\n        /usr/local/include\n        /usr/local/include/mysql)\n    find_library(MYSQL_CLIENT_LIBRARY\n        mysqlclient\n        /usr/lib\n        /usr/lib/mysql\n        /usr/local/lib\n        /usr/local/lib/mysql)\n    set(XdmfSources ${XdmfSources} ${XdmfMySQLSource})\n    add_definitions(\"-DXDMF_USE_MYSQL\")\n    include_directories(${MYSQL_INCLUDE_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting default build type for single-configuration CMake generators\nDESCRIPTION: Sets the default build type to Release if no configuration type or build type is specified. This ensures optimized builds by default when using single-configuration generators.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Set a default build type for single-configuration cmake generators if\n# no build type is set.\nif(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration for Expat XML Parser in CMake\nDESCRIPTION: Sets up the basic project configuration including version number, language standard, and package information. This snippet defines the project name, version, and required C standard for the Expat XML parser.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(expat\n    VERSION\n        2.7.0\n    LANGUAGES\n        C\n)\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_C_EXTENSIONS OFF)  # i.e. -std=c99 rather than default -std=gnu99\n\nset(PACKAGE_BUGREPORT \"https://github.com/libexpat/libexpat/issues\")\nset(PACKAGE_NAME \"expat\")\nset(PACKAGE_VERSION \"${PROJECT_VERSION}\")\nset(PACKAGE_STRING \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\nset(PACKAGE_TARNAME \"${PACKAGE_NAME}\")\n\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Checking Fortran Default Real Precision in CMake\nDESCRIPTION: Checks if Fortran's default real is double precision when both Fortran and high-level library are enabled. Fails if default real is double precision due to bug HDFFV-889 which affects the high-level Fortran routines.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif (HDF5_BUILD_FORTRAN AND HDF5_BUILD_HL_LIB)\n  if (NOT H5_FORTRAN_DEFAULT_REAL_NOT_DOUBLE)\n    message (FATAL_ERROR \" **** Fortran high-level routines are not supported when the default REAL is DOUBLE PRECISION, use HDF5_BUILD_HL_LIB:BOOL=OFF **** \")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Core Library Definitions\nDESCRIPTION: Sets VTK-specific TIFF memory allocation function definitions and compile flags for tif_open.c\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/libtiff/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_definitions(VTK::tiff PRIVATE TIFF_DO_NOT_USE_NON_EXT_ALLOC_FUNCTIONS)\nset_property(SOURCE tif_open.c APPEND PROPERTY COMPILE_DEFINITIONS ALLOW_TIFF_NON_EXT_ALLOC_FUNCTIONS)\n```\n\n----------------------------------------\n\nTITLE: Enabling and Managing KWSys Components\nDESCRIPTION: Enables core KWSys components based on build configurations, ensuring dependency relations between features are met. If built standalone or with CMake as a source directory, various utilities within KWSys are activated.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_STANDALONE OR CMake_SOURCE_DIR)\n  set(KWSYS_ENABLE_C 1)\n  # Enable all components.\n  set(KWSYS_USE_Base64 1)\n  set(KWSYS_USE_Directory 1)\n  set(KWSYS_USE_DynamicLoader 1)\n  set(KWSYS_USE_Encoding 1)\n  set(KWSYS_USE_Glob 1)\n  set(KWSYS_USE_MD5 1)\n  set(KWSYS_USE_Process 1)\n  set(KWSYS_USE_RegularExpression 1)\n  set(KWSYS_USE_Status 1)\n  set(KWSYS_USE_System 1)\n  set(KWSYS_USE_SystemTools 1)\n  set(KWSYS_USE_CommandLineArguments 1)\n  set(KWSYS_USE_Terminal 1)\n  set(KWSYS_USE_FStream 1)\n  set(KWSYS_USE_String 1)\n  set(KWSYS_USE_SystemInformation 1)\n  set(KWSYS_USE_ConsoleBuf 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationDoubleKey in VTK XML\nDESCRIPTION: Shows the XML structure for defining a vtkInformationDoubleKey with a single double value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"Double\" location=\"XMLTestKey\">\n  1\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests for QVTKOpenGLNativeWidget\nDESCRIPTION: This snippet configures tests related to the `QVTKOpenGLNativeWidget`. It demonstrates how to define tests that interact with a specific Qt widget within the VTK environment. The commented line suggests a potentially problematic test related to disabled interactor functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_add_test_cxx(vtkGUISupportQtCxxTests tests\n  -w QVTKOpenGLNativeWidget\n  TestQVTKOpenGLNativeWidgetQWidgetWidget,TestQWidgetWidget.cxx,NO_VALID\n  TestQVTKOpenGLNativeWidgetPicking,TestQtPicking.cxx,NO_VALID\n  TestQVTKOpenGLNativeWidgetSwapWindows,TestQtSwapWindows.cxx,NO_VALID\n  TestQVTKOpenGLNativeWidget,TestQtWidget.cxx\n# TestQVTKOpenGLNativeWidgetWithDisabledInteractor,TestQtWithDisabledInteractor.cxx #19221\n  TestQVTKOpenGLNativeWidgetWithMSAA,TestQtWithMSAA.cxx\n  TestQVTKOpenGLNativeWidgetWithChartHistogram2D,TestQtWithChartHistogram2D.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake command adds the Cxx subdirectory to the build process. It includes the C++ source files and configurations for the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Embedding DIY2 into VTK Build System\nDESCRIPTION: Describes key modifications for integrating diy2 library into VTK, including build system changes, library usage, and header integration\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/vtkdiy2/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Changes for embedding diy2 into VTK\n```\n\n----------------------------------------\n\nTITLE: Adding VTK CommonExecutionModel Module\nDESCRIPTION: Configures and adds the CommonExecutionModel module to VTK using the defined classes, sources, and template classes. Also adds test mangling support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::CommonExecutionModel\n  CLASSES ${classes}\n  SOURCES ${serialization_helper_sources}\n  TEMPLATE_CLASSES ${template_classes})\nvtk_add_test_mangling(VTK::CommonExecutionModel)\n```\n\n----------------------------------------\n\nTITLE: Using C++11 Threading Mechanisms in VTK\nDESCRIPTION: Demonstrates the use of C++11 standard library threading mechanisms to replace deprecated VTK threading classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include <mutex>\n#include <condition_variable>\n\nstd::mutex mtx;\nstd::condition_variable_any cv;\n\n// Use std::mutex instead of vtkMutexLock, vtkCriticalSection, etc.\n// Use std::condition_variable_any instead of vtkConditionVariable, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Component Builds\nDESCRIPTION: Sets up the build configuration for various HDF5 components including source, tools, examples, and tests with conditional compilation based on build options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/hl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (src)\n\n# Build HDF5 Tools\nif (HDF5_BUILD_TOOLS)\n  if (EXISTS \"${HDF5_HL_SOURCE_DIR}/tools\" AND IS_DIRECTORY \"${HDF5_HL_SOURCE_DIR}/tools\")\n    option (HDF5_BUILD_HL_TOOLS  \"Build HDF5 HL Tools\" ON)\n    if (HDF5_BUILD_HL_TOOLS)\n      add_subdirectory (tools)\n    endif ()\n  endif ()\nendif ()\n\n#-- Add High Level Examples\nif (HDF5_BUILD_EXAMPLES)\n  add_subdirectory (examples)\nendif ()\n\n#-- Build the Unit testing if requested\nif (BUILD_TESTING AND HDF5_TEST_SERIAL)\n  add_subdirectory (test)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining and Adding VTK ImagingSources Module Classes in CMake\nDESCRIPTION: Configures the VTK::ImagingSources module by first defining a list of image source classes and then adding them to the module. The file also adds test mangling for the module to ensure proper testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Sources/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkImageCanvasSource2D\n  vtkImageEllipsoidSource\n  vtkImageGaussianSource\n  vtkImageGridSource\n  vtkImageMandelbrotSource\n  vtkImageNoiseSource\n  vtkImageSinusoidSource)\n\nvtk_module_add_module(VTK::ImagingSources\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingSources)\n```\n\n----------------------------------------\n\nTITLE: Implementing Constant Value Array with vtkImplicitArray\nDESCRIPTION: Demonstrates creating an implicit array with a constant backend that always returns 42. Shows basic array setup and value retrieval.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct ConstBackend\n{\n  int operator()(int vtkNotUsed(idx)) const { return 42; };\n};\n\nvtkNew<vtkImplicitArray<ConstBackend>> arr42;\narr42->SetNumberOfComponents(1);\narr42->SetNumberOfTuples(100);\nCHECK(arr42->GetValue(77) == 42); // always true\n```\n\n----------------------------------------\n\nTITLE: VTK Module Auto-Initialization\nDESCRIPTION: This snippet utilizes `vtk_module_autoinit` to automatically initialize the VTK modules required by the targets. It lists the executables (Arrays, Cube, SGrid, RGrid) and the VTK libraries that need auto-initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/DataManipulation/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS Arrays\n          Cube\n          SGrid\n          RGrid\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Implementing VTK-m Filter Overrides\nDESCRIPTION: Conditional implementation of VTK-m filter overrides when the VTK_ENABLE_VTKM_OVERRIDES option is enabled, configuring the object factory source and header files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_VTKM_OVERRIDES)\n  _vtkm_add_override(\"vtkContourFilter\" \"vtkmContour\")\n  _vtkm_add_override(\"vtkGradientFilter\" \"vtkmGradient\")\n  _vtkm_add_override(\"vtkCellDataToPointData\" \"vtkmAverageToPoints\")\n  _vtkm_add_override(\"vtkPointDataToCellData\" \"vtkmAverageToCells\")\n  _vtkm_add_override(\"vtkTableBasedClipDataSet\" \"vtkmClip\")\n  _vtkm_add_override(\"vtkCutter\" \"vtkmSlice\")\n  _vtkm_add_override(\"vtkThreshold\" \"vtkmThreshold\")\n\n  list (JOIN VTKM_OVERRIDES_INITIALIZER_LIST \",\\n  \" VTKM_OVERRIDES_INITIALIZER_LIST_STRING)\n\n  vtk_object_factory_configure(\n    SOURCE_FILE vtk_object_factory_source\n    HEADER_FILE vtk_object_factory_header\n    EXPORT_MACRO \"VTKACCELERATORSVTKMFILTERS_EXPORT\")\n\n  list (APPEND sources ${vtk_object_factory_source})\n  list (APPEND headers ${vtk_object_factory_header})\n\n  # Set this here instead of the vtk.module file as it is conditional\n  set_property(GLOBAL APPEND\n    PROPERTY\n    \"_vtk_module_VTK::AcceleratorsVTKmFilters_implements\" VTK::FiltersCore)\nendif()\n\nset (VTKM_OVERRIDES_INITIALIZER_LIST_STRING \"{\\n  ${VTKM_OVERRIDES_INITIALIZER_LIST_STRING}};\")\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkmFilterOverrides.cxx.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmFilterOverrides.cxx\")\nlist (APPEND headers vtkmFilterOverrides.h)\nlist (APPEND sources \"${CMAKE_CURRENT_BINARY_DIR}/vtkmFilterOverrides.cxx\")\n```\n\n----------------------------------------\n\nTITLE: Adding PNG Comparison Test\nDESCRIPTION: Appends PNG comparison test to the test suite for validating PNG images loaded from disk.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND tests PNGCompare.cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Build\nDESCRIPTION: CMake directive to include the Cxx subdirectory in the build process, where C++ source files for VTK are located.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Reading Time-Dependent Cell Data in C++ with ADIOS2\nDESCRIPTION: This snippet modifies the ADIOS2 VTX reader to dynamically read time-dependent cell data based on the time dimension, allowing multiple time steps to be processed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/adios2-vtx-reader-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Check the time dimension for cell and point fields\n// if available, read the field over time\nif (timeDimensionAvailable) {\n    // Logic to read over time\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing RapidJSON for Fides in CMake\nDESCRIPTION: Defines how to build and install the RapidJSON dependency for Fides. It creates an interface library, configures include paths, handles both external and bundled RapidJSON versions, and sets up proper installation directives.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/rapidjson/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(fides_rapidjson INTERFACE)\n\nfides_get_kit_name(kit_name kit_dir)\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/fides_rapidjson.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/fides_rapidjson.h\")\n\ntarget_include_directories(fides_rapidjson INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n  $<INSTALL_INTERFACE:${FIDES_INSTALL_INCLUDE_DIR}/thirdparty/rapidjson>)\n\nif (FIDES_USE_EXTERNAL_RAPIDJSON)\n  target_link_libraries(fides_rapidjson INTERFACE RapidJSON::RapidJSON)\nendif()\n\ninstall(TARGETS fides_rapidjson\n  EXPORT ${FIDES_EXPORT_NAME})\n\nif (NOT FIDES_USE_EXTERNAL_RAPIDJSON)\n  install(DIRECTORY fidesrapidjson\n    DESTINATION ${FIDES_INSTALL_INCLUDE_DIR}/${kit_dir}/)\nendif()\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/fides_rapidjson.h\n  DESTINATION ${FIDES_INSTALL_INCLUDE_DIR}/${kit_dir}/)\n```\n\n----------------------------------------\n\nTITLE: Configuring C-only Library in CMake for KWSys\nDESCRIPTION: This snippet sets up a C-only library for KWSys if enabled. It configures target names, object libraries, and linking based on the KWSYS_SPLIT_OBJECTS_FROM_INTERFACE option. It also sets target properties and include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_ENABLE_C AND KWSYS_C_SRCS)\n if(KWSYS_SPLIT_OBJECTS_FROM_INTERFACE)\n    set(KWSYS_TARGET_C_INTERFACE ${KWSYS_NAMESPACE}_c)\n    set(KWSYS_TARGET_C_OBJECT ${KWSYS_NAMESPACE}_c_objects)\n    set(KWSYS_TARGET_C_LINK ${KWSYS_NAMESPACE}_c_private)\n    set(KWSYS_TARGET_C_INSTALL\n      ${KWSYS_TARGET_C_INTERFACE} ${KWSYS_TARGET_C_LINK})\n    set(KWSYS_LINK_DEPENDENCY INTERFACE)\n    add_library(${KWSYS_TARGET_C_OBJECT} OBJECT ${KWSYS_C_SRCS})\n    if(KWSYS_BUILD_SHARED OR KWSYS_BUILD_PIC)\n      set_property(TARGET ${KWSYS_TARGET_C_OBJECT} PROPERTY\n        POSITION_INDEPENDENT_CODE TRUE)\n    endif()\n    add_library(${KWSYS_TARGET_C_INTERFACE} INTERFACE)\n    add_library(${KWSYS_TARGET_C_LINK} INTERFACE)\n    target_link_libraries(${KWSYS_TARGET_C_LINK} INTERFACE\n      ${KWSYS_TARGET_C_INTERFACE})\n    target_sources(${KWSYS_TARGET_C_LINK} INTERFACE\n      $<TARGET_OBJECTS:${KWSYS_TARGET_C_OBJECT}>)\n  else()\n    set(KWSYS_TARGET_C_INTERFACE ${KWSYS_NAMESPACE}_c)\n    set(KWSYS_TARGET_C_OBJECT ${KWSYS_NAMESPACE}_c)\n    set(KWSYS_TARGET_C_LINK ${KWSYS_NAMESPACE}_c)\n    set(KWSYS_TARGET_C_INSTALL ${KWSYS_TARGET_C_LINK})\n    set(KWSYS_LINK_DEPENDENCY PUBLIC)\n    add_library(${KWSYS_TARGET_C_INTERFACE} ${KWSYS_LIBRARY_TYPE}\n      ${KWSYS_C_SRCS})\n  endif()\n  set_target_properties(${KWSYS_TARGET_C_OBJECT} PROPERTIES\n    LABELS \"${KWSYS_LABELS_LIB}\")\n\n  # Apply user-defined target properties to the library.\n  if(KWSYS_PROPERTIES_C)\n    set_target_properties(${KWSYS_TARGET_C_INTERFACE} PROPERTIES\n      ${KWSYS_PROPERTIES_C})\n  endif()\n\n  # Set up include usage requirement\n  if(COMMAND TARGET_INCLUDE_DIRECTORIES)\n    target_include_directories(${KWSYS_TARGET_C_INTERFACE} INTERFACE\n      $<BUILD_INTERFACE:${KWSYS_HEADER_ROOT}>)\n    if(KWSYS_INSTALL_INCLUDE_DIR)\n      target_include_directories(${KWSYS_TARGET_C_INTERFACE} INTERFACE\n        $<INSTALL_INTERFACE:${KWSYS_INSTALL_INCLUDE_DIR}>)\n    endif()\n  endif()\n\n  # Create an install target for the library.\n  if(KWSYS_INSTALL_LIBRARY_RULE)\n    install(TARGETS ${KWSYS_TARGET_C_INSTALL})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Sources and Headers for KISS FFT Module\nDESCRIPTION: This snippet defines the source files and header files that are part of the KISS FFT module in VTK. These files are crucial for the compilation and functionality of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\\n  kiss_fft.c\\n  tools/kiss_fastfir.c\\n  tools/kiss_fftnd.c\\n  tools/kiss_fftndr.c\\n  tools/kiss_fftr.c)\\n\\nset(headers\\n  kiss_fft_exports.h\\n  _kiss_fft_guts.h\\n  kiss_fft.h\\n  tools/kfc.h\\n  tools/kiss_fftnd.h\\n  tools/kiss_fftndr.h\\n  tools/kiss_fftr.h\\n  tools/vtkkissfft_fftnd.h\\n  tools/vtkkissfft_fftndr.h\\n  tools/vtkkissfft_fftr.h\\n  vtkkissfft_fft.h\\n  vtk_kiss_fft_mangle.h)\n```\n\n----------------------------------------\n\nTITLE: Finding Qt Package with vtk_module_find_package\nDESCRIPTION: This snippet uses the `vtk_module_find_package` macro to find the required Qt package with a specific version (5.9 or greater).  It also forwards the minimum minor version requirement and stores the Qt version in `Qt${vtk_qt_major_version}_VERSION`.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(\n  PACKAGE     \"Qt${vtk_qt_major_version}\"\n  VERSION     5.9\n  COMPONENTS  ${qt_components}\n  FORWARD_VERSION_REQ MINOR\n  VERSION_VAR         \"Qt${vtk_qt_major_version}_VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules and Project Setup for VTK\nDESCRIPTION: This snippet includes necessary CMake modules and sets up paths and directories for the token project within a VTK context. It prepares and adds required macro files for testing, options, and pre-installation steps for the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(cmake/tokenVersion.cmake)\\nproject(token VERSION ${token_VERSION} LANGUAGES CXX)\\n\\nset(token_cmake_dir ${PROJECT_SOURCE_DIR}/cmake)\\nlist(APPEND CMAKE_MODULE_PATH ${token_cmake_dir})\\n\\n\\ninclude(tokenMacros)\\ninclude(tokenTestingMacros)\\ninclude(tokenSetup)\\ninclude(tokenOptions)\\ninclude(tokenPreInstall)\\n\\nadd_subdirectory(token)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type and Optimizations - CMake\nDESCRIPTION: This section configures various optimizations and debug options based on the build type specified. It ensures that defaults are set if no build type is provided, and manages optimization flags for different environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Debug' as none was specified.\")\n  set(CMAKE_BUILD_TYPE Debug CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Release\")\n  set(cone_wasm_optimize \"BEST\")\n  set(cone_wasm_debuginfo \"NONE\")\nelseif (CMAKE_BUILD_TYPE STREQUAL \"MinSizeRel\")\n  set(cone_wasm_optimize \"SMALLEST_WITH_CLOSURE\")\n  set(cone_wasm_debuginfo \"NONE\")\nelseif (CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n  set(cone_wasm_optimize \"MORE\")\n  set(cone_wasm_debuginfo \"PROFILE\")\nelseif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(cone_wasm_optimize \"NO_OPTIMIZATION\")\n  set(cone_wasm_debuginfo \"DEBUG_NATIVE\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersHybrid Module with CMake\nDESCRIPTION: This CMake script defines the classes for the VTK::FiltersHybrid module and performs module configuration. It creates a list of 26 class names, adds them to the module, and sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAdaptiveDataSetSurfaceFilter\n  vtkBSplineTransform\n  vtkDepthSortPolyData\n  vtkDSPFilterDefinition\n  vtkDSPFilterGroup\n  vtkEarthSource\n  vtkFacetReader\n  vtkForceTime\n  vtkGenerateTimeSteps\n  vtkGreedyTerrainDecimation\n  vtkGridTransform\n  vtkImageToPolyDataFilter\n  vtkImplicitModeller\n  vtkPCAAnalysisFilter\n  vtkPolyDataSilhouette\n  vtkProcrustesAlignmentFilter\n  vtkProjectedTerrainPath\n  vtkRenderLargeImage\n  vtkTemporalArrayOperatorFilter\n  vtkTemporalDataSetCache\n  vtkTemporalFractal\n  vtkTemporalInterpolator\n  vtkTemporalShiftScale\n  vtkTemporalSnapToTimeStep\n  vtkTransformToGrid\n  vtkWeightedTransformFilter)\n\nvtk_module_add_module(VTK::FiltersHybrid\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersHybrid)\n```\n\n----------------------------------------\n\nTITLE: Generating and Building Projects with CMake - Shell\nDESCRIPTION: This block explains how to use CMake to generate build projects for Ogg libraries on various platforms. It covers setting up a build directory and running cmake commands to generate static or dynamic libraries. CMake should be installed as a requirement.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build\ncd build\ncmake -G YOUR-PROJECT-GENERATOR ..\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncmake -G YOUR-PROJECT-GENERATOR -DBUILD_SHARED_LIBS=1 ..\n```\n\n----------------------------------------\n\nTITLE: Check and Compile C++ Features\nDESCRIPTION: Defines a macro to test if specific C++ expressions can be compiled, mainly to verify the presence of C++11 standard library features. It iterates over file dependencies to dynamically generate code for compilation checks.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(CHECK_CXX_EXPRESSION_COMPILES EXPRESSION FILES VARIABLE)\n  set(SOURCE \"/* CHECK_CXX_EXPRESSION_COMPILES */\\n\")\n  foreach(FILE ${FILES})\n    set(SOURCE \"${SOURCE}#include <${FILE}>\\n\")\n  endforeach()\n  set(SOURCE \"${SOURCE}\\nint main()\\n{\\n\")\n  set(SOURCE \"${SOURCE}  static_cast<void>(${EXPRESSION});\\n\\n\")\n  set(SOURCE \"${SOURCE}  return 0;\\n}\\n\")\n  check_cxx_source_compiles(\"${SOURCE}\" \"${VARIABLE}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: Specifies exact versions of Python packages needed for VTK documentation and development. Includes Sphinx documentation generator and related extensions, parsing utilities, and styling components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nastroid==3.0.1\nfuro==2023.9.10\nmyst-parser[linkify]==2.0.0\nSphinx==7.2.6\nsphinx-autodoc2==0.5.0\nsphinx-copybutton==0.5.2\nsphinx_design==0.5.0\nsphinxcontrib-moderncmakedomain==3.27.0\nPygments==2.17.2\npyparsing==3.1.1\n```\n\n----------------------------------------\n\nTITLE: Handling Default Encoding and Testing for KWSys\nDESCRIPTION: This snippet sets the default encoding for Windows systems and conditionally enables testing if KWSys is configured standalone. It ensures the system behaves consistently across different environments and manages dependencies for testing utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT KWSYS_ENCODING_DEFAULT_CODEPAGE)\n  set(KWSYS_ENCODING_DEFAULT_CODEPAGE CP_ACP)\nendif()\n\nif(KWSYS_STANDALONE)\n  include(Dart)\n  mark_as_advanced(BUILD_TESTING DART_ROOT TCL_TCLSH)\n  if(BUILD_TESTING)\n    enable_testing()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Web Files to Build Directory\nDESCRIPTION: This snippet adds a custom command to copy the contents of the 'web' directory from the source directory to the build directory, ensuring that the necessary HTML and JavaScript files are available for the web application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  TARGET ConeMultiBackend\n  COMMAND\n    ${CMAKE_COMMAND} -E copy_directory\n      \"${CMAKE_CURRENT_SOURCE_DIR}/web\"\n      \"${CMAKE_CURRENT_BINARY_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Pipeline Update Methods in vtkAlgorithm\nDESCRIPTION: List of deprecated pipeline update methods in vtkAlgorithm class that will be removed in VTK 8.0.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint SetUpdateExtentToWholeExtent(int port);\nint SetUpdateExtentToWholeExtent();\nvoid SetUpdateExtent(int port,\n                     int piece,int numPieces, int ghostLevel);\nvoid SetUpdateExtent(\n  int piece,int numPieces, int ghostLevel);\nvoid SetUpdateExtent(int port, int extent[6]);\nvoid SetUpdateExtent(int extent[6]);\n```\n\n----------------------------------------\n\nTITLE: Parsing Delimited Numbers with fast_float in C++\nDESCRIPTION: Example showing how to parse multiple comma-delimited numbers from a single string. This demonstrates handling delimiters and sequential parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n  std::string input = \"234532.3426362,7869234.9823,324562.645\";\n  double result;\n  auto answer = fast_float::from_chars(input.data(), input.data() + input.size(), result);\n  if (answer.ec != std::errc()) {\n    // check error\n  }\n  // we have result == 234532.3426362.\n  if (answer.ptr[0] != ',') {\n    // unexpected delimiter\n  }\n  answer = fast_float::from_chars(answer.ptr + 1, input.data() + input.size(), result);\n  if (answer.ec != std::errc()) {\n    // check error\n  }\n  // we have result == 7869234.9823.\n  if (answer.ptr[0] != ',') {\n    // unexpected delimiter\n  }\n  answer = fast_float::from_chars(answer.ptr + 1, input.data() + input.size(), result);\n  if (answer.ec != std::errc()) {\n    // check error\n  }\n  // we have result == 324562.645.\n```\n\n----------------------------------------\n\nTITLE: Setting up XDMF2 Project Configuration in CMake\nDESCRIPTION: Initial project configuration for XDMF2 with conditional CMake version requirements, project declaration, and ANSI standard flags. Contains VTK-specific conditionals for integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles the CMake minimum version.\ncmake_minimum_required(VERSION 2.8)\nif(POLICY CMP0053)\n  cmake_policy(SET CMP0053 NEW) # CMake 3.1\nendif()\nendif ()\n\nproject(xdmf2)\n\n#options\nset(XDMF_USE_ANSI_STDLIB 1)\nset(CMAKE_C_FLAGS \"${CMAKE_ANSI_CFLAGS} ${CMAKE_C_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Boolean Logic and Operators in VTK\nDESCRIPTION: Comprehensive set of boolean operators for logical evaluation, including multi-input logical operations and various logical transformations\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_4\n\nLANGUAGE: mathematical\nCODE:\n```\ntrue: Represents truth state\nfalse: Represents false state\nand: Logical AND\nmand: Multi-input logical AND\nmor: Multi-input logical OR\nnand: Logical NAND\nnor: Logical NOR\nnot: Logical NOT\nor: Logical OR\nxor: Logical XOR\nxnor: Logical XNOR\n```\n\n----------------------------------------\n\nTITLE: Finding OpenSlide Package\nDESCRIPTION: This uses the vtk_module_find_package macro to locate the OpenSlide library.  This ensures that the OpenSlide library is available and its include directories are known for compilation. The PACKAGE argument specifies the name of the CMake package to find.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PACKAGE OpenSlide)\n```\n\n----------------------------------------\n\nTITLE: Scan VTK module files\nDESCRIPTION: This snippet uses the `vtk_module_scan` macro to scan the `vtk.module` files found in the previous step. It specifies the modules to request, the modules to provide, and whether to enable testing. The results are stored in the `my_modules` variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_scan(\n  MODULE_FILES        ${vtk_module_files}\n  REQUEST_MODULES     VTKMY::Common VTKMY::Imaging VTKMY::Unsorted\n  PROVIDES_MODULES    my_modules\n  ENABLE_TESTS        \"${BUILD_TESTING}\")\n```\n\n----------------------------------------\n\nTITLE: FFMPEG 5.0 Compatibility Check\nDESCRIPTION: Handles FFMPEG 5.0 specific requirements, including mandatory swresample library dependency check and configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(ffmpeg_libraries)\nif (NOT FFMPEG_VERSION VERSION_LESS \"5.0\")\n  if (NOT FFMPEG_swresample_FOUND)\n    message(FATAL_ERROR\n      \"FFMPEG 5.0 requires the `swresample` library.\")\n  endif ()\n\n  list(APPEND ffmpeg_libraries\n    FFMPEG::swresample)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Support for VTK IOSS in CMake\nDESCRIPTION: Sets up MPI support for the VTK IOSS module if the VTK::mpi target exists. This is necessary because MPI dependencies are not well-guarded in IOSS headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::mpi)\n  # The MPI optional dependency is not well-guarded in IOSS headers.\n  vtk_module_link(VTK::ioss\n    INTERFACE\n      VTK::mpi)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP Unicode Filename Writer Test in CMake for VTK\nDESCRIPTION: Adds a test for writing BMP images to a Unicode filename in VTK without validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestWriteToUnicodeFileBMP,TestWriteToUnicodeFile.cxx,NO_VALID\n    \"image.bmp\")\n```\n\n----------------------------------------\n\nTITLE: Configuring pread/pwrite Usage for VFDs in CMake for HDF5\nDESCRIPTION: This snippet defines a CMake option to enable using pread/pwrite for VFDs in HDF5. It sets the H5_HAVE_PREADWRITE variable if the option is enabled and the system supports pread and pwrite.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\noption (HDF5_ENABLE_PREADWRITE \"Use pread/pwrite in sec2/log/core VFDs in place of read/write (when available)\" ON)\nmark_as_advanced (HDF5_ENABLE_PREADWRITE)\nif (HDF5_ENABLE_PREADWRITE AND H5_HAVE_PREAD AND H5_HAVE_PWRITE)\n  set (H5_HAVE_PREADWRITE 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Minor Improvements for CAVE Collaboration - C++\nDESCRIPTION: This section details enhancements aimed at supporting collaboration in CAVEs. It includes updates to vtkFlagpoleLabel for off-axis projection mode, customization options in vtkVRCollaborationClient for the avatar's initial up vector, and the flexibility to specify any object as a source for Move3DEvents for local pose sharing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/hmd-cave-collaboration.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n/*\n * Other minor improvements supporting collaboration in CAVEs include:\n * - vtkFlagpoleLabel now supports CAVEs by making the label face the camera eye point (rather than the desktop camera position) when in off-axis projection mode\n * - vtkVRCollaborationClient now allows customizing the default initial avatar up vector from the new default of [0, 1, 0]\n * - vtkVRCollaborationClient now allows specifying an arbitrary object as the source of Move3DEvents used to share local pose with collaborators\n * - vtkOpenGLAvatar now provides api access to get the associated avatar label\n */\n```\n\n----------------------------------------\n\nTITLE: Build VTK modules\nDESCRIPTION: This snippet uses the `vtk_module_build` macro to build the VTK modules.  It sets installation export, CMake destination, version, and SOVERSION.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_build(\n  MODULES             ${my_modules}\n  INSTALL_EXPORT      VTKMY\n  CMAKE_DESTINATION   \"${my_config_dir}\"\n  VERSION             \"${VTKMY_VERSION}\"\n  SOVERSION           \"1\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module with CMake\nDESCRIPTION: This snippet adds the GUISupportMFC module to the VTK build using the classes specified in the 'classes' variable. The `vtk_module_add_module` and `vtk_add_test_mangling` are specific commands used for building and testing within the VTK framework. This requires the VTK CMake utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkMFCWindow\n  )\n\nvtk_module_add_module(VTK::GUISupportMFC\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::GUISupportMFC)\n```\n\n----------------------------------------\n\nTITLE: Configuring Packaging and Installation for XDMF2\nDESCRIPTION: Sets up installation paths and creates a configuration file for XDMF2. This section is conditionally disabled when building within VTK as VTK handles the installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n##########################\n#packaging\nif (FALSE) # XXX(kitware): VTK handles installation.\nif(NOT XDMF_INSTALL_LIB_DIR)\n  set(XDMF_INSTALL_LIB_DIR /lib)\nendif()\nif(NOT XDMF_INSTALL_INCLUDE_DIR)\n  set(XDMF_INSTALL_INCLUDE_DIR /include/Xdmf)\nendif()\n\nset(XDMF2_OUTPUT_PATH ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR})\nconfigure_file(${xdmf2_SOURCE_DIR}/XDMFConfig.cmake.in\n  ${xdmf2_BINARY_DIR}/XDMFConfig.cmake @ONLY IMMEDIATE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: VTK Windows Mangle Workaround - C++\nDESCRIPTION: Shows VTK's solution for maintaining compatibility with Windows API naming while avoiding conflicts, providing multiple method names to support both mangled and unmangled versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.WindowsMangling.txt#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// See vtkWin32Header.h for definition of VTK_WORKAROUND_WINDOWS_MANGLE.\n#ifdef VTK_WORKAROUND_WINDOWS_MANGLE\n# define GetClassNameA GetClassName\n# define GetClassNameW GetClassName\n#endif\n  const char* GetClassName() const;\n#ifdef VTK_WORKAROUND_WINDOWS_MANGLE\n# undef GetClassNameW\n```\n\n----------------------------------------\n\nTITLE: OpenGL ES Configuration for GLAD\nDESCRIPTION: Configures GLAD for OpenGL ES 3 support based on platform conditions. Enables GLES3 support when building for Android or when explicitly requested via VTK_OPENGL_USE_GLES flag.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/glad/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkOpenGLOptions)\nif(VTK_OPENGL_USE_GLES OR ANDROID AND NOT VTK_IOS_BUILD)\n  set(VTK_MODULE_vtkglad_GLES3 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking to MPI for VTK::diy2\nDESCRIPTION: This CMake code conditionally links the VTK::diy2 module to MPI if the `VTK::mpi` target is defined. It also sets the `DIY_HAS_MPI` preprocessor definition accordingly, allowing diy2 to be compiled with or without MPI support. This ensures that diy2 can function in both serial and parallel environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::mpi)\n  vtk_module_link(VTK::diy2\n    INTERFACE\n      VTK::mpi)\n\n  vtk_module_definitions(VTK::diy2 INTERFACE DIY_HAS_MPI=1)\nelse ()\n  vtk_module_definitions(VTK::diy2 INTERFACE DIY_HAS_MPI=0)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Project Files\nDESCRIPTION: Copies and configures essential Android project configuration files for building the APK\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/AndroidManifest.xml\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/AndroidManifest.xml\"\n  COPYONLY)\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/ant.properties.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/ant.properties\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining Public Classes for VTK Filters HyperTree Module in CMake\nDESCRIPTION: Sets up a list of public classes for the VTK Filters HyperTree module. These classes include various HyperTreeGrid operations and transformations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkHyperTreeGridAxisClip\n  vtkHyperTreeGridAxisCut\n  vtkHyperTreeGridAxisReflection\n  vtkHyperTreeGridCellCenters\n  vtkHyperTreeGridCellCenterStrategy\n  vtkHyperTreeGridCellSizeStrategy\n  vtkHyperTreeGridContour\n  vtkHyperTreeGridDepthLimiter\n  vtkHyperTreeGridEvaluateCoarse\n  vtkHyperTreeGridExtractGhostCells\n  vtkHyperTreeGridFeatureEdges\n  vtkHyperTreeGridGenerateFields\n  vtkHyperTreeGridGeometry\n  vtkHyperTreeGridGradient\n  vtkHyperTreeGridPlaneCutter\n  vtkHyperTreeGridRemoveGhostCells\n  vtkHyperTreeGridThreshold\n  vtkHyperTreeGridToDualGrid\n  vtkHyperTreeGridToUnstructuredGrid\n  vtkHyperTreeGridValidCellStrategy\n  vtkHyperTreeGridVisibleLeavesSize\n  vtkHyperTreeGridTotalVisibleVolumeStrategy\n  vtkImageDataToHyperTreeGrid\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Project Build Settings with CMake\nDESCRIPTION: Initial CMake configuration that sets up project parameters and output directories using GNUInstallDirs. Defines where binaries, libraries, and archives will be output during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/UsingVTK/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\nproject(UsingVTK)\n\ninclude(GNUInstallDirs)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: VTK Package Dependency Management\nDESCRIPTION: Locates and configures VTK libraries with specific required components for Qt Quick integration and core functionality\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickBoxWidget/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    CommonColor\n    GUISupportQtQuick)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping ${MYNAME}: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Test Executables for OpenXR Using CMake\nDESCRIPTION: This snippet makes use of the CMake function `vtk_test_cxx_executable` to create test executables from the pre-configured `openxrremoting_tests`. This is pivotal for running the OpenXR remoting tests as standalone executables within the VTK framework environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingOpenXRRemotingCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Eigen3 as a Third-Party Module in VTK\nDESCRIPTION: This CMake code uses the `vtk_module_third_party` macro to configure Eigen3 as a third-party module within VTK.  It specifies the license, copyright, download location, version, and other related properties for the Eigen3 library.  The module is set up as a header-only library, includes standard include directories, and creates an external package.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkeigen/COPYING.BSD\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2011, Intel Corporation\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/eigen.git@for/vtk-20250101-3.4.0\"\n    VERSION\n      \"3.4.0\"\n    HEADER_ONLY\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE Eigen3\n    TARGETS Eigen3::Eigen3\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory Overrides in CMake\nDESCRIPTION: Iterates through the parallel overrides list to declare object factory overrides for each parallel class. This allows VTK to use the parallel versions of these classes when appropriate.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (parallel_override IN LISTS parallel_overrides)\n  vtk_object_factory_declare(\n    BASE      vtk${parallel_override}\n    OVERRIDE  vtkP${parallel_override})\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests with Widget Specification\nDESCRIPTION: This snippet demonstrates using `vtk_add_test_cxx` to add multiple test executables, specifying a widget type using the `-w` flag.  Each line specifies a test executable based on a main test file, an associated source file, and a validation flag (`NO_VALID`).  Some tests have been commented out, likely due to issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_add_test_cxx(vtkGUISupportQtCxxTests tests\n  -w QVTKOpenGLStereoWidget\n  TestQVTKOpenGLStereoWidgetQWidgetWidget,TestQWidgetWidget.cxx,NO_VALID\n  TestQVTKOpenGLStereoWidgetPicking,TestQtPicking.cxx,NO_VALID\n  TestQVTKOpenGLStereoWidgetSwapWindows,TestQtSwapWindows.cxx,NO_VALID\n  TestQVTKOpenGLStereoWidget,TestQtWidget.cxx\n  TestQVTKOpenGLStereoWidgetWithDisabledInteractor,TestQtWithDisabledInteractor.cxx\n  TestQVTKOpenGLStereoWidgetWithMSAA,TestQtWithMSAA.cxx\n  TestQVTKOpenGLStereoWidgetWithChartHistogram2D,TestQtWithChartHistogram2D.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable in CMake\nDESCRIPTION: Creates the final test executable that will run all the configured VTK IO Geometry tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOGeometryCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Managing Installation Directories and Backward Compatibility in CMake\nDESCRIPTION: This code handles the setup of installation directories for Eigen header files and CMake package configuration files. It supports backward compatibility for deprecated directory variables and ensures paths are relative to CMAKE_INSTALL_PREFIX if specified absolutely. It relies on standard CMake variables and requires CMake for execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles installation.\n# Backward compatibility support for EIGENE_INCLUDE_INSTALL_DIR\nif(EIGEN_INCLUDE_INSTALL_DIR)\n  message(WARNING \"EIGEN_INCLUDE_INSTALL_DIR is deprecated. Use INCLUDE_INSTALL_DIR instead.\")\nendif()\n\nif(EIGEN_INCLUDE_INSTALL_DIR AND NOT INCLUDE_INSTALL_DIR)\n  set(INCLUDE_INSTALL_DIR ${EIGEN_INCLUDE_INSTALL_DIR}\n      CACHE PATH \"The directory relative to CMAKE_INSTALL_PREFIX where Eigen header files are installed\")\nelse()\n  set(INCLUDE_INSTALL_DIR\n      \"${CMAKE_INSTALL_INCLUDEDIR}/eigen3\"\n      CACHE PATH \"The directory relative to CMAKE_INSTALL_PREFIX where Eigen header files are installed\"\n      )\nendif()\nset(CMAKEPACKAGE_INSTALL_DIR\n    \"${CMAKE_INSTALL_DATADIR}/eigen3/cmake\"\n    CACHE PATH \"The directory relative to CMAKE_INSTALL_PREFIX where Eigen3Config.cmake is installed\"\n    )\nset(PKGCONFIG_INSTALL_DIR\n    \"${CMAKE_INSTALL_DATADIR}/pkgconfig\"\n    CACHE PATH \"The directory relative to CMAKE_INSTALL_PREFIX where eigen3.pc is installed\"\n    )\nendif ()\n\nforeach(var INCLUDE_INSTALL_DIR CMAKEPACKAGE_INSTALL_DIR PKGCONFIG_INSTALL_DIR)\n  # If an absolute path is specified, make it relative to \"{CMAKE_INSTALL_PREFIX}\".\n  if(IS_ABSOLUTE \"${${var}}\")\n    file(RELATIVE_PATH \"${var}\" \"${CMAKE_INSTALL_PREFIX}\" \"${${var}}\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting VTK-m Target Information for Fides\nDESCRIPTION: Configures VTK-m specific target information for the Fides library, specifying which source files should be compiled for device execution and enabling unused symbol dropping.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/predefined/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtkm_add_target_information(fides\n    DROP_UNUSED_SYMBOLS\n    DEVICE_SOURCES\n      DataModelHelperFunctions.cxx\n      DataModelFactory.cxx\n      InternalMetadataSource.cxx\n      PredefinedDataModel.cxx\n      SupportedDataModels.cxx\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Boost Infovis Tests in CMake\nDESCRIPTION: Sets up C++ test configuration for VTK's Infovis Boost module. Configures test execution without data, validation, or output requirements, specifically for variant serialization testing. Creates a test executable for the defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Boost/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkInfovisBoostCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestVariantSerialization.cxx\n  )\nvtk_test_cxx_executable(vtkInfovisBoostCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Dependencies\nDESCRIPTION: Sets up the Boost package dependency with version requirements and links it to the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/BoostGraphAlgorithms/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(\n  PACKAGE Boost\n  FORWARD_VERSION_REQ EXACT\n  VERSION_VAR         \"@Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@.@Boost_SUBMINOR_VERSION@\")\nvtk_module_link(VTK::InfovisBoostGraphAlgorithms\n  PUBLIC\n    Boost::boost)\nvtk_add_test_mangling(VTK::InfovisBoostGraphAlgorithms)\n```\n\n----------------------------------------\n\nTITLE: Setting Private Headers for VTK RenderingFreeType in CMake\nDESCRIPTION: Specifies the private headers for the VTK RenderingFreeType module, which includes the object factory header.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_headers\n  ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests for VTK Module in CMake\nDESCRIPTION: This CMake command adds multiple Python test scripts to the VTK project. It specifies that these tests should run without validation (NO_VALID), without producing output (NO_OUTPUT), and without requiring input data (NO_DATA). The tests being added are for average-to-cells, average-to-points, and slice operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_VALID NO_OUTPUT NO_DATA\n  TestVTKMAverageToCells.py\n  TestVTKMAverageToPoints.py\n  TestVTKMSlice.py\n  )\n```\n\n----------------------------------------\n\nTITLE: VTK Package Dependencies\nDESCRIPTION: Finds and configures VTK package with specific required components for QtQuick and VTK rendering\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickCone/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    FiltersSources\n    GUISupportQtQuick)\n\nif (NOT VTK_FOUND)\n  message(\"Skipping ${MYNAME}: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define VTK Module Test Data\nDESCRIPTION: This CMake function call defines the paths to various test data files used by the VTK module.  It lists specific files with extensions like .htg, .vti, .vtp, .vtr, .vts, .vtu, .vtpc, and .vtm, representing different data object types such as hyper tree grids, image data, poly data, rectilinear grids, structured grids, unstructured grids, partitioned dataset collections, and multiblock datasets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/DataObjects/hyper_tree_grid_template.htg\n  Data/DataObjects/image_data_template.vti\n  Data/DataObjects/poly_data_template.vtp\n  Data/DataObjects/rectilinear_grid_template.vtr\n  Data/DataObjects/structured_grid_template.vts\n  Data/DataObjects/unstructured_grid_wavelet_duplicate.vtu\n  Data/DataObjects/partitioned_dataset_collection_template.vtpc\n  Data/DataObjects/multiblock_dataset_template.vtm)\n```\n\n----------------------------------------\n\nTITLE: Getting the commit hash of the upstream branch\nDESCRIPTION: This command retrieves the short commit hash (8 characters) of the `xdmf2vtk-upstream` branch.  This hash is used to record the starting point for the next update.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"git rev-parse --short=8 xdmf2vtk-upstream\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK TestingRendering Module in CMake\nDESCRIPTION: This CMake code snippet defines the necessary components for setting up the VTK TestingRendering module. It establishes a list of classes (vtkTesting, vtkTestingInteractor, vtkTestingObjectFactory) and headers (vtkMultiBaselineRegressionTest.h), along with nowrap headers (vtkRegressionTestImage.h). It uses the vtk_module_add_module function to add the module and vtk_add_test_mangling function to apply test mangling, which is used to facilitate testing within the VTK framework. The code works with the VTK build system and is essential for managing test components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Rendering/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkTesting\n  vtkTestingInteractor\n  vtkTestingObjectFactory)\n\nset(headers\n  vtkMultiBaselineRegressionTest.h)\n\nset(nowrap_headers\n  vtkRegressionTestImage.h)\n\nvtk_module_add_module(VTK::TestingRendering\n  CLASSES ${classes}\n  HEADERS ${headers}\n  NOWRAP_HEADERS ${nowrap_headers})\nvtk_add_test_mangling(VTK::TestingRendering)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Structure in CMake\nDESCRIPTION: This CMake code registers specific data files for VTK module testing and adds the C++ subdirectory to the build system. It specifies two data files (a binary VTK file and a VTU file) that will be used during testing of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Generic/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/office.binary.vtk\n  Data/quadraticTetra01.vtu)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Custom Uninstall Target Creation\nDESCRIPTION: Creates a custom uninstall target for VTK if not already defined, using a custom CMake script for uninstallation\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET uninstall)\n  add_custom_target(uninstall\n    COMMAND\n      \"${CMAKE_COMMAND}\"\n        \"-DCMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}\"\n        -P \"${CMAKE_CURRENT_LIST_DIR}/CMake/vtkUninstall.cmake\"\n    USES_TERMINAL\n    COMMENT \"Uninstalling VTK\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running VTK Tests with CTest\nDESCRIPTION: This command shows how to run a specific VTK test using CTest. CTest is a testing tool that is part of CMake and allows developers to run and manage tests for their projects. The test is run in Release mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n\nVTK-build > ctest -C Release -R <name_of_test>\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Version Information from Header\nDESCRIPTION: Extracts major, minor, and bugfix version numbers from 'hpdf_version.h' to set the project version. This requires the presence of the header file in the designated directory and uses regular expression matching to locate version strings. The extracted versions are used to define the project version in CMake.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/include/hpdf_version.h HPDF_VERSION_H_CONTENTS REGEX \" HPDF_(MAJOR|MINOR|BUGFIX)_VERSION \")\nstring(REGEX MATCH \"MAJOR_VERSION [0-9]+\"  HPDF_MAJOR_VERSION  ${HPDF_VERSION_H_CONTENTS})\nstring(REGEX MATCH \"MINOR_VERSION [0-9]+\"  HPDF_MINOR_VERSION  ${HPDF_VERSION_H_CONTENTS})\nstring(REGEX MATCH \"BUGFIX_VERSION [0-9]+\" HPDF_BUGFIX_VERSION ${HPDF_VERSION_H_CONTENTS})\nstring(REGEX MATCH \"[0-9]+\" HPDF_MAJOR_VERSION  ${HPDF_MAJOR_VERSION})\nstring(REGEX MATCH \"[0-9]+\" HPDF_MINOR_VERSION  ${HPDF_MINOR_VERSION})\nstring(REGEX MATCH \"[0-9]+\" HPDF_BUGFIX_VERSION ${HPDF_BUGFIX_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOCellGrid Module Classes in CMake\nDESCRIPTION: Defines the classes that make up the VTK IOCellGrid module and adds them to the module configuration. Includes classes for cell grid reading, writing, querying, and composite operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CellGrid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkIOCellGrid\n  vtkCellGridIOQuery\n  vtkCellGridReader\n  vtkCellGridWriter\n  vtkCompositeCellGridReader\n  vtkDGIOResponder\n)\n\nvtk_module_add_module(VTK::IOCellGrid\n  CLASSES ${classes}\n)\n```\n\n----------------------------------------\n\nTITLE: Using vtkFrustum Widget in VTK Rendering\nDESCRIPTION: The vtkFrustum has a widget representation that can be manipulated through various controls. These include rotation handles, translation handles, angle adjustment handles, and near plane distance handles. The frustum can be used in filters that rely on implicit functions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/frustum-implicit-widget.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvtkFrustumWidget* widget = vtkFrustumWidget::New();\nwidget->SetInteractor(renderWindowInteractor);\nwidget->CreateDefaultRepresentation();\n\nvtkFrustumRepresentation* rep = vtkFrustumRepresentation::SafeDownCast(widget->GetRepresentation());\nrep->SetFrustum(frustum);\n\nwidget->EnabledOn();\nrenderWindow->Render();\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GL2PS C++ Tests\nDESCRIPTION: Sets up C++ test cases for the VTK GL2PS module using CMake. Defines test configuration with NO_DATA, NO_VALID, and NO_OUTPUT flags, specifically for TestIncludeGL2PS.cxx. Creates a test executable for the defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkgl2psCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeGL2PS.cxx)\nvtk_test_cxx_executable(vtkgl2psCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK XML Writer Classes for Parallel IO in CMake\nDESCRIPTION: This snippet defines a list of VTK XML writer classes specifically designed for parallel data processing and IO operations. These classes handle various data types and structures in a parallel computing environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkXMLCompositeDataSetWriterHelper\n  vtkXMLDataWriterHelper\n  vtkXMLPartitionedDataSetCollectionWriter\n  vtkXMLPartitionedDataSetWriter\n  vtkXMLWriter2\n  vtkXMLPDataObjectWriter\n  vtkXMLPDataSetWriter\n  vtkXMLPDataWriter\n  vtkXMLPHierarchicalBoxDataWriter\n  vtkXMLPHyperTreeGridWriter\n  vtkXMLPImageDataWriter\n  vtkXMLPMultiBlockDataWriter\n  vtkXMLPPolyDataWriter\n  vtkXMLPRectilinearGridWriter\n  vtkXMLPStructuredDataWriter\n  vtkXMLPStructuredGridWriter\n  vtkXMLPTableWriter\n  vtkXMLPUniformGridAMRWriter\n  vtkXMLPUnstructuredDataWriter\n  vtkXMLPUnstructuredGridWriter)\n```\n\n----------------------------------------\n\nTITLE: Running Rendering Core Tests with WebGPU\nDESCRIPTION: To verify the rendering core operations with WebGPU, this snippet edits the module file for linking dependencies, then runs the tests by setting an environment variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport VTK_GRAPHICS_BACKEND=WEBGPU\n./bin/vtkRenderingCoreCxxTests\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Arrays in ADIOS2 VTX Reader in C++\nDESCRIPTION: This snippet ensures the ADIOS2 VTX reader now reports an error when attempting to read a missing array, increasing robustness and avoiding silent failures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/adios2-vtx-reader-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nif (arrayNotFound) {\n    vtkErrorMacro(\"Missing array detected.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Catalyst Conduit Properties in CMake\nDESCRIPTION: This snippet forwards and sets properties related to Catalyst conduits in the VTK module. It uses CMake to query and apply 'CATALYST_WITH_EXTERNAL_CONDUIT' properties on the 'catalyst::catalyst' target. Key parameters include the property to manage and the relevant module or target. This ensures proper integration of external conduit configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Catalyst/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Forward Catalyst \"conduit is external\" property.\nget_property(catalyst_conduit_is_external TARGET catalyst::catalyst\n  PROPERTY CATALYST_WITH_EXTERNAL_CONDUIT)\nvtk_module_set_property(VTK::catalyst\n  PROPERTY  CATALYST_WITH_EXTERNAL_CONDUIT\n  VALUE     \"${catalyst_conduit_is_external}\")\nvtk_module_set_property(VTK::catalyst APPEND\n  PROPERTY  EXPORT_PROPERTIES\n  VALUE     CATALYST_WITH_EXTERNAL_CONDUIT)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for VTK Design Documents in Markdown\nDESCRIPTION: This code snippet uses the toctree directive to create a table of contents for VTK design documents. It specifies a maximum depth of 1 and includes a caption. The listed items are links to various design document files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n:caption: Contents\nVTKFileFormats\nsmptools\narray_dispatch\ndata_assembly\n\nIOLegacyInformationFormat\nIOXMLInformationFormat\nIOXMLTimeInFieldData\n\nMomentInvariantsArchitecture\n\nWebAssemblyTestSuiteArchitecture\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Module Classes in VTK CMake Configuration\nDESCRIPTION: Sets up a list of classes to be included in the VTK::IOAsynchronous module, specifically the vtkThreadedImageWriter class for threaded image writing operations\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Asynchronous/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkThreadedImageWriter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdmf Library Compilation in CMake\nDESCRIPTION: Sets up the compilation of the Xdmf library, including source files, linking with XdmfCore and XdmfDSM, and configuration of version properties. It also handles platform-specific settings for Windows.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(XdmfSources\n  XdmfAggregate\n  XdmfAttribute\n  # ... (other source files)\n  XdmfUnstructuredGrid)\n\nif (FALSE)\n  add_library(${XDMF_LIBNAME} ${XdmfSources})\n  SET_TARGET_PROPERTIES(\n    ${XDMF_LIBNAME} PROPERTIES\n    VERSION ${XDMF_VERSION}\n    SOVERSION ${XDMF_MAJOR_VERSION}\n    )\n  if(XDMF_BUILD_DSM)\n    target_link_libraries(${XDMF_LIBNAME} XdmfCore XdmfDSM)\n  else(XDMF_BUILD_DSM)\n    target_link_libraries(${XDMF_LIBNAME} XdmfCore)\n  endif(XDMF_BUILD_DSM)\nelse ()\n  # ... (VTK-specific module configuration)\nendif ()\n\nif(WIN32)\n  if (BUILD_SHARED_LIBS)\n    set_target_properties(xdmf3 PROPERTIES\n      DEFINE_SYMBOL XDMF_EXPORTS)\n  endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MetaIO Namespace and Target\nDESCRIPTION: Sets up the MetaIO namespace and target configuration based on whether it's being built for VTK, ITK or standalone use. Includes shared library definitions and project naming.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/vtkmetaio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(METAIO_FOR_VTK)\n  set(METAIO_NAMESPACE \"vtkmetaio\")\n  set(METAIO_TARGET \"metaio\")\n  set(METAIO_INSTALL_NO_LIBRARIES TRUE)\n  set(METAIO_INSTALL_NO_DEVELOPMENT TRUE)\n  if(BUILD_SHARED_LIBS)\n    add_definitions(-Dvtkmetaio_BUILD_SHARED_LIBS)\n  endif()\nelseif(\"${METAIO_NAMESPACE}\" STREQUAL \"ITKMetaIO\")\n  set(METAIO_FOR_ITK 1)\nelseif(NOT METAIO_NAMESPACE)\n  set(METAIO_NAMESPACE MetaIO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Socket Communicator Test\nDESCRIPTION: Configures a socket communication test for VTK that runs two processes in parallel using Python test driver. Only builds when Python is available and not targeting Emscripten.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (Python3_EXECUTABLE AND\n    NOT CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  vtk_module_test_executable(\n    vtkParallelCore-TestSocketCommunicator TestSocketCommunicator.cxx)\n\n  add_test(NAME vtkParallelCore-TestSocketCommunicator\n           COMMAND ${Python3_EXECUTABLE}\n                   ${VTK_SOURCE_DIR}/CMake/vtkTestDriver.py\n                   # indicate that the processes are not run sequentially,\n                   --process\n                     $<TARGET_FILE:vtkParallelCore-TestSocketCommunicator>\n                     -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n                     --server\n                   --process\n                     $<TARGET_FILE:vtkParallelCore-TestSocketCommunicator>\n                     -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n          )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: This snippet uses the 'vtk_module_add_module' command to create a VTK module named 'VTKMY::Unsorted', integrating the specified classes into the library structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Unsorted/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTKMY::Unsorted\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Interaction Tests in CMake\nDESCRIPTION: Adds multiple Python test files for VTK interaction styles when onscreen rendering is available. Includes tests for various interaction modes like fly-to, rubber band zoom, joystick controls, and trackball manipulation. Sets specific properties for the rubber band zoom perspective test to run serially.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkOpenGLOptions)\nif (vtk_can_do_onscreen AND NOT VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\n  vtk_add_test_python(\n    TestFlyTo.py\n    TestStyleRubberBandZoom.py\n    TestStyleRubberBandZoomPerspective.py,NO_RT\n    TestInteractorStyleTerrain.py\n    TestStyleBaseSpike.py\n    TestStyleJoystickActor.py\n    TestStyleJoystickCamera.py\n    TestStyleTerrain.py\n    TestStyleTrackballActor.py\n    TestStyleTrackballCamera.py\n    TestStyleUser.py\n    )\n\n  set_tests_properties(VTK::InteractionStylePython-TestStyleRubberBandZoomPerspective\n                       PROPERTIES RUN_SERIAL ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining UnstructuredGrid Structure in XML\nDESCRIPTION: This snippet defines the structure of an UnstructuredGrid element in VTK's XML format, outlining how points and cells are stored similarly to PolyData.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"UnstructuredGrid\" ...>\n  <UnstructuredGrid>\n    <Piece NumberOfPoints=\"#\" NumberOfCells=\"#\">\n    <PointData>...</PointData>\n    <CellData>...</CellData>\n    <Points>...</Points>\n    <Cells>...</Cells>\n    </Piece>\n  </UnstructuredGrid>\n</VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that C++ source code for the VTK project is located in this directory and should be included in the compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/SceneGraph/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK ANARI Module\nDESCRIPTION: Sets up test name mangling for the VTK::RenderingAnari module to prevent test name collisions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingAnari)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Test Executable for OCCT Reader\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` macro to create an executable for the VTK test. It specifies the name of the test executable. This likely links necessary VTK libraries and OCCT libraries to run the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OCCT/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOOCCTCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Vector Return Value Example\nDESCRIPTION: Demonstrates how variable and vector definitions return values in ExprTk. For variables, it returns the initialization value, and for vectors, it returns the first element.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_46\n\nLANGUAGE: cpp\nCODE:\n```\n8 == ((var x := 7;) + 1)\n4 == (var y[3] := {4, 5, 6};)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing VTK FreeType Headers in CMake\nDESCRIPTION: Configures the vtk_freetype.h header file using a template and installs it to the appropriate location. This ensures that the FreeType headers are properly included in the VTK installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_freetype.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_freetype.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_freetype.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Examples Build Option in CMake\nDESCRIPTION: Configures build option for HDF5 examples, with VTK-specific hardcoding to disable examples by default. In the original HDF5 configuration, examples would be built by default with the option being ON.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS \"${HDF5_SOURCE_DIR}/examples\" AND IS_DIRECTORY \"${HDF5_SOURCE_DIR}/examples\")\n  if (FALSE) # XXX(kitware): Hardcode settings.\n  option (HDF5_BUILD_EXAMPLES  \"Build HDF5 Library Examples\" ON)\n  else ()\n  set(HDF5_BUILD_EXAMPLES OFF)\n  endif ()\n  if (HDF5_BUILD_EXAMPLES)\n    add_subdirectory (examples)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Classes and Headers\nDESCRIPTION: Defines the main and private classes and headers needed for VTK's Python wrapping functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/PythonCore/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  PyVTKEnum\n  PyVTKExtras\n  PyVTKNamespace\n  PyVTKObject\n  PyVTKSpecialObject\n  PyVTKTemplate\n  vtkPythonArgs\n  vtkPythonCommand\n  vtkPythonOverload\n  vtkPythonUtil\n  vtkSmartPyObject)\n\nset(private_classes\n  PyVTKMethodDescriptor\n  PyVTKReference)\n\nset(headers\n  vtkPythonCompatibility.h)\n\nset(private_headers\n  PyVTKExtras.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Large Data Test Paths in CMake\nDESCRIPTION: Conditional block that sets up test data paths for LSDyna-related testing when VTK_USE_LARGE_DATA is enabled. Includes various data directories for ale, foam, hemi.draw, bug fixes, and impact test cases. Also adds the Cxx subdirectory to the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LSDyna/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_module_test_data(\n    Data/LSDyna/ale/,REGEX:.*\n    Data/LSDyna/foam/,REGEX:.*\n    Data/LSDyna/hemi.draw/,REGEX:.*\n    Data/LSDyna/bug_14713/,REGEX:.*\n    Data/LSDyna/impact/,REGEX:.*)\n\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Parser Limits in ExprTk (C++)\nDESCRIPTION: Demonstrates how to set maximum stack depth and node depth limits for the ExprTk parser to prevent excessive recursion and memory usage.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nparser_t parser;\n\nparser.settings().set_max_stack_depth(100);\nparser.settings().set_max_node_depth(200);\n```\n\n----------------------------------------\n\nTITLE: Git Topic Branch Delete\nDESCRIPTION: Command to delete a local topic branch after successful merge\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch -d my-topic\n```\n\n----------------------------------------\n\nTITLE: Adding SPDX Tags for Custom License in Source Files\nDESCRIPTION: This snippet shows how to add SPDX tags for a custom license to the top of source files in a VTK module. It includes copyright information and the custom license identifier.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/spdx_and_sbom.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// SPDX-FileCopyrightText: Copyright (c) Awesome contributor\n// SPDX-License-Identifier: LicenseRef-CustomLicense\n```\n\n----------------------------------------\n\nTITLE: Including Testing Subdirectory\nDESCRIPTION: This snippet adds a subdirectory for testing functionalities related to the Token library, likely to include unit tests or integration tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(testing)\n```\n\n----------------------------------------\n\nTITLE: Initializing Core Image Reader Files and Classes\nDESCRIPTION: Sets up initial collections of classes, private headers, and templates for ADIOS2 core image reader module\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes_core)\nset(private_headers_core)\nset(private_templates_core)\n\n# ADIOS2 Core Image Reader\nset(classes_core vtkADIOS2CoreImageReader)\nset(private_headers_core Core/vtkADIOS2CoreTypeTraits.h)\nset(private_templates_core)\n\nlist(APPEND classes   ${classes_core})\nlist(APPEND private_headers   ${private_headers_core})\nlist(APPEND private_templates ${private_templates_core})\n```\n\n----------------------------------------\n\nTITLE: VTK Java Library Configuration\nDESCRIPTION: Configures the main VTK Java library build settings including compilation options, dependencies, and installation targets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(vtkjava STATIC\n  ${java_input_files})\nset_source_files_properties(${java_input_files} PROPERTIES GENERATED TRUE)\nadd_library(VTK::vtkjava ALIAS vtkjava)\nset_property(TARGET vtkjava\n  PROPERTY\n    LINKER_LANGUAGE Java)\nset_property(TARGET vtkjava\n  PROPERTY\n    OUTPUT_NAME \"vtk\")\n```\n\n----------------------------------------\n\nTITLE: Vector Access Violation Handling Examples in ExprTk C++\nDESCRIPTION: Two examples of implementing vector access violation handlers in ExprTk. The first logs the violation and throws an exception, while the second resets the access pointer to the last element in the vector.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_100\n\nLANGUAGE: C++\nCODE:\n```\nbool handle_runtime_violation(violation_context& context) override\n{\n   printf(\"ERROR -  Runtime vector access violation. \"\n          \"base: %p end: %p access: %p typesize: %lu\\n\",\n          context.base_ptr  ,\n          context.end_ptr   ,\n          context.access_ptr,\n          context.type_size);\n\n   throw std::runtime_error(\"Runtime vector access violation.\");\n   return false;\n}\n```\n\nLANGUAGE: C++\nCODE:\n```\nbool handle_runtime_violation(violation_context& context) override\n{\n   context.access_ptr =\n      static_cast<char*>(context.end_ptr) - context.type_size;\n   return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tuple-based Array with vtkImplicitArray\nDESCRIPTION: Shows implementation of an implicit array using map and mapTuple methods to handle tuple-based data storage and retrieval.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/add-vtkImplicitArrays.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstruct ConstTupleStruct\n{\n  int Tuple[3] = { 0, 0, 0 };\n\n  ConstTupleStruct(int tuple[3])\n  {\n    this->Tuple[0] = tuple[0];\n    this->Tuple[1] = tuple[1];\n    this->Tuple[2] = tuple[2];\n  }\n\n  // used for GetValue\n  int map(int idx) const\n  {\n    int tuple[3];\n    this->mapTuple(idx / 3, tuple);\n    return tuple[idx % 3];\n  }\n  // used for GetTypedTuple\n  void mapTuple(int vtkNotUsed(idx), int* tuple) const\n  {\n    tuple[0] = this->Tuple[0];\n    tuple[1] = this->Tuple[1];\n    tuple[2] = this->Tuple[2];\n  }\n};\n\nvtkNew<vtkImplicitArray<ConstTupleStruct>> mapTupleArr;\nint tuple[3] = { 1, 2, 3 };\nmapTupleArr->ConstructBackend(tuple);\nmapTupleArr->SetNumberOfComponents(3);\nmapTupleArr->SetNumberOfTuples(100);\nint tuple[3] = { 0, 0, 0 };\nmapTupleArr->GetTypedTuple(77, tuple);\nCHECK(tuple[0] == 1 && tuple[1] == 2 && tuple[2] == 3); // always true\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK LANL X3D Reader Module Components\nDESCRIPTION: Sets up the necessary components for the VTK LANL X3D reader module including class definitions, source files, and private headers. Uses CMake to configure the module build with the specified components.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LANLX3D/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkLANLX3DReader)\n\nset(sources\n  X3D_reader.cxx\n  X3D_tokens.cxx)\n\nset(private_headers\n  X3D.hxx\n  X3D_reader.hxx\n  X3D_tokens.hxx)\n\nvtk_module_add_module(\n  VTK::IOLANLX3D\n  CLASSES ${classes}\n  SOURCES ${sources}\n  PRIVATE_HEADERS ${private_headers})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOAvmesh Module Classes in CMake\nDESCRIPTION: Configures the VTK IOAvmesh module by defining public and private classes and setting up module testing. The configuration includes the vtkAvmeshReader as a public class and AvmeshInternals, AvmeshMetadata, and BinaryFile as private classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Avmesh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAvmeshReader)\n\nset(private_classes\n  AvmeshInternals\n  AvmeshMetadata\n  BinaryFile)\n\nvtk_module_add_module(VTK::IOAvmesh\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes})\nvtk_add_test_mangling(VTK::IOAvmesh)\n```\n\n----------------------------------------\n\nTITLE: Finding ANARI Package in CMake for VTK Module\nDESCRIPTION: Configures the ANARI package dependency with version 0.9.1, forwarding minor version requirements in config mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(\n  PACKAGE anari\n  VERSION 0.9.1\n  FORWARD_VERSION_REQ MINOR\n  CONFIG_MODE)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK C++ Test Executable with CMake\nDESCRIPTION: This snippet utilizes the `vtk_test_cxx_executable` CMake macro, which likely creates an executable target for the specified test suite. It takes the name of the test suite (`vtkFiltersVerdictCxxTests`) as input. This ensures that the test sources specified in the vtk_add_test_cxx macro are built into an executable, which can then be executed by CTest.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersVerdictCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring JOGL and SWT Components for VTK Java in CMake\nDESCRIPTION: Sets up the necessary configuration for JOGL (Java OpenGL) and SWT (Standard Widget Toolkit) components in VTK Java build. It locates the required JAR files and sets up error messages if they're not found.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_JAVA_JOGL_COMPONENT OR VTK_JAVA_SWT_COMPONENT)\n  if (WIN32)\n    set(MAVEN_REPO \"$ENV{HOMEPATH}/.m2/repository\")\n  else ()\n    set(MAVEN_REPO \"$ENV{HOME}/.m2/repository\")\n  endif ()\n  find_file(JOGL_LIB jogl-all-${JOGL_VERSION}.jar PATHS ${MAVEN_REPO}/org/jogamp/jogl/jogl-all/${JOGL_VERSION} )\n  find_file(JOGL_GLUE gluegen-rt-${JOGL_VERSION}.jar PATHS ${MAVEN_REPO}/org/jogamp/gluegen/gluegen-rt/${JOGL_VERSION})\n  mark_as_advanced(JOGL_LIB JOGL_GLUE)\n  set(vars)\n  if (VTK_JAVA_JOGL_COMPONENT)\n    list(APPEND vars VTK_JAVA_JOGL_COMPONENT)\n  endif ()\n  if (VTK_JAVA_SWT_COMPONENT)\n    list(APPEND vars VTK_JAVA_SWT_COMPONENT)\n  endif ()\n  string(REPLACE \";\" \", \" vars \"${vars}\")\n  if (NOT JOGL_LIB)\n    message(SEND_ERROR\n      \"CMake can not build VTK with ${vars} ON if the jar JOGL file is not \"\n      \"provided. Please set the JOGL_LIB variable.\")\n  endif ()\n  if (NOT JOGL_GLUE)\n    message(SEND_ERROR\n      \"CMake can not build VTK with ${vars} ON if the jar GLUE file is not \"\n      \"provided. Please set the JOGL_GLUE variable.\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Project using CMake\nDESCRIPTION: This CMake snippet adds multiple Python test scripts to the VTK testing suite. It uses the vtk_add_test_python function to include a wide range of tests covering different VTK functionalities such as cell locators, clipping, marching cubes, and various filters. Some tests are marked with flags like NO_OUTPUT, NO_VALID, or NO_DATA to indicate specific test behaviors.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  Canny.py\n  OBBCylinder.py\n  TestCellDerivs.py\n  TestCellLocators.py,NO_OUTPUT,NO_VALID\n  TestClipClosedSurface.py\n  TestClipOutline.py\n  TestCurvatures.py\n  TestDeformPointSet.py\n  TestDiscreteFlyingEdges2D.py\n  TestDiscreteFlyingEdges3D.py\n  TestDiscreteFlyingEdgesClipper2D.py\n  TestDiscreteMarchingCubes.py\n  TestDiscreteMarchingCubesAdjacentScalars.py\n  TestFEDiscreteClipper2D.py\n  TestGraphLayoutFilter.py\n  TestGroupTimeStepsFilter.py\n  TestMarchingCubes.py\n  TestPointConnectivityFilter.py\n  TestRemoveGhostCells.py,NO_OUTPUT,NO_VALID\n  TestRemovePolyData.py\n  TestRemovePolyData2.py\n  TestRemovePolyData3.py\n  TestSparseCellLocator.py\n  TestSphericalIteration.py\n  TestSphericalIteratorSets.py\n  TestSplineFilter.py\n  TestStaticCellLocator.py\n  TestStaticCellLocatorPlaneIntersection.py\n  TestSynchronizeTimeFilter.py,NO_OUTPUT,NO_VALID\n  TestTemporalPathLineFilter.py,NO_OUTPUT,NO_VALID\n  TestTemporalStatistics.py,NO_OUTPUT,NO_VALID\n  TestTriangulateContours.py\n  TestWarpScalar.py,NO_VALID\n  TestWarpVector.py,NO_VALID\n  WarpToImage.py\n  blankGrid.py\n  clipComb.py\n  clipHex.py\n  clipImage.py\n  clipPointSet.py,NO_OUTPUT,NO_DATA,NO_VALID\n  clipPyramid.py\n  clipQuadraticCells.py\n  clipTet.py\n  clipVolume.py\n  clipVolume2.py\n  clipVolume3.py\n  clipWedge.py\n  contoursToSurface.py\n  cursor3D.py\n  dicer.py\n  edgePoints.py\n  mcubes.py\n  recursiveDC.py\n  splitVectors.py\n  streamTracer.py\n  subPixelPositionMin.py\n  testDataSetTriangleFilter.py\n  testDataSetTriangleFilter2.py\n  testReflect.py\n  warplens.py\n  TestRandomAttributeGenerator.py\n  TestRandomAttributeGeneratorScalar.py\n  WarpScalarImage.py\n  WarpVectorImage.py\n  cursor2D.py\n  spatialRepAll.py\n  pointsPrecisions.py,NO_OUTPUT,NO_DATA,NO_VALID\n  tableBasedClip.py\n  GreenLagrangeStrain.py.py,NO_OUTPUT,NO_DATA,NO_VALID\n  TestMultiBlockStreamer.py\n  TestSampleImplicitFunctionFilter.py\n  TestRectilinearGridToTetrahedra.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MPI Python Test\nDESCRIPTION: Adds a Python-based MPI test for Plot3D IO functionality to the VTK testing framework. The NO_VALID flag indicates that this test does not require output validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python_mpi(\n  Plot3DMPIIO.py,NO_VALID\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly OpenGL Render Window in VTK\nDESCRIPTION: Sets up WebAssembly-specific OpenGL rendering, choosing between SDL2-based or WebAssembly-native implementation based on configuration options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  # Add some custom overrides\n  # VTK_DEPRECATED_IN_9_4_0() Remove when vtkSDL2OpenGLRenderWindow is removed.\n  if (VTK_USE_SDL2)\n    vtk_object_factory_declare(\n      BASE vtkRenderWindow\n      OVERRIDE vtkSDL2OpenGLRenderWindow)\n    set(has_vtkRenderWindow_override 1)\n    list(APPEND classes vtkSDL2OpenGLRenderWindow)\n  else ()\n    vtk_object_factory_declare(\n      BASE vtkRenderWindow\n      OVERRIDE vtkWebAssemblyOpenGLRenderWindow)\n    set(has_vtkRenderWindow_override 1)\n    list(APPEND classes vtkWebAssemblyOpenGLRenderWindow)\n  endif ()\n\n```\n\n----------------------------------------\n\nTITLE: Emscripten Exception Support Configuration\nDESCRIPTION: Enables exception support for ExprTk function parser when building with Emscripten compiler.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set_property(SOURCE vtkExprTkFunctionParser.cxx APPEND\n    PROPERTY\n      COMPILE_FLAGS \"-fexceptions\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Output Directories\nDESCRIPTION: Configures the output directories for VTK binaries, libraries and archives in the build system\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${VTK_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${VTK_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${VTK_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Flow Paths Test Executable\nDESCRIPTION: Creates the test executable for VTK Filters Flow Paths tests with specific configuration flags for floating point exceptions and rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersFlowPathsCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Directory Addition for C++ Testing\nDESCRIPTION: This snippet checks if C++ testing is enabled and conditionally adds the Cxx subdirectory to the build. This is important for modularizing tests and organizing the code structure based on testing conditions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK PLY CXX Test Executable in CMake\nDESCRIPTION: This snippet creates an executable for the VTK PLY CXX tests. It compiles all the previously defined tests into a single test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOPLYCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 HL Source Files\nDESCRIPTION: Defines the source files, public headers and private headers for the HDF5 High Level library components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/hl/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (HL_SOURCES\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5DO.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5DS.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5IM.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5LT.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5LTanalyze.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5LTparse.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5PT.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5TB.c\n    ${HDF5_HL_SRC_SOURCE_DIR}/H5LD.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Chemistry Reader Tests to VTK Test Suite\nDESCRIPTION: Adds CML, VASP Animation, and VASP Tessellation reader tests to the VTK IO Chemistry C++ test suite. This configures the test executable to include these test source files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOChemistryCxxTests tests\n  TestCMLMoleculeReader.cxx\n  TestVASPAnimationReader.cxx\n  TestVASPTessellationReader.cxx\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying X Athena Widgets Status\nDESCRIPTION: This snippet uses the `message` command with the `STATUS` argument to display whether X Athena Widgets support is enabled or disabled. The `HAVE_XAW` variable likely holds a boolean value indicating the presence of the required libraries or settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"message(STATUS \\\"  X Athena Widgets support:           ${HAVE_XAW}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring data directory path for PROJ in VTK\nDESCRIPTION: Sets up the data directory path for PROJ within VTK's installation structure. Includes logic for handling library name suffixes to ensure correct pathing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(DATADIR \"${CMAKE_INSTALL_DATADIR}/vtk\")\nif (_vtk_build_LIBRARY_NAME_SUFFIX)\n  string(APPEND DATADIR \"-${_vtk_build_LIBRARY_NAME_SUFFIX}\")\nendif ()\nstring(APPEND DATADIR \"/proj\")\n```\n\n----------------------------------------\n\nTITLE: Set CMake configuration directory\nDESCRIPTION: This snippet sets the directory where CMake configuration files will be installed.  It adjusts the path based on whether the system is Windows or not.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(my_config_name vtkmy)\nif(WIN32)\n  set(my_config_dir cmake/${my_config_name})\nelse()\n  set(my_config_dir ${CMAKE_INSTALL_LIBDIR}/cmake/${my_config_name})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Validator by Index in CLI11 (C++)\nDESCRIPTION: This snippet shows how to retrieve a validator by its application index. The `get_validator(index)` method returns a pointer to the validator applied at the specified index. If the index is invalid, the method returns `nullptr`.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nopt->get_validator(index);\n```\n\n----------------------------------------\n\nTITLE: Symbol and Include Existence Checks\nDESCRIPTION: Performs compile-time checks for standard library functions and headers, enabling conditional compilation and portability\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckSymbolExists)\ncheck_symbol_exists(\"memset\" \"string.h\" HAVE_MEMSET)\ncheck_symbol_exists(\"memcpy\" \"string.h\" HAVE_MEMCPY)\nif (NOT HAVE_MEMSET OR NOT HAVE_MEMCPY)\n  set(NEED_BSD_STRINGS 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Dependencies for XDMF2\nDESCRIPTION: Sets up HDF5 library dependencies for XDMF2, with conditional paths based on whether it's being built within VTK or standalone. Includes handling for HDF5 extra flags from config files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles linking.\n#HDF5\nif (XDMF_BUILT_INVTK)\n  set(XDMF_HDF5_LIBRARIES ${vtkhdf5_LIBRARIES})\n  set(XDMF_HDF5_INCLUDE_DIRS ${vtkhdf5_INCLUDE_DIRS})\nelse()\n  find_package(HDF5 REQUIRED)\n  set(XDMF_HDF5_LIBRARIES ${HDF5_LIBRARIES})\n  set(XDMF_HDF5_INCLUDE_DIRS ${HDF5_INCLUDE_DIRS})\nendif()\nif(EXISTS \"${HDF5_CONFIG}\")\n  include(\"${HDF5_CONFIG}\")\n  add_definitions(${HDF5_EXTRA_FLAGS})\nendif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: from_chars_result Structure Definition in C++\nDESCRIPTION: Definition of the return type for from_chars functions. This structure contains a pointer to the character after the parsed number and an error code.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstruct from_chars_result {\n  char const *ptr;\n  std::errc ec;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up VTK Object Factory Configuration\nDESCRIPTION: Configures the object factory source and header files with export macros for the MPI Image module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIImage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOMPIIMAGE_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Inclusion in VTK\nDESCRIPTION: This snippet conditionally includes the 'Python' subdirectory and sets up test data. The 'Python' subdirectory is added to the build only if `VTK_WRAP_PYTHON` is enabled. The `vtk_module_test_data` command is used to include binary test data files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/combq.bin\n    Data/combxyz.bin)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters Temporal Classes in CMake\nDESCRIPTION: Sets up a list of classes for the VTK Filters Temporal module. These classes include vtkCriticalTime, vtkForceStaticMesh, vtkDataObjectMeshCache, and vtkTemporalSmoothing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkCriticalTime\n  vtkForceStaticMesh\n  vtkDataObjectMeshCache\n  vtkTemporalSmoothing)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSPRay Dependencies for VTK RenderingRayTracing\nDESCRIPTION: Sets up OSPRay dependencies, including version checks, linking, and optional denoiser support using OpenImageDenoise.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_OSPRAY)\n  vtk_module_find_package(PRIVATE_IF_SHARED\n    PACKAGE ospray\n    )\n  if (${ospray_VERSION} VERSION_LESS 2.7)\n    message(WARNING \"Unsupported OSPRay version.\")\n  endif()\n  vtk_module_link(VTK::RenderingRayTracing\n    NO_KIT_EXPORT_IF_SHARED\n    PRIVATE\n      ospray::ospray)\n  if (VTKOSPRAY_ENABLE_DENOISER)\n    vtk_module_find_package(PRIVATE_IF_SHARED\n      PACKAGE OpenImageDenoise\n      FORWARD_VERSION_REQ MINOR)\n    vtk_module_definitions(VTK::RenderingRayTracing\n      PRIVATE\n        VTKOSPRAY_ENABLE_DENOISER)\n    vtk_module_link(VTK::RenderingRayTracing\n      NO_KIT_EXPORT_IF_SHARED\n      PRIVATE\n        OpenImageDenoise)\n  endif ()\n\n  # TODO: FindOSPRay should do this.\n  # OSPRay_Core uses MMTime which is in it's own special library.\n  if (WIN32)\n    vtk_module_link(VTK::RenderingRayTracing\n      PRIVATE\n        Winmm)\n  endif ()\n  vtk_module_definitions(VTK::RenderingRayTracing\n    PRIVATE\n      VTK_ENABLE_OSPRAY\n      OSPRAY_VERSION_MAJOR=${ospray_VERSION_MAJOR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersParallelDIY2 Module in CMake\nDESCRIPTION: This snippet adds the VTK::FiltersParallelDIY2 module, specifying its classes, non-wrapped classes, sources, and private headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallelDIY2\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::FiltersParallelDIY2)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersGeometryPreview Module in CMake\nDESCRIPTION: Configures the VTK FiltersGeometryPreview module by defining the classes to include, adding the module, and setting up test mangling. The module includes three classes related to octree image and point set operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/GeometryPreview/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkOctreeImageToPointSetFilter\n  vtkPointSetToOctreeImageFilter\n  vtkPointSetStreamer)\n\nvtk_module_add_module(VTK::FiltersGeometryPreview\n  CLASSES ${classes})\n\nvtk_add_test_mangling(VTK::FiltersGeometryPreview)\n```\n\n----------------------------------------\n\nTITLE: Building VTK WebAssembly Module with emscripten\nDESCRIPTION: This shell script configures and builds a VTK WebAssembly module using CMake and Ninja. It requires emscripten properly set up in the environment, and VTK already built in a specified directory. The script specifies source and build directories and uses a CMake generator to build the project. The output is placed in the 'out/build' directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultipleCanvases/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nemcmake cmake \\\n  -G Ninja \\\n  -S /path/to/vtk/Examples/Emscripten/Cxx/MultipleCanvases \\\n  -B out/build \\\n  -DVTK_DIR=/path/to/where/vtk/wasm/was/built\n\ncmake --build out/build\n```\n\n----------------------------------------\n\nTITLE: Defining and Creating VTK ImagingGeneral Module in CMake\nDESCRIPTION: This CMake script defines a list of image processing classes and adds them to the VTK::ImagingGeneral module. The script first defines all the classes related to image processing algorithms such as diffusion, convolution, and gradient calculations, then creates the module with these classes and enables test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/General/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkImageAnisotropicDiffusion2D\n  vtkImageAnisotropicDiffusion3D\n  vtkImageCheckerboard\n  vtkImageCityBlockDistance\n  vtkImageConvolve\n  vtkImageCorrelation\n  vtkImageEuclideanDistance\n  vtkImageEuclideanToPolar\n  vtkImageGaussianSmooth\n  vtkImageGradient\n  vtkImageGradientMagnitude\n  vtkImageHybridMedian2D\n  vtkImageLaplacian\n  vtkImageMedian3D\n  vtkImageNormalize\n  vtkImageRange3D\n  vtkImageSeparableConvolution\n  vtkImageSlab\n  vtkImageSlabReslice\n  vtkImageSobel2D\n  vtkImageSobel3D\n  vtkImageSpatialAlgorithm\n  vtkImageVariance3D)\n\nvtk_module_add_module(VTK::ImagingGeneral\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingGeneral)\n```\n\n----------------------------------------\n\nTITLE: Integrating Expat using CMake FetchContent\nDESCRIPTION: Example demonstrating how to include Expat directly from Git repository using CMake's FetchContent module. Requires CMake 3.18+ for SOURCE_SUBDIR support.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18)\n\ninclude(FetchContent)\n\nproject(hello VERSION 1.0.0)\n\nFetchContent_Declare(\n    expat\n    GIT_REPOSITORY https://github.com/libexpat/libexpat/\n    GIT_TAG        000000000_GIT_COMMIT_SHA1_HERE_000000000  # i.e. Git tag R_0_Y_Z\n    SOURCE_SUBDIR  expat/\n)\n\nFetchContent_MakeAvailable(expat)\n\nadd_executable(hello\n    hello.c\n)\n\ntarget_link_libraries(hello PUBLIC expat)\n```\n\n----------------------------------------\n\nTITLE: TriangulateLocalIds Function Implementation\nDESCRIPTION: New function that only returns the triangulated local ids, optimizing the triangulation process for each cell type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef TriangulateLocalIds(ids):\n    # New implementation returns only triangulated local ids\n    pass\n```\n\n----------------------------------------\n\nTITLE: Minor Error Definitions\nDESCRIPTION: Defines specific error conditions within each major category. Each minor error includes its section, identifier, and description.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/H5err.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nMINOR, ARGS, H5E_UNINITIALIZED, Information is uinitialized\nMINOR, ARGS, H5E_UNSUPPORTED, Feature is unsupported\nMINOR, RESOURCE, H5E_NOSPACE, No space available for allocation\n# ... additional minor errors\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory to CMake Build\nDESCRIPTION: This snippet uses the `add_subdirectory` CMake function to include the `Cxx` subdirectory in the build process.  This means CMake will look for a `CMakeLists.txt` file within the `Cxx` directory and process it as part of the overall build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GDAL/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory(Cxx)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Video for Windows Support in VTK\nDESCRIPTION: Shows how to check for Video for Windows support in VTK. The VTK_USE_VIDEO_FOR_WINDOWS macro is now available in vtkIOMovieConfigure.h instead of vtkToolkits.h.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.1.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <vtkIOMovieConfigure.h>\n\n#ifdef VTK_USE_VIDEO_FOR_WINDOWS\n  // Video for Windows is supported\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party LZMA Module\nDESCRIPTION: This snippet configures a third-party LZMA module for use in the VTK project. It specifies license details, download location, version, and include directories using the vtk_module_third_party function. The setup identifies whether the library is internal or external and sets the appropriate configuration for building and linking.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lzma/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtklzma/COPYING\"\n    SPDX_LICENSE_IDENTIFIER\n      \"LicenseRef-PublicDomain-lzma\"\n    SPDX_COPYRIGHT_TEXT\n      \"NONE\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/lzma.git@for/vtk-20210728-5.2.5\"\n    SPDX_CUSTOM_LICENSE_FILE\n      \"vtklzma/COPYING\"\n    SPDX_CUSTOM_LICENSE_NAME\n      \"PublicDomain-lzma\"\n    VERSION\n      \"5.2.5\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE LZMA\n    TARGETS LZMA::LZMA\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Finding and Linking ZeroMQ Package\nDESCRIPTION: This snippet conditionally finds the ZeroMQ library based on the build settings and links it to the VTK rendering module if VR collaboration support is enabled. It checks for static or shared library dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VR/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_VR_COLLABORATION)\n  vtk_module_find_package(PRIVATE_IF_SHARED\n    PACKAGE ZeroMQ)\n  list(APPEND classes vtkVRCollaborationClient)\nendif()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_VR_COLLABORATION)\n  # try for matching libzmq to our shared/static build type\n  if (BUILD_SHARED_LIBS AND TARGET libzmq)\n    set(zmq_target libzmq)\n  elseif (NOT BUILD_SHARED_LIBS AND TARGET libzmq-static)\n    set(zmq_target libzmq-static)\n  else ()\n    # can't find matching, so use whatever we can find\n    if (TARGET libzmq-static)\n      set(zmq_target libzmq-static)\n    else ()\n      set(zmq_target libzmq)\n    endif ()\n  endif ()\n\n  vtk_module_link(VTK::RenderingVR NO_KIT_EXPORT_IF_SHARED PRIVATE \"${zmq_target}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Classes for VTK::IOCatalystConduit\nDESCRIPTION: Sets up the main classes and private classes for the VTK::IOCatalystConduit module. Conditionally includes CUDA-specific classes when VTK::AcceleratorsVTKmDataModel is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkConduitSource\n  vtkConduitToDataObject\n  vtkDataObjectToConduit\n  vtkConduitArrayUtilities\n)\n\nset(private_classes)\nif (TARGET VTK::AcceleratorsVTKmDataModel)\n  set(private_classes_cuda vtkConduitArrayUtilitiesDevice)\n  set(private_classes ${private_classes} ${private_classes_cuda})\n  set(classes_cuda vtkConduitArrayUtilities ${private_classes_cuda})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Headers for No-Wrapping\nDESCRIPTION: This snippet specifies header files that should not be wrapped by VTK's wrapping system, such as `XrConnectionExtensions.h`. This is needed if the headers contain structures or functions that are not compatible with the wrapping process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_headers XrConnectionExtensions.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK Module Initialization\nDESCRIPTION: Configures automatic initialization of VTK modules for all targets. Ensures proper module loading for all medical examples.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Medical/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS Medical1\n          Medical2\n          Medical3\n          Medical4\n          GenerateModelsFromLabels\n          GenerateCubesFromLabels\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: VTK Module Configuration and Linking\nDESCRIPTION: Configures the VTK Ioss module, setting up sources, headers, include paths, definitions, and linking requirements\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/vtkioss/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::ioss\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkioss\")\nvtk_module_link(VTK::ioss\n  PRIVATE\n    Threads::Threads)\n\nif (MINGW)\n  vtk_module_link(VTK::ioss PRIVATE psapi)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for KWSys in CMake\nDESCRIPTION: This snippet adds compiler definitions for KWSys, including namespace configuration, disabling deprecation warnings for standard C functions on Windows, and enforcing wide Windows APIs. It also sets specific flags for String and Encoding components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\"-DKWSYS_NAMESPACE=${KWSYS_NAMESPACE}\")\n\n# Disable deprecation warnings for standard C functions.\nif(MSVC OR (WIN32 AND (CMAKE_C_COMPILER_ID STREQUAL \"Intel\" OR\n   (CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\"))))\n  add_definitions(\n    -D_CRT_NONSTDC_NO_DEPRECATE\n    -D_CRT_SECURE_NO_DEPRECATE\n    -D_CRT_SECURE_NO_WARNINGS\n    -D_SCL_SECURE_NO_DEPRECATE\n    )\nendif()\n\nif(WIN32)\n  # Help enforce the use of wide Windows apis.\n  add_definitions(-DUNICODE -D_UNICODE)\nendif()\n\nif(KWSYS_USE_String)\n  # Activate code in \"String.c\".  See the comment in the source.\n  set_source_files_properties(String.c PROPERTIES\n    COMPILE_FLAGS \"-DKWSYS_STRING_C\")\nendif()\n\nif(KWSYS_USE_Encoding)\n  # Set default 8 bit encoding in \"EndcodingC.c\".\n  set_property(SOURCE EncodingC.c EncodingCXX.cxx APPEND PROPERTY COMPILE_DEFINITIONS\n    KWSYS_ENCODING_DEFAULT_CODEPAGE=${KWSYS_ENCODING_DEFAULT_CODEPAGE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Determine VTK Epoch Version\nDESCRIPTION: Sets the VTK epoch version based on the build version. If the build version predates a specific date, it assigns the build version as the epoch; otherwise, a fixed future date is used. This requires CMake's version comparison capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_BUILD_VERSION LESS \"20000101\")\n  set(VTK_EPOCH_VERSION \"${VTK_BUILD_VERSION}\")\nelse ()\n  set(VTK_EPOCH_VERSION \"20241009\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Mapper Classes - CMake\nDESCRIPTION: This snippet sets a list of volume mapper classes essential for VTK's OpenGL rendering pipeline. It initializes the classes that will be used later in volume rendering operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkMultiBlockUnstructuredGridVolumeMapper\n  vtkMultiBlockVolumeMapper\n  vtkOpenGLGPUVolumeRayCastMapper\n  vtkOpenGLProjectedTetrahedraMapper\n  vtkOpenGLRayCastImageDisplayHelper\n  vtkOpenGLSurfaceProbeVolumeMapper\n  vtkSmartVolumeMapper\n  vtkVolumeTexture)\n```\n\n----------------------------------------\n\nTITLE: Adding Catalyst Tests (Conditional)\nDESCRIPTION: This CMake code snippet conditionally adds C++ tests for Catalyst integration if the `VTK::catalyst` target exists. It uses `vtk_add_test_cxx` to add tests like `TestIOSSCatalystCGNS.cxx` and `TestIOSSCatalystExodus.cxx`.  These tests specifically verify the interaction between IOIOSS and Catalyst for CGNS and Exodus file formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::catalyst)\n  vtk_add_test_cxx(vtkIOIOSSCxxTests tests\n    TestIOSSCatalystCGNS.cxx\n    TestIOSSCatalystExodus.cxx\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring fmt Library as VTK Third-Party Module in CMake\nDESCRIPTION: Sets up the fmt formatting library as a third-party module in VTK with both internal and external build options. The internal build uses version 11.1.4 with MIT license, while external builds require at least version 11.0.0. It also configures and installs a vtk_fmt.h header.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES           \"vtkfmt/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER \"MIT\"\n    SPDX_COPYRIGHT_TEXT     \"Copyright (c) 2012 - present, Victor Zverovich\"\n    SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/fmt.git@for/vtk-20250317-11.1.4\"\n    VERSION                 \"11.1.4\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE fmt\n    TARGETS fmt::fmt\n    VERSION       \"11.0.0\"\n    STANDARD_INCLUDE_DIRS)\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_fmt.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_fmt.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_fmt.h\")\n```\n\n----------------------------------------\n\nTITLE: Generating 1D Data with ADIOS2 in C++\nDESCRIPTION: This snippet demonstrates how to generate a 1D dataset using the ADIOS2 library in C++. It utilizes 6 processes to create a time series data output.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Data/ADIOS2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// 1D_10-point_3-step\n// Generated by adios2/examples/hello/bpTimeWriter/helloBPTimeWriter.cpp with 6 processes\n```\n\n----------------------------------------\n\nTITLE: Setting Vertex Visibility in VTK OpenGL Mappers\nDESCRIPTION: This code snippet demonstrates how to enable the visibility of vertices in a mesh by using the `SetVertexVisibility` method on an actor object. This fix corrects previous behavior where vertex visibility only worked when edge visibility was also enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/fix-opengl-mapper-vertex-visibility.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nactor->SetVertexVisibility(true);\n```\n\n----------------------------------------\n\nTITLE: Installing VTK TIFF Headers in CMake\nDESCRIPTION: Installs the generated VTK TIFF header file to the appropriate installation directory. This ensures that projects using VTK can properly include and use the TIFF functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_tiff.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests for Molecular Visualization\nDESCRIPTION: Adds Python test files to the VTK testing framework for molecular visualization, with conditional inclusion of the MoleculeXYZ.py test that is excluded on Windows platforms due to CRLF/LF issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestXYZMol.py\n  caffeine.py\n  caffeine_notrailingwhitespaces.py\n)\n\n# Test is not passing on Windows because of a CRLF/LF issue:\n# https://gitlab.kitware.com/vtk/vtk/-/issues/18213\nif (NOT WIN32)\n  vtk_add_test_python(\n    MoleculeXYZ.py,NO_VALID\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for VTK ANARI Module\nDESCRIPTION: Configures the linking for the VTK::RenderingAnari module, including public dependencies on ANARI and VTK modules, and conditionally linking to CUDA nvToolsExt when NVTX is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_link(VTK::RenderingAnari\n  PUBLIC\n    anari::anari\n    VTK::FiltersGeometry\n    VTK::FiltersSources\n  PRIVATE\n    $<$<BOOL:${VTK_ANARI_ENABLE_NVTX}>:CUDA::nvToolsExt>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests in CMake for LibXml2\nDESCRIPTION: Defines several test targets for the LibXml2 project using CMake's add_test command. These tests include testchar, testdict, testparser, testrecurse, and testThreads.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(NAME testchar COMMAND testchar)\nadd_test(NAME testdict COMMAND testdict)\nadd_test(NAME testparser COMMAND testparser WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nadd_test(NAME testrecurse COMMAND testrecurse WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nadd_test(NAME testThreads COMMAND testThreads WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Boost Headers\nDESCRIPTION: Specifies the header files required for the Boost graph adapter functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/BoostGraphAlgorithms/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  vtkBoostGraphAdapter.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for VTK Fides Module\nDESCRIPTION: Defines the list of source files (.cxx) that comprise the Fides module core functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(srcs\n  Array.cxx\n  CellSet.cxx\n  CoordinateSystem.cxx\n  DataModel.cxx\n  DataSetReader.cxx\n  DataSetWriter.cxx\n  DataSource.cxx\n  FidesTypes.cxx\n  Field.cxx\n  FieldData.cxx\n  FieldDataManager.cxx\n  Keys.cxx\n  MetaData.cxx\n  Value.cxx\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Pipeline Update Methods in vtkStreamingDemandDrivenPipeline\nDESCRIPTION: List of deprecated pipeline update methods in vtkStreamingDemandDrivenPipeline class to be removed in VTK 8.0.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nint SetUpdateExtentToWholeExtent(int port);\nstatic int SetUpdateExtentToWholeExtent(vtkInformation *);\nint SetUpdateExtent(int port, int extent[6]);\nint SetUpdateExtent(int port, int x0, int x1, int y0, int y1, int z0, int z1);\nstatic int SetUpdateExtent(vtkInformation *, int extent[6]);\nint SetUpdateExtent(int port,\n                    int piece, int numPieces, int ghostLevel);\nstatic int SetUpdateExtent(vtkInformation *,\n                           int piece, int numPieces, int ghostLevel);\nstatic int SetUpdatePiece(vtkInformation *, int piece);\nstatic int SetUpdateNumberOfPieces(vtkInformation *, int n);\nstatic int SetUpdateGhostLevel(vtkInformation *, int n);\nint SetUpdateTimeStep(int port, double time);\nstatic int SetUpdateTimeStep(vtkInformation *, double time);\n```\n\n----------------------------------------\n\nTITLE: Configuring zconf.h from Template for Zlib\nDESCRIPTION: Generates the zconf.h configuration header file from the template, setting the Z_PREFIX option to always mangle symbols (a Kitware-specific modification).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# XXX(kitware): always mangle\nset(Z_PREFIX TRUE)\n\nif (FALSE) # XXX(kitware): the pkgconfig file isn't necessary.\nset(ZLIB_PC ${CMAKE_CURRENT_BINARY_DIR}/zlib.pc)\nconfigure_file( ${CMAKE_CURRENT_SOURCE_DIR}/zlib.pc.cmakein\n\t\t${ZLIB_PC} @ONLY)\nendif ()\nconfigure_file(\t${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein\n\t\t${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Setting Scalar Type for KISS FFT in CMake\nDESCRIPTION: This snippet checks if the KISSFFT_SCALAR_TYPE is defined. If not, it sets the default type to 'double'. This ensures that any operations relying on this type have a valid definition.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED KISSFFT_SCALAR_TYPE)\\n  set(KISSFFT_SCALAR_TYPE \"double\")\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for HDF5 in C\nDESCRIPTION: Sets up the CMake project for HDF5, including minimum CMake version, project name, and language (C). Also sets CMake policies and disables PDB file generation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): cmake versions are handled by VTK.\ncmake_minimum_required (VERSION 3.12)\nendif ()\nproject (HDF5 C)\n\nif (POLICY CMP0074)\n  cmake_policy (SET CMP0074 NEW)\nendif ()\n\nif (POLICY CMP0083)\n  cmake_policy (SET CMP0083 NEW)\nendif ()\n\n# XXX(kitware): Set to avoid cmake complaining\nif (POLICY CMP0007)\n  cmake_policy (SET CMP0007 NEW)\nendif ()\n\n# XXX(kitware): Hardcode settings.\nset(DISABLE_PDB_FILES ON)\n```\n\n----------------------------------------\n\nTITLE: Set output directories\nDESCRIPTION: This snippet sets the output directories for executables, libraries, and archives. It uses the `PROJECT_BINARY_DIR` and variables from the `GNUInstallDirs` module to specify where the build artifacts should be placed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests for HyperTreeGrid Reflection\nDESCRIPTION: This CMake snippet adds Python tests for VTK's HyperTreeGrid reflection functionality. It configures tests for both 2D and 3D HyperTreeGrids with reflections along X, Y, and Z axes. All tests are marked with NO_DATA and NO_VALID flags, indicating they don't require external data files or validation images.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# These tests should use vtk.test.Testing.\nvtk_add_test_python(\n    TestHyperTreeGrid2DXReflection.py,NO_DATA,NO_VALID\n    TestHyperTreeGrid2DYReflection.py,NO_DATA,NO_VALID\n    TestHyperTreeGrid2DZReflection.py,NO_DATA,NO_VALID\n    TestHyperTreeGrid3DXReflection.py,NO_DATA,NO_VALID\n    TestHyperTreeGrid3DYReflection.py,NO_DATA,NO_VALID\n    TestHyperTreeGrid3DZReflection.py,NO_DATA,NO_VALID\n    TestUniformHyperTreeGrid2DXReflection.py,NO_DATA,NO_VALID\n    TestUniformHyperTreeGrid2DYReflection.py,NO_DATA,NO_VALID\n    TestUniformHyperTreeGrid2DZReflection.py,NO_DATA,NO_VALID\n    TestUniformHyperTreeGrid3DXReflection.py,NO_DATA,NO_VALID\n    TestUniformHyperTreeGrid3DYReflection.py,NO_DATA,NO_VALID\n    TestUniformHyperTreeGrid3DZReflection.py,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Listing Git Submodules in VTK ThirdParty Directory using Bash\nDESCRIPTION: This Bash script generates a list of third-party projects imported as git submodules. It filters submodules to include only those in the ThirdParty directory and extracts the project name.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/imported.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd VTK/ThirdParty\n\nroot_src_dir=$(git rev-parse --show-toplevel)\n\nfor submodule in $(git config --file ${root_src_dir}/.gitmodules --get-regexp path | awk '{ print $2 }'); do\n  # Ignore submodules not associated with the \"ThirdParty\" directory\n  if ! [[ \"$submodule\" =~ ^ThirdParty* ]]; then\n    continue\n  fi\n  project=$(echo $submodule | cut -d/ -f2) # \"ThirdParty/vtkm/vtkvtkm/vtk-m\" -> \"vtkm\"\n  echo \"  * $project\"\ndone\n```\n\n----------------------------------------\n\nTITLE: GLAD Header Configuration and Installation\nDESCRIPTION: Configures and installs the VTK GLAD header files. Generates the vtk_glad.h header from a template and sets up installation rules for the generated header.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/glad/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_glad.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_glad.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_glad.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Views Infovis CXX Tests\nDESCRIPTION: Configures a set of C++ tests for VTK Views Infovis module. Includes tests for various visualization components like cone layout, graph layout, heatmaps, and tree views. Some tests are marked with LOOSE_VALID flag for floating point comparison tolerance.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Infovis/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkViewsInfovisCxxTests tests\n  TestConeLayoutStrategy.cxx\n  TestCoincidentGraphLayoutView.cxx\n  TestColumnTree.cxx\n  TestDendrogramItem.cxx\n  TestGraphLayoutView.cxx\n  TestHeatmapCategoryLegend.cxx\n  TestHeatmapItem.cxx,LOOSE_VALID\n  TestHeatmapScalarLegend.cxx\n  TestHierarchicalGraphView.cxx\n  TestIcicleView.cxx\n  TestIconGlyphFilter.cxx\n  TestInteractorStyleTreeMapHover.cxx\n  TestNetworkViews.cxx\n  TestParallelCoordinatesView.cxx,LOOSE_VALID\n  TestRenderView.cxx\n  TestSpanTreeLayoutStrategy.cxx\n  TestTanglegramItem.cxx\n  TestTreeHeatmapAutoCollapse.cxx,LOOSE_VALID\n  TestTreeHeatmapItem.cxx,LOOSE_VALID\n  TestTreeMapView.cxx,LOOSE_VALID\n  TestTreeRingView.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Qt View Classes\nDESCRIPTION: Defines a list of VTK Qt view classes that will be included in the ViewsQt module. These classes provide various Qt-based visualization capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Qt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkQtAnnotationView\n  vtkQtListView\n  vtkQtRecordView\n  vtkQtTableRepresentation\n  vtkQtTableView\n  vtkQtTreeView\n  vtkQtView)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests with vtk_add_test_cxx\nDESCRIPTION: This snippet defines two C++ tests using VTK's vtk_add_test_cxx function. It specifies the test files and corresponding data directories, which include microscopy data in ndpi and tif formats. The purpose is to validate the reading functionality of OpenSlideReader with different input data. The test data path is dynamically constructed using the VTK build directory variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkDomainsMicroscopyCxxTests tests\n  TestOpenSlideReader.cxx\n  \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/Microscopy/small2.ndpi}\"\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkDomainsMicroscopyCxxTests  tests\n    TestOpenSlideReaderPartialTIF,TestOpenSlideReaderPartial.cxx\n  \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/Microscopy/pathology.tif}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Transforms Module in CMake\nDESCRIPTION: Defines a list of VTK transform classes and adds them to the VTK::CommonTransforms module. The classes cover various transform types including abstract, cylindrical, general, homogeneous, identity, landmark, linear, and other specialized transforms. The configuration also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Transforms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAbstractTransform\n  vtkCylindricalTransform\n  vtkGeneralTransform\n  vtkHomogeneousTransform\n  vtkIdentityTransform\n  vtkLandmarkTransform\n  vtkLinearTransform\n  vtkMatrixToHomogeneousTransform\n  vtkMatrixToLinearTransform\n  vtkPerspectiveTransform\n  vtkSphericalTransform\n  vtkThinPlateSplineTransform\n  vtkTransform\n  vtkTransform2D\n  vtkTransformCollection\n  vtkWarpTransform)\n\nvtk_module_add_module(VTK::CommonTransforms\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::CommonTransforms)\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH Settings for VTK-m Libraries\nDESCRIPTION: Sets up runtime path (RPATH) settings for VTK-m libraries, with platform-specific adjustments for Unix and macOS. This ensures that VTK-m libraries can be located properly at runtime after installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# vtk-m prior to v2.2 does not set rpath\nset(CMAKE_BUILD_RPATH_USE_ORIGIN 1)\nif (UNIX)\n  if (APPLE)\n    list(APPEND CMAKE_INSTALL_RPATH \"@loader_path\")\n  else ()\n    list(APPEND CMAKE_INSTALL_RPATH \"$ORIGIN\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Data with CMake\nDESCRIPTION: This CMake function, `vtk_module_test_data`, adds the specified data files (wall.stp, wall.iges) as test data for the VTK module. The data files are then likely used in tests within the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OCCT/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_test_data(\n  Data/wall.stp\n  Data/wall.iges\n)\"\n```\n\n----------------------------------------\n\nTITLE: Module Integration - CMake\nDESCRIPTION: This snippet integrates all components such as classes, shaders, and headers into the VTK RenderingVolumeOpenGL2 module, making it ready for use in graphics applications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingVolumeOpenGL2\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  NOWRAP_TEMPLATE_CLASSES  ${nowrap_template_classes}\n  SOURCES ${sources} ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${private_headers} ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Classes for FiltersParallelDIY2 Module in CMake\nDESCRIPTION: This snippet defines a list of classes to be included in the VTK::FiltersParallelDIY2 module, including various filters and generators.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAdaptiveResampleToImage\n  vtkExtractSubsetWithSeed\n  vtkGenerateGlobalIds\n  vtkGhostCellsGenerator\n  vtkNativePartitioningStrategy\n  vtkOverlappingCellsDetector\n  vtkPartitioningStrategy\n  vtkPResampleToImage\n  vtkPResampleWithDataSet\n  vtkProbeLineFilter\n  vtkRedistributeDataSetFilter\n  vtkStitchImageDataWithGhosts)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Autoinitialization\nDESCRIPTION: Sets up automatic initialization of VTK modules for the parallel processing targets. Ensures proper module loading for both ParallelIso and TaskParallelism executables.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ParallelProcessing/Generic/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS ParallelIso\n          TaskParallelism\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: VTK PolyData HDF5 Structure\nDESCRIPTION: Defines the structure of a VTK PolyData file in HDF5 format, containing point data, cell data, and geometry information. The file includes various datasets for connectivity, materials, normals, and warping data with specified datatypes and dimensions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_36\n\nLANGUAGE: HDF5\nCODE:\n```\nHDF5 \"ExternalData/Testing/Data/test_poly_data.hdf\" {\nGROUP \"/\" {\n   GROUP \"VTKHDF\" {\n      ATTRIBUTE \"Type\" {\n         DATATYPE  H5T_STRING {\n            STRSIZE 8;\n            STRPAD H5T_STR_NULLPAD;\n            CSET H5T_CSET_ASCII;\n            CTYPE H5T_C_S1;\n         }\n         DATASPACE  SCALAR\n      }\n      ATTRIBUTE \"Version\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( 2 ) }\n      }\n      GROUP \"CellData\" {\n         DATASET \"Materials\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 816 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Lines\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 0 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      DATASET \"NumberOfPoints\" {\n         DATATYPE  H5T_STD_I64LE\n         DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n      }\n      GROUP \"PointData\" {\n         DATASET \"Normals\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 412, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n         DATASET \"Warping\" {\n            DATATYPE  H5T_IEEE_F32LE\n            DATASPACE  SIMPLE { ( 412, 3 ) / ( H5S_UNLIMITED, 3 ) }\n         }\n      }\n      DATASET \"Points\" {\n         DATATYPE  H5T_IEEE_F32LE\n         DATASPACE  SIMPLE { ( 412, 3 ) / ( H5S_UNLIMITED, 3 ) }\n      }\n      GROUP \"Polygons\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2448 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 818 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Strips\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 0 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n      GROUP \"Vertices\" {\n         DATASET \"Connectivity\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 0 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfCells\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"NumberOfConnectivityIds\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n         DATASET \"Offsets\" {\n            DATATYPE  H5T_STD_I64LE\n            DATASPACE  SIMPLE { ( 2 ) / ( H5S_UNLIMITED ) }\n         }\n      }\n   }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test with 2 Processes\nDESCRIPTION: This snippet adds an MPI test named `vtkFiltersParallelMPICxxTests-MPI test_2_procs` which runs `TestDistributedPointCloudFilter2` and `TestDistributedPointCloudFilter.cxx`. The `vtk_add_test_mpi` macro is used, and the number of processes is explicitly set to 2 before defining the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkFiltersParallelMPICxxTests-MPI_NUMPROCS 2)\nvtk_add_test_mpi(vtkFiltersParallelMPICxxTests-MPI test_2_procs\n  TestDistributedPointCloudFilter2,TestDistributedPointCloudFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring PROJ Binary Targets in CMake\nDESCRIPTION: Conditionally includes CMake files for each PROJ binary tool based on build options, and adds the corresponding targets to BIN_TARGETS.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_CCT)\n  include(bin_cct.cmake)\n  set(BIN_TARGETS ${BIN_TARGETS} cct)\nendif()\n\nif(BUILD_CS2CS)\n  include(bin_cs2cs.cmake)\n  set(BIN_TARGETS ${BIN_TARGETS} cs2cs)\nendif()\n\nif(BUILD_GEOD)\n  include(bin_geod.cmake)\n  if(BUILD_TESTING)\n    include(bin_geodtest.cmake)\n  endif()\n  set(BIN_TARGETS ${BIN_TARGETS} geod)\nendif()\n\nif(BUILD_PROJ)\n  include(bin_proj.cmake)\n  set(BIN_TARGETS ${BIN_TARGETS} binproj)\nendif()\n\nif(BUILD_PROJINFO)\n  include(bin_projinfo.cmake)\n  set(BIN_TARGETS ${BIN_TARGETS} binprojinfo)\nendif()\n\nif(BUILD_GIE)\n  include(bin_gie.cmake)\n  set(BIN_TARGETS ${BIN_TARGETS} gie)\nendif()\n\nif(BUILD_PROJSYNC)\n  if(NOT ENABLE_CURL)\n    message(SEND_ERROR \"projsync requires Curl\")\n  endif()\n  include(bin_projsync.cmake)\n  set(BIN_TARGETS ${BIN_TARGETS} bin_projsync)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK IO Core Test Executable\nDESCRIPTION: Creates the test executable for VTK IO Core CXX tests using the previously configured test files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOCoreCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Classes and Private Classes in CMake\nDESCRIPTION: This snippet initializes lists of classes and private classes for VTK using a CMake script. The `set` command is used to define the `classes` and `private_classes`, which are then referenced in later module setup commands. These class definitions are integral for configuring the module's structure and dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkSegYReader)\n\nset(private_classes\n  vtkSegYIOUtils\n  vtkSegYReaderInternal\n  vtkSegYTraceReader)\n```\n\n----------------------------------------\n\nTITLE: Checking EMSCRIPTEN Environment in CMake\nDESCRIPTION: This snippet checks if the build is running inside an Emscripten environment, required for compiling WebAssembly applications. If EMSCRIPTEN is not present, the build process is skipped.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT EMSCRIPTEN)\n  message(\"Skipping example: This needs to run inside an Emscripten build environment\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK OpenTURNS Classes\nDESCRIPTION: Defines a list of VTK classes that integrate with OpenTURNS functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOTDensityMap\n  vtkOTFilter\n  vtkOTKernelSmoothing\n  vtkOTScatterPlotMatrix\n  vtkOTUtilities)\n```\n\n----------------------------------------\n\nTITLE: Configuring JPEG Memory Writer Test in CMake for VTK\nDESCRIPTION: Adds a test for writing JPEG images to memory in VTK without requiring input data or validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestWriteToMemoryJPEG,TestWriteToMemory.cxx,NO_DATA NO_VALID NO_OUTPUT\n    \"test.jpeg\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Expat C++ Tests with CMake\nDESCRIPTION: This snippet configures C++ tests for the VTK Expat module using CMake. It adds a test named 'vtkexpatCxxTests' with specific options and creates a test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkexpatCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeExpat.cxx)\nvtk_test_cxx_executable(vtkexpatCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable with CMake\nDESCRIPTION: This snippet invokes the vtk_test_cxx_executable function to create a C++ test executable named vtkkwimlCxxTests within the VTK project. This executable is based on the tests defined earlier and relies on the CMake setup within the VTK infrastructure to compile and link the test executable properly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkkwimlCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Controlling In-Memory Source/Destination Managers with CMake\nDESCRIPTION: This snippet demonstrates how to control the inclusion of `jpeg_mem_src()` and `jpeg_mem_dest()` by passing `-DWITH_MEM_SRCDST=0` to cmake during the build process. This restores the pre-1.3 behavior, excluding these functions unless libjpeg v8 API/ABI emulation is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"-DWITH_MEM_SRCDST=0\"\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake for VTK Module\nDESCRIPTION: This command adds the Cxx subdirectory to the build, indicating that the C++ source code for the VTK module is located in this subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for VTK Verdict Module in CMake\nDESCRIPTION: Sets up a list of header files for the VTK verdict module, including a configured header file that will be generated in the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/vtkverdict/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  verdict.h\n  VerdictVector.hpp\n  verdict_defines.hpp\n  \"${CMAKE_CURRENT_BINARY_DIR}/verdict_config.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring VTK Accelerators VTKm Filters Module\nDESCRIPTION: Adds the VTK::AcceleratorsVTKmFilters module to the build, setting its sources, headers, and classes, and linking it with required VTK-m libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::AcceleratorsVTKmFilters\n  SOURCES ${sources}\n  HEADERS ${headers}\n  CLASSES ${classes})\nvtk_module_set_property(VTK::AcceleratorsVTKmFilters\n  PROPERTY  JOB_POOL_COMPILE\n  VALUE     vtkm_pool)\nvtk_module_link(VTK::AcceleratorsVTKmFilters\n  PRIVATE\n    vtkm_worklet\n    vtkm_filter)\nvtk_module_definitions(VTK::AcceleratorsVTKmFilters\n  PUBLIC \"VTK_ENABLE_VTKM_OVERRIDES=$<BOOL:${VTK_ENABLE_VTKM_OVERRIDES}>\")\n\n_vtk_module_real_target(vtkm_accel_target VTK::AcceleratorsVTKmFilters)\nvtkm_add_target_information(${vtkm_accel_target}\n                            EXTENDS_VTKM\n                            MODIFY_CUDA_FLAGS\n                            DEVICE_SOURCES ${sources})\n```\n\n----------------------------------------\n\nTITLE: VTK FFMPEG Module Configuration\nDESCRIPTION: Configures and links the VTK FFMPEG module with all required FFMPEG libraries and components. Sets up module testing support.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOFFMPEG\n  CLASSES ${classes})\nvtk_module_link(VTK::IOFFMPEG\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    FFMPEG::avformat\n    FFMPEG::avcodec\n    FFMPEG::avutil\n    FFMPEG::swscale\n    ${ffmpeg_libraries})\nvtk_add_test_mangling(VTK::IOFFMPEG)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing OpenXR Input Files for VTK\nDESCRIPTION: Sets up a list of OpenXR input files, copies them to the build directory, and installs them to the specified destination.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(openxr_input_files\n  vtk_openxr_actions.json\n  vtk_openxr_binding_htc_vive_controller.json\n  vtk_openxr_binding_khr_simple_controller.json\n  vtk_openxr_binding_hp_mixed_reality.json\n  vtk_openxr_binding_knuckles.json\n  vtk_openxr_binding_microsoft_hand_interaction.json\n)\n\nforeach(inputfile ${openxr_input_files})\n  configure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/${inputfile}\n    ${CMAKE_CURRENT_BINARY_DIR}/${inputfile}\n    COPYONLY)\nendforeach()\n\ninstall(\n  FILES ${openxr_input_files}\n  DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/xr_actions/\"\n  COMPONENT   runtime\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK IOTRUCHAS Module in CMake\nDESCRIPTION: This snippet sets up the VTK IOTRUCHAS module by defining its associated classes and making use of CMake functions like `vtk_module_add_module` to add the module and `vtk_add_test_mangling` to integrate testing. Prerequisites include having VTK and CMake installed, and the defined class `vtkTRUCHASReader` should be implemented elsewhere. The expected result is the successful integration of the module with its tests into the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TRUCHAS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\\n  vtkTRUCHASReader)\\n\\nvtk_module_add_module(VTK::IOTRUCHAS\\n  CLASSES ${classes})\\nvtk_add_test_mangling(VTK::IOTRUCHAS)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Class List for IONetCDF Module in CMake\nDESCRIPTION: This snippet defines a list of classes related to the VTK IONetCDF module, including various readers for NetCDF files. The purpose is to group these classes together for later use in module creation. There are no dependencies required, but it’s essential for the VTK environment to be properly setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkMPASReader\n  vtkNetCDFAccessor\n  vtkXArrayAccessor\n  vtkNetCDFCAMReader\n  vtkNetCDFCFReader\n  vtkNetCDFCFWriter\n  vtkNetCDFPOPReader\n  vtkNetCDFReader\n  vtkNetCDFUGRIDReader\n  vtkSLACParticleReader\n  vtkSLACReader)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Targets\nDESCRIPTION: This snippet uses `add_executable` to define the executable targets: Arrays, Cube, SGrid, and RGrid, specifying their source files. The MACOSX_BUNDLE option creates application bundles on macOS.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/DataManipulation/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(Arrays MACOSX_BUNDLE Arrays.cxx)\nadd_executable(Cube MACOSX_BUNDLE Cube.cxx)\nadd_executable(SGrid MACOSX_BUNDLE SGrid.cxx)\nadd_executable(RGrid MACOSX_BUNDLE RGrid.cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingSceneGraph Module in CMake\nDESCRIPTION: Adds the VTK RenderingSceneGraph module using the previously defined classes. Also adds test mangling for the module to ensure proper symbol resolution during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/SceneGraph/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingSceneGraph\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::RenderingSceneGraph)\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling from Linux to Windows using MinGW - Shell\nDESCRIPTION: This snippet describes how to cross-compile Ogg libraries for Windows from a Linux environment using MinGW. It includes installing necessary cross-compiler tools and running configuration and build commands targeting Windows architecture. Tools like mingw32 and wine are prerequisites.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get mingw32 mingw32-binutils mingw32-runtime wine\n./configure --host=i586-mingw32msvc --target=i586-mingw32msvc --build=i586-linux\nmake\nmake check\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing VTK Zlib Header Files\nDESCRIPTION: This snippet handles the header file configuration and installation for the VTK Zlib module. It first configures the vtk_zlib.h header file from a template and then installs it to the appropriate location using VTK's module header installation function.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_zlib.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_zlib.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_zlib.h\")\n```\n\n----------------------------------------\n\nTITLE: Generating serdes registrar\nDESCRIPTION: This snippet utilizes `vtk_module_generate_libraries_serdes_registrar` to generate the source code for the serialization/deserialization registrar. It uses the defined registrar name, source path, mandatory modules and optional modules for the registrar creation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_generate_libraries_serdes_registrar(\n  REGISTRAR_NAME      \"vtkObjectManagerDefaultSerDes\"\n  REGISTRAR_SOURCE    \"${_vtk_serdes_registrar_source}\"\n  MANDATORY_MODULES   ${_vtk_serialization_manager_public_deps}\n  OPTIONAL_MODULES    ${_vtk_serialization_manager_optional_deps})\n```\n\n----------------------------------------\n\nTITLE: Linking VTK Module\nDESCRIPTION: This snippet uses the `vtk_module_link` CMake function to link the VTK::RenderingOpenXRRemoting module to the OpenXR::Remoting library. The `PUBLIC` keyword indicates that this dependency is propagated to any module that depends on VTK::RenderingOpenXRRemoting.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_link(VTK::RenderingOpenXRRemoting PUBLIC OpenXR::Remoting)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::IOOpenVDB Module in CMake\nDESCRIPTION: Creates the VTK::IOOpenVDB module using vtk_module_add_module, including the previously defined OpenVDB-related classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOOpenVDB\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for CMake\nDESCRIPTION: Adds various compiler definitions particularly for handling specific constraints on Windows with MSVC or Intel compilers, ensuring compatibility across different compilers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/External/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 AND CMAKE_C_COMPILER_ID STREQUAL \"Intel\")\n  set(_INTEL_WINDOWS 1)\nendif()\nif(MSVC OR _INTEL_WINDOWS)\n  add_definitions(\n    -D_CRT_NONSTDC_NO_DEPRECATE\n    -D_CRT_SECURE_NO_DEPRECATE\n    -D_SCL_SECURE_NO_DEPRECATE\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding OpenVDB Package in CMake\nDESCRIPTION: Uses vtk_module_find_package to locate the OpenVDB package. The PRIVATE_IF_SHARED flag indicates that the dependency is private if the module is shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE OpenVDB)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::GUISupportQt Module with vtk_module_add_module\nDESCRIPTION: This snippet uses the `vtk_module_add_module` macro to define the VTK::GUISupportQt module. It specifies the classes, headers, and private headers that make up the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::GUISupportQt\n  CLASSES ${classes}\n  HEADERS ${headers}\n  PRIVATE_HEADERS ${private_headers})\n```\n\n----------------------------------------\n\nTITLE: Registering the VTK InteractionStyle Module\nDESCRIPTION: Adds the InteractionStyle module to the VTK build system with the specified classes, sources, and private headers. Also configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::InteractionStyle\n  CLASSES ${classes}\n  SOURCES ${sources}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::InteractionStyle)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files\nDESCRIPTION: This snippet determines the main test source file (test.c or test.cxx) based on whether the C language is enabled in KWIML.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(KWIML_LANGUAGE_C)\n  set(test_srcs test.c)\nelse()\n  set(test_srcs test.cxx)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions\nDESCRIPTION: This snippet defines the `QT_NO_KEYWORDS` compile definition for the `vtkGUISupportQtCxxTests` target.  This prevents Qt's keywords from conflicting with other identifiers in the code, promoting better code compatibility and avoiding potential compilation errors.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_compile_definitions(vtkGUISupportQtCxxTests PRIVATE QT_NO_KEYWORDS)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Compiler Definitions for NVTX Support\nDESCRIPTION: Adds the USE_NVTX compiler definition to the VTK::RenderingAnari module when NVTX instrumentation is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_definitions(VTK::RenderingAnari\n  PRIVATE\n    $<$<BOOL:${VTK_ANARI_ENABLE_NVTX}>:USE_NVTX>\n)\n```\n\n----------------------------------------\n\nTITLE: Package Directory Setup\nDESCRIPTION: This snippet sets the installation directory for the CMake package. If `KWIML_INSTALL_PACKAGE_DIR` is not already defined, it sets a default value based on the KWIML version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT KWIML_INSTALL_PACKAGE_DIR)\n  set(KWIML_INSTALL_PACKAGE_DIR share/cmake/kwiml-${KWIML_VERSION_MAJOR}.${KWIML_VERSION_MINOR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling an Expression with Immutable Symbol Table in ExprTk (C++)\nDESCRIPTION: Demonstrates attempting to compile an expression that modifies a variable in an immutable symbol table. This will result in a compilation error due to the mutability constraint.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nconst std::string expression_str = \"x += x + 123.456\";\n\nsymbol_table_t immutable_symbol_table\n   (symbol_table_t::symtab_mutability_type::e_immutable);\n\nT x = 0.0;\n\nimmutable_symbol_table.add_variable(\"x\" , x);\n\nexpression_t expression;\nexpression.register_symbol_table(immutable_symbol_table);\n\nparser_t parser;\n\nparser.compile(expression_str, expression);\n   // Compile error because of assignment to variable x\n```\n\n----------------------------------------\n\nTITLE: Setting Expat Character Type in CMake\nDESCRIPTION: This snippet determines the character type used by Expat based on the EXPAT_CHAR_TYPE variable and sets a summary string accordingly. It handles UTF-8, UTF-16, and UTF-32 encodings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_CHAR_TYPE STREQUAL \"char\")\n    set(_EXPAT_CHAR_TYPE_SUMMARY \"char (UTF-8)\")\nelseif(EXPAT_CHAR_TYPE STREQUAL \"ushort\")\n    set(_EXPAT_CHAR_TYPE_SUMMARY \"ushort (unsigned short, UTF-16)\")\nelseif(EXPAT_CHAR_TYPE STREQUAL \"wchar_t\")\n    if(WIN32)\n        set(_EXPAT_CHAR_TYPE_SUMMARY \"wchar_t (UTF-16)\")\n    else()\n        set(_EXPAT_CHAR_TYPE_SUMMARY \"wchar_t (UTF-32)  // not implemented\")\n    endif()\nelse()\n    set(_EXPAT_CHAR_TYPE_SUMMARY \"ERROR\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard for Tests and Fuzzers in Expat XML Parser\nDESCRIPTION: Sets up the C++ language standard when building tests or fuzzers for the Expat XML parser. Uses C++17 for fuzzers (for std::string_view support) and C++11 for tests, ensuring proper language standard compliance.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_BUILD_TESTS OR EXPAT_BUILD_FUZZERS)\n    # We have to call enable_language() before modifying any CMAKE_CXX_* variables\n    enable_language(CXX)\n\n    if (EXPAT_BUILD_FUZZERS)\n        set(CMAKE_CXX_STANDARD 17)  # for std::string_view for Abseil for libprotobuf-mutator\n    else()\n        set(CMAKE_CXX_STANDARD 11)\n    endif()\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    set(CMAKE_CXX_EXTENSIONS OFF)  # i.e. -std=c++11 rather than default -std=gnu++11\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Java Module Wrapping\nDESCRIPTION: Sets up the Java module wrapping for VTK using vtkModuleWrapJava, configuring output paths and module dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_wrap_java(\n  JAVA_OUTPUT     \"${CMAKE_CURRENT_BINARY_DIR}/vtk\"\n  MODULES         ${vtk_modules}\n  WRAPPED_MODULES vtk_java_wrapped_modules\n  UTILITY_TARGET  \"VTK::vtkbuild\"\n  LIBRARY_DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  JNILIB_DESTINATION  \"${CMAKE_INSTALL_JNILIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Third-Party Module for LibPROJ in CMake\nDESCRIPTION: This snippet sets up the VTK module for LibPROJ, specifying license details, version, and configuration for both internal and external usage. It includes SPDX identifiers and download location for the library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtklibproj/COPYING\"\n    SPDX_LICENSE_IDENTIFIER\n      \"MIT\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright Frank Warmerdam\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/proj.git@for/vtk-20230504-8.1.0\"\n    VERSION\n      \"8.1.0\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE LibPROJ\n    TARGETS LibPROJ::LibPROJ\n    USE_VARIABLES LibPROJ_MAJOR_VERSION\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Struct-of-Arrays (SOA) Buffer Structure Definition\nDESCRIPTION: Example structure showing SOA memory layout implementation where vector components are stored in separate arrays.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstruct StructOfArraysBuffer\n{\n  float *x; // Pointer to array containing x components\n  float *y; // Same for y\n  float *z; // Same for z\n};\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Standalone Check\nDESCRIPTION: This snippet checks if the current source directory is the same as the main source directory. If it is, it initializes a standalone KWIML project, sets minimum CMake version, includes CTest for testing, and defines installation directories and prefixes. Otherwise, it assumes KWIML is being used as a subdirectory and sets the standalone flag to 0.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  cmake_minimum_required(VERSION 3.0 FATAL_ERROR)\n  set(kwiml_standalone 1)\n  project(KWIML)\n  include(CTest)\n  mark_as_advanced(BUILD_TESTING)\n  if(BUILD_TESTING)\n    set(KWIML_TEST_ENABLE 1)\n  endif()\n  if(NOT DEFINED KWIML_INSTALL_INCLUDE_DIR)\n    set(KWIML_INSTALL_INCLUDE_DIR include)\n  endif()\n  set(KWIML_INCLUDE_PREFIX kwiml)\nelse()\n  set(kwiml_standalone 0)\n  if(KWIML_INSTALL_INCLUDE_DIR AND NOT DEFINED KWIML_INCLUDE_PREFIX)\n    message(FATAL_ERROR \"Host project must set KWIML_INCLUDE_PREFIX\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating CXX Executable for VTK IO Parallel Xdmf3 Tests\nDESCRIPTION: This snippet calls 'vtk_test_cxx_executable' to create a CXX test executable for the VTK IO Parallel Xdmf3 module. This configuration is necessary to compile and run the test cases as part of the testing suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXdmf3/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOParallelXdmf3CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOCore Classes\nDESCRIPTION: Defines a list of VTK IOCore classes including readers, writers, codecs, compressors and utility classes for compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAbstractParticleWriter\n  vtkAbstractPolyDataReader\n  vtkArrayDataReader\n  vtkArrayDataWriter\n  vtkArrayReader\n  vtkArrayWriter\n  vtkASCIITextCodec\n  vtkBase64InputStream\n  vtkBase64OutputStream\n  vtkBase64Utilities\n  vtkDataCompressor\n  vtkDelimitedTextWriter\n  vtkFileResourceStream\n  vtkGlobFileNames\n  vtkInputStream\n  vtkJavaScriptDataWriter\n  vtkLZ4DataCompressor\n  vtkLZMADataCompressor\n  vtkMemoryResourceStream\n  vtkOutputStream\n  vtkResourceParser\n  vtkResourceStream\n  vtkSortFileNames\n  vtkTextCodec\n  vtkTextCodecFactory\n  vtkURI\n  vtkURILoader\n  vtkUTF16TextCodec\n  vtkUTF8TextCodec\n  vtkWriter\n  vtkZLibDataCompressor)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory for Compilation\nDESCRIPTION: This CMake command `add_subdirectory` includes the specified directory in the build process. This command adds 'Cxx' as a subdirectory to be processed by CMake, including its source files in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Module Discovery and Filtering in VTK\nDESCRIPTION: This snippet discovers and filters VTK modules by excluding example modules and includes the remaining modules for testing. It uses VTK macros to establish paths and locate the necessary kits and modules within the source tree, ensuring only relevant modules are included in subsequent testing processes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWheel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_kits(discovered_kits \"${VTK_TOP_DIR}\")\nvtk_module_find_modules(discovered_modules \"${VTK_TOP_DIR}\")\nset(filtered_modules)\nforeach (discovered_module IN LISTS discovered_modules)\n  if (NOT discovered_module MATCHES \"/Examples/\")\n    list(APPEND filtered_modules \"${discovered_module}\")\n  endif ()\nendforeach ()\nvtk_module_scan(\n  MODULE_FILES            ${filtered_modules}\n  KIT_FILES               ${discovered_kits}\n  WANT_BY_DEFAULT         ON\n  ENABLE_TESTS            DEFAULT\n  HIDE_MODULES_FROM_CACHE ON\n  PROVIDES_MODULES        vtk_modules_to_test\n  PROVIDES_KITS           vtk_kits)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory\nDESCRIPTION: Configures the object factory source and header files with export macros for MPI parallel IO module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOMPIPARALLEL_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Imaging Statistics Module in CMake\nDESCRIPTION: Sets up the VTK Imaging Statistics module by defining the included classes and registering the module with the VTK build system. The module contains classes for image accumulation, histogram generation, and histogram statistics calculation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Statistics/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkImageAccumulate\n  vtkImageHistogram\n  vtkImageHistogramStatistics)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::ImagingStatistics\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingStatistics)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK EnSight Module and Test Configuration\nDESCRIPTION: Adds the EnSight module to VTK with specified public and private components, and configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOEnSight\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  PRIVATE_HEADERS ${private_headers})\nvtk_add_test_mangling(VTK::IOEnSight)\n```\n\n----------------------------------------\n\nTITLE: Creating a Compilation Timeout Check in ExprTk\nDESCRIPTION: Implementation of a compilation check interface to set a timeout for the compilation process. Periodically checks if compilation has run too long, allowing for early termination if the process exceeds a time limit.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_105\n\nLANGUAGE: C++\nCODE:\n```\nstruct compilation_timeout_check final :\n   public exprtk::compilation_check\n{\n   bool continue_compilation(compilation_context& context)\n   override\n   {\n      // Determine if compilation should continue\n      return ...;\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: VTK Module Scanning and Building\nDESCRIPTION: Scans and builds VTK modules by processing module files and setting up dependencies. Configures Python wrapping with specific installation paths and options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_scan(\n  MODULE_FILES      \"${CMAKE_CURRENT_SOURCE_DIR}/module/vtk.module\"\n  REQUEST_MODULES   Wrapping::Wrappable\n  PROVIDES_MODULES  modules\n  ENABLE_TESTS      ON)\n\nvtk_module_python_default_destination(python_destination)\n\nvtk_module_build(MODULES ${modules})\n\nvtk_module_wrap_python(\n  MODULES         ${modules}\n  TARGET          Wrapping::WrappablePython\n  WRAPPED_MODULES wrapping_modules\n  INSTALL_EXPORT  wrapping_export\n  PYTHON_PACKAGE  \"wrapping\"\n  MODULE_DESTINATION  \"${python_destination}\"\n  CMAKE_DESTINATION   \"${CMAKE_INSTALL_LIBDIR}/cmake/WrappingPython\"\n  LIBRARY_DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  BUILD_STATIC    OFF\n  INSTALL_HEADERS OFF)\n```\n\n----------------------------------------\n\nTITLE: Defining Class List for VTK IOExportPDF Module in CMake\nDESCRIPTION: Defines the list of C++ classes that compose the IOExportPDF module, including PDF rendering context device and exporter classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportPDF/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkPDFContextDevice2D\n  vtkPDFExporter)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Test-Related Warnings\nDESCRIPTION: Suppression rules for excluding common warning patterns from test files, which often contain hardcoded values or deliberate constructs that trigger warnings but are appropriate in the test context.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_2\n\nLANGUAGE: cppcheck\nCODE:\n```\n// Tests contain lots of hardcoded values, etc. They overwhelm reporting of issues\n// in the implementation files. So for now suppress the tests' issues so we can focus\n// on implementation issues\nconstArgument:*/Testing/Cxx/*\nduplicateCondition:*/Testing/Cxx/*\nknownConditionTrueFalse:*/Testing/Cxx/*\nredundantAssignment:*/Testing/*\nunreadVariable:*/Testing/Cxx/*\n```\n\n----------------------------------------\n\nTITLE: Defining Private Headers\nDESCRIPTION: This CMake snippet defines a list of private header files for the VTK::IOOMF module. The `set` command is used to create a CMake list variable named `private_headers_core` and assigns a list of header files related to OMF core functionality to it.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_headers_core\n  core/OMFElement.h\n  core/OMFFile.h\n  core/OMFHelpers.h\n  core/OMFProject.h)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests with CMake\nDESCRIPTION: This snippet uses a custom CMake function `vtk_add_test_cxx` to add C++ tests to the project. It lists the source files for the test and includes the `LOOSE_VALID` option for one of the test files.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkGUISupportQtQuickCxxTests tests\n  TestQQuickVTKItem_1.cxx\n  TestQQuickVTKItem_2.cxx,LOOSE_VALID\n  TestQQuickVTKItem_3.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Validating VTK-m Submodule Existence in CMake\nDESCRIPTION: Checks if the VTK-m submodule is properly initialized and provides an error message with instructions if it isn't. This ensures the build process can't proceed without the required submodule.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/vtk-m/CMakeLists.txt\")\n  message(FATAL_ERROR\n    \"VTKm requested, but the VTKm submodule is not initialized. Please run \"\n    \"'git submodule update --init --recursive' in the source directory.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings\nDESCRIPTION: Includes platform-specific CMake files for Apple and Emscripten. It also sets up Git version detection and determines the VTK version.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE)\n  include(vtkApple)\nendif ()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  include(vtkEmscripten)\n  if (CMAKE_GENERATOR STREQUAL \"Ninja\" AND CMAKE_HOST_WIN32)\n    # emcc.bat receives too many characters, so use response files instead.\n    set(CMAKE_NINJA_FORCE_RESPONSE_FILE 1 CACHE INTERNAL \"\")\n  endif ()\nendif ()\n\n# must be before the following iOS / Android\nfind_package(Git QUIET)\ninclude(VTKDetermineVersion)\ninclude(vtkVersion)\nset(VTK_VERSION\n    \"${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}.${VTK_BUILD_VERSION}\")\ndetermine_version(\"${CMAKE_CURRENT_SOURCE_DIR}\" \"${GIT_EXECUTABLE}\" \"VTK\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOCore Module\nDESCRIPTION: Adds the IOCore module to VTK with specified classes and headers, and configures test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOCore\n  CLASSES ${classes}\n  HEADERS ${headers})\nvtk_add_test_mangling(VTK::IOCore)\n```\n\n----------------------------------------\n\nTITLE: Enabling Video for Windows Capture\nDESCRIPTION: This snippet uses `cmake_dependent_option` to enable Video for Windows (vfw32) capture if running on Windows. The option defaults to the value of `vfw_capture_default` or OFF if that is not set. It marks the option as advanced so it isn't visible in the default CMake GUI.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(VTK_USE_VIDEO_FOR_WINDOWS_CAPTURE \"Enable using Video for Windows (vfw32) for video input.\" \"${vfw_capture_default}\"\n  \"WIN32\" OFF)\nmark_as_advanced(VTK_USE_VIDEO_FOR_WINDOWS_CAPTURE)\n```\n\n----------------------------------------\n\nTITLE: Validating Kokkos Backend Configuration\nDESCRIPTION: Checks if the requested Kokkos backends (HIP or CUDA) are available when specified, providing error messages if they are not found. This prevents build failures due to unavailable backends.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Use of VTK_KOKKOS_BACKEND is deprecated.\nif(VTK_KOKKOS_BACKEND)\n  if (VTK_KOKKOS_BACKEND STREQUAL \"HIP\" AND NOT TARGET vtkm_kokkos_hip)\n    message(FATAL_ERROR \"VTK_KOKKOS_BACKEND=HIP but Kokkos HIP backend not found, exiting.\")\n  endif()\n  if (VTK_KOKKOS_BACKEND STREQUAL \"CUDA\" AND NOT TARGET vtkm_kokkos_cuda)\n    message(FATAL_ERROR \"VTK_KOKKOS_BACKEND=CUDA but Kokkos CUDA backend not found, exiting.\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking VTK::IOVideo Module\nDESCRIPTION: This snippet conditionally links the VTK::IOVideo module with the `vfw32` library if the target platform is Windows and video capture is enabled. `vfw32` is a library that is required for Video for Windows capture.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 AND VTK_USE_VIDEO_FOR_WINDOWS)\n  vtk_module_link(VTK::IOVideo\n    PRIVATE\n      vfw32)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Emscripten WASM Browser Test Flag\nDESCRIPTION: Checks if the system is Emscripten and sets a WebAssembly browser testing flag accordingly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(_vtk_test_cxx_wasm_enabled_in_browser ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Release from GitLab Registry\nDESCRIPTION: Command to install the latest stable VTK release wheel from the GitLab package registry using a custom index URL.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/available_python_wheels.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --extra-index-url https://wheels.vtk.org vtk\n```\n\n----------------------------------------\n\nTITLE: Emscripten Link Options Configuration\nDESCRIPTION: Sets additional link options for Emscripten builds to enable exception handling support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  vtk_module_link_options(VTK::CommonMisc\n    INTERFACE\n      \"-sDISABLE_EXCEPTION_CATCHING=0\"\n      \"-fexceptions\")\nendif ()\nvtk_add_test_mangling(VTK::CommonMisc)\n```\n\n----------------------------------------\n\nTITLE: Combining Test Lists\nDESCRIPTION: Combines all test lists into a single variable for the test executable configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${no_vtkm_tests}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Test Mangling\nDESCRIPTION: This snippet registers a test mangling for the VTK Python Filters module. It ensures proper naming and management of test cases for the associated module. This is a part of the testing framework and has no additional dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersPython)\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Data with MPI\nDESCRIPTION: This snippet demonstrates how to use the correct send, recv, and broadcast methods for both general Python objects and array data in MPI. It emphasizes the requirement to specify buffer arguments properly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CHANGES.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsend()\n```\n\nLANGUAGE: Python\nCODE:\n```\nrecv()\n```\n\nLANGUAGE: Python\nCODE:\n```\nbcast()\n```\n\nLANGUAGE: Python\nCODE:\n```\nSend([data, MPI.DOUBLE])\n```\n\nLANGUAGE: Python\nCODE:\n```\nRecv([data, count, MPI.DOUBLE])\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL-Specific Tests for VTK Interaction Widgets\nDESCRIPTION: Adds OpenGL-specific tests for VTK interaction widgets. These tests specifically validate widget functionality that depends on OpenGL rendering capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkInteractionWidgetsCxxTests ogl_tests\n  TestPickingManagerWidgets.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Library Linking and Module Initialization\nDESCRIPTION: Links VTK libraries to the project and auto-initializes VTK modules to ensure proper runtime configuration\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickBoxWidget/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${MYNAME} PRIVATE ${VTK_LIBRARIES})\nvtk_module_autoinit(TARGETS ${MYNAME} MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Builds on Unix\nDESCRIPTION: Command to configure SQLite for a release build with all features enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n../sqlite/configure --enable-all\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Validator with Function in CLI11 (C++)\nDESCRIPTION: This code snippet demonstrates how to create a custom validator with a function to validate the input. A lambda or standard function is passed to the Validator constructor for this.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nCLI::Validator(std::function<std::string(std::string &)>,validator_description,validator_name=\"\");\n```\n\n----------------------------------------\n\nTITLE: Conditional PYI Test Addition\nDESCRIPTION: Adds PYI compilation test and sets up arguments when vtkpythonmodules_pyi target exists.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET vtkpythonmodules_pyi)\n  set(TestCompilePYI_ARGS\n    \"${CMAKE_BINARY_DIR}/${VTK_PYTHON_SITE_PACKAGES_SUFFIX}/vtkmodules\"\n    ${_vtk_python_wrapped_module_names})\n  list(APPEND python_tests TestCompilePYI.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Windows Export Symbols\nDESCRIPTION: Sets a CMake flag to ensure all symbols are exported when building on Windows. This solution assists in generating .lib files on Windows platforms to handle symbol exports.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 1)\n```\n\n----------------------------------------\n\nTITLE: ABI Namespace Warning\nDESCRIPTION: This snippet checks if `VTK_ABI_NAMESPACE_NAME` is set to a non-default value and not running in a CI environment. If so, it emits a warning indicating that the Rendering::Tk ABI does not support namespace mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"if (NOT VTK_ABI_NAMESPACE_NAME STREQUAL \\\"<DEFAULT>\\\" AND NOT DEFINED ENV{CI})\n  message(WARNING \\\"Rendering::Tk ABI does not not support the VTK_ABI_NAMESPACE_NAME \\\"\n                  \\\"and the symbols will not be mangled.\\\")\nendif ()\"\n```\n\n----------------------------------------\n\nTITLE: Enable C++ Exceptions\nDESCRIPTION: Enables exception support for C++ environments using GCC or Clang. This is crucial for handling exceptions across the libHaru call stack when using error callbacks. The script checks for compiler type and adds necessary flags if exceptions are enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_COMPILER_IS_GNUCC OR (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Clang\"))\n   if (FALSE) # XXX(kitware): hardcode settings\n   option (LIBHPDF_ENABLE_EXCEPTIONS \"Enable exceptions\" NO)\n   else ()\n   set(LIBHPDF_ENABLE_EXCEPTIONS ON)\n   endif ()\n\n   if (LIBHPDF_ENABLE_EXCEPTIONS)\n      set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fexceptions\")\n   endif (LIBHPDF_ENABLE_EXCEPTIONS)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding JavaVTK Library and Linking Dependencies - CMake\nDESCRIPTION: This snippet adds the JavaVTK shared library to the project and links it with the necessary libraries such as VTK_LIBRARIES, android, and log. The add_library command is crucial for defining the library target in the CMake build system, while target_link_libraries specifies the external dependencies required at link time.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/JavaVTK/jni/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(JavaVTK SHARED ${sources})\ntarget_link_libraries(JavaVTK ${VTK_LIBRARIES}\n  android\n  log\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files - CMake\nDESCRIPTION: This snippet installs the generated header file 'vtk_utf8.h' into the appropriate installation directory. It ensures that the header is accessible for users and projects that depend on the VTK module for UTF-8 support.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/utf8/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_utf8.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project Settings for HDF5_HL\nDESCRIPTION: Initializes the CMake project for HDF5 High Level library with C language support. Includes version requirement check that is conditionally disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/hl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): cmake versions are handled by VTK.\ncmake_minimum_required (VERSION 3.12)\nendif ()\nproject (HDF5_HL C)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from iterator ranges in C++\nDESCRIPTION: This snippet explains how to parse JSON data from an iterator range, which can be provided by any container with a compatible integral type. It demonstrates the flexibility of parsing JSON from different sources.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<std::uint8_t> v = {'t', 'r', 'u', 'e'};\njson j = json::parse(v.begin(), v.end());\n\nstd::vector<std::uint8_t> v = {'t', 'r', 'u', 'e'};\njson j = json::parse(v);\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests with VTK in CMake\nDESCRIPTION: This CMake snippet uses the vtk_add_test_python function to include a set of Python test scripts in the VTK project. It lists each test script file explicitly, some with certain conditions on their execution. This snippet requires VTK to be set up with CMake and Python correctly. It expects Python files to be in the specified project directory and lists tests such as ParticleReader.py and motor.py. The snippet underscores some dependencies, notably skipping TestPolygonWriters.py due to an unmet condition.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  ParticleReader.py\n  Plot3D.py,NO_VALID\n  Plot3DScalars.py\n  Plot3DVectors.py\n  TestAVSucdReader.py\n  TestFLUENTReader.py\n  TestGAMBITReader.py\n  # TestPolygonWriters.py # needs vtkCGMWriter (not built)\n  motor.py\n  testHexaPenta.py\n  TestChacoReader.py\n  TestSimplePointsReader.py\n  TestPlot3DMeta.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK IOXML Module with Classes and Private Templates\nDESCRIPTION: This snippet utilizes the defined classes and private templates to configure the VTK::IOXML module, ensuring all necessary components for XML data handling are included.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOXML\n  CLASSES ${classes}\n  PRIVATE_TEMPLATES ${private_templates})\n```\n\n----------------------------------------\n\nTITLE: Adding C header for isatty function\nDESCRIPTION: Code snippet to be added to the generated lex.yy.c file to declare the isatty function for C compilers. This ensures compatibility when the code is compiled as C rather than C++.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifndef __cplusplus\nextern int isatty(int);\n#endif /* __cplusplus */\n```\n\n----------------------------------------\n\nTITLE: Parsing Fortran-like Floating-Point Numbers with Fast Float\nDESCRIPTION: This snippet demonstrates how to parse Fortran-like number representations using the fast_float library's from_chars_advanced function. It sets up the appropriate parse options and validates the parsed result to ensure correctness.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n  std::string input = \"1d+4\";\n  double result;\n  fast_float::parse_options options{fast_float::chars_format::fortran};\n  auto answer = fast_float::from_chars_advanced(input.data(), input.data() + input.size(), result, options);\n  if ((answer.ec != std::errc()) || ((result != 10000))) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n  std::cout << \"parsed the number \" << result << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering WebGPU Buffers and Textures in C++\nDESCRIPTION: Declaration of unordered maps that maintain registries of WebGPU buffers and textures. These maps associate VTK smart pointers to their corresponding WebGPU objects, enabling resource reuse across compute passes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\nstd::unordered_map<vtkSmartPointer<vtkWebGPUComputeBuffer>, wgpu::Buffer> RegisteredBuffers;\nstd::unordered_map<vtkSmartPointer<vtkWebGPUComputeTexture>, wgpu::Texture> RegisteredTextures;\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingImage Module Classes and Dependencies\nDESCRIPTION: Defines the list of classes for the VTK RenderingImage module and adds them to the build system. Includes depth-to-point-cloud conversion, image reslice mapping, and image stack handling components. Also sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkDepthImageToPointCloud\n  vtkImageResliceMapper\n  vtkImageSliceCollection\n  vtkImageStack)\n\nvtk_module_add_module(VTK::RenderingImage\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::RenderingImage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for Legacy Python Support\nDESCRIPTION: Adds specific compiler flags for Python versions below 3.7 when using newer CMake versions. Checks and applies the -Wno-writable-strings flag to suppress warnings related to string handling in older Python versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/PythonInterpreter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (Python3_VERSION VERSION_LESS \"3.7\" AND NOT CMAKE_VERSION VERSION_LESS \"3.19\")\n  include(CheckCompilerFlag)\n  set(old_python_ignore_warning_flag \"-Wno-writable-strings\")\n  check_compiler_flag(CXX \"${old_python_ignore_warning_flag}\" \"vtk_have_compiler_flag-CXX-${old_python_ignore_warning_flag}\")\n  if (vtk_have_compiler_flag-CXX-${old_python_ignore_warning_flag})\n    vtk_module_compile_options(VTK::PythonInterpreter\n      PRIVATE\n        \"${old_python_ignore_warning_flag}\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::IOMySQL Module\nDESCRIPTION: This snippet adds the VTK::IOMySQL module to the VTK build system.  It uses the `vtk_module_add_module` macro, passing in the module name (`VTK::IOMySQL`), the list of classes, and the list of source files. This command registers the module with the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOMySQL\n  CLASSES ${classes}\n  SOURCES ${sources})\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files\nDESCRIPTION: Sets the header files required for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  vtkPainterCommunicator.h)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module for IOAMR\nDESCRIPTION: This snippet adds the VTK::IOAMR module using the `vtk_module_add_module` command. It specifies the classes, sources, and private classes defined in the previous `set` commands. Also includes test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOAMR\n  CLASSES ${classes}\n  SOURCES ${sources}\n  PRIVATE_CLASSES ${private_classes})\nvtk_add_test_mangling(VTK::IOAMR)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Source Directories\nDESCRIPTION: This section configures paths related to the top level of the VTK source and binary directories. It ensures that configurations align with the main VTK source structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/External/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_filename_component(VTK_TOP_DIR \"${VTKTestExternal_SOURCE_DIR}/../..\" ABSOLUTE)\nset(ExternalData_SOURCE_ROOT \"${VTK_TOP_DIR}\")\nset(VTK_SOURCE_DIR \"${VTK_TOP_DIR}\")\n\nconfigure_file(\n  \"${VTK_SOURCE_DIR}/CMake/CTestCustom.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Vector Definition in ExprTk\nDESCRIPTION: Examples of defining and initializing vectors in ExprTk with various methods.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_44\n\nLANGUAGE: ExprTk\nCODE:\n```\n// Initialise all values to zero\nvar x[3];\n\n// Initialise all values to zero\nvar x[3] := {};\n\n// Initialise all values to given value or expression\nvar x[3]   := [ 42 ];\nvar y[x[]] := [ 123 + 3y + sin(w / z) ];\n\n// Initialise all values iota style\nvar v[4] := [ 0 : +1];  //  0,  1,  2,  3\nvar v[5] := [-3 : -2];  // -3, -5, -7, -9, -11\n\n// Initialise the first two values, all other elements to zero\nvar x[3] := { (1 + x[2]) / x[], (sin(y[0] / x[]) + 3) / x[] };\n\n// Initialise the first three (all) values\nconst var size := 3;\nvar x[size] := { 1, 2, 3 };\n\n// Initialise vector from a vector\nvar x[4] := { 1, 2, 3, 4 };\nvar y[3] := x;\nvar w[5] := { 1, 2 }; // 1, 2, 0, 0, 0\n\n// Initialise vector from a smaller vector\nvar x[3] := { 1, 2, 3 };\nvar y[5] := x;   // 1, 2, 3, ??, ??\n\n// Non-initialised vector\nvar x[3] := null; // ?? ?? ??\n\n// Error as there are too many initialisers\nvar x[3] := { 1, 2, 3, 4 };\n```\n\n----------------------------------------\n\nTITLE: Defining expat_shy_set Macro for Configuration Variables in CMake\nDESCRIPTION: Implements a custom macro that serves as a hybrid between CMake's set() and option() functions. It supports non-boolean types while respecting previously defined values, avoiding the need for FORCE when Expat is included via add_subdirectory().\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(expat_shy_set var default cache type desc)\n    # Macro expat_shy_set came into life because:\n    # - Expat was previously using an inconsistent mix of CMake's native set()\n    #   and option() to define public build time options.\n    # - option() is more friendly than set() with regard to configuring an\n    #   external project that is pulled in by means of add_subdirectory() --\n    #   see comments in issue #597 -- so we wanted to get away from set().\n    # - option() auto-converts non-bool values to bool when writing to the CMake\n    #   cache, so we needed something that supports non-bool better and hence\n    #   wanted to get away from plain option(), too.\n    #\n    # As a result, this function serves as a hybrid between CMake's regular set()\n    # and option(): from set() it takes support for non-bool types and the function\n    # name and signature whereas from option() (with policy CMP0077 mode NEW) it\n    # takes being shy when a value has previously been defined for that variable.\n    #\n    # So that resolves all need for set(.. FORCE) when pulling in Expat by means of\n    # add_subdirectory().\n    #\n    if(NOT ${cache} STREQUAL \"CACHE\")\n        message(SEND_ERROR \"Macro usage is: expat_shy_set(var default CACHE type desc)\")\n    endif()\n\n    if(DEFINED ${var})\n        # NOTE: The idea is to (ideally) only add to the cache if\n        #       there is no cache entry, yet.  \"if(DEFINED CACHE{var})\"\n        #       requires CMake >=3.14.\n        if(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.14\" AND NOT DEFINED \"CACHE{${var}}\")\n            set(\"${var}\" \"${${var}}\" CACHE \"${type}\" \"${desc}\")\n        endif()\n    else()\n        set(\"${var}\" \"${default}\" CACHE \"${type}\" \"${desc}\")\n    endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests for CellGrid Module\nDESCRIPTION: CMake command to register multiple Python test files for the VTK CellGrid module. Each test is configured with the NO_RT flag to disable runtime testing. Tests cover various CellGrid functionalities including cell centers, ranges, side information, grid transformations, and conversions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestCellGridCellCenters.py,NO_RT\n  TestCellGridRange.py,NO_RT\n  TestCellGridSideInfo.py,NO_RT\n  TestCellGridToUnstructuredGrid.py,NO_RT\n  TestCellGridTransform.py,NO_RT\n  TestCopyCellGrid.py,NO_RT\n  TestUnstructuredGridToCellGrid.py,NO_RT\n  TestCellGridPointProbe.py,NO_RT\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executables for Benchmarking in CMake\nDESCRIPTION: Defines test executables 'TimingTests' and 'GLBenchmarking' with the necessary library links. It checks the VTK_WHEEL_BUILD flag to conditionally include executable definitions. It ensures modules are initialized with auto-init, and links essential libraries based on the benchmark type.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Benchmarks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Add our test executables.\nif (NOT VTK_WHEEL_BUILD)\n  vtk_module_add_executable(TimingTests\n    NO_INSTALL\n    TimingTests.cxx)\n  target_link_libraries(TimingTests\n    PRIVATE\n      VTK::UtilitiesBenchmarks)\n\n  vtk_module_autoinit(\n    TARGETS TimingTests\n    MODULES VTK::UtilitiesBenchmarks)\n\n  vtk_module_add_executable(GLBenchmarking\n    NO_INSTALL\n    GLBenchmarking.cxx)\n  target_link_libraries(GLBenchmarking\n    PRIVATE\n      VTK::ChartsCore\n      VTK::UtilitiesBenchmarks\n      VTK::ViewsContext2D)\n\n  vtk_module_autoinit(\n    TARGETS GLBenchmarking\n    MODULES VTK::ChartsCore\n            VTK::UtilitiesBenchmarks\n            VTK::ViewsContext2D)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx\nDESCRIPTION: Builds the VTK user and developer documentation as HTML web pages using Sphinx. The output is stored in the _build/html directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Views Context2D Module Classes and Tests\nDESCRIPTION: Defines VTK context classes and configures the Views Context2D module with test mangling. Sets up vtkContextInteractorStyle and vtkContextView classes as part of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Context2D/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkContextInteractorStyle\n  vtkContextView\n  )\n\nvtk_module_add_module(VTK::ViewsContext2D\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ViewsContext2D)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Classes\nDESCRIPTION: This CMake snippet defines a list of VTK classes that will be part of the VTK::IOOMF module.  The `set` command is used to create a CMake list variable named `classes` and assigns the string `vtkOMFReader` to it.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOMFReader)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for OSPRay Volume Interface\nDESCRIPTION: Declares and configures the VTK object factory for the OSPRay volume interface, overriding the vtkOSPRayVolumeMapper.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkOSPRayVolumeInterface\n  OVERRIDE vtkOSPRayVolumeMapper)\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGRAYTRACING_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Acquiring Point Attribute Compute Render Buffer in VTK WebGPU\nDESCRIPTION: This code snippet demonstrates the acquisition of a `vtkWebGPUComputeRenderBuffer` for point attributes within a rendering pipeline. The `AcquirePointAttributeComputeRenderBuffer()` function sets up the buffer as a parameter holder, and the returned buffer is added to a list for later use.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/doc/webgpu-compute-api-dev.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n// Getting the WebGPUMapper to access the point attribute render buffers\nvtkWebGPUPolyDataMapper* webGPUMapper = vtkWebGPUPolyDataMapper::SafeDownCast(mapper);\n\n// 1)\nint bufferGroup = 0, bufferBinding = 0;\nint uniformsGroup = 0, uniformsBinding = 1;\nvtkSmartPointer<vtkWebGPUComputeRenderBuffer> pointColorsRenderBuffer =\n  webGPUMapper->AcquirePointAttributeComputeRenderBuffer(\n    vtkWebGPUPolyDataMapper::PointDataAttributes::COLORS, bufferGroup, bufferBinding,\n    uniformsGroup, uniformsBinding);\n```\n\n----------------------------------------\n\nTITLE: Emscripten Check and Skipping Non-Emscripten Builds\nDESCRIPTION: This snippet checks if the build environment is Emscripten. If not, it skips the example build, preventing it from running outside of the intended environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT EMSCRIPTEN)\n  message(\"Skipping example: This needs to run inside an Emscripten build environment\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Sources CXX Tests in CMake\nDESCRIPTION: This snippet adds C++ tests for the VTK Filters Sources module. It specifies a list of test files, some with the NO_VALID flag, and creates a test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersSourcesCxxTests tests\n  TestArcSource.cxx,NO_VALID\n  TestArrowSource.cxx\n  TestCapsuleSource.cxx,NO_VALID\n  TestCellTypeSource.cxx,NO_VALID\n  TestConeSource.cxx,NO_VALID\n  TestCubeSource.cxx,NO_VALID\n  TestCylinderSource.cxx,NO_VALID\n  TestDiskSource.cxx,NO_VALID\n  TestEllipseArcSource.cxx\n  TestEllipticalButtonSource.cxx,NO_VALID\n  TestFrustumSource.cxx,NO_VALID\n  TestGlyphSource2D.cxx,NO_VALID\n  TestGlyphSource2DResolution.cxx,\n  TestGoldenBallSource.cxx,NO_VALID\n  TestHyperTreeGridPreConfiguredSource.cxx\n  TestLineSource.cxx,NO_VALID\n  TestMultiBlock.cxx\n  TestOutlineCornerSource.cxx,NO_VALID\n  TestOutlineSource.cxx,NO_VALID\n  TestParametricFunctionSource.cxx,NO_VALID\n  TestPartitionedDataSetSource.cxx,NO_VALID\n  TestPlaneSource.cxx,NO_VALID\n  TestPlatonicSolidSource.cxx,NO_VALID\n  TestPointSource.cxx,NO_VALID\n  TestPolyLineSource.cxx,NO_VALID\n  TestPolyPointSource.cxx,NO_VALID\n  TestProgrammableSource.cxx,NO_VALID\n  TestRandomHyperTreeGridSource.cxx\n  TestRectangularButtonSource.cxx,NO_VALID\n  TestRegularPolygonSource.cxx,NO_VALID\n  TestSpatioTemporalHarmonicsSource.cxx\n  TestSphereSource.cxx,NO_VALID\n  TestSuperquadricSource.cxx,NO_VALID\n  TestTessellatedBoxSource.cxx,NO_VALID\n  TestTextSource.cxx,NO_VALID\n  TestTexturedSphereSource.cxx,NO_VALID\n  )\n\nvtk_test_cxx_executable(vtkFiltersSourcesCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingRayTracing Classes in CMake\nDESCRIPTION: Sets up a list of classes for the VTK RenderingRayTracing module, including various node types for OSPRay rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOSPRayActorNode\n  vtkOSPRayAMRVolumeMapperNode\n  vtkOSPRayCameraNode\n  vtkOSPRayCompositePolyDataMapperNode\n  vtkOSPRayLightNode\n  vtkOSPRayMaterialHelpers\n  vtkOSPRayMaterialLibrary\n  vtkOSPRayMoleculeMapperNode\n  vtkOSPRayPass\n  vtkOSPRayPolyDataMapperNode\n  vtkOSPRayPointGaussianMapperNode\n  vtkOSPRayRendererNode\n  vtkOSPRayUnstructuredVolumeMapperNode\n  vtkOSPRayViewNodeFactory\n  vtkOSPRayVolumeMapper\n  vtkOSPRayVolumeMapperNode\n  vtkOSPRayVolumeNode\n  vtkOSPRayWindowNode)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK RenderingExternal Module Definitions in CMake\nDESCRIPTION: Defines private module definitions for VTK RenderingExternal, specifically setting VTK_OPENGL2.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/External/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_definitions(VTK::RenderingExternal\n  PRIVATE\n    VTK_OPENGL2)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Reeb Graph C++ Tests with CMake\nDESCRIPTION: This snippet adds C++ tests for the VTK Filters Reeb Graph module and creates a test executable. It specifies that the tests have no data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ReebGraph/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersReebGraphCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestReebGraph.cxx\n  )\nvtk_test_cxx_executable(vtkFiltersReebGraphCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Expat Build Options in CMake\nDESCRIPTION: Sets up build options and performs checks for the Expat XML parser library. Handles dependencies like libbsd, configures character encoding options, and sets up compiler flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXPAT_DTD AND NOT EXPAT_GE)\n    message(SEND_ERROR \"Option EXPAT_DTD requires that EXPAT_GE is also enabled.\")\n    message(SEND_ERROR \"Please either enable option EXPAT_GE (recommended) or disable EXPAT_DTD also.\")\nendif()\n\nif(EXPAT_WITH_LIBBSD)\n    find_library(LIB_BSD NAMES bsd)\n    if(NOT LIB_BSD)\n        message(SEND_ERROR \"EXPAT_WITH_LIBBSD option is enabled, but libbsd was not found\")\n    else()\n        set(HAVE_LIBBSD TRUE)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA-Specific Build Settings\nDESCRIPTION: Sets up CUDA-specific compilation flags, language settings, and links against CUDA libraries when the CUDA backend is available. Suppresses certain CUDA-specific warnings.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  # Temporarily suppress \"has address taken but no possible call to it\" warnings,\n  # until we figure out its implications.\n  # We are disabling all warnings as nvlink has no known way to suppress\n  # individual warning types.\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\n\n  set_source_files_properties(${classes_cuda} PROPERTIES LANGUAGE CUDA)\n\n  vtk_module_set_properties(VTK::IOCatalystConduit\n    CUDA_SEPARABLE_COMPILATION ON)\n\n  vtk_module_compile_options(VTK::IOCatalystConduit\n    PUBLIC $<$<COMPILE_LANGUAGE:CUDA>:-Xcudafe --diag_suppress=extra_semicolon>)\n\n  find_package(CUDAToolkit REQUIRED)\n  vtk_module_link(VTK::IOCatalystConduit PRIVATE CUDA::cudart)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Updating Zlib Project in VTK\nDESCRIPTION: This example illustrates how to update a third-party project (Zlib) within the VTK project. It involves creating a new branch, running the `update.sh` script to update the local copy, and then reviewing and submitting a merge request.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/UPDATING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd vtk/ThirdParty/zlib\n$ git checkout -b update_zlib_YYYY_MM_DD\n$ ./update.sh\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Contributor Table\nDESCRIPTION: HTML table structure showing contributor information with aligned cells, profile images, names and contribution types. Each cell represents a contributor with their GitHub avatar, username, and contribution badges.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_48\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jbriales\"><img src=\"https://avatars1.githubusercontent.com/u/6850478?v=4?s=100\" width=\"100px;\" alt=\"Jesus Briales\"/><br /><sub><b>Jesus Briales</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=jbriales\" title=\"Code\">💻</a> <a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Ajbriales\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FiltersGeneral Module Templates\nDESCRIPTION: Defines template files used by the FiltersGeneral module. Currently includes only the vtkJoinTables template implementation file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(templates\n  vtkJoinTables.txx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GL2PS Third-Party Module in CMake\nDESCRIPTION: Sets up the GL2PS library as a third-party module within VTK. It specifies both internal build options (with license information and version) and external dependency options for when the system GL2PS is used.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES           \"vtkgl2ps/COPYING.GL2PS\"\n    SPDX_LICENSE_IDENTIFIER \"GL2PS\"\n    SPDX_COPYRIGHT_TEXT     \"Copyright (C) 2003, Christophe Geuzaine\"\n    SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/gl2ps.git@for/vtk-20200930-1.4.2\"\n    VERSION                 \"1.4.2\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE GL2PS\n    VERSION 1.4.2\n    TARGETS GL2PS::GL2PS\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenXR Runtime Tests in CMake for VTK\nDESCRIPTION: Sets up an option to enable OpenXR tests that require an OpenXR runtime. This option is off by default and marked as advanced. It's been tested with Monado on Linux, Valve Index on Windows, and Windows Mixed Reality within SteamVR.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_OPENXR_TESTING_ENABLE_RUNTIME_TESTS \"Enable OpenXR tests that require an OpenXR runtime\" OFF)\nmark_as_advanced(VTK_OPENXR_TESTING_ENABLE_RUNTIME_TESTS)\n```\n\n----------------------------------------\n\nTITLE: Processing Unknown Variable Symbols in ExprTk\nDESCRIPTION: Demonstrates how to retrieve a list of unknown variables that were automatically added to the symbol table by the USR during expression parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_67\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<std::string> variable_list;\n\nunknown_var_symbol_table.get_variable_list(variable_list);\n\nfor (const auto& var_name : variable_list)\n{\n   T& v = unknown_var_symbol_table.variable_ref(var_name);\n\n   v = ...;\n}\n\n...\n\nexpression.value();\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module for Rendering VR Models in CMake\nDESCRIPTION: This CMake snippet adds a module named VTK::RenderingVRModels, specifying the classes, sources, and headers necessary for processing and rendering VR models in VTK. This setup ensures the correct inclusion of all prerequisites within the VTK build system for virtual reality applications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VRModels/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingVRModels\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source} ${geometry_sources}\n  PRIVATE_HEADERS ${vtk_object_factory_header} ${geometry_headers})\n```\n\n----------------------------------------\n\nTITLE: Enabling VTK OpenXR Remoting Module in CMake\nDESCRIPTION: CMake configuration to enable the VTK OpenXR Remoting module. This is required when building VTK for OpenXR Remoting support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nVTK_MODULE_ENABLE_VTK_RenderingOpenXRRemoting\n```\n\n----------------------------------------\n\nTITLE: Executable Configuration and Linking\nDESCRIPTION: Creates the CustomLinkView executable and links it with VTK and Qt libraries. Also configures VTK module auto-initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CustomLinkView/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(CustomLinkView MACOSX_BUNDLE\n  ${Srcs} ${Hdrs} ${UIs} ${Rcs})\ntarget_link_libraries(CustomLinkView\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS CustomLinkView\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Misc C++ Tests in CMake\nDESCRIPTION: This CMake script sets up C++ tests for the VTK Common Misc module. It defines a set of test files with the vtk_add_test_cxx function and creates a test executable with vtk_test_cxx_executable. The tests are configured with NO_DATA, NO_VALID, and NO_OUTPUT flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonMiscCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestPolygonBuilder.cxx\n  TestPolygonBuilder2.cxx\n  TestPolygonBuilder3.cxx\n  TestPolygonBuilder4.cxx\n  TestResourceFileLocator.cxx\n  TestPolygonBuilder5.cxx\n  UnitTestExprTkFunctionParser.cxx\n  UnitTestFunctionParser.cxx\n  )\nvtk_test_cxx_executable(vtkCommonMiscCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Qt Dependencies Configuration\nDESCRIPTION: Locates and validates Qt Widgets package dependency, with version matching VTK's Qt version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CustomLinkView/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(\"Qt${VTK_QT_VERSION}\" COMPONENTS Widgets)\nif (NOT TARGET \"Qt${VTK_QT_VERSION}::Widgets\")\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding the XDMF Module to VTK\nDESCRIPTION: Adds the XDMF module to VTK, specifying the source files, headers, and directory structure for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::xdmf2\n  CLASSES ${XdmfFormatSource}\n          ${XdmfModelSource}\n  SOURCES ${XdmfExtraSource}\n  HEADERS Xdmf.h\n          XdmfExport.h\n          \"${CMAKE_CURRENT_BINARY_DIR}/XdmfConfig.h\"\n  HEADERS_SUBDIR \"vtkxdmf2/libsrc\")\nset_target_properties(xdmf2\n  PROPERTIES\n    DEFINE_SYMBOL Xdmf_EXPORTS)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Link Options\nDESCRIPTION: Sets the link options for the WrappedAsyncClipper target. These options, which includes emscripten link options, are set to be public, affecting all dependent targets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_options(WrappedAsyncClipper\\n  PUBLIC\\n    ${emscripten_link_options}\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests with CMake\nDESCRIPTION: CMake command to add Python test files to VTK's test suite. Configured with NO_VALID and NO_RT flags to skip validation and runtime testing. Includes two Python test files for file name operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  NO_VALID NO_RT\n  TestGlobFileNames.py\n  TestSortFileNames.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating VTK TestingCore Module\nDESCRIPTION: This snippet utilizes the CMake macro `vtk_module_add_module` to define the VTK TestingCore module, integrating the classes, headers, sources, and templates defined earlier.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::TestingCore\n  CLASSES   ${classes}\n  HEADERS   ${headers}\n  SOURCES   ${sources}\n  TEMPLATES ${templates})\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Appending for Cocoa\nDESCRIPTION: This snippet conditionally appends source and header files based on whether `VTK_USE_COCOA` is enabled. If `VTK_USE_COCOA` is true, `vtkCocoaTkUtilities.mm` is added to the sources list and `vtkCocoaTkUtilities.h` to the private headers list.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"if (VTK_USE_COCOA)\n  list(APPEND sources\n    vtkCocoaTkUtilities.mm)\n  list(APPEND private_headers\n    vtkCocoaTkUtilities.h)\nendif ()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties for Error Detection in CMake\nDESCRIPTION: Configures specific test properties for malformed file tests to ensure they correctly detect expected errors with proper regular expression matching.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Certain test are expected failure with specific outputs\nset_tests_properties(VTK::IOGeometryCxx-TestOBJReaderMalformed PROPERTIES PASS_REGULAR_EXPRESSION \"Unexpected point index value\")\nset_tests_properties(VTK::IOGeometryCxx-TestOBJReaderMalformed PROPERTIES FAIL_REGULAR_EXPRESSION \"\")\nset_tests_properties(VTK::IOGeometryCxx-TestGLTFReaderMalformed PROPERTIES PASS_REGULAR_EXPRESSION \"Error loading model data\")\nset_tests_properties(VTK::IOGeometryCxx-TestGLTFReaderMalformed PROPERTIES FAIL_REGULAR_EXPRESSION \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions for VTK::GUISupportQt\nDESCRIPTION: This snippet uses `vtk_module_definitions` to define compile definitions for the VTK::GUISupportQt module, specifically `QT_NO_KEYWORDS`. This macro prevents Qt's keywords (like signals and slots) from conflicting with other libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_definitions(VTK::GUISupportQt PRIVATE QT_NO_KEYWORDS)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Expansion with VTK in CMake\nDESCRIPTION: This snippet defines the data directories for AMReX projects using the ExternalData_Expand_Arguments function, specifying paths and search patterns for required inputs. It sets the stage for following test executions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_Expand_Arguments(VTKData _\n  \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/AMReX/MFIX-Exa/,RECURSE:,REGEX:.*}\"\n  \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/AMReX/Sample2D/,RECURSE:,REGEX:.*}\"\n  \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/AMReX/NodalMultiFab/,RECURSE:,REGEX:.*}\"\n  \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/AMReX/NonZeroOrigin/,RECURSE:,REGEX:.*}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for VTK Verdict Module in CMake\nDESCRIPTION: Specifies the source files that make up the VTK verdict module implementation, including various metric calculation files and vector implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/vtkverdict/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  V_EdgeMetric.cpp\n  V_GaussIntegration.cpp\n  V_GaussIntegration.hpp\n  V_HexMetric.cpp\n  V_KnifeMetric.cpp\n  V_PyramidMetric.cpp\n  V_QuadMetric.cpp\n  V_TetMetric.cpp\n  V_TriMetric.cpp\n  V_WedgeMetric.cpp\n  VerdictVector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVR CXX Tests in CMake\nDESCRIPTION: This snippet utilizes `vtk_add_test_cxx` and `vtk_test_cxx_executable` CMake functions to add and configure the OpenVR C++ tests. It associates the tests with the `vtkRenderingOpenVRCxxTests` target and uses the `OpenVR_tests` list to define the test executables.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"vtk_add_test_cxx(vtkRenderingOpenVRCxxTests tests ${OpenVR_tests})\nvtk_test_cxx_executable(vtkRenderingOpenVRCxxTests tests)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Factory in CMake\nDESCRIPTION: The purpose of this snippet is to declare and configure an object factory using the vtk_object_factory_declare and vtk_object_factory_configure macros. It declares vtkPXdmf3Writer as an override for vtkXdmf3Writer and sets up source and header files for the factory configuration. It is typically used within the configuration of VTK modules where vtkPXdmf3Writer acts as a parallel writer.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXdmf3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPXdmf3Writer)\n\nvtk_object_factory_declare(\n  BASE vtkXdmf3Writer\n  OVERRIDE vtkPXdmf3Writer)\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOPARALLELXDMF3_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Data-Dependent C++ Tests for VTK Common Data Model\nDESCRIPTION: Configures additional C++ tests that require data or have specific output requirements. It specifies test files and options such as NO_DATA, NO_VALID, and NO_OUTPUT for certain tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonDataModelCxxTests data_tests\n  TestImageDataOrientation2.cxx,NO_DATA\n  TestLagrangeCurveNonLinearLevel.cxx,NO_DATA\n  TestLagrangeTriangle.cxx\n  TestLagrangeTetra.cxx\n  TestLagrangeWedge.cxx\n  quadraticIntersection.cxx\n  TestCellIterators.cxx,NO_VALID,NO_OUTPUT\n  TestCellLocator.cxx,NO_DATA\n  TestCellLocatorsEdgeCases.cxx,NO_VALID\n  TestIncrementalOctreePointLocator.cxx,NO_VALID\n  TestMeanValueCoordinatesInterpolation1.cxx\n  TestMeanValueCoordinatesInterpolation2.cxx\n  TestPolyhedron2.cxx,NO_VALID\n  TestPolyhedron4.cxx,NO_VALID,NO_OUTPUT\n  TestPolyhedronContouring.cxx,NO_VALID\n  TestPolyhedronCutter.cxx,NO_VALID\n  TestPolyhedronDecompose.cxx,NO_DATA\n  TestSmoothErrorMetric.cxx\n  TestStaticCellLocatorEdgeCases.cxx,NO_VALID\n  TestQuadraticPolygonFilters.cxx\n  TestNonlinearSubdivisionOfDegenerateCells.cxx,NO_DATA\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel PolyData Structure in VTK XML\nDESCRIPTION: XML structure for defining parallel polydata in VTK. Specifies ghost levels and piece distribution across files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"PPolyData\" ...>\n    <PPolyData GhostLevel=\"#\">\n      <PPointData>...</PPointData>\n      <PCellData>...</PCellData>\n      <PPoints>...</PPoints>\n      <Piece Source=\"polyData0.vtp\"/>\n      ...\n    </PPolyData>\n  </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Installing Module Headers with vtk_module_install_headers in CMake\nDESCRIPTION: This snippet uses the vtk_module_install_headers command to specify and install the necessary module header files for the VTK project. It targets the generated vtk_png.h file from the current binary directory for installation. Ensure that the file exists and is correctly specified before invoking this command.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_png.h\")\n```\n\n----------------------------------------\n\nTITLE: Setting HDF5 Package Version Variables in CMake\nDESCRIPTION: Defines version numbers and package names for HDF5. Sets variables for major, minor, and release versions, as well as package strings and URLs.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset (HDF5_PACKAGE \"hdf5\")\nset (HDF5_PACKAGE_NAME \"HDF5\")\nset (HDF5_PACKAGE_VERSION \"${H5_VERS_MAJOR}.${H5_VERS_MINOR}.${H5_VERS_RELEASE}\")\nset (HDF5_PACKAGE_VERSION_MAJOR \"${H5_VERS_MAJOR}.${H5_VERS_MINOR}\")\nset (HDF5_PACKAGE_VERSION_MINOR \"${H5_VERS_RELEASE}\")\nif (H5_VERS_SUBRELEASE)\n  set (HDF5_PACKAGE_VERSION_STRING \"${HDF5_PACKAGE_VERSION}.${H5_VERS_SUBRELEASE}\")\n  set (HDF5_RELEASE_VERSION_STRING \"${HDF5_PACKAGE_VERSION}-${H5_VERS_SUBRELEASE}\")\nelse ()\n  set (HDF5_PACKAGE_VERSION_STRING \"${HDF5_PACKAGE_VERSION}\")\n  set (HDF5_RELEASE_VERSION_STRING \"${HDF5_PACKAGE_VERSION}\")\nendif ()\n# ... (additional version-related variables)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingContextOpenGL2 Module\nDESCRIPTION: Adds the main module configuration including classes, sources, and private headers, followed by test mangling setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ContextOpenGL2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingContextOpenGL2\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source} ${extra_sources}\n  PRIVATE_HEADERS ${private_headers} ${vtk_object_factory_header})\n\nvtk_add_test_mangling(VTK::RenderingContextOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CONVERGECFD Module Classes\nDESCRIPTION: Sets up the VTK CONVERGECFD reader module by defining classes and adding the module with necessary configurations. Also adds test mangling support for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CONVERGECFD/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkCONVERGECFDReader)\n\nvtk_module_add_module(VTK::IOCONVERGECFD\n  CLASSES ${classes}\n  SOURCES ${sources})\nvtk_add_test_mangling(VTK::IOCONVERGECFD)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Tests Directory Addition\nDESCRIPTION: Adds the C++ tests subdirectory if C++ testing is not disabled in VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Classes\nDESCRIPTION: Defines a list of VTK classes that are part of the VTK::IOParallel module. These classes are used by the vtk_module_add_module function to configure the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkEnSightWriter\n  vtkMultiBlockPLOT3DReader\n  vtkNek5000Reader\n  vtkPChacoReader\n  vtkPDataSetReader\n  vtkPDataSetWriter\n  vtkPImageWriter\n  vtkPlot3DMetaReader\n  vtkPOpenFOAMReader)\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory for FreeTypeTools\nDESCRIPTION: Declares a VTK object factory for vtkFreeTypeTools, overriding it with vtkFontConfigFreeTypeTools. This allows for runtime substitution of the FreeTypeTools implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkFreeTypeTools\n  OVERRIDE vtkFontConfigFreeTypeTools)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File\nDESCRIPTION: This snippet uses `configure_file` to generate the `vtkIOVideoConfigure.h` header file from the template `vtkIOVideoConfigure.h.in`. The generated header file will be placed in the binary directory. The `@ONLY` option prevents CMake from attempting to expand variables that are not explicitly marked for expansion.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkIOVideoConfigure.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkIOVideoConfigure.h\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests for NetCDFCF Readers\nDESCRIPTION: Adds Python tests for both original NetCDFCF readers and XArray interface tests using vtk_add_test_python macro\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  # Rest NetCDFCFReader\n  ${tests}\n\n  # Test XArray interface Reuse the same `.py` script but provide a\n  # different name. Also note that the for loop above provides extra\n  # parameters to run the XArray interface and point to the correct\n  # baseline image.\n  NetCDFCF2DBoundsXArray,NetCDFCF2DBounds.py\n  NetCDFCFSetOutputTypeXArray,NetCDFCFSetOutputType.py\n  NetCDFCFSphericalCoordsXArray,NetCDFCFSphericalCoords.py\n  NetCDFReaderXArray,NetCDFReader.py\n  NetCDFCFUnstructuredXArray,NetCDFCFUnstructured.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking for Matplotlib Availability\nDESCRIPTION: This snippet checks if the Matplotlib Python module is available for use in tests. It uses the FindPythonModules CMake script to search for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../../../../CMake/FindPythonModules.cmake)\nfind_python_module(matplotlib MATPLOTLIB_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMP Support in CMake\nDESCRIPTION: Checks for OpenMP support and adds the appropriate compiler flag if enabled. This snippet is used for both GCC/Clang and MSVC compilers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_cxx_compiler_flag(\"-fopenmp\" COMPILER_SUPPORT_OPENMP)\nif(COMPILER_SUPPORT_OPENMP)\n  set(EIGEN_TEST_OPENMP OFF)\n  if(EIGEN_TEST_OPENMP)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp\")\n    message(STATUS \"Enabling OpenMP in tests/examples\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ImagingMath Module in CMake\nDESCRIPTION: This CMake snippet defines the classes for the VTK ImagingMath module and adds them to the build system. It lists various image processing classes that perform mathematical operations on images, and then registers the module with the VTK build system. It also sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Math/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkImageDivergence\n  vtkImageDotProduct\n  vtkImageLogarithmicScale\n  vtkImageLogic\n  vtkImageMagnitude\n  vtkImageMaskBits\n  vtkImageMathematics\n  vtkImageWeightedSum)\n\nvtk_module_add_module(VTK::ImagingMath\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingMath)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Sources\nDESCRIPTION: Specifies the source files that are compiled and linked into the VTK::IOParallel module.  These source files contain the implementation of the classes defined earlier.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  vtkMultiBlockPLOT3DReaderInternals.cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options Based on Configuration\nDESCRIPTION: Defines build options based on configuration settings such as enabling large file support and 64-bit code building.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (CGNS_ENABLE_LFS)\n  include(CheckSymbolExists)\n  if (WIN32)\n    # Windows does not have an _open64 function\n    set(HAVE_OPEN64 0)\n    check_symbol_exists(_lseeki64 \"io.h\" HAVE_LSEEK64)\n  else ()\n    check_symbol_exists(open64 \"sys/types.h;sys/stat.h;unistd.h\" HAVE_OPEN64)\n    check_symbol_exists(lseek64 \"sys/types.h;unistd.h\" HAVE_LSEEK64)\n  endif ()\n  if (HAVE_OPEN64)\n    add_compile_definitions(HAVE_OPEN64)\n  endif ()\n  if (HAVE_LSEEK64)\n    add_compile_definitions(HAVE_LSEEK64)\n  endif ()\nelse ()\n  remove_definitions(-DHAVE_OPEN64 -DHAVE_LSEEK64)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling\nDESCRIPTION: This snippet calls `vtk_add_test_mangling` for the VTK::IOVideo module. This macro ensures that tests related to this module are properly handled and mangled during the testing process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOVideo)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering Volume Module\nDESCRIPTION: Adds the VTK Rendering Volume module to the build system, registering the defined classes and headers, and enabling test mangling\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingVolume\n  CLASSES ${classes}\n  HEADERS ${headers})\nvtk_add_test_mangling(VTK::RenderingVolume)\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in VTK\nDESCRIPTION: Set of comparison operators to evaluate relationships between numeric values, returning boolean results based on specific conditions\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_3\n\nLANGUAGE: mathematical\nCODE:\n```\n< : x < y (Less than)\n<= : x <= y (Less than or equal)\n> : x > y (Greater than)\n>= : x >= y (Greater than or equal)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable and Configuring System Tools Test\nDESCRIPTION: Creates the main C++ test executable from the test source list and configures the testSystemTools test by setting up source and binary directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_test_sourcelist(\n  KWSYS_CXX_TEST_SRCS ${KWSYS_NAMESPACE}TestsCxx.cxx\n  ${KWSYS_CXX_TESTS}\n  )\nadd_executable(${KWSYS_NAMESPACE}TestsCxx ${KWSYS_CXX_TEST_SRCS})\nset_property(TARGET ${KWSYS_NAMESPACE}TestsCxx PROPERTY C_CLANG_TIDY \"\")\nset_property(TARGET ${KWSYS_NAMESPACE}TestsCxx PROPERTY CXX_CLANG_TIDY \"\")\nset_property(TARGET ${KWSYS_NAMESPACE}TestsCxx PROPERTY C_INCLUDE_WHAT_YOU_USE \"\")\nset_property(TARGET ${KWSYS_NAMESPACE}TestsCxx PROPERTY CXX_INCLUDE_WHAT_YOU_USE \"\")\nset_property(TARGET ${KWSYS_NAMESPACE}TestsCxx PROPERTY LABELS ${KWSYS_LABELS_EXE})\ntarget_link_libraries(${KWSYS_NAMESPACE}TestsCxx ${KWSYS_TARGET_LINK})\n\nset(TEST_SYSTEMTOOLS_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(TEST_SYSTEMTOOLS_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/testSystemTools.h.in\n  ${PROJECT_BINARY_DIR}/testSystemTools.h)\ninclude_directories(${PROJECT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK LS-DYNA C++ Tests\nDESCRIPTION: CMake configuration that adds C++ test files for the VTK LS-DYNA reader component and creates a test executable. The tests cover basic reading functionality, deflection handling, and SPH (Smoothed Particle Hydrodynamics) data processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LSDyna/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOLSDynaCxxTests tests\n  TestLSDynaReader.cxx\n  TestLSDynaReaderDeflection.cxx\n  #TestLSDynaReaderNoDefl.cxx\n  TestLSDynaReaderSPH.cxx\n  )\n\nvtk_test_cxx_executable(vtkIOLSDynaCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Importing All VTK Modules in Python\nDESCRIPTION: Method for importing all VTK classes when experimenting or writing quick scripts. This uses the special 'all' module that imports everything at once.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vtkmodules.all import *\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering FreeType Tests in CMake\nDESCRIPTION: This snippet sets up test arguments and adds tests for the VTK Rendering FreeType module. It includes tests that don't require data or produce vector output, and configures additional tests if matplotlib is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# add tests that do not require data or produce vector output\nset(TestFreeTypeTextMapperNoMath_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\nset(TestMathTextFreeTypeTextRendererNoMath_ARGS\n  DATA{../Data/Fonts/DejaVuSans.ttf}\n)\nvtk_add_test_cxx(vtkRenderingFreeTypeCxxTests tests\n  TestBillboardTextActor3D.cxx,LOOSE_VALID\n  TestFTStringToPath.cxx\n  TestFlagpoleLabel.cxx\n  TestFreeTypeTextMapperNoMath.cxx\n  TestFreeTypeTools.cxx,NO_VALID\n  TestMathTextFreeTypeTextRendererNoMath.cxx\n  TestTextActor.cxx,LOOSE_VALID\n  TestTextActorTileScaling.cxx\n  TestTextActor3D.cxx,LOOSE_VALID\n  TestTextActorAlphaBlending.cxx,LOOSE_VALID\n  TestTextActorDepthPeeling.cxx\n  TestTextActor3DAlphaBlending.cxx\n  TestTextActor3DDepthPeeling.cxx\n  TestTextActorScaleModeProp.cxx\n  TestTextMapper.cxx,LOOSE_VALID\n  TestTextOpaquePass.cxx\n  )\n\nvtk_add_test_cxx(vtkRenderingFreeTypeCxxTests no_data_tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestTextBoundingBox.cxx\n  )\nlist(APPEND tests\n  ${no_data_tests})\n\n# Check for vtkErrorMacro calls in these tests (mainly for empty inputs):\nset_tests_properties(\n  VTK::RenderingFreeTypeCxx-TestTextActor\n  VTK::RenderingFreeTypeCxx-TestTextActor3D\n  PROPERTIES FAIL_REGULAR_EXPRESSION \"ERROR:\"\n)\n\n# Check that matplotlib is available\ninclude(../../../../CMake/FindPythonModules.cmake)\nfind_python_module(matplotlib MATPLOTLIB_FOUND)\n\nif(MATPLOTLIB_FOUND AND TARGET VTK::RenderingMatplotlib)\n  set(TestMathTextFonts_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\n  set(TestMathTextFreeTypeTextRenderer_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\n  set(TestFreeTypeTextMapper_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\n  set(TestFreeTypeTextMapperWithColumns_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\n  set(TestFontDPIScaling_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\n\n  vtk_add_test_cxx(vtkRenderingFreeTypeCxxTests matplotlib_tests\n    TestMathTextFonts.cxx\n    TestMathTextFreeTypeTextRenderer.cxx\n    TestFreeTypeTextMapper.cxx\n    TestFreeTypeTextMapperWithColumns.cxx\n    TestFontDPIScaling.cxx\n    )\n  list(APPEND tests\n    ${matplotlib_tests})\nendif()\n\nvtk_test_cxx_executable(vtkRenderingFreeTypeCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Subdirectories\nDESCRIPTION: CMake configuration that sets up test data files and conditionally adds C++ and Python test subdirectories. Includes specific test data files for general testing and additional files when Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Annotation/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/combq.bin\n  Data/combxyz.bin\n  Data/teapot.g)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/bore.vtk\n    Data/track1.binary.vtk\n    Data/track2.binary.vtk\n    Data/track3.binary.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Classes and Adding Module in CMake (CMake)\nDESCRIPTION: This CMake code snippet sets the VTK classes for the FiltersTopology module and adds the module with specified classes. The snippet then adds test mangling for the module. The main dependency is CMake and VTK. No specific parameters are required, and the setup is specific to VTK module configuration. Inputs are class names, and there are no explicit outputs besides module setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Topology/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkFiberSurface)\n\nvtk_module_add_module(VTK::FiltersTopology\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersTopology)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing CGNS Library\nDESCRIPTION: Compilation and installation process for CGNS using make commands, including build and installation targets\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Multi-line Error Position Handling in ExprTk in C++\nDESCRIPTION: Example showing how to convert an error position in a multi-line ExprTk expression into line and column numbers for better error reporting.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_87\n\nLANGUAGE: C++\nCODE:\n```\nif (!parser.compile(program_str,expression))\n{\n   for (std::size_t i = 0; i < parser.error_count(); ++i)\n   {\n      typedef exprtk::parser_error::type error_t;\n\n      error_t error = parser.get_error(i);\n\n      exprtk::parser_error::update_error(error,program_str);\n\n      printf(\"Error[%0lu] at line: %lu column: %lu\\n\",\n             i,\n             error.line_no,\n             error.column_no);\n   }\n\n   return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for Interactor Styles\nDESCRIPTION: Sets up the VTK object factory mechanism to override the default interactor style with the platform-specific one selected earlier. This allows VTK to automatically use the appropriate interaction style.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkInteractorStyleSwitchBase\n  OVERRIDE \"${style_override}\")\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKINTERACTIONSTYLE_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unit Tests\nDESCRIPTION: This snippet configures unit tests for the Expat library, enabling testing and defining test targets for both C and C++ implementations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_BUILD_TESTS)\n    ## these are unittests that can be run on any platform\n    enable_testing()\n\n    if(NOT MSVC)\n        if(MINGW)\n            set(host whatever-mingw32)  # for nothing but run.sh\n        endif()\n        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/run.sh.in run.sh @ONLY)\n    endif()\n\n    function(expat_add_test _name _file)\n        if(MSVC)\n            add_test(NAME ${_name} COMMAND ${_file})\n        else()\n            add_test(NAME ${_name} COMMAND bash run.sh ${_file})\n        endif()\n    endfunction()\n\n    set(_EXPAT_TEST_TARGETS runtests runtests_cxx)\n\n    add_executable(runtests\n        tests/acc_tests.c\n        tests/alloc_tests.c\n        tests/basic_tests.c\n        tests/chardata.c\n        tests/common.c\n        tests/dummy.c\n        tests/handlers.c\n        tests/memcheck.c\n        tests/minicheck.c\n        tests/misc_tests.c\n        tests/ns_tests.c\n        tests/nsalloc_tests.c\n        tests/runtests.c\n        tests/structdata.c\n        ${_EXPAT_C_SOURCES}\n    )\n\n    add_executable(runtests_cxx\n        tests/acc_tests_cxx.cpp\n        tests/alloc_tests_cxx.cpp\n        tests/basic_tests_cxx.cpp\n        tests/chardata_cxx.cpp\n        tests/common_cxx.cpp\n        tests/dummy_cxx.cpp\n        tests/handlers_cxx.cpp\n        tests/memcheck_cxx.cpp\n        tests/minicheck_cxx.cpp\n        tests/misc_tests_cxx.cpp\n        tests/ns_tests_cxx.cpp\n        tests/nsalloc_tests_cxx.cpp\n        tests/runtests_cxx.cpp\n        tests/structdata_cxx.cpp\n        ${_EXPAT_C_SOURCES}\n    )\n\n    foreach(_target ${_EXPAT_TEST_TARGETS})\n        target_compile_definitions(${_target} PRIVATE -DXML_TESTING)\n\n        set_property(TARGET ${_target} PROPERTY RUNTIME_OUTPUT_DIRECTORY tests)\n        expat_add_test(${_target} $<TARGET_FILE:${_target}>)\n\n        if(_EXPAT_LIBM_FOUND)\n            target_link_libraries(${_target} m)\n        endif()\n\n        if(EXPAT_WITH_LIBBSD)\n            target_link_libraries(${_target} ${LIB_BSD})\n        endif()\n    endforeach()\n\n    add_executable(benchmark tests/benchmark/benchmark.c)\n    set_property(TARGET benchmark PROPERTY RUNTIME_OUTPUT_DIRECTORY tests/benchmark)\n    target_link_libraries(benchmark expat)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for Parallel Flow Paths in CMake\nDESCRIPTION: Configures the VTK object factory for the Parallel Flow Paths module. This generates source and header files for the object factory, which are used to manage class overrides.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKFILTERSPARALLELFLOWPATHS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Cesium3DTiles Module Classes\nDESCRIPTION: Defines public and private classes for the VTK::IOCesium3DTiles module. Includes classes for reading and writing Cesium 3D Tiles and B3DM formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkCesium3DTilesWriter\n  vtkCesium3DTilesReader\n  vtkCesiumPointCloudWriter\n  vtkCesiumB3DMReader)\n\nset(private_classes\n  TreeInformation)\n\nvtk_module_add_module(VTK::IOCesium3DTiles\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  )\nvtk_add_test_mangling(VTK::IOCesium3DTiles)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory Export Settings\nDESCRIPTION: Sets up object factory source and header configuration with export macro for the rendering module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ContextOpenGL2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGCONTEXTOPENGL2_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting up VTK module classes with CMake\nDESCRIPTION: This snippet defines a list of VTK classes to be included in the \"DomainsChemistry\" module. The classes are related to the representation and manipulation of molecular data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBlueObeliskData\n  vtkBlueObeliskDataParser\n  vtkMoleculeMapper\n  vtkMoleculeToAtomBallFilter\n  vtkMoleculeToBondStickFilter\n  vtkMoleculeToLinesFilter\n  vtkMoleculeToPolyDataFilter\n  vtkPeriodicTable\n  vtkPointSetToMoleculeFilter\n  vtkProgrammableElectronicData\n  vtkProteinRibbonFilter\n  vtkSimpleBondPerceiver)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for vtklibxml2\nDESCRIPTION: This snippet defines a test executable for vtklibxml2 using the 'vtk_test_cxx_executable' function. It sets up the necessary compilation and linking for the 'vtklibxml2CxxTests', enabling the defined tests to be executed as part of the overall testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtklibxml2CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting up Windows-specific Properties for XdmfCore\nDESCRIPTION: Configures Windows-specific properties for the vtkxdmfcore library when building as a shared library. This sets up the correct symbol export definitions for DLL builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/core/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  #add_definitions(-D_HDF5USEDLL_ -D_HDF5USEHLDLL_)\n  if (BUILD_SHARED_LIBS)\n    # XXX(kitware): mangle the library name.\n    set_target_properties(vtkxdmfcore PROPERTIES\n      DEFINE_SYMBOL XdmfCore_EXPORTS)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Selecting Python Files for mpi4py Package\nDESCRIPTION: Defines a list of Python files to be included in the mpi4py package, with conditional handling for Python 3.11+\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(python_files\n  mpi4py/__init__.py\n  mpi4py/__init__.pxd\n  mpi4py/MPI.pxd)\n\nif (Python3_VERSION VERSION_GREATER_EQUAL \"3.11\")\n  list(APPEND python_files\n    mpi4py/__init__.pyi\n    mpi4py/MPI.pyi\n    mpi4py/py.typed)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting VTK-m Installation Directories and Build Options\nDESCRIPTION: Configures VTK-m installation paths, library suffixes, and output directories based on VTK build settings. This ensures VTK-m components are installed in locations consistent with the overall VTK installation structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(VTKm_INSTALL_LIB_DIR \"${_vtk_build_LIBRARY_DESTINATION}\")\nset(VTKm_INSTALL_INCLUDE_DIR \"${_vtk_build_HEADERS_DESTINATION}/vtkvtkm/vtk-m\")\nif (DEFINED _vtk_build_LIBRARY_NAME_SUFFIX)\n  set(VTKm_CUSTOM_LIBRARY_SUFFIX \"-${_vtk_build_LIBRARY_NAME_SUFFIX}\")\nendif ()\nset(VTKm_EXECUTABLE_OUTPUT_PATH \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nset(VTKm_LIBRARY_OUTPUT_PATH \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\nset(VTKm_BUILD_CMAKE_BASE_DIR \"${CMAKE_BINARY_DIR}\")\nset(VTKm_INSTALL_CONFIG_DIR \"${_vtk_build_CMAKE_DESTINATION}/vtkm\")\nset(VTKm_INSTALL_CMAKE_MODULE_DIR \"${VTKm_INSTALL_CONFIG_DIR}/cmake\")\n# Currently VTK-m only installs its readme and license.\nset(VTKm_INSTALL_SHARE_DIR \"${_vtk_build_LICENSE_DESTINATION}/vtkvtkm\")\n\nif (_vtk_build_INSTALL_HEADERS)\n  set(VTKm_INSTALL_ONLY_LIBRARIES OFF)\nelse ()\n  set(VTKm_INSTALL_ONLY_LIBRARIES ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Encoding Shader Files - CMake\nDESCRIPTION: This snippet encodes each shader file specified in shader_files into a suitable format to be used by the VTK rendering system, generating additional header and source files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (shader_file IN LISTS shader_files)\n  vtk_encode_string(\n    INPUT         \"${shader_file}\"\n    EXPORT_HEADER \"vtkRenderingVolumeOpenGL2Module.h\"\n    EXPORT_SYMBOL \"VTKRENDERINGVOLUMEOPENGL2_NO_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source)\n  list(APPEND sources ${source})\n  list(APPEND private_headers ${header})\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK-m Module Sources and Headers\nDESCRIPTION: Sets up source files, headers, and class definitions for the VTK-m data model accelerator module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(VTKm_NO_DEPRECATED_VIRTUAL ON)\n\nlist(INSERT CMAKE_MODULE_PATH 0\n  \"${VTK_SOURCE_DIR}/ThirdParty/vtkm/vtkvtkm/vtk-m/CMake\")\n\nset(sources\n  vtkmlib/ArrayConvertersReal.cxx\n  vtkmlib/ArrayConvertersSigned.cxx\n  vtkmlib/ArrayConvertersUnsigned.cxx)\n\nset(private_headers\n  vtkmlib/ArrayConverters.hxx)\n\nset(classes\n  vtkmDataSet\n  )\n\nset(nowrap_classes\n  vtkmlib/ArrayConverters\n  vtkmlib/CellSetConverters\n  vtkmlib/DataSetConverters\n  vtkmlib/ImageDataConverter\n  vtkmlib/ImplicitFunctionConverter\n  vtkmlib/PolyDataConverter\n  vtkmlib/UnstructuredGridConverter)\n```\n\n----------------------------------------\n\nTITLE: Adding ParseJava and WrapJava Executables for VTK\nDESCRIPTION: Adds the ParseJava and WrapJava executables for Java wrapping in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET WrapJava)\n  vtk_module_add_executable(ParseJava\n    DEVELOPMENT\n    BASENAME vtkParseJava\n    vtkParseJava.c)\n  target_link_libraries(ParseJava\n    PRIVATE\n      \"${ns}::WrappingTools\")\n  add_executable(\"${ns}::ParseJava\" ALIAS\n    ParseJava)\n\n  vtk_module_add_executable(WrapJava\n    DEVELOPMENT\n    BASENAME vtkWrapJava\n    vtkWrapJava.c)\n  target_link_libraries(WrapJava\n    PRIVATE\n      \"${ns}::WrappingTools\")\n  add_executable(\"${ns}::WrapJava\" ALIAS\n    WrapJava)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ExprTk Multiple Sequence Point Evaluation\nDESCRIPTION: Examples of the sequence point evaluation operator (~) which evaluates each sub-expression and returns the value of the last one. Supports both comma-separated and semicolon-separated formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_15\n\nLANGUAGE: ExprTk\nCODE:\n```\n~(i := x + 1, j := y / z, k := sin(w/u)) == (sin(w/u)))\n~{i := x + 1; j := y / z; k := sin(w/u)} == (sin(w/u)))\n```\n\n----------------------------------------\n\nTITLE: Linking OpenVDB to VTK::IOOpenVDB Module in CMake\nDESCRIPTION: Links the OpenVDB library to the VTK::IOOpenVDB module. The NO_KIT_EXPORT_IF_SHARED flag is used, and the linkage is set as PRIVATE.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::IOOpenVDB\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    OpenVDB::openvdb)\n```\n\n----------------------------------------\n\nTITLE: Source File Configuration\nDESCRIPTION: Defines the list of source files required for the project, including main C++ file, QML file, and resource file\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickBoxWidget/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PROJECT_SOURCES\n  main.cpp\n  main.qml\n  qml.qrc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building from Tarball Distributions - Shell\nDESCRIPTION: This snippet provides the basic commands to configure and build Ogg libraries from tarball distributions on Unix-like systems. The commands include configuring the package, making the build, and optionally installing it as a superuser. Required dependencies include standard development tools for Unix-like systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./configure\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Debug Annotations in VTK\nDESCRIPTION: Sets up an option to enable debugging annotations in the OpenGL command stream, which helps with debugging OpenGL-related issues during development.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Add OpenGL command stream annotations via\n# vtkOpenGLRenderUtilities::MarkDebugEvent when enabled:\noption(VTK_OPENGL_ENABLE_STREAM_ANNOTATIONS\n  \"Enable debugging annotations in the OpenGL command stream.\"\n  OFF\n)\nmark_as_advanced(VTK_OPENGL_ENABLE_STREAM_ANNOTATIONS)\n```\n\n----------------------------------------\n\nTITLE: Enabling CMAKE_AUTOMOC\nDESCRIPTION: This line enables the `CMAKE_AUTOMOC` feature in CMake, which automatically handles the Meta Object Compiler (moc) for Qt classes. This simplifies the build process by automatically generating moc files for Qt classes that use the `Q_OBJECT` macro.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_AUTOMOC 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Executable and Dependencies\nDESCRIPTION: Creates the SimpleView executable target and links it with VTK and Qt libraries. Configures for macOS bundle support and sets up private library dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/SimpleView/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(SimpleView MACOSX_BUNDLE\n  ${Srcs} ${Hdrs} ${UIs} ${QRCs})\ntarget_link_libraries(SimpleView\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Gui\"\n    \"Qt${VTK_QT_VERSION}::Widgets\")\n```\n\n----------------------------------------\n\nTITLE: Linking OpenXR Libraries to VTK::RenderingOpenXR Module\nDESCRIPTION: Links the OpenXR loader and headers to the VTK::RenderingOpenXR module as public dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::RenderingOpenXR\n  PUBLIC\n    OpenXR::openxr_loader\n    OpenXR::headers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File for VTK Module\nDESCRIPTION: This snippet configures a header file for the VTK module by processing a template file. It uses the configure_file command to replace placeholders in the input header file with actual values at generate time. The input file is identified through the CMAKE_CURRENT_SOURCE_DIR.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_scn.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_scn.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CTest Custom Settings\nDESCRIPTION: Generates a CTestCustom.cmake file in the current binary directory using a template from the VTK CMake directory\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${vtk_cmake_dir}/CTestCustom.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Project\nDESCRIPTION: This CMake command adds multiple Python test scripts to the VTK testing suite. It includes tests for various filters, geometric operations, and visualization techniques specific to VTK functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  Hyper.py\n  HyperScalarBar.py\n  KlineBottle.py\n  TenEllip.py\n  TestAdaptiveSubdivisionFilter.py\n  TestBandedContourFilter.py\n  TestBandedContourFilter2.py\n  TestBandedContourFilter3.py\n  TestBandedContourFilter4.py\n  TestBandedContourFilter5.py\n  TestBoxFunction.py\n  TestContourLoopExtraction.py\n  TestContourLoopExtraction2.py\n  TestCookieCutter.py\n  TestCookieCutter2.py\n  TestCookieCutter3.py\n  TestCookieCutter4.py\n  TestFitToHeightMapFilter.py\n  TestFitToHeightMapFilter2.py\n  TestImageMarchingCubes.py\n  TestImprintFilter.py\n  TestImprintFilter2.py\n  TestImprintFilter3.py\n  TestImprintFilter4.py\n  TestImprintFilter5.py\n  TestImprintFilter6.py\n  TestImprintFilter7.py\n  TestOutlineFilter.py\n  TestPointSampler.py\n  TestPointSampler2.py\n  TestRibbonAndTube.py\n  TestRuledSurface.py\n  TestRuledSurface2.py\n  TestSelectPolyDataFilter.py,NO_RT\n  TestSpherePuzzle.py\n  TestSpherePuzzleArrows.py\n  TestTrimmedExtrusionFilter.py\n  camera.py\n  eleState.py\n  extrudeCopyCD.py\n  schwarz.py\n  smoothCyl.py\n  smoothCyl2.py\n  smoothCylNuttall.py\n  subDivideTetra.py\n  subdividePointData.py\n  TestFillHolesFilter.py\n  TestNamedColorsIntegration.py\n  contour2DAll.py\n  contour3DAll.py\n  sync3dAll.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVDB CMake Path to Module Path in CMake\nDESCRIPTION: Inserts the found OpenVDB CMake path to the beginning of the CMAKE_MODULE_PATH. This ensures that the OpenVDB CMake modules are found first when searching for packages.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(INSERT CMAKE_MODULE_PATH 0\n  \"${OpenVDB_CMAKE_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Directory Structure in CMake\nDESCRIPTION: Configures test data file path for VTK module testing and adds the C++ source directory to the build. Specifies an HDF5 simulation file as test data and includes the Cxx subdirectory in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ERF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/hdf_fpm_simulation.erfh5\n  )\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Output Tests for VTK Common Data Model\nDESCRIPTION: Configures output-specific tests for the VTK Common Data Model module. It includes TestKdTreeRepresentation.cxx with the NO_DATA option.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonDataModelCxxTests output_tests\n  TestKdTreeRepresentation.cxx,NO_DATA\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Subdirectory\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the current project build.  CMake will then process the CMakeLists.txt file within the 'Cxx' directory, allowing for modular project configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining XML Reader and Writer Classes in CMake\nDESCRIPTION: This snippet sets up a list of classes that handle various XML data formats for reading and writing, ensuring the VTK library can properly manage these data types.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkRTXMLPolyDataReader\n  vtkXMLCompositeDataReader\n  vtkXMLCompositeDataWriter\n  vtkXMLDataObjectWriter\n  vtkXMLDataReader\n  vtkXMLDataSetWriter\n  vtkXMLFileReadTester\n  vtkXMLGenericDataObjectReader\n  vtkXMLHierarchicalBoxDataFileConverter\n  vtkXMLHierarchicalBoxDataReader\n  vtkXMLHierarchicalBoxDataWriter\n  vtkXMLHierarchicalDataReader\n  vtkXMLHyperTreeGridReader\n  vtkXMLHyperTreeGridWriter\n  vtkXMLImageDataReader\n  vtkXMLImageDataWriter\n  vtkXMLMultiBlockDataReader\n  vtkXMLMultiBlockDataWriter\n  vtkXMLMultiGroupDataReader\n  vtkXMLPDataObjectReader\n  vtkXMLPDataReader\n  vtkXMLPHyperTreeGridReader\n  vtkXMLPImageDataReader\n  vtkXMLPPolyDataReader\n  vtkXMLPRectilinearGridReader\n  vtkXMLPStructuredDataReader\n  vtkXMLPStructuredGridReader\n  vtkXMLPTableReader\n  vtkXMLPUnstructuredDataReader\n  vtkXMLPUnstructuredGridReader\n  vtkXMLPartitionedDataSetCollectionReader\n  vtkXMLPartitionedDataSetReader\n  vtkXMLPolyDataReader\n  vtkXMLPolyDataWriter\n  vtkXMLReader\n  vtkXMLRectilinearGridReader\n  vtkXMLRectilinearGridWriter\n  vtkXMLStructuredDataReader\n  vtkXMLStructuredDataWriter\n  vtkXMLStructuredGridReader\n  vtkXMLStructuredGridWriter\n  vtkXMLTableReader\n  vtkXMLTableWriter\n  vtkXMLUniformGridAMRReader\n  vtkXMLUniformGridAMRWriter\n  vtkXMLUnstructuredDataReader\n  vtkXMLUnstructuredDataWriter\n  vtkXMLUnstructuredGridReader\n  vtkXMLUnstructuredGridWriter\n  vtkXMLWriter\n  vtkXMLWriterBase\n  vtkXMLWriterC)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Imaging Core CXX Tests\nDESCRIPTION: Defines a list of C++ test files for the VTK Imaging Core module. Includes various image processing tests with specific test flags like NO_VALID, NO_DATA, and NO_OUTPUT.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkImagingCoreCxxTests tests\n  FastSplatter.cxx\n  ImageAccumulate.cxx,NO_VALID\n  ImageAccumulateLarge.cxx,NO_VALID,NO_DATA,NO_OUTPUT 32\n  ImageAutoRange.cxx\n  ImageBlend.cxx\n  ImageBSplineCoefficients.cxx\n  ImageChangeInformation.cxx,NO_VALID,NO_DATA\n  ImageDifference.cxx,NO_VALID\n  ImageGenericInterpolateSlidingWindow3D.cxx\n  ImageHistogram.cxx\n  ImageHistogramStatistics.cxx,NO_VALID\n  ImageInterpolateSlidingWindow2D.cxx\n  ImageInterpolateSlidingWindow3D.cxx\n  ImageInterpolator.cxx,NO_VALID,NO_DATA\n  ImagePassInformation.cxx,NO_VALID,NO_DATA\n  ImageResize.cxx\n  ImageResize3D.cxx\n  ImageResizeCropping.cxx\n  ImageReslice.cxx\n  ImageResliceDirection.cxx\n  ImageResliceOriented.cxx\n  ImageWeightedSum.cxx,NO_VALID\n  ImportExport.cxx,NO_VALID\n  TestBSplineWarp.cxx\n  TestImageProbeFilter.cxx\n  TestImageStencilDataMethods.cxx,NO_VALID\n  TestImageStencilIterator.cxx,NO_VALID\n  TestImageSSIM.cxx,NO_VALID\n  TestStencilWithLasso.cxx\n  TestStencilWithPolyDataContour.cxx\n  TestStencilWithPolyDataSurface.cxx\n  TestUpdateExtentReset.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Topology Support in Catalyst Conduit - YAML\nDESCRIPTION: This snippet defines the configuration of implicit topology using point sets in Catalyst Conduit. It specifies the type of coordinate set as explicit and the mesh topology as points, connecting it to the coordinate set defined earlier.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/vtk-Catalyst-Implicit-Topology.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoordsets:\n  coords:\n    type: \"explicit\"\n\ntopologies:\n  mesh:\n    type: \"points\"\n    coordset: \"coords\"\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Inclusion in CMake\nDESCRIPTION: Conditionally adds the C++ test directory if C++ testing is enabled. This ensures C++ tests are only built when the appropriate flag is set.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Parallel Core Module with CMake\nDESCRIPTION: Registers the VTK Parallel Core module with the build system, specifying its classes, special headers, and private headers. Also sets up test mangling for the module and excludes the generated hash header from SPDX scanning.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::ParallelCore\n  CLASSES           ${classes}\n  NOWRAP_HEADERS    vtkMultiProcessStreamSerialization.h\n  PRIVATE_HEADERS   ${hash_header}\n  # This generated header doesn't contain anything with copyright.\n  SPDX_SKIP_REGEX   \"vtkSocketCommunicatorHash\")\nvtk_add_test_mangling(VTK::ParallelCore)\n```\n\n----------------------------------------\n\nTITLE: Building Library Source Lists in CMake\nDESCRIPTION: Generates comprehensive lists of C and C++ source files based on selected components and platform-specific implementations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(KWSYS_C_SRCS)\nset(KWSYS_CXX_SRCS)\n\nif(KWSYS_USE_Process)\n  if(NOT UNIX)\n    set(KWSYS_C_SRCS ${KWSYS_C_SRCS} ProcessWin32.c)\n  else()\n    set(KWSYS_C_SRCS ${KWSYS_C_SRCS} ProcessUNIX.c)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding FontConfig Package for VTK Module\nDESCRIPTION: Locates the FontConfig package, which is required by the VTK::RenderingFreeTypeFontConfig module. It is set as a private dependency if the module is shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE FontConfig)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Addition\nDESCRIPTION: Adds C++ test directory if C++ testing is not disabled in the VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test with CMake\nDESCRIPTION: This CMake command adds a Python test named `TestQuadricLODActor.py` to the VTK project's testing infrastructure. The macro `vtk_add_test_python` handles the registration and execution of the test, ensuring it runs correctly within the VTK testing environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LOD/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestQuadricLODActor.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Third Party Module Configuration in CMake\nDESCRIPTION: This snippet sets up a third-party module for VTK, specifying internal and external parameters including license files, copyright texts, version number, and the external package dependency on mpi4py.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkmpi4py/LICENSE.rst\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-2-Clause AND BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2021, Lisandro Dalcin\"\n      \"Copyright (c) Sandia Corporation, Kitware Inc.\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/mpi4py.git@for/vtk-20230424-3.1.4\"\n    VERSION\n      \"3.1.4\"\n  EXTERNAL\n    PACKAGE mpi4py\n    TARGETS mpi4py::mpi4py)\n```\n\n----------------------------------------\n\nTITLE: Finding and Validating VTK Dependencies\nDESCRIPTION: Locates required VTK components (CommonCore and CommonDataModel) and validates their availability. Exits configuration if VTK is not found.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/UsingVTK/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK COMPONENTS CommonCore CommonDataModel)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Timeout for EnSight Gold Combined Reader Test\nDESCRIPTION: Sets a longer timeout (300 seconds by default) for the TestEnSightGoldCombinedReader test when executed on Windows platforms. This is needed because this particular test can take significantly longer to complete on Windows systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# This test can take much longer on Windows than other platforms, so extend the timeout\nif (NOT VTK_TEST_TIMEOUT_TestEnSightGoldCombinedReader)\n  set(VTK_TEST_TIMEOUT_TestEnSightGoldCombinedReader 300)\nendif()\nset_tests_properties(VTK::IOEnSightPython-TestEnSightGoldCombinedReader\n  PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestEnSightGoldCombinedReader})\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel ImageData Structure in XML\nDESCRIPTION: This snippet defines the structure of a parallel image data element, detailing how individual pieces of the dataset are referenced and their respective extents.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n  <VTKFile type=\"PImageData\" ...>\n    <PImageData WholeExtent=\"x1 x2 y1 y2 z1 z2\"\n                GhostLevel=\"#\" Origin=\"x0 y0 z0\" Spacing=\"dx dy dz\">\n      <PPointData>...</PPointData>\n      <PCellData>...</PCellData>\n      <Piece Extent=\"x1 x2 y1 y2 z1 z2\" Source=\"imageData0.vti\"/>\n      ...\n   </PImageData>\n  </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time-Based Compilation Check in ExprTk\nDESCRIPTION: Complete implementation of a compilation timeout check that limits the compilation process to a specified duration. Uses a counter to reduce the overhead of timestamp checking and sets an error message on timeout.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_106\n\nLANGUAGE: C++\nCODE:\n```\nstruct my_compilation_timeout_check final :\n   public exprtk::compilation_check\n{\n\n   bool continue_compilation(compilation_context& context)\n   override\n   {\n      static constexpr std::size_t max_iters_per_check = 1000;\n\n      if (++iterations_ >= max_iters_per_check)\n      {\n         if (std::chrono::steady_clock::now() >= timeout_tp_)\n         {\n            context.error_message = \"Compilation has timed-out\";\n            return false;\n         }\n\n         iterations_ = 0;\n      }\n\n      return true;\n   }\n\n   using time_point_t = std::chrono::time_point<std::chrono::steady_clock>;\n\n   void set_timeout_time(const time_point_t& timeout_tp)\n   {\n      timeout_tp_ = timeout_tp;\n   }\n\n   std::size_t iterations_ = 0;\n   time_point_t timeout_tp_;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Wrap Test Data in CMake\nDESCRIPTION: This CMake snippet configures test data for Python-wrapped modules in VTK if Python wrapping is enabled. It specifies sample NetCDF data files for testing and includes a subdirectory for Python tests. Dependencies include a CMake setup with VTK built with Python wrapping capabilities. Inputs are VTK_WRAP_PYTHON flag states and outputs are registered test data definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/sampleCurveGrid4.nc\n    Data/sampleGenGrid3.nc\n    Data/tos_O1_2001-2002.nc\n    )\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for VTK C++ Tests\nDESCRIPTION: This snippet uses vtk\\_test\\_cxx\\_executable to generate an executable for the previously added test suite, vtkIOVPICCxxTests. This function facilitates the execution of the tests by creating a runnable binary. The intention is for use within the CMake environment where tests are compiled and executed as part of a build pipeline.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/VPIC/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOVPICCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Windows Video for Windows (VFW) Support Option\nDESCRIPTION: Adds a CMake option to enable Video for Windows support, with compile-time detection and error handling for Windows platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(VTK_USE_VIDEO_FOR_WINDOWS \"Enable using Video for Windows (vfw32) for video output (vtkAVIWriter).\" OFF\n  WIN32 OFF)\nmark_as_advanced(VTK_USE_VIDEO_FOR_WINDOWS)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLTF Edge Case and Writer Tests in CMake\nDESCRIPTION: Defines tests for GLTF reader's handling of missing properties and tests for the GLTF writer with various input formats including CityGML and OBJ, in both text and binary modes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderMissingProperty,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/Triangle/material-no-pbrMetallicRoughness.gltf}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFWriterCityGML,TestGLTFWriter.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/CityGML/Part-4-Buildings-V4-one.gml}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFWriterObj,TestGLTFWriter.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/jacksonville_15.obj}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFWriterCityGMLBinary,TestGLTFWriter.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/CityGML/Part-4-Buildings-V4-one.gml} binary\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Test Input Data\nDESCRIPTION: Conditionally sets test input data file path based on Windows or non-Windows platform to support cross-platform testing\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  set(TestPostgreSQLTableReadWrite_ARGS\n    DATA{../Data/Input/simple_table_win.vtk})\nelse()\n  set(TestPostgreSQLTableReadWrite_ARGS\n    DATA{../Data/Input/simple_table.vtk})\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration Variables for Expat\nDESCRIPTION: CMake cache variables that control various aspects of the Expat library build including build type, installation path, documentation generation, and feature enablement options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_BUILD_TYPE:STRING=\n\nCMAKE_INSTALL_PREFIX:PATH=/usr/local\n\nDOCBOOK_TO_MAN:FILEPATH=/usr/bin/docbook2x-man\n\nEXPAT_BUILD_DOCS:BOOL=ON\n\nEXPAT_BUILD_EXAMPLES:BOOL=ON\n\nEXPAT_BUILD_FUZZERS:BOOL=OFF\n\nEXPAT_BUILD_PKGCONFIG:BOOL=ON\n\nEXPAT_BUILD_TESTS:BOOL=ON\n\nEXPAT_BUILD_TOOLS:BOOL=ON\n\nEXPAT_CHAR_TYPE:STRING=char\n\nEXPAT_ENABLE_INSTALL:BOOL=ON\n\nEXPAT_MSVC_STATIC_CRT:BOOL=OFF\n\nEXPAT_OSSFUZZ_BUILD:BOOL=OFF\n\nEXPAT_SHARED_LIBS:BOOL=ON\n\nEXPAT_WARNINGS_AS_ERRORS:BOOL=OFF\n\nEXPAT_WITH_GETRANDOM:STRING=AUTO\n\nEXPAT_WITH_LIBBSD:BOOL=OFF\n\nEXPAT_WITH_SYS_GETRANDOM:STRING=AUTO\n```\n\n----------------------------------------\n\nTITLE: Thread-Local Storage Detection\nDESCRIPTION: Detects thread-local storage support using compile-time checks for different syntax variations across platforms and compilers\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(LIBXML2_WITH_TLS)\n    check_c_source_compiles(\n        \"_Thread_local int v; int main(){return 0;}\"\n        XML_THREAD_LOCAL_C11\n    )\n    if (XML_THREAD_LOCAL_C11)\n        set(XML_THREAD_LOCAL \"_Thread_local\")\n    else()\n        check_c_source_compiles(\n            \"__thread int v; int main(){return 0;}\"\n            XML_THREAD_LOCAL_THREAD\n        )\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Common Class Names - CMake\nDESCRIPTION: This snippet sets a list of common classes, here showcasing 'vtkBar', to be used in the VTKMY module build system. This list is then passed to the module creation function to ensure these classes are included in the final build. No external dependencies are required for this operation beyond standard CMake functionalities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\\n  vtkBar\\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module Configuration\nDESCRIPTION: Configures and adds the CommonDataModel module to the VTK build system with all its components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::CommonDataModel\n  CLASSES           ${classes}\n  NOWRAP_CLASSES    ${nowrap_classes}\n  TEMPLATES         ${templates}\n  TEMPLATE_CLASSES  ${template_classes}\n  HEADERS           ${headers}\n  SOURCES           ${sources}\n  NOWRAP_HEADERS    ${nowrap_headers}\n  PRIVATE_TEMPLATES ${private_templates})\n```\n\n----------------------------------------\n\nTITLE: Configuring TDx Support Header\nDESCRIPTION: Configures a placeholder header file for TDx support that defines nothing but allows other modules to include it safely.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkTDxConfigure.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkTDxConfigure.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: CMake command that registers multiple Python test files for the VTK test suite. Some tests are marked with flags like NO_VALID, NO_DATA, and LOOSE_VALID to indicate specific test requirements and validation constraints.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  CellDataToPointData.py\n  CellDataToPointData2.py\n  Delaunay2D.py\n  Delaunay2DAlpha.py\n  Delaunay2DTransform.py\n  Delaunay3D.py\n  Delaunay3DAlphaTest.py\n  MassProperties.py\n  QuadricDecimation.py\n  QuadricDecimation2.py\n  StreamPolyData.py\n  Test3DLinearGridCrinkleExtractor.py\n  Test3DLinearGridPlaneCutter.py\n  TestBinnedDecimation.py\n  TestCalculatorDataTypes.py,NO_VALID\n  TestCleanPolyhedraGrid.py\n  TestCleanUnstructuredGrid.py\n  TestCompositeDataSetPlaneCutter.py\n  TestConstrainedSmoothingFilter.py\n  TestConstrainedSmoothingFilter2.py\n  TestContour3DLinearGrid.py\n  TestContour3DLinearGrid2.py\n  TestContour3DLinearGridCompositeInput.py\n  TestContour3DLinearGridInterpolateAttributes.py,NO_VALID\n  TestContour3DLinearGridScalarTree.py\n  TestConvertToPolyhedra.py\n  TestDecimatePolylineMaximumError.py\n  TestElevationFilter.py\n  TestExtractCells.py\n  TestFlyingEdges2D.py\n  TestFlyingEdges2D2.py\n  TestFlyingEdges2DThinPixel.py\n  TestFlyingEdges3D.py\n  TestFlyingEdges3DThinSlice.py\n  TestFlyingEdges3DWithInterpolation.py\n  TestFlyingEdgesExtents.py\n  TestFlyingEdgesPlaneCutter.py\n  TestFlyingEdgesPlaneCutterBoundary.py,NO_VALID\n  TestFlyingEdgesPlaneCutterCellData.py\n  TestFlyingEdgesPlaneCutterInterpolation.py\n  TestFlyingEdgesPlaneCutterThinSlice.py\n  TestGridSynchronizedTemplates3D.py\n  TestMarchingSquares.py\n  TestMultiObjectMassProperties.py\n  TestOrientedFlyingEdgesPlaneCutter.py\n  TestOrientedFlyingEdgesPlaneCutter2.py\n  TestPackLabels.py,NO_VALID\n  TestPointDataToCellData2.py\n  TestPolyDataEdgeConnectivityFilter.py\n  TestPolyDataEdgeConnectivityFilter2.py\n  TestPolyDataEdgeConnectivityFilter3.py\n  TestPolyDataEdgeConnectivityFilter4.py\n  TestPolyDataPlaneClipper.py\n  TestPolyDataPlaneClipper2.py\n  TestPolyDataPlaneCutter.py\n  TestProbeFilterImageInput.py\n  TestRectilinearGridPlaneCutter.py\n  TestRectilinearSynchronizedTemplates.py\n  TestScalarTrees.py\n  TestSphereTreeFilter.py\n  TestSphereTreeFilter2.py\n  TestStaticCleanPolyData.py\n  TestStructuredGridPlaneCutter.py\n  TestSurfaceNets2D.py\n  TestSurfaceNets2D2.py\n  TestSurfaceNets3D.py\n  TestSurfaceNets3D2.py\n  TestSurfaceNets3D3.py\n  TestSynchronizedTemplates3D.py\n  TestWindowedSincPolyDataFilter.py\n  TestWindowedSincPolyDataFilter2.py\n  TestContourFilter.py,NO_DATA,NO_VALID\n  TestContourGrid.py,NO_VALID\n  TestContourPolyData.py,NO_VALID\n  TestTensorGlyph.py\n  TestTextureGlyph.py\n  TestTriangleFilter.py\n  TestUnstructuredGridPlaneCutter.py\n  TestVectorDotNorm.py\n  TestVoronoi2D.py\n  TestVoronoi2D2.py\n  TestVoronoi2D3.py\n  TestWindowedSincPolylineSmoothing.py\n  capCow.py\n  capSphere.py\n  clipArt.py\n  combStreamers.py\n  constrainedDelaunay.py\n  contourCells.py\n  contourQuadraticCells.py\n  contourQuadraticTetra.py\n  createBFont.py\n  cutLoop.py\n  cutPolygons.py\n  cutter.py\n  deciPlane.py\n  dispPlot.py\n  fieldToPolyData.py\n  fieldToRGrid.py\n  fieldToSGrid.py\n  fieldToUGrid.py\n  financialField.py\n  financialField2.py\n  financialField3.py,LOOSE_VALID\n  hull.py\n  mergeFilter.py\n  multipleComponentContour.py\n  multipleIso.py\n  polyConn.py\n  probe.py\n  probeComb.py\n  probeComb2.py\n  reverseNormals.py\n  skinOrder.py\n  smoothMeshOnMesh.py\n  streamComb.py\n  streamSurface.py\n  streamSurface2.py\n  stripF.py\n  teapotHulls.py\n  tubeComb.py\n  deciFranFace.py\n  TestContourCases.py,NO_DATA,NO_VALID\n  pointsPrecisions.py,NO_OUTPUT,NO_DATA,NO_VALID\n  TestCompositeCutter.py,NO_VALID\n  testPDNormals.py,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Dependencies in CMake\nDESCRIPTION: Establishes a dependency relationship between the copy and clean targets to ensure proper execution order. The clean operation is performed before the copy operation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(iOS-examples-copy iOS-examples-rm)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Package Build Option in CMake for VTK\nDESCRIPTION: Sets up a CMake option to build VTK for custom Java packaging using Maven. It also configures various Maven-related variables and system-specific settings for runtime libraries and installation paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_BUILD_MAVEN_PKG \"Use the Java rules to build the native libraries.\" OFF)\n\nif (VTK_BUILD_MAVEN_PKG)\n  # Make sure we embed the runtime libraries when packaging the Java binaries\n  if (WIN32)\n    # install system runtimes.\n    set(CMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION \"bin\")\n    include(InstallRequiredSystemLibraries)\n  endif ()\n  if (APPLE)\n    set(CMAKE_INSTALL_NAME_DIR @loader_path)\n  endif ()\n  if (NOT MAVEN_LOCAL_NATIVE_NAME)\n    # We ignore CMAKE_SYSTEM_PROCESSOR since classifier field in maven only accept characters strings (no numbers)\n    set(MAVEN_LOCAL_NATIVE_NAME \"${CMAKE_SYSTEM_NAME}\" CACHE STRING \"\")\n  endif ()\n  if (NOT MAVEN_NATIVE_ARTIFACTS)\n    set(MAVEN_NATIVE_ARTIFACTS \"${MAVEN_LOCAL_NATIVE_NAME}\" CACHE STRING \"\")\n  endif ()\n  if (NOT MAVEN_LOCAL_REPOSITORY)\n    set(MAVEN_LOCAL_REPOSITORY \"\\${user.home}/vtk-maven-repos\" CACHE STRING \"\")\n  endif ()\n  if (NOT MAVEN_VTK_GROUP_ID)\n    set(MAVEN_VTK_GROUP_ID \"org.vtk\" CACHE STRING \"\")\n  endif ()\n  if (NOT MAVEN_VTK_ARTIFACT_SUFFIX)\n    set(MAVEN_VTK_ARTIFACT_SUFFIX \"\" CACHE STRING \"\")\n  endif ()\n  if (NOT MAVEN_VTK_SNAPSHOT)\n    set(MAVEN_VTK_SNAPSHOT \"\" CACHE STRING \"\")\n  endif ()\n\n  mark_as_advanced(\n    VTK_BUILD_MAVEN_PKG\n    MAVEN_LOCAL_REPOSITORY\n    MAVEN_NATIVE_ARTIFACTS\n    MAVEN_LOCAL_NATIVE_NAME\n    MAVEN_VTK_ARTIFACT_SUFFIX\n    MAVEN_VTK_SNAPSHOT\n    MAVEN_VTK_GROUP_ID)\n  set(MAVEN_DEPENDENCY_XML)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Windows VTK Path Setup\nDESCRIPTION: Commands to set up the environment paths for VTK on Windows systems, including configuration-specific variants.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nwindows_path.bat\nwindows_path.<config>.bat\n```\n\n----------------------------------------\n\nTITLE: Defining Class Variables in CMake\nDESCRIPTION: This snippet sets public and private classes for the VTK::IOPIO module in a CMake configuration. The classes are grouped into two sets: 'classes' for public APIs and 'private_classes' for internal use only. No additional dependencies are explicitly mentioned, but it assumes the context of a VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PIO/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPIOReader)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_classes\n  BHTree\n  PIOData\n  PIODataPIO\n  PIODataHDF5\n  PIOAdaptor)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOPIO\n  CLASSES ${classes}\n  EXCLUDE_HEADER_TEST\n  PRIVATE_CLASSES ${private_classes})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOPIO)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: This snippet utilizes the `vtk_module_add_module`, `vtk_module_link`, and `vtk_module_include` macros provided by VTK to define the VTK::RenderingTk module. It specifies the source files, private headers, linked libraries (TCL and TK), and include paths for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_add_module(VTK::RenderingTk\n  SOURCES ${sources}\n  PRIVATE_HEADERS ${private_headers})\nvtk_module_link(VTK::RenderingTk\n  PRIVATE\n    ${TCL_LIBRARY}\n    ${TK_LIBRARY})\nvtk_module_include(VTK::RenderingTk\n  PRIVATE\n    ${TCL_INCLUDE_PATH}\n    ${TK_INCLUDE_PATH}\n    ${TK_INTERNAL_PATH})\"\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Rendering Headers in CMake\nDESCRIPTION: Sets up header files for the VTK Rendering Volume module, with a single header file for block sorting functionality\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  vtkBlockSortHelper.h)\n```\n\n----------------------------------------\n\nTITLE: Determine VTK library type\nDESCRIPTION: This snippet checks if VTK is built as a shared or static library. It reads the `TYPE` property of the `VTK::CommonCore` target and sets the `_default` variable based on the library type, which is then used to set the default value of the `BUILD_SHARED_LIBS` option.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_target_property(_vtk_lib_type VTK::CommonCore TYPE)\nif(_vtk_lib_type STREQUAL SHARED_LIBRARY)\n  set(_default ON)\nelse()\n  set(_default OFF)\nendif()\noption(BUILD_SHARED_LIBS \"Build shared libraries.\" ${_default})\n```\n\n----------------------------------------\n\nTITLE: Generating iOS App Packages\nDESCRIPTION: Commands for archiving and generating IPA files for different deployment scenarios including ad-hoc, development, and App Store.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/VTKViewer/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild -scheme VTKViewer -archivePath VTKViewer.xcarchive archive\n```\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild -exportArchive -exportOptionsPlist adHoc.plist -archivePath VTKViewer.xcarchive -exportPath .\n```\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild -exportArchive -exportOptionsPlist development.plist -archivePath VTKViewer.xcarchive -exportPath .\n```\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild -exportArchive -exportOptionsPlist appStore.plist -archivePath VTKViewer.xcarchive -exportPath .\n```\n\n----------------------------------------\n\nTITLE: Configuring Python-specific VTK Module Test Data in CMake\nDESCRIPTION: This snippet checks if Python wrapping is enabled for VTK. If so, it specifies additional test data files and includes regex patterns for file selection.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/RectGrid2.vtr\n    Data/cth.vtr\n    Data/elements.vtu\n    Data/headsq/,REGEX:.*\n    Data/,REGEX:simpleamrgrid\\.e-s[0-9]+)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Sources Directory in VTK CMake Build\nDESCRIPTION: This CMake command adds the C++ source code directory to the build process. It tells CMake to process the CMakeLists.txt file in the 'Cxx' subdirectory, which contains the C++ implementation of VTK components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Managing VTK Module Tests - CMake\nDESCRIPTION: This snippet sets up test mangling for the VTK module 'VTK::IOTecplotTable' to ensure proper naming during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOTecplotTable)\n```\n\n----------------------------------------\n\nTITLE: Emscripten Compiler Check\nDESCRIPTION: Verifies that the build environment is using the Emscripten compiler, which is required for WebAssembly compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  message(FATAL_ERROR\n    \"The VTK::WebAssembly module requires Emscripten compiler.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Project declaration\nDESCRIPTION: Defines the project name as VTKMY and sets the version number to 1.0.0.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(VTKMY VERSION 1.0.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibTiff Version Numbers for VTK\nDESCRIPTION: Sets the LibTiff version numbers directly rather than extracting them from configure.ac. This hardcoded approach simplifies integration with VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Just copy from configure.ac rather than extracting it.\nset(LIBTIFF_MAJOR_VERSION 4)\nset(LIBTIFF_MINOR_VERSION 6)\nset(LIBTIFF_MICRO_VERSION 0)\nset(LIBTIFF_ALPHA_VERSION)\nset(LIBTIFF_VERSION \"${LIBTIFF_MAJOR_VERSION}.${LIBTIFF_MINOR_VERSION}.${LIBTIFF_MICRO_VERSION}\")\nset(LIBTIFF_VERSION_FULL \"${LIBTIFF_VERSION}${LIBTIFF_ALPHA_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring StatsView Executable\nDESCRIPTION: Creates the StatsView executable target and configures VTK library dependencies and module initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/StatsView/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(StatsView MACOSX_BUNDLE\n  ${Srcs} ${Hdrs} ${UIs} ${Rcs})\ntarget_link_libraries(StatsView\n  PRIVATE\n    ${VTK_LIBRARIES})\nvtk_module_autoinit(\n  TARGETS StatsView\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK EnSight Writer Tests\nDESCRIPTION: Conditionally adds Python tests for the VTK EnSight writer if the VTK::IOEnSight target is available. These tests cover various aspects of the EnSight writer functionality, including element types, node/element IDs, convex point sets, and variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::IOEnSight)\n  vtk_add_test_python(\n    TestEnSightWriterElementTypes.py,NO_VALID,NO_RT\n    TestEnSightWriterNodeIdsElementIds.py,NO_VALID,NO_RT\n    TestEnSightWriterConvexPointSet.py,NO_VALID,NO_RT\n    TestEnSightWriterVariables.py,NO_VALID,NO_RT\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ODBC Package\nDESCRIPTION: This snippet uses `vtk_module_find_package` to locate the ODBC package. `PRIVATE_IF_SHARED` suggests that the ODBC dependency is treated as private if the VTK module is built as a shared library.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE ODBC)\n```\n\n----------------------------------------\n\nTITLE: Defining Class List for VTK IOChemistry Module in CMake\nDESCRIPTION: Creates a list of classes that are part of the VTK IOChemistry module. These classes are primarily molecular file format readers for different chemical file formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkCMLMoleculeReader\n  vtkGaussianCubeReader\n  vtkGaussianCubeReader2\n  vtkMoleculeReaderBase\n  vtkPDBReader\n  vtkVASPAnimationReader\n  vtkVASPTessellationReader\n  vtkXYZMolReader\n  vtkXYZMolReader2\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK Modules Automatically\nDESCRIPTION: This snippet uses vtk_module_autoinit to automatically initialize the VTK modules required by the ConeMultiBackend executable, ensuring that the necessary VTK classes are properly initialized at runtime.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/ConeMultiBackend/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS  ConeMultiBackend\n  MODULES  ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Running VTK Benchmarks with CMake\nDESCRIPTION: Shell commands for configuring, building and running VTK benchmarks with specific compiler optimizations and architecture settings. Demonstrates how to enable benchmarks through CMake configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ cd build\n$ cmake -DSCN_BENCHMARKS=ON \\\n        -DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\\n        -DSCN_USE_HASWELL_ARCH=ON ..\n$ cmake --build .\n# choose benchmarks to run in ./benchmark/runtime/*/*_bench\n$ ./benchmark/runtime/integer/scn_int_bench\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CGNS Reader Classes and Module\nDESCRIPTION: Configures the VTK CGNS reader module by defining public classes, private classes, and private headers. Sets up the module with required components and adds test mangling configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CGNS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkCGNSFileSeriesReader\n  vtkCGNSReader\n  vtkCONVERGECFDCGNSReader)\n\nset(private_classes\n  cgio_helpers\n  vtkCGNSReaderInternal\n  vtkFileSeriesHelper)\n\nset(private_headers\n  vtkCGNSCache.h)\n\nvtk_module_add_module(VTK::IOCGNSReader\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  PRIVATE_HEADERS ${private_headers})\nvtk_add_test_mangling(VTK::IOCGNSReader)\n```\n\n----------------------------------------\n\nTITLE: Setting Object Headers and Sources - CMake\nDESCRIPTION: This snippet defines the source and header files for HDF5 objects, including various implementation details and utilities. The IDE_GENERATED_PROPERTIES is called to manage the object properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset (H5O_SOURCES\n    ${HDF5_SRC_DIR}/H5O.c\n    ${HDF5_SRC_DIR}/H5Oainfo.c\n    ${HDF5_SRC_DIR}/H5Oalloc.c\n    ${HDF5_SRC_DIR}/H5Oattr.c\n    ${HDF5_SRC_DIR}/H5Oattribute.c\n    ${HDF5_SRC_DIR}/H5Obogus.c\n    ${HDF5_SRC_DIR}/H5Obtreek.c\n    ${HDF5_SRC_DIR}/H5Ocache.c\n    ${HDF5_SRC_DIR}/H5Ocache_image.c\n    ${HDF5_SRC_DIR}/H5Ochunk.c\n    ${HDF5_SRC_DIR}/H5Ocont.c\n    ${HDF5_SRC_DIR}/H5Ocopy.c\n    ${HDF5_SRC_DIR}/H5Ocopy_ref.c\n    ${HDF5_SRC_DIR}/H5Odbg.c\n    ${HDF5_SRC_DIR}/H5Odeprec.c\n    ${HDF5_SRC_DIR}/H5Odrvinfo.c\n    ${HDF5_SRC_DIR}/H5Odtype.c\n    ${HDF5_SRC_DIR}/H5Oefl.c\n    ${HDF5_SRC_DIR}/H5Ofill.c\n    ${HDF5_SRC_DIR}/H5Oflush.c\n    ${HDF5_SRC_DIR}/H5Ofsinfo.c\n    ${HDF5_SRC_DIR}/H5Oginfo.c\n    ${HDF5_SRC_DIR}/H5Oint.c\n    ${HDF5_SRC_DIR}/H5Olayout.c\n    ${HDF5_SRC_DIR}/H5Olinfo.c\n    ${HDF5_SRC_DIR}/H5Olink.c\n    ${HDF5_SRC_DIR}/H5Omessage.c\n    ${HDF5_SRC_DIR}/H5Omtime.c\n    ${HDF5_SRC_DIR}/H5Oname.c\n    ${HDF5_SRC_DIR}/H5Onull.c\n    ${HDF5_SRC_DIR}/H5Opline.c\n    ${HDF5_SRC_DIR}/H5Orefcount.c\n    ${HDF5_SRC_DIR}/H5Osdspace.c\n    ${HDF5_SRC_DIR}/H5Oshared.c\n    ${HDF5_SRC_DIR}/H5Oshmesg.c\n    ${HDF5_SRC_DIR}/H5Ostab.c\n    ${HDF5_SRC_DIR}/H5Otest.c\n    ${HDF5_SRC_DIR}/H5Ounknown.c\n)\n\nset (H5O_HDRS\n    ${HDF5_SRC_DIR}/H5Opublic.h\n)\nIDE_GENERATED_PROPERTIES (\"H5O\" \"${H5O_HDRS}\" \"${H5O_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Installing CGNS Library Targets in CMake\nDESCRIPTION: Configures the installation of CGNS library targets, including both static and shared libraries if built. It sets the installation paths for libraries, archives, runtime files, and includes.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset (install_targets cgns_static)\nif(CGNS_BUILD_SHARED)\n  set(install_targets ${install_targets} cgns_shared)\nendif ()\ninstall (TARGETS ${install_targets}\n         EXPORT cgns-targets\n         LIBRARY DESTINATION lib COMPONENT libraries\n         ARCHIVE DESTINATION lib COMPONENT libraries\n         RUNTIME DESTINATION bin COMPONENT libraries\n         INCLUDES DESTINATION include)\n```\n\n----------------------------------------\n\nTITLE: Preventing Integer Overflow in Large File Seeking\nDESCRIPTION: Fixes potential integer overflow issue when seeking ahead in large Ensight files, ensuring robust file reading across different file sizes and configurations\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/ensight-reader-improvements.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Fix int overflow during file seeking mechanisms\n```\n\n----------------------------------------\n\nTITLE: WGSL Shader File Management\nDESCRIPTION: Manages private and public WebGPU shader files, encoding them for inclusion in the rendering pipeline\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_shader_files\n  wgsl/ActorColorOptions.wgsl\n  wgsl/ActorRenderOptions.wgsl\n  wgsl/ActorTransform.wgsl\n  ...)\n\nforeach (file IN LISTS private_shader_files)\n  vtk_encode_string(\n    INPUT         \"${file}\"\n    EXPORT_SYMBOL \"VTKRENDERINGWEBGPU_EXPORT\"\n    ...)\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Creating XML Test Executable\nDESCRIPTION: Creates a C interface test executable for VTK's XML Input/Output module, linking it with the IOXML library and adding it as a test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(TestXMLCInterface MACOSX_BUNDLE TestXMLCInterface.c)\ntarget_link_libraries(TestXMLCInterface PRIVATE VTK::IOXML)\nadd_test(NAME VTK::IOXML-TestXMLCInterface COMMAND TestXMLCInterface)\n```\n\n----------------------------------------\n\nTITLE: Configuring SystemInformation Features for KWSys\nDESCRIPTION: Sets compile definitions and performs checks for various system-specific features used by SystemInformation.cxx, including ifaddrs.h, psapi, mpctl.h, machine/cpu.h, and rlimit64.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_USE_SystemInformation)\n  set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n    COMPILE_DEFINITIONS SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P})\n  if(NOT CYGWIN)\n    include(CheckIncludeFiles)\n    CHECK_INCLUDE_FILES(\"sys/types.h;ifaddrs.h\" KWSYS_SYS_HAS_IFADDRS_H)\n    if(KWSYS_SYS_HAS_IFADDRS_H)\n      set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n        COMPILE_DEFINITIONS KWSYS_SYS_HAS_IFADDRS_H=1)\n    endif()\n  endif()\n  if(WIN32)\n    include(CheckSymbolExists)\n    set(CMAKE_REQUIRED_LIBRARIES psapi)\n    CHECK_SYMBOL_EXISTS(GetProcessMemoryInfo \"windows.h;psapi.h\" KWSYS_SYS_HAS_PSAPI)\n    unset(CMAKE_REQUIRED_LIBRARIES)\n    if(KWSYS_SYS_HAS_PSAPI)\n      set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n        COMPILE_DEFINITIONS KWSYS_SYS_HAS_PSAPI=1)\n      if(MSVC70 OR MSVC71)\n        # Suppress LNK4089: all references to 'PSAPI.DLL' discarded by /OPT:REF\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /IGNORE:4089\")\n      endif()\n    endif()\n  endif()\n  if(CMAKE_SYSTEM MATCHES \"HP-UX\")\n    CHECK_INCLUDE_FILES(\"sys/mpctl.h\" KWSYS_SYS_HAS_MPCTL_H)\n    if(KWSYS_SYS_HAS_MPCTL_H)\n      set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n        COMPILE_DEFINITIONS KWSYS_SYS_HAS_MPCTL_H=1)\n    endif()\n  endif()\n  if(CMAKE_SYSTEM MATCHES \"BSD\")\n    CHECK_INCLUDE_FILES(\"machine/cpu.h\" KWSYS_SYS_HAS_MACHINE_CPU_H)\n    if(KWSYS_SYS_HAS_MACHINE_CPU_H)\n      set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n        COMPILE_DEFINITIONS KWSYS_SYS_HAS_MACHINE_CPU_H=1)\n    endif()\n  endif()\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_RLIMIT64\n    \"Checking whether CXX compiler has rlimit64\" DIRECT)\n  set(KWSYS_PLATFORM_CXX_TEST_DEFINES)\n  if(KWSYS_CXX_HAS_RLIMIT64)\n    set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n      COMPILE_DEFINITIONS KWSYS_CXX_HAS_RLIMIT64=1)\n  endif()\n  if(UNIX AND NOT KWSYS_NO_EXECINFO)\n    include(CheckIncludeFileCXX)\n    # check for simple stack trace\n    # usually it's in libc but on FreeBSD\n    # it's in libexecinfo\n    find_library(EXECINFO_LIB \"execinfo\")\n    mark_as_advanced(EXECINFO_LIB)\n    if (NOT EXECINFO_LIB)\n      set(EXECINFO_LIB \"\")\n    endif()\n    CHECK_INCLUDE_FILE_CXX(\"execinfo.h\" KWSYS_CXX_HAS_EXECINFOH)\n    if (KWSYS_CXX_HAS_EXECINFOH)\n      # we have the backtrace header check if it\n      # can be used with this compiler\n      set(KWSYS_PLATFORM_CXX_TEST_LINK_LIBRARIES ${EXECINFO_LIB})\n      KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_BACKTRACE\n         \"Checking whether backtrace works with this C++ compiler\" DIRECT)\n      set(KWSYS_PLATFORM_CXX_TEST_LINK_LIBRARIES)\n      if (KWSYS_CXX_HAS_BACKTRACE)\n        # backtrace is supported by this system and compiler.\n        # now check for the more advanced capabilities.\n        set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n          COMPILE_DEFINITIONS KWSYS_SYSTEMINFORMATION_HAS_BACKTRACE=1)\n        # check for symbol lookup using dladdr\n        CHECK_INCLUDE_FILE_CXX(\"dlfcn.h\" KWSYS_CXX_HAS_DLFCNH)\n        if (KWSYS_CXX_HAS_DLFCNH)\n          # we have symbol lookup libraries and headers\n          # check if they can be used with this compiler\n          set(KWSYS_PLATFORM_CXX_TEST_LINK_LIBRARIES ${CMAKE_DL_LIBS})\n            KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_DLADDR\n            \"Checking whether dladdr works with this C++ compiler\" DIRECT)\n          set(KWSYS_PLATFORM_CXX_TEST_LINK_LIBRARIES)\n          if (KWSYS_CXX_HAS_DLADDR)\n            # symbol lookup is supported by this system\n            # and compiler.\n            set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n              COMPILE_DEFINITIONS KWSYS_SYSTEMINFORMATION_HAS_SYMBOL_LOOKUP=1)\n          endif()\n        endif()\n        # c++ demangling support\n        # check for cxxabi headers\n        CHECK_INCLUDE_FILE_CXX(\"cxxabi.h\" KWSYS_CXX_HAS_CXXABIH)\n        if (KWSYS_CXX_HAS_CXXABIH)\n          # check if cxxabi can be used with this\n          # system and compiler.\n          KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_CXXABI\n            \"Checking whether cxxabi works with this C++ compiler\" DIRECT)\n          if (KWSYS_CXX_HAS_CXXABI)\n            # c++ demangle using cxxabi is supported with\n            # this system and compiler\n            set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n              COMPILE_DEFINITIONS KWSYS_SYSTEMINFORMATION_HAS_CPP_DEMANGLE=1)\n          endif()\n        endif()\n        # basic backtrace works better with release build\n        # don't bother with advanced features for release\n        set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n          COMPILE_DEFINITIONS_DEBUG KWSYS_SYSTEMINFORMATION_HAS_DEBUG_BUILD=1)\n        set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n          COMPILE_DEFINITIONS_RELWITHDEBINFO KWSYS_SYSTEMINFORMATION_HAS_DEBUG_BUILD=1)\n      endif()\n    endif()\n  endif()\n  if(KWSYS_BUILD_SHARED)\n    set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n      COMPILE_DEFINITIONS KWSYS_BUILD_SHARED=1)\n  endif()\n\n  if(UNIX AND NOT CYGWIN)\n    KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_GETLOADAVG\n      \"Checking whether CXX compiler has getloadavg\" DIRECT)\n    if(KWSYS_CXX_HAS_GETLOADAVG)\n      set_property(SOURCE SystemInformation.cxx APPEND PROPERTY\n        COMPILE_DEFINITIONS KWSYS_CXX_HAS_GETLOADAVG=1)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering XDMF Test Data Files\nDESCRIPTION: Specifies the test data files required for XDMF testing. Uses regular expressions to include all files from the XDMF data directories, and conditionally includes large data files if enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/Testing/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/XDMF/,REGEX:.*\n  ${_BigFiles}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK PNG reader using a VTK logo PNG sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestPNGReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/vtk.png}\")\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Dependencies\nDESCRIPTION: Locates required VTK components for image processing, including core systems, IO, imaging modules, and rendering components. Includes optional testing components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ImageProcessing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonSystem\n    IOImage\n    ImagingFourier\n    ImagingGeneral\n    ImagingSources\n    ImagingStatistics\n    ImagingStencil\n    InteractionStyle\n    RenderingCore\n    RenderingOpenGL2\n    vtksys\n  OPTIONAL_COMPONENTS\n    TestingCore\n    TestingRendering)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK ZSpace Classes CMake\nDESCRIPTION: This snippet sets the VTK ZSpace-related class and private class lists for compilation. It initializes class lists and allows for the inclusion of additional private classes based on SDK compatibility choice.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ZSpace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkZSpaceCamera\n  vtkZSpaceGenericRenderWindow\n  vtkZSpaceHardwarePicker\n  vtkZSpaceInteractorStyle\n  vtkZSpaceRayActor\n  vtkZSpaceRenderer\n  vtkZSpaceWin32RenderWindow\n  vtkZSpaceRenderWindowInteractor\n  vtkZSpaceSDKManager)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_classes)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MPI Tests for WindBlade Reader\nDESCRIPTION: CMake configuration for setting up MPI-based tests for the VTK parallel WindBlade reader, including process count configuration and test executable setup\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (enable_large_data_tests)\n  set(TestPWindBladeReader_NUMPROCS 1)\n  vtk_add_test_mpi(vtkIOMPIParallelCxxTests-MPI tests\n    TESTING_DATA\n    TestPWindBladeReader.cxx\n    )\n  vtk_test_cxx_executable(vtkIOMPIParallelCxxTests-MPI tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using VTK filters in functional way in Python\nDESCRIPTION: This snippet demonstrates the new functional API for using VTK filters in Python.  It shows how to instantiate a `vtkShrinkFilter` with a parameter (`shrink_factor`) and apply it directly to input data (`input_data`).\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/new-python-api-for-pipelines.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nresult = vtkShrinkFilter(shrink_factor=0.5)(input_data)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingFreeType Classes in CMake\nDESCRIPTION: Sets up a list of classes for the VTK RenderingFreeType module. These classes include various text rendering and manipulation utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkFreeTypeStringToImage\n  vtkFreeTypeTools\n  vtkMathTextFreeTypeTextRenderer\n  vtkMathTextUtilities\n  vtkScaledTextActor\n  vtkTextRendererStringToImage\n  vtkVectorText)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Directory\nDESCRIPTION: Registers test data from the TRUCHAS directory using regex pattern matching for VTK module testing\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TRUCHAS/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\\n  Data\\/TRUCHAS\\/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for xdmf2 Content Extraction\nDESCRIPTION: Displays the commit log to get instructions for extracting content from the upstream xdmf2 tarball.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log 0b284a49\n```\n\n----------------------------------------\n\nTITLE: Adding VTK QtSQL Module\nDESCRIPTION: Uses vtk_module_add_module to register the VTK::GUISupportQtSQL module with the specified classes\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::GUISupportQtSQL\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Handling PDAL Include Directories for Older Versions\nDESCRIPTION: Adds PDAL include directories for versions older than 2.2 due to a known issue with exported targets in those versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (PDAL_VERSION VERSION_LESS \"2.2\")\n  vtk_module_include(VTK::IOPDAL\n    PRIVATE\n      ${PDAL_INCLUDE_DIRS})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Infovis Boost Graph Algorithms C++ Tests in CMake\nDESCRIPTION: This CMake snippet configures a set of C++ tests for VTK's Boost graph algorithms. It adds test files to be compiled, creates a test executable, and links the Boost library as a dependency. Some tests are commented out due to unsatisfied dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/BoostGraphAlgorithms/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkInfovisBoostGraphAlgorithmsCxxTests tests\n  # BoostArrayLogWeighting.cxx    # todo (unsatisfied deps)\n  BoostArrayRandomSparseArraySource.cxx,NO_VALID\n  TestBoostAdapter.cxx,NO_VALID\n  TestBoostAlgorithms.cxx\n  TestBoostBetweennessClustering.cxx,NO_VALID\n  # TestBoostBrandesCentrality.cxx # todo (unsatisfied deps)\n  TestBoostDividedEdgeBundling.cxx\n  TestBoostExtractLargestComponent.cxx,NO_VALID\n  TestBoostSplitTableField.cxx,NO_VALID\n  )\nvtk_test_cxx_executable(vtkInfovisBoostGraphAlgorithmsCxxTests tests)\n\nfind_package(Boost REQUIRED)\ntarget_link_libraries(vtkInfovisBoostGraphAlgorithmsCxxTests\n  PRIVATE\n    Boost::boost)\n```\n\n----------------------------------------\n\nTITLE: ExprTk VTK Integration Requirements\nDESCRIPTION: List of modifications required for ExprTk integration with VTK, including whitespace handling, CMake support, namespace changes, and git hook configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Ignore whitespace for VTK's commit checks\n* Add CMakeLists.vtk.txt to add support for VTK module system\n* mangle namespace\n* Increase hooks-max-size for large header\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for a Specific Test - CMake\nDESCRIPTION: This snippet sets a timeout for the 'TestPDBBallAndStick' to allow additional time for certain machines where this test might take longer to complete, ensuring reliable test execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# On some machines this test takes 260ish seconds to complete, this allows for\n# some extra time\nif(NOT VTK_TEST_TIMEOUT_TestPDBBallAndStick)\n  set(VTK_TEST_TIMEOUT_TestPDBBallAndStick 360)\nendif()\nset_tests_properties(VTK::DomainsChemistryCxx-TestPDBBallAndStick\n    PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestPDBBallAndStick}\n               RUN_SERIAL ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibHPDF Source Files List\nDESCRIPTION: Sets up a comprehensive list of source files for the LibHPDF library, covering various PDF-related functionalities like annotations, fonts, encoders, and image processing\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(\n    LIBHPDF_SRCS\n    hpdf_annotation.c\n    hpdf_array.c\n    hpdf_binary.c\n    ...\n    hpdf_exdata.c\n    hpdf_encoder_utf.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory with CMake\nDESCRIPTION: The `add_subdirectory` command adds the specified directory to the build process. It allows CMake to parse the CMakeLists.txt file located within the 'Cxx' subdirectory, effectively including it as part of the current project.  This is useful for organizing large projects into smaller, manageable modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MPI C++ Tests in CMake\nDESCRIPTION: Sets up VTK MPI C++ test configuration using vtk_add_test_cxx and creates a test executable. Specifies TestIncludeMPI.cxx as the test source file with no data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkmpiCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeMPI.cxx)\nvtk_test_cxx_executable(vtkmpiCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This snippet configures test data for a VTK module by specifying various data files. It includes different file types such as .vtp, .ex2, .vtu, .vtm, and .vts, which are commonly used in VTK for different geometric representations and datasets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/cow.vtp\n  Data/disk_out_ref.ex2\n  Data/linhex.vtu\n  Data/multiblock_overlapping_tetras/multiblock_overlapping_tetras_0_0.vtu\n  Data/multiblock_overlapping_tetras/multiblock_overlapping_tetras_1_0.vtu\n  Data/multiblock_overlapping_tetras.vtm\n  Data/multicomb_0.vts\n  Data/multicomb_1.vts\n  Data/multicomb_2.vts\n  Data/tet_hex.vtu)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK TIFF Header File in CMake\nDESCRIPTION: Generates a VTK-specific TIFF header file from a template. This allows VTK to maintain a consistent interface to the TIFF library regardless of whether using the internal or external version.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_tiff.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_tiff.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Image IO Core Tests in CMake\nDESCRIPTION: Sets up the core testing suite for VTK Image IO module, including tests for NRRD, NIFTI, DICOM, and MetaIO readers. Specifies input data paths and testing parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests data_tests\n  TestNrrdReader.cxx\n  TestNIFTIReaderWriter.cxx\n  TestNIFTIReaderAnalyze.cxx\n  TestNIFTI2.cxx\n  TestDICOMImageReaderFileCollection.cxx,NO_OUTPUT\n  )\nset(TestMetaIO_ARGS \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/HeadMRVolume.mhd,HeadMRVolume.raw}\")\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestDataObjectIO.cxx\n  TestMetaIO.cxx\n  TestImportExport.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Managing zconf.h File in Source and Build Directories\nDESCRIPTION: Handles the case where a user has a zconf.h file in their source tree by renaming it, since CMake generates this file automatically in the build directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    # If we're doing an out of source build and the user has a zconf.h\n    # in their source tree...\n    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h)\n        message(STATUS \"Renaming\")\n        message(STATUS \"    ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h\")\n        message(STATUS \"to 'zconf.h.included' because this file is included with zlib\")\n        message(STATUS \"but CMake generates it automatically in the build directory.\")\n        file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.included)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Target and Linking Libraries\nDESCRIPTION: Creates the executable target and configures library linking with VTK and Qt. Sets up VTK module auto-initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/TouchGestureViewer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(QtVTKTouchscreenRenderWindows\n  ${Srcs} ${Hdrs} ${UIs})\ntarget_link_libraries(QtVTKTouchscreenRenderWindows\n  PRIVATE\n    ${VTK_LIBRARIES}\n    \"Qt${VTK_QT_VERSION}::Widgets\")\nvtk_module_autoinit(\n  TARGETS QtVTKTouchscreenRenderWindows\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Format Module Sources and Headers\nDESCRIPTION: Defines source files and headers for the VTK formatting module, organizing them into appropriate directories with the vtkfmt prefix.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (sources\n  src/format.cc\n  src/os.cc)\n\nset (headers\n  vtkfmt/args.h\n  vtkfmt/base.h\n  vtkfmt/chrono.h\n  vtkfmt/color.h\n  vtkfmt/compile.h\n  vtkfmt/core.h\n  vtkfmt/format.h\n  vtkfmt/format-inl.h\n  vtkfmt/os.h\n  vtkfmt/ostream.h\n  vtkfmt/printf.h\n  vtkfmt/ranges.h\n  vtkfmt/std.h\n  vtkfmt/xchar.h)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for VTK Interaction Widgets\nDESCRIPTION: Combines all test categories into a single test executable with specific execution properties. This includes disabling floating point exceptions and configuring the rendering factory for the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${no_valid_tests}\n  ${data_tests}\n  ${ogl_tests}\n  )\nvtk_test_cxx_executable(vtkInteractionWidgetsCxxTests all_tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Python Interpreter Module Components\nDESCRIPTION: Sets up the core classes and headers for the VTK Python interpreter module. Defines the main module components including vtkPythonInteractiveInterpreter and vtkPythonInterpreter classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/PythonInterpreter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkPythonInteractiveInterpreter\n  vtkPythonInterpreter)\n\nset(headers\n  vtkPythonStdStreamCaptureHelper.h)\n\nvtk_module_add_module(VTK::PythonInterpreter\n  CLASSES ${classes}\n  HEADERS ${headers})\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake file\nDESCRIPTION: This snippet includes a common CMake file, likely containing shared settings or functions used across multiple projects. It helps to avoid code duplication and maintain consistency.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(../Common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters HyperTree C++ Test Sources in CMake\nDESCRIPTION: This snippet defines a list of C++ test source files for the VTK Filters HyperTree module. It includes various tests for HyperTreeGrid functionality, including binary and ternary grids, different dimensions, and various operations like contouring, clipping, and thresholding.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_sources\n  TestHyperTreeGrid2DInterfaceShift.cxx\n  TestHyperTreeGrid2DGeometryFillMaterial.cxx,NO_VALID,NO_OUTPUT\n  TestHyperTreeGrid3DAxisCutCoincidentPlane.cxx\n  TestHyperTreeGrid3DIntercepts.cxx\n  TestHyperTreeGrid3DInterface.cxx\n  TestHyperTreeGrid3DSimpleInterface.cxx\n  TestHyperTreeGridBinary1DFeatureEdges.cxx\n  TestHyperTreeGridBinary2D.cxx\n  TestHyperTreeGridBinary2DAxisClipBox.cxx\n  TestHyperTreeGridBinary2DAxisClipEllipse.cxx\n  TestHyperTreeGridBinary2DAxisClipPlanes.cxx\n  TestHyperTreeGridBinary2DAxisReflectionXCenter.cxx\n  TestHyperTreeGridBinary2DAxisReflectionXCenterMaterial.cxx\n  TestHyperTreeGridBinary2DAxisReflectionYCenter.cxx\n  TestHyperTreeGridBinary2DAxisReflectionYCenterMaterial.cxx\n  TestHyperTreeGridBinary2DCellCenters.cxx\n  TestHyperTreeGridBinary2DCellCentersMaterial.cxx\n  TestHyperTreeGridBinary2DContour.cxx\n  TestHyperTreeGridBinary2DContourMaterial.cxx\n  TestHyperTreeGridBinary2DDepthLimiter.cxx\n  TestHyperTreeGridBinary2DDepthLimiterMaterial.cxx\n  TestHyperTreeGridBinary2DFeatureEdges.cxx\n  TestHyperTreeGridBinary2DIJK.cxx\n  TestHyperTreeGridBinary2DInterfaceMaterial.cxx\n  TestHyperTreeGridBinary2DMaterial.cxx\n  TestHyperTreeGridBinary2DMaterialIJK.cxx\n  TestHyperTreeGridBinary2DThreshold.cxx\n  TestHyperTreeGridBinary2DThresholdImplicit.cxx\n  TestHyperTreeGridBinary2DThresholdDeep.cxx\n  TestHyperTreeGridBinary2DThresholdMaterial.cxx\n  TestHyperTreeGridBinary2DThresholdMaterialDeep.cxx\n  TestHyperTreeGridBinary2DThresholdMaterialImplicit.cxx\n  TestHyperTreeGridBinary2DVector.cxx\n  TestHyperTreeGridBinary2DVectorAxisReflectionXCenter.cxx\n  TestHyperTreeGridBinary2DVectorAxisReflectionYCenter.cxx\n  TestHyperTreeGridBinary3DContour.cxx\n  TestHyperTreeGridBinary3DContourDecomposePolyhedra.cxx\n  TestHyperTreeGridBinary3DContourImplicit.cxx\n  TestHyperTreeGridBinary3DContourImplicitInteger.cxx,NO_VALID,NO_OUTPUT\n  TestHyperTreeGridBinary3DFeatureEdges.cxx,LOOSE_VALID\n  TestHyperTreeGridBinary3DGeometry.cxx\n  TestHyperTreeGridBinaryClipPlanes.cxx\n  TestHyperTreeGridBinaryEllipseMaterial.cxx\n  TestHyperTreeGridBinaryHyperbolicParaboloidMaterial.cxx\n  TestHyperTreeGridEvaluateCoarse.cxx,NO_VALID,NO_OUPUT\n  TestHyperTreeGridExtractGhostCells.cxx,NO_VALID,NO_OUTPUT\n  TestHyperTreeGridGenerateFields.cxx,NO_VALID,NO_OUPUT\n  TestHyperTreeGridGeometryPassCellIds.cxx\n  TestHyperTreeGridRemoveGhostCells.cxx,NO_VALID,NO_OUTPUT\n  TestHyperTreeGridTernary2D.cxx\n  TestHyperTreeGridTernary2DBiMaterial.cxx\n  TestHyperTreeGridTernary2DFullMaterialBits.cxx\n  TestHyperTreeGridTernary2DMaterial.cxx\n  TestHyperTreeGridTernary2DMaterialBits.cxx\n  TestHyperTreeGridTernary3DAxisClipBox.cxx\n  TestHyperTreeGridTernary3DAxisClipCylinder.cxx\n  TestHyperTreeGridTernary3DAxisClipPlanes.cxx\n  TestHyperTreeGridTernary3DAxisCut.cxx\n  TestHyperTreeGridTernary3DAxisCutMaterial.cxx\n  TestHyperTreeGridTernary3DAxisReflectionXCenter.cxx\n  TestHyperTreeGridTernary3DAxisReflectionXCenterMaterial.cxx\n  TestHyperTreeGridTernary3DAxisReflectionYZCenter.cxx\n  TestHyperTreeGridTernary3DAxisReflectionYZCenterMaterial.cxx\n  TestHyperTreeGridTernary3DCellCenters.cxx\n  TestHyperTreeGridTernary3DCellCentersMaterial.cxx\n  TestHyperTreeGridTernary3DClip.cxx\n  TestHyperTreeGridTernary3DContour.cxx\n  TestHyperTreeGridTernary3DContourMaterial.cxx\n  TestHyperTreeGridTernary3DDualContour.cxx\n  TestHyperTreeGridTernary3DDualContourMaterial.cxx\n  TestHyperTreeGridTernary3DGeometry.cxx\n  TestHyperTreeGridTernary3DGeometryMaterial.cxx\n  TestHyperTreeGridTernary3DGeometryMaterialBits.cxx\n  TestHyperTreeGridTernary3DGradient.cxx\n  TestHyperTreeGridTernary3DPlaneCutter.cxx\n  TestHyperTreeGridTernary3DPlaneCutterDual.cxx\n  TestHyperTreeGridTernary3DPlaneCutterDualMaterial.cxx\n  TestHyperTreeGridTernary3DPlaneCutterMaterial.cxx\n  TestHyperTreeGridTernary3DThreshold.cxx\n  TestHyperTreeGridTernary3DThresholdDeep.cxx\n  TestHyperTreeGridTernary3DThresholdImplicit.cxx\n  TestHyperTreeGridTernary3DThresholdMaterial.cxx\n  TestHyperTreeGridTernary3DThresholdMaterialDeep.cxx\n  TestHyperTreeGridTernary3DThresholdMaterialImplicit.cxx\n  TestHyperTreeGridTernary3DUnstructured.cxx\n  TestHyperTreeGridTernary3DUnstructuredMaterial.cxx\n  TestHyperTreeGridTernaryHyperbola.cxx\n  TestHyperTreeGridTernarySphereMaterial.cxx\n  TestHyperTreeGridTernarySphereMaterialReflections.cxx\n  TestHyperTreeGridThresholdMethods.cxx,NO_VALID,NO_OUTPUT\n  TestHyperTreeGridToDualGrid.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: CMake CGNS Library Configuration\nDESCRIPTION: Initialize CMake build tree for CGNS, specifying source path and configuring build parameters using cmake and ccmake commands\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmake /path/to/cgns/sources/\n```\n\nLANGUAGE: shell\nCODE:\n```\nccmake .\n```\n\n----------------------------------------\n\nTITLE: Adding Support for SYCL in CMake\nDESCRIPTION: This CMake snippet configures support for SYCL using either triSYCL or ComputeCPP. It sets up related options for including necessary packages and defines to control vectorization. It requires CMake, SYCL related headers, and either triSYCL or ComputeCPP setup on your system. Inputs involve option flags such as EIGEN_TEST_SYCL and outputs include status messages regarding the chosen SYCL implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\noption(EIGEN_TEST_SYCL \"Add Sycl support.\" OFF)\noption(EIGEN_SYCL_TRISYCL \"Use the triSYCL Sycl implementation (ComputeCPP by default).\" OFF)\nif(EIGEN_TEST_SYCL)\n  set (CMAKE_MODULE_PATH \"${CMAKE_ROOT}/Modules\" \"cmake/Modules/\" \"${CMAKE_MODULE_PATH}\")\n  find_package(Threads REQUIRED)\n  if(EIGEN_SYCL_TRISYCL)\n    message(STATUS \"Using triSYCL\")\n    include(FindTriSYCL)\n  else()\n    message(STATUS \"Using ComputeCPP SYCL\")\n    include(FindComputeCpp)\n    set(COMPUTECPP_DRIVER_DEFAULT_VALUE OFF)\n    if (NOT MSVC)\n      set(COMPUTECPP_DRIVER_DEFAULT_VALUE ON)\n    endif()\n    option(COMPUTECPP_USE_COMPILER_DRIVER\n      \"Use ComputeCpp driver instead of a 2 steps compilation\"\n      ${COMPUTECPP_DRIVER_DEFAULT_VALUE}\n    )\n  endif(EIGEN_SYCL_TRISYCL)\n  option(EIGEN_DONT_VECTORIZE_SYCL \"Don't use vectorisation in the SYCL tests.\" OFF)\n  if(EIGEN_DONT_VECTORIZE_SYCL)\n    message(STATUS \"Disabling SYCL vectorization in tests/examples\")\n    # When disabling SYCL vectorization, also disable Eigen default vectorization\n    add_definitions(-DEIGEN_DONT_VECTORIZE=1)\n    add_definitions(-DEIGEN_DONT_VECTORIZE_SYCL=1)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Properties for vtkSocket in CMake\nDESCRIPTION: This snippet sets the compilation definitions for the vtkSocket.cxx source file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(vtkSocket.cxx\n  PROPERTIES\n    COMPILE_DEFINITIONS \"${vtkSocket_defines}\")\n```\n\n----------------------------------------\n\nTITLE: Specifying VTK RenderingFreeType Source Files in CMake\nDESCRIPTION: Defines the source files for the VTK RenderingFreeType module, including the object factory source and various font face files for different styles of Arial, Courier, and Times fonts.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  ${vtk_object_factory_source}\n\n  fonts/face_arial_bold.cxx\n  fonts/face_arial_bold_italic.cxx\n  fonts/face_arial.cxx\n  fonts/face_arial_italic.cxx\n  fonts/face_courier_bold.cxx\n  fonts/face_courier_bold_italic.cxx\n  fonts/face_courier.cxx\n  fonts/face_courier_italic.cxx\n  fonts/face_times_bold.cxx\n  fonts/face_times_bold_italic.cxx\n  fonts/face_times.cxx\n  fonts/face_times_italic.cxx)\n```\n\n----------------------------------------\n\nTITLE: Header File Installation\nDESCRIPTION: This snippet installs the ABI and int header files to the specified installation directory using the specified prefix. The `DESTINATION` specifies where the files should be installed, and `KWIML_INSTALL_INCLUDE_OPTIONS` can include options like file permissions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(KWIML_INSTALL_INCLUDE_DIR)\n  install(FILES\n    include/kwiml/abi.h\n    include/kwiml/int.h\n    DESTINATION ${KWIML_INSTALL_INCLUDE_DIR}/${KWIML_INCLUDE_PREFIX}\n    ${KWIML_INSTALL_INCLUDE_OPTIONS}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: WebGPU Private Headers and Sources Management\nDESCRIPTION: Configures private header and source files for internal WebGPU implementation details\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_headers\n  \"Private/vtkWebGPUActorInternals.h\"\n  \"Private/vtkWebGPUBindGroupInternals.h\"\n  ...)\n\nset(private_sources\n  \"Private/vtkWebGPUBindGroupInternals.cxx\"\n  \"Private/vtkWebGPUBindGroupLayoutInternals.cxx\"\n  ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 Dependencies for VTK RenderingOpenGL2\nDESCRIPTION: Sets up X11 dependencies for the RenderingOpenGL2 module, including optional Xcursor support for custom cursor handling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_X)\n  vtk_module_find_package(PACKAGE X11)\n  vtk_module_link(VTK::RenderingOpenGL2 PUBLIC X11::X11)\n  if (TARGET X11::Xcursor)\n    vtk_module_link(VTK::RenderingOpenGL2 PRIVATE X11::Xcursor)\n  else()\n    message(WARNING \"X11::Xcursor not found; custom cursors will be ignored.\")\n  endif()\n  set_property(SOURCE vtkXOpenGLRenderWindow.cxx APPEND\n    PROPERTY\n      COMPILE_DEFINITIONS \"VTK_HAVE_XCURSOR=$<TARGET_EXISTS:X11::Xcursor>\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Generic C++ Tests with CMake\nDESCRIPTION: Defines a set of C++ test files for the VTK Filters Generic module. Some tests are marked with NO_VALID or NO_DATA flags to indicate special test behaviors. The configuration creates a test executable for these files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Generic/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersGenericCxxTests tests\n  TestGenericStreamTracer.cxx\n  TestGenericClip.cxx\n  TestGenericContourFilter.cxx\n  TestGenericCutter.cxx\n  TestGenericDataSetTessellator.cxx\n  TestGenericGeometryFilter.cxx\n  TestGenericGlyph3DFilter.cxx\n  TestGenericProbeFilter.cxx\n  otherCreation.cxx,NO_VALID\n  UnitTestGenericGeometryFilter.cxx,NO_VALID,NO_DATA\n  )\n\nvtk_test_cxx_executable(vtkFiltersGenericCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: VTK Header Files Directory Structure\nDESCRIPTION: Directory listing of VTK header files showing the organization of core data structures, models, interaction handlers, and rendering components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Marshalling/VTK_MARSHALMANUAL.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCommon/Core/vtkDataArray.h\nCommon/Core/vtkStringArray.h\nCommon/DataModel/vtkCellArray.h\nCommon/DataModel/vtkDataSetAttributes.h\nCommon/DataModel/vtkMultiBlockDataSet.h\nCommon/DataModel/vtkPartitionedDataSet.h\nCommon/DataModel/vtkPartitionedDataSetCollection.h\nCommon/DataModel/vtkPiecewiseFunction.h\nCommon/DataModel/vtkTable.h\nCommon/DataModel/vtkUnstructuredGrid.h\nCommon/ExecutionModel/vtkAlgorithm.h\nInteraction/Style/vtkInteractorStyleSwitch.h\nInteraction/Widgets/vtkAbstractWidget.h\nRendering/Core/vtkAbstractMapper.h\nRendering/Core/vtkColorTransferFunction.h\nRendering/Core/vtkCompositeDataDisplayAttributes.h\nRendering/Core/vtkDataSetMapper.h\nRendering/Core/vtkTexture.h\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test for kMeansDistanceCalculator in VTK using CMake\nDESCRIPTION: This CMake command adds a Python test for the kMeansDistanceCalculator module in VTK. The test is configured with NO_DATA, NO_VALID, and NO_OUTPUT flags, indicating that it doesn't require input data, validation, or produce output files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  kMeansDistanceCalculator.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK-m as a Third-Party Internal Module in CMake\nDESCRIPTION: This CMake code configures VTK-m as a third-party internal module for VTK. It specifies the BSD-3-Clause license, copyright holders, download location (from GitLab at version 2.0.0), and sets up the module interface with standard include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vtkm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkvtkm/vtk-m/LICENSE.txt\"\n  SPDX_LICENSE_IDENTIFIER\n    \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2014-2023 Kitware Inc., National Technology & Engineering Solutions of Sandia, LLC (NTESS),\"\n    \"UT-Battelle, LLC., Los Alamos National Security, LLC.\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://gitlab.kitware.com/vtk/vtk-m.git@2.0.0@v2.0.0\"\n  VERSION\n    \"2.0.0\"\n  SUBDIRECTORY            vtkvtkm\n  STANDARD_INCLUDE_DIRS\n  INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Adding a Python Test in VTK with CMake\nDESCRIPTION: This CMake function call adds a Python test script ('testOpenSlideReader.py') to the VTK build configuration. The test is added with flags indicating that there is no output check ('NO_OUTPUT'), no runtime requirement ('NO_RT'), and no validation check ('NO_VALID'). This setup is essential for integrating Python-based tests in the CMake framework within the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  testOpenSlideReader.py,NO_OUTPUT,NO_RT,NO_VALID)\n```\n\n----------------------------------------\n\nTITLE: File writing with fmt library in C++\nDESCRIPTION: Example of using fmt::output_file to write formatted text to a file. This method can be 5-9 times faster than fprintf for single-threaded file writing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/os.h>\n\nint main() {\n  auto out = fmt::output_file(\"guide.txt\");\n  out.print(\"Don't {}\", \"Panic\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests in VTK Project\nDESCRIPTION: This code snippet utilizes the function 'vtk_add_test_cxx' to add a set of C++ tests to the VTK project. Prerequisites include the necessary CMake setup for VTK. It specifies attributes such as 'NO_DATA', 'NO_VALID', and 'NO_OUTPUT' to control the test environment. The primary input is the test file 'TestIncludeDoubleConversion.cxx'.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkdoubleconversionCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeDoubleConversion.cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining XdmfCore Source Files in CMake\nDESCRIPTION: Lists all core source files for the XdmfCore library. Conditionally includes the TIFF controller if TIFF is found. These source files form the main components of the XdmfCore library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(XdmfCoreSources\n  XdmfArray\n  XdmfArrayReference\n  XdmfArrayType\n  XdmfBinaryController\n  XdmfCoreItemFactory\n  XdmfCoreReader\n  XdmfError\n  XdmfFunction\n  XdmfHDF5Controller\n  XdmfHDF5Writer\n  XdmfHeavyDataController\n  XdmfHeavyDataDescription\n  XdmfHeavyDataWriter\n  XdmfInformation\n  XdmfItem\n  XdmfItemProperty\n  XdmfPlaceholder\n  XdmfSparseMatrix\n  XdmfSubset\n  XdmfSystemUtils\n  ${CMAKE_CURRENT_BINARY_DIR}/XdmfVersion\n  XdmfVisitor\n  XdmfWriter)\n\nif (TIFF_FOUND)\n  set(XdmfCoreSources\n      ${XdmfCoreSources}\n      XdmfTIFFController)\n  set(FOUND_TIFF_LOCATION core/XdmfTIFFController)\nelse ()\n  set(FOUND_TIFF_LOCATION \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GeoJSON I/O Module in CMake\nDESCRIPTION: This CMake snippet defines and configures the VTK::IOGeoJSON module. It first lists the module's classes (vtkGeoJSONFeature, vtkGeoJSONReader, vtkGeoJSONWriter), adds them to the module definition, and sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GeoJSON/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkGeoJSONFeature\n  vtkGeoJSONReader\n  vtkGeoJSONWriter)\n\nvtk_module_add_module(VTK::IOGeoJSON\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOGeoJSON)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Python Module in CMake\nDESCRIPTION: This CMake snippet defines the classes for the VTK Common Python module, adds the module to the VTK project, and sets up test mangling. It includes the vtkPythonArchiver class and configures it as part of the VTK::CommonPython module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPythonArchiver)\n\nvtk_module_add_module(VTK::CommonPython\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::CommonPython)\n```\n\n----------------------------------------\n\nTITLE: Setting Dimension Scales Reference Options\nDESCRIPTION: Configures the dimension scales API reference style setting. Default is set to OFF with conditional option declaration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/hl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): hardcode settings\noption (HDF5_DIMENSION_SCALES_NEW_REF  \"Use new-style references with dimension scale APIs\" OFF)\nelse ()\nset (HDF5_DIMENSION_SCALES_NEW_REF OFF)\nendif ()\nif (HDF5_DIMENSION_SCALES_NEW_REF)\n  set (H5_DIMENSION_SCALES_WITH_NEW_REF 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Generating VTK Parser with Bison\nDESCRIPTION: Command to generate the vtkParse.tab.c parser file using Bison 3.2.3 or later.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbison --no-lines -b vtkParse vtkParse.y\n```\n\n----------------------------------------\n\nTITLE: Adding IOH5Rage Module - CMake\nDESCRIPTION: This snippet adds the VTK IOH5Rage module and specifies the classes defined earlier. It is crucial for setting up the module in the VTK build system so that the classes are recognized and properly compiled as part of the IOH5Rage functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/H5Rage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOH5Rage\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Defining Appended Data Section in XML\nDESCRIPTION: This snippet shows the structure of an AppendedData element within the VTKFile, demonstrating how data is organized for efficiency and storage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n  <VTKFile ...>\n    ...\n    <AppendedData encoding=\"base64\">\n                  _QMwEAAAAAAAAA...\n    </AppendedData>\n  </VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI-based Parallel HDF IO Tests in VTK using CMake\nDESCRIPTION: Conditionally adds MPI-based parallel tests for the HDF IO module if the VTK::ParallelMPI target exists. Sets up distributed HDF writer tests with 3 MPI processes and configures them with TESTING_DATA and NO_VALID flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/HDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  set(vtkIOHDFCxxTests-MPI_NUMPROCS 3)\n  vtk_add_test_mpi(vtkIOHDFCxxTests-MPI mpi_test\n    TestHDFWriterDistributed.cxx,TESTING_DATA,NO_VALID\n  )\n\n  vtk_test_cxx_executable(vtkIOHDFCxxTests-MPI mpi_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Parallel MPI Module in CMake\nDESCRIPTION: Defines the classes and headers for the VTK Parallel MPI module and adds it to the VTK build system. The module includes MPI-related classes for parallel processing and communication, along with necessary headers that should not be wrapped.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMPICommunicator\n  vtkMPIController\n  vtkMPIUtilities)\n\nset(nowrap_headers\n  vtkMPI.h)\n\nvtk_module_add_module(VTK::ParallelMPI\n  CLASSES ${classes}\n  NOWRAP_HEADERS ${nowrap_headers})\nvtk_add_test_mangling(VTK::ParallelMPI)\n```\n\n----------------------------------------\n\nTITLE: Updating VTK Dashboard Scripts\nDESCRIPTION: Simple Git command to update the dashboard scripts to their latest version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/dashboard.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git pull\n```\n\n----------------------------------------\n\nTITLE: Check and Add Python Test if Numpy Available\nDESCRIPTION: This CMake script checks if the numpy module is available in Python. If numpy is found, it adds the TestGeoProjectionBounds.py Python test using the vtk_add_test_python function, setting the NO_DATA and NO_VALID flags to true.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Check that numpy is available\ninclude(FindPythonModules)\nfind_python_module(numpy numpy_found)\nif (numpy_found)\n  vtk_add_test_python(\n  TestGeoProjectionBounds.py,NO_DATA,NO_VALID,\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module for IO with Alembic\nDESCRIPTION: This command initializes the VTK::IOAlembic module, associating it with the classes defined earlier. It prepares the module for linking and compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOAlembic\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Adding Generate3DAMRDataSetWithPulse Executable\nDESCRIPTION: This snippet creates an executable named `Generate3DAMRDataSetWithPulse` from the source file `Generate3DAMRDataSetWithPulse.cxx`. It links the VTK libraries to the executable, providing access to VTK functionalities within the C++ code. `MACOSX_BUNDLE` ensures it is created as a macOS application bundle.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/AMR/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(Generate3DAMRDataSetWithPulse MACOSX_BUNDLE\n  Generate3DAMRDataSetWithPulse.cxx)\ntarget_link_libraries(Generate3DAMRDataSetWithPulse\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Checking for Large File Support in Zlib Configuration\nDESCRIPTION: Tests for large file support by checking if the off64_t type is available. If available, it adds the appropriate definition to enable large file support in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Check to see if we have large file support\n#\nset(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)\n# We add these other definitions here because CheckTypeSize.cmake\n# in CMake 2.4.x does not automatically do so and we want\n# compatibility with CMake 2.4.x.\ncheck_type_size(off64_t OFF64_T)\nif(HAVE_OFF64_T)\n   add_definitions(-D_LARGEFILE64_SOURCE=1)\nendif()\nset(CMAKE_REQUIRED_DEFINITIONS) # clear variable\n```\n\n----------------------------------------\n\nTITLE: Linking Modules and Setting Definitions for MFC\nDESCRIPTION: This snippet manages the linking of the GUISupportMFC module with appropriate libraries based on whether a static or shared MFC implementation is used. Definitions are set for shared MFC linkage. Dependencies include specific library names and definitions for VTK's build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (vtk_mfc_static)\n  vtk_module_link(VTK::GUISupportMFC\n    PRIVATE\n      \"debug;nafxcwd;optimized;nafxcw\"\n      \"debug;LIBCMTD;optimized;LIBCMT\"\n      Uxtheme\n      windowscodecs)\nelse ()\n  vtk_module_definitions(VTK::GUISupportMFC\n    PRIVATE\n      _AFXDLL)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering Parallel LIC Options in CMake\nDESCRIPTION: Sets up CMake options for enabling parallel timers in the surface LIC painter and 2D line integral convolution. These options control debug features in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_RENDERINGPARALLELLIC_SURFACELICPAINTER_TIMER \"enable parallel timers for the surface lic painter\" OFF)\nmark_as_advanced(VTK_RENDERINGPARALLELLIC_SURFACELICPAINTER_TIMER)\nvtk_deprecated_setting(convolution_default\n  VTK_RENDERINGPARALLELLIC_LINEINTEGRALCONVOLUTION2D_TIMER\n  VTK_RENDERINGPARALLELLIC_LINEINTEGRALCONVLOLUTION2D_TIMER\n  OFF)\noption(VTK_RENDERINGPARALLELLIC_LINEINTEGRALCONVOLUTION2D_TIMER \"enable parallel timers for the 2d line integral convolution\" \"${convolution_default}\")\nmark_as_advanced(VTK_RENDERINGPARALLELLIC_LINEINTEGRALCONVOLUTION2D_TIMER)\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for Large XDMF Data Tests\nDESCRIPTION: Sets up arguments and file paths for large data tests when VTK_USE_LARGE_DATA is enabled. This conditional block prepares for handling larger XDMF files from specified directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  set(_ManyFiles_ARGS \"--do_big_files\")\n  set(_BigFiles\n    \"Data/XDMF/Big/,REGEX:.*\"\n    \"Data/XDMF/Iron/,REGEX:.*\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC-Specific Settings for Zlib\nDESCRIPTION: Sets up Microsoft Visual C++ specific compiler definitions and include paths. This includes disabling deprecation warnings for cross-platform compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    if (FALSE) # XXX(kitware): VTK handles debug suffixes.\n    set(CMAKE_DEBUG_POSTFIX \"d\")\n    endif ()\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n    include_directories(${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Executable Targets for Finance and Delaunay Examples\nDESCRIPTION: Creates executable targets for finance visualization and Delaunay triangulation examples, linking them with the required VTK libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modelling/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(finance MACOSX_BUNDLE finance.cxx)\ntarget_link_libraries(finance PRIVATE ${VTK_LIBRARIES})\n\nadd_executable(Delaunay3D MACOSX_BUNDLE Delaunay3D.cxx)\ntarget_link_libraries(Delaunay3D PRIVATE ${VTK_LIBRARIES})\n\nadd_executable(Delaunay3DAlpha MACOSX_BUNDLE Delaunay3DAlpha.cxx)\ntarget_link_libraries(Delaunay3DAlpha PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Multi-page Reader Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK TIFF reader with multi-page support using a multipage TIFF example.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTIFFReaderMulti,TestTIFFReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/libtiff/multipage_tiff_example.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK LZMA CXX Test Suite\nDESCRIPTION: Sets up a C++ test executable for LZMA-related tests in VTK, with no data, validation, or output requirements\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lzma/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtklzmaCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeLZMA.cxx)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtklzmaCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten Specific Link Options\nDESCRIPTION: This snippet checks if the current system is Emscripten and sets specific link options for the VTK TestingCore module, including handling library paths for both build and install interfaces.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  vtk_module_link_options(VTK::TestingCore\n    INTERFACE\n      \"$<BUILD_INTERFACE:--js-library=${CMAKE_CURRENT_SOURCE_DIR}/vtkEmscriptenTestUtilities.js>\"\n      \"$<INSTALL_INTERFACE:--js-library=$<INSTALL_PREFIX>/${_vtk_build_LIBRARY_DESTINATION}/vtkEmscriptenTestUtilities.js>\")\n  install(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/vtkEmscriptenTestUtilities.js\"\n    DESTINATION ${_vtk_build_LIBRARY_DESTINATION})\nendif ()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for VTK Fides Module\nDESCRIPTION: Defines the list of header files (.h) including configuration and export headers for the Fides module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  Array.h\n  CellSet.h\n  Configure.h\n  CoordinateSystem.h\n  DataModel.h\n  DataSetReader.h\n  DataSetWriter.h\n  DataSource.h\n  Deprecated.h\n  FidesTypes.h\n  Field.h\n  FieldData.h\n  FieldDataManager.h\n  Keys.h\n  MetaData.h\n  Value.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/fides_export.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting VR Collaboration Option in CMake\nDESCRIPTION: This snippet defines an option for enabling or disabling VR collaboration support in the VTK build. It specifies that enabling this option requires the libzmq library. The default setting is OFF.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VR/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_ENABLE_VR_COLLABORATION \"Enable VR collaboration support. Requires libzmq library\" OFF)\nmark_as_advanced(VTK_ENABLE_VR_COLLABORATION)\n```\n\n----------------------------------------\n\nTITLE: Using VTK TypeName Feature in C++\nDESCRIPTION: Demonstrates how to obtain type names at compile time using the Common/Core/vtkTypeName.h header.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n#include \"vtkTypeName.h\"\n\n// ...\nstd::string typeName = vtk::TypeName<vtkImageData>();\nstd::cout << typeName << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake Build System\nDESCRIPTION: This snippet uses the add_subdirectory command to include the Cxx directory into the CMake build process. It requires a properly structured Cxx directory with necessary CMakeLists.txt files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SQL/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Filters Tensor C++ Test Executable\nDESCRIPTION: This command creates a C++ test executable for the VTK Filters Tensor tests. It uses the previously defined tests to build the executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Tensor/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersTensorCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Test for OCCT Reader\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` macro to define a VTK test. It specifies the test name, the C++ source file (`TestOCCTReader.cxx`), and indicates that no output is expected from the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OCCT/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOOCCTCxxTests tests\n    TestOCCTReader.cxx,NO_OUTPUT\n)\n```\n\n----------------------------------------\n\nTITLE: Combining All Tests and Creating Test Executable\nDESCRIPTION: Combines all defined tests into a single list and creates a C++ test executable for the VTK Filters Reduction module using vtk_test_cxx_executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests ${tests} ${no_data_tests})\nvtk_test_cxx_executable(vtkFiltersReductionCxxTests all_tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Tiled Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK TIFF reader with tiled TIFF format using a tiled TIFF example.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTIFFReaderMultipleTiled,TestTIFFReaderMultiple.cxx,NO_VALID,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/libtiff/tiled_10x30_tiff_example.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Subcommand Fallthrough and Matching Configuration\nDESCRIPTION: Control how subcommands and options are matched and processed across different levels\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\n.fallthrough()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.subcommand_fallthrough()\n```\n\n----------------------------------------\n\nTITLE: Configuring File in CMake\nDESCRIPTION: This snippet utilizes the `configure_file` command in CMake to process a header template from the source directory and place the configured output into the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_lz4.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_lz4.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Exodus CXX Tests\nDESCRIPTION: Configures the main test suite for VTK Exodus IO, including multiple test cases for attributes, file time handling, side sets, and various geometric elements like tetrahedra and wedges.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOExodusCxxTests tests\n  TestExodusAttributes.cxx,NO_VALID,NO_OUTPUT\n  TestExodusIgnoreFileTime.cxx,NO_VALID,NO_OUTPUT\n  TestExodusSideSets.cxx,NO_VALID,NO_OUTPUT\n  TestMultiBlockExodusWrite.cxx\n  TestExodusTetra15.cxx\n  TestExodusWedge18.cxx\n  TestExodusWedge21.cxx\n  ${extra_tests}\n  )\n```\n\n----------------------------------------\n\nTITLE: Displaying an Empty Status Message\nDESCRIPTION: This snippet uses the `message` command with the `STATUS` argument to display an empty line. This is used for formatting the output and improving readability of the CMake configuration messages.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"message(STATUS \\\"\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Catalyst Implementation in CMake\nDESCRIPTION: Configures the VTK Catalyst implementation target with necessary properties including name, target, export information, library destination, source files, and the main Catalyst target dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Catalyst/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncatalyst_implementation(\n  NAME    vtk\n  TARGET  catalyst-vtk\n  EXPORT \"${_vtk_build_INSTALL_EXPORT}\"\n  LIBRARY_DESTINATION\n    \"${catalyst_library_destination}\"\n  SOURCES\n    VTKCatalyst.cxx\n  CATALYST_TARGET VTK::catalyst)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data-Dependent Tests for VTK Interaction Widgets\nDESCRIPTION: Defines C++ tests that require input data files for VTK's interaction widgets. These tests validate widgets that process or display specific data inputs such as polygons, lines, and tensor data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Tests with data\nvtk_add_test_cxx(vtkInteractionWidgetsCxxTests data_tests\n  TestButtonWidget.cxx\n  TestButtonWidgetMultipleViewports.cxx\n  TestButtonWidgetPlacement.cxx\n  TestDijkstraGraphGeodesicPath.cxx\n  TestLineWidget.cxx\n  TestLineWidget2.cxx\n  TestOrientedGlyphContour.cxx\n  TestPlaneWidget.cxx\n  TestPointWidget.cxx\n  TestPolyPlane.cxx,NO_VALID\n  TestPolygonalHandleRepresentations.cxx\n  TestPolygonalRepresentationHandleWidget.cxx\n  TestPolygonalSurfaceConstrainedDistanceWidget.cxx\n  TestSphereHandleWidget.cxx\n  TestSurfaceConstrainedHandleWidget.cxx\n  TestTensorProbeWidget.cxx\n  TestImageTracerWidget.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test for vtkKissFFT Using CMake\nDESCRIPTION: This snippet adds a test case for vtkKissFFT using the vtk_add_test_cxx command. It specifies different testing scenarios: NO_DATA, NO_VALID, NO_OUTPUT and points to the implementation file TestIncludeKissFFT.cxx. Ensure that the VTK test infrastructure is properly set up before using this command.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkkissfftCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeKissFFT.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory in CMake\nDESCRIPTION: Configures the object factory by specifying source and header files alongside an export macro. This is essential for linking and exporting the factories within VTK, dictated by the provided export macro.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKFILTERSPARALLELGEOMETRY_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Install Script for Custom Java Packaging in CMake\nDESCRIPTION: Sets up a post-install script for custom Java packaging of VTK. It generates Maven artifact XML, configures dependency XML for JOGL if needed, and sets up installation scripts and README files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Post-Install script for Custom Java Packaging\n# This install rule MUST stay at the bottom of that CMakeLists file as\n# it has to be the last install rule that get executed\nif(VTK_BUILD_MAVEN_PKG)\n  set(MAVEN_NATIVE_ARTIFACT_XML)\n  foreach(native_name ${MAVEN_NATIVE_ARTIFACTS})\n    string(APPEND MAVEN_NATIVE_ARTIFACT_XML\n      \"\\n                <artifact><file>vtk${MAVEN_VTK_ARTIFACT_SUFFIX}-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}-natives-${native_name}.jar</file><classifier>natives-${native_name}</classifier><type>jar</type></artifact>\")\n  endforeach()\n  if(VTK_JAVA_JOGL_COMPONENT)\n    string(APPEND MAVEN_DEPENDENCY_XML \"\\n      <dependency><groupId>org.jogamp.jogl</groupId><artifactId>jogl-all-main</artifactId><version>${JOGL_VERSION}</version></dependency>\\n      <dependency><groupId>org.jogamp.gluegen</groupId><artifactId>gluegen-rt-main</artifactId><version>${JOGL_VERSION}</version></dependency>\")\n  endif()\n  configure_file(JavaInstall.cmake.in\n                 ${CMAKE_CURRENT_BINARY_DIR}/JavaInstall.cmake @ONLY)\n  configure_file(Maven/pom.xml.in\n                 ${CMAKE_CURRENT_BINARY_DIR}/pom.xml @ONLY)\n  configure_file(Maven/README.txt.in\n                 ${CMAKE_CURRENT_BINARY_DIR}/MAVEN-README.txt @ONLY)\n  install(SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/JavaInstall.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI and NetCDF Support in VTK Ioss\nDESCRIPTION: Checks global property for NetCDF parallel support and validates MPI requirements for the module\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/vtkioss/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(vtk_netcdf_has_parallel GLOBAL PROPERTY \"_vtk_netcdf_has_parallel\")\nif (vtk_netcdf_has_parallel)\n  if (NOT TARGET VTK::mpi)\n    message(FATAL_ERROR\n      \"An external MPI-aware NetCDF is requires that VTK be built with MPI \"\n      \"support as well.\")\n  endif()\n  set(SEACAS_HAVE_MPI ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Module Test Data\nDESCRIPTION: This snippet uses the `vtk_module_test_data` function to declare data files required by the VTK module's tests. It lists specific files, including PDB, AUX, and CML files, which are then made available to the tests during execution. These files are assumed to be located in the 'Data' subdirectory relative to the current CMakeLists.txt file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/2LYZ.pdb\n  Data/2h2o.aux\n  Data/3GQP.pdb\n  Data/porphyrin.cml)\n```\n\n----------------------------------------\n\nTITLE: C++11 Support Configuration in CMake\nDESCRIPTION: Configures C++11 support based on the EIGEN_TEST_CXX11 option. If enabled, sets the appropriate CMake and compiler flags for C++11; otherwise, attempts to use C++03 standard.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_cxx_compiler_flag(\"-std=c++11\" EIGEN_COMPILER_SUPPORT_CPP11)\n\nif(EIGEN_TEST_CXX11)\n  set(CMAKE_CXX_STANDARD 11)\n  set(CMAKE_CXX_EXTENSIONS OFF)\n  if(EIGEN_COMPILER_SUPPORT_CPP11)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n  endif()\nelse()\n  #set(CMAKE_CXX_STANDARD 03)\n  #set(CMAKE_CXX_EXTENSIONS OFF)\n  ei_add_cxx_compiler_flag(\"-std=c++03\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GraphItem Executable\nDESCRIPTION: This snippet defines the GraphItem executable if the necessary VTK targets are present. It specifies source files for the executable and links to required VTK libraries, enabling the use of charts and visualization features from VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Charts/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::InfovisCore AND TARGET VTK::ViewsInfovis AND TARGET VTK::ViewsContext2D)\n  add_executable(GraphItem\n    GraphItem.cxx\n    vtkGraphItem.cxx\n    vtkGraphItem.h)\n  target_link_libraries(GraphItem\n    PRIVATE\n      VTK::ChartsCore\n      VTK::InfovisCore\n      VTK::ViewsInfovis\n      VTK::ViewsContext2D)\n  vtk_module_autoinit(\n    TARGETS GraphItem\n    MODULES VTK::ChartsCore\n            VTK::InfovisCore\n            VTK::ViewsInfovis\n            VTK::ViewsContext2D)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Referencing CMake Variables in VTK Module System\nDESCRIPTION: This snippet demonstrates how to reference CMake variables and commands within the VTK module system documentation. It includes links to CMake documentation for various built-in variables and commands.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/ModuleSystem.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n[BUILD_SHARED_LIBS]: https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html\n[GNUInstallDirs]: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html\n[cmake-CMAKE_PROJECT_NAME]: https://cmake.org/cmake/help/latest/variable/CMAKE_PROJECT_NAME.html\n[cmake-project]: https://cmake.org/cmake/help/latest/command/project.html\n```\n\n----------------------------------------\n\nTITLE: Creating Source Files for VTK Array Types Instantiations - CMake\nDESCRIPTION: This snippet iterates over predefined numeric types to generate corresponding C++ source files for various VTK array types. It specifically skips the 'vtkIdType', constructs file suffixes, and appends the necessary instantiation types to the 'instantiation_sources' list.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# create a list of source files for explicit array type instantiations\nset(instantiation_sources)\n\ninclude(vtkTypeLists)\n\nforeach (INSTANTIATION_VALUE_TYPE IN LISTS vtk_numeric_types)\n  # only instantiate fundamental types, not typedefs\n  if (INSTANTIATION_VALUE_TYPE STREQUAL \"vtkIdType\")\n    continue()\n  endif ()\n  # create a file suffix from the type\n  string(REPLACE \" \" \"_\" _suffix \"${INSTANTIATION_VALUE_TYPE}\")\n\n  set(_list\n    vtkAffineArrayInstantiate\n    vtkAffineImplicitBackendInstantiate\n    vtkCompositeArrayInstantiate\n    vtkCompositeImplicitBackendInstantiate\n    vtkConstantArrayInstantiate\n    vtkConstantImplicitBackendInstantiate\n    vtkIndexedArrayInstantiate\n    vtkIndexedImplicitBackendInstantiate\n    vtkSOADataArrayTemplateInstantiate\n    vtkStdFunctionArrayInstantiate\n    vtkStructuredPointBackendInstantiate\n    vtkStructuredPointArrayInstantiate\n    vtkTypedDataArrayInstantiate)\n  if (VTK_BUILD_SCALED_SOA_ARRAYS)\n    list(APPEND _list \"vtkScaledSOADataArrayTemplateInstantiate\")\n  endif ()\n\n  # see comments in vtkGenericDataArray.h for explanation\n  if (INSTANTIATION_VALUE_TYPE MATCHES \"(^| )long( |$)\")\n    list(APPEND _list \"vtkGenericDataArrayValueRangeInstantiate\")\n  endif ()\n\n  # generate cxx file to instantiate template with this type\n  foreach (_prefix IN LISTS _list)\n    configure_file(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/${_prefix}.cxx.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/${_prefix}_${_suffix}.cxx\"\n      @ONLY)\n    list(APPEND instantiation_sources\n      \"${CMAKE_CURRENT_BINARY_DIR}/${_prefix}_${_suffix}.cxx\")\n  endforeach ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing VTK IOSS Headers in CMake\nDESCRIPTION: Configures and installs the VTK IOSS header file. It generates the header from a template and sets up installation of the generated header.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_ioss.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_ioss.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_ioss.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOERF Module Classes and Tests\nDESCRIPTION: CMake configuration that defines the required classes for the VTK IOERF module and sets up the module with test mangling support. The script adds vtkHDF5Helper and vtkERFReader classes to the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ERF/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkHDF5Helper\n  vtkERFReader)\n\nvtk_module_add_module(VTK::IOERF\n  CLASSES ${classes}\n  )\nvtk_add_test_mangling(VTK::IOERF)\n```\n\n----------------------------------------\n\nTITLE: Linking Alembic to VTK Module\nDESCRIPTION: This snippet links the Alembic library to the VTK::IOAlembic module, ensuring that it is included during the build process without exporting the kit if shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::IOAlembic\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    Alembic::Alembic)\n```\n\n----------------------------------------\n\nTITLE: Rebasing on Master\nDESCRIPTION: Commands to rebase branch on latest master and force push changes\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: git\nCODE:\n```\ngit fetch origin\ngit rebase -i origin/master\ngit push gitlab -f\n```\n\n----------------------------------------\n\nTITLE: GCC-specific Compiler Optimization Settings\nDESCRIPTION: Disables optimization for polynomial solver implementation when using GCC compiler.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX)\n  set_source_files_properties(vtkPolynomialSolversUnivariate.cxx\n    PROPERTIES\n      COMPILE_FLAGS -O0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring File Generation - CMake\nDESCRIPTION: This snippet configures the generation of the header file 'vtk_utf8.h' from a template. It uses 'configure_file' to create the final header file in the binary directory, ensuring that any variables in the input template are replaced properly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/utf8/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_utf8.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_utf8.h\")\n```\n\n----------------------------------------\n\nTITLE: Linking Against Math Library on UNIX\nDESCRIPTION: This CMake command links the png library against the math library ('m') on UNIX systems. The 'PRIVATE' keyword indicates that the math library is a private dependency and should not be exposed to other libraries that link against png.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/vtkpng/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\n  target_link_libraries(png\n    PRIVATE\n      m)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Superelements Test (Conditional)\nDESCRIPTION: This CMake code snippet conditionally adds a C++ test for handling superelements if `VTK_USE_LARGE_DATA` is enabled. It uses `vtk_add_test_cxx` to add the `TestIOSSSuperelements.cxx` test, which likely verifies the correct handling of large datasets and superelements within the IOSS module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_add_test_cxx(vtkIOIOSSCxxTests tests\n    TestIOSSSuperelements.cxx,NO_VALID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Include Files\nDESCRIPTION: Checks for the existence of required header files such as stdint.h and inttypes.h, failing the configuration if they are absent.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckIncludeFile)\ncheck_include_file(stdint.h HAVE_STDINT_H)\ncheck_include_file(inttypes.h HAVE_INTTYPES_H)\nif (NOT HAVE_STDINT_H)\n  message(FATAL_ERROR \"stdint.h is not found\")\nendif ()\nif (NOT HAVE_INTTYPES_H)\n  message(FATAL_ERROR \"inttypes.h is not found\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Traces for Loguru in CMake\nDESCRIPTION: This part evaluates the presence of necessary headers and sets a variable to enable stack traces if available. It also configures module definitions based on the presence of these headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(loguru_have_stacktraces 0)\nif (VTK_LOGURU_HAVE_CXXABI_H AND VTK_LOGURU_HAVE_DLFCN_H AND VTK_LOGURU_HAVE_EXECINFO_H)\n  set(loguru_have_stacktraces 1)\nendif ()\n\nvtk_module_add_module(VTK::loguru\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkloguru\")\nvtk_module_definitions(VTK::loguru\n  PRIVATE\n    \"LOGURU_SCOPE_TIME_PRECISION=${VTK_LOGGING_TIME_PRECISION}\"\n    \"LOGURU_STACKTRACES=$<BOOL:${loguru_have_stacktraces}>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GLAD Third Party Module in CMake\nDESCRIPTION: Initializes GLAD as an internal third-party module with license information, version details, and standard include directories. Sets up the module with proper attribution and source location information.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/glad/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES           \"vtkglad/LICENSE\"\n  SPDX_LICENSE_IDENTIFIER \"GLAD\"\n  SPDX_COPYRIGHT_TEXT     \"Copyright (c) 2013-2022 David Herberth, Copyright (c) 2013-2020 The Khronos Group Inc., \"\n  SPDX_DOWNLOAD_LOCATION  \"git+https://github.com/Dav1dde/glad/tree/glad2\"\n  VERSION       \"2.0.6\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Defining Zlib Source and Header Files\nDESCRIPTION: Sets up the lists of source files, public headers, and private headers that make up the Zlib library. These lists are used to configure the build target.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZLIB_PUBLIC_HDRS\n    ${CMAKE_CURRENT_BINARY_DIR}/zconf.h\n    zlib.h\n)\nset(ZLIB_PRIVATE_HDRS\n    crc32.h\n    deflate.h\n    gzguts.h\n    inffast.h\n    inffixed.h\n    inflate.h\n    inftrees.h\n    trees.h\n    zutil.h\n)\nset(ZLIB_SRCS\n    adler32.c\n    compress.c\n    crc32.c\n    deflate.c\n    gzclose.c\n    gzlib.c\n    gzread.c\n    gzwrite.c\n    inflate.c\n    infback.c\n    inftrees.c\n    inffast.c\n    trees.c\n    uncompr.c\n    zutil.c\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Data\nDESCRIPTION: Commands for building and testing new data files in VTK\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake . && cmake --build .\nctest -VV -R yourTest\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI-Enabled Ray Tracing Tests in CMake for VTK\nDESCRIPTION: Sets up MPI-enabled tests for VTK's ray tracing capabilities when OSPRay, RenderingParallel, and ParallelMPI are available. It creates a separate MPI-enabled test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Do we have MPI and parallel support\nif (VTK_ENABLE_OSPRAY AND TARGET VTK::RenderingParallel AND TARGET VTK::ParallelMPI)\n  set(vtkRenderingRayTracingCxx-MPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkRenderingRayTracingCxx-MPI tests\n    TESTING_DATA\n    TestOSPRayComposite.cxx\n    )\n  vtk_test_cxx_executable(vtkRenderingRayTracingCxx-MPI tests RENDERING_FACTORY\n    vtkOSPRayTestInteractor.cxx\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Instantiation Generation\nDESCRIPTION: Generates instantiation source files for different numeric types using template configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (INSTANTIATION_VALUE_TYPE IN LISTS vtk_numeric_types)\n  if (INSTANTIATION_VALUE_TYPE STREQUAL \"vtkIdType\")\n    continue()\n  endif ()\n  vtk_type_to_camel_case(\"${INSTANTIATION_VALUE_TYPE}\" _cased_type)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/vtkDataObjectImplicitBackendInstantiate.cxx.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/vtkDataObjectImplicitBackendInstantiate${_cased_type}.cxx\")\n\n    list(APPEND instantiation_sources\n      \"${CMAKE_CURRENT_BINARY_DIR}/vtkDataObjectImplicitBackendInstantiate${_cased_type}.cxx\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Special Attributes in VTK Python Objects\nDESCRIPTION: Details about special attributes `__vtkname__` and `__this__` for classes derived from `vtkObjectBase`. These attributes can be used to inspect class names or C++ object addresses when interacting with VTK in Python.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\n    >>> vtkSOADataArrayTemplate['float32'].__vtkname__\n    '23vtkSOADataArrayTemplateIfE'\n    >>> a = vtkFloatArray()\n    >>> a.__this__\n    '_00005653a6a6f700_p_vtkFloatArray'\n\n    >>> a = vtkFloatArray('_00005653a6a6f700_p_vtkFloatArray')\n    >>> a\n    <vtkmodules.vtkCommonCore.vtkFloatArray(0x5653a6a6f700) at 0x7f0e7aecf5e0>\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationIntegerVectorKey in VTK XML\nDESCRIPTION: Demonstrates the XML structure for defining a vtkInformationIntegerVectorKey with multiple integer values, each specified with an index.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"IntegerVector\" location=\"XMLTestKey\" length=\"3\">\n  <Value index=\"0\">\n    1\n  </Value>\n  <Value index=\"1\">\n    5\n  </Value>\n  <Value index=\"2\">\n    45\n  </Value>\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Making Update Script Executable on Windows\nDESCRIPTION: This command marks the `update.sh` script as executable within the Git index on Windows. This is necessary for Git to recognize and execute the script correctly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/UPDATING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n  $ git update-index --chmod=+x update.sh\n```\n\n----------------------------------------\n\nTITLE: Testing Ogg Libraries with CTest - Shell\nDESCRIPTION: Commands for running tests for Ogg libraries using CTest on various platforms after building. These tests can be executed under different configuration types, which are prerequisites for this snippet.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nctest\nctest -C Debug\nctest -C Release\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK::IOOpenVDB in CMake\nDESCRIPTION: Adds test mangling for the VTK::IOOpenVDB module, which is likely used for test-related configurations or name mangling in the testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOOpenVDB)\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite on Unix-like Systems\nDESCRIPTION: Step-by-step commands to compile SQLite from source on Unix-like systems, including installing dependencies, unpacking the source code, configuring the build environment, and building various SQLite tools.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt install gcc make tcl-dev  ;#  Make sure you have all the necessary build tools\ntar xzf sqlite.tar.gz         ;#  Unpack the source tree into \"sqlite\"\nmkdir bld                     ;#  Build will occur in a sibling directory\ncd bld                        ;#  Change to the build directory\n../sqlite/configure           ;#  Run the configure script\nmake sqlite3                  ;#  Builds the \"sqlite3\" command-line tool\nmake sqlite3.c                ;#  Build the \"amalgamation\" source file\nmake sqldiff                  ;#  Builds the \"sqldiff\" command-line tool\n# Makefile targets below this point require tcl-dev\nmake tclextension-install     ;#  Build and install the SQLite TCL extension\nmake devtest                  ;#  Run development tests\nmake releasetest              ;#  Run full release tests\nmake sqlite3_analyzer         ;#  Builds the \"sqlite3_analyzer\" tool\n```\n\n----------------------------------------\n\nTITLE: Managing Delayload Link Option for Shared VTK\nDESCRIPTION: In this snippet, the /DELAYLOAD linker flag is used for VTK DLL builds to prevent memory leak warnings by ensuring correct load order of VTK and MFC libraries. This is crucial for avoiding false positive memory leaks during MFC shutdown. It depends on CMake variables and command options introduced in CMake 3.13.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Using the linker /DELAYLOAD flag is necessary when VTK is built as dlls to\n# avoid false mem leak reporting by MFC shutdown code. Without it, the VTK dlls\n# load before the MFC dll at startup and unload after the MFC dll unloads at\n# shutdown. Hence, any VTK objects left at MFC dll unload time get reported as\n# leaks.\nif (BUILD_SHARED_LIBS)\n  vtk_module_link(VTK::GUISupportMFC\n    PRIVATE\n      DelayImp)\n\n  # Direct dependencies.\n  set(mfc_dependencies\n    # Public\n    VTK::RenderingOpenGL2)\n  set(mfc_dependencies_visited)\n\n  set(mfc_library_dependencies)\n  while (mfc_dependencies)\n    list(GET mfc_dependencies 0 mfc_dependency)\n    list(REMOVE_AT mfc_dependencies 0)\n    if (mfc_dependency IN_LIST mfc_dependencies_visited)\n      continue ()\n    endif ()\n    list(APPEND mfc_dependencies_visited\n      \"${mfc_dependency}\")\n\n    _vtk_module_get_module_property(\"${mfc_dependency}\"\n      PROPERTY  kit\n      VARIABLE  mfc_dependency_kit)\n    if (mfc_dependency_kit)\n      list(APPEND mfc_library_dependencies\n        \"${mfc_dependency_kit}\")\n    else ()\n      vtk_module_get_property(\"${mfc_dependency}\"\n        PROPERTY  TYPE\n        VARIABLE  mfc_dependency_type)\n      if (mfc_dependency_type STREQUAL \"SHARED_LIBRARY\")\n        list(APPEND mfc_library_dependencies\n          \"${mfc_dependency}\")\n      endif ()\n    endif ()\n\n    _vtk_module_get_module_property(\"${mfc_dependency}\"\n      PROPERTY  depends\n      VARIABLE  mfc_dependency_dependencies)\n    list(APPEND mfc_dependencies\n      ${mfc_dependency_dependencies})\n  endwhile ()\n\n  if (mfc_library_dependencies) # XXX(cmake-3.14): `REMOVE_DUPLICATES` on an empty list\n    list(REMOVE_DUPLICATES mfc_dependency_kit)\n  endif ()\n\n  set(vtk_mfc_link_options)\n  foreach (mfc_library_dependency IN LISTS mfc_library_dependencies)\n    list(APPEND vtk_mfc_link_options\n      \"/DELAYLOAD:$<TARGET_FILE_NAME:${mfc_library_dependency}>\")\n  endforeach ()\n\n  if (NOT CMAKE_VERSION VERSION_LESS \"3.13\") # XXX(cmake-3.13): target_link_options.\n    vtk_module_link_options(VTK::GUISupportMFC\n      PRIVATE\n        ${vtk_mfc_link_options})\n  else ()\n    vtk_module_link(VTK::GUISupportMFC\n      PRIVATE\n        ${vtk_mfc_link_options})\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ImagingFourier Module in CMake\nDESCRIPTION: Sets up the VTK ImagingFourier module by defining its component classes and adding it to the VTK build system. The module contains various Fourier transform-related image processing filters including FFT, RFFT, and frequency domain filters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Fourier/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkImageButterworthHighPass\n  vtkImageButterworthLowPass\n  vtkImageFFT\n  vtkImageFourierCenter\n  vtkImageFourierFilter\n  vtkImageIdealHighPass\n  vtkImageIdealLowPass\n  vtkImageRFFT)\n\nvtk_module_add_module(VTK::ImagingFourier\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingFourier)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Module Third Party\nDESCRIPTION: This code snippet defines the third-party module 'nlohmann_json' required by VTK, including licensing details and download location. It specifies the module as internal with related license files and version information. Key parameters include the name, download location, and version of the library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    INTERFACE\n    LICENSE_FILES\n      \"vtknlohmannjson/LICENSE.MIT\"\n    SPDX_LICENSE_IDENTIFIER\n      \"MIT\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2013-2021 Niels Lohmann\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/nlohmann_json.git@for/vtk-20240529-3.11.3\"\n    VERSION\n      \"3.11.3\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE nlohmann_json\n    TARGETS nlohmann_json::nlohmann_json\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Running Speed and Bloat Tests for Format Benchmarks\nDESCRIPTION: These commands demonstrate how to run the speed test and bloat test for the format benchmarks.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ make speed-test\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ make bloat-test\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK JPEG C++ Tests with CMake\nDESCRIPTION: This snippet sets up C++ tests for the VTK JPEG module using CMake commands. It adds a test named 'vtkjpegCxxTests' with the source file 'TestIncludeJPEG.cxx' and specifies that it doesn't require data, validation, or output. It then creates a test executable for these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkjpegCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeJPEG.cxx)\nvtk_test_cxx_executable(vtkjpegCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Committing changes with specific author and date\nDESCRIPTION: This command commits the changes with a specific author name, email, and date.  It then amends the commit message to describe the procedure used to obtain the content. The author information ensures proper attribution for the imported code.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"GIT_AUTHOR_NAME='XDMF Developers' \\\n GIT_AUTHOR_EMAIL='xdmf@lists.kitware.com' \\\n GIT_AUTHOR_DATE='2012-08-01 16:14:03 -0500' \\\n git commit -m 'xdmf2/vtk 2012-08-01 (reduced)' &&\ngit commit --amend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Subdirectory\nDESCRIPTION: Adds the Cxx subdirectory to the build configuration, typically used for compiling C++ test suites or implementations\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/GDAL/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests with CMake\nDESCRIPTION: Configures multiple Python test files to be run as part of VTK's testing suite. The LOOSE_VALID flag indicates these tests have relaxed validation requirements. Tests cover various plotting functionalities including bar graphs, line plots, stacked plots, and color handling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestBarGraph.py,LOOSE_VALID\n  TestLinePlot.py,LOOSE_VALID\n  TestStackedPlot.py,LOOSE_VALID\n  TestLinePlotColors.py,LOOSE_VALID\n  TestParallelCoordinatesColors.py,LOOSE_VALID\n  TestScatterPlotColors.py,LOOSE_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking for Boost Shared Dynamic Cast Support in XdmfCore\nDESCRIPTION: Performs a compile-time check to determine if the Boost library supports shared_dynamic_cast functionality, which is required for the XdmfCore library. Stores the result in the HAVE_BOOST_SHARED_DYNAMIC_CAST variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${Boost_INCLUDE_DIRS})\ncheck_cxx_source_compiles(\"\n#include <boost/shared_ptr.hpp>\n\nstruct Base { virtual ~Base(){} };\nstruct Derived : public Base {};\n\nint main(int ac, char * av[])\n{\n  boost::shared_ptr<Base> ptr(new Base());\n  boost::shared_dynamic_cast<Derived>(ptr);\n}\n\"\nHAVE_BOOST_SHARED_DYNAMIC_CAST)\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamicLoader Support for KWSys\nDESCRIPTION: Sets a compile definition for DynamicLoader.cxx based on whether shared libraries are supported by the target.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_USE_DynamicLoader)\n  get_property(KWSYS_SUPPORTS_SHARED_LIBS GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)\n  if(KWSYS_SUPPORTS_SHARED_LIBS)\n    set(KWSYS_SUPPORTS_SHARED_LIBS 1)\n  else()\n    set(KWSYS_SUPPORTS_SHARED_LIBS 0)\n  endif()\n  set_property(SOURCE DynamicLoader.cxx APPEND PROPERTY COMPILE_DEFINITIONS\n    KWSYS_SUPPORTS_SHARED_LIBS=${KWSYS_SUPPORTS_SHARED_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility Method\nDESCRIPTION: Demonstrates the deprecated method for maintaining compatibility with existing code that uses the old storage format\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/vtk-polyhedral-cells-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid SetCells(vtkUnsignedCharArray* cellTypes, \n             vtkCellArray* cells, \n             vtkIdTypeArray* faceLocations, \n             vtkIdTypeArray* faces); // Deprecated but supported method\n```\n\n----------------------------------------\n\nTITLE: Linking LibArchive to VTK Common Archive Module in CMake\nDESCRIPTION: Links the LibArchive library to the VTK::CommonArchive module as a private dependency if shared. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::CommonArchive NO_KIT_EXPORT_IF_SHARED PRIVATE LibArchive::LibArchive)\nvtk_add_test_mangling(VTK::CommonArchive)\n```\n\n----------------------------------------\n\nTITLE: Create Custom Target for Ant Configuration\nDESCRIPTION: Creates a custom target, `VolumeRender-ant-configure`, which updates the Android project using the `android` command-line tool and copies build-related files using CMake's `file(COPY_IF_DIFFERENT)` command. It also removes copies from the source directory. This target is marked as `ALL` to be built by default.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(VolumeRender-ant-configure ALL\n  COMMAND \"${ANDROID_EXECUTABLE}\"\n          update project\n          --name VolumeRender\n          --path \"${CMAKE_CURRENT_SOURCE_DIR}\"\n          --target \"android-${CMAKE_SYSTEM_VERSION}\"\n  COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different\n          \"${CMAKE_CURRENT_SOURCE_DIR}/build.xml\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/build.xml\"\n  COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different\n          \"${CMAKE_CURRENT_SOURCE_DIR}/local.properties\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/local.properties\"\n  COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different\n          \"${CMAKE_CURRENT_SOURCE_DIR}/project.properties\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/project.properties\"\n  COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different\n          \"${CMAKE_CURRENT_SOURCE_DIR}/proguard-project.txt\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/proguard-project.txt\"\n  COMMAND \"${CMAKE_COMMAND}\" -E remove\n          \"${CMAKE_CURRENT_SOURCE_DIR}/build.xml\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/local.properties\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/project.properties\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/proguard-project.txt\"\n  WORKING_DIRECTORY\n          \"${CMAKE_CURRENT_BINARY_DIR}\")\n\nadd_dependencies(VolumeRender-ant-configure VolumeRender)\n```\n\n----------------------------------------\n\nTITLE: Configuring Large Data Tests for MRC and OME-TIFF Readers in CMake for VTK\nDESCRIPTION: Sets up conditional tests for MRC reader and OME-TIFF readers with multi-channel and time-series data that are only enabled when VTK_USE_LARGE_DATA is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_add_test_cxx(vtkIOImageCxxTests large_data_tests\n    TestMRCReader,TestMRCReader.cxx,NO_OUTPUT\n      \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/mrc/emd_1056.mrc}\")\n\n  vtk_add_test_cxx(vtkIOImageCxxTests large_data_tests\n    TestOMETIFFReaderTwoChannel,TestOMETIFFReader.cxx,NO_OUTPUT,NO_VALID\n    \"--data\" \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/ometiff/test_small_TwoChannel_Singleframe.ome.tif}\"\n    \"--size\" \"256x256x75\"\n    \"--physical-size\" \"0.208x0.208x0.604\"\n    \"--size_c\" \"2\"\n    \"--size_t\" \"1\")\n\n  vtk_add_test_cxx(vtkIOImageCxxTests large_data_tests\n    TestOMETIFFReaderSingleChannel,TestOMETIFFReader.cxx,NO_OUTPUT,NO_VALID\n    \"--data\" \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/ometiff/test_small_singleChannel_timeSeries.ome.tif}\"\n    \"--size\" \"256x256x75\"\n    \"--physical-size\" \"0.208x0.208x0.604\"\n    \"--size_c\" \"1\"\n    \"--size_t\" \"6\")\n\n  list(APPEND data_tests ${large_data_tests})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Source Directory\nDESCRIPTION: CMake command to include the C++ source code directory in the VTK build process. This directive tells CMake to process the CMakeLists.txt file in the Cxx subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenVR Runtime Tests in CMake\nDESCRIPTION: This snippet defines a CMake option to enable OpenVR runtime tests. These tests require an OpenVR runtime and a HMD to pass. The option is initially set to OFF and marked as advanced.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"option(VTK_OPENVR_TESTING_ENABLE_RUNTIME_TESTS \\\"Enable OpenVR tests that require an OpenVR runtime\\\" OFF)\nmark_as_advanced(VTK_OPENVR_TESTING_ENABLE_RUNTIME_TESTS)\"\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::RenderingOpenXR Module in CMake\nDESCRIPTION: Adds the VTK::RenderingOpenXR module with specified classes and headers using VTK's module addition command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingOpenXR\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  NOWRAP_HEADERS ${nowrap_headers}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK PostgreSQL Module\nDESCRIPTION: Applies test mangling configuration to the VTK PostgreSQL IO module for consistent testing behavior\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOPostgreSQL)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK QtSQL Module Classes\nDESCRIPTION: Sets up a list of classes for the VTK QtSQL module, including database and utility classes related to Qt and SQL interactions\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkQtSQLDatabase\n  vtkQtSQLQuery\n  vtkQtTimePointUtility\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory in CMake\nDESCRIPTION: This snippet adds the Cxx subdirectory to the current CMake project, enabling the build of C++ components in the VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Library Info Option in CMake for HDF5\nDESCRIPTION: This snippet defines a CMake option to embed library info into executables for HDF5, except for Emscripten builds. It sets the H5_HAVE_EMBEDDED_LIBINFO variable based on the option.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set (H5_HAVE_EMBEDDED_LIBINFO 0)\nelse ()\n  if (FALSE) # XXX(kitware): Hardcode settings.\n  option (HDF5_ENABLE_EMBEDDED_LIBINFO \"embed library info into executables\" ON)\n  if (HDF5_ENABLE_EMBEDDED_LIBINFO)\n    set (H5_HAVE_EMBEDDED_LIBINFO 1)\n  endif ()\n  else ()\n  set(HDF5_ENABLE_EMBEDDED_LIBINFO 1)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuration of Testing and Data Download Targets\nDESCRIPTION: This section configures the paths and options related to test data, including setting directories for input and output data and adding the necessary targets for large data usage. It also emphasizes setting up the environment correctly before any data is downloaded, ensuring that all test references are in place.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWheel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(VTK_USE_LARGE_DATA \"Enable tests requiring \\\"large\\\" data\" OFF)\nset(_vtk_build_TEST_DATA_TARGET \"VTKData\")\nset(_vtk_build_TEST_INPUT_DATA_DIRECTORY \"${VTK_TOP_DIR}/Testing\")\nset(_vtk_build_TEST_OUTPUT_DATA_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/ExternalData/Testing\")\nset(_vtk_build_TEST_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/Testing/Temporary\")\n\nExternalData_Add_Target(VTKData)\n```\n\n----------------------------------------\n\nTITLE: Listing PROJ Modifications for VTK Integration\nDESCRIPTION: This snippet outlines the key changes made to PROJ for integration with VTK, including build system modifications, symbol mangling, and platform-specific adjustments.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n  * Ignore whitespace errors for VTK's commit checks.\n  * Integrate the CMake build with VTK's module system.\n  * Mangle all exported symbols to have a `vtklibproj_` prefix.\n  * On emscripten hosts, generate `proj.db` with `sqlitebin -init filename` instead of relying on `stdin`.\n  * Add `-Wno-experimental` for `wasm64-unknown` architecture.\n```\n\n----------------------------------------\n\nTITLE: Adding Labeled Data Mapper Test for Non-GLES OpenGL in CMake\nDESCRIPTION: Adds a test for labeled data mappers when not using OpenGL ES, as it requires geometry shaders which are not available in GLES.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT VTK_OPENGL_USE_GLES)\n  # vtkFastLabeledDataMapper needs geometry shaders and GLES does not have them.\n  vtk_add_test_cxx(vtkRenderingOpenGL2CxxTests tests\n    TestLabeledDataMappers.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Point Filters Test Cases\nDESCRIPTION: Adds multiple C++ test files to the VTK Filters Points test suite, with options for validation and data handling\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersPointsCxxTests tests\n  UnitTestKernels.cxx,NO_VALID\n  TestSPHKernels.cxx,NO_VALID\n  PlotSPHKernels.cxx\n  TestConvertToPointCloud.cxx\n  TestPointCloudFilterArrays.cxx,NO_VALID,NO_DATA\n  TestPoissonDiskSampler.cxx,NO_VALID,NO_DATA\n  TestPCANormalEstimationModes.cxx,NO_VALID,NO_DATA\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Infovis Test Data Files in CMake\nDESCRIPTION: Specifies test data files to be used for VTK Infovis module testing. The test data includes two CSV files containing graph edge and vertex information, plus a small graph file. It also adds the Cxx subdirectory to the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Layout/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/Infovis/kcore_edges.csv\n  Data/Infovis/kcore_verts.csv\n  Data/Infovis/small.graph)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Tests\nDESCRIPTION: Sets up MPI-specific tests when the VTK::ParallelMPI target is available. Configures these tests to run with 2 processes and adds necessary test files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  set(vtkFiltersCoreCxxTests-MPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkFiltersCoreCxxTests-MPI mpi_test\n    TESTING_DATA\n    TestAppendFilterDistributed.cxx,NO_VALID\n    TestCleanPolyDataWithGhostCells.cxx\n  )\n\n  vtk_test_cxx_executable(vtkFiltersCoreCxxTests-MPI mpi_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standards for KWSys\nDESCRIPTION: Sets the C++ standard for KWSys based on whether the user specified a standard, defaults, or specific compiler constraints. It defaults to C++11 or optionally C++14 for Clang with MSVC simulation, ensuring compatibility across different environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD \"${KWSYS_CXX_STANDARD}\")\nelif(NOT DEFINED CMAKE_CXX_STANDARD AND NOT DEFINED KWSYS_CXX_STANDARD)\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\"\n     AND CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\"\n     AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL \"GNU\"\n    )\n    set(CMAKE_CXX_STANDARD 14)\n  else()\n    set(CMAKE_CXX_STANDARD 11)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Executables and Dependencies\nDESCRIPTION: Creates and configures three executables (ImageSlicing, ImageBenchmark, ImageBenchmarkDriver) with their VTK library dependencies and module initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ImageProcessing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(ImageSlicing MACOSX_BUNDLE\n  ImageSlicing.cxx)\ntarget_link_libraries(ImageSlicing\n  PRIVATE\n    ${VTK_LIBRARIES})\n\nadd_executable(ImageBenchmark\n  ImageBenchmark.cxx)\ntarget_link_libraries(ImageBenchmark\n  PRIVATE\n    ${VTK_LIBRARIES})\n\nadd_executable(ImageBenchmarkDriver\n  ImageBenchmarkDriver.cxx)\ntarget_link_libraries(ImageBenchmarkDriver\n  PRIVATE\n    ${VTK_LIBRARIES})\n\nvtk_module_autoinit(\n  TARGETS ImageSlicing\n          ImageBenchmark\n          ImageBenchmarkDriver\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic Branch for xdmf2 Updates\nDESCRIPTION: Creates a new branch in the main repository to work on the xdmf2 update.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b update-xdmf2 master\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Output Directories\nDESCRIPTION: Sets up the CMake project requirements, minimum version, and configures output directories for binaries, libraries and archives using GNUInstallDirs.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modules/Wrapping/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\nproject(Wrapping)\n\ninclude(GNUInstallDirs)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Python Site Packages Configuration\nDESCRIPTION: Configures Python site-packages directory paths for both build and install trees. Handles platform-specific path differences between Windows and Unix systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT VTK_PYTHON_SITE_PACKAGES_SUFFIX)\n  if (MSVC)\n    set(VTK_PYTHON_SITE_PACKAGES_SUFFIX \"Lib/site-packages\")\n  else ()\n    set(VTK_PYTHON_SITE_PACKAGES_SUFFIX\n      \"python${vtk_python_version_pair}/site-packages\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Doxygen\nDESCRIPTION: Adds a custom target named `vtkMyDoxygenDoc` to generate the documentation. This target executes a shell script (`doc_makeall.sh`) located in the build directory using BASH.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(vtkMyDoxygenDoc\n    \"${BASH}\"\n    \"${VTKMY_BINARY_DIR}/Utilities/Doxygen/doc_makeall.sh\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: Adds Python test cases to the VTK test suite using vtk_add_test_python command. Includes tests for cell grid hardware picker, rendered area picker, and basic rendering functionality. Some tests are configured with NO_RT (no regression testing) and NO_VALID (no valid image comparison) flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestCellGridHardwarePicker.py,NO_RT,NO_VALID\n  TestCellGridRenderedAreaPicker.py,NO_RT,NO_VALID\n  TestCellGridRenderedAreaPickerWithPolyData.py,NO_RT,NO_VALID\n  TestCellGridRendering.py,NO_RT\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLTF Reader Geometry Tests in CMake\nDESCRIPTION: Sets up tests for the GLTF reader with various geometry inputs including standard, embedded, and GLB formats. Tests handle different data scenarios including missing binary files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGeometry,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/Triangle/Triangle.gltf,simpleTriangle.bin}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGeometryNoBin,TestGLTFReaderGeometryNoBin.cxx DATA{../Data/glTF/Triangle/IncorrectDataNoBinFile.gltf} NO_VALID NO_OUTPUT\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderEmbeddedGeometry,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/Triangle/EmbeddedTriangle.gltf}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestGLTFReaderGLBGeometry,TestGLTFReaderGeometry.cxx DATA{../Data/glTF/Triangle/Triangle.glb}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibXml2 Build Settings\nDESCRIPTION: Configures various build settings for LibXml2, including header files, Python setup, and library dependencies. It also sets up pkg-config files and installation rules for different components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    configure_file(include/win32config.h include/config.h COPYONLY)\nelse()\n    configure_file(config.h.cmake.in include/config.h)\nendif()\nconfigure_file(include/libxml/xmlversion.h.in include/libxml/xmlversion.h)\n\nif(LIBXML2_WITH_PYTHON)\n    set(prefix \"${CMAKE_INSTALL_PREFIX}\")\n    configure_file(python/setup.py.in setup.py @ONLY)\nendif()\n\nset(NON_PC_LIBS \"${THREAD_LIBS} ${ICONV_LIBS} ${LIBM} ${WINSOCK_LIBS} ${CRYPTO_LIBS}\")\nlist(APPEND XML_PC_LIBS \"${NON_PC_LIBS}\")\nlist(APPEND XML_PRIVATE_LIBS \"${NON_PC_LIBS}\")\nlist(REMOVE_DUPLICATES XML_PC_LIBS)\nlist(REMOVE_DUPLICATES XML_PRIVATE_LIBS)\n\nlist(JOIN XML_PC_REQUIRES \" \" XML_PC_REQUIRES)\nlist(JOIN XML_PC_LIBS \" \" XML_PC_LIBS)\nlist(JOIN XML_PRIVATE_LIBS \" \" XML_PRIVATE_LIBS)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Cases to VTK with CMake\nDESCRIPTION: This snippet uses the vtk_add_test_cxx command to register multiple C++ test cases for the vtkTestingCoreCxxTests test suite. The tests included are TestErrorObserver.cxx and TestDataObjectCompare.cxx, both marked as NO_VALID, indicating that they do not have expected output values. This is part of configuring the VTK build system for automated testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkTestingCoreCxxTests tests\n  TestErrorObserver.cxx,NO_VALID\n  TestDataObjectCompare.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK OggTheora Writer Classes\nDESCRIPTION: This CMake snippet sets the classes that are part of the vtkOggTheoraWriter module. The classes variable is used later when defining the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOggTheoraWriter)\n```\n\n----------------------------------------\n\nTITLE: Adding QChartTable and QScalarsToColors Executables\nDESCRIPTION: This snippet sets up two executables, QChartTable and QScalarsToColors, when multiple VTK targets are available. Both executables utilize a variety of VTK modules for advanced data visualization and linking, ensuring they can leverage comprehensive charting features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Charts/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::CommonSystem AND TARGET VTK::GUISupportQt AND TARGET VTK::ViewsContext2D AND TARGET VTK::ViewsQt AND TARGET VTK::RenderingOpenGL2 AND TARGET VTK::RenderingContextOpenGL2)\n  add_executable(QChartTable\n    QChartTable.cxx)\n  target_link_libraries(QChartTable\n    PRIVATE\n      VTK::ChartsCore\n      VTK::CommonSystem\n      VTK::GUISupportQt\n      VTK::RenderingOpenGL2\n      VTK::RenderingContextOpenGL2\n      VTK::ViewsContext2D\n      VTK::ViewsQt)\n\n  add_executable(QScalarsToColors\n    QScalarsToColors.cxx)\n  target_link_libraries(QScalarsToColors\n    PRIVATE\n      VTK::ChartsCore\n      VTK::CommonSystem\n      VTK::GUISupportQt\n      VTK::RenderingOpenGL2\n      VTK::RenderingContextOpenGL2\n      VTK::ViewsContext2D\n      VTK::ViewsQt)\n\n  vtk_module_autoinit(\n    TARGETS QChartTable\n            QScalarsToColors\n    MODULES VTK::ChartsCore\n            VTK::CommonSystem\n            VTK::GUISupportQt\n            VTK::RenderingOpenGL2\n            VTK::RenderingContextOpenGL2\n            VTK::ViewsContext2D\n            VTK::ViewsQt)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor List in Markdown Table\nDESCRIPTION: This code snippet shows how to create a table in Markdown to display a list of project contributors with their avatars, names, and contribution types. It uses HTML table formatting within Markdown.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_47\n\nLANGUAGE: Markdown\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://profiles.sussex.ac.uk/p281168-alex-dewar/publications\"><img src=\"https://avatars.githubusercontent.com/u/23149834?v=4?s=100\" width=\"100px;\" alt=\"Alex Dewar\"/><br /><sub><b>Alex Dewar</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=alexdewar\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrew-hardin\"><img src=\"https://avatars0.githubusercontent.com/u/16496326?v=4?s=100\" width=\"100px;\" alt=\"Andrew Hardin\"/><br /><sub><b>Andrew Hardin</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=andrew-hardin\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andreasxp\"><img src=\"https://avatars.githubusercontent.com/u/28830446?v=4?s=100\" width=\"100px;\" alt=\"Andrey Zhukov\"/><br /><sub><b>Andrey Zhukov</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=andreasxp\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SX91\"><img src=\"https://avatars2.githubusercontent.com/u/754754?v=4?s=100\" width=\"100px;\" alt=\"Anton\"/><br /><sub><b>Anton</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=SX91\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trokhymchuk\"><img src=\"https://avatars.githubusercontent.com/u/66204814?v=4?s=100\" width=\"100px;\" alt=\"Artem Trokhymchuk \"/><br /><sub><b>Artem Trokhymchuk </b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=trokhymchuk\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BenjaminBeichler\"><img src=\"https://avatars.githubusercontent.com/u/1441492?v=4?s=100\" width=\"100px;\" alt=\"Benjamin Beichler\"/><br /><sub><b>Benjamin Beichler</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=BenjaminBeichler\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/calebzulawski\"><img src=\"https://avatars.githubusercontent.com/u/563826?v=4?s=100\" width=\"100px;\" alt=\"Caleb Zulawski\"/><br /><sub><b>Caleb Zulawski</b></sub></a><br /><a href=\"#platform-calebzulawski\" title=\"Packaging/porting to new platform\">📦</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/krico\"><img src=\"https://avatars.githubusercontent.com/u/6952185?v=4?s=100\" width=\"100px;\" alt=\"Christian Asmussen\"/><br /><sub><b>Christian Asmussen</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=krico\" title=\"Documentation\">📖</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=krico\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/cbachhuber/\"><img src=\"https://avatars0.githubusercontent.com/u/27212661?v=4?s=100\" width=\"100px;\" alt=\"Christoph Bachhuber\"/><br /><sub><b>Christoph Bachhuber</b></sub></a><br /><a href=\"#example-cbachhuber\" title=\"Examples\">💡</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=cbachhuber\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfleury2\"><img src=\"https://avatars1.githubusercontent.com/u/4805384?v=4?s=100\" width=\"100px;\" alt=\"D. Fleury\"/><br /><sub><b>D. Fleury</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=dfleury2\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dbarowy\"><img src=\"https://avatars3.githubusercontent.com/u/573142?v=4?s=100\" width=\"100px;\" alt=\"Dan Barowy\"/><br /><sub><b>Dan Barowy</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=dbarowy\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mensinda\"><img src=\"https://avatars3.githubusercontent.com/u/3407462?v=4?s=100\" width=\"100px;\" alt=\"Daniel Mensinger\"/><br /><sub><b>Daniel Mensinger</b></sub></a><br /><a href=\"#platform-mensinda\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DarkWingMcQuack\"><img src=\"https://avatars.githubusercontent.com/u/38857302?v=4?s=100\" width=\"100px;\" alt=\"DarkWingMcQuack\"/><br /><sub><b>DarkWingMcQuack</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=DarkWingMcQuack\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ZeeD26\"><img src=\"https://avatars2.githubusercontent.com/u/2487468?v=4?s=100\" width=\"100px;\" alt=\"Dominik Steinberger\"/><br /><sub><b>Dominik Steinberger</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=ZeeD26\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dvj\"><img src=\"https://avatars2.githubusercontent.com/u/77217?v=4?s=100\" width=\"100px;\" alt=\"Doug Johnston\"/><br /><sub><b>Doug Johnston</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Advj\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=dvj\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://recursiveascent.blogspot.com/\"><img src=\"https://avatars.githubusercontent.com/u/1779595?v=4?s=100\" width=\"100px;\" alt=\"Dylan Baker\"/><br /><sub><b>Dylan Baker</b></sub></a><br /><a href=\"#platform-dcbaker\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/eli-schwartz\"><img src=\"https://avatars.githubusercontent.com/u/6551424?v=4?s=100\" width=\"100px;\" alt=\"Eli Schwartz\"/><br /><sub><b>Eli Schwartz</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=eli-schwartz\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sifferman\"><img src=\"https://avatars.githubusercontent.com/u/43790149?v=4?s=100\" width=\"100px;\" alt=\"Ethan Sifferman\"/><br /><sub><b>Ethan Sifferman</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=sifferman\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/helmesjo\"><img src=\"https://avatars0.githubusercontent.com/u/2501070?v=4?s=100\" width=\"100px;\" alt=\"Fred Helmesjö\"/><br /><sub><b>Fred Helmesjö</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Ahelmesjo\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=helmesjo\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://iscinumpy.gitlab.io\"><img src=\"https://avatars1.githubusercontent.com/u/4616906?v=4?s=100\" width=\"100px;\" alt=\"Henry Schreiner\"/><br /><sub><b>Henry Schreiner</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/issues?q=author%3Ahenryiii\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=henryiii\" title=\"Documentation\">📖</a> <a href=\"https://github.com/CLIUtils/CLI11/commits?author=henryiii\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://izzys.casa\"><img src=\"https://avatars0.githubusercontent.com/u/63051?v=4?s=100\" width=\"100px;\" alt=\"Isabella Muerte\"/><br /><sub><b>Isabella Muerte</b></sub></a><br /><a href=\"#platform-slurps-mad-rips\" title=\"Packaging/porting to new platform\">📦</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://izzys.casa/\"><img src=\"https://avatars.githubusercontent.com/u/63051?v=4?s=100\" width=\"100px;\" alt=\"Izzy Muerte\"/><br /><sub><b>Izzy Muerte</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=bruxisma\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jakoblover\"><img src=\"https://avatars0.githubusercontent.com/u/14160441?v=4?s=100\" width=\"100px;\" alt=\"Jakob Lover\"/><br /><sub><b>Jakob Lover</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=jakoblover\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jgerityneurala\"><img src=\"https://avatars2.githubusercontent.com/u/57360646?v=4?s=100\" width=\"100px;\" alt=\"James Gerity\"/><br /><sub><b>James Gerity</b></sub></a><br /><a href=\"https://github.com/CLIUtils/CLI11/commits?author=jgerityneurala\" title=\"Documentation\">📖</a></td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for VTK scn Module\nDESCRIPTION: Sets up include directories for both public and private headers, distinguishing between build interface and install interface paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_include(VTK::scn\n  PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n  PRIVATE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)\n```\n\n----------------------------------------\n\nTITLE: Library Target and Linking\nDESCRIPTION: This snippet checks a condition to determine if the token library should be compiled as a shared library. It links the required libraries and sets up relevant configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(FALSE) # XXX(kitware): Use VTK module system\n# Note that we REQUIRE the token library to be a shared library.\n# This is because on some platforms (macos), if multiple executable\n# units (i.e., shared libraries) link to the same static token library,\n# then token::Token::getManager() will return pointers to different\n# instances, causing odd behavior and crashes when strings interned\n# by one library are not available to others.\nadd_library(token SHARED ${sources} ${headers})\ntarget_link_libraries(token\n  PUBLIC\n    nlohmann_json\n)\nelse()\n\n  # When building inside VTK and wrapping python, we need to force the token lib to be shared\n  # to ensure there is a single instance of the global symbols.\n  set(token_module_args)\n  if (VTK_WRAP_PYTHON)\n    list(APPEND token_module_args FORCE_SHARED)\n  endif ()\n\n  vtk_module_add_module(VTK::token\n    HEADER_DIRECTORIES\n    ${token_module_args}\n    SOURCES ${sources}\n    HEADERS ${headers}\n    HEADERS_SUBDIR \"token\"\n  )\nvtk_module_link(VTK::token PUBLIC VTK::nlohmannjson)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Resource File with CMake\nDESCRIPTION: This snippet uses CMake's `configure_file` command with the `COPYONLY` option to copy a Qt resource file (`TestQQuickVTK.qrc`) to the build directory.  This resource file likely contains references to other assets used by the application, such as images or QML files.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/TestQQuickVTK.qrc\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/TestQQuickVTK.qrc\"\n  COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test with vtk_add_test_cxx\nDESCRIPTION: This CMake snippet uses the `vtk_add_test_cxx` macro to define a C++ test named `vtkcli11CxxTests`.  The test case `TestIncludeCLI11.cxx` is associated with this test, and flags are set to indicate that the test does not produce data, validate data, or generate output.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkcli11CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeCLI11.cxx)\n```\n\n----------------------------------------\n\nTITLE: Traditional VTK SafeDownCast Usage\nDESCRIPTION: Shows the standard way of downcasting VTK arrays using SafeDownCast method. While functional, this approach can be performance-intensive due to virtual calls and string comparisons.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvoid DoSomeAction(vtkDataArray *dataArray)\n{\n  vtkFloatArray *floatArray = vtkFloatArray::SafeDownCast(dataArray);\n  if (floatArray)\n    {\n    // ... (do work with float array)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Built Project Locally using Python HTTP Server\nDESCRIPTION: This Python command serves the built project files on a local server. It changes the directory to `out/build` and starts a simple HTTP server on port 8000 using Python's `http.server` module, allowing for browser testing of the WebAssembly project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd out/build\npython3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenXR Interactive Tests in CMake for VTK\nDESCRIPTION: Sets up an option to enable interactive OpenXR tests. These tests require an OpenXR runtime and a HMD, and run interactively. The test passes when the user exits the VR environment using the in-VR menu.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_OPENXR_TESTING_ENABLE_INTERACTIVE_TESTS \"Enable OpenXR tests that are interactive\" OFF)\nmark_as_advanced(VTK_OPENXR_TESTING_ENABLE_INTERACTIVE_TESTS)\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonCpp for VTK with CMake\nDESCRIPTION: The CMake script sets up the JsonCpp library as a third-party module for VTK. It handles licensing information, versioning, and whether the library should be built as an internal or external module. If ‘VTK_MODULE_USE_EXTERNAL_vtkjsoncpp’ is set, the script checks for a forwarding header and configures library type detection. Header files are generated and installed accordingly. Dependencies include CMake and the availability of JsonCpp library files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# FIXME: jsoncpp only exports symbols properly on Windows.\nunset(CMAKE_CXX_VISIBILITY_PRESET)\nunset(CMAKE_VISIBILITY_INLINES_HIDDEN)\n\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES           \"vtkjsoncpp/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER \"MIT\"\n    SPDX_COPYRIGHT_TEXT     \"Copyright (c) 2007-2010 Baptiste Lepilleur and The JsonCpp Author\"\n    SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/jsoncpp.git@for/vtk-20241206-1.9.6\"\n    VERSION                 \"1.9.6\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE JsonCpp\n    VERSION 0.7.0\n    TARGETS JsonCpp::JsonCpp\n    STANDARD_INCLUDE_DIRS)\n\nif (VTK_MODULE_USE_EXTERNAL_vtkjsoncpp)\n  if (EXISTS \"${JsonCpp_INCLUDE_DIR}/json/json_forwards.h\")\n    set (JsonCpp_FORWARDING_HEADER_NAME \"json_forwards.h\")\n  else ()\n    set (JsonCpp_FORWARDING_HEADER_NAME \"forwards.h\")\n  endif ()\n  include(vtkDetectLibraryType)\n  vtk_detect_library_shared(vtkjsoncpp JsonCpp::JsonCpp)\nelse ()\n  set(vtkjsoncpp_is_shared \"${BUILD_SHARED_LIBS}\")\nendif ()\n\nset(VTK_JSONCPP_SHARED \"${vtkjsoncpp_is_shared}\")\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_jsoncpp.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_jsoncpp.h\")\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_jsoncpp_fwd.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_jsoncpp_fwd.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_jsoncpp.h\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/vtk_jsoncpp_fwd.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MPI Tests without Data Dependencies\nDESCRIPTION: Defines MPI test group for tests that don't require external data, including various system and directory tests. One test is commented out.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mpi(vtkParallelMPICxxTests-MPI no_data_tests\n  #GenericCommunicator.cxx\n  MPIController.cxx\n  PDirectory.cxx\n  PSystemTools.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring File Generation with CMake\nDESCRIPTION: This snippet uses the `configure_file` command to process a template header file and produce a configuration-specific header. It depends on CMake's configuration stage and takes input from `vtk_ogg.h.in`. It outputs a processed header file `vtk_ogg.h` in the binary directory. This method is essential for setting up configuration-specific files necessary for the correct operation of VTK with third-party libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_ogg.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_ogg.h\")\n```\n\n----------------------------------------\n\nTITLE: Constructing an Immutable Symbol Table in ExprTk (C++)\nDESCRIPTION: Shows how to create an immutable symbol table in ExprTk. Immutable symbol tables prevent modifications to variables within expressions, useful for ensuring data integrity.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nsymbol_table_t immutable_symbol_table\n   (symbol_table_t::symtab_mutability_type::e_immutable);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Computational Geometry Classes\nDESCRIPTION: Defines a list of VTK classes for the CommonComputationalGeometry module, including various parametric surfaces and spline implementations. The classes are added to the module and test mangling is configured.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ComputationalGeometry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBilinearQuadIntersection\n  vtkCardinalSpline\n  vtkKochanekSpline\n  vtkParametricBohemianDome\n  vtkParametricBour\n  vtkParametricBoy\n  vtkParametricCatalanMinimal\n  vtkParametricConicSpiral\n  vtkParametricCrossCap\n  vtkParametricDini\n  vtkParametricEllipsoid\n  vtkParametricEnneper\n  vtkParametricFigure8Klein\n  vtkParametricFunction\n  vtkParametricHenneberg\n  vtkParametricKlein\n  vtkParametricKuen\n  vtkParametricMobius\n  vtkParametricPluckerConoid\n  vtkParametricPseudosphere\n  vtkParametricRandomHills\n  vtkParametricRoman\n  vtkParametricSpline\n  vtkParametricSuperEllipsoid\n  vtkParametricSuperToroid\n  vtkParametricTorus)\n\nvtk_module_add_module(VTK::CommonComputationalGeometry\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::CommonComputationalGeometry)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Test Executables\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` macro to add a C++ test executable. It specifies the test executable name, the source files, and any additional arguments. The `NO_VALID` argument often indicates that no validation image is needed for the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_add_test_cxx(vtkGUISupportQtCxxTests tests\n  NO_VALID\n  TestQtDebugLeaksView.cxx\n  TestQtTableModelAdapter.cxx\n  TestQtTreeModelAdapter.cxx\n  TestQVTKTableModelAdapter.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FFMPEG Video Source Tests with Conditional Compilation\nDESCRIPTION: Conditionally adds a video source test when the VTK_FFMPEG_AVCODEC_SEND_PACKET flag is enabled. This adds TestFFMPEGVideoSource.cxx to the test suite when the required FFMPEG functionality is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_FFMPEG_AVCODEC_SEND_PACKET)\n  vtk_add_test_cxx(vtkIOFFMPEGCxxTests tests\n    TestFFMPEGVideoSource.cxx\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK InfovisBoost Headers\nDESCRIPTION: Defines the header files needed for the VTK InfovisBoost module, specifically including the variant boost serialization header.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Boost/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\\n  vtkVariantBoostSerialization.h)\n```\n\n----------------------------------------\n\nTITLE: Running Fides Tests with CTest\nDESCRIPTION: Command to execute Fides test suite using CTest with verbose output from the build directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuild_fides$ ctest -V\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Parallel Exodus C++ Tests in CMake\nDESCRIPTION: This snippet adds C++ tests for the VTK IO Parallel Exodus module and creates a test executable. It specifies the test source file and sets the NO_VALID option.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelExodus/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOParallelExodusCxxTests tests\n  NO_VALID\n  TestExodusImplicitArrays.cxx\n  )\nvtk_test_cxx_executable(vtkIOParallelExodusCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Merging xdmf2 Updates Using Git Subtree Strategy\nDESCRIPTION: Merges the xdmf2-upstream branch as a subtree into the ThirdParty/xdmf2/vtkxdmf2 directory of the main repository.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit merge -s recursive -X subtree=ThirdParty/xdmf2/vtkxdmf2 \\\n           xdmf2-upstream\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOSS C++ Tests with CMake\nDESCRIPTION: This snippet adds a C++ test for the VTK IOSS module and creates an executable for the tests. It specifies that the test has no data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkiossCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeIOSS.cxx)\nvtk_test_cxx_executable(vtkiossCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Charts Core C++ Test Executable in CMake\nDESCRIPTION: Sets up the test executable for VTK Charts Core C++ tests, disabling floating-point exceptions and specifying rendering factory options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkChartsCoreCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Catalyst Library Destination and RPATH in CMake\nDESCRIPTION: Sets up platform-specific library destination paths for Catalyst in VTK. On Windows, it uses the runtime destination, while on Unix-like systems it configures library destinations with appropriate relative paths and RPATH settings for macOS and Linux.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Catalyst/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  set(catalyst_library_destination\n    \"${_vtk_build_RUNTIME_DESTINATION}/catalyst\")\nelse ()\n  set(catalyst_library_destination\n    \"${_vtk_build_LIBRARY_DESTINATION}/catalyst\")\n  file(RELATIVE_PATH _catalyst_impl_relpath\n    \"/prefix/${catalyst_library_destination}\"\n    \"/prefix/${_vtk_build_LIBRARY_DESTINATION}\")\n  if (APPLE)\n    set(catalyst_rel_rpath\n      \"@loader_path/${_catalyst_impl_relpath}\")\n  else ()\n    set(catalyst_rel_rpath\n      \"$ORIGIN/${_catalyst_impl_relpath}\")\n  endif ()\n\n  list(APPEND CMAKE_INSTALL_RPATH\n    \"${catalyst_rel_rpath}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Cesium 3D Tiles CXX Tests\nDESCRIPTION: Sets up C++ test cases for the VTK Cesium 3D Tiles module. Defines test files for Cesium3DTiles writer and reader functionality, along with B3DM reader testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOCesium3DTilesCxxTests tests\n  TestCesium3DTilesWriter.cxx\n  TestCesium3DTilesReader.cxx\n  TestCesiumB3DMReader.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking out a Git Topic Branch\nDESCRIPTION: Command to checkout a topic branch for revision in Git\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout my-topic\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests\nDESCRIPTION: A series of CMake commands to add Python tests to the VTK project. Each command specifies a Python script to be run as a test, with some tests having additional flags like NO_OUTPUT, NO_VALID, NO_RT, or NO_DATA.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(RectOutline.py)\nvtk_add_test_python(TestCutMaterial.py)\nvtk_add_test_python(TestExtractCTHPart.py)\nvtk_add_test_python(TestExtractCTHPartSolid.py)\nvtk_add_test_python(TestExtrudePiece.py)\nvtk_add_test_python(TestImageStreamer.py)\nvtk_add_test_python(TestIntegrateAttributes.py NO_OUTPUT NO_VALID NO_RT)\nvtk_add_test_python(TestRemoveGhosts.py NO_DATA NO_OUTPUT NO_VALID NO_RT)\nvtk_add_test_python(TestResamplingInterpolator.py)\n```\n\n----------------------------------------\n\nTITLE: Setting HDF5 Library Targets in CMake\nDESCRIPTION: This snippet defines the target names for various HDF5 libraries, setting static and shared versions based on conditional logic. It is intended to maintain consistency in naming conventions across libraries while avoiding certain suffixes that are deprecated.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): Don't use `-static` or `-shared` target suffixes.\nset (HDF5_LIB_TARGET              \"${HDF5_LIB_CORENAME}-static\")\nset (HDF5_TEST_LIB_TARGET         \"${HDF5_TEST_LIB_CORENAME}-static\")\nset (HDF5_CPP_LIB_TARGET          \"${HDF5_CPP_LIB_CORENAME}-static\")\nset (HDF5_HL_LIB_TARGET           \"${HDF5_HL_LIB_CORENAME}-static\")\nset (HDF5_HL_CPP_LIB_TARGET       \"${HDF5_HL_CPP_LIB_CORENAME}-static\")\nset (HDF5_TOOLS_LIB_TARGET        \"${HDF5_TOOLS_LIB_CORENAME}-static\")\nset (HDF5_UTILS_LIB_TARGET        \"${HDF5_UTILS_LIB_CORENAME}-static\")\nset (HDF5_F90_LIB_TARGET          \"${HDF5_F90_LIB_CORENAME}-static\")\nset (HDF5_F90_C_LIB_TARGET        \"${HDF5_F90_C_LIB_CORENAME}-static\")\nset (HDF5_F90_TEST_LIB_TARGET     \"${HDF5_F90_TEST_LIB_CORENAME}-static\")\nset (HDF5_F90_C_TEST_LIB_TARGET   \"${HDF5_F90_C_TEST_LIB_CORENAME}-static\")\nset (HDF5_HL_F90_LIB_TARGET       \"${HDF5_HL_F90_LIB_CORENAME}-static\")\nset (HDF5_HL_F90_C_LIB_TARGET     \"${HDF5_HL_F90_C_LIB_CORENAME}-static\")\nset (HDF5_JAVA_JNI_LIB_TARGET     \"${HDF5_JAVA_JNI_LIB_CORENAME\")\nset (HDF5_JAVA_HDF5_LIB_TARGET    \"${HDF5_JAVA_HDF5_LIB_CORENAME}\")\nset (HDF5_JAVA_TEST_LIB_TARGET    \"${HDF5_JAVA_TEST_LIB_CORENAME}\")\nset (HDF5_LIBSH_TARGET            \"${HDF5_LIB_CORENAME}-shared\")\nset (HDF5_TEST_LIBSH_TARGET       \"${HDF5_TEST_LIB_CORENAME}-shared\")\nset (HDF5_CPP_LIBSH_TARGET        \"${HDF5_CPP_LIB_CORENAME}-shared\")\nset (HDF5_HL_LIBSH_TARGET         \"${HDF5_HL_LIB_CORENAME}-shared\")\nset (HDF5_HL_CPP_LIBSH_TARGET     \"${HDF5_HL_CPP_LIB_CORENAME}-shared\")\nset (HDF5_TOOLS_LIBSH_TARGET      \"${HDF5_TOOLS_LIB_CORENAME}-shared\")\nset (HDF5_UTILS_LIBSH_TARGET      \"${HDF5_UTILS_LIB_CORENAME}-shared\")\nset (HDF5_F90_LIBSH_TARGET        \"${HDF5_F90_LIB_CORENAME}-shared\")\nset (HDF5_F90_C_LIBSH_TARGET      \"${HDF5_F90_C_LIB_CORENAME}-shared\")\nset (HDF5_F90_TEST_LIBSH_TARGET   \"${HDF5_F90_TEST_LIB_CORENAME}-shared\")\nset (HDF5_F90_C_TEST_LIBSH_TARGET \"${HDF5_F90_C_TEST_LIB_CORENAME}-shared\")\nset (HDF5_HL_F90_LIBSH_TARGET     \"${HDF5_HL_F90_LIB_CORENAME}-shared\")\nset (HDF5_HL_F90_C_LIBSH_TARGET   \"${HDF5_HL_F90_C_LIB_CORENAME}-shared\")\nelse ()\nset (HDF5_LIB_TARGET              \"${HDF5_LIB_NAME}\")\nset (HDF5_CPP_LIB_TARGET          \"${HDF5_CPP_LIB_NAME}\")\nset (HDF5_HL_LIB_TARGET           \"${HDF5_HL_LIB_NAME}\")\nset (HDF5_HL_CPP_LIB_TARGET       \"${HDF5_HL_CPP_LIB_NAME}\")\nset (HDF5_TOOLS_LIB_TARGET        \"${HDF5_TOOLS_LIB_NAME}\")\nset (HDF5_LIBSH_TARGET            \"${HDF5_LIB_NAME}\")\nset (HDF5_CPP_LIBSH_TARGET        \"${HDF5_CPP_LIB_NAME}\")\nset (HDF5_HL_LIBSH_TARGET         \"${HDF5_HL_LIB_NAME}\")\nset (HDF5_HL_CPP_LIBSH_TARGET     \"${HDF5_HL_CPP_LIB_NAME}\")\nset (HDF5_TOOLS_LIBSH_TARGET      \"${HDF5_TOOLS_LIB_NAME}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Scale Actor Axes with vtkProperty2D\nDESCRIPTION: Enables customization of axis appearance using vtkProperty2D for more flexible visual styling of legend scale actors\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/legend-scale-actor.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvtkProperty2D* axisProperty = actor->GetAxisProperty();\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Rendering Core CXX Tests\nDESCRIPTION: Adds a comprehensive list of C++ test files for VTK rendering core functionality including various visual tests and features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingCoreCxxTests tests\n  ${extra_opengl2_tests}\n  FrustumClip.cxx\n  Mace.cxx\n  otherCoordinate.cxx,NO_DATA,NO_VALID\n  otherLookupTable.cxx,NO_VALID\n  otherLookupTableWithEnabling.cxx,NO_VALID\n  RenderNonFinite.cxx\n  RGrid.cxx\n  TestActor2D.cxx\n  # ... [truncated for brevity]\n  )\n```\n\n----------------------------------------\n\nTITLE: VTK Module Configuration and Target Setup\nDESCRIPTION: Configures VTK module properties, sets up target information, and handles device source compilation settings for different GPU backends.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkmConfigCore.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmConfigCore.h\"\n  @ONLY)\n\nset(headers\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmConfigCore.h\")\n\nvtk_module_add_module(VTK::AcceleratorsVTKmCore\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  NOWRAP_HEADERS  ${nowrap_headers}\n  NOWRAP_CLASSES  ${nowrap_classes}\n  PRIVATE_HEADERS ${private_headers})\nvtk_module_set_property(VTK::AcceleratorsVTKmCore\n  PROPERTY  JOB_POOL_COMPILE\n  VALUE     vtkm_pool)\n```\n\n----------------------------------------\n\nTITLE: Conditional Appending Interactive Tests in CMake\nDESCRIPTION: This snippet conditionally appends interactive C++ test files to the `OpenVR_tests` list if the `VTK_OPENVR_TESTING_ENABLE_INTERACTIVE_TESTS` option is enabled. These tests involve interactive VR experiences.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"if (VTK_OPENVR_TESTING_ENABLE_INTERACTIVE_TESTS)\n  list (APPEND OpenVR_tests\n    TestOpenVRInteractiveBox.cxx,NO_VALID\n    TestOpenVRInteractiveDragon.cxx,NO_VALID)\nendif ()\"\n```\n\n----------------------------------------\n\nTITLE: Expat Installation Settings\nDESCRIPTION: This snippet manages the installation details for the Expat library, including runtime, library, and archive destinations. It also installs necessary header files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nexpat_install(TARGETS expat EXPORT expat\n                      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n                      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n                      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\nexpat_install(FILES lib/expat.h lib/expat_external.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project and Dependencies\nDESCRIPTION: Sets up CMake project requirements and finds necessary VTK and Qt packages. Includes error handling for missing dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/Qt/TouchGestureViewer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(QtVTKTouchscreenRenderWindows)\n\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    GUISupportQt\n    IOImage\n    ImagingColor\n    ImagingGeneral\n    InteractionImage\n    InteractionStyle\n    InteractionWidgets)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n\nfind_package(Qt${VTK_QT_VERSION} COMPONENTS Widgets)\nif (NOT TARGET Qt${VTK_QT_VERSION}::Widgets)\n  message(\"Skipping example: ${Qt${VTK_QT_VERSION}_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring IOSS Tests in VTK Filters\nDESCRIPTION: Sets up IOSS-specific tests when VTK::IOIOSS target is available. Includes tests for extracting selections using data assembly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_ioss)\nif(TARGET VTK::IOIOSS)\n  # this is done to avoid vtk/vtk#17509\n  set(test_ioss\n    TestExtractSelectionUsingDataAssembly.cxx,NO_VALID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiler Flag Configuration for Old Python\nDESCRIPTION: Sets up compiler flags for older Python versions to handle writable strings warnings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/PythonCore/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (Python3_VERSION VERSION_LESS \"3.7\" AND NOT CMAKE_VERSION VERSION_LESS \"3.19\")\n  include(CheckCompilerFlag)\n  set(old_python_ignore_warning_flag \"-Wno-writable-strings\")\n  check_compiler_flag(CXX \"${old_python_ignore_warning_flag}\" \"vtk_have_compiler_flag-CXX-${old_python_ignore_warning_flag}\")\n  if (vtk_have_compiler_flag-CXX-${old_python_ignore_warning_flag})\n    vtk_module_compile_options(VTK::WrappingPythonCore\n      PRIVATE\n        \"${old_python_ignore_warning_flag}\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA-specific settings for VTK Accelerators VTKm Filters Tests in CMake\nDESCRIPTION: Sets CUDA-specific properties for test files when CUDA is available, including language settings and compiler flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  foreach(src IN LISTS tests)\n    string(REPLACE \",\" \";\" src ${src})\n    list(GET src 0 src)\n\n    set_source_files_properties(${src} PROPERTIES LANGUAGE CUDA)\n  endforeach()\n\n  #the tests aren't scoped as a child directory of vtkAcceleratorsVTKmFilters\n  #so we need to redo this logic\n  vtkm_get_cuda_flags(CMAKE_CUDA_FLAGS)\n\n  # Temporarily suppress \"has address taken but no possible call to it\" warnings,\n  # until we figure out its implications.\n  # We are disabling all warnings as nvlink has no known way to suppress\n  # individual warning types.\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Wrapping in VTK with CMake\nDESCRIPTION: This snippet conditionally includes the `Python` subdirectory if the `VTK_WRAP_PYTHON` option is enabled. This allows Python bindings for the VTK module to be built, but only when the user has explicitly enabled the `VTK_WRAP_PYTHON` option in CMake.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Modeling Module and Test Mangling in CMake\nDESCRIPTION: This snippet uses VTK-specific CMake functions to add the previously defined classes to the VTK::FiltersModeling module and set up test mangling. It utilizes the vtk_module_add_module and vtk_add_test_mangling functions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersModeling\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersModeling)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenVR Test List in CMake\nDESCRIPTION: This snippet defines a CMake variable `OpenVR_tests` containing a list of C++ test files. Some tests are marked with `NO_VALID`, potentially indicating they are expected to fail or are not yet fully validated.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"set(OpenVR_tests\n  TestAvatar.cxx\n  TestOpenVRInstantiation.cxx,NO_VALID)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Function with Type Checking in C++\nDESCRIPTION: Demonstrates the implementation of a generic function 'zoo' with type checking for parameters. The function expects at least five parameters of specific types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_55\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct zoo final : public exprtk::igeneric_function<T>\n{\n   typedef typename exprtk::igeneric_function<T>::parameter_list_t\n                                                  parameter_list_t;\n\n   zoo()\n   : exprtk::igeneric_function<T>(\"SVT*V?\")\n   {}\n\n   inline T operator()(parameter_list_t parameters) override\n   {\n      ...\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding MPI tests with vtk_add_test_mpi\nDESCRIPTION: This snippet conditionally adds MPI-based tests using `vtk_add_test_mpi` if the `VTK::ParallelMPI` target exists. It sets the number of processes to 2 and specifies the source files and testing data to use.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n  set(vtkRenderingParallelCxxTests-MPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkRenderingParallelCxxTests-MPI tests\n    TestSimplePCompositeZPass.cxx,TESTING_DATA\n    TestParallelRendering.cxx,TESTING_DATA\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Common Execution Model C++ Tests Executable\nDESCRIPTION: This CMake command creates an executable for running the vtkCommonExecutionModelCxxTests suite. It uses the previously defined tests to build the executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkCommonExecutionModelCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Including VTK Python Wrapping CMake Module\nDESCRIPTION: This snippet includes the CMake module responsible for wrapping VTK modules with Python. It uses a relative path to include the module file from the CMake directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/vtkModuleWrapPython.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n.. cmake-module:: ../../../../CMake/vtkModuleWrapPython.cmake\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for VTK Filters HyperTree Module in CMake\nDESCRIPTION: Specifies the header files to be included in the VTK Filters HyperTree module. In this case, only one header file is listed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  vtkHyperTreeGridGenerateFieldStrategy.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: Adds multiple Python test files to the VTK testing framework using vtk_add_test_python. Each test is configured with specific flags indicating no data requirements, validation, or output checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Legacy/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestCompositeWriterReader.py,NO_DATA,NO_VALID,NO_OUTPUT\n  TestExtentWriting.py,NO_DATA,NO_VALID,NO_OUTPUT\n  TestFileSeries.py,NO_VALID,NO_OUTPUT\n  TestGraphWriterReader.py,NO_DATA,NO_VALID,NO_OUTPUT\n  TestLegacyCellGridWriterReader.py,NO_VALID,NO_OUTPUT\n  TestLegacyCompositeCellGridWriterReader.py,NO_VALID,NO_OUTPUT\n  TestVTKLegacy.py,NO_DATA,NO_VALID,NO_OUTPUT\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for VPIC Module\nDESCRIPTION: Defines the list of source files (.cxx) to be compiled for the VPIC module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/vtkvpic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  VPICDataSet.cxx\n  VPICDefinition.cxx\n  VPICGlobal.cxx\n  VPICHeader.cxx\n  VPICPart.cxx\n  VPICView.cxx\n  GridExchange.cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Library Target and Dependencies\nDESCRIPTION: Configures the library target with platform-specific dependencies. Handles different requirements for SunOS and Windows platforms, and sets up installation rules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/vtkmetaio/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (METAIO_FOR_VTK)\n  vtk_module_add_module(VTK::metaio\n    SOURCES ${sources}\n    HEADERS ${headers}\n    HEADERS_SUBDIR \"vtkmetaio\")\nelse ()\n  add_library(${METAIO_TARGET}\n    ${sources}\n    ${headers}\n  )\nendif ()\n\nif(CMAKE_SYSTEM MATCHES \"SunOS.*\")\n  target_link_libraries(${METAIO_TARGET} PRIVATE socket nsl)\nendif()\n\nif(WIN32)\n  if(BORLAND)\n    target_link_libraries(${METAIO_TARGET} PRIVATE import32)\n  else()\n    target_link_libraries(${METAIO_TARGET} PRIVATE comctl32 wsock32)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Python Version Properties\nDESCRIPTION: Gets the Python major and minor version properties from global CMake properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/PythonCore/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(vtk_python_version_major GLOBAL\n  PROPERTY _vtk_python_version_major)\nget_property(vtk_python_version_minor GLOBAL\n  PROPERTY _vtk_python_version_minor)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Module Headers with CMake\nDESCRIPTION: Configures header file installation for a specific VTK module subdirectory, specifying the target subdirectory and source directories for header files\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/vtkdiy2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  SUBDIR      \"vtkdiy2\"\n  DIRECTORIES \"include\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows OpenGL Render Window in VTK\nDESCRIPTION: Sets up Windows-specific OpenGL rendering by adding Windows renderer classes and configuring the appropriate factory override when not in headless mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (VTK_USE_WIN32_OPENGL)\n  list(APPEND classes\n    vtkWin32OpenGLRenderWindow\n    vtkWin32OpenGLDXRenderWindow)\n  if (NOT VTK_DEFAULT_RENDER_WINDOW_HEADLESS)\n    vtk_object_factory_declare(\n      BASE vtkRenderWindow\n      OVERRIDE vtkOpenGLRenderWindow)\n    set(has_vtkRenderWindow_override 1)\n  endif ()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Fast Float Tests in CMake\nDESCRIPTION: Configures and creates test executable for VTK fast float functionality. Sets up a C++ test with TestIncludeFastFloat.cxx source file, configured without data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkfast_floatCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeFastFloat.cxx)\nvtk_test_cxx_executable(vtkfast_floatCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory for ANARI Module\nDESCRIPTION: Configures the object factory by generating source and header files with appropriate export macros for the ANARI rendering module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGANARI_EXPORT\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Exodus Test Executable\nDESCRIPTION: Generates the test executable with specific configurations including disabled floating point exceptions and rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOExodusCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Array Test Function in CMake\nDESCRIPTION: CMake function that generates test files for different VTK data array types. It configures source files and test names based on array parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_data_array_test test_name array_header array_valuetype array_type)\n  set(VTK_TESTDATAARRAYAPI_HEADER \"${array_header}\")\n  set(VTK_TESTDATAARRAYAPI_VALUETYPE \"${array_valuetype}\")\n  set(VTK_TESTDATAARRAYAPI_ARRAYTYPE \"${array_type}\")\n  set(VTK_TESTDATAARRAYAPI_TESTNAME \"TestDataArrayAPI_${test_name}\")\n  set(test_source \"${VTK_TESTDATAARRAYAPI_TESTNAME}.cxx\")\n\n  configure_file(TestDataArrayAPI.cxx.in \"${CMAKE_CURRENT_BINARY_DIR}/${test_source}\")\n\n  list(APPEND data_array_tests \"${VTK_TESTDATAARRAYAPI_TESTNAME},${CMAKE_CURRENT_BINARY_DIR}/${test_source}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring DICOMParser Module with VTK\nDESCRIPTION: This section sets up the VTK module for the DICOMParser, including necessary source and header files, and specifies the C++ standard to use (C++11). Visibility presets are unset due to symbol export issues on Windows.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/DICOMParser/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# FIXME: DICOMParser only exports symbols properly on Windows.\nunset(CMAKE_CXX_VISIBILITY_PRESET)\nunset(CMAKE_VISIBILITY_INLINES_HIDDEN)\n\nvtk_module_add_module(VTK::DICOMParser\n  SOURCES ${sources}\n  HEADERS ${headers}\n  EXCLUDE_HEADER_TEST)\nvtk_module_compile_features(VTK::DICOMParser\n  PUBLIC\n    cxx_std_11)\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace for VTK Build\nDESCRIPTION: Sets the namespace for the build, using VTKCompileTools if only compile tools are being built.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ns \"VTK\")\nif (VTK_BUILD_COMPILE_TOOLS_ONLY)\n  set(ns \"VTKCompileTools\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK InteractionImage Module Classes in CMake\nDESCRIPTION: Defines a list of VTK image interaction classes and adds them to the VTK::InteractionImage module. Includes image viewer components and reslice functionality classes. Also adds test mangling configuration for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkImageViewer\n  vtkImageViewer2\n  vtkResliceImageViewer\n  vtkResliceImageViewerMeasurements\n  )\n\nvtk_module_add_module(VTK::InteractionImage\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::InteractionImage)\n```\n\n----------------------------------------\n\nTITLE: Unix-specific Math Library Linking for NetCDF\nDESCRIPTION: Links the NetCDF library with the Unix math library (libm) when building on Unix platforms. This provides mathematical functions required by the NetCDF implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\n  # link against the math library.\n  target_link_libraries(netcdf\n    PRIVATE\n      m)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK IOParallelExodus Classes in CMake\nDESCRIPTION: Sets up a list of classes for the VTK IOParallelExodus module. This includes vtkPExodusIIReader and vtkPExodusIIWriter.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelExodus/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPExodusIIReader\n  vtkPExodusIIWriter)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Parallel Module and Test Mangling in CMake\nDESCRIPTION: Adds the VTK Filters Parallel module to the project, including all specified classes, headers, sources, and private headers. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallel\n  CLASSES ${classes}\n  HEADERS ${headers}\n  SOURCES ${vtk_object_factory_source} ${sources}\n  PRIVATE_HEADERS ${vtk_object_factory_header} ${private_headers}\n  )\nvtk_add_test_mangling(VTK::FiltersParallel)\n```\n\n----------------------------------------\n\nTITLE: Configuring Theora Source Files in CMake\nDESCRIPTION: Defines the source files for the Theora library, organized into encoder, decoder, and shared components sections.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  # encoder\n  lib/analyze.c\n  lib/encapiwrapper.c\n  lib/encfrag.c\n  lib/encinfo.c\n  lib/encode.c\n  lib/enquant.c\n  lib/fdct.c\n  lib/huffenc.c\n  lib/mathops.c\n  lib/mcenc.c\n  lib/rate.c\n  lib/tokenize.c\n\n  # decoder\n  lib/bitpack.c\n  lib/decapiwrapper.c\n  lib/decinfo.c\n  lib/decode.c\n  lib/dequant.c\n  lib/huffdec.c\n  lib/info.c\n\n  # shared\n  lib/apiwrapper.c\n  lib/fragment.c\n  lib/idct.c\n  lib/internal.c\n  lib/quant.c\n  lib/state.c)\n```\n\n----------------------------------------\n\nTITLE: JavaScript File Processing Loop\nDESCRIPTION: Processes each JavaScript file through VTK's string encoding system to embed them in the C++ code.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebGLExporter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (javascript_file IN LISTS javascript_files)\n  vtk_encode_string(\n    INPUT         \"${javascript_file}\"\n    EXPORT_HEADER \"vtkWebGLExporterModule.h\"\n    EXPORT_SYMBOL \"VTKWEBGLEXPORTER_NO_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source)\n  list(APPEND sources\n    ${source})\n  list(APPEND private_headers\n    ${header})\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: This CMake command adds the Cxx subdirectory to the build process. It instructs CMake to look for a CMakeLists.txt file in the Cxx directory and process it as part of the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Including C++ Subdirectory in VTK CMake Build\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that CMake should look in that directory for additional CMakeLists.txt files to process as part of the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties for Serial Execution (Continued)\nDESCRIPTION: This snippet sets the `RUN_SERIAL` property to `ON` for several tests, including those potentially disabled due to issues. Serial execution is enforced because these tests interact with the on-screen buffer.  Commented-out lines suggest tests that might be excluded from serial execution due to ongoing issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"# since these tests grab from on-screen buffer, they must be run serially.\nset_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLStereoWidgetWithDisabledInteractor\n PROPERTIES RUN_SERIAL ON)\n#set_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLNativeWidgetWithDisabledInteractor\n# PROPERTIES RUN_SERIAL ON) #19221\nset_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLWindowWithDisabledInteractor\n PROPERTIES RUN_SERIAL ON)\n#set_tests_properties(VTK::GUISupportQtCxx-TestQVTKRenderWidgetWithDisabledInteractor\n# PROPERTIES RUN_SERIAL ON) #19221\n#set_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLWidgetWithDisabledInteractor\n# PROPERTIES RUN_SERIAL ON) #19221\"\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK\nDESCRIPTION: Adds all configured Python tests to VTK test suite with specific flags for no data, output, or validation requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA\n  NO_OUTPUT\n  NO_VALID\n  ${python_tests}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Test Data and Directory\nDESCRIPTION: Sets up Python test data files and adds Python test directory if Python wrapping is enabled. Includes specific test data files for xyz, oflow, and f formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/multi-bin.xyz\n    Data/multi-bin-oflow.q\n    Data/multi-bin.f)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Sources MPI Tests in CMake\nDESCRIPTION: This snippet sets up MPI-based parallel tests for the VTK Filters Sources module. It defines tests for 2 and 3 MPI processes, and creates a separate test executable for MPI tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n   set(vtkFiltersSourcesCxxTests-MPI_NUMPROCS 2)\n   vtk_add_test_mpi(vtkFiltersSourcesCxxTests-MPI tests_mpi_2\n     TESTING_DATA\n     TestSpatioTemporalHarmonicsSourceDistributed.cxx,\n   )\n   set(vtkFiltersSourcesCxxTests-MPI_NUMPROCS 3)\n   vtk_add_test_mpi(vtkFiltersSourcesCxxTests-MPI tests_mpi_3\n     TESTING_DATA\n     TestRandomHyperTreeGridSourceMPI3,TestRandomHyperTreeGridSourceDistributed.cxx\n     TestHyperTreeGridSourceDistributed.cxx,NO_VALID\n   )\n   set(tests_mpi\n     ${tests_mpi_2}\n     ${tests_mpi_3}\n   )\n  vtk_test_cxx_executable(vtkFiltersSourcesCxxTests-MPI tests_mpi\n    RENDERING_FACTORY\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including VTK CMake Macros and Module Definitions\nDESCRIPTION: CMake include directives that import VTK macro definitions and the main vtkModule.cmake configuration file\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/vtkModule.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: macros.hrst\n.. cmake-module:: ../../../../CMake/vtkModule.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH Settings for CGNS in CMake\nDESCRIPTION: Sets up RPATH settings for shared libraries in the CGNS project. This includes configuration for build and install RPATH, as well as special settings for macOS.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): ParaView handles rpaths.\nif (CGNS_BUILD_SHARED)\n  # use, i.e. don't skip the full RPATH for the build tree\n  set(CMAKE_SKIP_BUILD_RPATH  FALSE)\n\n  # when building, don't use the install RPATH already\n  # (but later on when installing)\n  set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\n\n  # the RPATH to be used when installing\n  set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}; ${CMAKE_INSTALL_PREFIX}/lib\")\n\n  # add the automatically determined parts of the RPATH\n  # which point to directories outside the build tree to the install RPATH\n  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n  if(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    set(CMAKE_MACOSX_RPATH TRUE)\n  endif()\nelse()\n  set(CMAKE_SKIP_RPATH TRUE)\nendif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Java-specific Build Settings for VTK in CMake\nDESCRIPTION: Sets up various Java-specific build settings for VTK, including javac memory allocation on Mac, VTK JAR path, and Java library directories for linking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# javac runs out memory on Mac so increase heapsize\nif (APPLE)\n  set(JAVAC_OPTIONS -J-Xmx512m)\nendif ()\n\nif (NOT VTK_JAR_PATH)\n  set(VTK_JAR_PATH \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\nendif ()\n\nif (JAVA_AWT_LIBRARY)\n  foreach (__java_library IN LISTS JAVA_AWT_LIBRARY)\n    get_filename_component(JAVA_LIB_DIR ${__java_library} PATH)\n    if (EXISTS ${JAVA_LIB_DIR}/xawt)\n      link_directories(${JAVA_LIB_DIR}/xawt)\n    endif ()\n    if (EXISTS ${JAVA_LIB_DIR}/client)\n      link_directories(${JAVA_LIB_DIR}/client)\n    endif ()\n    if (EXISTS ${JAVA_LIB_DIR}/server)\n      link_directories(${JAVA_LIB_DIR}/server)\n    endif ()\n  endforeach ()\nendif ()\n\nif(WIN32)\n  set(SEPARATOR \"\\\\;\")\nelse()\n  set(SEPARATOR \":\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File\nDESCRIPTION: This snippet configures the output header file 'vtk_nlohmannjson.h' from the input file 'vtk_nlohmannjson.h.in'. The CMake command 'configure_file' is used to create the header file in the current binary directory, allowing for proper configuration of header dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_nlohmannjson.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_nlohmannjson.h\")\n```\n\n----------------------------------------\n\nTITLE: Initializing VTK Modules in CMake\nDESCRIPTION: This snippet handles automatic initialization of VTK modules for the target 'MultiCone', ensuring all VTK dependencies are correctly set up for the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS  MultiCone\n  MODULES  ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Wrap VTK modules with Python\nDESCRIPTION: This snippet uses the `vtk_module_wrap_python` macro to generate Python wrappers for the VTK modules. It specifies the modules to wrap, the installation export, the Python package name, the CMake destination, and whether to build a static library.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  vtk_module_wrap_python(\n    MODULES             ${my_modules}\n    INSTALL_EXPORT      VTKMY\n    PYTHON_PACKAGE      \"vtkmy\"\n    CMAKE_DESTINATION   \"${my_config_dir}\"\n    BUILD_STATIC        OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SAX Interface Implementation in C++\nDESCRIPTION: Defines the SAX-like interface functions for parsing JSON including handlers for different data types and parse events. Includes methods for handling null values, booleans, numbers, strings, arrays, objects, and error conditions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nbool null();\n\nbool boolean(bool val);\n\nbool number_integer(number_integer_t val);\nbool number_unsigned(number_unsigned_t val);\n\nbool number_float(number_float_t val, const string_t& s);\n\nbool string(string_t& val);\nbool binary(binary_t& val);\n\nbool start_object(std::size_t elements);\nbool end_object();\nbool start_array(std::size_t elements);\nbool end_array();\nbool key(string_t& val);\n\nbool parse_error(std::size_t position, const std::string& last_token, const detail::exception& ex);\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Subdirectory Inclusion\nDESCRIPTION: This snippet conditionally includes the `Cxx` subdirectory if `vtk_testing_cxx_disabled` is not set. This enables C++-based tests within the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Archive CXX Test Executable in CMake\nDESCRIPTION: Sets up the test executable for VTK Common Archive C++ tests with rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkCommonArchiveCxxTests tests\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for HDF5 Library Documentation Generation with CMake\nDESCRIPTION: This snippet creates a custom target named 'hdf5lib_doc' that uses Doxygen to generate API documentation for the HDF5 library. It specifies dependencies, working directory, and includes a descriptive comment.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target (hdf5lib_doc ALL\n        COMMAND ${DOXYGEN_EXECUTABLE} ${HDF5_BINARY_DIR}/Doxyfile\n        DEPENDS ${HDF5_GENERATED_SOURCE_DIR}/H5Tinit.c ${HDF5_SRC_BINARY_DIR}/H5build_settings.c\n        WORKING_DIRECTORY ${HDF5_SRC_DIR}\n        COMMENT \"Generating HDF5 library Source API documentation with Doxygen\"\n        VERBATIM )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test Scripts for VTK\nDESCRIPTION: This snippet invokes the vtk_add_test_python function to add several Python test scripts to the VTK testing framework. It includes various scripts that likely test different functionalities of VTK. No specific dependencies are mentioned, but it assumes the existence of the vtk_add_test_python function in the context of a CMake file for compiling tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Texture/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvtk_add_test_python(\n  AutomaticPlaneGeneration.py\n  cylMap.py\n  socbal.py\n  textureThreshold.py\n  triangularTCoords.py\n  TestMergePointsWithTCoords.py\n  TestMergeUGridPointsWithTCoords.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExprTk Header Files\nDESCRIPTION: Configures and installs the ExprTk header files by copying the template header to the binary directory and installing it in the appropriate location.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_exprtk.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_exprtk.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_exprtk.h\")\n```\n\n----------------------------------------\n\nTITLE: Java Source Files Setup\nDESCRIPTION: Defines the list of Java source files to be compiled and sets up copy commands to move them to the build directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(java_sources\n  vtk/CellType\n  vtk/vtkJavaGarbageCollector\n  vtk/vtkJavaMemoryManager\n  vtk/vtkJavaMemoryManagerImpl\n  vtk/vtkReferenceInformation)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Function with Parameter Type Checking in C++ with ExprTk\nDESCRIPTION: Demonstrates how to create a generic function 'moo' with compile-time parameter type checking using the igeneric_function interface in ExprTk. The function expects a specific sequence of parameter types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_53\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct moo final : public exprtk::igeneric_function<T>\n{\n   typedef typename exprtk::igeneric_function<T>::parameter_list_t\n                                                  parameter_list_t;\n\n   moo()\n   : exprtk::igeneric_function<T>(\"SVTT\")\n   {}\n\n   inline T operator()(parameter_list_t parameters) override\n   {\n      ...\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Widgets Library\nDESCRIPTION: This snippet links the `Qt${vtk_qt_major_version}::Widgets` library to the `vtkGUISupportQtCxxTests` target. This ensures that the test executable has access to Qt's widgets functionality during runtime.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(vtkGUISupportQtCxxTests\n  PRIVATE\n    \\\"Qt${vtk_qt_major_version}::Widgets\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Setting CUDA-specific Properties for Test Executable\nDESCRIPTION: Sets CUDA-specific properties for the test executable when CUDA is enabled. Disables CUDA architectures specification and enables position-independent code since the main library is built as a static library with PIC enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  # When cuda is enabled VTK::AcceleratorsVTKmDataModel is built statically but with fpic\n  # enabled so the tests are also built with fpic enabled\n  set_target_properties(vtkAcceleratorsVTKmDataModelCxxTests PROPERTIES\n    CUDA_ARCHITECTURES OFF\n    POSITION_INDEPENDENT_CODE ON\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SEP Reader Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK SEP reader implementation without providing specific input data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestSEPReader.cxx,NO_OUTPUT)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK C++ Test Executable\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` macro to create a test executable named `vtkGUISupportQtCxxTests`. It lists the source files needed to build the executable. This is different from vtk_add_test_cxx in that it first creates an executable which then is used by add_test().\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_test_cxx_executable(vtkGUISupportQtCxxTests tests\n  QTestApp.cxx\n  QVTKTableModelAdapterTestClass.cxx\n  TestQtCommon.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Views Qt C++ Tests with CMake\nDESCRIPTION: This snippet adds C++ tests for the VTK Views Qt module using CMake commands. It specifies the test file and sets options for no validation and no data. It then creates an executable for running these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkViewsQtCxxTests tests\n  NO_VALID NO_DATA\n  TestVtkQtTableView.cxx\n  )\n\nvtk_test_cxx_executable(vtkViewsQtCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Python Tests\nDESCRIPTION: Defines a list of Python test files that will be executed as part of the VTK testing suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(python_tests\n  TestAlgorithmNumberProtocol.py\n  TestConstructorKwargs.py\n  TestChar.py\n  TestErrorObserver.py\n  TestPickleSupport.py\n  TestProperty.py\n  TestUpdateAndCall.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configure CMake build options for libogg\nDESCRIPTION: Specifies build options such as shared library builds and framework bundles for macOS within the CMake configuration. This helps tailor the build process for different target environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\noption(BUILD_SHARED_LIBS \"Build shared library\" OFF)\nif(APPLE)\n    option(BUILD_FRAMEWORK \"Build Framework bundle for OSX\" OFF)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Infovis C++ Tests\nDESCRIPTION: Configures a test suite for VTK's IO Infovis module with multiple test files for different readers and writers. Sets up test execution without validation checks using the NO_VALID flag.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Infovis/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOInfovisCxxTests tests\n  NO_VALID\n  TestBiomTableReader.cxx\n  TestDIMACSGraphReader.cxx\n  TestDataObjectIO.cxx\n  TestDelimitedTextReaderWithBOM.cxx\n  TestISIReader.cxx\n  TestFixedWidthTextReader.cxx\n  TestNewickTreeReader.cxx\n  TestNewickTreeWriter.cxx\n  TestMultiNewickTreeReader.cxx\n  TestPhyloXMLTreeReadWrite.cxx\n  TestRISReader.cxx\n  TestTulipReaderProperties.cxx\n  TestDelimitedTextReader.cxx\n  TestTemporalDelimitedTextReader.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: VTK Module Auto-initialization\nDESCRIPTION: Automatically initializes the VTK modules used by the target. Simplifies the initialization process for VTK modules required by the application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_autoinit(\\n  TARGETS  WrappedAsyncClipper\\n  MODULES  ${VTK_LIBRARIES}\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with Multiple Scripts\nDESCRIPTION: This snippet configures a set of VTK Python tests using the vtk_add_test_python function. It includes a large number of test scripts, some with NO_VALID or NO_RT flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  ImageActor.py\n  ImageActorStressed.py\n  NoLightGeneration.py\n  PolyDataMapperAllPolygons.py\n  PolyDataMapperAllWireframe.py\n  ScalarBar.py\n  TestCameraInterpolator.py\n  TestMapperLUT.py,NO_VALID\n  TestOnePoint.py\n  TestParallelCoordinates.py\n  TestRotate.py\n  TestTransformInterpolator.py\n  TestWorldVsPhysicalActors.py\n  TransformConcatenation.py\n  TransformCoverage.py\n  TransformImageData.py\n  TransformPolyData.py\n  assembly.py\n  cameraWarpedCone.py\n  cowHair.py\n  cowHair2.py\n  distanceToCamera.py\n  pickCells.py\n  compositePolyDataMapperBounds.py,NO_RT\n  pickImageData.py,NO_RT\n  propAssembly.py\n  rendererSource.py\n  rotations.py\n  stereoDresdenMace.py\n  PickerWithLocator.py\n  SurfacePickerWithTexture.py\n  TestLeaderActor2D.py\n  TestOpacity2.py\n  TestOpacityVectors.py\n  TestTransformCoordinateSystems.py\n  TestWindowToImageTransparency.py\n  TexturedSphere.py\n  cells.py\n  pickCompositeData.py,NO_RT\n  pickCompositeData2.py,NO_RT\n  ${glsl_tests}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK IOCore Headers\nDESCRIPTION: Defines the header files to be included in the VTK IOCore module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  vtkUpdateCellsV8toV9.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Path and Files\nDESCRIPTION: Sets up CMake module path and configures various file lists including private headers, nowrap classes and headers for the VTK Accelerators module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(INSERT CMAKE_MODULE_PATH 0\n  \"${VTK_SOURCE_DIR}/ThirdParty/vtkm/vtkvtkm/vtk-m/CMake\")\n\nset(private_headers\n  vtkmlib/DataArrayConverters.hxx\n  vtkmlib/Portals.hxx\n  vtkmlib/PortalTraits.h)\n\nset(nowrap_classes\n  vtkmDataArray\n  vtkmlib/DataArrayConverters\n  vtkmlib/DataSetUtils\n  vtkmlib/Portals\n  vtkmlib/vtkmInitializer)\n\nset(nowrap_headers\n  vtkmlib/vtkmDataArray.hxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Octree Module in CMake\nDESCRIPTION: This snippet sets up the VTK Octree module by defining template classes, headers, and module properties. It uses CMake commands to configure the module as header-only and excludes it from header testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/octree/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(template_classes\n  octree/octree\n  octree/octree_cursor\n  octree/octree_iterator\n  octree/octree_node\n  octree/octree_path)\n\nset(headers\n  octree/octree)\n\nvtk_module_add_module(VTK::octree\n  TEMPLATE_CLASSES ${template_classes}\n  HEADERS ${headers}\n  HEADER_DIRECTORIES\n  HEADER_ONLY\n  EXCLUDE_HEADER_TEST)\n```\n\n----------------------------------------\n\nTITLE: Finding MFC Package with CMake\nDESCRIPTION: This snippet attempts to find the MFC package required by the VTK project using CMake's `find_package` command. It raises a fatal error if MFC isn't found, indicating that it should be installed via the Microsoft Visual Studio Installer. No specific dependencies apart from CMake and MFC are needed.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(MFC)\nif (NOT MFC_FOUND)\n  message(FATAL_ERROR \"Could not find MFC libraries.\"\n    \" Please install them from the Microsoft Visual Studio Installer.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Calculating Partition Offset for UnstructuredGrid and PolyData in HDF5\nDESCRIPTION: Formula for computing the offset where data for a specific partition is stored in the HDF5 file for UnstructuredGrid and PolyData formats. This is used to determine the starting position for reading data for each MPI rank.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nO(i) = S(0) + ... + S(i-1), i > 1 with O(0) = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Dependencies for XDMF2\nDESCRIPTION: Sets up XML library dependencies for XDMF2, with conditional paths based on whether it's being built within VTK or standalone. For VTK integration, it directly uses VTK-provided libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles linking.\n#hard dependencies\n#XML\nif (XDMF_BUILT_INVTK)\n  set(XDMF_LIBXML2_LIBRARIES ${vtklibxml2_LIBRARIES})\n  set(XDMF_LIBXML2_INCLUDE_DIRS ${vtklibxml2_INCLUDE_DIRS})\nelse()\n  find_package(LibXml2 REQUIRED)\n  set(XDMF_LIBXML2_LIBRARIES ${LIBXML2_LIBRARIES})\n  set(XDMF_LIBXML2_INCLUDE_DIRS ${LIBXML2_INCLUDE_DIR})\nendif()\n#?\nif(NOT BUILD_SHARED_LIBS)\n  add_definitions(-DLIBXML_STATIC)\nendif()\nelse ()\nset(HDF5_C_LIBRARIES VTK::hdf5)\nset(LIBXML2_LIBRARIES VTK::libxml2)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Medical Example Executables\nDESCRIPTION: Creates and links medical visualization example executables. Sets up multiple Medical examples and generates models from labels.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Medical/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(Medical1 MACOSX_BUNDLE Medical1.cxx)\nadd_executable(Medical2 MACOSX_BUNDLE Medical2.cxx)\nadd_executable(Medical3 MACOSX_BUNDLE Medical3.cxx)\nadd_executable(Medical4 MACOSX_BUNDLE Medical4.cxx)\n\ntarget_link_libraries(Medical1 PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(Medical2 PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(Medical3 PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(Medical4 PRIVATE ${VTK_LIBRARIES})\n\nadd_executable(GenerateModelsFromLabels MACOSX_BUNDLE GenerateModelsFromLabels.cxx)\nadd_executable(GenerateCubesFromLabels MACOSX_BUNDLE  GenerateCubesFromLabels.cxx)\ntarget_link_libraries(GenerateModelsFromLabels PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(GenerateCubesFromLabels PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Adding VTK JsonCpp Module\nDESCRIPTION: Adds the VTK JsonCpp module to the project, specifying sources, headers, and subdirectories. It also sets up large file support if required.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/vtkjsoncpp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::jsoncpp\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkjsoncpp\")\nif (VTK_REQUIRE_LARGE_FILE_SUPPORT)\n  target_compile_definitions(jsoncpp\n    PRIVATE\n      _LARGEFILE_SOURCE\n      _LARGEFILE64_SOURCE\n      _LARGE_FILES\n      _FILE_OFFSET_BITS=64)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Major Error Definitions\nDESCRIPTION: Defines the major error categories in HDF5. Each entry specifies an error code and its description. These represent the highest level error classifications in the library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/H5err.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMAJOR, H5E_ARGS, Invalid arguments to routine\nMAJOR, H5E_RESOURCE, Resource unavailable\nMAJOR, H5E_INTERNAL, Internal error (too specific to document in detail)\n# ... additional major errors\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Engys IO Module C++ Tests in CMake\nDESCRIPTION: This snippet configures C++ tests for the VTK IO Engys module. It defines a test group named 'vtkIOEngysCxxTests' with a single test file 'TestBTSReader.cxx' and specifies that no visual validation is needed with the NO_VALID flag.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Engys/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOEngysCxxTests tests\n        NO_VALID\n        TestBTSReader.cxx\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK BMP reader using a masonry image sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestBMPReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/masonry.bmp}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding Custom Build Targets\nDESCRIPTION: This snippet configures the Doxygen script and related files, then adds the custom build target 'DoxygenDoc' for generating documentation. It ensures that necessary configurations are included and operated by CMake. It checks whether documentation should be installed and manages installation paths and components accordingly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${VTK_SOURCE_DIR}/Utilities/Doxygen/doxyfile.in\n  ${VTK_BINARY_DIR}/Utilities/Doxygen/doxyfile)\n\nconfigure_file(\n  ${VTK_SOURCE_DIR}/Utilities/Doxygen/doc_makeall.cmake.in\n  ${VTK_BINARY_DIR}/Utilities/Doxygen/doc_makeall.cmake\n  @ONLY)\n\nadd_custom_target(DoxygenDoc\n  ${CMAKE_COMMAND}\n  -P ${VTK_BINARY_DIR}/Utilities/Doxygen/doc_makeall.cmake\n  DEPENDS ${VTK_BINARY_DIR}/Utilities/Doxygen/doc_makeall.cmake)\n\nif(NOT VTK_INSTALL_NO_DOCUMENTATION)\n  macro(__vtk_install_documentation_files glob)\n    file(GLOB __files \"${CMAKE_CURRENT_SOURCE_DIR}/${glob}\")\n    install(FILES ${__files}\n      DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/doc/vtk${vtk_version_suffix}/doxygen\"\n      COMPONENT doxygen)\n  endmacro()\n  __vtk_install_documentation_files(\"*.css\")\n  __vtk_install_documentation_files(\"*.gif\")\n  __vtk_install_documentation_files(\"*.html\")\n  __vtk_install_documentation_files(\"*.pl\")\n  __vtk_install_documentation_files(\"*.stop\")\n  install(FILES doc_readme.txt\n    DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/doc/vtk${vtk_version_suffix}/doxygen\"\n    COMPONENT doxygen)\n  install(DIRECTORY ${VTK_BINARY_DIR}/Utilities/Doxygen/doc/html\n    DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/doc/vtk${vtk_version_suffix}/doxygen\"\n    COMPONENT doxygen)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOPLY Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK IOPLY module using the previously defined classes and sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOPLY\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOPLY)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that C++ source code for the VTK project is located in this directory and should be compiled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Qt/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Source Directory\nDESCRIPTION: Determines the VTK source directory if it's not already defined. It navigates up three directories from the current module's source directory to infer the VTK source location and stores it in the `VTK_SOURCE_DIR` variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED VTK_SOURCE_DIR)\n  # go up three directories from vtkMy source directory\n  get_filename_component(_tmp \"${VTKMY_SOURCE_DIR}\" DIRECTORY)\n  get_filename_component(_tmp \"${_tmp}\" DIRECTORY)\n  get_filename_component(_tmp \"${_tmp}\" DIRECTORY)\n  set(VTK_SOURCE_DIR \"${_tmp}\" CACHE PATH \"VTK Source Directory\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Template for VTK Verdict Module in CMake\nDESCRIPTION: Uses the configure_file command to generate verdict_config.h from a template, performing variable substitution using the @ONLY parameter.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/vtkverdict/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/verdict_config.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/verdict_config.h\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring CDash Third-Party Warnings Option\nDESCRIPTION: Provides an option to suppress warnings from third-party libraries on CDash, dependent on build testing configuration\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_dependent_option(VTK_ENABLE_CDASH_THIRD_PARTY_WARNINGS\n  \"Suppress warnings from third-party libraries from showing on CDash\" OFF\n  \"VTK_BUILD_TESTING\" OFF)\nmark_as_advanced(VTK_ENABLE_CDASH_THIRD_PARTY_WARNINGS)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests for IOSS\nDESCRIPTION: This CMake code snippet uses the `vtk_add_test_cxx` macro to add a series of C++ tests for the IOIOSS module. Each test file (e.g., `TestIOSSApplyDisplacementsCGNS.cxx`) is listed along with an optional flag (e.g., `NO_VALID`), which likely indicates whether the test requires a valid baseline for comparison.  The tests cover various aspects of IOSS functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOIOSSCxxTests tests\n  TestIOSSApplyDisplacementsCGNS.cxx\n  TestIOSSAssemblies.cxx,NO_VALID\n  TestIOSSAttributes.cxx,NO_VALID\n  TestIOSSCGNS.cxx\n  TestIOSSExodus2DVector.cxx,NO_VALID\n  TestIOSSExodus.cxx,NO_VALID\n  TestIOSSExodusMergeEntityBlocks.cxx,NO_VALID\n  TestIOSSExodusParallelWriter.cxx\n  TestIOSSExodusRestarts.cxx,NO_VALID\n  TestIOSSExodusSetArrays.cxx\n  TestIOSSExodusWriterCrinkleClip.cxx\n  TestIOSSExodusWriterClip.cxx\n  TestIOSSExodusWriter.cxx\n  TestIOSSFilePatternMatching.cxx,NO_VALID\n  TestIOSSNoElementBlocks.cxx,NO_VALID\n  TestIOSSReadAllFilesToDetermineStructure.cxx,NO_VALID\n  TestIOSSTri6.cxx\n  TestIOSSUnsupported.cxx,NO_VALID\n  TestIOSSWedge21.cxx\n  TestIOSSGhostArray.cxx,NO_VALID\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Module in CMake\nDESCRIPTION: This snippet configures the CLI11 third-party module for VTK. It sets internal parameters such as license information, version, and download location. It is necessary for integrating external libraries and ensuring compliance with licenses.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkcli11/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-3-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2017-2019 University of Cincinnati, developed by Henry Schreiner under NSF AWARD 1414736\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/cli11.git@for/vtk-20241208-2.4.2\"\n    VERSION\n      \"2.4.2\"\n    HEADER_ONLY\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE CLI11\n    TARGETS CLI11::CLI11\n    STANDARD_INCLUDE_DIRS)\n\n```\n\n----------------------------------------\n\nTITLE: VTK Common Core CXX Tests Configuration\nDESCRIPTION: Configuration of the main test suite for VTK Common Core, including test executable setup and comprehensive list of test files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonCoreCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  ExampleDataArrayRangeAPI.cxx\n  ExampleDataArrayRangeDispatch.cxx\n  UnitTestMath.cxx\n  TestAbstractArraySize.cxx\n  TestArrayAPI.cxx\n  # Additional test files...\n  ${data_array_tests}\n  ${scale_soa_test})\n```\n\n----------------------------------------\n\nTITLE: Adding FreeType as a VTK Module\nDESCRIPTION: Adds the FreeType library as a VTK module and configures its compile definitions and include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::freetype\n  SOURCES ${sources})\ntarget_compile_definitions(freetype\n  PRIVATE\n    FT2_BUILD_LIBRARY)\ntarget_include_directories(freetype\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkfreetype/include>\")\nif (UNIX)\n  target_include_directories(freetype\n    PUBLIC\n      \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding Qt Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Qt library with the specified major version and the Widgets component.  It's essential for linking VTK GUI components that depend on Qt.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(\\\"Qt${vtk_qt_major_version}\\\" COMPONENTS Widgets REQUIRED)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for vtkSerializationManager\nDESCRIPTION: This snippet specifies the creation of a test executable for the vtkSerializationManager tests. The vtk_test_cxx_executable function is employed to manage the test target settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkSerializationManagerCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Properties to Run Sequentially\nDESCRIPTION: This snippet modifies the properties of the configured tests to ensure they run in a serial manner, which is crucial to prevent failures that may occur due to parallel execution on CI systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Run these serial to avoid intermittent test failures on machines\n# that do parallel testing\nforeach(test IN LISTS tests)\n  string(REPLACE \".cxx\" \"\" test \"${test}\")\n  set_tests_properties(VTK::IOSQLCxx-${test}\n    PROPERTIES\n      RUN_SERIAL 1)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Copying HTML File to Build Directory - CMake\nDESCRIPTION: This section adds a custom command to copy an 'index.html' file to the build directory after the Cone target is built. This is useful for integrating web assets with the application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  TARGET Cone\n  POST_BUILD\n  COMMAND\n    ${CMAKE_COMMAND} -E copy_if_different\n      \"${CMAKE_CURRENT_SOURCE_DIR}/index.html\"\n      $<TARGET_FILE_DIR:Cone>\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic and Static Library Configuration\nDESCRIPTION: Conditionally sets library build type based on BUILD_SHARED_LIBS configuration option\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_SHARED_LIBS)\n  set(JPEG_SHARED_LIBS 1)\nelse ()\n  set(JPEG_SHARED_LIBS 0)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: CMake directive to include the Cxx subdirectory in the VTK build system. This ensures that C++ source files in the Cxx directory are compiled as part of the VTK build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportPDF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Subdirectory in VTK Module\nDESCRIPTION: This command adds the Cxx subdirectory to the build system, where C++ tests for the CGNS reader functionality are located.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CGNS/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with recent CMake features\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickCone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Arguments for VTK Filters General Tests in CMake\nDESCRIPTION: Sets command-line arguments for specific VTK filter tests. These arguments define expected values (-E flag) for test comparison.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TestDensifyPolyData_ARGS -E 15)\nset(TestDataSetGradient_ARGS -E 25)\nset(TestDataSetGradientPrecompute_ARGS -E 25)\n```\n\n----------------------------------------\n\nTITLE: Setting and Using VTK Classes List in CMake\nDESCRIPTION: Initializes a list named 'classes' with various VTK class definitions related to parallel statistics and then registers this list with the VTK module 'FiltersParallelStatistics' using 'vtk_module_add_module'. Finally, it triggers tests for name mangling with 'vtk_add_test_mangling'. There are no specific external dependencies other than CMake and VTK's build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelStatistics/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPAutoCorrelativeStatistics\n  vtkPBivariateLinearTableThreshold\n  vtkPComputeQuantiles\n  vtkPComputeQuartiles\n  vtkPContingencyStatistics\n  vtkPCorrelativeStatistics\n  vtkPDescriptiveStatistics\n  vtkPKMeansStatistics\n  vtkPMultiCorrelativeStatistics\n  vtkPOrderStatistics\n  vtkPPCAStatistics)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallelStatistics\n  CLASSES ${classes})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersParallelStatistics)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CityGML Module in CMake\nDESCRIPTION: Defines and configures the VTK::IOCityGML module with the vtkCityGMLReader class. The configuration sets up the module classes and adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CityGML/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkCityGMLReader)\nvtk_module_add_module(VTK::IOCityGML\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOCityGML)\n```\n\n----------------------------------------\n\nTITLE: Detecting Expat Library Type in VTK\nDESCRIPTION: Determines whether the Expat library is shared or static and configures the XML_STATIC preprocessor definition accordingly, which affects how Expat's API is exported.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkDetectLibraryType)\nvtk_detect_library_shared(vtkexpat EXPAT::EXPAT)\n\nif (vtkexpat_is_shared)\n  set(XML_STATIC 0)\nelse ()\n  set(XML_STATIC 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Variable Definition in ExprTk\nDESCRIPTION: Examples of defining variables in ExprTk with different initialization methods.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_43\n\nLANGUAGE: ExprTk\nCODE:\n```\n// Initialise x to zero\nvar x;\n\n// Initialise y to three\nvar y := 3;\n\n// Initialise z to the expression\nvar z := if (max(1, x + y) > 2, w, v);\n\n// Initialise const literal n\nvar n := 12 / 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Classes for VTK Module - CMake\nDESCRIPTION: This snippet defines a list of classes to be included in a VTK module. The variable 'classes' is initialized with 'vtkVPICReader', which will be used in the module definition later. This setup is essential for organizing and compiling the classes relevant to the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/VPIC/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkVPICReader)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK FFMPEG Classes\nDESCRIPTION: Defines the VTK classes that will be included in the FFMPEG module and sets specific compiler definitions for the FFMPEG writer.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkFFMPEGWriter)\n\nset_source_files_properties(vtkFFMPEGWriter.cxx\n  PROPERTIES\n    COMPILE_DEFINITIONS __STDC_CONSTANT_MACROS)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Boost Graph Classes\nDESCRIPTION: Defines a list of VTK classes that implement various Boost graph algorithms, including clustering, centrality, and search algorithms.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/BoostGraphAlgorithms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBoostBetweennessClustering\n  vtkBoostBiconnectedComponents\n  vtkBoostBrandesCentrality\n  vtkBoostBreadthFirstSearch\n  vtkBoostBreadthFirstSearchTree\n  vtkBoostConnectedComponents\n  vtkBoostDividedEdgeBundling\n  vtkBoostExtractLargestComponent\n  vtkBoostKruskalMinimumSpanningTree\n  vtkBoostLogWeighting\n  vtkBoostPrimMinimumSpanningTree\n  vtkBoostRandomSparseArraySource\n  vtkBoostSplitTableField)\n```\n\n----------------------------------------\n\nTITLE: Cleaning up the temporary directory\nDESCRIPTION: These commands clean up the temporary directory (`xdmf2vtk-tmp`) after the changes have been pushed.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"cd ..\nrm -rf xdmf2vtk-tmp\"\n```\n\n----------------------------------------\n\nTITLE: Fixing MPI Link Flags for macOS\nDESCRIPTION: Handles a specific macOS compatibility issue by removing the -Wl,-flat_namespace flag from MPI link options when present, as it conflicts with @rpath usage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MPI/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE AND TARGET MPI::MPI_C)\n  # On macOS, MPI might have the `-Wl,-flat_namespace` option in it (mpich has\n  # been observed). This is incompatible with `@rpath` usage, so if we see it,\n  # just remove it from the link flags of the target.\n  get_property(mpi_link_flags\n    TARGET    MPI::MPI_C\n    PROPERTY  INTERFACE_LINK_LIBRARIES)\n  set(fixed_mpi_link_flags)\n  foreach (mpi_link_flag IN LISTS mpi_link_flags)\n    string(FIND \"${mpi_link_flag}\" \"-Wl,-flat_namespace\" idx)\n    if (idx EQUAL \"-1\")\n      list(APPEND fixed_mpi_link_flags\n        \"${mpi_link_flag}\")\n    endif ()\n  endforeach ()\n  set_property(TARGET MPI::MPI_C\n    PROPERTY\n      INTERFACE_LINK_LIBRARIES \"${fixed_mpi_link_flags}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring STL Reader Tests with Input Data in CMake\nDESCRIPTION: Sets up tests for the STL reader using specific input data files for single and multiple patch cases, demonstrating how to test with external data files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestSTLReaderSinglePatch,TestSTLReader.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/42400-IDGH.stl}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestSTLReaderMultiplePatches,TestSTLReader.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/multiple_patches.stl}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a local branch to reference upstream snapshot head\nDESCRIPTION: This command creates a local Git branch named `xdmf2vtk-upstream` that points to a specific commit (f40916ae) in the Git history. This is done to explicitly reference the upstream snapshot branch head and track the upstream changes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git branch xdmf2vtk-upstream f40916ae\"\n```\n\n----------------------------------------\n\nTITLE: Defining VTK IOOggTheora Module Legacy Interface\nDESCRIPTION: This CMake snippet defines the legacy interface properties for the VTK::IOOggTheora module using `vtk_module_definitions`. It sets the VTK_HAS_OGGTHEORA_SUPPORT interface property, which is intended for legacy code support and may be dropped in the future.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# this is for legacy codes, should be dropped.\nvtk_module_definitions(VTK::IOOggTheora\n  INTERFACE VTK_HAS_OGGTHEORA_SUPPORT)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Project using CMake\nDESCRIPTION: This CMake command adds multiple Python test scripts to the VTK testing suite. It includes tests for various VTK functionalities like 3D morphing, terrain decimation, grid warping, image stenciling, PCA analysis, and more. Some tests have specific flags like NO_DATA and NO_VALID.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  3DMorph.py\n  TestGreedyTerrainDecimation.py\n  TestGridWarp3D.py\n  TestGridWarpCubic.py\n  TestGridWarpLinear.py\n  TestGridWarpNearest.py\n  TestImageStencilWithPolydata.py\n  TestPCA.py\n  TestProcrustes.py\n  TestProjectedTerrainPath.py\n  TestTemporalSnapToTimeStep.py,NO_DATA,NO_VALID\n  WarpPolyData.py\n  appendImplicitModel.py\n  appendImplicitModelNoBounds.py\n  banana.py\n  depthSort.py\n  earth.py\n  imageToPolyData.py\n  largeImageGradientBackground.py\n  largeImageOffset.py\n  largeImageParallel.py\n  TestProcrustesRigidCentroid.py\n  TestFacetReader.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Collecting Functions with User-Defined Functions in ExprTk\nDESCRIPTION: Demonstrates how to collect functions from an expression that includes user-defined functions. A symbol table with the registered user function is passed to the collect_functions routine to enable recognition of custom functions during parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_92\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nT foo(T v)\n{\n   return std::abs(v + T(2)) / T(3);\n}\n\n......\n\nexprtk::symbol_table<T> sym_tab;\n\nsymbol_table.add_function(\"foo\",foo);\n\nconst std::string expression = \"x + foo(y / cos(1 + z))\";\n\nstd::deque<std::string> function_list;\n\nif (exprtk::collect_functions(expression, sym_tab, function_list))\n{\n   for (const auto& func : function_list)\n   {\n      ...\n   }\n}\nelse\n  printf(\"An error occurred.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Support for VTK NetCDF Module\nDESCRIPTION: Links the VTK NetCDF module with MPI interfaces when MPI support is available. This enables distributed parallel processing capabilities for the NetCDF module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_MPI)  \n  vtk_module_link(VTK::netcdf\n    INTERFACE\n      VTK::mpi)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring mpi4py Module in VTK using CMake\nDESCRIPTION: This snippet establishes the mpi4py module in the VTK project, setting it as a header-only library and defining include directories based on different build contexts.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(mpi4py)\n\nadd_subdirectory(src)\n\nvtk_module_add_module(VTK::mpi4py\n  HEADER_ONLY)\ntarget_include_directories(mpi4py\n  INTERFACE\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/mpi4py/include>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkmpi4py>\")\n```\n\n----------------------------------------\n\nTITLE: Defining VTK KissFFT Third-Party Module in CMake\nDESCRIPTION: Configures KissFFT as an internal third-party module for VTK, specifying license information, version, and include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES           \"vtkkissfft/COPYING\"\n  SPDX_LICENSE_IDENTIFIER \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT     \"Copyright (c) 2003-2010 Mark Borgerding\"\n  SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/kissfft.git@for/vtk-20211123-master-g6f09c27\"\n  VERSION                 \"master\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Linking QtSQL Module with Qt Libraries\nDESCRIPTION: Links the VTK QtSQL module with Qt Sql and Widgets libraries using the dynamically determined Qt version\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::GUISupportQtSQL\n  PUBLIC \"Qt${vtk_qt_major_version}::Sql\" \"Qt${vtk_qt_major_version}::Widgets\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Module Testing and Subdirectories\nDESCRIPTION: Adds test mangling for the VTK::IOCatalystConduit module and includes the Catalyst subdirectory in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOCatalystConduit)\nadd_subdirectory(Catalyst)\n```\n\n----------------------------------------\n\nTITLE: Finding Threads Package in CMake for VTK Common System Module\nDESCRIPTION: This snippet finds the Threads package and sets it as a private dependency if the module is shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE Threads)\n```\n\n----------------------------------------\n\nTITLE: Conditional Documentation Generation\nDESCRIPTION: Provides options to build Doxygen and Sphinx documentation for VTK, adding respective subdirectories when enabled\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_BUILD_DOCUMENTATION \"Build the Doxygen VTK documentation\" OFF)\nif (VTK_BUILD_DOCUMENTATION)\n  add_subdirectory(Utilities/Doxygen)\nendif ()\n\noption(VTK_BUILD_SPHINX_DOCUMENTATION \"Build the Sphinx documentation for VTK\" OFF)\nif (VTK_BUILD_SPHINX_DOCUMENTATION)\n  add_subdirectory(Utilities/Sphinx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring JPEG Reader Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK JPEG reader implementation using a beach image sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestJPEGReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/beach.jpg}\")\n```\n\n----------------------------------------\n\nTITLE: Specifying VTK Module Test Data in CMake\nDESCRIPTION: Defines test data files for VTK module testing using the vtk_module_test_data command. It includes SemiDisk VTP files for initial testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/SemiDisk/SemiDisk-0.vtp\n  Data/SemiDisk/SemiDisk-1.vtp)\n```\n\n----------------------------------------\n\nTITLE: Setting LibPROJ Major Version for Internal Use in CMake\nDESCRIPTION: This snippet sets the LibPROJ major version to 8 if the module is not using an external version of VTK_libproj. This ensures version compatibility when using the internal library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT VTK_MODULE_USE_EXTERNAL_VTK_libproj)\n  set(LibPROJ_MAJOR_VERSION \"8\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Using collect_functions Helper Function in ExprTk\nDESCRIPTION: Shows how to use the collect_functions helper to extract all function symbols from a string expression. The functions are stored in an STL container and can be processed further. Like collect_variables, it returns true if parsing succeeds, false otherwise.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_91\n\nLANGUAGE: C++\nCODE:\n```\nconst std::string expression = \"x + abs(y / cos(1 + z))\";\n\nstd::deque<std::string> function_list;\n\nif (exprtk::collect_functions(expression, function_list))\n{\n   for (const auto& func : function_list)\n   {\n      ...\n   }\n}\nelse\n  printf(\"An error occurred.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring DirectX Dependencies for Win32 OpenGL Tests in CMake\nDESCRIPTION: Sets up DirectX dependencies for Win32 OpenGL tests, finding the required packages and linking them to the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_WIN32_OPENGL)\n  # TestWin32OpenGLDXRenderWindow requires DirectX\n  find_package(DirectX REQUIRED)\n  target_link_libraries(vtkRenderingOpenGL2CxxTests PRIVATE DirectX::d3d11 DirectX::dxgi)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files\nDESCRIPTION: Registers test data files in ExodusII and Genesis formats for VTK module testing. Includes various geometry files like boxes, tetrahedra, and wedges.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/box-noglom.ex2\n  Data/can.ex2\n  Data/edgeFaceElem.exii\n  Data/tetra15.g\n  Data/wedge18.e\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking VTK ExodusII Module Dependencies\nDESCRIPTION: This snippet uses the `vtk_module_link` function to link the VTK::exodusII module with its private dependencies. It links against the Threads library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_link(VTK::exodusII\n  PRIVATE\n    Threads::Threads)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Header Files\nDESCRIPTION: This snippet configures header files by transforming a template into an actual header file using configure_file. It specifies the input and output paths for the configuration process. The vtk_module_install_headers function is then used to install the generated header file.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lzma/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_lzma.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_lzma.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_lzma.h\")\n```\n\n----------------------------------------\n\nTITLE: Finding Qt Packages with CMake\nDESCRIPTION: This snippet uses CMake's `find_package` command to locate the Qt Quick and Qml modules. It specifies that these components are required for the build process and uses a variable `vtk_qt_major_version` to determine the Qt version to use.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(\"Qt${vtk_qt_major_version}\"\n  COMPONENTS Quick Qml\n  REQUIRED\n  )\n```\n\n----------------------------------------\n\nTITLE: Install Headers (vtk_doubleconversion.h)\nDESCRIPTION: Installs the configured header file \"vtk_doubleconversion.h\" using `vtk_module_install_headers`. The header is installed from the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_doubleconversion.h\")\n\n```\n\n----------------------------------------\n\nTITLE: Basic VTK Object Factory Configuration\nDESCRIPTION: Simple configuration of VTK object factory using overrides list.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\"${overrides}\")\n\nvtk_module_library(\"${vtk-module}\" \"${sources}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path\nDESCRIPTION: Configures the initial search path for CMake modules, allowing custom or third-party modules to be located in the project's directory. This setup is necessary for certain configurations and project-specific optimizations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)\n```\n\n----------------------------------------\n\nTITLE: Defining HDF5 Core Source Files in CMake\nDESCRIPTION: Sets CMake variables containing lists of source and header files for the core HDF5 module (H5). Includes files like H5.c, H5checksum.c, hdf5.h, etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset (H5_SOURCES\n    ${HDF5_SRC_DIR}/H5.c\n    ${HDF5_SRC_BINARY_DIR}/H5build_settings.c\n    ${HDF5_SRC_DIR}/H5checksum.c\n    ${HDF5_SRC_DIR}/H5dbg.c\n    ${HDF5_SRC_DIR}/H5mpi.c\n    ${HDF5_SRC_DIR}/H5system.c\n    ${HDF5_SRC_DIR}/H5timer.c\n    ${HDF5_SRC_DIR}/H5trace.c\n)\n\nset (H5_HDRS\n    ${HDF5_SRC_DIR}/hdf5.h\n    ${HDF5_SRC_DIR}/H5api_adpt.h\n    ${HDF5_SRC_DIR}/H5public.h\n    ${HDF5_SRC_DIR}/vtk_hdf5_mangle.h\n    #${HDF5_SRC_DIR}/H5version.h\n    #${HDF5_SRC_DIR}/H5overflow.h\n)\nIDE_GENERATED_PROPERTIES (\"H5\" \"${H5_HDRS}\" \"${H5_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Clang-Tidy Configuration Copying\nDESCRIPTION: Copies the .clang-tidy configuration file from source to binary directory\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${VTK_SOURCE_DIR}/.clang-tidy\"\n  \"${VTK_BINARY_DIR}/.clang-tidy\"\n  COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring libxml2 Test Programs in CMake\nDESCRIPTION: Sets up build targets for libxml2 test programs when testing is enabled. Creates executables for various test cases, links them with the libxml2 library and necessary dependencies, and registers them as tests with CTest.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(LIBXML2_WITH_TESTS)\n    enable_testing()\n    set(\n        TESTS\n        runtest\n        runxmlconf\n        runsuite\n        testapi\n        testchar\n        testdict\n        testModule\n        testlimits\n        testparser\n        testrecurse\n        testThreads\n    )\n    foreach(TEST ${TESTS})\n        add_executable(${TEST} ${TEST}.c)\n        target_compile_definitions(${TEST} PRIVATE SYSCONFDIR=\"${CMAKE_INSTALL_FULL_SYSCONFDIR}\")\n        target_link_libraries(${TEST} LibXml2)\n    endforeach()\n    if(Threads_FOUND)\n        foreach(TEST runtest testThreads)\n            target_link_libraries(${TEST} Threads::Threads)\n        endforeach()\n    endif()\n    add_test(NAME runtest COMMAND runtest --out ${CMAKE_CURRENT_BINARY_DIR} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n    add_test(NAME runsuite COMMAND runsuite WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n    if(EXISTS ${LIBXML2_XMLCONF_WORKING_DIR}/xmlconf/xmlconf.xml)\n        add_test(NAME runxmlconf COMMAND runxmlconf WORKING_DIRECTORY ${LIBXML2_XMLCONF_WORKING_DIR})\n    endif()\n    if(NOT WIN32)\n        add_test(NAME testapi COMMAND testapi)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Execution Model C++ Tests without Data or Validation\nDESCRIPTION: This CMake command adds a set of C++ tests to the vtkCommonExecutionModelCxxTests suite. It specifies that these tests do not require data files or validation, and lists the source files for each test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonExecutionModelCxxTests tests\n  NO_DATA NO_VALID\n  TestAbortExecute.cxx\n  TestAbortExecuteFromOtherThread.cxx\n  TestAbortSMPFilter.cxx\n  TestCopyAttributeData.cxx\n  TestForEach.cxx\n  TestImageDataToStructuredGrid.cxx\n  TestMetaData.cxx\n  TestSetInputDataObject.cxx\n  TestTemporalSupport.cxx\n  TestThreadedImageAlgorithmSplitExtent.cxx\n  TestTrivialConsumer.cxx\n  UnitTestSimpleScalarTree.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK AMR Filter Tests\nDESCRIPTION: Sets up C++ test cases for VTK AMR filters using CMake. Defines multiple test files including AMR slice filtering, ghost layer handling, blanking, and iteration tests. Some tests are marked with NO_VALID indicating they don't require image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/AMR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersAMRCxxTests tests\n  TestAMRAbortExecute.cxx,NO_VALID\n  TestAMRSliceFilterCellData.cxx\n  TestAMRSliceFilterPointData.cxx\n  TestAMRGhostLayerStripping.cxx,NO_VALID\n  TestAMRBlanking.cxx,NO_VALID\n  TestAMRIterator.cxx,NO_VALID\n  TestImageToAMR.cxx,NO_VALID\n  TestAMRGhostZones.cxx,NO_VALID\n  TestAMRRefinedGhostFlag.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Files\nDESCRIPTION: Configures the `doxyfile.in` and `doc_makeall.sh.in` files using CMake's `configure_file` command. These files are copied and modified from the source directory to the build directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n    \"${VTKMY_SOURCE_DIR}/Utilities/Doxygen/doxyfile.in\"\n    \"${VTKMY_BINARY_DIR}/Utilities/Doxygen/doxyfile\")\n\n  configure_file(\n    \"${VTKMY_SOURCE_DIR}/Utilities/Doxygen/doc_makeall.sh.in\"\n    \"${VTKMY_BINARY_DIR}/Utilities/Doxygen/doc_makeall.sh\")\n```\n\n----------------------------------------\n\nTITLE: Adding Module Classes in VTK\nDESCRIPTION: This snippet adds the previously defined classes to the VTK RenderingLabel module. The 'vtk_module_add_module' command is used to integrate the classes and set up the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Label/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingLabel\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Rendering Tests\nDESCRIPTION: This snippet creates a C++ executable for the rendering tests defined earlier if Matplotlib is found. It uses vtk_test_cxx_executable to define the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingMatplotlibCxxTests tests\n    RENDERING_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK OpenGL Classes and Headers\nDESCRIPTION: Defines the main OpenGL context classes and private headers for the rendering module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ContextOpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkOpenGLContextActor\n  vtkOpenGLContextBufferId\n  vtkOpenGLContextDevice2D\n  vtkOpenGLContextDevice3D\n  vtkOpenGLPropItem)\n\nset(private_headers\n  vtkOpenGLContextDevice2DPrivate.h\n  vtkOpenGLContextDeviceBufferObjectBuilder.h)\n\nset(extra_sources\n  vtkOpenGLContextDeviceBufferObjectBuilder.cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Headers, Sources, and Private Headers for VTK Filters Parallel Module in CMake\nDESCRIPTION: Sets up lists for headers, sources, and private headers used in the VTK Filters Parallel module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  vtkBlockDistribution.h)\n\nset(sources\n  vtkHyperTreeGridGhostCellsGeneratorInternals.cxx\n  vtkIntegrateAttributesFieldList.cxx)\n\nset(private_headers\n  vtkHyperTreeGridGhostCellsGeneratorInternals.h\n  vtkIntegrateAttributesFieldList.h)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Uninitialized Member Variable Warnings in VTK Classes\nDESCRIPTION: Extensive list of suppressions for uninitialized member variable warnings across various VTK modules and classes. These suppressions target specific files where member variables are initialized through other means than constructor initialization lists.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_6\n\nLANGUAGE: cppcheck\nCODE:\n```\n// Many warnings\nuninitMemberVar:*/Charts/Core/vtkChart.cxx\nuninitMemberVar:*/Charts/Core/vtkChartBox.cxx\nuninitMemberVar:*/Charts/Core/vtkChartParallelCoordinates.cxx\nuninitMemberVar:*/Charts/Core/vtkInteractiveArea.cxx\nuninitMemberVar:*/Charts/Core/vtkPlotStacked.cxx\nuninitMemberVar:*/Charts/Core/vtkScatterPlotMatrix.cxx\nuninitMemberVar:*/Common/ComputationalGeometry/vtkParametricEllipsoid.cxx\nuninitMemberVar:*/Common/ComputationalGeometry/vtkParametricSpline.cxx\nuninitMemberVar:*/Common/DataModel/Testing/Cxx/TestMappedGridDeepCopy.cxx\nuninitMemberVar:*/Common/DataModel/Testing/Cxx/TestMappedGridShallowCopy.cxx\nuninitMemberVar:*/Common/DataModel/vtkAbstractCellLocator.cxx\nuninitMemberVar:*/Common/DataModel/vtkAttributesErrorMetric.cxx\nuninitMemberVar:*/Common/DataModel/vtkBiQuadraticQuad.cxx\nuninitMemberVar:*/Common/DataModel/vtkBox.cxx\nuninitMemberVar:*/Common/DataModel/vtkBSPCuts.cxx\nuninitMemberVar:*/Common/DataModel/vtkCellLocator.cxx\nuninitMemberVar:*/Common/DataModel/vtkDataObjectTreeIterator.cxx\nuninitMemberVar:*/Common/DataModel/vtkDistributedGraphHelper.cxx\nuninitMemberVar:*/Common/DataModel/vtkEdgeTable.cxx\nuninitMemberVar:*/Common/DataModel/vtkFieldData.cxx\nuninitMemberVar:*/Common/DataModel/vtkGenericAttributeCollection.cxx\nuninitMemberVar:*/Common/DataModel/vtkGenericEdgeTable.h\nuninitMemberVar:*/Common/DataModel/vtkGenericInterpolatedVelocityField.cxx\nuninitMemberVar:*/Common/DataModel/vtkHyperTreeGrid.cxx\nuninitMemberVar:*/Common/DataModel/vtkHyperTreeGrid.h\nuninitMemberVar:*/Common/DataModel/vtkImplicitFunction.cxx\nuninitMemberVar:*/Common/DataModel/vtkImplicitSelectionLoop.cxx\nuninitMemberVar:*/Common/DataModel/vtkOrderedTriangulator.cxx\nuninitMemberVar:*/Common/DataModel/vtkPixelExtent.h\nuninitMemberVar:*/Common/DataModel/vtkPointLocator.cxx\nuninitMemberVar:*/Common/DataModel/vtkReebGraph.cxx\nuninitMemberVar:*/Common/DataModel/vtkStaticCellLocator.cxx\nuninitMemberVar:*/Common/DataModel/vtkStaticPointLocator.cxx\nuninitMemberVar:*/Common/DataModel/vtkUniformGridAMRDataIterator.cxx\nuninitMemberVar:*/Common/ExecutionModel/vtkProgressObserver.cxx\nuninitMemberVar:*/Common/ExecutionModel/vtkSpanSpace.cxx\nuninitMemberVar:*/Common/ExecutionModel/vtkSphereTree.cxx\nuninitMemberVar:*/Common/ExecutionModel/vtkThreadedCompositeDataPipeline.cxx\nuninitMemberVar:*/Common/Misc/vtkFunctionParser.cxx\nuninitMemberVar:*/Common/Transforms/vtkAbstractTransform.cxx\nuninitMemberVar:*/Common/Transforms/vtkAbstractTransform.h\nuninitMemberVar:*/Common/Transforms/vtkTransform.cxx\nuninitMemberVar:*/Domains/Chemistry/Testing/Cxx/TestMoleculeSelection.cxx\nuninitMemberVar:*/Domains/Chemistry/vtkBlueObeliskDataParser.cxx\nuninitMemberVar:*/Domains/Chemistry/vtkOpenQubeElectronicData.cxx\nuninitMemberVar:*/Domains/Chemistry/vtkOpenQubeMoleculeSource.cxx\nuninitMemberVar:*/Domains/Microscopy/vtkOpenSlideReader.h\nuninitMemberVar:*/Examples/Charts/Cxx/vtkGraphItem.cxx\nuninitMemberVar:*/Examples/GUI/Qt/FourPaneViewer/QtVTKRenderWindows.cxx\nuninitMemberVar:*/Filters/AMR/vtkAMRResampleFilter.cxx\nuninitMemberVar:*/Filters/Core/vtkConnectivityFilter.cxx\nuninitMemberVar:*/Filters/Core/vtkDelaunay2D.cxx\nuninitMemberVar:*/Filters/Core/vtkDelaunay3D.cxx\nuninitMemberVar:*/Filters/Core/vtkFieldDataToAttributeDataFilter.cxx\nuninitMemberVar:*/Filters/Core/vtkGlyph3D.cxx\nuninitMemberVar:*/Filters/Core/vtkMergeFields.cxx\nuninitMemberVar:*/Filters/Core/vtkMergeFields.h\nuninitMemberVar:*/Filters/Core/vtkPlaneCutter.cxx\nuninitMemberVar:*/Filters/Core/vtkPolyDataConnectivityFilter.cxx\nuninitMemberVar:*/Filters/Core/vtkQuadricClustering.cxx\nuninitMemberVar:*/Filters/Core/vtkQuadricClustering.h\nuninitMemberVar:*/Filters/Core/vtkQuadricDecimation.cxx\nuninitMemberVar:*/Filters/Core/vtkRearrangeFields.h\nuninitMemberVar:*/Filters/Core/vtkTransposeTable.cxx\nuninitMemberVar:*/Filters/Core/vtkTubeFilter.cxx\nuninitMemberVar:*/Filters/Core/vtkUnstructuredGridQuadricDecimation.cxx\nuninitMemberVar:*/Filters/Extraction/vtkExtractTimeSteps.cxx\nuninitMemberVar:*/Filters/FlowPaths/vtkCachingInterpolatedVelocityField.cxx\nuninitMemberVar:*/Filters/FlowPaths/vtkEvenlySpacedStreamlines2D.cxx\nuninitMemberVar:*/Filters/FlowPaths/vtkParticlePathFilter.h\nuninitMemberVar:*/Filters/FlowPaths/vtkTemporalStreamTracer.cxx\nuninitMemberVar:*/Filters/General/vtkClipVolume.cxx\nuninitMemberVar:*/Filters/General/vtkCoincidentPoints.cxx\nuninitMemberVar:*/Filters/General/vtkHyperStreamline.cxx\nuninitMemberVar:*/Filters/General/vtkImageMarchingCubes.cxx\nuninitMemberVar:*/Filters/General/vtkIntersectionPolyDataFilter.cxx\nuninitMemberVar:*/Filters/General/vtkLoopBooleanPolyDataFilter.cxx\nuninitMemberVar:*/Filters/General/vtkMergeCells.cxx\nuninitMemberVar:*/Filters/General/vtkMultiThreshold.h\nuninitMemberVar:*/Filters/General/vtkOBBDicer.h\nuninitMemberVar:*/Filters/General/vtkOBBTree.cxx\nuninitMemberVar:*/Filters/General/vtkSplineFilter.cxx\nuninitMemberVar:*/Filters/General/vtkSplitField.h\nuninitMemberVar:*/Filters/General/vtkTableBasedClipDataSet.cxx\nuninitMemberVar:*/Filters/General/vtkTemporalPathLineFilter.cxx\nuninitMemberVar:*/Filters/General/vtkUncertaintyTubeFilter.cxx\nuninitMemberVar:*/Filters/General/vtkVoxelContoursToSurfaceFilter.cxx\nuninitMemberVar:*/Filters/General/vtkWarpScalar.cxx\nuninitMemberVar:*/Filters/General/vtkYoungsMaterialInterface.cxx\nuninitMemberVar:*/Filters/Generic/vtkGenericGlyph3DFilter.cxx\nuninitMemberVar:*/Filters/Geometry/vtkDataSetSurfaceFilter.cxx\nuninitMemberVar:*/Filters/Geometry/vtkStructuredNeighbor.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkAdaptiveDataSetSurfaceFilter.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkBSplineTransform.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkGreedyTerrainDecimation.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkGridTransform.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkImageToPolyDataFilter.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkProjectedTerrainPath.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkTemporalFractal.cxx\nuninitMemberVar:*/Filters/Hybrid/vtkTemporalShiftScale.cxx\nuninitMemberVar:*/Filters/HyperTree/vtkHyperTreeGridCellCenters.cxx\nuninitMemberVar:*/Filters/Modeling/vtkBandedPolyDataContourFilter.cxx\nuninitMemberVar:*/Filters/Modeling/vtkLinearExtrusionFilter.cxx\n```\n\n----------------------------------------\n\nTITLE: Language Support Configuration\nDESCRIPTION: This snippet retrieves the enabled languages from the global properties and sets corresponding flags for each language. It also checks if C or C++ are enabled, turning off testing if neither is.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(KWIML_LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)\nforeach(lang ${KWIML_LANGUAGES})\n  set(KWIML_LANGUAGE_${lang} 1)\nendforeach()\nif(NOT KWIML_LANGUAGE_C AND NOT KWIML_LANGUAGE_CXX)\n  set(BUILD_TESTING OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests for VTK Components\nDESCRIPTION: Configures multiple Python test files for VTK testing, with various flags and configurations for different visualization and data processing tests\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestBiDirectionalSerialization.py,NO_VALID\n  TestBlobs.py,NO_VALID\n  TestCompositeDataSets.py,NO_VALID\n  TestCompositePolyDataMapper.py,NO_VALID\n  TestChartsScatter.py,NO_VALID\n  TestDynamic.py,NO_VALID\n  TestGlyph3DMapper.py,NO_VALID\n  TestInitialize.py,NO_VALID\n  TestLabelMapper.py,NO_VALID\n  TestSingleUpdate.py,NO_VALID\n  TestTexture.py,NO_VALID\n  TestSkybox.py,NO_VALID\n  TestUpdateObjectFromState.py,NO_DATA,NO_VALID\n  TestUpdateStateFromObject.py,NO_DATA,NO_VALID\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestSmartVolumeMapper,TestVolume.py,NO_DATA,NO_OUTPUT,NO_VALID Smart\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters SMP C++ Tests in CMake\nDESCRIPTION: This snippet adds a C++ test for the VTK Filters SMP module and creates a test executable. It uses custom VTK CMake functions to set up the test environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersSMPCxxTests tests\n  NO_VALID\n  TestSMPContour.cxx\n  )\nvtk_test_cxx_executable(vtkFiltersSMPCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Declaring and Configuring VTK Object Factory for OpenGLGL2PSHelper\nDESCRIPTION: Declares and configures a VTK object factory for the OpenGLGL2PSHelper class. It specifies the base class and override implementation, and sets up the necessary source and header files with export macros.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkOpenGLGL2PSHelper\n  OVERRIDE vtkOpenGLGL2PSHelperImpl)\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGGL2PSOPENGL2_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Tests with Platform-Specific Compiler Flags\nDESCRIPTION: Sets up tests for the Process functionality with platform-specific compiler flags. It handles special cases for Apple compilers, IBM XL compilers, and sanitizers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\n# Process tests.\nadd_executable(${KWSYS_NAMESPACE}TestProcess testProcess.c)\nset_property(TARGET ${KWSYS_NAMESPACE}TestProcess PROPERTY LABELS ${KWSYS_LABELS_EXE})\ntarget_link_libraries(${KWSYS_NAMESPACE}TestProcess ${KWSYS_TARGET_C_LINK})\n#set(KWSYS_TEST_PROCESS_7 7) # uncomment to run timing-sensitive test locally\nforeach(n 1 2 3 4 5 6 ${KWSYS_TEST_PROCESS_7} 9 10)\n  add_test(kwsys.testProcess-${n} ${EXEC_DIR}/${KWSYS_NAMESPACE}TestProcess ${n})\n  set_property(TEST kwsys.testProcess-${n} PROPERTY LABELS ${KWSYS_LABELS_TEST})\n  set_tests_properties(kwsys.testProcess-${n} PROPERTIES TIMEOUT 120)\nendforeach()\n\nset(testProcess_COMPILE_FLAGS \"\")\n# Some Apple compilers produce bad optimizations in this source.\nif(APPLE AND CMAKE_C_COMPILER_ID MATCHES \"^(GNU|LLVM)$\")\n  set(testProcess_COMPILE_FLAGS \"${testProcess_COMPILE_FLAGS} -O0\")\nelseif(CMAKE_C_COMPILER_ID MATCHES \"^(XL|XLClang)$\")\n  # Tell IBM XL not to warn about our test infinite loop\n  if(CMAKE_SYSTEM MATCHES \"Linux.*ppc64le\"\n     AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"16.1.0\"\n     AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS \"13.1.1\")\n    # v13.1.[1-6] on Linux ppc64le is clang based and does not accept\n    # the -qsuppress option, so just suppress all warnings.\n    set(testProcess_COMPILE_FLAGS \"${testProcess_COMPILE_FLAGS} -w\")\n  else()\n    set(testProcess_COMPILE_FLAGS \"${testProcess_COMPILE_FLAGS} -qsuppress=1500-010\")\n  endif()\nendif()\nif(CMAKE_C_FLAGS MATCHES \"-fsanitize=\")\n  set(testProcess_COMPILE_FLAGS \"${testProcess_COMPILE_FLAGS} -DCRASH_USING_ABORT\")\nendif()\nset_property(SOURCE testProcess.c PROPERTY COMPILE_FLAGS \"${testProcess_COMPILE_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Private Implementation Classes\nDESCRIPTION: Defines the private implementation classes that provide core functionality for the EnSight module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(private_classes\n    core/EnSightFile\n    core/EnSightDataSet)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties for Serial Execution\nDESCRIPTION: This snippet uses `set_tests_properties` to set the `RUN_SERIAL` property to `ON` for specific tests. This ensures that these tests are executed sequentially, which is necessary for tests that interact with the screen buffer to avoid conflicts.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"set_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLStereoWidgetPicking\n PROPERTIES RUN_SERIAL ON)\nset_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLNativeWidgetPicking\n PROPERTIES RUN_SERIAL ON)\nset_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLWindowPicking\n PROPERTIES RUN_SERIAL ON)\nset_tests_properties(VTK::GUISupportQtCxx-TestQVTKRenderWidgetPicking\n PROPERTIES RUN_SERIAL ON)\nset_tests_properties(VTK::GUISupportQtCxx-TestQVTKOpenGLWidgetPicking\n PROPERTIES RUN_SERIAL ON)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timeout for YoungsMaterialInterface Test\nDESCRIPTION: Sets a custom timeout value for the TestYoungsMaterialInterface test which may require more execution time than other tests. Default timeout is set to 300 seconds if not previously defined.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# On some machines this test takes some extra time\nif(NOT VTK_TEST_TIMEOUT_TestYoungsMaterialInterface)\n  set(VTK_TEST_TIMEOUT_TestYoungsMaterialInterface 300)\nendif()\nset_tests_properties(VTK::FiltersGeneralCxx-TestYoungsMaterialInterface\n  PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestYoungsMaterialInterface})\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Tests for VTK IO Parallel\nDESCRIPTION: Adds MPI-specific tests for the VTK IO Parallel module if the VTK::ParallelMPI target is available. It includes tests for POpenFOAMReader and its variants.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  vtk_add_test_mpi(vtkIOParallelCxxTests-MPI tests\n    TESTING_DATA\n    TestPOpenFOAMReader.cxx\n    TestPOpenFOAMReaderGlobalFaceZone.cxx,NO_VALID\n    TestPOpenFOAMReaderLagrangianSerial.cxx,NO_VALID\n    TestPOpenFOAMReaderLagrangianUncollated.cxx,NO_VALID\n    )\n  vtk_test_cxx_executable(vtkIOParallelCxxTests-MPI tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test with VTK CMake\nDESCRIPTION: This snippet uses the macro `vtk_add_test_cxx` to register a C++ test file named `TestOpenVDBReader.cxx`. The purpose is to include this source file in the set of tests for the specified target `vtkIOVDBCxxTests`. The macro is likely part of a custom VTK CMake module that helps simplify the test registration process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOVDBCxxTests tests\n  TestOpenVDBReader.cxx)\n```\n\n----------------------------------------\n\nTITLE: Linking FontConfig to VTK RenderingFreeTypeFontConfig Module\nDESCRIPTION: Links the FontConfig library to the VTK::RenderingFreeTypeFontConfig module as a private dependency. It also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::RenderingFreeTypeFontConfig\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    FontConfig::FontConfig)\nvtk_add_test_mangling(VTK::RenderingFreeTypeFontConfig)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: This CMake command adds a subdirectory named 'Cxx' to the build. It suggests that C++ source files related to the VTK module are located in this subdirectory and will be included in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Testing Subdirectory\nDESCRIPTION: Adds the C++ testing subdirectory when testing is not explicitly disabled\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Checking Emscripten Environment - CMake\nDESCRIPTION: This snippet checks if the build is running within an Emscripten environment. If not, it skips the example and provides a message indicating the need for Emscripten.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT EMSCRIPTEN)\n  message(\"Skipping example: This needs to run inside an Emscripten build environment\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GLTF Importer Tests\nDESCRIPTION: Sets up test cases for the GLTF importer, including tests for PBR materials, cameras, lights, and armature configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImportCxxTests tests\n  TestGLTFImporter,TestGLTFImporter.cxx DATA{../Data/glTF/Avocado/Avocado.glb} 0 -1 1 0 0\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Temporal C++ Tests\nDESCRIPTION: Adds C++ test cases for the VTK Filters Temporal module using the vtk_add_test_cxx command. It specifies test files and sets the NO_VALID flag for each test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersTemporalCxxTests tests\n  TestForceStaticMesh.cxx, NO_VALID\n  TestDataObjectMeshCache.cxx,NO_VALID\n  TestTemporalSmoothingFilter.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific FFMPEG Tests with Audio Support\nDESCRIPTION: Adds Windows-specific tests for FFMPEG with audio support. This conditional block adds TestFFMPEGVideoSourceWithAudio.cxx and sets up the XAudio2 library dependency when running on Windows platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n  vtk_add_test_cxx(vtkIOFFMPEGCxxTests tests\n    TestFFMPEGVideoSourceWithAudio.cxx\n    )\n  set(extra_test_libs Xaudio2.lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Main VTK Test Data Resources\nDESCRIPTION: Configures the primary set of test data files needed for VTK testing, including various image formats (PNG, JPG, PPM), DEM files, VTK files, and other data formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/GreenCircle.png\n  Data/SainteHelens.dem\n  Data/SampleStructGrid.vtk\n  Data/Tango/TangoIcons.png\n  Data/alphachannel.png\n  Data/beach.jpg\n  Data/can.ex2\n  Data/chombo3d/,REGEX:.*\n  Data/combq.bin\n  Data/combxyz.bin\n  Data/earth.ppm\n  Data/mb_with_pieces/,REGEX:.*\\.vtu\n  Data/mb_with_pieces.vtm\n  Data/quadraticTetra01.vtu\n  Data/textureRGBA.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This snippet specifies various test data files for a VTK module, including SQLite databases, XML files, images, and fonts. It uses the vtk_module_test_data() function to declare these files as test data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Infovis/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/Infovis/SQLite/ports_protocols.db\n  Data/Infovis/XML/smalltest.xml\n  Data/Infovis/XML/vtkclasses.xml\n  Data/Infovis/XML/vtklibrary.xml\n  Data/Infovis/fsm.gml\n  Data/Infovis/martyb_-_Ridiculous.ttf\n  Data/NE2_ps_bath_small.jpg\n  Data/Tango/TangoIcons.png\n  Data/masonry-wide.jpg\n  Data/treetest.xml)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOXdmf3 Module\nDESCRIPTION: This snippet adds the VTK::IOXdmf3 module using the `vtk_module_add_module` function.  It takes the module name and the list of classes defined earlier as input.  It depends on the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOXdmf3\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: System Introspection for Data Type Sizes in CMake\nDESCRIPTION: Checks for the sizes of various data types on the current system, including platform-specific types like __int64 on Windows and long long.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude (CheckTypeSize)\nif(WIN32)\n  check_type_size(__int64        SIZEOF___INT64)\nendif()\ncheck_type_size(\"long long\"    SIZEOF_LONG_LONG)\n\ninclude (CheckIncludeFile)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Library Output Directory\nDESCRIPTION: Sets the output directory for compiled libraries based on the Android architecture ABI\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/libs/${CMAKE_ANDROID_ARCH_ABI})\nmessage(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\nadd_subdirectory(jni)\n```\n\n----------------------------------------\n\nTITLE: Locating OpenVDB CMake Files in CMake\nDESCRIPTION: Finds the path to OpenVDB CMake files and marks it as advanced. This step is crucial for locating the necessary CMake modules for OpenVDB integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_path(OpenVDB_CMAKE_PATH\n  NAMES FindOpenVDB.cmake\n  DOC \"Path to OpenVDB CMake files\")\nmark_as_advanced(OpenVDB_CMAKE_PATH)\n```\n\n----------------------------------------\n\nTITLE: Running VTK Java Demo\nDESCRIPTION: Command to run the VTK Java demonstration with proper classpath configuration including JOGL dependencies and native library path settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $INSTALLDIR/vtk-XY.jar:/home/kitware/.m2/repository/org/jogamp/gluegen/gluegen-rt/2.3.2/gluegen-rt-2.3.2.jar:/home/kitware/.m2/repository/org/jogamp/jogl/jogl-all/2.3.2/jogl-all-2.3.2.jar -Djava.library.path=$INSTALLDIR/natives-Linux-64bit vtk.sample.Demo\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MPI Tests with Data Dependencies\nDESCRIPTION: Sets up MPI test group that requires testing data, including TestPProbe test case.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mpi(vtkParallelMPICxxTests-MPI tests\n  TESTING_DATA\n  TestPProbe.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Configuration\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that the C++ source code for VTK is located in this directory and should be compiled as part of the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Qt/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring X Window System Test Properties\nDESCRIPTION: Sets serial execution property for X Window System-specific tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_X)\n  set_tests_properties(VTK::RenderingCoreCxx-TestInteractorTimers\n     PROPERTIES RUN_SERIAL ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Version Number Specification\nDESCRIPTION: Simple version identifier for the VTK software project, representing the major release version\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/version.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n24.09.0\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Android NDK\nDESCRIPTION: This snippet includes directories needed for compiling the native application glue from the Android NDK. The directory path is set based on the CMake variable that points to the Android NDK, allowing the build system to locate necessary header files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/jni/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  \"${CMAKE_ANDROID_NDK}/sources/android/native_app_glue\"\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating LZ4 in VTK CMake Configuration\nDESCRIPTION: This CMake snippet defines the integration of the LZ4 library into the VTK project. It specifies internal details like license, versioning, and download locations, as well as external dependencies using CMake targets. The snippet makes use of the `vtk_module_third_party` function for this purpose.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtklz4/lib/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSD-2-Clause\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2011-2016, Yann Collet\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/lz4.git@for/vtk-20210727-1.9.3\"\n    VERSION\n      \"1.9.3\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE LZ4\n    TARGETS LZ4::LZ4\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Defining HDF5 Cache Source Files in CMake\nDESCRIPTION: Sets CMake variables containing lists of source and header files for the HDF5 cache module (H5AC). Includes files like H5AC.c, H5ACdbg.c, H5ACpublic.h, etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset (H5AC_SOURCES\n    ${HDF5_SRC_DIR}/H5AC.c\n    ${HDF5_SRC_DIR}/H5ACdbg.c\n    ${HDF5_SRC_DIR}/H5ACmpio.c\n    ${HDF5_SRC_DIR}/H5ACproxy_entry.c\n)\n\nset (H5AC_HDRS\n    ${HDF5_SRC_DIR}/H5ACpublic.h\n)\nIDE_GENERATED_PROPERTIES (\"H5AC\" \"${H5AC_HDRS}\" \"${H5AC_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Processes for PCellSizeFilter\nDESCRIPTION: This snippet sets the number of processes to be used for the PCellSizeFilter MPI test. It defines a variable `PCellSizeFilter_NUMPROCS` and assigns it the value 2, indicating that the test will be run with two MPI processes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PCellSizeFilter_NUMPROCS 2)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Ray Tracing Test Executable in CMake\nDESCRIPTION: Combines all test sources and creates a CXX executable for VTK ray tracing tests. It includes a custom test interactor and disables floating-point exceptions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests ${tests} ${tests_optix} ${tests_combined})\nvtk_test_cxx_executable(vtkRenderingRayTracingCxxTests all_tests RENDERING_FACTORY\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  vtkOSPRayTestInteractor.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Importing a Project into Git\nDESCRIPTION: These commands demonstrate the basic steps to import a project (Twisted) into a Git repository on Kitware's GitLab. It includes cloning the repository, adding a remote, pushing the repository and tags, checking out a specific tag, creating a branch for VTK-specific patches, and setting up the upstream.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/UPDATING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/twisted/twisted.git\n$ cd twisted/\n$ git remote add kitware git@gitlab.kitware.com:third-party/twisted.git\n$ git push -u kitware\n$ git push -u kitware --tags\n$ git checkout twisted-17.1.0\n$ git checkout -b for/vtk\n$ git push --set-upstream kitware for/vtk\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This snippet specifies the test data files required for the VTK module tests. It includes various .ply files for 3D models and .png files for textures.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/Armadillo.ply\n  Data/FaceTexturedWithReusedTCoords.ply\n  Data/PointCloud.ply\n  Data/bunny.ply\n  Data/squareTextured.ply\n  Data/squareTexturedFaces.ply\n  Data/vtk.png\n  Data/two_vtk_logos_stacked.png)\n```\n\n----------------------------------------\n\nTITLE: Creating MPI Configuration File\nDESCRIPTION: Generates an MPI configuration file with compiler information for mpi4py\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(mpi_cfg_content\n  \"[mpi]\\nmpicc = ${MPI_C_COMPILER}\\nmpicxx = ${MPI_CXX_COMPILER}\\nmpif77 =\\nmpi490 =\\n\")\nfile(GENERATE\n  OUTPUT  \"${mpi4py_build_dir}/mpi4py/mpi.cfg\"\n  CONTENT \"${mpi_cfg_content}\")\n```\n\n----------------------------------------\n\nTITLE: Gesture Method Relocation in VTK\nDESCRIPTION: Moves CurrentGesture method from vtkVRRenderWindowInteractor to vtkRenderWindowInteractor to provide more flexibility for custom interaction styles\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/multitouch-gestures.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Relocated gesture methods to base class\n// [Set/Get]CurrentGesture now in vtkRenderWindowInteractor\n```\n\n----------------------------------------\n\nTITLE: Including User and Filter Macros in CMake\nDESCRIPTION: Includes custom user macros and filter macros for compression libraries like zlib and szip. These includes provide necessary functionality for configuring HDF5 build options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude (UserMacros.cmake)\n\n#-----------------------------------------------------------------------------\n# Include filter (zlib, szip, etc.) macros\n#-----------------------------------------------------------------------------\ninclude (CMakeFilters.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test to CMake\nDESCRIPTION: This code snippet uses the vtk_add_test_python function to include a Python test script named VRMLImporter.py in the VTK build system. It is used in the context of the CMake build process, where VRMLImporter.py is likely a script that tests some aspect of VRML file importation in VTK. There are no explicit parameters other than the file name, and the expected output is that the test will be executed as part of the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  VRMLImporter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding the ParallelDIY Module to VTK Build in CMake\nDESCRIPTION: Adds the VTK::ParallelDIY module to the VTK build system, including the previously defined classes and template files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/DIY/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::ParallelDIY\n  CLASSES ${classes}\n  TEMPLATES ${templates})\n```\n\n----------------------------------------\n\nTITLE: Defining Third Party Module for VTK with CMake\nDESCRIPTION: This snippet defines a third-party module for VTK including licensing information and external dependencies. It specifies the internal and external components, their respective license files, and versions. Key parameters include LICENSE_FILES for listing licenses and TARGETS for declaring dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      vtkscn/LICENSE\n      vtkscn/LICENSE.nanorange\n    SPDX_LICENSE_IDENTIFIER \"Apache-2.0 AND BSL-1.0\"\n    SPDX_COPYRIGHT_TEXT     \"Copyright (c) 2017 Elias Kosunen; Copyright (c) 2018 Tristan Brindle (tcbrindle at gmail dot com)\"\n    SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/scnlib.git@for/vtk-20250416-4.0.1\"\n    VERSION                 \"4.0.1\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE scn\n    TARGETS scn::scn\n    VERSION       \"4.0.0\"\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC-Specific Compiler Options\nDESCRIPTION: Configures Microsoft Visual C++ compiler-specific warning suppressions for the VTK-m filters module, handling both regular C++ compilation and CUDA compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n  set(msvc_warning_flags\n    # Generates numerous false positives with template code about unreachable\n    # code\n    /wd4702\n    # Generates numerous warning that implicit assignment operators can't be\n    # constructed. This is understood and we don't care.\n    /wd4512\n    # Generates numerous warning that implicit constructors can't be\n    # constructed. This is understood and we don't care.\n    /wd4510\n    # Generates warnings when decorated names are over 4096 characters\n    # This compiler warning is deprecated and no longer occurs with VS2017+.\n    # So we suppress for VS2015\n    /wd4503\n    )\n  set(vtkm_msvc_flags)\n  foreach (msvc_warning_flag IN LISTS msvc_warning_flags)\n    if (TARGET vtkm::cuda OR TARGET vtkm::kokkos_cuda)\n      list(APPEND vtkm_msvc_flags\n        $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=${msvc_warning_flag},${msvc_warning_flag}>)\n    else ()\n      list(APPEND vtkm_msvc_flags\n        ${msvc_warning_flag})\n    endif ()\n  endforeach ()\n  vtk_module_compile_options(VTK::AcceleratorsVTKmFilters\n    PRIVATE\n      ${vtkm_msvc_flags})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding OpenXR Package in CMake for VTK\nDESCRIPTION: Locates the OpenXR package with a minimum version of 1.0.31 using VTK's module find package command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PACKAGE OpenXR VERSION 1.0.31)\n```\n\n----------------------------------------\n\nTITLE: Including VTK ExodusII Module Interface\nDESCRIPTION: This snippet uses the `vtk_module_include` function to include the public interface directories for the VTK::exodusII module. It adds the current source directory's include folder and the current binary directory's include folder as build interface include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_include(VTK::exodusII\n  PUBLIC\n    \\\"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\\\"\n    \\\"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Windows Test Program with LZ4 DLL\nDESCRIPTION: Compilation command for linking a test program with the LZ4 dynamic library on Windows using MinGW\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/lib/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$(CC) $(CFLAGS) -Iinclude/ test-dll.c -o test-dll dll\\liblz4.dll\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite VTK Headers in CMake\nDESCRIPTION: Installs the generated vtk_sqlite.h header file into the VTK installation directory to make it available for other components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_sqlite.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK\nDESCRIPTION: CMake function call to register multiple Python test scripts for the VTK project, including tests for multidimensional solutions and glyphs visualization\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  MultidimensionalSolution.py\n  progGlyphs.py\n  progGlyphsBySource.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Fortran Support\nDESCRIPTION: Handles the configuration of Fortran support, if applicable, and sets the naming conventions used between Fortran and C.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (CGNS_ENABLE_FORTRAN)\n  enable_language(\"Fortran\" OPTIONAL)\n  # Detect name mangling convention used between Fortran and C\n  ... \nendif (CGNS_ENABLE_FORTRAN)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI4PY Installation Directories\nDESCRIPTION: Sets up installation and build directories for mpi4py Python package using CMake variables\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(mpi4py_install_dir\n  \"${VTK_PYTHON_SITE_PACKAGES_SUFFIX}\")\nset(mpi4py_build_dir\n  \"${CMAKE_BINARY_DIR}/${mpi4py_install_dir}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Windows-Specific Compile Definitions for FreeType\nDESCRIPTION: Configures Windows-specific compiler definitions for security warnings and DLL exports when building as shared libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  target_compile_definitions(\n    freetype PRIVATE _CRT_SECURE_NO_WARNINGS _CRT_NONSTDC_NO_WARNINGS)\n  if (BUILD_SHARED_LIBS)\n    target_compile_definitions(\n      freetype PRIVATE DLL_EXPORT)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions CMake\nDESCRIPTION: Adds a compile definition to conditionally define a macro based on the SDK compatibility setting. This affects how the module compiles and links external definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ZSpace/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(SOURCE vtkZSpaceSDKManager.cxx APPEND\n  PROPERTY\n    COMPILE_DEFINITIONS \"VTK_ZSPACE_USE_COMPAT_SDK=$<BOOL:${VTK_ZSPACE_USE_COMPAT_SDK}>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Arguments for GDAL Raster Tests in CMake\nDESCRIPTION: Sets up command line arguments for GDAL raster tests. These arguments specify input data files for testing the NoDataValue and Palette functionality in GDAL raster processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GDAL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TestGDALRasterNoDataValue_ARGS\n  -D DATA{../Data/Input/TestGDALRasterNoDataValue.tif}\n)\nset(TestGDALRasterPalette_ARGS\n  -D DATA{../Data/Input/TestGDALRasterPalette.tif}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ODBC Database Test Environment\nDESCRIPTION: Conditionally generates a configuration header and sets up CXX tests for ODBC database functionality when VTK_ODBC_TEST_DSN is defined\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(VTK_ODBC_TEST_DSN)\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vtkIOODBCTestingCxxConfigure.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/vtkIOODBCTestingCxxConfigure.h)\n\n  include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n  vtk_add_test_cxx(vtkIOODBCCxxTests tests\n    NO_DATA NO_VALID\n    TestODBCDatabase.cxx\n    )\n  vtk_test_cxx_executable(vtkIOODBCCxxTests tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. Ensures that the CMake version used to build the project meets the minimum requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.13)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Internal Module in CMake\nDESCRIPTION: This snippet uses the `vtk_module_third_party_internal` function to define the vtkkwiml module as a third-party internal dependency. It specifies the module as header-only, provides license information, SPDX identifiers, copyright text, download location, and version.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party_internal(\n  HEADER_ONLY\n  LICENSE_FILES           \"vtkkwiml/Copyright.txt\"\n  SPDX_LICENSE_IDENTIFIER \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT     \"Copyright 2000-2016 Kitware, Inc. and Contributors\"\n  SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/utils/kwiml@a079afc6\"\n  VERSION                 \"1.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Defining VTK ExodusII Module Definitions\nDESCRIPTION: This snippet uses the `vtk_module_definitions` function to define private definitions for the VTK::exodusII module. It sets the `exoIIc_EXPORTS` definition as a private definition.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_definitions(VTK::exodusII\n  PRIVATE\n    exoIIc_EXPORTS)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Header File Lists for HDF5\nDESCRIPTION: This snippet defines CMake lists of header files for the HDF5 library. These lists include private, generated, and public generated headers, used during the build process to properly include and manage header dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset (H5_PRIVATE_HEADERS\n    ${HDF5_SRC_DIR}/H5private.h\n\n    ${HDF5_SRC_DIR}/H5Apkg.h\n    ${HDF5_SRC_DIR}/H5Aprivate.h\n\n    ${HDF5_SRC_DIR}/H5ACpkg.h\n    ${HDF5_SRC_DIR}/H5ACprivate.h\n\n    ${HDF5_SRC_DIR}/H5Bpkg.h\n    ${HDF5_SRC_DIR}/H5Bprivate.h\n\n    ${HDF5_SRC_DIR}/H5B2pkg.h\n    ${HDF5_SRC_DIR}/H5B2private.h\n\n    ${HDF5_SRC_DIR}/H5Clog.h\n    ${HDF5_SRC_DIR}/H5Cpkg.h\n    ${HDF5_SRC_DIR}/H5Cprivate.h\n\n    ${HDF5_SRC_DIR}/H5CSprivate.h\n\n    ${HDF5_SRC_DIR}/H5CXprivate.h\n\n    ${HDF5_SRC_DIR}/H5Dpkg.h\n    ${HDF5_SRC_DIR}/H5Dprivate.h\n\n    ${HDF5_SRC_DIR}/H5Edefin.h\n    ${HDF5_SRC_DIR}/H5Einit.h\n    ${HDF5_SRC_DIR}/H5Epkg.h\n    ${HDF5_SRC_DIR}/H5Eprivate.h\n    ${HDF5_SRC_DIR}/H5Eterm.h\n\n    ${HDF5_SRC_DIR}/H5EApkg.h\n    ${HDF5_SRC_DIR}/H5EAprivate.h\n\n    ${HDF5_SRC_DIR}/H5ESpkg.h\n    ${HDF5_SRC_DIR}/H5ESprivate.h\n\n    ${HDF5_SRC_DIR}/H5Fpkg.h\n    ${HDF5_SRC_DIR}/H5Fprivate.h\n\n    ${HDF5_SRC_DIR}/H5FApkg.h\n    ${HDF5_SRC_DIR}/H5FAprivate.h\n\n    ${HDF5_SRC_DIR}/H5FDmirror_priv.h\n    ${HDF5_SRC_DIR}/H5FDpkg.h\n    ${HDF5_SRC_DIR}/H5FDprivate.h\n\n    ${HDF5_SRC_DIR}/H5FLprivate.h\n\n    ${HDF5_SRC_DIR}/H5FOprivate.h\n\n    ${HDF5_SRC_DIR}/H5FSpkg.h\n    ${HDF5_SRC_DIR}/H5FSprivate.h\n\n    ${HDF5_SRC_DIR}/H5Gpkg.h\n    ${HDF5_SRC_DIR}/H5Gprivate.h\n\n    ${HDF5_SRC_DIR}/H5HFpkg.h\n    ${HDF5_SRC_DIR}/H5HFprivate.h\n\n    ${HDF5_SRC_DIR}/H5HGpkg.h\n    ${HDF5_SRC_DIR}/H5HGprivate.h\n\n    ${HDF5_SRC_DIR}/H5HLpkg.h\n    ${HDF5_SRC_DIR}/H5HLprivate.h\n\n    ${HDF5_SRC_DIR}/H5HPprivate.h\n\n    ${HDF5_SRC_DIR}/H5Ipkg.h\n    ${HDF5_SRC_DIR}/H5Iprivate.h\n\n    ${HDF5_SRC_DIR}/H5Lpkg.h\n    ${HDF5_SRC_DIR}/H5Lprivate.h\n\n    ${HDF5_SRC_DIR}/H5Mpkg.h\n    ${HDF5_SRC_DIR}/H5Mprivate.h\n\n    ${HDF5_SRC_DIR}/H5MFpkg.h\n    ${HDF5_SRC_DIR}/H5MFprivate.h\n\n    ${HDF5_SRC_DIR}/H5MMprivate.h\n\n    ${HDF5_SRC_DIR}/H5MPpkg.h\n    ${HDF5_SRC_DIR}/H5MPprivate.h\n\n    ${HDF5_SRC_DIR}/H5Opkg.h\n    ${HDF5_SRC_DIR}/H5Oprivate.h\n    ${HDF5_SRC_DIR}/H5Oshared.h\n\n    ${HDF5_SRC_DIR}/H5Ppkg.h\n    ${HDF5_SRC_DIR}/H5Pprivate.h\n\n    ${HDF5_SRC_DIR}/H5PBprivate.h\n    ${HDF5_SRC_DIR}/H5PBpkg.h\n\n    ${HDF5_SRC_DIR}/H5PLpkg.h\n    ${HDF5_SRC_DIR}/H5PLprivate.h\n\n    ${HDF5_SRC_DIR}/H5Rpkg.h\n    ${HDF5_SRC_DIR}/H5Rprivate.h\n\n    ${HDF5_SRC_DIR}/H5RSprivate.h\n\n    ${HDF5_SRC_DIR}/H5Spkg.h\n    ${HDF5_SRC_DIR}/H5Sprivate.h\n\n    ${HDF5_SRC_DIR}/H5SLprivate.h\n\n    ${HDF5_SRC_DIR}/H5SMpkg.h\n    ${HDF5_SRC_DIR}/H5SMprivate.h\n\n    ${HDF5_SRC_DIR}/H5Tpkg.h\n    ${HDF5_SRC_DIR}/H5Tprivate.h\n\n    ${HDF5_SRC_DIR}/H5TSprivate.h\n\n    ${HDF5_SRC_DIR}/H5UCprivate.h\n\n    ${HDF5_SRC_DIR}/H5VLnative_private.h\n    ${HDF5_SRC_DIR}/H5VLpkg.h\n    ${HDF5_SRC_DIR}/H5VLprivate.h\n\n    ${HDF5_SRC_DIR}/H5VMprivate.h\n\n    ${HDF5_SRC_DIR}/H5WBprivate.h\n\n    ${HDF5_SRC_DIR}/H5Zpkg.h\n    ${HDF5_SRC_DIR}/H5Zprivate.h\n\n    ${HDF5_SRC_DIR}/H5win32defs.h\n\n    ${HDF5_SRC_DIR}/uthash.h\n)\n\nset (H5_GENERATED_HEADERS\n    ${HDF5_SRC_DIR}/H5Edefin.h\n    ${HDF5_SRC_DIR}/H5Einit.h\n    ${HDF5_SRC_DIR}/H5Epubgen.h\n    ${HDF5_SRC_DIR}/H5Eterm.h\n    ${HDF5_SRC_DIR}/H5version.h\n    ${HDF5_SRC_DIR}/H5overflow.h\n)\n\nset (H5_PUBLIC_GENERATED_HEADERS\n    ${HDF5_SRC_DIR}/H5Epubgen.h\n    ${HDF5_SRC_DIR}/H5version.h\n    ${HDF5_SRC_DIR}/H5overflow.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting VPIC Module Properties\nDESCRIPTION: Sets properties for the VPIC module, specifically defining the symbol for exports.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/vtkvpic/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(vpic\n  PROPERTIES\n    DEFINE_SYMBOL VPIC_EXPORTS)\n```\n\n----------------------------------------\n\nTITLE: Generating System Configuration Summary\nDESCRIPTION: This snippet creates a summary of the built modules for the `TestSystemInformation` test by writing to a designated summary file. It sorts and appends information about each module, indicating whether it is third party or internal.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(system_info_file \"${CMAKE_BINARY_DIR}/Testing/Temporary/ConfigSummary.txt\")\nfile(WRITE \"${system_info_file}\")\nset(built_modules \"${vtk_modules}\")\nlist(SORT built_modules)\nforeach (module IN LISTS built_modules)\n  get_property(is_third_party GLOBAL\n    PROPERTY \"_vtk_module_${module}_third_party\")\n  if (is_third_party)\n    if (VTK_MODULE_USE_EXTERNAL_${module})\n      set(module_text \"${module} (external)\")\n    else ()\n      set(module_text \"${module} (internal)\")\n    endif ()\n  else ()\n    set(module_text \"${module}\")\n  endif ()\n  file(APPEND \"${system_info_file}\"\n    \"${module_text}\\n\")\nendforeach ()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Widget Tests with CMake\nDESCRIPTION: Configures a set of Python-based tests for VTK widgets and interactive components. Tests are only added if onscreen rendering is supported and offscreen rendering is not set as default. Includes various widget tests like camera orientation, image plane, box widget, and tensor visualization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkOpenGLOptions)\nif(vtk_can_do_onscreen AND NOT VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\n  vtk_add_test_python(\n    TestCameraOrientationWidget.py\n    TestImagePlaneWidget.py\n    TestBoxWidget.py\n    TestImplicitImageRepresentation.py\n    TestInteractivePlaneCutter.py\n    TestInteractorEventRecorder.py\n    TestMagnifierWidget.py\n    TestPointCloudWidget.py\n    TestPointCloudWidget2.py\n    TestSphereWidget.py,LOOSE_VALID\n    TestTensorWidget.py\n    TestTensorWidget2.py\n    TestTextWidget.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing vtk_diy2.h Header File\nDESCRIPTION: This CMake code installs the configured `vtk_diy2.h` header file using `vtk_module_install_headers`. This ensures that the header file is placed in the correct installation directory, making it accessible to other modules or projects that depend on VTK::diy2.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_diy2.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test in CMake\nDESCRIPTION: This snippet uses `ExternalData_add_test` to define a test that relies on external data. It specifies the test name, command to execute (including arguments), and input/output data paths. The arguments configure the `TestSurfaceLIC` executable with parameters for camera configuration, data input, vector fields, and LIC-specific settings like step size, noise generation, contrast enhancement, and masking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedContrastEnhancedSmallGrainMask\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICCurvedContrastEnhancedSmallGrainMask.png,:}\"\n    --camera-config=1\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/disk_out_ref_surface.vtp}\n    --vectors=V\n    --normalize-vectors=0\n    --step-size=0.5\n    --num-steps=800\n    --generate-noise-texture=1\n    --noise-texture-size=200\n    --noise-grain-size=1\n    --number-of-noise-levels=1024\n    --enhance-contrast=1\n    --low-lic-contrast-enhancement-factor=0.05\n    --color-mode=1\n    --map-mode-bias=0.05\n    --mask-intensity=0.2\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingLOD Module Classes and Tests\nDESCRIPTION: Defines LODActor classes and sets up the VTK RenderingLOD module with test mangling configuration. Includes vtkLODActor and vtkQuadricLODActor class definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LOD/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkLODActor\n  vtkQuadricLODActor)\n\nvtk_module_add_module(VTK::RenderingLOD\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::RenderingLOD)\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for Non-Windows Builds\nDESCRIPTION: This snippet sets various properties for the Expat library on non-Windows platforms, including versioning and shared library settings. It also ensures compatibility with specific CMake versions on Apple platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles installation\nset(LIBCURRENT 11)  # sync\nset(LIBREVISION 1)  # with\nset(LIBAGE 10)      # configure.ac!\nmath(EXPR LIBCURRENT_MINUS_AGE \"${LIBCURRENT} - ${LIBAGE}\")\n\nif(NOT WIN32)\n    set_property(TARGET expat PROPERTY VERSION ${LIBCURRENT_MINUS_AGE}.${LIBAGE}.${LIBREVISION})\n    set_property(TARGET expat PROPERTY SOVERSION ${LIBCURRENT_MINUS_AGE})\n    set_property(TARGET expat PROPERTY NO_SONAME ${NO_SONAME})\n\n    if(APPLE)\n        if(NOT CMAKE_VERSION VERSION_GREATER_EQUAL 3.17)\n            message(FATAL_ERROR \"Expat requires CMake >=3.17 on platform \\\"APPLE\\\".\")\n        endif()\n\n        # NOTE: This intends to talk CMake into compatibility with GNU Libtool\n        math(EXPR _EXPAT_MACHO_COMPATIBILITY_VERSION \"${LIBCURRENT} + 1\")\n        set(_EXPAT_MACHO_CURRENT_VERSION \"${_EXPAT_MACHO_COMPATIBILITY_VERSION}.${LIBREVISION}\")\n        set_property(TARGET expat PROPERTY MACHO_COMPATIBILITY_VERSION ${_EXPAT_MACHO_COMPATIBILITY_VERSION})\n        set_property(TARGET expat PROPERTY MACHO_CURRENT_VERSION ${_EXPAT_MACHO_CURRENT_VERSION})\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly Build Options\nDESCRIPTION: Sets Emscripten-specific link options for WebAssembly compilation, including modular export and memory growth\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(emscripten_link_options)\n\nlist(APPEND emscripten_link_options\n  \"-lembind\"\n  \"SHELL:-s WASM=1\"\n  \"SHELL:-s EXPORT_NAME=createWrappedMaceModule\"\n  \"SHELL:-s MODULARIZE=1\"\n  \"SHELL:-s ENVIRONMENT=web\"\n  \"SHELL:-s ALLOW_MEMORY_GROWTH=1\"\n)\n\ntarget_link_options(WrappedMace\n  PUBLIC\n    ${emscripten_link_options}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Rendering Scene Graph C++ Tests\nDESCRIPTION: This CMake command adds C++ test cases for the VTK Rendering Scene Graph module. It specifies the test file 'UnitTests.cxx' with no data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/SceneGraph/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingSceneGraphCxxTests tests\n  UnitTests.cxx,NO_DATA,NO_VALID,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parallel MPI Tests in VTK with CMake\nDESCRIPTION: Configures VTK tests that utilize MPI for parallel processing, highlighting the setup of a specific test executable and the number of processes required. It includes checks to ensure the TARGET is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  set(TestAMReXParticlesReader_NUMPROCS 3)\n  vtk_add_test_mpi(vtkIOAMRCxxTests-MPI tests\n    TESTING_DATA\n    TestAMReXParticlesReader.cxx,NO_VALID,NO_OUTPUT\n    )\n  vtk_test_cxx_executable(vtkIOAMRCxxTests-MPI tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering CGNS Test Data Files in VTK Module\nDESCRIPTION: This snippet registers multiple CGNS (CFD General Notation System) data files to be used for testing VTK's CGNS reader functionality. The files represent various CGNS features including boundary conditions, grids, elements, and temporal data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CGNS/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/BCDirichletStructured.cgns\n  Data/BCNeumannUnstructured.cgns\n  Data/bc_struct.cgns\n  Data/BoxWithFaceData.cgns\n  Data/channelBump_solution.cgns\n  Data/EngineSector.cgns\n  Data/Example_fields.cgns\n  Data/Example_grids.cgns\n  Data/Example_mixed.cgns\n  Data/Example_nface_n.cgns\n  Data/Example_ngon_pe.cgns\n  Data/Example_ngon_2d_base.cgns\n  Data/HO_hexa_elem.cgns\n  Data/MissingBase.cgns\n  Data/MixedElementNodes.cgns\n  Data/TemporalBox.cgns\n  Data/TemporalBox_1.cgns\n  Data/TemporalBox_2.cgns\n  Data/test_cylinder.cgns\n  Data/test_node_and_cell.cgns\n  Data/UserDefinedData.cgns)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Inclusion in CMake\nDESCRIPTION: This snippet conditionally includes the Python subdirectory based on the 'VTK_WRAP_PYTHON' flag, enabling Python bindings and related functionality in the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\\n  add_subdirectory(Python)\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Module Test Data in CMake\nDESCRIPTION: This snippet defines the test data files for the VTK module using the 'vtk_module_test_data' function. It lists multiple files required for testing, which are essential for ensuring the functionality of the module during testing phases.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\\n  Data/NE2_ps_bath_small.jpg\\n  Data/political.vtp\\n  Data/usa_image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Version Header Configuration\nDESCRIPTION: This snippet configures the `version.h` header file using `configure_file`, replacing variables with their actual values during the configuration process. It also installs the generated header file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(src/version.h.in include/kwiml/version.h @ONLY)\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/include/kwiml/version.h\n  DESTINATION ${KWIML_INSTALL_INCLUDE_DIR}/kwiml\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Module Classes\nDESCRIPTION: This snippet defines a list of classes associated with the VTK module. Specifically, it includes 'DatabaseSchemaWith2Tables', which is likely a class used for database schema testing within the VTK framework. This list of classes is used when defining the module later.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/IOSQL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  DatabaseSchemaWith2Tables)\n```\n\n----------------------------------------\n\nTITLE: Adding CXX Tests for VTK SQLite IO\nDESCRIPTION: This snippet adds C++ test files related to the VTK IOSQL functionality to the testing suite. It specifies the source files for the tests and sets properties regarding data and output expectations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOSQLCxxTests tests\n  NO_VALID\n  TestSQLDatabaseSchema.cxx\n  TestSQLiteDatabase.cxx\n  TestSQLiteTableReadWrite.cxx,NO_DATA,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Theora Header Files for VTK in CMake\nDESCRIPTION: Sets up the header files for the Theora integration with VTK. Generates a configured header file and installs it to the appropriate location for use in the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_theora.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_theora.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_theora.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests with CMake\nDESCRIPTION: This snippet adds a C++ test for the VTK project using CMake. It specifies the test target, additional options such as NO_DATA, NO_VALID, and NO_OUTPUT, and the test file TestIncludePNG.cxx. It is essential to have CMake installed and configured correctly for this to work. The inputs include the test file names, and it doesn't require additional data files. The function does not return any output directly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkpngCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludePNG.cxx)\n```\n\n----------------------------------------\n\nTITLE: Building Example Programs\nDESCRIPTION: This snippet sets up executable targets for example programs in C that demonstrate how to use the Expat library. Each example is linked to the Expat library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_BUILD_EXAMPLES)\n    foreach(_target element_declarations elements outline)\n        add_executable(${_target} examples/${_target}.c)\n        set_property(TARGET ${_target} PROPERTY RUNTIME_OUTPUT_DIRECTORY examples)\n        target_link_libraries(${_target} expat)\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: VTK Module Test Data Configuration\nDESCRIPTION: This snippet uses the `vtk_module_test_data` function to specify test data files for a VTK module. The `Data/FiberSurface/` argument specifies the directory containing the data files, and the `REGEX:.*\\.vtk` argument specifies a regular expression to match the data files (in this case, all files ending in `.vtk`).\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Topology/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"vtk_module_test_data(\n  Data/FiberSurface/,REGEX:.*\\.vtk)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Statistics C++ Tests in CMake\nDESCRIPTION: This snippet sets up C++ tests for the VTK Filters Statistics module using CMake commands. It defines regular tests and tests without data, valid output, or expected output. The tests are then combined and an executable is created for running all the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersStatisticsCxxTests tests\n  TestLengthDistribution.cxx,NO_VALID,NO_OUTPUT\n)\n\nvtk_add_test_cxx(vtkFiltersStatisticsCxxTests no_data_tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestAutoCorrelativeStatistics.cxx\n  TestComputeQuantiles.cxx\n  TestComputeQuartiles.cxx\n  TestContingencyStatistics.cxx\n  TestCorrelativeStatistics.cxx\n  TestDescriptiveStatistics.cxx\n  TestExtractFunctionalBagPlot.cxx\n  TestExtractHistogram.cxx\n  TestHighestDensityRegionsStatistics.cxx\n  TestKMeansStatistics.cxx\n  TestMultiCorrelativeStatistics.cxx\n  TestOrderStatistics.cxx\n  TestPCAStatistics.cxx\n)\nset(all_tests ${tests} ${no_data_tests})\nvtk_test_cxx_executable(vtkFiltersStatisticsCxxTests all_tests)\n```\n\n----------------------------------------\n\nTITLE: Configure AndroidManifest.xml\nDESCRIPTION: Configures the AndroidManifest.xml file by copying it from the source directory to the binary directory.  `COPYONLY` means variables in the file are not processed, it's a direct copy.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/AndroidManifest.xml\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/AndroidManifest.xml\"\n  COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK Module\nDESCRIPTION: Applies test name mangling to the VTK TestingGenericBridge module to support testing configurations\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/GenericBridge/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::TestingGenericBridge)\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Shader Files for VTK Cell Grid Rendering\nDESCRIPTION: Lists the GLSL shader files used by the RenderingCellGrid module. These shaders provide the rendering capabilities for cell grids including vertex, fragment, and tessellation functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(shader_files\n  glsl/vtkCellGridShaderBases.glsl\n  glsl/vtkCellGridShaderCommonDefs.glsl\n  glsl/vtkCellGridShaderFragment.glsl\n  glsl/vtkCellGridShaderTessellationControl.glsl\n  glsl/vtkCellGridShaderTessellationDebugGeometry.glsl\n  glsl/vtkCellGridShaderTessellationEvaluation.glsl\n  glsl/vtkCellGridShaderUtil.glsl\n  glsl/vtkCellGridShaderVertex.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GLAD Module\nDESCRIPTION: Sets up the VTK GLAD module with appropriate include directories and compile definitions for shared library builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/glad/vtkglad/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::glad\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkglad\")\ntarget_include_directories(glad\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\")\nif (BUILD_SHARED_LIBS)\n  target_compile_definitions(glad\n    PUBLIC\n      \"GLAD_API_CALL_EXPORT\")\n  set_target_properties(glad\n    PROPERTIES\n      DEFINE_SYMBOL \"GLAD_API_CALL_EXPORT_BUILD\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Wrapping and Test Data\nDESCRIPTION: Conditional CMake block that executes when Python wrapping is enabled for VTK. It adds test data files for room visualization scenarios and includes the Python subdirectory in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FLUENTCFF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/room.cas\n    Data/room.dat\n    Data/room.dat.h5\n    Data/room.cas.h5)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Float Header File\nDESCRIPTION: Configures the VTK Fast Float header file by copying and processing the template file to the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkfast_float.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkfast_float.h\")\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK RenderingFreeTypeFontConfig Module\nDESCRIPTION: Sets up a list of classes to be included in the VTK RenderingFreeTypeFontConfig module. Currently, it only includes vtkFontConfigFreeTypeTools.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkFontConfigFreeTypeTools)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Target for XML Test Suite in CMake\nDESCRIPTION: Sets up a custom target 'run-xmltest' that downloads, extracts, and runs the W3C XML test suite. It includes steps for downloading the test suite, extracting it, running tests, and verifying results.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_BUILD_TOOLS AND NOT MSVC)\n    add_custom_target(\n        xmlts-zip-downloaded\n        COMMAND\n            sh -c 'test -f xmlts.zip || wget --output-document=xmlts.zip https://www.w3.org/XML/Test/xmlts20080827.zip'\n        BYPRODUCTS\n            tests/xmlts.zip\n        WORKING_DIRECTORY\n            tests/)\n\n    add_custom_target(\n        xmlts-zip-extracted\n        COMMAND\n            sh -c 'test -d xmlconf || unzip -q xmlts.zip'\n        BYPRODUCTS\n            tests/xmlconf\n        WORKING_DIRECTORY\n            tests/)\n    add_dependencies(xmlts-zip-extracted xmlts-zip-downloaded)\n\n    # ... (additional custom targets for running and verifying tests)\n\n    add_custom_target(run-xmltest)\n    add_dependencies(run-xmltest xmltest-log-verified)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking VTK::diy2 to the fmt library\nDESCRIPTION: This CMake code links the VTK::diy2 module to the `VTK::fmt` library. This ensures that diy2 can use the functionality provided by the fmt library. The fmt library is often used for formatting output.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Link to the fmt library used by VTK\nvtk_module_link(VTK::diy2\n  INTERFACE\n    VTK::fmt)\n```\n\n----------------------------------------\n\nTITLE: Object Factory Declaration - CMake\nDESCRIPTION: This snippet declares object factory overrides for specific OpenGL volume rendering components, allowing customization of behavior in derived classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (opengl_override IN LISTS opengl_overrides)\n  vtk_object_factory_declare(\n    BASE \"vtk${opengl_override}\"\n    OVERRIDE \"vtkOpenGL${opengl_override}\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Defining HDF5 Attribute Source Files in CMake\nDESCRIPTION: Sets CMake variables containing lists of source and header files for the HDF5 attribute module (H5A). Includes files like H5A.c, H5Abtree2.c, H5Apublic.h, etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset (H5A_SOURCES\n    ${HDF5_SRC_DIR}/H5A.c\n    ${HDF5_SRC_DIR}/H5Abtree2.c\n    ${HDF5_SRC_DIR}/H5Adense.c\n    ${HDF5_SRC_DIR}/H5Adeprec.c\n    ${HDF5_SRC_DIR}/H5Aint.c\n    ${HDF5_SRC_DIR}/H5Atest.c\n)\n\nset (H5A_HDRS\n    ${HDF5_SRC_DIR}/H5Apublic.h\n)\nIDE_GENERATED_PROPERTIES (\"H5A\" \"${H5A_HDRS}\" \"${H5A_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Finding OpenTURNS Package in CMake\nDESCRIPTION: Finds the OpenTURNS package with a minimum version requirement of 1.12. It's set as a private dependency if the module is shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE OpenTURNS\n  VERSION 1.12)\n```\n\n----------------------------------------\n\nTITLE: Including External Data in VTK Projects\nDESCRIPTION: This section manages the inclusion of external data required for VTK tests and setups a target for downloading necessary data, ensuring all referenced data in tests is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/External/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_Add_Target(VTKData)\n```\n\n----------------------------------------\n\nTITLE: Project Source Files Configuration\nDESCRIPTION: Lists the project source files including main C++ source, QML file, and QML resource file\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickCone/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PROJECT_SOURCES\n  main.cpp\n  main.qml\n  qml.qrc\n)\n```\n\n----------------------------------------\n\nTITLE: GL2PS Integration Features List\nDESCRIPTION: A markdown list detailing the key modifications made to GL2PS for VTK integration, including build system changes, dependency management, and symbol mangling specifications.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/vtkgl2ps/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  * Add gitattributes to skip commit checks in VTK.\n  * Use VTK's zlib and png libraries.\n  * Integrate the CMake build with VTK's module system.\n  * Mangle all exported symbols to have a `vtkgl2ps_` prefix.\n  * Use VTK's glad library.\n```\n\n----------------------------------------\n\nTITLE: Setting Headers for VTK::GUISupportQt Module\nDESCRIPTION: This snippet defines the list of public header files that will be included in the VTK::GUISupportQt module's interface. These headers define the public API of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  QVTKRenderWidget.h\n  QVTKWin32Header.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Validated Tests for VTK Interaction Widgets\nDESCRIPTION: Configures a set of C++ tests that don't require visual validation for VTK's interaction widgets. These tests focus on API functionality and behavior rather than visual appearance.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkInteractionWidgetsCxxTests no_valid_tests\n  NO_VALID\n  TestEqualizerContextItem.cxx\n  vtkAngleRepresentation2DTest1.cxx\n  vtkAngleRepresentation3DTest1.cxx\n  vtkAngleWidgetTest1.cxx\n  vtkBalloonRepresentationTest1.cxx\n  vtkBalloonWidgetTest1.cxx\n  vtkBiDimensionalRepresentation2DTest1.cxx\n  vtkBiDimensionalWidgetTest1.cxx\n  vtkBorderWidgetTest1.cxx\n  vtkCameraPathRepresentationTest1.cxx\n  vtkCaptionRepresentationTest1.cxx\n  vtkCaptionWidgetTest1.cxx\n  vtkConstrainedPointHandleRepresentationTest1.cxx\n  vtkHoverWidgetTest1.cxx\n  vtkImplicitPlaneRepresentationTest1.cxx\n  vtkImplicitPlaneWidget2Test1.cxx\n  vtkLineRepresentationTest1.cxx\n  vtkLineWidget2Test1.cxx\n  vtkPointHandleRepresentation2DTest1.cxx\n  # vtkPointHandleRepresentation3DTest1.cxx disabled\n  vtkPolyLineRepresentationTest1.cxx\n  vtkPolyLineWidgetTest1.cxx\n  vtkResliceCursorRepresentationTest1.cxx\n  vtkSeedRepresentationTest1.cxx\n  vtkSeedWidgetTest1.cxx\n  # vtkSphereHandleRepresentationTest1.cxx disabled\n  vtkSplineRepresentationTest1.cxx\n  vtkSplineWidget2Test1.cxx\n  vtkTextRepresentationTest1.cxx\n  vtkTextWidgetTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingRayTracing Module in CMake\nDESCRIPTION: Adds the VTK RenderingRayTracing module to the build, specifying classes, sources, and headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingRayTracing\n  HEADER_DIRECTORIES\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source} ${sources}\n  NOWRAP_CLASSES  ${nowrap_classes}\n  NOWRAP_HEADERS  ${nowrap_headers}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Find Android Executable\nDESCRIPTION: Finds the Android command-line tool, typically used for managing Android projects and SDKs. If the tool is not found, it will terminate CMake with a fatal error.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(ANDROID_EXECUTABLE\n  NAMES android\n  DOC   \"The android command-line tool\")\nif(NOT ANDROID_EXECUTABLE)\n  message(FATAL_ERROR \"Can not find android command line tool: android\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Use of Select for KWSys\nDESCRIPTION: Conditionally sets a compile flag for ProcessUNIX.c to use select if KWSYS_PROCESS_USE_SELECT is defined.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED KWSYS_PROCESS_USE_SELECT)\n  get_property(ProcessUNIX_FLAGS SOURCE ProcessUNIX.c PROPERTY COMPILE_FLAGS)\n  set_property(SOURCE ProcessUNIX.c PROPERTY COMPILE_FLAGS \"${ProcessUNIX_FLAGS} -DKWSYSPE_USE_SELECT=${KWSYSPE_USE_SELECT}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking the VTK::IOMySQL Module\nDESCRIPTION: This snippet links the VTK::IOMySQL module with the MySQL library.  `NO_KIT_EXPORT_IF_SHARED` prevents exporting the library if the module is shared. `PRIVATE` specifies that this is a private dependency.  `MySQL::MySQL` is the target name for the MySQL library, which is found by `find_package` and defined by the MySQL package's CMake configuration files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_link(VTK::IOMySQL\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    MySQL::MySQL)\n```\n\n----------------------------------------\n\nTITLE: Final Build Setup for XDMF2\nDESCRIPTION: Sets up include directories, checks endianness, and adds the libsrc subdirectory to the build process. This is the final configuration section for the XDMF2 build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#setup build\ninclude_directories(\n  ${xdmf2_SOURCE_DIR}/libsrc\n  ${xdmf2_BINARY_DIR}/libsrc\n  )\n\ninclude(TestBigEndian)\ntest_big_endian(CMAKE_WORDS_BIGENDIAN)\n\nadd_subdirectory(libsrc)\n```\n\n----------------------------------------\n\nTITLE: Defining Third Party UTF-8 Module - CMake\nDESCRIPTION: This snippet defines a third-party module for VTK that uses the utf8cpp library. It specifies license information, download location, version, and include directories, facilitating header-only usage and installation in an internal context.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/utf8/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    HEADER_ONLY\n    LICENSE_FILES\n      \"vtkutf8/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"BSL-1.0\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright 2006 Nemanja Trifunovic\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/utfcpp.git@for/vtk-20181015-2.3.4\"\n    VERSION       \"2.3.4\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE utf8cpp\n    TARGETS utf8cpp::utf8cpp\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests for VTK using CMake\nDESCRIPTION: This CMake snippet adds three Python test files to the VTK test suite. It uses the vtk_add_test_python command, which is likely a custom CMake function defined for the VTK project. The tests include OverlayTextOnImage.py, multiLineText.py, and text.py (with a LOOSE_VALID flag).\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  OverlayTextOnImage.py\n  multiLineText.py\n  text.py,LOOSE_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzz Target Builds for Expat in CMake\nDESCRIPTION: Sets up build configuration for fuzz targets when EXPAT_BUILD_FUZZERS is enabled. It checks for Clang compiler, sanitizer flags, and sets up fuzz targets for different encoding types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_BUILD_FUZZERS)\n    if(NOT \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Clang\")\n        message(SEND_ERROR\n            \"Building fuzz targets without Clang (but ${CMAKE_C_COMPILER_ID}) \"\n            \"is not supported. Please set \"\n            \"-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++.\")\n    endif()\n\n    string(FIND \"${CMAKE_C_FLAGS}\" \"-fsanitize\" sanitizer_present)\n    if(${sanitizer_present} EQUAL \"-1\")\n        message(WARNING\n            \"There was no sanitizer present when building the fuzz targets. \"\n            \"This is likely in error - consider adding \"\n            \"-DCMAKE_C_FLAGS='-fsanitize=<sanitizer>' and \"\n            \"-DCMAKE_CXX_FLAGS='-fsanitize=<sanitizer>' and \"\n            \"-DCMAKE_EXE_LINKER_FLAGS='-fsanitize=<sanitizer>' and \"\n            \"-DCMAKE_MODULE_LINKER_FLAGS='-fsanitize=<sanitizer>' and \"\n            \"-DCMAKE_SHARED_LINKER_FLAGS='-fsanitize=<sanitizer>' to your cmake \"\n            \"execution.\")\n    endif()\n\n    # ... (additional code for fuzz target setup)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Wrapping Subdirectory Inclusion in CMake for VTK\nDESCRIPTION: This CMake snippet checks if Python wrapping is enabled for VTK using the VTK_WRAP_PYTHON variable. If true, it adds the Python subdirectory to the build process, allowing for Python bindings to be generated for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Python/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Getting serialization manager dependencies\nDESCRIPTION: This snippet retrieves the public and optional dependencies for the `VTK::SerializationManager` module from global properties. These dependencies are used in subsequent steps to configure the module's build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(_vtk_serialization_manager_public_deps GLOBAL\n  PROPERTY \"_vtk_module_VTK::SerializationManager_depends\")\nget_property(_vtk_serialization_manager_optional_deps GLOBAL\n  PROPERTY \"_vtk_module_VTK::SerializationManager_optional_depends\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Infrastructure\nDESCRIPTION: Sets up regression testing infrastructure including external data handling and test cases for the example programs.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/IO/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  include(CTest)\n  if (TARGET VTK::TestingRendering)\n    set(ExternalData_BINARY_ROOT ${CMAKE_CURRENT_BINARY_DIR}/ExternalData)\n\n    list(APPEND ExternalData_URL_TEMPLATES\n      \"https://data.kitware.com/api/v1/file/hashsum/%(algo)/%(hash)/download\"\n      \"https://www.vtk.org/files/ExternalData/%(algo)/%(hash)\"\n    )\n    include(ExternalData)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Test Process Count and Source Files for VTK Filters Parallel Geometry\nDESCRIPTION: Sets the number of MPI processes to 4 and defines the source files for the tests. This configuration is used for the main test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkFiltersParallelGeometryCxxTests-MPI_NUMPROCS 4)\nset(Tests_SRCS\n  TestPStructuredGridConnectivity.cxx)\n```\n\n----------------------------------------\n\nTITLE: VTK Module Auto-Initialization for Rendering\nDESCRIPTION: Initializes factory classes for VTK rendering modules, specifically ensuring RenderingOpenGL2 implementations are used with RenderingCore\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Examples/Cxx/Ex2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS vtkmyEx2\n  MODULES VTK::RenderingCore VTK::RenderingOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Insert CMake module path\nDESCRIPTION: This snippet adds a directory containing CMake modules to the `CMAKE_MODULE_PATH` variable, allowing CMake to find custom modules in that directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(INSERT CMAKE_MODULE_PATH 0\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Unity Build for Specific Source Files\nDESCRIPTION: Configures certain source files to be excluded from Unity build process to prevent potential compilation issues\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(SOURCE hpdf_shading.c hpdf_font_tt.c hpdf_fontdef_tt.c\n  PROPERTY\n    SKIP_UNITY_BUILD_INCLUSION ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Xdmf Module with CMake\nDESCRIPTION: This CMake snippet defines a set of classes for VTK's Xdmf IO operations, specifies non-wrappable classes, and adds a module. The module configuration enhances data handling in VTK and ensures proper testing capabilities. Prerequisites include a valid CMake installation and a compatible VTK environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkSILBuilder\n  vtkXdmfDataArray\n  vtkXdmfReader\n  vtkXdmfWriter)\n\nset(nowrap_classes\n  vtkXdmfHeavyData\n  vtkXdmfReaderInternal)\n\nvtk_module_add_module(VTK::IOXdmf2\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes})\nvtk_add_test_mangling(VTK::IOXdmf2)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Tests Directory Include\nDESCRIPTION: Conditionally adds the C++ tests subdirectory if C++ testing is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Data Inclusion for VTK\nDESCRIPTION: This CMake snippet includes the vtk_module_test_data function when the VTK::ParallelMPI target is available. It adds the test data file located at Data/uGridEx.vtk and sets up a subdirectory for additional C++ sources.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n  vtk_module_test_data(\n    Data/uGridEx.vtk)\n\n  add_subdirectory(Cxx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK::GUISupportQt\nDESCRIPTION: This snippet uses `vtk_add_test_mangling` to add test mangling for the VTK::GUISupportQt module. Test mangling is a technique used to avoid name collisions between test executables and the libraries they test. This is important for ensuring that tests can be run reliably.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::GUISupportQt)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingMatplotlib Module in CMake\nDESCRIPTION: This CMake script configures the VTK RenderingMatplotlib module. It sets up classes, declares object factory overrides, and adds the module to the VTK build system. It also specifies a dependency on matplotlib Python module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkMatplotlibMathTextUtilities)\n\nvtk_object_factory_declare(\n  BASE      vtkMathTextUtilities\n  OVERRIDE  vtkMatplotlibMathTextUtilities)\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGMATPLOTLIB_EXPORT\")\n\nvtk_module_add_module(VTK::RenderingMatplotlib\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\n\nset_property(GLOBAL APPEND\n  PROPERTY\n    vtk_required_python_modules \"matplotlib>=2.0.0\")\nvtk_add_test_mangling(VTK::RenderingMatplotlib)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Test for OutOfRangeColorTransferFunction\nDESCRIPTION: This snippet configures a VTK Python test for TestOutOfRangeColorTransferFunction with command-line arguments to use below and above range colors.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestOutOfRangeColorTransferFunction.py --useBelowRangeColor --useAboveRangeColor\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingGL2PSOpenGL2 Module\nDESCRIPTION: Adds the VTK::RenderingGL2PSOpenGL2 module to the project. It specifies the classes, sources, and private headers to be included in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingGL2PSOpenGL2\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::RenderingGL2PSOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Library Target for VTK\nDESCRIPTION: Sets up the vtkhdf5_src library target with appropriate include directories, compilation definitions, and link libraries. This snippet is specific to building HDF5 as part of VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(vtkhdf5_src ${common_SRCS} H5build_settings.c ${H5_PUBLIC_HEADERS} ${H5_PRIVATE_HEADERS} ${H5_GENERATED_HEADERS})\ntarget_include_directories(vtkhdf5_src\n  PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}\n    ${HDF5_BINARY_DIR}\n  PUBLIC\n    \"$<BUILD_INTERFACE:${HDF5_BINARY_DIR}>\"\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkhdf5>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkhdf5/src>\")\nvtk_module_install_headers(\n  FILES   ${H5_PUBLIC_HEADERS}\n          ${H5_GENERATED_HEADERS}\n  SUBDIR  \"vtkhdf5/src\")\nif (BUILD_SHARED_LIBS)\n  target_compile_definitions(vtkhdf5_src\n    PUBLIC\n      H5_BUILT_AS_DYNAMIC_LIB\n    PRIVATE\n      hdf5_shared_EXPORTS)\nendif ()\ntarget_link_libraries(vtkhdf5_src\n  PRIVATE\n    VTK::zlib)\n_vtk_module_apply_properties(vtkhdf5_src)\n_vtk_module_install(vtkhdf5_src)\n\nset(_vtk_add_module_output_name \"vtkhdf5\")\nif (_vtk_build_LIBRARY_NAME_SUFFIX)\n  string(APPEND _vtk_add_module_output_name \"-${_vtk_build_LIBRARY_NAME_SUFFIX}\")\nendif ()\n\nset_target_properties(vtkhdf5_src\n  PROPERTIES\n    OUTPUT_NAME \"${_vtk_add_module_output_name}\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module for IOParallelXdmf3\nDESCRIPTION: This snippet adds a VTK module named VTK::IOParallelXdmf3, which includes the classes, sources, and private headers necessary for parallel XDMF3 IO operations. It utilizes the vtk_module_add_module macro to configure the module's components and vtk_add_test_mangling to add test mangling for the module. This configuration is crucial for setting up modular development and testing in a VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXdmf3/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOParallelXdmf3\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOParallelXdmf3)\n```\n\n----------------------------------------\n\nTITLE: Listing KissFFT Modifications for VTK Integration\nDESCRIPTION: A bulleted list of the key modifications made to KissFFT for VTK integration. These changes include ignoring whitespace errors, integrating with VTK's module system, mangling symbols to avoid conflicts, and exporting symbols.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n  * ignore whitespace errors\n  * integrate with VTK's module system\n  * mangle symbols\n  * export symbols\n```\n\n----------------------------------------\n\nTITLE: Adding C++ tests with vtk_add_test_cxx\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` macro to add a C++ test named `vtkRenderingParallelCxxTests`.  It specifies the source files to be included in the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingParallelCxxTests tests\n  PrmMagnify.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Tests Configuration\nDESCRIPTION: Adds Python-specific test data and subdirectory when Python wrapping is enabled in VTK build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/can.ex2\n  )\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ParallelMPI4Py Module\nDESCRIPTION: Configures the VTK ParallelMPI4Py module by defining classes and adding module configuration with test mangling. Sets up vtkMPI4PyCommunicator as the main class component.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI4Py/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMPI4PyCommunicator)\n\nvtk_module_add_module(VTK::ParallelMPI4Py\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ParallelMPI4Py)\n```\n\n----------------------------------------\n\nTITLE: Finalizing VTK IO Image Test Executable Configuration in CMake\nDESCRIPTION: Combines all defined tests and configures the final test executable for VTK IO Image tests with appropriate runtime settings including floating point exception handling and rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${data_tests}\n  ${tests}\n  )\n\nvtk_test_cxx_executable(vtkIOImageCxxTests all_tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Component Source Files for XDMF\nDESCRIPTION: Sets up source file lists for optional XDMF components including GZip compression, MPI support, and MySQL database connectivity.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset( XdmfGzipSource\n  gzstream\n  )\n\nset( XdmfMpiSource\n  XdmfDsmCommMpi\n  )\n\nset( XdmfMySQLSource\n  XdmfValuesMySQL\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding LZ4 Test Case using CMake\nDESCRIPTION: This snippet uses the vtk_add_test_cxx function to add a test case for the LZ4 compression library. The test is named vtklz4CxxTests and will utilize the source file TestIncludeLZ4.cxx. The constants NO_DATA, NO_VALID, and NO_OUTPUT are likely configurations for the test execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtklz4CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeLZ4.cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test Data File\nDESCRIPTION: Registers a test data file (vase_1comp.vti) with the VTK module testing system, enabling its use in test scenarios\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/vase_1comp.vti)\n```\n\n----------------------------------------\n\nTITLE: Configuring ParticleReader Executable\nDESCRIPTION: Sets up the build target for the ParticleReader example program with VTK dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/IO/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(ParticleReader MACOSX_BUNDLE\n  ParticleReader.cxx)\ntarget_link_libraries(ParticleReader\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Python Tests in CMake\nDESCRIPTION: This snippet checks if Python wrapping is enabled for VTK and adds the 'Python' subdirectory to the build if it is. It uses the VTK_WRAP_PYTHON variable to determine whether to include Python tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Image/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Managing JNI Include Directories\nDESCRIPTION: Iterates through JNI include directories and adds them as system include paths for the VTK Java module using BUILD_INTERFACE generator expression\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Java/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(jni_include_dir IN LISTS JNI_INCLUDE_DIRS)\n  vtk_module_include(VTK::Java SYSTEM PUBLIC\n    \"$<BUILD_INTERFACE:${jni_include_dir}>\"\n  )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Test for SetTableOutOfRangeLookupTable\nDESCRIPTION: This snippet configures a VTK Python test for TestSetTableOutOfRangeLookupTable with command-line arguments to use below and above range colors.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestSetTableOutOfRangeLookupTable.py --useBelowRangeColor --useAboveRangeColor\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK OpenGL2 Extra Tests\nDESCRIPTION: Configures additional OpenGL2 tests based on render window settings and X Window System usage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(extra_opengl2_tests)\nif (VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\n  list(APPEND extra_opengl2_tests TestOffscreenIsOffscreen.cxx,NO_DATA,NO_VALID)\nendif()\nif (VTK_USE_X)\n  list(APPEND extra_opengl2_tests TestInteractorTimers.cxx,NO_VALID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake snippet configures test data for a VTK module and conditionally adds C++ and Python subdirectories based on build flags. It specifies a test data file and checks for C++ and Python wrapping options before including the respective subdirectories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ComputationalGeometry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/beach.jpg)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory\nDESCRIPTION: Configures the VTK object factory, specifying source and header files, and setting up the export macro for the RenderingFreeTypeFontConfig module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGFREETYPEFONTCONFIG_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GL2PS Module Sources and Headers\nDESCRIPTION: Defines source and header files for the GL2PS module and adds them to VTK using vtk_module_add_module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/vtkgl2ps/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  gl2ps.c)\n\nset(headers\n  gl2ps.h\n  vtk_gl2ps_mangle.h)\n\nvtk_module_add_module(VTK::gl2ps\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkgl2ps\")\n```\n\n----------------------------------------\n\nTITLE: Defining Module Classes\nDESCRIPTION: Sets up the classes for the VTK Parallel Chemistry Domain module, specifically declaring vtkPSimpleBondPerceiver\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPSimpleBondPerceiver)\n```\n\n----------------------------------------\n\nTITLE: Compiling and Linking Executable in CMake\nDESCRIPTION: This snippet creates and links the executable 'MultiCone' with the necessary VTK libraries. It prepares the project binary for building the WebAssembly module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(MultiCone MultiCone.cxx)\ntarget_link_libraries(MultiCone PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Linking OpenCASCADE Libraries\nDESCRIPTION: This part of the file adds the VTK::IOOCCT module and links it with OpenCASCADE libraries. It ensures that if OpenCASCADE version is less than 7.7.0, the appropriate include directories are specified for this module's private use, ensuring proper compilation and linking.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OCCT/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOOCCT\n  CLASSES\n    vtkOCCTReader\n)\n\nvtk_module_link(VTK::IOOCCT\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    ${opencascade_req_targets})\n\n# OpenCASCADE started putting include directory usage requirements in 7.7.0.\n\nif (OpenCASCADE_VERSION VERSION_LESS \"7.7.0\")\n  vtk_module_include(VTK::IOOCCT PRIVATE \"${OpenCASCADE_INCLUDE_DIR}\")\nendif ()\n\nvtk_add_test_mangling(VTK::IOOCCT)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory to VTK Project\nDESCRIPTION: Adds the Cxx subdirectory to the project, typically containing C++ implementation and test files\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TRUCHAS/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding a C++ Test using VTK Macros\nDESCRIPTION: This snippet adds a C++ test case named 'TestIncludeLibHaru.cxx' to the test suite 'tests'. The `NO_DATA`, `NO_VALID`, and `NO_OUTPUT` flags indicate that the test does not require any data files, validation files, or specific output files to be checked.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtklibharuCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeLibHaru.cxx)\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenGL Status\nDESCRIPTION: This snippet uses the `message` command with the `STATUS` argument to display the OpenGL support status. It shows the requested OpenGL status (`tiff-opengl`), its availability (`HAVE_OPENGL`), and the overall OpenGL support status (`OPENGL_SUPPORT`).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"message(STATUS \\\"  OpenGL support:                     Requested:${tiff-opengl} Availability:${HAVE_OPENGL} Support:${OPENGL_SUPPORT}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Running Binary Size Benchmarks\nDESCRIPTION: Shell commands for building and running binary size benchmarks with different build types. Shows configuration for Debug, Release and MinSizeRel builds with shared library support.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ cd build\n# For Debug\n$ cmake -DCMAKE_BUILD_TYPE=Debug \\\n        -DSCN_BENCHMARKS_BINARYSIZE=ON \\\n        -DBUILD_SHARED_LIBS=ON ..\n# For Release and MinSizeRel,\n# add -DCMAKE_BUILD_TYPE=$BUILD_TYPE and\n# -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON\n\n$ cmake --build .\n$ ./benchmark/binarysize/run_binarysize_bench.py ./benchmark/binarysize $BUILD_TYPE\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Output Window Process Generation with CMake\nDESCRIPTION: CMake configuration block that sets up custom command generation for vtkWin32OutputWindowProcessEncoded.c. This is conditional on Windows platform and checks if X Window System is not being used. The command generates an encoded version of the output window process source file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/OutputWindowProcess/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  IF (NOT VTK_USE_X)\n    SET(VTK_OWP_ENCODED_C\n      ${VTK_BINARY_DIR}/Common/vtkWin32OutputWindowProcessEncoded.c)\n    ADD_CUSTOM_COMMAND(\n      OUTPUT ${VTK_OWP_ENCODED_C}\n      COMMAND ${CMAKE_COMMAND}\n      ARGS -G\\\"${CMAKE_GENERATOR}\\\"\n           -H${VTK_SOURCE_DIR}/Utilities/OutputWindowProcess\n           -B${VTK_BINARY_DIR}/Utilities/OutputWindowProcess\n           -DVTK_OWP_OUTPUT=${VTK_OWP_ENCODED_C}\n      DEPENDS ${VTK_SOURCE_DIR}/Utilities/OutputWindowProcess/vtkWin32OutputWindowProcess.c\n      )\n  ENDIF ()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Test Files\nDESCRIPTION: This snippet defines a CMake variable `VolumeCxxTests` containing a list of C++ source files for volume rendering tests. Some files are marked with `NO_VALID`, potentially indicating known issues or exclusions. These files are used later to create the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset (VolumeCxxTests\n  ProjectedTetrahedraZoomIn.cxx,NO_VALID\n  TestFinalColorWindowLevel.cxx\n  TestFixedPointRayCastLightComponents.cxx\n  TestGPURayCastAdditive.cxx\n  TestGPURayCastAverageIP.cxx\n  TestGPURayCastBlendModes.cxx\n  TestGPURayCastCameraInside.cxx\n  TestGPURayCastCameraInsideClipping.cxx\n  TestGPURayCastCameraInsideNonUniformScaleTransform.cxx\n  TestGPURayCastCameraInsideSmallSpacing.cxx\n  TestGPURayCastCameraInsideTransformation.cxx\n  TestGPURayCastClipping.cxx\n  TestGPURayCastClippingPolyData.cxx\n  TestGPURayCastClippingUserTransform.cxx\n  TestGPURayCastCompositeBinaryMask.cxx\n  TestGPURayCastCompositeBinaryMask1.cxx\n  TestGPURayCastCompositeMask.cxx\n  TestGPURayCastCompositeMaskBlend.cxx\n  TestGPURayCastCompositeToMIP.cxx\n  TestGPURayCastComputeNormalFromOpacity.cxx\n  TestGPURayCastCropping.cxx\n  TestGPURayCastCropping1.cxx\n  TestGPURayCastDataTypesMIP.cxx\n  TestGPURayCastDataTypesMinIP.cxx\n  TestGPURayCastDependentComponentsLightParameters.cxx\n  TestGPURayCastFourComponentsAdditive.cxx\n  TestGPURayCastFourComponentsAverage.cxx\n  TestGPURayCastFourComponentsComposite.cxx\n  TestGPURayCastFourComponentsCompositeStreaming.cxx\n  TestGPURayCastFourComponentsDependentGradient.cxx\n  TestGPURayCastFourComponentsMIP.cxx\n  TestGPURayCastFourComponentsMinIP.cxx\n  TestGPURayCastGradientOpacity.cxx\n  TestGPURayCastGradientOpacityLight.cxx\n  TestGPURayCastImageSampleXY.cxx\n  TestGPURayCastIndependentComponentsLightParameters.cxx\n  TestGPURayCastIndependentVectorMode.cxx\n  TestGPURayCastLabelMap.cxx\n  TestGPURayCastLabelMap1Label.cxx\n  TestGPURayCastLabelMapValidity.cxx\n  TestGPURayCastLargeColorTransferFunction.cxx\n  TestGPURayCastMIPBinaryMask.cxx\n  TestGPURayCastMIPToComposite.cxx\n  TestGPURayCastMapperBenchmark.cxx\n  TestGPURayCastMapperRectilinearGrid.cxx\n  TestGPURayCastMapperSampleDistance.cxx\n  TestGPURayCastMapperShadows.cxx\n  TestGPURayCastMultiVolumeAddRemove.cxx\n  TestGPURayCastMultiVolumeCellData.cxx\n  TestGPURayCastMultiVolumeOverlapping.cxx\n  TestGPURayCastMultiVolumeRGBA.cxx\n  TestGPURayCastMultiVolumeShade.cxx\n  TestGPURayCastMultiVolumeTransfer2D.cxx\n  TestGPURayCastNearestDataTypesMIP.cxx\n  TestGPURayCastOrientedVolume.cxx\n  TestGPURayCastPerspectiveParallel.cxx\n  TestGPURayCastPositionalLights.cxx\n  TestGPURayCastReleaseResources.cxx\n  TestGPURayCastRenderDepthToImage.cxx\n  TestGPURayCastRenderDepthToImage2.cxx\n  TestGPURayCastRenderToTexture.cxx\n  TestGPURayCastShadedClipping.cxx\n  TestGPURayCastThreeComponentsAdditive.cxx\n  TestGPURayCastThreeComponentsIndependent.cxx\n  TestGPURayCastTransfer2D.cxx\n  TestGPURayCastTransfer2DYScalars.cxx\n  TestGPURayCastTwoComponentsDependent.cxx\n  TestGPURayCastTwoComponentsDependentGradient.cxx\n  TestGPURayCastTwoComponentsGradient.cxx\n  TestGPURayCastTwoComponentsIndependent.cxx\n  TestGPURayCastVolumeDepthPass.cxx\n  TestGPURayCastVolumeGhostArrays.cxx\n  TestGPURayCastVolumeGhostArraysCellData.cxx\n  TestGPURayCastVolumeLightKit.cxx\n  TestGPURayCastVolumeOrientation.cxx\n  TestGPURayCastVolumePicking.cxx\n  TestGPURayCastVolumePlane.cxx\n  TestGPURayCastVolumePolyData.cxx\n  TestGPURayCastVolumeRotation.cxx\n  TestGPURayCastVolumeScale.cxx\n  TestGPURayCastVolumeUniformGridBlanking.cxx\n  TestGPURayCastVolumeUpdate.cxx\n  TestGPUVolumeRayCastMapper.cxx\n  TestGPUVolumeRayCastMapperManyLights.cxx\n  TestMinIntensityRendering.cxx\n  TestMultiBlockMapper.cxx\n  TestMultiBlockMapperRectilinearGrid.cxx\n  TestMultiBlockUnstructuredGridVolumeMapper.cxx\n  TestProjectedTetrahedra.cxx\n  TestProjectedTetrahedraOffscreen.cxx\n  TestProjectedTetrahedraTransform.cxx\n  TestProjectedTetrahedraVectorComponent.cxx\n  TestRemoveVolumeNonCurrentContext.cxx\n  TestSmartVolumeMapper.cxx\n  TestSmartVolumeMapperImplicitArray.cxx\n  TestSmartVolumeMapperVolumeUpdate.cxx\n  TestSmartVolumeMapperWindowLevel.cxx\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Export Header Generation\nDESCRIPTION: This snippet generates an export header for the token library, allowing for proper visibility of symbols when linking with other components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_export_header(token EXPORT_FILE_NAME Exports.h)\n```\n\n----------------------------------------\n\nTITLE: Setting up Zlib Project and Version in CMake\nDESCRIPTION: Configures the Zlib project with version information. This segment defines the project name, language (C), and version while providing an option to build examples.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK handles CMake minimum versions.\ncmake_minimum_required(VERSION 2.4.4)\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\nendif ()\n\nproject(zlib C)\n\nset(VERSION \"1.3.1\")\n\noption(ZLIB_BUILD_EXAMPLES \"Enable Zlib Examples\" ON)\n```\n\n----------------------------------------\n\nTITLE: Single If-Else Statement Example in ExprTk\nDESCRIPTION: A simple if-else statement that assigns different values to variables based on a condition.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_37\n\nLANGUAGE: ExprTk\nCODE:\n```\nif (x < y)\n   z := x + 3;\nelse\n   y := x - z;\n```\n\n----------------------------------------\n\nTITLE: Linking Executable to Token Library\nDESCRIPTION: This snippet conditionally links the tokenize executable to the token library, depending on certain flags or build states.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): use module target name.\ntarget_link_libraries(tokenize\n  PUBLIC\n    token\n)\ntoken_install_target(tokenize)\nelse()\ntarget_link_libraries(tokenize\n  PUBLIC\n    VTK::token\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: ExprTk Break Statement Usage\nDESCRIPTION: Examples of break statements in ExprTk which terminate the execution of the nearest enclosed loop. The standard break sets the return value to NaN, while break with an expression sets the loop's return value.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_11\n\nLANGUAGE: ExprTk\nCODE:\n```\nwhile ((i += 1) < 10)\n{\n   if (i < 5)\n      j -= i + 2;\n   else if (i % 2 == 0)\n      break;\n   else\n      break[2i + 3];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Initialization for Executables\nDESCRIPTION: Sets up automatic initialization of VTK modules for the finance and Delaunay executables.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modelling/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS finance\n          Delaunay3D\n          Delaunay3DAlpha\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: This CMake snippet adds Python test scripts to the VTK testing system. It registers various test files for caption actors, bore visualization, cube axes, and XY plotting functionality. One test file (xyPlot3.py) is marked with a LOOSE_VALID parameter, indicating more flexible validation criteria.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Annotation/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestCaptionActor.py\n  bore.py\n  cubeAxes.py\n  xyPlot.py\n  xyPlot2.py\n  xyPlot3.py,LOOSE_VALID\n  xyPlot4.py\n  cubeAxes2.py\n  cubeAxes3.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ and Python Testing Subdirectories for VTK\nDESCRIPTION: This CMake snippet conditionally adds testing subdirectories for C++ and Python based on build flags. It checks if C++ testing is enabled and if Python wrapping is configured for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining LibTiff Subdirectory Structure\nDESCRIPTION: Configures which subdirectories to process based on the previously set options. Only essential directories like port and libtiff are always included, while tools, tests, and other components are conditional.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Process subdirectories\nadd_subdirectory(port)\nadd_subdirectory(libtiff)\nif(tiff-tools)\n  add_subdirectory(tools)\nendif()\nif(tiff-tests)\n  add_subdirectory(test)\nendif()\nif(tiff-contrib)\n  add_subdirectory(contrib)\nendif()\nif (FALSE) # XXX(kitware): handled by hardcoded options\nadd_subdirectory(build)\nendif()\nif(tiff-docs)\n  add_subdirectory(doc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for VTK Module\nDESCRIPTION: This CMake snippet sets a list of class names used for the VTK FiltersSelection module. These class names are stored in the \"classes\" variable to be used in subsequent operations within the file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Selection/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkCellDistanceSelector\n  vtkKdTreeSelector\n  vtkLinearSelector)\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten-Specific SDL2 Support for WebAssembly in VTK\nDESCRIPTION: Sets up SDL2-specific compiler and linker flags for Emscripten WebAssembly builds when SDL2 support is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  # VTK_DEPRECATED_IN_9_4_0() Remove when vtkSDL2OpenGLRenderWindow is removed.\n  if (VTK_USE_SDL2)\n    # The -sUSE_SDL=2 flag will inform emcc driver to add include paths.\n    # PUBLIC because vtkSDL2OpenGLRenderWindow.h includes SDL2.h\n    vtk_module_compile_options(VTK::RenderingUI\n      PUBLIC\n        \"-sUSE_SDL=2\")\n    vtk_module_link_options(VTK::RenderingUI\n      PUBLIC\n        \"-sUSE_SDL=2\")\n  endif ()\n\n```\n\n----------------------------------------\n\nTITLE: Locating OpenVDB vdb_print Executable in CMake\nDESCRIPTION: Uses find_program to locate the vdb_print executable from the OpenVDB library. It searches for both 'vdb_print' and 'vdb_print.exe' in the specified hints path.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(OpenVDB_VDB_PRINT\n  vdb_print vdb_print.exe\n  HINTS \"${OpenVDB_CMAKE_PATH}/../../../bin\"\n  DOC \"vdb_print executable from the OpenVDB library\"\n  )\nmark_as_advanced(OpenVDB_VDB_PRINT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic LIC 2D Tests in CMake for VTK\nDESCRIPTION: Sets up basic tests for 2D Line Integral Convolution (LIC) filters in VTK. It includes tests for image data and structured grid slices along different axes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingLICOpenGL2CxxTests tests\n  TestImageDataLIC2D.cxx\n  TestStructuredGridLIC2DXSlice.cxx\n  TestStructuredGridLIC2DYSlice.cxx\n  TestStructuredGridLIC2DZSlice.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Target Include Directories for Expat\nDESCRIPTION: This snippet specifies the include directories for the Expat target, ensuring both build and installation directories are set properly for the library's headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(expat\n    INTERFACE\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n```\n\n----------------------------------------\n\nTITLE: Header Wrapping Limitation Note\nDESCRIPTION: CMake note describing a limitation where only headers passed via HEADERS parameter are eligible for wrapping, while those installed via vtk_module_install_headers are not supported.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/ModuleSystem.md#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nOnly headers passed via HEADERS are eligible for wrapping; those\ninstalled via vtk_module_install_headers are not. This is a known limitation\nat the moment.\n```\n\n----------------------------------------\n\nTITLE: Configuring CURL Support for PROJ in CMake\nDESCRIPTION: Sets up the configuration for CURL support in the PROJ project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(ENABLE_CURL OFF)\nset(CURL_ENABLED FALSE)\nif(ENABLE_CURL)\n  find_package(CURL REQUIRED)\n  if(CURL_FOUND)\n    set(CURL_ENABLED TRUE)\n  else()\n    message(SEND_ERROR \"curl dependency not found!\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking to Verdict Library in CMake\nDESCRIPTION: Demonstrates how to link an executable to the Verdict library using CMake's namespace feature. This code specifies the target_link_libraries command that adds Verdict::verdict as a public dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/vtkverdict/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(example\n  PUBLIC\n    Verdict::verdict\n)\n```\n\n----------------------------------------\n\nTITLE: Finding serdes modules\nDESCRIPTION: This snippet iterates through the `vtk_modules` list to identify modules that have `INCLUDE_MARSHAL` set and are dependencies of `VTK::SerializationManager`. It ensures that modules intended for serialization are correctly declared as dependencies, throwing a fatal error if a module has `INCLUDE_MARSHAL` but is not listed as a dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset (_vtk_serdes_modules)\nforeach (_vtk_serdes_module IN LISTS vtk_modules) # Comes from top-level CMakeLists.txt\n  if (NOT TARGET \"${_vtk_serdes_module}\")\n    continue ()\n  endif ()\n  _vtk_module_get_module_property(\"${_vtk_serdes_module}\"\n    PROPERTY  \"include_marshal\"\n    VARIABLE  _vtk_serdes_module_include_marshal)\n  if (NOT _vtk_serdes_module_include_marshal)\n    continue ()\n  endif ()\n  if (NOT \"${_vtk_serdes_module}\" IN_LIST _vtk_serialization_manager_optional_deps\n      AND NOT \"${_vtk_serdes_module}\" IN_LIST _vtk_serialization_manager_public_deps)\n    message(FATAL_ERROR\n      \"${_vtk_serdes_module} has `INCLUDE_MARSHAL` but it is not a dependency of VTK::SerializationManager\")\n  endif ()\n  list(APPEND _vtk_serdes_modules \"${_vtk_serdes_module}\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data Using CMake\nDESCRIPTION: This CMake snippet conditionally sets up test data directories when VTK Python wrapping is enabled. It uses variables such as VTK_WRAP_PYTHON and specifies test datasets like vtk-uns-grid-2.json and others located in various .bp directories. This setup requires CMake to manage the test data configuration properly and ensures the added Python directory is compiled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Fides/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\\n  vtk_module_test_data(\\n    Data/vtk-uns-grid-2.json\\n    Data/tris-blocks-time.bp\\n    Data/tris-blocks-time.bp.dir/,REGEX:.*\\n    Data/cartesian-attr.bp\\n    Data/cartesian-attr.bp.dir/,REGEX:.*\\n    Data/groups.bp/,REGEX:.*\\n    Data/gs.bp/,REGEX:.*)\\n  add_subdirectory(Python)\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Filters OpenTURNS Test Executable\nDESCRIPTION: Generates a C++ test executable for the VTK Filters OpenTURNS module, incorporating all previously defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersOpenTURNSCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests with CMake\nDESCRIPTION: This CMake command adds Python tests to the VTK project. It includes three test files: TestArrayRenderer.py (marked for no runtime testing), TestUserShader2.py, and TestTopologyResolution.py.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestArrayRenderer.py,NO_RT\n  TestUserShader2.py\n  TestTopologyResolution.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting QML Files List with CMake\nDESCRIPTION: This snippet defines a list of QML files that will be used by other CMake commands. This list seems to be used in the following loop for configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(qml_files\n  TestQQuickVTKItem_1.qml\n  TestQQuickVTKItem_2.qml\n  TestQQuickVTKItem_3.qml)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Module Compilation Settings\nDESCRIPTION: Sets up thread safety for SQLite and links against required system libraries including dynamic loading and thread libraries. Also configures the necessary include directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(sqlite\n  PRIVATE\n    SQLITE_THREADSAFE=1)\ntarget_link_libraries(sqlite\n  PRIVATE\n    ${CMAKE_DL_LIBS}\n    Threads::Threads)\ntarget_include_directories(sqlite\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\")\n```\n\n----------------------------------------\n\nTITLE: Linking Target Libraries and Auto-Initialization\nDESCRIPTION: This part links the target executable (`${MYNAME}`) with the VTK libraries found by `find_package`. `vtk_module_autoinit` ensures that the VTK modules are automatically initialized.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickChartsOn3DScene/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${MYNAME} PRIVATE ${VTK_LIBRARIES})\nvtk_module_autoinit( TARGETS ${MYNAME} MODULES ${VTK_LIBRARIES} )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Cases to vtklibxml2\nDESCRIPTION: This snippet uses the 'vtk_add_test_cxx' function to define test cases for the vtklibxml2 component. It specifies the tests to run in the execution of the test set 'vtklibxml2CxxTests'. Required parameters include test identifiers and source files for each test, which must be present in the accessible include paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtklibxml2CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeLibXml2.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Library Naming Conventions\nDESCRIPTION: Sets the core names and true names for all HDF5 libraries, including main, test, C++, high-level, tools, utils, Fortran, and Java libraries. Uses custom prefixes and infixes if specified.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset (HDF5_LIB_CORENAME              \"hdf5${HDF5_LIB_INFIX}\")\nset (HDF5_TEST_LIB_CORENAME         \"hdf5${HDF5_LIB_INFIX}_test\")\nset (HDF5_CPP_LIB_CORENAME          \"hdf5${HDF5_LIB_INFIX}_cpp\")\nset (HDF5_HL_LIB_CORENAME           \"hdf5${HDF5_LIB_INFIX}_hl\")\nset (HDF5_HL_CPP_LIB_CORENAME       \"hdf5${HDF5_LIB_INFIX}_hl_cpp\")\nset (HDF5_TOOLS_LIB_CORENAME        \"hdf5${HDF5_LIB_INFIX}_tools\")\nset (HDF5_UTILS_LIB_CORENAME        \"hdf5${HDF5_LIB_INFIX}_utils\")\nset (HDF5_F90_LIB_CORENAME          \"hdf5${HDF5_LIB_INFIX}_fortran\")\nset (HDF5_F90_C_LIB_CORENAME        \"hdf5${HDF5_LIB_INFIX}_f90cstub\")\nset (HDF5_F90_TEST_LIB_CORENAME     \"hdf5${HDF5_LIB_INFIX}_test_fortran\")\nset (HDF5_F90_C_TEST_LIB_CORENAME   \"hdf5${HDF5_LIB_INFIX}_test_f90cstub\")\nset (HDF5_HL_F90_LIB_CORENAME       \"hdf5${HDF5_LIB_INFIX}_hl_fortran\")\nset (HDF5_HL_F90_C_LIB_CORENAME     \"hdf5${HDF5_LIB_INFIX}_hl_f90cstub\")\nset (HDF5_JAVA_JNI_LIB_CORENAME     \"hdf5${HDF5_LIB_INFIX}_java\")\nset (HDF5_JAVA_HDF5_LIB_CORENAME    \"jarhdf5\")\nset (HDF5_JAVA_TEST_LIB_CORENAME    \"jartest5\")\n\nset (HDF5_LIB_NAME              \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_LIB_CORENAME}\")\nset (HDF5_TEST_LIB_NAME         \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_TEST_LIB_CORENAME}\")\nset (HDF5_CPP_LIB_NAME          \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_CPP_LIB_CORENAME}\")\nset (HDF5_HL_LIB_NAME           \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_HL_LIB_CORENAME}\")\nset (HDF5_HL_CPP_LIB_NAME       \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_HL_CPP_LIB_CORENAME}\")\nset (HDF5_TOOLS_LIB_NAME        \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_TOOLS_LIB_CORENAME}\")\nset (HDF5_UTILS_LIB_NAME        \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_UTILS_LIB_CORENAME}\")\nset (HDF5_F90_LIB_NAME          \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_F90_LIB_CORENAME}\")\nset (HDF5_F90_C_LIB_NAME        \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_F90_C_LIB_CORENAME}\")\nset (HDF5_F90_TEST_LIB_NAME     \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_F90_TEST_LIB_CORENAME}\")\nset (HDF5_F90_C_TEST_LIB_NAME   \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_F90_C_TEST_LIB_CORENAME}\")\nset (HDF5_HL_F90_LIB_NAME       \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_HL_F90_LIB_CORENAME}\")\nset (HDF5_HL_F90_C_LIB_NAME     \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_HL_F90_C_LIB_CORENAME}\")\nset (HDF5_JAVA_JNI_LIB_NAME     \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_JAVA_JNI_LIB_CORENAME}\")\nset (HDF5_JAVA_HDF5_LIB_NAME    \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_JAVA_HDF5_LIB_CORENAME}\")\nset (HDF5_JAVA_TEST_LIB_NAME    \"${HDF5_EXTERNAL_LIB_PREFIX}${HDF5_JAVA_TEST_LIB_CORENAME}\")\n```\n\n----------------------------------------\n\nTITLE: Add subdirectory for examples\nDESCRIPTION: This snippet adds a subdirectory named `Examples` to the build process if the `BUILD_EXAMPLES` option is enabled. This allows the examples to be built as part of the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_EXAMPLES \"Build examples.\" ON)\nif(BUILD_EXAMPLES)\n  add_subdirectory(Examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IO Parallel XML Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK::IOParallelXML module to the project using the previously defined classes. It also configures test mangling for the module, which is likely used for generating unique test names or handling test-related tasks.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOParallelXML\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOParallelXML)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Tests in VTK Project\nDESCRIPTION: Conditionally adds the C++ subdirectory for testing if C++ testing is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable in VTK with CMake\nDESCRIPTION: This snippet configures an executable for the vtkFiltersSelection module's C++ tests using the vtk_test_cxx_executable function. The RENDERING_FACTORY flag might indicate rendering-specific dependencies or configurations for the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Selection/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersSelectionCxxTests tests\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Non-templated VTK Array Test Configuration\nDESCRIPTION: Configuration of test cases for non-templated VTK array classes, covering various primitive data types.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_data_array_test(vtkCharArray vtkCharArray.h \"char\" vtkCharArray)\nadd_data_array_test(vtkDoubleArray vtkDoubleArray.h \"double\" vtkDoubleArray)\nadd_data_array_test(vtkFloatArray vtkFloatArray.h \"float\" vtkFloatArray)\nadd_data_array_test(vtkIntArray vtkIntArray.h \"int\" vtkIntArray)\nadd_data_array_test(vtkLongArray vtkLongArray.h \"long\" vtkLongArray)\nadd_data_array_test(vtkLongLongArray vtkLongLongArray.h \"long long\" vtkLongLongArray)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module with Specified Classes\nDESCRIPTION: Adds a VTK module named VTK::FiltersParallelVerdict using the previously defined classes list\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallelVerdict\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Configuring Surface LIC Test with Custom Noise Texture and Color Mapping\nDESCRIPTION: Sets up a test for Surface LIC rendering with custom noise texture generation, color mapping, and contrast enhancement. It specifies parameters for noise texture size, grain size, and color mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedContrastEnhancedColorMappedSmallGrain\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICCurvedContrastEnhancedColorMappedSmallGrain.png,:}\"\n    --camera-config=1\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/disk_out_ref_surface.vtp}\n    --vectors=V\n    --step-size=0.4\n    --num-steps=40\n    --generate-noise-texture=1\n    --noise-texture-size=200\n    --noise-grain-size=1\n    --number-of-noise-levels=1024\n    --enhance-contrast=4\n    --color-by-mag=1\n    --color-mode=1\n    )\nset_property(TEST VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedContrastEnhancedColorMappedSmallGrain APPEND\n  PROPERTY\n    ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n```\n\n----------------------------------------\n\nTITLE: HDF5 Multi-Dataset Feature Check\nDESCRIPTION: C code snippet to check if HDF5 library supports multi-dataset read/write APIs (HDF5 >= 1.14.0)\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include \"hdf5.h\"\nint main(void)\n{\n  H5Dwrite_multi(0, NULL, NULL, NULL, NULL, 0, NULL);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: TIFF C++ Library Configuration\nDESCRIPTION: Configures the C++ wrapper library (tiffxx) with platform-specific settings for Windows and Linux. Includes version script handling and installation setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/libtiff/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CXX_SUPPORT)\n  set(tiffxx_HEADERS\n          tiffio.hxx)\n\n  if (WIN32 AND NOT MINGW)\n      add_library(tiffxx STATIC ../placeholder.h)\n  else()\n      add_library(tiffxx ../placeholder.h)\n  endif()\n\n  add_library(TIFF::CXX ALIAS tiffxx)\n\n  target_sources(tiffxx PRIVATE\n          ${tiffxx_HEADERS}\n          tif_stream.cxx)\n  target_link_libraries(tiffxx tiff)\n  set_target_properties(tiffxx PROPERTIES SOVERSION ${SO_COMPATVERSION})\n  if(NOT CYGWIN)\n    set_target_properties(tiffxx PROPERTIES VERSION ${SO_VERSION})\n  endif()\n  if(HAVE_LD_VERSION_SCRIPT)\n    set_target_properties(tiffxx PROPERTIES LINK_FLAGS\n                          \"-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/libtiffxx.map\")\n  endif()\n\n  if(tiff-install)\n    install(TARGETS tiffxx\n            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n    install(FILES ${tiffxx_HEADERS}\n            DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Build Time Benchmarks\nDESCRIPTION: Shell commands for executing build time benchmarks. Requires GCC-compatible C++ compiler and POSIX-compatible time utility.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ cd build\n$ cmake -DSCN_BENCMARKS_BUILDTIME=ON ..\n$ cmake --build .\n$ ./benchmark/buildtime/run-buildtime-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for VTK Filters Parallel Geometry\nDESCRIPTION: Generates a C++ test executable for the VTK Filters Parallel Geometry module, including all defined tests and additional common source file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersParallelGeometryCxxTests-MPI all_tests\n  UnstructuredGhostZonesCommon.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring DumpXMLFile Executable\nDESCRIPTION: Sets up the build target for the DumpXMLFile example program with VTK dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/IO/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(DumpXMLFile MACOSX_BUNDLE\n  DumpXMLFile.cxx)\ntarget_link_libraries(DumpXMLFile\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: This CMake command adds a subdirectory named 'Cxx' to the build. It's likely that this subdirectory contains C++ source files related to the VTK module being configured.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOChemistry Module with Class List in CMake\nDESCRIPTION: Adds the VTK IOChemistry module to the build system using the previously defined class list. This sets up compilation of the module with all its reader classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOChemistry\n  CLASSES ${classes}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory with CMake\nDESCRIPTION: This snippet demonstrates the inclusion of a subdirectory named 'Cxx' in the CMake build process. `add_subdirectory` is used to incorporate additional C++ source files and related CMakeLists for compilation, requiring a directory structure that conforms to CMake's expectations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Checking System Endianness in VTK CMake Configuration\nDESCRIPTION: CMake code block that determines system endianness by checking VTK_WORDS_BIGENDIAN variable and sets a flag for little endian systems\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(_known_little_endian FALSE)\nif (DEFINED VTK_WORDS_BIGENDIAN)\n  if (NOT VTK_WORDS_BIGENDIAN)\n    set(_known_little_endian TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Inclusion\nDESCRIPTION: This CMake code snippet conditionally adds the 'Python' subdirectory to the build process using the `add_subdirectory` command. The inclusion is dependent on the boolean value of the `VTK_WRAP_PYTHON` variable.  If `VTK_WRAP_PYTHON` evaluates to true, the subdirectory containing Python bindings is included.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Asynchronous/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 High Level API Build Option in CMake\nDESCRIPTION: Configures build option for HDF5 High Level APIs, with VTK-specific hardcoding to enable the HL library by default. Sets H5_INCLUDE_HL flag and adds the hl subdirectory when enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS \"${HDF5_SOURCE_DIR}/hl\" AND IS_DIRECTORY \"${HDF5_SOURCE_DIR}/hl\")\n  if (FALSE) # XXX(kitware): Hardcode settings.\n  option (HDF5_BUILD_HL_LIB  \"Build HIGH Level HDF5 Library\" ON)\n  else ()\n  set(HDF5_BUILD_HL_LIB ON)\n  endif ()\n  if (HDF5_BUILD_HL_LIB)\n    set (H5_INCLUDE_HL 1)\n    add_subdirectory (hl)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This CMake code snippet specifies test data files for a VTK module. It includes various file formats such as PLY, VTK, VTM, JSON, MTL, VTI, and JPG. The code also uses a regex pattern to include multiple files from a specific directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/bunny.ply\n  Data/dragon.ply\n  Data/ironProt.vtk\n  Data/many_blocks/many_blocks.vtm\n  Data/many_blocks/many_blocks/,REGEX:.*\n  Data/ospray_mats.json\n  Data/ospray_mats.mtl\n  Data/vase_1comp.vti\n  Data/wintersun.jpg)\n```\n\n----------------------------------------\n\nTITLE: Project Configuration\nDESCRIPTION: Defines the libHaru project with its version, description, and specified language as C. It depends on previously parsed version numbers and strings them together in a semantic version format.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(libharu\n    VERSION ${HPDF_MAJOR_VERSION}.${HPDF_MINOR_VERSION}.${HPDF_BUGFIX_VERSION}\n    DESCRIPTION \"libHaru is a free, cross platform, open source library for generating PDF files.\"\n    LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Reeb Graph Module - CMake\nDESCRIPTION: This snippet uses the 'vtk_module_add_module' command to add the VTK Filters Reeb Graph module with the classes defined earlier. It sets up the module target within the VTK build system, ensuring that the necessary class files are included during the compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ReebGraph/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersReebGraph\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: ExprTk While Loop Structure\nDESCRIPTION: Example of a while loop in ExprTk which repeatedly evaluates statements while the condition is true. The final statement in the final iteration is used as the return value of the loop.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_8\n\nLANGUAGE: ExprTk\nCODE:\n```\nwhile ((x -= 1) > 0)\n{\n   y := x + z;\n   w := u + y;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Headers and Sources - CMake\nDESCRIPTION: This snippet defines the source and header files associated with the filters in the HDF5 library. Various filter implementations are provided. IDE_GENERATED_PROPERTIES is invoked to manage the filter properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset (H5Z_SOURCES\n    ${HDF5_SRC_DIR}/H5Z.c\n    ${HDF5_SRC_DIR}/H5Zdeflate.c\n    ${HDF5_SRC_DIR}/H5Zfletcher32.c\n    ${HDF5_SRC_DIR}/H5Znbit.c\n    ${HDF5_SRC_DIR}/H5Zscaleoffset.c\n    ${HDF5_SRC_DIR}/H5Zshuffle.c\n    ${HDF5_SRC_DIR}/H5Zszip.c\n    ${HDF5_SRC_DIR}/H5Ztrans.c\n)\nif (H5_ZLIB_HEADER)\n  SET_PROPERTY(SOURCE ${HDF5_SRC_DIR}/H5Zdeflate.c PROPERTY\n      COMPILE_DEFINITIONS H5_ZLIB_HEADER=\"${H5_ZLIB_HEADER}\")\nendif ()\n\nset (H5Z_HDRS\n    ${HDF5_SRC_DIR}/H5Zdevelop.h\n    ${HDF5_SRC_DIR}/H5Zpublic.h\n)\nIDE_GENERATED_PROPERTIES (\"H5Z\" \"${H5Z_HDRS}\" \"${H5Z_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Module Test Data with CMake\nDESCRIPTION: This snippet uses the `vtk_module_test_data` CMake function to define test data files required by the VTK module.  The listed files (`countries.dbf`, `countries.shp`, `countries.shx`, `raster.tif`) are expected to be located within the `Data/GIS/` subdirectory relative to the source directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GDAL/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_test_data(\n  Data/GIS/countries.dbf\n  Data/GIS/countries.shp\n  Data/GIS/countries.shx\n  Data/GIS/raster.tif)\"\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests with CMake\nDESCRIPTION: This CMake code snippet adds multiple Python test scripts to the VTK testing suite using the vtk_add_test_python function. It includes various test files, some with additional flags like NO_VALID, NO_DATA, and NO_OUTPUT to specify test behavior.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  ImplicitSum.py\n  PerlinNoise.py\n  SelectionLoop.py\n  TestBoxPlaneIntersection.py\n  TestCellGrid.py,NO_VALID\n  TestComputeBounds.py,NO_DATA,NO_VALID\n  TestCopyStructuredData.py,NO_DATA,NO_VALID\n  TestGetBounds.py,NO_DATA,NO_VALID\n  TestGetBounds2.py,NO_DATA,NO_VALID\n  TestNumericArrayImageData.py,NO_DATA,NO_VALID\n  TestPartitionedData.py,NO_DATA,NO_VALID\n  TestPointInPolygon.py,NO_DATA,NO_VALID\n  TestPolyDataGetCellPoints.py,NO_DATA,NO_VALID\n  TestQuadricClustering.py\n  TestStaticPointLocator.py,NO_DATA,NO_VALID\n  TestStaticPointLocator2.py,NO_DATA,NO_VALID\n  TestStaticPointLocator2D.py,NO_DATA,NO_VALID\n  TestStaticPointLocator3.py,NO_DATA,NO_VALID\n  TestStaticPointLocatorWithDataSet.py,NO_DATA,NO_VALID\n  TestStarPolygon.py,NO_DATA,NO_VALID\n  TestStructuredGrid.py\n  TestTemplates.py,NO_DATA,NO_VALID\n  headBone.py\n  scalarColors.py\n  scalarConn.py\n  TestConvexPointSet.py\n  otherDataSetAttributes.py,NO_DATA,NO_VALID\n  quadricCut.py\n  quadraticQuadDeriv.py,NO_VALID\n  Test3DCellsEvaluatePosition.py,NO_DATA,NO_VALID,NO_OUTPUT\n  TestICPTransform.py\n  TestMolecule.py,NO_VALID\n  TestClipPolyhedra.py\n  TestClipPolyLine.py\n  TestPolyhedronCutter.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid2DFull.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid2DFullGI.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid2DMask.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid2DWithFilters.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid3DFull.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid3DMask.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid3DWithFilters.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid3DMandel.py,NO_DATA,NO_VALID\n  TestUniformHyperTreeGrid2DFull.py\n  TestUniformHyperTreeGrid2DMask.py\n  TestUniformHyperTreeGrid2DWithFilters.py,NO_DATA,NO_VALID\n  TestUniformHyperTreeGrid3DWithFilters.py,NO_DATA,NO_VALID\n  TestHyperTreeGrid3DCursorsMandel.py,NO_DATA,NO_VALID\n  TestCompareDataSet.py,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Port Headers in CMake\nDESCRIPTION: This snippet sets up the headers required for the TIFF library build. It creates a variable containing the header file names to be used in the project. This is crucial for organizing the includes for the library during compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/port/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(port_HEADERS libport.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory Based on VTK_WRAP_PYTHON\nDESCRIPTION: This snippet adds the Python subdirectory to the build if the VTK_WRAP_PYTHON flag is set, enabling Python wrapping for the VTK library if required. This facilitates cross-language integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\\n  add_subdirectory(Python)\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party PEGTL Module in VTK\nDESCRIPTION: Defines third-party module properties for PEGTL library, including licensing, version, and external package configuration. Specifies both internal and external package details.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pegtl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    HEADER_ONLY\n    LICENSE_FILES\n      \"vtkpegtl/LICENSE\"\n    SPDX_LICENSE_IDENTIFIER\n      \"MIT\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 2007-2020 Dr. Colin Hirsch and Daniel Frey\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/pegtl.git@for/vtk-20201001-2.8.3\"\n    VERSION\n      \"2.8.3\"\n  EXTERNAL\n    PACKAGE PEGTL\n    VERSION 2.0.0\n    TARGETS PEGTL::PEGTL\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Detecting FreeType Library Type in CMake\nDESCRIPTION: Detects whether the FreeType library is shared or static by using the vtkDetectLibraryType module. It handles both cases where FreeType is used as an external module or as a direct target.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(vtkDetectLibraryType)\n# Detect `freetype-config` usage.\nif (VTK_MODULE_USE_EXTERNAL_vtkfreetype AND TARGET freetype)\n  vtk_detect_library_shared(vtkfreetype freetype)\nelse ()\n  vtk_detect_library_shared(vtkfreetype Freetype::Freetype)\nendif ()\n\nset(VTK_FREETYPE_SHARED \"${vtkfreetype_is_shared}\")\n```\n\n----------------------------------------\n\nTITLE: Including VTK Test Data with CMake\nDESCRIPTION: This snippet uses the `vtk_module_test_data` macro to include a specific data file (`Data/neghip.slc`) for testing within the VTK module. The macro handles setting up the necessary paths and variables so the test executable can find the data file at runtime.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/neghip.slc)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Math C++ Tests with CMake\nDESCRIPTION: Sets up C++ tests for the VTK Common Math module using CMake. It specifies test files, disables data, validation, and output checks, and creates a test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonMathCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestAmoebaMinimizer.cxx\n  TestMatrix3x3.cxx\n  TestPolynomialSolversUnivariate.cxx\n  TestQuaternion.cxx\n  TestQuaternionInterpolator.cxx\n  TestReservoirSampler.cxx\n  UnitTestFFT.cxx\n  )\nvtk_test_cxx_executable(vtkCommonMathCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Return Statement Syntax in ASCII Art\nDESCRIPTION: This diagram illustrates the syntax for a return statement. It shows the 'return' keyword followed by an optional array of expressions, ending with a semicolon.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_118\n\nLANGUAGE: ASCII Art\nCODE:\n```\n+-------------------------------------------------------------+\n|                                                             |\n|   [return] ---> [[] -+-> [expression] -+-> []] ---> [;]     |\n|                      |                 |                    |\n|                      +--<--- [,] <-----+                    |\n|                                                             |\n+-------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining Template Files\nDESCRIPTION: Sets the template implementation files for the VTK FiltersCellGrid module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(templates\n  vtkDGOperation.txx\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingFreeType Module and Test Mangling in CMake\nDESCRIPTION: Adds the VTK RenderingFreeType module with specified classes, sources, and private headers. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingFreeType\n  CLASSES         ${classes}\n  SOURCES         ${sources}\n  PRIVATE_HEADERS ${private_headers})\nvtk_add_test_mangling(VTK::RenderingFreeType)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files in CMake\nDESCRIPTION: Registers HDF5 test data files for VTK module testing, including spray simulation data and a time series of CONVERGE simulation files. Also adds a C++ source code subdirectory to the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CONVERGECFD/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/post_5016_spray.h5\n  Data/converge3.1-format.h5\n  Data/CONVERGETimeSeries/post000001_+0.00000e+00.h5\n  Data/CONVERGETimeSeries/post000002_+2.01809e-04.h5\n  Data/CONVERGETimeSeries/post000003_+4.01809e-04.h5\n  Data/CONVERGETimeSeries/post000004_+6.01809e-04.h5\n  Data/CONVERGETimeSeries/post000005_+8.01809e-04.h5\n  Data/CONVERGETimeSeries/post000006_+1.00181e-03.h5\n)\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting registrar source variable\nDESCRIPTION: This snippet defines the source file for the serdes registrar. The registrar is responsible for managing serialization and deserialization of objects.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(_vtk_serdes_registrar_source\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkObjectManagerDefaultRegistrar.cxx\")\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Fast Float Headers\nDESCRIPTION: Installs the configured Fast Float header files to the appropriate VTK installation directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtkfast_float.h\")\n```\n\n----------------------------------------\n\nTITLE: Finding Alembic Package in CMake\nDESCRIPTION: This snippet uses the 'vtk_module_find_package' command to locate the Alembic package, specifying a version constraint. It is crucial for ensuring the project has the required external library.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE Alembic\n  VERSION 1.7)\n```\n\n----------------------------------------\n\nTITLE: Defining Class and Template Files for VTK ParallelDIY Module in CMake\nDESCRIPTION: Sets up the class and template files needed for the VTK ParallelDIY module. The classes include various DIY utilities for data exchange, assignment, and ghost utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/DIY/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkDIYDataExchanger\n  vtkDIYExplicitAssigner\n  vtkDIYGhostUtilities\n  vtkDIYUtilities)\n\nset(templates\n  vtkDIYGhostUtilities.txx\n  vtkDIYUtilities.txx)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK IOODBC\nDESCRIPTION: This line adds test mangling for the VTK::IOODBC module. Test mangling is a process that ensures that the symbols exported by the module are properly mangled to avoid conflicts with other libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOODBC)\n```\n\n----------------------------------------\n\nTITLE: VTK Module Sources Configuration\nDESCRIPTION: New wrapper around target_sources for VTK module targets and support for template classes that should not be wrapped using NOWRAP_TEMPLATE_CLASSES keyword.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.2.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvtk_module_sources\\nvtk_module_add_module NOWRAP_TEMPLATE_CLASSES\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Mangling for VR Module\nDESCRIPTION: This snippet adds a test mangling for the VTK RenderingVR module, which is part of the testing setup in VTK to ensure proper functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VR/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingVR)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK diy2 Module Properties\nDESCRIPTION: This CMake function `vtk_module_third_party_internal` defines the properties of the VTK::diy2 module, such as its header-only nature, license files, SPDX license identifier and copyright text, download location, and version. These properties are essential for managing third-party dependencies within VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party_internal(\n  HEADER_ONLY\n  LICENSE_FILES\n    \"vtkdiy2/LICENSE.txt\"\n    \"vtkdiy2/LEGAL.txt\"\n  SPDX_LICENSE_IDENTIFIER\n    \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2015, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Dept. of Energy)\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://gitlab.kitware.com/third-party/diy2.git@for/vtk-20250313-e5f2edf6f\"\n  VERSION\n    \"3.6.0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Directory Addition in CMake for VTK\nDESCRIPTION: This CMake code conditionally adds the Python subdirectory to the build process only if the VTK_WRAP_PYTHON variable is enabled. This allows for optional Python binding generation for the VTK library.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GeoJSON/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Doxygen Dependency for HDF5 Documentation in CMake\nDESCRIPTION: This snippet adds the 'hdf5lib_doc' target as a dependency to the 'doxygen' target, ensuring that HDF5 documentation is generated when the doxygen target is built.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies (doxygen hdf5lib_doc)\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of VTK Parallel MPI Python Test in CMake\nDESCRIPTION: This CMake snippet checks if the VTK::ParallelMPI target exists. If it does, it adds a Python MPI test for the PIOReader using the vtk_add_test_python_mpi function.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PIO/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\nvtk_add_test_python_mpi(\n  TestPIOReader.py\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Data-Dependent Tests for VTK Filters General Module\nDESCRIPTION: Adds tests that require data files to run. These tests verify functionality of VTK filters that operate on specific data sets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Tests with data\nvtk_add_test_cxx(vtkFiltersGeneralCxxTests data_tests\n  BoxClipOrientedPointData.cxx\n  BoxClipPointData.cxx\n  TestAxisAlignedReflectionFilter.cxx,NO_VALID\n  TestClipClosedSurface1.cxx\n  TestClipClosedSurface2.cxx\n  TestDataSetGradient.cxx\n  TestDataSetGradientPrecompute.cxx\n  TestDateToNumeric.cxx\n  TestGradientAndVorticity.cxx,NO_VALID\n  TestIconGlyphFilterGravity.cxx,LOOSE_VALID\n  TestQuadraturePoints.cxx\n  TestYoungsMaterialInterface.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name. This command sets the name of the project, which is used in various other CMake commands and build processes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(WrappedAsyncClipper)\"\n```\n\n----------------------------------------\n\nTITLE: Including Test Data for Bot Model in VTK Python Bindings\nDESCRIPTION: This snippet includes the bot model test data for VTK when Python wrapping is enabled. It ensures that the specified data is included in the testing framework if conditions are met.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\\\n  vtk_module_test_data(\\\n    Data/bot2.wrl)\\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test for VTK Archiver\nDESCRIPTION: CMake command to add a Python test named TestPythonArchiver.py to the VTK test suite. The test is configured with NO_DATA, NO_VALID, and NO_OUTPUT options, indicating it doesn't require test data, validation images, or output verification.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  TestPythonArchiver.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing for VTK Module\nDESCRIPTION: This command manages the test mangling for the VTK::IOAlembic module to ensure its compatibility and correctness during testing phases.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOAlembic)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: Adds multiple Python test files to the VTK testing framework using the vtk_add_test_python CMake function. The tests include cell locator interpolation, cell finding, and threaded stream tracing functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestCellLocatorInterpolatedVelocityField.py\n  TestFindCell.py\n  TestThreadedStreamTracer.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake\nDESCRIPTION: The `add_subdirectory` command in CMake adds the specified directory (Cxx) to the build process. This means that CMake will process the CMakeLists.txt file in the Cxx directory and include the targets defined there in the current project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OCCT/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory(Cxx)\"\n```\n\n----------------------------------------\n\nTITLE: Adding WrapSerDes Executable for VTK\nDESCRIPTION: Adds the WrapSerDes executable for serialization/deserialization in VTK, with special handling for Emscripten builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET WrapSerDes)\n  vtk_module_add_executable(WrapSerDes\n    DEVELOPMENT\n    BASENAME vtkWrapSerDes\n    vtkWrapSerDes.c\n    vtkWrapSerDesClass.c\n    vtkWrapSerDesFunction.c\n    vtkWrapSerDesProperty.c)\n  target_link_libraries(WrapSerDes\n    PRIVATE\n      \"${ns}::WrappingTools\")\n\n  if (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n    target_compile_options(WrapSerDes\n      PRIVATE\n        \"-pthread\")\n    target_link_options(WrapSerDes\n      PRIVATE\n        \"-pthread\"\n        \"-Wno-pthreads-mem-growth\"\n        \"SHELL:-s ALLOW_MEMORY_GROWTH=1\"\n        \"SHELL:-s NODERAWFS=1\")\n  endif ()\n  add_executable(\"${ns}::WrapSerDes\" ALIAS\n    WrapSerDes)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Source Directory\nDESCRIPTION: CMake command to include the C++ source code directory (Cxx) in the VTK build process. This is typically part of the main CMake configuration that sets up the build structure for VTK's C++ components.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportGL2PS/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Tests with CMake in VTK\nDESCRIPTION: This CMake script configures an MPI test for the VTK PIO Reader. It begins by checking if the VTK ParallelMPI target is available. If so, it sets the number of MPI processes to 2 and defines a new test using vtk_add_test_mpi. The script relies on the VTK testing infrastructure and requires the TESTING_DATA macro to function properly. The output is specified as an MPI-enabled executable test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PIO/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n  set(vtkPIOReaderTests-MPI_NUMPROCS 2)\n  vtk_add_test_mpi(vtkPIOReaderTests all_tests\n    TESTING_DATA\n    TestPIOReaderHDF5.cxx\n    )\n  vtk_test_cxx_executable(vtkPIOReaderTests all_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Third Party External Module in CMake\nDESCRIPTION: Sets up the MPI package as an external dependency for VTK, configuring include directories, libraries, and compilation definitions for the C components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MPI/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party_external(\n  PACKAGE       MPI\n  COMPONENTS    C\n  TARGETS       MPI::MPI_C\n  INCLUDE_DIRS  MPI_C_INCLUDE_DIRS MPI_C_INCLUDE_PATH\n  LIBRARIES     MPI_C_LIBRARIES\n  DEFINITIONS   MPI_C_COMPILE_DEFINITIONS\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Running cppcheck on VTK with Suppressions\nDESCRIPTION: Instructions for running cppcheck on the VTK codebase from either the source directory or the build directory, using the suppressions list defined in this file.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// To run:\n// cd /path/to/VTK/\n// cppcheck --platform=unspecified --enable=style -q --library=qt --library=posix --library=gnu --library=bsd --library=windows --check-level=exhaustive --suppressions-list=CMake/VTKcppcheckSuppressions.txt --template='{id},{file}:{line},{severity},{message}' -j8 -I Common/Core .\n// or\n// cd /path/to/VTK-bin/\n// cppcheck --project=compile_commands.json --platform=unspecified --enable=style -q --library=qt --library=posix --library=gnu --library=bsd --library=windows --check-level=exhaustive --suppressions-list=../VTK/CMake/VTKcppcheckSuppressions.txt --template='{id},{file}:{line},{severity},{message}' -j8\n```\n\n----------------------------------------\n\nTITLE: Configuring Regression Testing\nDESCRIPTION: Sets up regression testing infrastructure for medical examples. Includes external data handling and test case configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Medical/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  include(CTest)\n  if (TARGET VTK::TestingRendering)\n\n    ######## Regression Testing ########\n    set(ExternalData_BINARY_ROOT ${CMAKE_CURRENT_BINARY_DIR}/ExternalData)\n\n    list(APPEND ExternalData_URL_TEMPLATES\n      # Data published by Girder\n      \"https://data.kitware.com/api/v1/file/hashsum/%(algo)/%(hash)/download\"\n\n      # Data published by developers using git-gitlab-push.\n      \"https://www.vtk.org/files/ExternalData/%(algo)/%(hash)\"\n    )\n    include(ExternalData)\n\n    ExternalData_Expand_Arguments(MedicalData _\n      DATA{${CMAKE_CURRENT_SOURCE_DIR}/Testing/Data/headsq/,REGEX:.*})\n\n    foreach(test Medical1 Medical2 Medical3 Medical4)\n      ExternalData_add_test(MedicalData\n        NAME    \"MedicalExampleCxx-${test}\"\n        COMMAND ${test}\n          ${CMAKE_CURRENT_BINARY_DIR}/ExternalData/Testing/Data/headsq/quarter\n          -V DATA{${CMAKE_CURRENT_SOURCE_DIR}/Testing/Data/Baseline/${test}.png}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n      set_property(TEST \"MedicalExampleCxx-${test}\"\n        PROPERTY\n          ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n    endforeach()\n\n    ExternalData_Add_Target(MedicalData)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking PostgreSQL Libraries to VTK Module\nDESCRIPTION: Links PostgreSQL libraries to the VTK module with private visibility and optional kit export handling\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::IOPostgreSQL\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    PostgreSQL::PostgreSQL)\n```\n\n----------------------------------------\n\nTITLE: Registering Tests for VTK Filter Reduction Module\nDESCRIPTION: This snippet registers the mangling of tests for the VTK filter reduction module. It is necessary for ensuring that the test cases associated with this module are properly identified and executed, helping maintain quality assurance within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersReduction)\n```\n\n----------------------------------------\n\nTITLE: Finding PostgreSQL Package in VTK Module\nDESCRIPTION: Conditionally finds the PostgreSQL package for shared module configurations, enabling database integration capabilities\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE PostgreSQL)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Test Executable in VTK\nDESCRIPTION: This snippet establishes a C++ test executable for the 'vtkFiltersTopologyCxxTests' test suite. It sets up the environment for running the related tests and executing the binaries generated.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Topology/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersTopologyCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests with JsonCPP\nDESCRIPTION: This CMake code snippet demonstrates how to add C++ tests for the VTK project using JsonCPP. The 'vtk_add_test_cxx' function specifies details of the test such as no data, no valid outputs, and includes the source file. The 'vtk_test_cxx_executable' function is used to configure the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkjsoncppCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeJsonCPP.cxx)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkjsoncppCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting classes variable\nDESCRIPTION: This snippet sets the CMake variable `classes` to a list containing `vtkObjectManager`. This variable is later used when defining the `VTK::SerializationManager` module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkObjectManager)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Library Based on Feature Availability\nDESCRIPTION: This section checks for the availability of the 'getopt' feature and conditionally adds a static library 'tiff_port' if it is not found. It includes source files and sets directory paths for the library, which is vital for modular code development and enhances compatibility. If 'getopt' is not needed, it defines 'tiff_port' as an interface library instead.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/port/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT HAVE_GETOPT)\n  add_library(tiff_port STATIC ../placeholder.h)\n\n  # Add getopt if missing\n  if(NOT HAVE_GETOPT)\n    target_sources(tiff_port PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/getopt.c)\n  endif()\n\n  target_include_directories(tiff_port PUBLIC\n          ${CMAKE_CURRENT_BINARY_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR})\nelse()\n  # Dummy interface library\n  add_library(tiff_port INTERFACE)\n  target_include_directories(tiff_port INTERFACE\n          ${CMAKE_CURRENT_BINARY_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Local User Options in CMake for VTK\nDESCRIPTION: Includes an optional local user options file to allow customization of the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/LocalUserOptions.cmake\" OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Adding Module Test Data with vtk_module_test_data\nDESCRIPTION: This snippet adds module test data to the VTK testing framework using the vtk_module_test_data command. It references the data file (polyhedron.xmf) located in the Data/XDMF directory. This is essential for validating the functionality of module tests that depend on external data files during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/XDMF/polyhedron.xmf\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeouts and Properties\nDESCRIPTION: Configures test timeout for large XML unstructured grid test and sets skip conditions for tests with specific constraints.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(\n  TEST VTK::IOXMLCxx-TestXMLLegacyFileReadIdTypeArrays\n  APPEND\n  PROPERTY SKIP_REGULAR_EXPRESSION \"IdType tag has been ignored\")\n\nset_tests_properties(VTK::IOXMLCxx-TestXMLLargeUnstructuredGrid\n  PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestXMLLargeUnstructuredGrid})\n```\n\n----------------------------------------\n\nTITLE: Including WkHtmlToImage Module in CMake\nDESCRIPTION: Includes a CMake module for WkHtmlToImage functionality which is used for SVG testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/vtkWkHtmlToImage.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Configuration\nDESCRIPTION: Adds Python subdirectory only if VTK Python wrapping is enabled\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing CGNS Headers\nDESCRIPTION: Using the `configure_file` and `vtk_module_install_headers` CMake commands, this snippet configures and installs the CGNS headers needed for VTK. The `configure_file` command sets up the path for the VTK CGNS header file, converting the template in the source directory to the actual header in the binary directory. Finally, the `vtk_module_install_headers` ensures that the configured header file is installed correctly within the project file structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_cgns.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_cgns.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_cgns.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GeoJSON Python Tests in CMake\nDESCRIPTION: Adds Python-based tests for VTK's GeoJSON reader and writer functionality using CMake's test framework. Specifies NO_VALID flag and includes two test files: TestGeoJSONReader.py and TestGeoJSONWriter.py.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GeoJSON/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  NO_VALID\n  TestGeoJSONReader.py\n  TestGeoJSONWriter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding vtkWin32VideoSource Class\nDESCRIPTION: This snippet conditionally appends the `vtkWin32VideoSource` class to the list of classes to be included in the VTK::IOVideo module if Windows video capture is enabled. This class is specific to the Windows platform.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_VIDEO_FOR_WINDOWS_CAPTURE)\n  list(APPEND classes vtkWin32VideoSource)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Registering MetaIO as VTK Third-Party Module\nDESCRIPTION: Configures MetaIO as an internal third-party module within VTK, specifying license information, copyright details, source location and version information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkmetaio/License.txt\"\n  SPDX_LICENSE_IDENTIFIER\n    \"BSD-3-Clause AND BSD-4-Clause\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright 2000-2014 Insight Software Consortium\"\n    \"Copyright (c) 1999-2007 Insight Software Consortium\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://github.com/Kitware/MetaIO.git@ea2bb780\"\n  VERSION\n    \"master\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for VTK png Module\nDESCRIPTION: This CMake command sets a list of C source files that are part of the VTK png module.  These files are compiled and linked to create the library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/vtkpng/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  png.c\n  pngerror.c\n  pngget.c\n  pngmem.c\n  pngpread.c\n  pngread.c\n  pngrio.c\n  pngrtran.c\n  pngrutil.c\n  pngset.c\n  pngtrans.c\n  pngwio.c\n  pngwrite.c\n  pngwtran.c\n  pngwutil.c)\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with pip on Windows\nDESCRIPTION: Installs the required Python packages for building VTK documentation on Windows using pip. The dependencies are specified in the requirements.txt file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_3\n\nLANGUAGE: bat\nCODE:\n```\npy -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Dawn with Git\nDESCRIPTION: This shell script snippet demonstrates how to clone the Dawn repository and check out a specific tagged version. It is a prerequisite for building VTK with WebGPU support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Clone the repo and checkout the required version\ngit clone https://dawn.googlesource.com/dawn dawn && cd dawn\ngit checkout chromium/7037\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: This snippet uses the `vtk_module_add_module` CMake function to create the VTK::FiltersSMP module, specifying that it contains the classes defined in the `classes` variable.  It links these classes as part of the VTK::FiltersSMP module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersSMP\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory Override for PDF Context Device\nDESCRIPTION: Declares an object factory override for the context device to use the PDF-specific implementation. This allows VTK to substitute the PDF renderer when needed.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportPDF/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkContextDevice2D\n  OVERRIDE vtkPDFContextDevice2D)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing VTK LibHaru Header in CMake\nDESCRIPTION: This snippet configures the VTK LibHaru header file and sets up its installation. It uses CMake's configure_file command to process the header template and then installs it using VTK's custom module installation command.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_libharu.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_libharu.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_libharu.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests for QVTKOpenGLWindow\nDESCRIPTION: This snippet configures tests for the `QVTKOpenGLWindow` widget.  It uses `vtk_add_test_cxx` to define various test cases, including tests for widget integration, picking functionality, and interaction with disabled interactors.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_add_test_cxx(vtkGUISupportQtCxxTests tests\n  -w QVTKOpenGLWindow\n  TestQVTKOpenGLWindowQWidgetWidget,TestQWidgetWidget.cxx,NO_VALID\n  TestQVTKOpenGLWindowPicking,TestQtPicking.cxx,NO_VALID\n  TestQVTKOpenGLWindow,TestQtWidget.cxx\n  TestQVTKOpenGLWindowWithDisabledInteractor,TestQtWithDisabledInteractor.cxx\n  TestQVTKOpenGLWindowWithMSAA,TestQtWithMSAA.cxx\n  TestQVTKOpenGLWindowWithChartHistogram2D,TestQtWithChartHistogram2D.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Vector Dot Product Calculation\nDESCRIPTION: Examples showing how to compute dot product of two vectors using both direct vector multiplication and a for-loop implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_48\n\nLANGUAGE: cpp\nCODE:\n```\nvar v0[3] := { 1, 2, 3 };\nvar v1[3] := { 4, 5, 6 };\nvar v0dotv1 := sum(v0 * v1);\n\nvar v0[3] := { 1, 2, 3 };\nvar v1[3] := { 4, 5, 6 };\nvar v0dotv1;\n\nfor (var i := 0; i < min(v0[],v1[]); i += 1)\n{\n   v0dotv1 += (v0[i] * v1[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Range Statement Syntax in ASCII Art\nDESCRIPTION: This diagram represents the syntax for a range statement. It shows two expressions separated by a colon, enclosed in square brackets, with an optional second expression.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_117\n\nLANGUAGE: ASCII Art\nCODE:\n```\n+-------------------------------------------------------------+\n|                                                             |\n|      +-------->--------+                                    |\n|      |                 |                                    |\n| [[] -+-> [expression] -+-> [:] -+-> [expression] -+--> []]  |\n|                                 |                 |         |\n|                                 +-------->--------+         |\n|                                                             |\n+-------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Checking for 64-bit Stream Support and Configuring XDMF\nDESCRIPTION: Checks if the system supports 64-bit file streams and generates the XdmfConfig.h header with the detected system configuration settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${xdmf2_SOURCE_DIR}/CMake/CheckFor64BitStreams.cmake)\ncheck_for_64bit_streams(XDMF_HAVE_64BIT_STREAMS)\n\n# Save out config to let other projects use xdmf\nconfigure_file(${xdmf2_SOURCE_DIR}/libsrc/XdmfConfig.h.in\n  ${xdmf2_BINARY_DIR}/libsrc/XdmfConfig.h)\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for VTK scn Module\nDESCRIPTION: Uses GenerateExportHeader to create a header file that defines export macros for symbols in the VTK scn module, facilitating proper symbol visibility across platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(scn\n  EXPORT_MACRO_NAME SCN_EXPORT\n  EXPORT_FILE_NAME include/vtkscn/scn_export.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Python VTK Module Test Data - CMake\nDESCRIPTION: This snippet is responsible for defining the test data for the VTK Python wrappers when VTK_WRAP_PYTHON is enabled. It specifies various data files required for Python bindings testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\\\n  vtk_module_test_data(\\\n    Data/RectGrid2.vtk\\\n    Data/blow.vtk\\\n    Data/combq.bin\\\n    Data/combxyz.bin\\\n    Data/cube-with-time.vtu\\\n    Data/fran_cut.vtk\\\n    Data/headsq/,REGEX:.*\\\n    Data/vehicle_data.csv)\\\n  add_subdirectory(Python)\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory\nDESCRIPTION: Configures the VTK object factory, specifying source and header files, and the export macro for the IOParallelNetCDF module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOPARALLELNETCDF_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Test for IOSS Cell Grid Reader\nDESCRIPTION: CMake directive that adds a Python test script to the VTK testing framework. The test is for the IOSS Cell Grid Reader functionality, and it's configured to run without runtime testing (NO_RT).\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestIOSSCellGridReader.py,NO_RT\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including C++ Testing Directory in VTK CMake Configuration\nDESCRIPTION: This snippet checks if C++ testing is not disabled and adds the 'Cxx' subdirectory to the build if the condition is met. It allows for conditional compilation of C++ tests in the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: VTK Test Data Inclusion\nDESCRIPTION: This CMake command includes test data for the VTK module. It specifies a data file named 'Data/spiaggia_di_mondello_1k.hdr' that will be used in the module's tests. It ensures that the test data is available during the testing process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/spiaggia_di_mondello_1k.hdr\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersOpenTURNS Module\nDESCRIPTION: Adds the VTK::FiltersOpenTURNS module with the defined classes and generated object factory files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersOpenTURNS\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Creating VTK IO Legacy Test Executable\nDESCRIPTION: Configures the test executable for VTK IO Legacy tests with specific options to disable floating point exceptions and enable rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Legacy/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOLegacyCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite with Custom Options\nDESCRIPTION: Example of how to compile SQLite with additional custom compile-time options, specifically showing how to omit deprecated features.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./configure --enable-all\nmake OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Tests in VTK CMake\nDESCRIPTION: Defines a test for the TRUCHAS Reader in a CMake based project, specifying a test file and a validation flag. This adds to the build configuration for unit testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TRUCHAS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOTRUCHASCxxTests tests\n  TestTRUCHASReader.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Opening Built Documentation on Linux\nDESCRIPTION: Opens the built VTK documentation in the default web browser on Linux systems using xdg-open command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nxdg-open _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building VTK CONVERGECFD Reader Tests with CMake\nDESCRIPTION: Defines and configures C++ test files for the VTK CONVERGECFD reader module. It adds two test files (TestCONVERGECFDReader.cxx and TestCONVERGECFDReaderTime.cxx) to the test suite with the NO_VALID option, then creates a test executable for these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CONVERGECFD/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOCONVERGECFDCxxTests tests\n  TestCONVERGECFDReader.cxx,NO_VALID\n  TestCONVERGECFDReaderTime.cxx,NO_VALID\n)\nvtk_test_cxx_executable(vtkIOCONVERGECFDCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Building and Testing on Unix-like Systems with Makefile - Shell\nDESCRIPTION: This snippet includes commands to build Ogg libraries using Makefile on Unix-like systems and to run automated tests. This involves building with the default Makefile generator and running tests with make check or make test.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncmake ..\nmake\nmake check\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling - CMake\nDESCRIPTION: This snippet adds test mangling for the VTK RenderingVolumeOpenGL2 module, which helps in managing function name visibility during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingVolumeOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes and Headers for VTK Rendering Parallel LIC Module in CMake\nDESCRIPTION: Sets up lists of classes and headers for the VTK Rendering Parallel LIC module. This includes various VTK classes related to parallel rendering and line integral convolution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkMPIPixelTT\n  vtkParallelTimer\n  vtkPLineIntegralConvolution2D\n  vtkPPainterCommunicator\n  vtkPPixelTransfer\n  vtkPSurfaceLICComposite\n  vtkPSurfaceLICInterface)\nset(headers\n  vtkMPIPixelView.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Cases for vtkSerializationManager\nDESCRIPTION: This snippet configures test cases for the vtkSerializationManager tests indicating no valid cases for validation. It utilizes the vtk_add_test_cxx function to integrate the specified test file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkSerializationManagerCxxTests tests\n  TestInvoke.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting up VTK Module UtilitiesBenchmarks in CMake\nDESCRIPTION: This snippet defines a new module 'VTK::UtilitiesBenchmarks' using CMake and adds the 'vtkRenderTimings' class to it. This is intended to set up module dependencies for VTK benchmarking utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Benchmarks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkRenderTimings)\n\nvtk_module_add_module(VTK::UtilitiesBenchmarks\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Setting Project Properties for LibTiff\nDESCRIPTION: Defines LibTiff as a CMake project with version information and language requirements. Sets C standard to C99 and includes C++ support.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Project definition\nset(CMAKE_C_STANDARD 99)\nproject(tiff\n        VERSION \"${LIBTIFF_VERSION}\"\n        LANGUAGES C CXX)\n```\n\n----------------------------------------\n\nTITLE: Object Factory Declaration\nDESCRIPTION: Declares an object factory for vtkSimpleBondPerceiver with vtkPSimpleBondPerceiver as the override\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkSimpleBondPerceiver\n  OVERRIDE  vtkPSimpleBondPerceiver)\n```\n\n----------------------------------------\n\nTITLE: Configure Build Options\nDESCRIPTION: Defines and manages build options such as building shared libraries or enabling debug modes. Configurations are predetermined and toggled through CMake options, which are set to default values in this script.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): hardcode settings\noption(BUILD_SHARED_LIBS \"Build shared libraries (.dll/.so) instead of static ones (.lib/.a)\" ON)\noption(LIBHPDF_EXAMPLES \"Build libharu examples\" OFF)\noption(LIBHPDF_DEBUG \"Enable HPDF Debug\")\noption(LIBHPDF_DEBUG_TRACE \"Enable HPDF Debug trace\")\nelse ()\nset(LIBHPDF_EXAMPLES OFF)\nset(LIBHPDF_DEBUG OFF)\nset(LIBHPDF_DEBUG_TRACE OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ UTF8 Tests with CMake\nDESCRIPTION: This snippet uses the 'vtk_add_test_cxx' and 'vtk_test_cxx_executable' CMake functions to add and define UTF8-related C++ tests in the VTK project. The 'vtk_add_test_cxx' function registers a test called 'vtkutf8CxxTests' for the C++ source file 'TestIncludeUTF8.cxx' without data, validation, or output checks. The 'vtk_test_cxx_executable' function then specifies these tests to be executable. The setup assumes a VTK-specific CMake environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/utf8/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkutf8CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeUTF8.cxx)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkutf8CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data in CMake\nDESCRIPTION: This snippet sets up the test data for the VTK module. It specifies the use of data files located under 'Data/XDMF/' with a regular expression to match relevant files. This configuration is essential for executing data-driven tests involving VTK's XDMF module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/XDMF/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of C++ and Python Tests in CMake\nDESCRIPTION: This CMake code conditionally includes C++ and Python test directories based on build configuration. It only includes C++ tests if they are not disabled, and Python tests if VTK_WRAP_PYTHON is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/dgHexahedra.dg\n  )\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Project Source Files\nDESCRIPTION: Sets up source files, UI files, header files, and resource files for the StatsView application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/StatsView/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Srcs\n  StatsView.cxx\n  main.cxx)\nset(UIs\n  StatsView.ui)\nset(Hdrs\n  StatsView.h)\nset(Rcs\n  Icons/icons.qrc)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (Planar LIC, Contrast Enhanced) in CMake\nDESCRIPTION: This snippet configures a test using `ExternalData_add_test` to evaluate planar LIC with contrast enhancement. It calls `TestSurfaceLIC` with parameters to load `SurfaceVectors.vtk`, set a specific camera configuration, enable contrast enhancement, and use a specific color mode. This checks the rendering with the enhanced LIC features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICPlanarContrastEnhanced\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICPlanarContrastEnhanced.png,:}\"\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/SurfaceVectors.vtk}\n    --camera-config=3\n    --vectors=V\n    --step-size=1\n    --num-steps=40\n    --enhance-contrast=1\n    --color-mode=1\n    )\n```\n\n----------------------------------------\n\nTITLE: Including Required CMake Modules for Zlib Configuration\nDESCRIPTION: Includes necessary CMake modules to check for system-specific features, function availability, and include files needed to properly configure Zlib.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckTypeSize)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckCSourceCompiles)\nif (FALSE) # XXX(kitware): VTK handles testing.\nenable_testing()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Private Headers and Sources for VTK scn Module\nDESCRIPTION: Defines the private headers and source files that are internal to the VTK scn module implementation and not exposed to users.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_headers\n  src/vtkscn/impl.h)\n\nset(private_sources\n  src/vtkscn/impl.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting and Module Creation in CMake\nDESCRIPTION: Defines a list of custom VTK classes and adds them as a module to the VTK project. Ensures the module includes sources and private headers for VTK's FiltersParallelGeometry, integrating the module into the build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPConnectivityFilter\n  vtkPDistributedDataFilter\n  vtkPStructuredGridConnectivity)\n\nvtk_module_add_module(VTK::FiltersParallelGeometry\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\n```\n\n----------------------------------------\n\nTITLE: Finding Pixar's Renderman Installation\nDESCRIPTION: Attempts to locate Pixar's Renderman Pro Server installation by finding the prman executable in standard installation directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# See if Pixar's Renderman is available\nfind_path(RMANTREE bin/prman HINTS\n          /Applications/Pixar/RenderManProServer-19.0\n          /opt/pixar/RenderManProServer-19.0\n)\nmark_as_advanced(RMANTREE)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests via CMake\nDESCRIPTION: This snippet uses the vtk_add_test_python CMake function to register three Python test files for inclusion in the VTK test suite. The tests focus on labeled contours, multi-polydata items, and polydata item drawing hints.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Context2D/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  labeledContours.py\n  multiPolyDataItems.py\n  polyDataItemDrawHints.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Reformatting Code\nDESCRIPTION: Command to trigger automated code reformatting by the GitLab robot\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nDo: reformat\n```\n\n----------------------------------------\n\nTITLE: Linking Boost with VTK Filters Reeb Graph - CMake\nDESCRIPTION: This snippet links the Boost package found in the previous step to the VTK Filters Reeb Graph module. It specifies that Boost should be used in private scope, meaning it is not exposed to downstream consumers of this module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ReebGraph/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::FiltersReebGraph\n  PRIVATE\n    \"$<BUILD_INTERFACE:Boost::boost>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Header-Only VTK Module\nDESCRIPTION: Creates a header-only VTK module named InfovisBoost using the previously defined headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Boost/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::InfovisBoost\\n  HEADERS ${headers}\\n  HEADER_ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring External VTK IOSS Usage in CMake\nDESCRIPTION: Handles the case when VTK IOSS is used externally. It sets up include directories for the Ioss target, addressing issues with exported target usage requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_MODULE_USE_EXTERNAL_vtkioss)\n  # The usage requirements for Ioss' exported targets is not useful for us.\n  # https://github.com/sandialabs/seacas/issues/239\n  vtk_module_include(VTK::ioss\n    INTERFACE\n      \"${SEACASIoss_INCLUDE_DIRS}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Python Algorithm Class\nDESCRIPTION: This snippet sets up the classes required for the VTK Python algorithm. The class 'vtkPythonAlgorithm' is defined to be included in the module for VTK filters that support Python integration. The snippet does not include any external dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPythonAlgorithm)\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlite3 for PROJ in CMake\nDESCRIPTION: Sets up the configuration for using sqlite3 in the PROJ project, including finding the sqlite3 binary and checking the version.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXE_SQLITE3 \"$<TARGET_FILE:VTK::sqlitebin>\")\nset(SQLITE3_FOUND 1)\nset(SQLITE3_VERSION 3.36.0)\n```\n\n----------------------------------------\n\nTITLE: Add Python Test for GeoProjection\nDESCRIPTION: This snippet adds the TestGeoProjection.py file as a Python test using vtk_add_test_python. It sets the NO_DATA and NO_VALID flags, indicating the test does not require data or validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestGeoProjection.py,NO_DATA,NO_VALID,\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Theora as VTK Module\nDESCRIPTION: Adds the Theora library as a VTK module using the vtk_module_add_module function, specifying source files, headers, and the header subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::theora\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtktheora\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Tiled Format Reader Test in CMake for VTK\nDESCRIPTION: Adds a test for the VTK TIFF reader with tiled format support using a 64x64 tiled TIFF example.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTIFFReaderTiled,TestTIFFReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/libtiff/tiled_64x64_tiff_example.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Module Configuration and Installation\nDESCRIPTION: VTK-specific module configuration, adding NetCDF sources, headers, and setting compile definitions and include paths\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::netcdf\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtknetcdf\")\ntarget_compile_definitions(netcdf\n  PRIVATE\n    HAVE_CONFIG_H)\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Subdirectory\nDESCRIPTION: This snippet demonstrates adding a subdirectory named `Cxx` to the current CMake project.  The `add_subdirectory` command is used to include the CMakeLists.txt file found within the `Cxx` directory as part of the build process.  This allows for modular project structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelStatistics/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Programmable Filters Module\nDESCRIPTION: Adds the VTK Programmable Filters module to the build configuration, using the predefined list of classes. Includes test mangling configuration for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersProgrammable\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersProgrammable)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Python Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake code conditionally includes the Python subdirectory in the build process only if the VTK_WRAP_PYTHON option is enabled. This allows developers to optionally build Python bindings for the VTK library based on configuration settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI4Py/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingExternal Classes in CMake\nDESCRIPTION: Sets up a list of classes for the VTK RenderingExternal module. These classes are related to external rendering and OpenGL functionality in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/External/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  ExternalVTKWidget\n  vtkExternalLight\n  vtkExternalOpenGLCamera\n  vtkExternalOpenGLRenderWindow\n  vtkExternalOpenGLRenderer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard VTK Filters Parallel CXX Tests\nDESCRIPTION: Sets up standard C++ tests for VTK Filters Parallel module and creates a test executable. It includes tests for various filters and algorithms.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersParallelCxxTests testsStd\n  TestAlignImageDataSetFilter.cxx,NO_VALID\n  TestAngularPeriodicFilter.cxx\n  TestGaussianQuadratureIntegration.cxx,NO_VALID\n  TestPOutlineFilter.cxx,NO_VALID\n  )\nvtk_test_cxx_executable(vtkFiltersParallelCxxTests testsStd)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Header File in CMake\nDESCRIPTION: Configures the vtk_sqlite.h header file from a template, copying it to the binary directory for inclusion in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_sqlite.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_sqlite.h\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Inclusion\nDESCRIPTION: This snippet conditionally includes the `Python` subdirectory if `VTK_WRAP_PYTHON` is enabled.  This allows including Python wrapping tests when the python wrapping option is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK LAS Reader Test Execution\nDESCRIPTION: Sets up the test executable configuration for VTK LAS reader tests. Adds C++ tests to the test suite and creates the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LAS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOLASCxxTests tests\n  ${VTK_LAS_READER_TESTS}\n  )\nvtk_test_cxx_executable(vtkIOLASCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories\nDESCRIPTION: Sets up test data files and conditionally adds test subdirectories based on language configurations. Includes data files for discontinuous Galerkin elements and VTK files, with separate handling for C++ and Python tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Legacy/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/dgTriangle.dg\n  Data/dgQuadrilateral.dg\n  Data/ghost_cells.vtk\n  Data/invalid_polydata.vtk)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: VTK Module Configuration\nDESCRIPTION: Configures the WebGLExporter as a VTK module with the specified classes, sources, and private headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebGLExporter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::WebGLExporter\n  CLASSES ${classes}\n  SOURCES ${sources}\n  PRIVATE_HEADERS ${private_headers})\nvtk_add_test_mangling(VTK::WebGLExporter)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Directory Structure in CMake\nDESCRIPTION: Configures test data files for VTK module testing and adds the C++ source code subdirectory to the build system. Specifically includes two LAS format test files and incorporates the Cxx directory into the build structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/LAS/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/test_1.las\n  Data/test_2.las)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingVolumeAMR Module\nDESCRIPTION: This snippet defines a VTK module called VTK::RenderingVolumeAMR. It includes the vtkAMRVolumeMapper class. A test mangling is also added for the specified module, facilitating testing during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeAMR/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAMRVolumeMapper)\n\nvtk_module_add_module(VTK::RenderingVolumeAMR\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::RenderingVolumeAMR)\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Support for PROJ in CMake\nDESCRIPTION: Sets up the configuration for TIFF support in the PROJ project, which is used to read some grids.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(ENABLE_TIFF OFF)\nset(TIFF_ENABLED FALSE)\nif(ENABLE_TIFF)\n  find_package(TIFF REQUIRED)\n  if(TIFF_FOUND)\n    set(TIFF_ENABLED TRUE)\n  else()\n    message(SEND_ERROR\n      \"libtiff dependency not found! Use ENABLE_TIFF=OFF to force it off\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring X87 and 32-bit Code Generation in CMake\nDESCRIPTION: Sets options for forcing X87 instruction usage and 32-bit code generation, primarily for GCC compilers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(EIGEN_TEST_X87 OFF)\nset(EIGEN_TEST_32BIT OFF)\n\nif(EIGEN_TEST_X87)\n  set(EIGEN_TEST_NO_EXPLICIT_VECTORIZATION ON)\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mfpmath=387\")\n    message(STATUS \"Forcing use of x87 instructions in tests/examples\")\n  else()\n    message(STATUS \"EIGEN_TEST_X87 ignored on your compiler\")\n  endif()\nendif()\n\nif(EIGEN_TEST_32BIT)\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")\n    message(STATUS \"Forcing generation of 32-bit code in tests/examples\")\n  else()\n    message(STATUS \"EIGEN_TEST_32BIT ignored on your compiler\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mangled Test Addition for VTK IONetCDF\nDESCRIPTION: This snippet configures test mangling for the VTK IONetCDF module, which is important for ensuring that unit tests are correctly structured. It uses the 'vtk_add_test_mangling' macro specifically for the VTK::IONetCDF module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IONetCDF)\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test in CMake\nDESCRIPTION: This CMake snippet adds an MPI-enabled test using the `vtk_add_test_mpi` macro. It specifies the test name (`vtkDomainsParallelChemistryCxxTests-MPI`) and the source files (`TestPSimpleBondPerceiver.cxx`) involved in the test. This macro is likely provided by VTK to simplify the creation of MPI-based tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkDomainsParallelChemistryCxxTests-MPI tests\n  TestPSimpleBondPerceiver.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring DSM and Dependencies for Xdmf in CMake\nDESCRIPTION: Sets up DSM (Distributed Shared Memory) support and dependency configurations. Includes settings for MPI and optional features like TIFF support, with special handling for different compilers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): VTK's module system handles dependencies\n#check for TIFF\nfind_package(TIFF)\nif (TIFF_FOUND)\n  add_definitions(-DXDMF_BUILD_TIFF)\n  include_directories(${TIFF_INCLUDE_DIR})\nendif (TIFF_FOUND)\nendif ()\n\nif (FALSE) # XXX(kitware): force settings\n# Test for DSM\noption(XDMF_BUILD_DSM OFF)\nmark_as_advanced(XDMF_BUILD_DSM)\nelse ()\nset(XDMF_BUILD_ON OFF)\nendif ()\nif(XDMF_BUILD_DSM)\n  find_package(MPI REQUIRED)\n  if(MPI_FOUND)\n    include_directories(${MPI_INCLUDE_PATH})\n    # The Intel compiler requires an extra tag for CXX_FLAGS in order to properly build.\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n      add_definitions(-DMPICH_IGNORE_CXX_SEEK)\n    endif ()\n  endif()\n  option(XDMF_BUILD_DSM_THREADS ON)\n  if (XDMF_WRAP_PYTHON)\n    find_path(PYTHON_INCLUDE_MPI4PY_DIR\n      NAMES mpi4py/mpi4py.i\n      DOC   \"Directory containing the mpi4py/mpi4py.i file\")\n  endif ()\n  add_definitions(-DXDMF_BUILD_DSM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Emscripten Build Environment Check\nDESCRIPTION: Ensures the build is running within an Emscripten environment, skipping the project if not compiled with Emscripten\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT EMSCRIPTEN)\n  message(\"Skipping example: This needs to run inside an Emscripten build environment\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Cesium 3D Tiles Test Executable\nDESCRIPTION: Creates the test executable for the VTK Cesium 3D Tiles tests using the VTK CMake testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOCesium3DTilesCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for VTK Rendering Annotation\nDESCRIPTION: Creates an executable for the VTK Rendering Annotation C++ tests. The configuration includes disabling floating point exceptions and setting up rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Annotation/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingAnnotationCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Format Module Definitions\nDESCRIPTION: Sets up module definitions based on locale support and shared library build settings, configuring appropriate export macros and visibility settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (HAVE_STRTOD_L)\n  vtk_module_definitions(VTK::fmt PUBLIC FMT_LOCALE)\nendif ()\n\nif (BUILD_SHARED_LIBS)\n  vtk_module_definitions(VTK::fmt PRIVATE FMT_LIB_EXPORT INTERFACE FMT_SHARED)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Subdirectory Inclusion in VTK\nDESCRIPTION: This snippet conditionally includes the 'Cxx' subdirectory based on the `vtk_testing_cxx_disabled` variable. If `vtk_testing_cxx_disabled` is not set, the 'Cxx' subdirectory is added to the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Helper Sources for VTK InteractionWidgets\nDESCRIPTION: Conditionally adds serialization helper source files when VTK_WRAP_SERIALIZATION is enabled. This allows widgets to be serialized and deserialized for saving and loading widget states.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Hand written (de)serialization routines\nset(serialization_helper_sources)\nif (VTK_WRAP_SERIALIZATION)\n  list(APPEND serialization_helper_sources\n    vtkAbstractWidgetSerDesHelper.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including SVG Testing Module and Adding SVG Tests\nDESCRIPTION: Includes the VTK SVG testing module and adds the SVG tests defined earlier to the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/vtkTestingSVG.cmake\")\nvtk_add_svg_test(${SVGTests})\n```\n\n----------------------------------------\n\nTITLE: Defining FreeType Source Files in CMake\nDESCRIPTION: Defines the source files to be included in the FreeType library build, organized by FreeType's internal module structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  src/base/ftbase.c\n  src/base/ftbbox.c\n  src/base/ftbitmap.c\n  src/base/ftglyph.c\n  src/base/ftinit.c\n  src/base/ftmm.c\n  src/bdf/bdf.c\n  src/cache/ftcache.c\n  src/cff/cff.c\n  src/cid/type1cid.c\n  src/gzip/ftgzip.c\n  src/lzw/ftlzw.c\n  src/pcf/pcf.c\n  src/pfr/pfr.c\n  src/psaux/psaux.c\n  src/pshinter/pshinter.c\n  src/psnames/psmodule.c\n  src/raster/raster.c\n  src/sdf/ftbsdf.c\n  src/sdf/ftsdf.c\n  src/sdf/ftsdfcommon.c\n  src/sdf/ftsdfrend.c\n  src/sfnt/sfnt.c\n  src/smooth/smooth.c\n  src/svg/svg.c\n  src/truetype/truetype.c\n  src/type1/type1.c\n  src/type42/type42.c\n  src/winfonts/winfnt.c)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring GDAL IO Tests in VTK with CMake\nDESCRIPTION: Sets up CXX tests for the VTK GDAL IO module and creates the test executable. It specifies test files for vector reader, raster reader, NoDataValue handling, and palette processing, with special configurations for the NoDataValue test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/GDAL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGDALCxxTests tests\n  TestGDALVectorReader.cxx\n  TestGDALRasterReader.cxx\n  TestGDALRasterNoDataValue.cxx,NO_VALID,NO_OUTPUT\n  TestGDALRasterPalette.cxx\n  )\nvtk_test_cxx_executable(vtkIOGDALCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK ImagingHybrid Module\nDESCRIPTION: Adds the ImagingHybrid module to VTK using the defined classes and configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Hybrid/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::ImagingHybrid\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingHybrid)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests without Baseline Images\nDESCRIPTION: This snippet configures VTK Python tests that do not use baseline images, output, or data. It includes tests for cell point picking and range retrieval for various color transfer functions and lookup tables.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  pickCellPoints.py\n  TestGetRangeColorTransferFunction.py\n  TestGetRangeDiscretizableColorTransferFunction.py\n  TestGetRangeLookupTable.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for OpenVR\nDESCRIPTION: This snippet adds a mangling function for the OpenVR rendering module, which is used during testing to avoid name collisions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingOpenVR)\n```\n\n----------------------------------------\n\nTITLE: Compiler Warning Flag Configuration for GCC-Compatible Compilers\nDESCRIPTION: Sets up various warning flags for GCC-compatible compilers (non-MSVC). Includes checks for compiler support of each flag and adds supported flags to the build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MSVC)\n  # We assume that other compilers are partly compatible with GNUCC\n\n  # clang outputs some warnings for unknown flags that are not caught by check_cxx_compiler_flag\n  # adding -Werror turns such warnings into errors\n  check_cxx_compiler_flag(\"-Werror\" COMPILER_SUPPORT_WERROR)\n  if(COMPILER_SUPPORT_WERROR)\n    set(CMAKE_REQUIRED_FLAGS \"-Werror\")\n  endif()\n  ei_add_cxx_compiler_flag(\"-pedantic\")\n  ei_add_cxx_compiler_flag(\"-Wall\")\n  ei_add_cxx_compiler_flag(\"-Wextra\")\n  #ei_add_cxx_compiler_flag(\"-Weverything\")              # clang\n\n  ei_add_cxx_compiler_flag(\"-Wundef\")\n  ei_add_cxx_compiler_flag(\"-Wcast-align\")\n  ei_add_cxx_compiler_flag(\"-Wchar-subscripts\")\n  ei_add_cxx_compiler_flag(\"-Wnon-virtual-dtor\")\n  ei_add_cxx_compiler_flag(\"-Wunused-local-typedefs\")\n  ei_add_cxx_compiler_flag(\"-Wpointer-arith\")\n  ei_add_cxx_compiler_flag(\"-Wwrite-strings\")\n  ei_add_cxx_compiler_flag(\"-Wformat-security\")\n  ei_add_cxx_compiler_flag(\"-Wshorten-64-to-32\")\n  ei_add_cxx_compiler_flag(\"-Wlogical-op\")\n  ei_add_cxx_compiler_flag(\"-Wenum-conversion\")\n  ei_add_cxx_compiler_flag(\"-Wc++11-extensions\")\n  ei_add_cxx_compiler_flag(\"-Wdouble-promotion\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining XDMF Model Source Files in CMake\nDESCRIPTION: Creates a list of source files for the XDMF model module, which handles domain-specific data structures like grids, geometries, and topologies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset( XdmfModelSource\n  XdmfAttribute\n  XdmfDomain\n  XdmfDsm\n  XdmfDsmBuffer\n  XdmfDsmComm\n  XdmfDsmMsg\n  XdmfGeometry\n  XdmfGrid\n  XdmfH5Driver\n  XdmfMap\n  XdmfRegion\n  XdmfRoot\n  XdmfSet\n  XdmfTime\n  XdmfTopology\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Build on Windows with Ninja\nDESCRIPTION: CMake configuration command for Windows using Ninja generator\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nccmake -GNinja -S %HOMEPATH%\\vtk\\source -B %HOMEPATH%\\vtk\\build\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Generation using Perl\nDESCRIPTION: This snippet checks if header generation is enabled and if Perl is found. If both conditions are met, it executes Perl scripts to generate header files; otherwise, it issues a warning.  It relies on the PERL_EXECUTABLE and HDF5_SOURCE_DIR variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): Hardcode settings.\noption (HDF5_GENERATE_HEADERS \"Rebuild Generated Files\" OFF)\nelse ()\nset(HDF5_GENERATE_HEADERS OFF)\nendif ()\nif (HDF5_GENERATE_HEADERS)\n  set_source_files_properties(${H5_GENERATED_HEADERS} PROPERTIES GENERATED TRUE)\n  if (H5_PERL_FOUND)\n    execute_process (\n        COMMAND ${PERL_EXECUTABLE} ${HDF5_SOURCE_DIR}/bin/make_err ${HDF5_SRC_DIR}/H5err.txt OUTPUT_VARIABLE SCRIPT_OUTPUT\n    )\n    message(STATUS ${SCRIPT_OUTPUT})\n    execute_process (\n        COMMAND ${PERL_EXECUTABLE} ${HDF5_SOURCE_DIR}/bin/make_vers ${HDF5_SRC_DIR}/H5vers.txt OUTPUT_VARIABLE SCRIPT_OUTPUT\n    )\n    message(STATUS ${SCRIPT_OUTPUT})\n    execute_process (\n        COMMAND ${PERL_EXECUTABLE} ${HDF5_SOURCE_DIR}/bin/make_overflow ${HDF5_SRC_DIR}/H5overflow.txt OUTPUT_VARIABLE SCRIPT_OUTPUT\n    )\n    message(STATUS ${SCRIPT_OUTPUT})\n  else ()\n    message (WARNING \"Cannot generate headers - perl not found\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties for OpenGL2\nDESCRIPTION: Sets compile definitions for specific source files to enable OpenGL2 support in the absence of vtkRenderingOpenGLConfigure.h\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  vtkRenderWindow.cxx  # dummy out painterdevice adapter\n  vtkHardwareSelector.cxx # dummy out painter device adapter\n  PROPERTIES\n    COMPILE_DEFINITIONS VTK_OPENGL2)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Java Test Execution\nDESCRIPTION: Sets up test execution commands for regression testing and simple tests, including classpath and environment configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/Testing/Java/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtk_test_classpath\n  \"$<TARGET_FILE:vtkjava_tests>\"\n  \"$<TARGET_FILE:VTK::vtkjava>\")\nstring(REPLACE \";\" \"${classpath_separator}\" vtk_test_classpath \"${vtk_test_classpath}\")\n\nif (TARGET VTK::RenderingOpenGL2)\n  ExternalData_add_test(VTKData\n    NAME    vtkJavaTests-Regression\n    COMMAND \"${Java_JAVA_EXECUTABLE}\"\n            -classpath \"${vtk_test_classpath}\"\n            vtk.test.Regression\n            -D \"${CMAKE_BINARY_DIR}/ExternalData\"\n            -V \"DATA{../Data/Baseline/Cone.png}\"\n            -T \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n  set_property(TEST vtkJavaTests-Regression\n    PROPERTY\n      ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\nendif ()\n\nforeach (java_simple_test IN LISTS java_simple_test_names)\n  add_test(\n    NAME    \"vtkJavaTests-${java_simple_test}\"\n    COMMAND \"${Java_JAVA_EXECUTABLE}\"\n            -classpath \"${vtk_test_classpath}\"\n            \"vtk.test.${java_simple_test}\"\n            -T \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Temporal C++ Test Executable\nDESCRIPTION: Sets up the test executable for VTK Filters Temporal C++ tests using vtk_test_cxx_executable. It includes additional source files and specifies the RENDERING_FACTORY option.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersTemporalCxxTests tests\n  RENDERING_FACTORY\n  MeshCacheMockAlgorithms.cxx\n  MeshCachePipeline.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: VTK XML RectilinearGrid Structure Example\nDESCRIPTION: Example of VTK XML format for RectilinearGrid datasets. This format defines the grid's whole extent and coordinates explicitly, with cells defined implicitly by the extent.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<VTKFile type=\"RectilinearGrid\" ...>\n  <RectilinearGrid WholeExtent=\"x1 x2 y1 y2 z1 z2\">\n    <Piece Extent=\"x1 x2 y1 y2 z1 z2\">\n    <PointData>...</PointData>\n    <CellData>...</CellData>\n    <Coordinates>...</Coordinates>\n    </Piece>\n  </RectilinearGrid>\n</VTKFile>\n```\n\n----------------------------------------\n\nTITLE: Configuring JPEG Source Files in CMake\nDESCRIPTION: Defines a comprehensive list of C source files for the JPEG library implementation, covering encoding, decoding, and utility functions\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  jcapimin.c\n  jcapistd.c\n  jccoefct.c\n  ...\n  jsimd_none.c)\n```\n\n----------------------------------------\n\nTITLE: Building TreeLayout Example\nDESCRIPTION: Configures the TreeLayout executable target and links it with VTK libraries. Includes module auto-initialization setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(TreeLayout\n  TreeLayout.cxx)\ntarget_link_libraries(TreeLayout\n  PRIVATE\n    ${VTK_LIBRARIES})\n\nvtk_module_autoinit(\n  TARGETS TreeLayout\n  MODULES ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Data for VTK Module in CMake\nDESCRIPTION: This snippet uses the vtk_module_test_data() function to specify LAS files as test data for the VTK module. It includes two test files: test_1.las and test_2.las from the Data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/test_1.las\n  Data/test_2.las)\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Modernization Script\nDESCRIPTION: A script to parse and replace generic VTK imports with module-specific imports for improved performance and modularity.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.3.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ModernizePythonImports.py - Script to replace general VTK imports\n```\n\n----------------------------------------\n\nTITLE: Vector Macro Documentation in VTK C++\nDESCRIPTION: Shows the documentation format for vector macros with multiple parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n/**\n * Set/Get the color which is used to draw shapes in the image. The parameters are SetDrawColor(red, green, blue, alpha)\n */\nvtkSetVector4Macro(DrawColor, double);\nvtkGetVector4Macro(DrawColor, double);\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Definitions\nDESCRIPTION: Sets optional timer definitions for surface LIC painter and line integral convolution based on build options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_RENDERINGPARALLELLIC_SURFACELICPAINTER_TIMER)\n  vtk_module_definitions(VTK::RenderingLICOpenGL2\n    PRIVATE\n      vtkSurfaceLICPainterTIME)\nendif ()\nif (VTK_RENDERINGPARALLELLIC_LINEINTEGRALCONVOLUTION2D_TIMER)\n  vtk_module_definitions(VTK::RenderingLICOpenGL2\n    PRIVATE\n      vtkLineIntegralConvolution2DTIME)\nendif ()\nvtk_add_test_mangling(VTK::RenderingLICOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Name - CMake\nDESCRIPTION: This snippet sets the minimum required version of CMake and defines the project name for VTK testing configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.16 FATAL_ERROR)\n\nproject(VTKTestExternalWasm)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Interpreter Test for Static Builds in CMake\nDESCRIPTION: This snippet sets up a CMake test for the VTK Python interpreter in static builds. It adds a test that runs Python and attempts to import VTK, setting various properties including environment variables and failure conditions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/PythonInterpreter/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (PYTHON_EXECUTABLE AND NOT BUILD_SHARED_LIBS)\n  # For now, this test is only added for static builds.\n  # In theory, we can make it work in shared builds too, it just needs more work to figure out\n  # what variables need to be set on each platform correctly.\n  add_test(NAME vtkPythonInterpreterPythonTests-TestImportVanillaInterpreter\n    COMMAND \"${PYTHON_EXECUTABLE}\" -m vtk)\n  set_tests_properties(\"vtkPythonInterpreterPythonTests-TestImportVanillaInterpreter\"\n    PROPERTIES\n      LABELS \"${_vtk_build_test_labels}\"\n      FAIL_REGULAR_EXPRESSION \"${_vtk_fail_regex}\"\n      # This must match VTK_SKIP_RETURN_CODE in vtkTesting.h\n      SKIP_RETURN_CODE 125\n      ENVIRONMENT\n      \"PYTHONPATH=${CMAKE_BINARY_DIR}/${VTK_PYTHON_SITE_PACKAGES_SUFFIX}/_vtk.zip:${CMAKE_BINARY_DIR}/${VTK_PYTHON_SITE_PACKAGES_SUFFIX}/\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Expat Third-Party Module in VTK with CMake\nDESCRIPTION: Configures Expat XML parser as a VTK third-party module with metadata including license, version, and download location. Supports both internal builds (from source) and external builds (using system-installed Expat).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkexpat/COPYING\"\n    SPDX_LICENSE_IDENTIFIER\n      \"MIT\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (c) 1998-2000 Thai Open Source Software Center Ltd and Clark Cooper\"\n      \"Copyright (c) 2001-2019 Expat maintainers\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/expat.git@for/vtk-20250317-2.7.0\"\n    VERSION\n    \"2.7.0\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE EXPAT\n    VERSION 2.6.3\n    TARGETS EXPAT::EXPAT\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Microscopy Domain Classes\nDESCRIPTION: This snippet sets the classes that are part of the VTK::DomainsMicroscopy module.  Currently, it only includes vtkOpenSlideReader.  These classes will be compiled and included in the module's library.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkOpenSlideReader)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK MPI Module Definitions\nDESCRIPTION: Defines interface compilation definitions for the VTK MPI module to skip C++ bindings and ensure proper MPI configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MPI/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_definitions(VTK::mpi\n  INTERFACE\n    MPICH_SKIP_MPICXX\n    OMPI_SKIP_MPICXX\n    MPI_NO_CPPBIND\n    _MPICC_H)\n```\n\n----------------------------------------\n\nTITLE: Finding OpenVR Package\nDESCRIPTION: This snippet uses the vtk_module_find_package command to locate the OpenVR package required for rendering within VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PACKAGE OpenVR)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Variable Scope Warnings in Wrapping Tools\nDESCRIPTION: Suppression rules for variable scope warnings in the VTK wrapping tools. These are C-style code files where local variable declarations are often placed at the beginning of functions rather than at their first use.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_5\n\nLANGUAGE: cppcheck\nCODE:\n```\n// There are many of these.  Can we assume C99 now?\nvariableScope:*/Wrapping/Tools/vtkParseData.c\nvariableScope:*/Wrapping/Tools/vtkParseExtras.c\nvariableScope:*/Wrapping/Tools/vtkParseHierarchy.c\nvariableScope:*/Wrapping/Tools/vtkParseJava.c\nvariableScope:*/Wrapping/Tools/vtkParseMain.c\nvariableScope:*/Wrapping/Tools/vtkParseMangle.c\nvariableScope:*/Wrapping/Tools/vtkParseMerge.c\nvariableScope:*/Wrapping/Tools/vtkParsePreprocess.c\nvariableScope:*/Wrapping/Tools/vtkParseString.c\nvariableScope:*/Wrapping/Tools/vtkParseSystem.c\nvariableScope:*/Wrapping/Tools/vtkWrap.c\nvariableScope:*/Wrapping/Tools/vtkWrapHierarchy.c\nvariableScope:*/Wrapping/Tools/vtkWrapJava.c\nvariableScope:*/Wrapping/Tools/vtkWrapPython.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonClass.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonEnum.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonMethod.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonMethodDef.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonOverload.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonTemplate.c\nvariableScope:*/Wrapping/Tools/vtkWrapPythonType.c\nvariableScope:*/Wrapping/Tools/vtkWrapText.c\n```\n\n----------------------------------------\n\nTITLE: Feature Configuration Function\nDESCRIPTION: Custom CMake function to toggle library features based on configuration settings, setting corresponding feature flags\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(is_enabled feature ret_val)\n  if(${feature})\n    set(\"NC_${ret_val}\" 1 PARENT_SCOPE)\n  else()\n    set(\"NC_${ret_val}\" 0 PARENT_SCOPE)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Specific Warnings for Theora\nDESCRIPTION: Applies warning suppression for specific warnings that are triggered by the Theora library's coding style but can be safely ignored.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Suppress these warnings. libtheora has an odd style and the library is tested\n# well enough that we can ignore them.\nvtktheora_suppress_warning(\"logical-op-parentheses\")\nvtktheora_suppress_warning(\"parentheses\")\nvtktheora_suppress_warning(\"shift-op-parentheses\")\nvtktheora_suppress_warning(\"tautological-compare\")\n```\n\n----------------------------------------\n\nTITLE: Configuring FFMPEG Writer Tests in VTK with CMake\nDESCRIPTION: Sets up the basic FFMPEG writer test with no validation. This is the first test configuration in the file and creates a test executable from TestFFMPEGWriter.cxx.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOFFMPEGCxxTests tests\n  TestFFMPEGWriter.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring NetCDF Version\nDESCRIPTION: Set major, minor, and patch version numbers for NetCDF library, establishing the library version string\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(NC_VERSION_MAJOR 4)\nset(NC_VERSION_MINOR 9)\nset(NC_VERSION_PATCH 2)\nset(NC_VERSION_NOTE \"\")\nset(netCDF_VERSION ${NC_VERSION_MAJOR}.${NC_VERSION_MINOR}.${NC_VERSION_PATCH}${NC_VERSION_NOTE})\n```\n\n----------------------------------------\n\nTITLE: Configuring BMP Memory Writer Test in CMake for VTK\nDESCRIPTION: Adds a test for writing BMP images to memory in VTK without requiring input data or validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestWriteToMemoryBMP,TestWriteToMemory.cxx,NO_DATA NO_VALID NO_OUTPUT\n    \"test.bmp\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake code configures test data for a VTK module by specifying the ironProt.vtk data file and adds the Cxx subdirectory to the build process. The vtk_module_test_data function is used to register data files needed for tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/ironProt.vtk)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenFOAM and XYZ Test Data in CMake for VTK Module\nDESCRIPTION: Specifies test data files and directories for VTK module testing, including OpenFOAM cavity and mixerGgi datasets, and a bigendian XYZ file. Uses regex patterns to include multiple files and recursive directory inclusion.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/OpenFOAM/cavity/,REGEX:.*\n  Data/OpenFOAM/cavity/0/,REGEX:.*\n  Data/OpenFOAM/cavity/0.5/,REGEX:.*\n  Data/OpenFOAM/cavity/0.5/uniform/,REGEX:.*\n  Data/OpenFOAM/cavity/1/,REGEX:.*\n  Data/OpenFOAM/cavity/1/uniform/,REGEX:.*\n  Data/OpenFOAM/cavity/1.5/,REGEX:.*\n  Data/OpenFOAM/cavity/1.5/uniform/,REGEX:.*\n  Data/OpenFOAM/cavity/2.5/,REGEX:.*\n  Data/OpenFOAM/cavity/2.5/uniform/,REGEX:.*\n  Data/OpenFOAM/cavity/2/,REGEX:.*\n  Data/OpenFOAM/cavity/2/uniform/,REGEX:.*\n  Data/OpenFOAM/cavity/constant/,REGEX:.*\n  Data/OpenFOAM/cavity/constant/polyMesh/,REGEX:.*\n  Data/OpenFOAM/cavity/system/,REGEX:.*\n\n  Data/OpenFOAM/mixerGgi/,REGEX:.*\n  Data/OpenFOAM/mixerGgi/processor0/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/mixerGgi/processor1/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/mixerGgi/processor2/,RECURSE:,REGEX:.*$\n  Data/OpenFOAM/mixerGgi/processor3/,RECURSE:,REGEX:.*$\n\n  Data/bigendian.xyz)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests for VTK IO SegY\nDESCRIPTION: This snippet utilizes the `vtk_add_test_cxx` CMake macro to define a set of C++ tests for the VTK IO SegY component. It takes the name of the test suite (`vtkIOSegYCxxTests tests`) and a list of C++ source files that contain the individual test cases.  The commented-out line `# TestSegY3DReader.cxx #19221` indicates a test that is currently disabled or pending.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOSegYCxxTests tests\n  TestSegY2DReader.cxx\n  TestSegY2DReaderZoom.cxx\n# TestSegY3DReader.cxx #19221\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Win32 OpenGL Test in CMake\nDESCRIPTION: Adds a Win32-specific OpenGL test when VTK is configured to use Win32 OpenGL.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_WIN32_OPENGL)\n  vtk_add_test_cxx(vtkRenderingOpenGL2CxxTests tests\n    TestWin32OpenGLDXRenderWindow.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Declaring and Configuring VTK Object Factory for TextRenderer in CMake\nDESCRIPTION: Declares a VTK object factory for vtkTextRenderer with vtkMathTextFreeTypeTextRenderer as the override. Configures the object factory with source and header files, and specifies the export macro.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkTextRenderer\n  OVERRIDE  vtkMathTextFreeTypeTextRenderer)\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGFREETYPE_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Defining VTK ChartsCore Classes in CMake\nDESCRIPTION: This snippet defines a list of classes to be included in the VTK ChartsCore module. It covers various chart types, plots, and related components used in VTK's charting functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAxis\n  vtkAxisExtended\n  vtkCategoryLegend\n  vtkChart\n  vtkChartBox\n  vtkChartHistogram2D\n  vtkChartLegend\n  vtkChartMatrix\n  vtkChartParallelCoordinates\n  vtkChartPie\n  vtkChartXY\n  vtkChartXYZ\n  vtkColorLegend\n  vtkColorTransferControlPointsItem\n  vtkColorTransferFunctionItem\n  vtkCompositeControlPointsItem\n  vtkCompositeTransferFunctionItem\n  vtkContextArea\n  vtkContextPolygon\n  vtkControlPointsItem\n  vtkInteractiveArea\n  vtkLookupTableItem\n  vtkPiecewiseControlPointsItem\n  vtkPiecewiseFunctionItem\n  vtkPiecewisePointHandleItem\n  vtkPlot\n  vtkPlot3D\n  vtkPlotArea\n  vtkPlotBag\n  vtkPlotBar\n  vtkPlotBarRangeHandlesItem\n  vtkPlotBox\n  vtkPlotFunctionalBag\n  vtkPlotGrid\n  vtkPlotHistogram2D\n  vtkPlotLine\n  vtkPlotLine3D\n  vtkPlotParallelCoordinates # This adds a vtkInfovisCore dep for one class...\n  vtkPlotPie\n  vtkPlotPoints\n  vtkPlotPoints3D\n  vtkPlotRangeHandlesItem\n  vtkPlotStacked\n  vtkPlotSurface\n  vtkRangeHandlesItem\n  vtkScalarsToColorsItem\n  vtkScatterPlotMatrix\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add Cxx Subdirectory\nDESCRIPTION: This CMake code conditionally adds the \"Cxx\" subdirectory to the build process. The `add_subdirectory` command is only executed if the `vtk_testing_cxx_disabled` variable is not set (or is set to a false value). This allows for selectively including C++-based tests and components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Documentation Setup\nDESCRIPTION: This snippet sets up the necessary configurations for running Doxygen through CMake. It checks for dependencies such as the presence of 'dot' for generating diagrams. It iterates through module directories to ensure both sources and binaries are included in documentation generation, excluding utilities and third-party modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HAVE_DOT_YESNO NO)\nif(DOT)\n  set(HAVE_DOT_YESNO YES)\n  if(NOT DOT_PATH)\n    get_filename_component(DOT_PATH ${DOT} PATH)\n  endif()\nendif()\n\nset(VTK_MODULE_DIRS_DOXYGEN \"\")\nforeach(module IN LISTS vtk_module_files)\n  file(RELATIVE_PATH module_dir \"${VTK_SOURCE_DIR}\" \"${module}\")\n  get_filename_component(module_BASE ${module_dir} PATH)\n  if(module_BASE MATCHES \"^Utilities\" OR module_BASE MATCHES \"^ThirdParty\")\n    continue()\n  endif ()\n  string(APPEND VTK_MODULE_DIRS_DOXYGEN\n    \"\\\"${VTK_SOURCE_DIR}/${module_BASE}\\\"\n\\\"${VTK_BINARY_DIR}/${module_BASE}\\\"\n\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory in CMake\nDESCRIPTION: This snippet configures the VTK object factory, specifying source and header files, and an export macro for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKFILTERSPARALLELDIY2_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOExportPDF Module to Build System\nDESCRIPTION: Adds the IOExportPDF module to the VTK build system with its classes, generated object factory sources, and private headers. Also configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportPDF/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOExportPDF\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOExportPDF)\n```\n\n----------------------------------------\n\nTITLE: Linking VTK IOODBC Module to ODBC\nDESCRIPTION: This function links the VTK::IOODBC module to the ODBC library. `NO_KIT_EXPORT_IF_SHARED` prevents exporting the ODBC dependency if the module is shared. `PRIVATE` indicates that ODBC is a private dependency. `ODBC::ODBC` specifies the target name for the ODBC library.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_link(VTK::IOODBC\n  NO_KIT_EXPORT_IF_SHARED\n  PRIVATE\n    ODBC::ODBC)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK ChartsCore Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK::ChartsCore module using the previously defined classes and sets up test mangling for the module. It uses VTK-specific CMake functions to configure the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::ChartsCore\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ChartsCore)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Project Name\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name. The `cmake_minimum_required` command specifies the minimum CMake version needed to process the file, while `project` sets the name of the project to \"AMR\".\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/AMR/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(AMR)\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten Link Options in CMake\nDESCRIPTION: This snippet sets various Emscripten compilation options for the WebAssembly target, including memory growth settings, environment configurations, and exported functions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(emscripten_link_options)\n\nlist(APPEND emscripten_link_options\n  \"-lembind\"\n  \"SHELL:-s WASM=1\"\n  \"SHELL:-s EXPORT_NAME=createMultiConeModule\"\n  \"SHELL:-s MODULARIZE=1\"\n  \"SHELL:-s EXPORTED_FUNCTIONS=\\\"['_main', '_stop', '_getConeResolution', '_setConeResolution']\\\"\"\n  \"SHELL:-s EXPORTED_RUNTIME_METHODS=\\\"['ccall', 'cwrap']\\\"\"\n  \"SHELL:-s ENVIRONMENT=web\"\n  \"SHELL:-s ALLOW_MEMORY_GROWTH=1\"\n)\n\ntarget_link_options(MultiCone\n  PUBLIC\n    ${emscripten_link_options}\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class List Generation\nDESCRIPTION: Dynamically builds lists of source and header files for the Ioss module based on configured components and dependencies\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/vtkioss/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources)\nset(headers)\nforeach (class IN LISTS classes)\n  list(APPEND sources \"${class}.C\")\n  list(APPEND headers \"${class}.h\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python-Specific VTK Test Data in CMake\nDESCRIPTION: Declares additional test data files needed specifically for Python tests. This conditional block adds various data formats including DEM, facet, PPM, 3DS, BMP and PNG files when Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/SainteHelens.dem\n    Data/clown.facet\n    Data/earth.ppm\n    Data/headsq/,REGEX:.*\n    Data/iflamigm.3ds\n    Data/masonry.bmp\n    Data/vtk.png)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Computing Bounds Using Thread Local Storage in VTK\nDESCRIPTION: Implementation of a thread-safe bounds computation using vtkSMPThreadLocal. The functor includes Initialize(), operator(), and Reduce() methods to safely compute bounds across multiple threads.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/smptools.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nusing BoundsArray = std::array<double,6>;\nusing TLS = vtkSMPThreadLocal<BoundsArray>;\n\nstruct BoundsFunctor\n{\n  vtkFloatArray* Pts;\n  BoundsArray Bounds;\n  TLS LocalBounds;\n\n  BoundsFunctor(vtkFloatArray *pts) : Pts(pts) {}\n\n  // Initialize thread local storage\n  void Initialize()\n  {\n    // The first call to .Local() will create the array,\n    // all others will return the same.\n    std::array<double,6>& bds = this->LocalBounds.Local();\n    bds[0] = VTK_DOUBLE_MAX;\n    bds[1] = -VTK_DOUBLE_MAX;\n    bds[2] = VTK_DOUBLE_MAX;\n    bds[3] = -VTK_DOUBLE_MAX;\n    bds[4] = VTK_DOUBLE_MAX;\n    bds[5] = -VTK_DOUBLE_MAX;\n  }\n\n  // Process the range of points [begin,end)\n  void operator()(vtkIdType begin, vtkIdType end)\n  {\n    BoundsArray& lbounds = this->LocalBounds.Local();\n    float* x = this->Pts->GetPointer(3*begin);\n    for (vtkIdType i=begin; i<end; i++)\n    {\n      lbounds[0] = (x[0] < lbounds[0] ? x[0] : lbounds[0]);\n      lbounds[1] = (x[0] > lbounds[1] ? x[0] : lbounds[1]);\n      lbounds[2] = (x[1] < lbounds[2] ? x[1] : lbounds[2]);\n      lbounds[3] = (x[1] > lbounds[3] ? x[1] : lbounds[3]);\n      lbounds[4] = (x[2] < lbounds[4] ? x[2] : lbounds[4]);\n      lbounds[5] = (x[2] > lbounds[5] ? x[2] : lbounds[5]);\n\n      x += 3;\n    }\n  }\n\n  // Composite / combine the thread local storage into a global result.\n  void Reduce()\n  {\n    this->Bounds[0] = VTK_DOUBLE_MAX;\n    this->Bounds[1] = -VTK_DOUBLE_MAX;\n    this->Bounds[2] = VTK_DOUBLE_MAX;\n    this->Bounds[3] = -VTK_DOUBLE_MAX;\n    this->Bounds[4] = VTK_DOUBLE_MAX;\n    this->Bounds[5] = -VTK_DOUBLE_MAX;\n\n    using TLSIter = TLS::iterator;\n    TLSIter end = this->LocalBounds.end();\n    for (TLSIter itr = this->LocalBounds.begin(); itr != end; ++itr)\n    {\n       BoundsArray& lBounds = *itr;\n       this->Bounds[0] = (this->Bounds[0] < lBounds[0] ? this->Bounds[0] : lBounds[0]);\n       this->Bounds[1] = (this->Bounds[1] > lBounds[1] ? this->Bounds[1] : lBounds[1]);\n       this->Bounds[2] = (this->Bounds[2] < lBounds[2] ? this->Bounds[2] : lBounds[2]);\n       this->Bounds[3] = (this->Bounds[3] > lBounds[3] ? this->Bounds[3] : lBounds[3]);\n       this->Bounds[4] = (this->Bounds[4] < lBounds[4] ? this->Bounds[4] : lBounds[4]);\n       this->Bounds[5] = (this->Bounds[5] > lBounds[5] ? this->Bounds[5] : lBounds[5]);\n    }\n  }\n}; // BoundsFunctor\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: Configures the VTK::IOParallel module using the vtk_module_add_module CMake function. This function takes the module name, classes, sources, and private headers as input to define the build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOParallel\n  CLASSES ${classes}\n  SOURCES ${sources}\n  PRIVATE_HEADERS ${private_headers})\n```\n\n----------------------------------------\n\nTITLE: Generating Header and Source Files List\nDESCRIPTION: This snippet iterates over the class names defined earlier, appending corresponding header and source files to their respective lists, and sets up conditions for installation of headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (class ${classes})\n  list(APPEND headers \"${class}.h\")\n  # XXX(kitware): vtk_module_add_module below also installs\n  if (FALSE)\n  install(\n    FILES \"${class}.h\"\n    DESTINATION \"include/token/${token_VERSION}/token/${headerDir}\"\n  )\n  endif()\n  if (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/${class}.cxx\")\n    list(APPEND sources \"${class}.cxx\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installation of VTK PugiXML Module Headers\nDESCRIPTION: This snippet handles the installation of the generated header file for the PugiXML module within the VTK framework. It ensures that the necessary headers are included in the installation package of VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_pugixml.h\")\n```\n\n----------------------------------------\n\nTITLE: Header Installation Configuration in CMake\nDESCRIPTION: This snippet configures header installation settings based on the `_vtk_build_INSTALL_HEADERS` variable. It sets the installation directory, include prefix, headers component, and installation options. If target-specific components are used, it prepends 'VTK::kwiml-' to the `KWIML_HEADERS_COMPONENT`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (_vtk_build_INSTALL_HEADERS)\n  set(KWIML_INSTALL_INCLUDE_DIR \"${_vtk_build_HEADERS_DESTINATION}\")\n  set(KWIML_INCLUDE_PREFIX \"vtkkwiml\")\n  set(KWIML_HEADERS_COMPONENT \"${_vtk_build_HEADERS_COMPONENT}\")\n  if (_vtk_build_TARGET_SPECIFIC_COMPONENTS)\n    string(PREPEND KWIML_HEADERS_COMPONENT \"VTK::kwiml-\")\n  endif ()\n  set(KWIML_INSTALL_INCLUDE_OPTIONS\n    COMPONENT \"${KWIML_HEADERS_COMPONENT}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Copying HTML to Build Directory\nDESCRIPTION: Adds a custom command to copy the index.html file to the target executable's directory during the build process\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  TARGET WrappedMace\n  COMMAND\n    ${CMAKE_COMMAND} -E copy_if_different\n      \"${CMAKE_CURRENT_SOURCE_DIR}/index.html\"\n      $<TARGET_FILE_DIR:WrappedMace>\n)\n```\n\n----------------------------------------\n\nTITLE: Initial CMake Setup for VTK Testing\nDESCRIPTION: This snippet initializes a CMake project for testing VTK modules separately from the main build tree. It sets minimum CMake version requirements and ensures the project is not built from within the main VTK source or binary directories. The snippet includes settings for handling the test directory structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWheel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.16 FATAL_ERROR)\n\nproject(VTKTestExternalWheel NONE)\nif(VTK_SOURCE_DIR OR VTK_BINARY_DIR)\n  message(FATAL_ERROR \"This directory may build only outside VTK!\")\nendif()\n\ninclude(CTest)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK CommonMisc Module Classes\nDESCRIPTION: Defines the list of C++ classes that are part of the VTK CommonMisc module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkContourValues\n  vtkErrorCode\n  vtkExprTkFunctionParser\n  vtkFunctionParser\n  vtkHeap\n  vtkPolygonBuilder\n  vtkResourceFileLocator)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for VPIC Module\nDESCRIPTION: Defines the list of header files (.h) for the VPIC module, including both source directory headers and the generated VPICDefinition.h in the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/vtkvpic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  VPICDataSet.h\n  VPICGlobal.h\n  VPICHeader.h\n  VPICPart.h\n  VPICView.h\n  GridExchange.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/VPICDefinition.h\")\n```\n\n----------------------------------------\n\nTITLE: Linking OpenVR Module\nDESCRIPTION: This snippet links the OpenVR module with its public dependencies, ensuring that all necessary libraries are available during the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::RenderingOpenVR\n  PUBLIC\n    OpenVR::OpenVR)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingCore Module\nDESCRIPTION: Configures and adds the VTK RenderingCore module with specified classes, headers, and serialization sources\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingCore\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  HEADERS ${headers}\n  SOURCES ${serialization_helper_sources}\n  NOWRAP_HEADERS ${nowrap_headers}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure ant.properties\nDESCRIPTION: Configures the ant.properties file, copying it from the source directory to the binary directory. The `@ONLY` option means only variables marked with `@variable@` will be replaced during the copy.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/ant.properties.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/ant.properties\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Rendering LIC OpenGL2 CXX Test Executable in CMake\nDESCRIPTION: Configures the test executable for VTK Rendering LIC OpenGL2 C++ tests. It includes the rendering factory and specific test drivers for structured grid LIC 2D and surface LIC tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingLICOpenGL2CxxTests tests\n  RENDERING_FACTORY\n  vtkStructuredGridLIC2DTestDriver.cxx\n  vtkSurfaceLICTestDriver.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring HDR RGBE Format Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK HDR reader using RGBE format with a beach scene sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestHDRReaderRGBE,TestHDRReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/spiaggia_di_mondello_1k.hdr}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenVR Interactive Tests in CMake\nDESCRIPTION: This snippet defines a CMake option to enable OpenVR interactive tests. These tests require an OpenVR runtime and a HMD, and they run interactively. The option is initially set to OFF and marked as advanced.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"option(VTK_OPENVR_TESTING_ENABLE_INTERACTIVE_TESTS \\\"Enable OpenVR tests that are interactive\\\" OFF)\nmark_as_advanced(VTK_OPENVR_TESTING_ENABLE_INTERACTIVE_TESTS)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OptiX Tests in CMake for VTK Ray Tracing\nDESCRIPTION: Sets up OptiX-specific tests for VTK's ray tracing capabilities. It reuses some OSPRay tests with the OptiX backend and adds new test sources with an 'OptiX' suffix.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_VISRTX)\n  # OSPRay tests that are rerun with the OptiX backend\n  set(optix_tests\n    TestOSPRayAmbient\n    TestOSPRayCompositePolyDataMapper2\n    TestOSPRayDepthOfField\n    TestOSPRayDynamicObject\n    TestOSPRayDynamicScene\n    TestOSPRayImplicits\n    TestOSPRayLayers\n    TestOSPRayLights\n    TestOSPRayMultiBlock\n#   TestOSPRayMultiBlockPartialArrayFieldData #19221\n    TestOSPRayOrthographic\n    TestOSPRayPass\n    TestOSPRayRenderMesh\n    TestOSPRayRotatedNormals\n    TestOSPRayScalarBar\n    TestOSPRayTime\n    TestOSPRayWindow\n    TestOSPRayStereo\n    TestCategoricalMaterials\n    # TestCategoricalMultiBlock #Disabled because of unknown instability after OSPRay 2 upgrade. Could not reproduce on NV side.\n    TestPathTracerBackground\n    TestPathTracerLuminous\n    #TestPathTracerMaterials #Disabled because of unknown instability after OSPRay 2 upgrade. Could not reproduce on NV side.\n    TestPathTracerShadows\n    TestOSPRayCache\n    #TestOSPRayTiling #Disabled because of unknown instability after OSPRay 2 upgrade. Could not reproduce on NV side.\n    )\n\n  set(testname_suffix \"OptiX\")\n  set(optix_test_sources)\n  foreach (tname IN LISTS optix_tests)\n    list(APPEND optix_test_sources ${tname}${testname_suffix},${tname}.cxx)\n  endforeach ()\n\n  vtk_add_test_cxx(vtkRenderingRayTracingCxxTests tests_optix\n    \"--OptiX\"\n    ${optix_test_sources})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Postfix for Expat Library\nDESCRIPTION: This snippet sets various postfixes for the Expat library based on build types and platform-specific conditions. It manages compilation settings for MSVC and different configurations like DEBUG, RELEASE, etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(_EXPAT_UNICODE)\n  set(_POSTFIX_WIDE \"w\")\nendif()\n\nif(MSVC AND NOT EXPAT_SHARED_LIBS)\n  if(EXPAT_MSVC_STATIC_CRT)\n    set(_POSTFIX_CRT \"MT\")\n  else()\n    set(_POSTFIX_CRT \"MD\")\n  endif()\nendif()\n\nif (FALSE) # XXX(kitware): Settings handled by VTK.\nforeach(build_type_upper\n  ${_EXPAT_BUILD_TYPE_UPPER}\n  DEBUG\n  RELEASE\n  MINSIZEREL\n  RELWITHDEBINFO\n)\n  if(WIN32 AND build_type_upper STREQUAL \"DEBUG\")\n    set(_POSTFIX_DEBUG \"d\")\n  else()\n    set(_POSTFIX_DEBUG \"\")  # needs a reset because of being looped\n  endif()\n\n  expat_shy_set(EXPAT_${build_type_upper}_POSTFIX \"${_POSTFIX_WIDE}${_POSTFIX_DEBUG}${_POSTFIX_CRT}\" CACHE STRING \"Library filename postfix for build type ${build_type_upper}; yields filenames libexpat<postfix=[w][d][MD|MT]>.(dll|dylib|lib|so)\")\n  mark_as_advanced(EXPAT_${build_type_upper}_POSTFIX)\n  set_property(TARGET expat PROPERTY ${build_type_upper}_POSTFIX ${EXPAT_${build_type_upper}_POSTFIX})\nendforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Parsing Integer Types with from_chars in C++\nDESCRIPTION: Function signatures for parsing integer types from character sequences. These functions support parsing integers from ASCII strings with similar syntax to the floating-point versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nfrom_chars_result from_chars(char const *first, char const *last, int &value, ...);\nfrom_chars_result from_chars(char const *first, char const *last, unsigned &value, ...);\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing VTK Expat Headers\nDESCRIPTION: Configures the vtk_expat.h header file from a template and installs it as part of the VTK module headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_expat.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_expat.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_expat.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: Declares test data files needed for VTK module tests. The files include various data formats such as VTK, binary, PPM, and g files that will be made available to tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/RectGrid2.vtk\n  Data/blow.vtk\n  Data/combq.bin\n  Data/combxyz.bin\n  Data/earth.ppm\n  Data/teapot.g\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data with Regular Expressions\nDESCRIPTION: This snippet sets up the test data for the VTK module by specifying multiple data directories and their structure using regular expressions for path matching. It is essential for organizing and locating relevant test data files during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/ADIOS2/3D_7-point_24-step/,REGEX:.*\n  Data/ADIOS2/3D_7-point_24-step/gs.bp.dir/,REGEX:.*\n  Data/ADIOS2/HeatMap3D/,REGEX:.*\n  Data/ADIOS2/HeatMap3D/HeatMap3D.bp.dir/,REGEX:.*\n  Data/ADIOS2/HeatMap3D_3-step/,REGEX:.*\n  Data/ADIOS2/HeatMap3D_3-step/HeatMap3D3TimeSteps.bp.dir/,REGEX:.*\n  Data/ADIOS2/2D_HeatTransfer_10-step/,REGEX:.*\n  Data/ADIOS2/2D_HeatTransfer_10-step/sim.bp.dir/,REGEX:.*\n  Data/ADIOS2/vtx/bp3/,REGEX:.*\n  Data/ADIOS2/vtx/bp3/heat3D_1.bp.dir/,REGEX:.*\n  Data/ADIOS2/vtx/bp3/heat3D_2.bp.dir/,REGEX:.*\n  Data/ADIOS2/vtx/bp3/heat3D_3.bp.dir/,REGEX:.*\n  Data/ADIOS2/vtx/bp3/heat3D_4.bp.dir/,REGEX:.*\n  Data/ADIOS2/vtx/bp3/heat1D_1.bp.dir/,REGEX:.*\n  Data/ADIOS2/vtx/bp4/cell-data-time.bp/,REGEX:.*\n  Data/ADIOS2/vtx/bp4/heat3D_1.bp/,REGEX:.*\n  Data/ADIOS2/vtx/bp4/heat3D_2.bp/,REGEX:.*\n  Data/ADIOS2/vtx/bp4/heat3D_3.bp/,REGEX:.*\n  Data/ADIOS2/vtx/bp4/heat3D_4.bp/,REGEX:.*\n  Data/ADIOS2/vtx/bp4/heat1D_1.bp/,REGEX:.*\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory to VTK Build\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that the C++ source code for VTK should be compiled and included in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Creating a C++ Test Executable using VTK Macros\nDESCRIPTION: This snippet creates the executable for the C++ test suite named 'tests'. It relies on the VTK CMake macros to properly link and configure the executable, ensuring that it can run the registered test cases.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtklibharuCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake script configures test data for a VTK module and conditionally includes C++ and Python test subdirectories. It specifies a VTP file as test data, includes the C++ tests if not disabled, and sets up Python tests with additional data if Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Label/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/uniform-001371-5x5x5.vtp)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/headsq/,REGEX:.*)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Python Version Configuration in CMake\nDESCRIPTION: Sets up Python version requirements and finds required Python components using CMake. Configures minimum version requirements and handles version deprecation warnings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(Python3_ARTIFACTS_INTERACTIVE ON)\n\nset(vtk_python_min_version \"3.4\")\nset(vtk_python_version_support \"3.8\")\nif (VTK_REMOVE_LEGACY)\n  set(vtk_python_min_version \"${vtk_python_version_support}\")\nendif ()\nvtk_module_find_package(\n  PACKAGE Python3\n  VERSION \"${vtk_python_min_version}\"\n  COMPONENTS Interpreter Development.Module\n  OPTIONAL_COMPONENTS Development.Embed\n  FORWARD_VERSION_REQ MINOR)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory Sources for PDF Module\nDESCRIPTION: Configures the object factory source and header files with the appropriate export macro for the IOExportPDF module. This generates the necessary implementation files for the factory pattern.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportPDF/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOEXPORTPDF_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests for Depth Image Processing\nDESCRIPTION: CMake configuration that adds Python-based test files for depth image processing in VTK. Registers two test files that validate depth image to point cloud conversion functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Image/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestDepthImageToPointCloud.py\n  TestDepthImageToPointCloud-TwoInputs.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating CMake Test Executable\nDESCRIPTION: Creates an executable for running the tests defined in the vtkGeovisGDALCxxTests suite using the vtk_test_cxx_executable function. This is essential for integrating the tests within the VTK build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/GDAL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkGeovisGDALCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Avmesh Reader Tests in CMake\nDESCRIPTION: Sets up C++ test configuration for VTK's Avmesh Reader module. Creates a test target for TestAvmeshReader.cxx with no validation or output checking, and configures the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Avmesh/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOAvmeshReaderCxxTests tests\n  NO_VALID NO_OUTPUT\n  TestAvmeshReader.cxx)\nvtk_test_cxx_executable(vtkIOAvmeshReaderCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Mangling for VTK Module\nDESCRIPTION: Adds test mangling support for the VTK::FiltersParallelVerdict module to enable consistent test naming and execution\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersParallelVerdict)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Test Files and Dependencies in CMake\nDESCRIPTION: Sets up Java test file lists and dependencies, including finding the Java package and defining test names.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/Testing/Java/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Java REQUIRED COMPONENTS Runtime Development)\n\nset(java_simple_test_names\n  ConcurrencyGC\n  JavaDelete\n  ManualGC\n  JavaGCAndDelete)\n\nset(java_test_names\n  Regression\n  ${java_simple_test_names})\n\nset(java_test_files)\nforeach (java_test IN LISTS java_test_names)\n  list(APPEND java_test_files\n    \"${CMAKE_CURRENT_SOURCE_DIR}/vtk/test/${java_test}.java\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering Context2D Tests in CMake\nDESCRIPTION: Sets up C++ tests for VTK's Rendering Context2D module. Adds three test files and configures them for execution, with TestContext2D.cxx marked as NO_VALID. Creates a test executable for running these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Context2D/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingContext2DCxxTests tests\n  TestBlockItem.cxx\n  TestContext2D.cxx,NO_VALID\n  TestPolyDataToContext.cxx\n  )\n\nvtk_test_cxx_executable(vtkRenderingContext2DCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring PDAL Reader Tests for VTK in CMake\nDESCRIPTION: This CMake script defines a function 'add_vtk_pdal_reader_test' to generate test files for VTK's PDAL reader. It takes a test input file and elevation value as parameters, creates a unique test source file, and adds it to a list of tests. The script then adds specific test cases and sets up the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# TODO: Simplify this with some argument passing.\nset(VTK_PDAL_READER_TESTS)\nfunction(add_vtk_pdal_reader_test test_input elevation)\n  get_filename_component(VTK_PDAL_READER_POSTFIX ${test_input} NAME_WE)\n  string(REPLACE \"-\" \"_\" VTK_PDAL_READER_POSTFIX ${VTK_PDAL_READER_POSTFIX})\n  set(VTK_PDAL_READER_TEST_INPUT \"${test_input}\")\n  set(VTK_PDAL_READER_ELEVATION \"${elevation}\")\n  set(test_source \"TestPDALReader_${VTK_PDAL_READER_POSTFIX}.cxx\")\n  configure_file(TestPDALReader.cxx.in ${test_source})\n  set(VTK_PDAL_READER_TESTS ${VTK_PDAL_READER_TESTS} ${test_source} PARENT_SCOPE)\nendfunction()\n\nadd_vtk_pdal_reader_test(test_1.las 0)\nadd_vtk_pdal_reader_test(test_2.las -90)\n\nvtk_add_test_cxx(vtkIOPDALCxxTests tests\n  ${VTK_PDAL_READER_TESTS}\n  )\nvtk_test_cxx_executable(vtkIOPDALCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK Module\nDESCRIPTION: This snippet defines a list of classes to be included in the VTK module build process, facilitating the management of user-defined classes in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Unsorted/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBar2\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: This snippet adds a C++ subdirectory named 'Cxx' to the current build. This is typically used to include additional C++ source files or subprojects in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Infovis/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK::IOMySQL\nDESCRIPTION: This snippet defines a list of C++ classes that are part of the VTK::IOMySQL module. These classes likely handle database connections, query execution, and data transfer between VTK tables and MySQL databases. The `set` command in CMake assigns these class names to the `classes` variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMySQLDatabase\n  vtkMySQLQuery\n  vtkMySQLToTableReader\n  vtkTableToMySQLWriter)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: Creates the main test executable for VTK Filters Core by compiling all the test files specified in the all_tests variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersCoreCxxTests all_tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests for FLUENT CFF Reader\nDESCRIPTION: CMake configuration that adds Python test files for testing the FLUENT CFF Reader functionality in VTK. Specifies two test files to be included in the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FLUENTCFF/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestFLUENTCFFReader.py\n  TestFLUENTCFFReader_3D.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Data for VTK Module\nDESCRIPTION: Registers a specific GIS test data file for module testing purposes using vtk_module_test_data function\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/GDAL/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/GIS/sa052483.tif)\n```\n\n----------------------------------------\n\nTITLE: Registering Test Data Files in VTK Module\nDESCRIPTION: Registers multiple discontinuous Galerkin (dg) data files for testing purposes. These files are used as input data for VTK module tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/dgHexahedra.dg\n  Data/dgQuadraticQuadrilaterals.dg\n  Data/dgQuadrilateral.dg\n  Data/dgTetrahedra.dg\n  Data/dgTriangle.dg\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Python Tests in CMake\nDESCRIPTION: This snippet adds multiple Python test scripts to the CMake build system without specific parameters set for data and validity checks. It is used to ensure the integrity of XML partitioned dataset functionalities within the VTK environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestPXMLTimeInField.py,NO_DATA,NO_VALID,NO_RT\n  TestXMLPartitionedDataSet.py,NO_DATA,NO_VALID,NO_RT\n  TestXMLPartitionedDataSetCollection.py,NO_DATA,NO_VALID,NO_RT\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK C++ Testing in CMake\nDESCRIPTION: Conditionally adds the C++ testing subdirectory if C++ testing is not disabled for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for VTK scn Module in CMake\nDESCRIPTION: Configures the public header files for the VTK scn module. These header files define the public API that will be available to users of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  include/vtkscn/chrono.h\n  include/vtkscn/fwd.h\n  include/vtkscn/istream.h\n  include/vtkscn/ranges.h\n  include/vtkscn/regex.h\n  include/vtkscn/scan.h\n  include/vtkscn/xchar.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/include/vtkscn/scn_export.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating a Twisted Project in Third-Party Repository\nDESCRIPTION: This example demonstrates how to update a third-party project (Twisted) in the Kitware's third-party repository. It involves checking out a branch, fetching changes from the origin, rebasing onto a new tag, and pushing the changes.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/UPDATING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cd twisted/\n$ git checkout for/vtk\n$ git fetch origin\n$ git rebase --onto twisted-17.5.0 twisted-17.1.0\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Build Options in CMake\nDESCRIPTION: Sets up build options for HDF5, including shared and static library builds, position-independent code, and framework options for Mac OS X.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset (CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nif (NOT BUILD_SHARED_LIBS)\n  set (tgt_file_ext \"\")\nelse ()\n  set (tgt_file_ext \"-shared\")\nendif ()\n\nset(H5_ENABLE_SHARED_LIB ${BUILD_SHARED_LIBS})\nif (NOT BUILD_SHARED_LIBS)\nset(H5_ENABLE_STATIC_LIB ON)\nelse ()\nset(H5_ENABLE_STATIC_LIB OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition in CMake\nDESCRIPTION: This snippet checks if the current CMake project name is \"VTK\". If it is not, the function returns, effectively skipping the addition of the subdirectory. If the project name is \"VTK\", it adds the 'Cxx' subdirectory to the build using `add_subdirectory`.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pegtl/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"# Only test as part of VTK itself.\\nif (NOT CMAKE_PROJECT_NAME STREQUAL \\\"VTK\\\")\n  return ()\nendif ()\n\nadd_subdirectory(Cxx)\"\n```\n\n----------------------------------------\n\nTITLE: Adding WrapPython and WrapPythonInit Executables for VTK\nDESCRIPTION: Adds the WrapPython and WrapPythonInit executables for Python wrapping in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET WrapPython)\n  vtk_module_add_executable(WrapPython\n    DEVELOPMENT\n    BASENAME vtkWrapPython\n    vtkWrapPython.c\n    vtkWrapPythonClass.c\n    vtkWrapPythonConstant.c\n    vtkWrapPythonEnum.c\n    vtkWrapPythonMethod.c\n    vtkWrapPythonMethodDef.c\n    vtkWrapPythonNamespace.c\n    vtkWrapPythonNumberProtocol.c\n    vtkWrapPythonOverload.c\n    vtkWrapPythonProperty.c\n    vtkWrapPythonTemplate.c\n    vtkWrapPythonType.c)\n  target_link_libraries(WrapPython\n    PRIVATE\n      \"${ns}::WrappingTools\")\n  add_executable(\"${ns}::WrapPython\" ALIAS\n    WrapPython)\n\n  vtk_module_add_executable(WrapPythonInit\n    DEVELOPMENT\n    BASENAME vtkWrapPythonInit\n    vtkWrapPythonInit.c)\n  target_link_libraries(WrapPythonInit\n    PRIVATE\n      \"${ns}::WrappingTools\")\n  add_executable(\"${ns}::WrapPythonInit\" ALIAS\n    WrapPythonInit)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing Generated Headers with CMake\nDESCRIPTION: This snippet uses `vtk_module_install_headers` to install header files generated during the build process. The file `vtk_ogg.h` located in the binary directory is specified for installation, ensuring that it is available for subsequent inclusion in projects using VTK. Dependencies include a CMake environment with `vtk_module_install_headers` available.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_ogg.h\")\n```\n\n----------------------------------------\n\nTITLE: Linking OpenSlide to VTK Microscopy Domain\nDESCRIPTION: This snippet links the OpenSlide library to the VTK::DomainsMicroscopy module.  It uses the vtk_module_link macro to specify that OpenSlide is a public dependency.  This ensures that any code using VTK::DomainsMicroscopy will also have access to OpenSlide.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_link(VTK::DomainsMicroscopy\n  PUBLIC\n    OpenSlide::OpenSlide)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory to the Project\nDESCRIPTION: This snippet uses the `add_subdirectory` command to include the 'Cxx' subdirectory in the CMake build process.  This command tells CMake to process the CMakeLists.txt file within the 'Cxx' directory, incorporating its build instructions into the overall project build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK MPI Parallel IO Module\nDESCRIPTION: Adds the MPI parallel IO module to VTK with specified classes, sources, and headers, and sets up test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOMPIParallel\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOMPIParallel)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding IOSS-Dependent Tests in VTK\nDESCRIPTION: Conditionally adds tests that depend on the VTK IOSS module. These tests only get included when the IOSS module is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::IOIOSS)\n  vtk_add_test_cxx(vtkFiltersGeneralCxxTests data_tests\n    TestAnimateModes.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Cases for VTK\nDESCRIPTION: The snippet uses the `vtk_add_test_cxx` function to add two C++ test cases, `TestAVIWriter.cxx` and `TestMP4Writer.cxx`, to the project. These tests are bundled under the name `vtkIOMovieCxxTests` and marked with the `NO_VALID` flag, indicating that no validation of the output is needed.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOMovieCxxTests tests\n  NO_VALID\n  TestAVIWriter.cxx\n  TestMP4Writer.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Disabling Function Side-Effects in ExprTk for C++\nDESCRIPTION: Shows how to disable the side-effect trait of a function in ExprTk. This allows for constant folding optimizations when all parameters are constants at compile time.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_60\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct foo final : public exprtk::ifunction<T>\n{\n   foo() : exprtk::ifunction<T>(3)\n   {\n      exprtk::disable_has_side_effects(*this);\n   }\n\n   T operator()(const T& v1, const T& v2, const T& v3) override\n   { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Converting GLTF to GLB Files\nDESCRIPTION: Shell commands to recursively find and convert GLTF files to GLB format using gltf-pipeline, then clean up original GLTF and BIN files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name '*.gltf' -exec bash -c 'nodejs ~/external/gltf-pipeline/bin/gltf-pipeline.js -i ${0} -o ${0%.*}.glb' {} \\;\nfind . -name '*.gltf' -exec rm {} \\;\nfind . -name '*.bin' -exec rm {} \\;\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing Setup in CMake\nDESCRIPTION: This snippet conditionally enables testing and sets a test prefix based on the `BUILD_TESTING` variable. If `BUILD_TESTING` is true, it sets `KWIML_TEST_ENABLE` to 1 and `KWIML_TEST_PREFIX` to 'vtkkwiml'.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  set(KWIML_TEST_ENABLE 1)\n  set(KWIML_TEST_PREFIX vtkkwiml)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Compilation Options for HDF5 in CMake\nDESCRIPTION: Configures options for cross-compiling and toolchains, specifically HDF5_USE_PREGEN and HDF5_BATCH_H5DETECT, with VTK-specific hardcoding to disable these options by default.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): Hardcode settings.\noption (HDF5_USE_PREGEN \"Use pre-generated Files\" OFF)\noption (HDF5_BATCH_H5DETECT \"Use a batch command for running h5detect\" OFF)\nelse ()\nset(HDF5_USE_PREGEN OFF)\nset(HDF5_BATCH_H5DETECT OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Memory Writer Test in CMake for VTK\nDESCRIPTION: Adds a test for writing PNG images to memory in VTK without requiring input data or validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestWriteToMemoryPNG,TestWriteToMemory.cxx,NO_DATA NO_VALID NO_OUTPUT\n    \"test.png\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up C++ Test Executable for VTK NetCDF Tests\nDESCRIPTION: This snippet creates an executable for the defined C++ tests of the VTK NetCDF module, enabling their execution within the testing framework. It refers to previously defined test configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtknetcdfCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingQt Classes in CMake\nDESCRIPTION: Sets up a list of classes to be included in the VTK RenderingQt module. These classes are related to Qt-based rendering functionalities in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Qt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkQImageToImageSource\n  vtkQtInitialization\n  vtkQtLabelRenderStrategy\n  vtkQtStringToImage\n  vtkQtTreeRingLabelMapper\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting up VTK Java Test Compilation and Library\nDESCRIPTION: Configures the classpath and creates a static library for VTK Java tests with appropriate compilation options and dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/Testing/Java/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(classpath_separator \":\")\nif (WIN32)\n  set(classpath_separator \"\\\\;\")\nendif ()\nset(vtk_test_classpath\n  \"$<TARGET_FILE:VTK::vtkjava>\")\nstring(REPLACE \";\" \"${classpath_separator}\" vtk_test_classpath \"${vtk_test_classpath}\")\n\nadd_library(vtkjava_tests STATIC\n  ${java_test_files})\ntarget_compile_options(vtkjava_tests\n  PRIVATE\n    \"SHELL:-classpath \\\"${vtk_test_classpath}\\\"\"\n    \"SHELL:--release ${VTK_JAVA_RELEASE_VERSION}\")\ntarget_link_libraries(vtkjava_tests\n  PRIVATE\n    VTK::vtkjava)\nif (TARGET vtkjava_jar)\n  add_dependencies(vtkjava_tests vtkjava_jar WrapJava)\nelse ()\n  add_dependencies(vtkjava_tests vtkjava)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Non-Standard Option Name Configuration\nDESCRIPTION: Allow specification of single dash long-form option names with potential limitations\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\n.allow_non_standard_option_names()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK RenderingOpenGL2 Test Executable in CMake\nDESCRIPTION: Configures the test executable for VTK RenderingOpenGL2, disabling floating-point exceptions and setting up the rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingOpenGL2CxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenXR Remoting Tests in CMake\nDESCRIPTION: This snippet initializes the `openxrremoting_tests` variable with a list of test files by default. It conditionally appends additional tests if the `VTK_OPENXR_TESTING_ENABLE_RUNTIME_TESTS` flag is set, utilizing the `list` command in CMake. The function `vtk_add_test_cxx` is then used to add these tests to the VTK test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(openxrremoting_tests\n  TestOpenXRRemotingInstantiation.cxx,NO_VALID)\n\nif (VTK_OPENXR_TESTING_ENABLE_RUNTIME_TESTS)\n  list (APPEND openxrremoting_tests\n    TestOpenXRRemotingInitialization.cxx,NO_DATA,NO_VALID)\nendif ()\n\nvtk_add_test_cxx(vtkRenderingOpenXRRemotingCxxTests tests ${openxrremoting_tests})\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring C++ Tests in CMake\nDESCRIPTION: This snippet uses VTK's macros to add and configure C++ test files for the VTK project. The macro `vtk_add_test_cxx` specifies the test name `vtkpugixmlCxxTests` and the C++ source file `TestIncludePugiXml.cxx` to be used. It also indicates that there is no data, validation, or output required for the tests using the flags `NO_DATA`, `NO_VALID`, and `NO_OUTPUT`. The `vtk_test_cxx_executable` is then used to create an executable target for the specified tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkpugixmlCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludePugiXml.cxx)\nvtk_test_cxx_executable(vtkpugixmlCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Reading HDF5 Version from H5public.h\nDESCRIPTION: This snippet reads the full version number from the H5public.h header file and extracts specific version components using regular expressions. It outputs a trace message showing the formatted version if CMake version is greater than or equal to 3.15.0.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n#----------------------------------------------------------------------------- \n# parse the full version number from H5public.h and include in H5_VERS_INFO \n#----------------------------------------------------------------------------- \nfile (READ ${HDF5_SRC_DIR}/H5public.h _h5public_h_contents)\nstring (REGEX REPLACE \"*.#define[ \\t]+H5_VERS_MAJOR[ \\t]+([0-9]*).*$\" \\\"\\1\\\" H5_VERS_MAJOR ${_h5public_h_contents})\nstring (REGEX REPLACE \"*.#define[ \\t]+H5_VERS_MINOR[ \\t]+([0-9]*).*$\" \\\"\\1\\\" H5_VERS_MINOR ${_h5public_h_contents})\nstring (REGEX REPLACE \"*.define[ \\t]+H5_VERS_RELEASE[ \\t]+([0-9]*).*$\" \\\"\\1\\\" H5_VERS_RELEASE ${_h5public_h_contents})\nstring (REGEX REPLACE \"*.define[ \\t]+H5_VERS_SUBRELEASE[ \\t]+\\\"([0-9A-Za-z._-]*)\\\".*$\" \\\"\\1\\\" H5_VERS_SUBRELEASE ${_h5public_h_contents})\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.15.0\")\n  message (TRACE \"VERSION: ${H5_VERS_MAJOR}.${H5_VERS_MINOR}.${H5_VERS_RELEASE}-${H5_VERS_SUBRELEASE}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Surface LIC Test with Default Settings\nDESCRIPTION: Sets up a test for Surface LIC rendering on a curved surface using default settings. It specifies the input data, step size, number of steps, and camera configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedDefaults\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICCurvedDefaults.png,:}\"\n    --step-size=0.4\n    --num-steps=40\n    --camera-config=1\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/disk_out_ref_surface.vtp}\n    --vectors=V\n    )\nset_property(TEST VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedDefaults APPEND\n  PROPERTY\n    ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Unicode Filename Writer Test in CMake for VTK\nDESCRIPTION: Adds a test for writing PNG images to a Unicode filename in VTK without validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestWriteToUnicodeFilePNG,TestWriteToUnicodeFile.cxx,NO_VALID\n    \"image.png\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Multiple Page Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK TIFF reader with multiple pages using a multipage TIFF example.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTIFFReaderMultipleMulti,TestTIFFReaderMultiple.cxx,NO_VALID,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/libtiff/multipage_tiff_example.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Android APK using ADB\nDESCRIPTION: This snippet demonstrates how to install an Android APK file onto a connected Android device using the `adb install` command.  The `-r` flag specifies that the application should be reinstalled if it already exists. This command is executed from the binary directory containing the generated APK files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/ReadMe.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd into CMakeExternals/Build/vtk-android/Examples/Android/ExampleName/bin\n\nYou should see some apk files in this directory.\n\nYou can adb install -r ExampleName-debug.apk and then run the example on your device\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined OSPRay and OptiX Tests in CMake for VTK Ray Tracing\nDESCRIPTION: Sets up tests that combine both OSPRay and OptiX backends for VTK's ray tracing capabilities. This is only enabled when both OSPRay and OptiX are available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_OSPRAY AND VTK_ENABLE_VISRTX)\n  # Tests combining both OSPRay and OptiX backends\n  vtk_add_test_cxx(vtkRenderingRayTracingCxxTests tests_combined\n    TestRendererType.cxx\n    TestMultipleBackends.cxx\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for Theora\nDESCRIPTION: Includes the GenerateExportHeader CMake module and generates an export header for the Theora library to manage symbol visibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(theora\n  EXPORT_MACRO_NAME VTKTHEORA_EXPORT\n  EXPORT_FILE_NAME  include/theora/vtktheora_export.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Build Options in CMake for PROJ\nDESCRIPTION: Configures platform-specific build options for PROJ, including RPATH settings for non-MSVC builds and linker flags for MSVC builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MSVC)\n\n  if(NOT APPLE)\n    # Use relative path so that package is relocatable\n    set(CMAKE_INSTALL_RPATH \"\\$ORIGIN/../${LIBDIR}\")\n  else()\n    set(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/${LIBDIR}\")\n    # TO DO: cmake 2.8.12 introduces a way to make the install tree\n    # relocatable with OSX via\n    # (1) set(CMAKE_MACOSX_RPATH ON) and\n    # (2) setting the INSTALL_RPATH property on the executables to\n    # \"@loader_path/../${LIBDIR}\"\n  endif()\n\nelse()\n\n    # Linking to setargv.obj enables wildcard globbing for the\n    # command line utilities, when compiling with MSVC\n    # https://docs.microsoft.com/cpp/c-language/expanding-wildcard-arguments\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} setargv.obj\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VFW Capture Default\nDESCRIPTION: This code block manages the default setting for Video for Windows (VFW) capture. It checks if `VTK_USE_VFW_CAPTURE` is already defined and uses its value; otherwise, it sets a default `OFF` value. Finally, it unsets the cached variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(vfw_capture_default OFF)\nif (DEFINED VTK_USE_VFW_CAPTURE)\n  set(vfw_capture_default \"${VTK_USE_VFW_CAPTURE}\")\n  unset(CACHE VTK_USE_VFW_CAPTURE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Surface LIC Test with Contrast Enhancement and Blending\nDESCRIPTION: Sets up a test for Surface LIC rendering with contrast enhancement and blending. It includes parameters for step size, number of steps, contrast enhancement, and LIC intensity.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedContrastEnhancedBlended\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICCurvedContrastEnhancedBlended.png,:}\"\n    --step-size=0.4\n    --num-steps=40\n    --camera-config=1\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/disk_out_ref_surface.vtp}\n    --vectors=V\n    --enhance-contrast=1\n    --lic-intensity=0.8\n    )\nset_property(TEST VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedContrastEnhancedBlended APPEND\n  PROPERTY\n    ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n```\n\n----------------------------------------\n\nTITLE: Including CMake Subdirectory\nDESCRIPTION: This snippet demonstrates the usage of `add_subdirectory` to include the `Cxx` subdirectory in the current CMake project. This command tells CMake to process the `CMakeLists.txt` file located in the `Cxx` directory and include its targets in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory with CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command in CMake to include the CMake project located in the 'Cxx' subdirectory. This allows the build process to recursively include the build configurations and targets defined in the specified subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(Cxx)\"\n```\n\n----------------------------------------\n\nTITLE: Amalgamating LZ4 Source Files into Single File\nDESCRIPTION: Command to combine multiple LZ4 source files into a single compilation unit for simplified integration and compilation\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/lib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat lz4.c lz4hc.c lz4frame.c > lz4_all.c\n```\n\n----------------------------------------\n\nTITLE: Setting Non-wrapped Classes\nDESCRIPTION: Defines classes that should not be wrapped for language bindings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_classes\n  vtkReservoirSampler\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for VTK::IOVideo\nDESCRIPTION: This snippet initializes the `classes` variable with `vtkVideoSource`, which is essential for later inclusion in the VTK::IOVideo module. The variable is used to specify the classes that the module provides.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkVideoSource)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Data in VTK Module\nDESCRIPTION: Specifies data files required for C++ tests in the VTK module. These include various file formats like VTP, VTU, VTI, and image files that are necessary for testing different VTK capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/CuspySurface.vtp\n  Data/Delaunay/,REGEX:.*\n  Data/HTG/generate_ids.htg\n  Data/beach.jpg\n  Data/can.ex2\n  Data/cow.vtp\n  Data/degenerate_triangles.vtp\n  Data/delaunay3d.vtu\n  Data/disk_out_ref_surface.vtp\n  Data/explicitStructuredGrid.vtu\n  Data/explicitStructuredGridEmpty.vtu\n  Data/ghostBrokenScalars.pvtp\n  Data/ghostBrokenScalars/ghostBrokenScalars_0.vtp\n  Data/ghostBrokenScalars/ghostBrokenScalars_1.vtp\n  Data/ghostBrokenScalars/ghostBrokenScalars_2.vtp\n  Data/ghostBrokenScalars/ghostBrokenScalars_3.vtp\n  Data/sliding_multi_block_end.vtm\n  Data/sliding_multi_block_end/sliding_multi_block_end_0_0.vtu\n  Data/sliding_multi_block_end/sliding_multi_block_end_1_0.vtu\n  Data/sliding_multi_block_end/sliding_multi_block_end_2_0.vtu\n  Data/sliding_multi_block_end/sliding_multi_block_end_3_0.vtu\n  Data/sliding_multi_block_start.vtm\n  Data/sliding_multi_block_start/sliding_multi_block_start_0_0.vtu\n  Data/sliding_multi_block_start/sliding_multi_block_start_1_0.vtu\n  Data/sliding_multi_block_start/sliding_multi_block_start_2_0.vtu\n  Data/sliding_multi_block_start/sliding_multi_block_start_3_0.vtu\n  Data/slightlyRotated.vtu\n  Data/SynchronizedTemplates2D.vtp\n  Data/tex_debug.jpg\n  Data/wavelet300Arrays.vti)\n```\n\n----------------------------------------\n\nTITLE: Configuring SurfaceProbeVolumeMapper Inputs\nDESCRIPTION: Defines the key input requirements for the vtkOpenGLSurfaceProbeVolumeMapper, including source volume data, rendering surface, and optional probe geometry\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/addSurfaceProbeVolumeMapper.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Three potential input types:\n// 1. Input: Rendered surface geometry\n// 2. Source: Volume data for scalar interpolation\n// 3. ProbeInput (optional): Geometry for interpolation\n```\n\n----------------------------------------\n\nTITLE: Defining Rendering Tests with Matplotlib\nDESCRIPTION: This snippet adds a set of C++ tests that require Matplotlib. It utilizes the vtk_add_test_cxx function to specify tests related to rendering functionality, ensuring they are correctly integrated within the CMake build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(MATPLOTLIB_FOUND)\n  vtk_add_test_cxx(vtkRenderingMatplotlibCxxTests tests\n    TestContextMathTextImage.cxx\n    TestMathTextActor.cxx\n    TestMathTextActor3D.cxx\n    TestRenderString.cxx\n    TestStringToPath.cxx\n    TestIndexedLookupScalarBar.cxx,LOOSE_VALID\n    TestScalarBarCombinatorics.cxx\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding CXX Executable Test\nDESCRIPTION: This snippet uses `vtk_test_cxx_executable` to define a C++ executable test named `vtkFiltersParallelMPICxxTests-MPI` that will run all the tests defined in the `all_tests` variable. It links the tests to the specified executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersParallelMPICxxTests-MPI all_tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Wrapping for Xdmf in CMake\nDESCRIPTION: Sets up Java and JNI dependencies, and defines a macro for SWIG Java wrapping of Xdmf components. The macro handles compilation, JAR creation, and installation of Java wrappers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(XDMF_WRAP_JAVA)\n  find_package(Java REQUIRED)\n  find_package(JNI REQUIRED)\n  include_directories(${CMAKE_CURRENT_SOURCE_DIR}\n    ${JAVA_INCLUDE_PATH}\n    ${JAVA_INCLUDE_PATH2})\n\n  macro(XDMF_SWIG_JAVA java_name)\n    set(${java_name}_JAVA_JAR ${CMAKE_BINARY_DIR}/${java_name}.jar)\n    set(XDMF_JAVA_PACKAGE_DIR mil/army/arl/xdmf)\n    set(XDMF_JAVA_DIR ${CMAKE_BINARY_DIR}/${XDMF_JAVA_PACKAGE_DIR})\n    set(CMAKE_SWIG_OUTDIR ${XDMF_JAVA_DIR})\n    set(CMAKE_SWIG_FLAGS ${XDMF_SWIG_FLAGS} -v -make_default -package mil.army.arl.xdmf)\n    set_source_files_properties(${java_name}.i PROPERTIES CPLUSPLUS ON)\n    set(swig_extra_generated_files \"\")\n    swig_add_module(${java_name}Java java ${java_name}.i)\n    swig_link_libraries(${java_name}Java ${java_name})\n\n    # ... (additional compilation and installation commands)\n  endmacro()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining vtkInformationIntegerKey in VTK XML\nDESCRIPTION: Illustrates the XML structure for defining a vtkInformationIntegerKey with a single integer value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/IOXMLInformationFormat.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<InformationKey name=\"Integer\" location=\"XMLTestKey\">\n  408\n</InformationKey>\n```\n\n----------------------------------------\n\nTITLE: Listing JsonCpp Modifications for VTK Integration\nDESCRIPTION: Describes the key changes made to JsonCpp for VTK integration, including commit check attributes, VTK module system integration, and symbol mangling to use the 'vtkJson' namespace.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/vtkjsoncpp/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n  * Add attributes to pass commit checks within VTK.\n  * Integrate with VTK's module system.\n  * Mangle symbols to use the `vtkJson` namespace instead of `Json`.\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This snippet specifies the test data files and directories to be included in the VTK module. It uses the vtk_module_test_data function to declare various image files and a directory of head sequence data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Image/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/alphachannel.png\n  Data/beach.tif\n  Data/fullhead15.png\n  Data/headsq/,REGEX:.*\n  Data/vtk.png)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake File Comparison Options for HDF5\nDESCRIPTION: Configures the --ignore-eol option for file comparison based on the CMake version. For versions below 3.14, it sets the option to an empty string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset (CMAKE_IGNORE_EOL \"--ignore-eol\")\nif (CMAKE_VERSION VERSION_LESS \"3.14.0\")\n  set (CMAKE_IGNORE_EOL \"\")\n  # XXX(kitware): VTK handles cmake version\n  if (WIN32 AND FALSE)\n    message (FATAL_ERROR \"Windows builds require a minimum of CMake 3.14\")\n  endif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Testing Directory Inclusion\nDESCRIPTION: Adds the C++ testing subdirectory if C++ testing is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ctest Output for TestUserShader2D\nDESCRIPTION: This snippet shows the output of running ctest for the TestUserShader2D test, including the full test command, working directory, and environment variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ctest -R TestUserShader2D -N -V\n\n836: Test command: /usr/bin/python3 \"/path/to/vtk/Testing/WebAssembly/runner.py\" \"--engine=/path/to/vtk/.gitlab/chrome/chrome\" \"--exit\" \"/path/to/vtk/build/bin/vtkRenderingOpenGL2CxxTests.js\" \"TestUserShader2D\" \"-T\" \"/path/to/vtk/build/Testing/Temporary\" \"-V\" \"/path/to/vtk/build/ExternalData/Rendering/OpenGL2/Testing/Data/Baseline/TestUserShader2D.png\"\n836: Working Directory: /path/to/vtk/build/Rendering/OpenGL2/Testing/Cxx\n836: Environment variables:\n836:  VTK_TESTING=1\n836:  VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\nLabels: VTK::RenderingOpenGL2 vtkRenderingOpenGL2\n  Test #836: VTK::RenderingOpenGL2Cxx-TestUserShader2D\n\nTotal Tests: 1\n```\n\n----------------------------------------\n\nTITLE: Linking VTK FiltersOpenTURNS with OpenTURNS Library\nDESCRIPTION: Links the VTK::FiltersOpenTURNS module with the OpenTURNS library and adds test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::FiltersOpenTURNS\n  PRIVATE\n    ${OPENTURNS_LIBRARY})\nvtk_add_test_mangling(VTK::FiltersOpenTURNS)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring VTK MPI Test\nDESCRIPTION: Adds a VTK test for IO Parallel Xdmf3 using the provided test data. This snippet shows the use of 'vtk_add_test_mpi' for associating tests that require multiple processes, indicating no validation and the data source for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXdmf3/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkIOParallelXdmf3CxxTests tests\n  TestXdmf3Parallel.cxx,NO_VALID,TESTING_DATA\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Private Headers for EnSight Module\nDESCRIPTION: Specifies the private header files used in the core implementation of the EnSight module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(private_headers\n    core/EnSightFile.h\n    core/EnSightDataSet.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Tests for VTK IO Parallel LSDyna in CMake\nDESCRIPTION: This snippet sets up MPI-based testing for the VTK IO Parallel LSDyna module. It checks for the VTK::ParallelMPI target, sets the number of processes, adds MPI tests, and creates a test executable. The tests are only configured if the ParallelMPI target is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelLSDyna/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::ParallelMPI)\n  set(PLSDynaReader_NUMPROCS 2)\n  vtk_add_test_mpi(vtkIOParallelLSDynaCxxTests-MPI tests\n    TESTING_DATA\n    PLSDynaReader.cxx\n    )\n  vtk_test_cxx_executable(vtkIOParallelLSDynaCxxTests-MPI tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory to VTK Build\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that C++ source code for the VTK project is located in this directory and should be included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting VASP Test Arguments in CMake for VTK\nDESCRIPTION: Configures input arguments for VASP-related tests using data files from the test data directory. This sets paths to the animation and tessellation test data files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TestVASPAnimationReader_ARGS DATA{../Data/VASP/NPT_Z_ANIMATE.out})\nset(TestVASPTessellationReader_ARGS DATA{../Data/VASP/NPT_Z_TESSELLATE.out})\n```\n\n----------------------------------------\n\nTITLE: Generating Export Headers for H5Part Module\nDESCRIPTION: Generates export header definitions for the H5Part module to handle symbol visibility and DLL export/import macros.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/vtkh5part/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(h5part\n  EXPORT_MACRO_NAME VTKH5PART_EXPORT\n  EXPORT_FILE_NAME src/vtkh5part_export.h)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Reduction C++ Tests\nDESCRIPTION: Adds C++ tests for the VTK Filters Reduction module using the vtk_add_test_cxx CMake function.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersReductionCxxTests tests\n)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK ViewsQt Module\nDESCRIPTION: Creates the VTK ViewsQt module using the previously defined classes, sets module definitions, and establishes Qt linkage requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Views/Qt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::ViewsQt\n  CLASSES ${classes})\n\nvtk_module_definitions(VTK::ViewsQt PRIVATE QT_NO_KEYWORDS)\nvtk_module_link(VTK::ViewsQt PRIVATE \"Qt${vtk_qt_major_version}::Widgets\")\nvtk_add_test_mangling(VTK::ViewsQt)\n```\n\n----------------------------------------\n\nTITLE: Checking for Apple Silicon Line Rendering Bug in VTK\nDESCRIPTION: This code snippet shows how to use the 'IsPrimIDBugPresent()' method of vtkOpenGLRenderWindow to check if the Apple silicon line rendering bug is present in the current system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/fix-wide-lines-with-cell-colors.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool vtkOpenGLRenderWindow::IsPrimIDBugPresent()\n```\n\n----------------------------------------\n\nTITLE: Listing Directly Copied Third-Party Projects in VTK using Bash\nDESCRIPTION: This Bash script generates a list of third-party projects that were imported by directly copying files. It excludes projects using update.sh and git submodules, listing the remaining projects in the ThirdParty directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/imported.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nroot_src_dir=$(git rev-parse --show-toplevel)\nsubmodule_paths=$(git config --file ${root_src_dir}/.gitmodules --get-regexp path | awk '{ print $2 }')\n\nfor path in $(ls -d -1 */); do\n  path=${path%/*}  # \"dir1/dir2/Dir3/\" -> \"dir1/dir2/Dir3\"\n  project=${path##*/}  # \"dir1/dir2/Dir3\" -> \"Dir3\"\n\n  # List project that are neither imported through \"update.sh\" or git submodule\n  if [ ! -f \"$path/update.sh\" ] && [[ \"$submodule_paths\" != *\"ThirdParty/$project\"* ]]; then\n    echo \"  * $project\"\n  fi\ndone | sort --ignore-case\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Tests Based on WkHtmlToImage Availability\nDESCRIPTION: Conditionally sets up SVG-related tests if the WkHtmlToImage executable is available on the system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WKHTMLTOIMAGE_EXECUTABLE)\n  set(SVGTests\n    TestSVGContextExport.cxx,NO_DATA,NO_VALID\n    TestSVGContextShading.cxx,NO_DATA,NO_VALID\n    TestSVGExporterContextPolyData.cxx,NO_VALID\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific OpenGL Configuration\nDESCRIPTION: Configures platform-specific OpenGL dependencies and linking options for Windows, X11, and GLES platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/glad/vtkglad/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_USE_X)\n  find_package(X11 REQUIRED)\n  vtk_module_find_package(PACKAGE X11)\n  vtk_module_link(VTK::glad PRIVATE X11::X11)\nendif ()\n\nif (APPLE)\n  vtk_module_definitions(VTK::glad\n    INTERFACE\n      GL_SILENCE_DEPRECATION)\nendif ()\n\nif (WIN32)\n  vtk_module_link(VTK::glad PUBLIC opengl32)\n  if (VTK_USE_OPENGL_DELAYED_LOAD)\n    vtk_module_link(VTK::glad\n      INTERFACE\n        delayimp.lib)\n    vtk_module_link_options(VTK::glad\n      INTERFACE\n        \"/DELAYLOAD:opengl32.dll\")\n  endif ()\nelseif (VTK_OPENGL_USE_GLES)\n  vtk_module_find_package(PACKAGE OpenGL COMPONENTS GLES3)\n  vtk_module_link(VTK::glad PUBLIC OpenGL::GLES3)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Detecting LibHaru Library Type in CMake\nDESCRIPTION: This snippet includes a custom module to detect the library type and then uses it to determine if LibHaru is a shared library. It's important for platform-specific configurations, especially on Windows.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(vtkDetectLibraryType)\nvtk_detect_library_shared(vtklibharu LibHaru::LibHaru)\n\nset(HPDF_DLL 0)\nif (WIN32 AND vtklibharu_is_shared)\n  set(HPDF_DLL 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK LIC Classes\nDESCRIPTION: Defines the main classes for the VTK RenderingLICOpenGL2 module including mappers, interfaces and helpers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBatchedSurfaceLICMapper\n  vtkCompositeSurfaceLICMapper\n  vtkCompositeSurfaceLICMapperDelegator\n  vtkImageDataLIC2D\n  vtkLineIntegralConvolution2D\n  vtkStructuredGridLIC2D\n  vtkSurfaceLICComposite\n  vtkSurfaceLICInterface\n  vtkSurfaceLICMapper\n  vtkTextureIO)\n```\n\n----------------------------------------\n\nTITLE: Including VTK GL2PS Testing Framework\nDESCRIPTION: Includes the base VTK GL2PS testing framework from the CMake modules directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../../../../CMake/vtkTestingGL2PS.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Case to VTK Filters\nDESCRIPTION: This snippet uses VTK's CMake macro vtk_add_test_cxx to register a C++ test case named TestScalarsToTexture.cxx to the set vtkFiltersTextureCxxTests. It is part of the test configurations for VTK Filters, and ensures that the specified C++ file is included in the tests to be executed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Texture/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersTextureCxxTests tests\n  TestScalarsToTexture.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Filters Hybrid C++ Test Executable with CMake\nDESCRIPTION: Builds the registered C++ tests into an executable using vtk_test_cxx_executable. The configuration disables floating point exceptions and enables rendering factory support for the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersHybridCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Project Build in CMake\nDESCRIPTION: This CMake command adds the Cxx (C++) subdirectory to the build process. It directs CMake to process the CMakeLists.txt file in the Cxx directory as part of the build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Inclusion\nDESCRIPTION: Conditionally adds the C++ test directory based on whether VTK C++ testing is enabled. Uses CMake's add_subdirectory command when testing is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FDS/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Build Options in CMake\nDESCRIPTION: The CMake configuration checks if the system is Windows (WIN32). It sets different flags for building shared versus static libraries, using DICOM_DLL for shared and DICOM_STATIC for static. The configuration also generates a header file, DICOMCMakeConfig.h, based on DICOMCMakeConfig.h.in.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/DICOMParser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  if (BUILD_SHARED_LIBS)\n    set(DICOM_DLL 1)\n  else ()\n    set(DICOM_STATIC 1)\n  endif ()\nendif ()\n\nconfigure_file(DICOMCMakeConfig.h.in DICOMCMakeConfig.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring BZip2 Compression Support for XDMF\nDESCRIPTION: Sets up optional BZip2 compression support for XDMF by finding the required libraries and adding the necessary compiler definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): hardcode settings\noption(XDMF_USE_BZIP2 \"Use bzip2\" OFF)\nmark_as_advanced(XDMF_USE_BZIP2)\nelse ()\nset(XDMF_USE_BZIP2 OFF)\nendif ()\nif(XDMF_USE_BZIP2)\n  find_package(BZip2)\n  set(XDMF_BZIP2_LIBRARIES ${BZIP2_LIBRARIES})\n  set(XDMF_BZIP2_INCLUDE_DIR ${BZIP2_INCLUDE_DIR})\n  include_directories(${BZIP2_INCLUDE_DIR})\n  add_definitions(\"-DXDMF_USE_BZIP2\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK AMR Test Executable\nDESCRIPTION: Creates the test executable for the VTK AMR filter tests using the CMake vtk_test_cxx_executable command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/AMR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersAMRCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Executable for LZ4 Tests\nDESCRIPTION: This snippet utilizes the vtk_test_cxx_executable function to create a test executable for the previously defined tests, allowing for the execution of unit tests related to the LZ4 functionality in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtklz4CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This snippet adds the 'Cxx' subdirectory to the build process of the VTK project. It is essential for including the Cxx module in the overall project structure, allowing for modular building and separation of components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Locations and Including Modules - CMake\nDESCRIPTION: This snippet configures the source and binary directories for VTK, includes necessary modules, and sets up custom CTest configuration files based on the VTK project structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(VTK_TOP_DIR \"${VTKTestExternalWasm_SOURCE_DIR}/../..\" ABSOLUTE)\nset(ExternalData_SOURCE_ROOT \"${VTK_TOP_DIR}\")\nset(VTK_SOURCE_DIR \"${VTK_TOP_DIR}\")\n\nconfigure_file(\n  \"${VTK_SOURCE_DIR}/CMake/CTestCustom.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compressed TIFF Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK compressed TIFF reader using a compressed foam sample TIFF image.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestCompressedTIFFReader,TestCompressedTIFFReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/al_foam_smallest.0.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Conduit Device Memory Tests\nDESCRIPTION: Adds device memory-specific tests when VTK Accelerators VTKm Data Model is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::AcceleratorsVTKmDataModel)\n  vtk_add_test_cxx(vtkConduitCxxTests tests\n    NO_VALID NO_OUTPUT\n    TestConduitSourceDeviceMemory.cxx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating CXX Executable for VTK Tests - CMake\nDESCRIPTION: This snippet creates a C++ executable for the VTK tests using the vtk_test_cxx_executable command. It specifies the source file for the vector field source test, which is part of the larger test suite for VTK components. This is crucial for compiling and executing the tests in an organized manner.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersParallelFlowPathsCxxTests-MPI tests\n  TestVectorFieldSource.cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Up VTK Test Mangling with CMake\nDESCRIPTION: This snippet uses the `vtk_add_test_mangling` command to set up test mangling for the VTK module `VTK::IOSegY` in a CMake file. This ensures that the test framework can properly reference and manage test instances available within this module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOSegY)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Directory to Build\nDESCRIPTION: CMake command to include the Cxx subdirectory in the build process, containing the C++ source files for VTK\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Color/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable with VTK CMake\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` macro to generate an executable for the set of tests defined by `vtkIOVDBCxxTests`. This step is essential to compile and link the tests, enabling their execution within the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOVDBCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable in CMake\nDESCRIPTION: This CMake snippet creates a test executable using the `vtk_test_cxx_executable` macro. It defines a test executable named `vtkDomainsParallelChemistryCxxTests-MPI` under the category `tests`. This macro, likely provided by VTK, builds the specified executable target, making it available for execution as part of the testing process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkDomainsParallelChemistryCxxTests-MPI tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Accelerators VTKm Filters CXX Tests Executable in CMake\nDESCRIPTION: Sets up the test executable for VTK Accelerators VTKm Filters CXX tests with rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkAcceleratorsVTKmFiltersCxxTests tests\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests in CMake with VTK\nDESCRIPTION: This CMake command is used to register a series of Python test scripts within the VTK project. It configures various test scripts that validate the functionality of specific filters and operations for point cloud data in VTK. These tests help ensure that the algorithms perform as expected under different conditions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestConnectedPointsFilter.py\n  TestDensifyPointCloudFilter.py\n  TestDensifyPointCloudFilter2.py\n  TestEllipsoidalGaussianKernel.py\n  TestEuclideanClusterExtraction.py\n  TestEuclideanClusterExtraction2.py\n  TestExtractEnclosedPoints.py\n  TestExtractPoints.py\n  TestFitImplicitFunction.py,LOOSE_VALID\n  TestHierarchicalBinningFilter.py\n  TestPCACurvatureEstimation.py\n  TestPCACurvatureEstimation2.py\n  TestPCANormalEstimation.py\n  TestPCANormalEstimation2.py\n  TestPointDensityFilter.py\n  TestPointDensityGradient.py\n  TestPointInterpolator.py\n  TestPointInterpolator2.py\n  TestPointInterpolator2D.py,LOOSE_VALID\n  TestPointInterpolator2D2.py,LOOSE_VALID\n  TestPointOccupancyFilter.py\n  TestPointSmoothingFilter.py\n  TestPointSmoothingFilter2.py\n  TestPointSmoothingFilter3.py\n  TestProjectPointsToPlane.py\n  TestRadiusOutlierRemoval.py\n  TestSPHInterpolator.py\n  TestSPHInterpolator2D.py\n  TestSPHInterpolatorWithCutoff.py\n  TestSignedDistanceFilter.py\n  TestStatisticalOutlierRemoval.py\n  TestUnsignedDistanceFilter.py\n  TestVoxelGridFilter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a topic branch for the update\nDESCRIPTION: This command creates a new topic branch named `update-xdmf2` based on the `master` branch. This branch is used to perform the subtree merge and resolve any conflicts that may arise.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"git checkout -b update-xdmf2 master\"\n```\n\n----------------------------------------\n\nTITLE: VTK Module References in Documentation\nDESCRIPTION: Module references found in the documentation for VR and AR integration: VTK::RenderingOpenVR for VR headsets and VTK::RenderingOpenXRRemoting for AR headsets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/supported_hardware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nVTK::RenderingOpenVR\nVTK::RenderingOpenXRRemoting\n```\n\n----------------------------------------\n\nTITLE: Checking for ext/stdio_filebuf.h Availability in KWSys\nDESCRIPTION: Performs a compiler check to determine if the <ext/stdio_filebuf.h> header is available for use with FStream.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_USE_FStream)\n  KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H\n    \"Checking whether <ext/stdio_filebuf.h> is available\" DIRECT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test for Raster Reprojection in CMake\nDESCRIPTION: Defines a test case for the Raster Reprojection Filter in the vtkGeovisGDALCxxTests test suite, making use of CMake's vtk_add_test_cxx function to specify the source file that contains the test implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/GDAL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkGeovisGDALCxxTests tests\n  TestRasterReprojectionFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Tools Build Option in CMake\nDESCRIPTION: Configures build option for HDF5 tools, with VTK-specific hardcoding to disable tools by default. In the original HDF5 configuration, tools would be built by default with the option being ON.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS \"${HDF5_SOURCE_DIR}/tools\" AND IS_DIRECTORY \"${HDF5_SOURCE_DIR}/tools\")\n  if (FALSE) # XXX(kitware): Hardcode settings.\n  option (HDF5_BUILD_TOOLS  \"Build HDF5 Tools\" ON)\n  else ()\n  set(HDF5_BUILD_TOOLS OFF)\n  endif ()\n  if (HDF5_BUILD_TOOLS)\n    add_subdirectory (tools)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ExprTk Vector Size Operator\nDESCRIPTION: Examples of the vector size operator [] which returns the size of the vector being operated on. Can be used in expressions to determine or compare vector dimensions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_17\n\nLANGUAGE: ExprTk\nCODE:\n```\nv[]\nmax_size := max(v0[],v1[],v2[],v3[])\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of C++ Subdirectory in CMake\nDESCRIPTION: This snippet checks if C++ testing is not disabled and adds the 'Cxx' subdirectory if the condition is met.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Python Subdirectory in CMake\nDESCRIPTION: Adds the 'Python' subdirectory if Python wrapping is enabled for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tick Count in Non-Adjusted Mode\nDESCRIPTION: Allows manual configuration of horizontal and vertical tick counts for more precise axis representation\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/legend-scale-actor.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nactor->SetNumberOfHorizontalTicks(10);\nactor->SetNumberOfVerticalTicks(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ExprTK C++ Tests\nDESCRIPTION: Sets up C++ test configuration for the VTK ExprTK module using CMake. Adds a test target with specific flags for no data, validation, or output requirements, and creates the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkexprtkCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeExprTK.cxx)\nvtk_test_cxx_executable(vtkexprtkCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Sources\nDESCRIPTION: This section lists the source files that comprise the project, including the main C++ file (main.cpp), the QML file (main.qml) for the QtQuick user interface, and the QML resource file (qml.qrc).\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickChartsOn3DScene/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_SOURCES\n  main.cpp\n  main.qml\n  qml.qrc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for VTK Parse Version\nDESCRIPTION: Sets a compile definition for the VTK parse version using major and minor version numbers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(SOURCE vtkParseMain.c\n  PROPERTY\n    COMPILE_DEFINITIONS \"VTK_PARSE_VERSION=\\\"${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}\\\"\")\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build, indicating that C++ source files for VTK are located in this directory. It ensures that CMake processes the contents of the 'Cxx' folder as part of the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ioss/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for JavaVTK Library - CMake\nDESCRIPTION: This snippet defines a list of source files to be used in the JavaVTK shared library. The sources variable holds the filenames that will be compiled into the library. It's a fundamental step in setting up the build configuration in CMake.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/JavaVTK/jni/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  main.cxx\n)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK InfovisCore Test Executable\nDESCRIPTION: Combines all test types into a single list and creates a test executable with specific configuration options including disabled floating point exceptions and rendering factory support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${data_tests}\n  ${output_tests}\n  ${custom_tests}\n  )\nvtk_test_cxx_executable(vtkInfovisCoreCxxTests all_tests\n   DISABLE_FLOATING_POINT_EXCEPTIONS\n   RENDERING_FACTORY\n   )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Test Directories in CMake\nDESCRIPTION: This CMake script specifies test data files required for the VTK module tests and conditionally includes C++ and Python test subdirectories based on build configuration flags. It uses vtk_module_test_data to register sample data files and only includes language-specific test directories when the corresponding features are enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/SampleStructGrid.vtk\n  Data/cow.vtp)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit No Data Tests\nDESCRIPTION: Creates a list of test files that don't require data, valid results, or output. These tests focus on implicit array strategies and filters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(implicit_no_data_tests\n    TestToAffineArrayStrategy.cxx\n    TestToConstantArrayStrategy.cxx\n    TestToImplicitArrayFilter.cxx\n    TestToImplicitRamerDouglasPeuckerStrategy.cxx\n    TestToImplicitTypeErasureStrategy.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Lagrange Geometric Operations Tests in CMake\nDESCRIPTION: Sets up test arguments for LagrangeGeometricOperations tests, including input data paths and validation image references for various operations like boundary, contour, cut, clip, and stabilization tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(LagrangeGeometricOperations_ARGS\n  -D DATA{../Data/Input/Elements.vtu}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-Boundary.png,:}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-Contour.png,:}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-Cut.png,:}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-Clip.png,:}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-StabR.png,:}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-StabS.png,:}\n  -V DATA{../Data/Baseline/LagrangeGeometricOperations-StabT.png,:}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PROJ Binary Build Options in CMake\nDESCRIPTION: Sets build options for various PROJ binary tools. In this case, all options are set to OFF due to a conditional statement.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): We don't build binaries\noption(BUILD_CCT\n  \"Build cct (coordinate conversion and transformation tool)\" ON)\noption(BUILD_CS2CS\n  \"Build cs2cs (coordinate systems to coordinate systems translation tool)\" ON)\noption(BUILD_GEOD\n  \"Build geod (computation of geodesic lines)\" ON)\noption(BUILD_GIE\n  \"Build gie (geospatial integrity investigation environment)\" ON)\noption(BUILD_PROJ\n  \"Build proj (cartographic projection tool)\" ON)\noption(BUILD_PROJINFO\n  \"Build projinfo (SRS and coordinate operation metadata/query tool)\" ON)\noption(BUILD_PROJSYNC\n  \"Build projsync (synchronize transformation support data)\" ON)\nelse ()\nset(BUILD_CCT OFF)\nset(BUILD_CS2CS OFF)\nset(BUILD_PROJ OFF)\nset(BUILD_PROJINFO OFF)\nset(BUILD_PROJSYNC OFF)\nset(BUILD_GEOD OFF)\nset(BUILD_GIE OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK OMF Test Suite in CMake\nDESCRIPTION: Sets up test suite for VTK IO OMF module with C++ test files and testing data configuration\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOOMFCxxTests tests\n  TESTING_DATA\n  TestOMFReader.cxx)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOOMFCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Conduit Standard Tests\nDESCRIPTION: Sets up basic C++ tests for VTK Conduit functionality without validation or output checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkConduitCxxTests tests\n  NO_VALID NO_OUTPUT\n  TestDataObjectToConduit.cxx\n  TestConduitSource.cxx)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK C++ Executable Test\nDESCRIPTION: This CMake command creates an executable for a VTK C++ test. It takes the test name as an argument and configures the executable build settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOTecplotTableCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic XDMF Python Tests in VTK\nDESCRIPTION: Adds Python test files for XDMF testing in VTK. The tests are configured with NO_VALID, NO_RT, and NO_DATA flags indicating they don't require validation images, real-time testing, or standard data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  VToXLoop.py,NO_VALID,NO_RT,NO_DATA\n  ReadXdmfPolyhedron.py,NO_VALID,NO_RT\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring GL2PS Test Files\nDESCRIPTION: Conditionally sets up GL2PS test files based on GhostScript executable availability. Only includes specific test files when GhostScript is present.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(GL2PSTests)\nif(VTK_GHOSTSCRIPT_EXECUTABLE)\n  set(GL2PSTests\n    TestGL2PSAddPolyPrimitive.cxx\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific Resource Version Information in CMake\nDESCRIPTION: Creates a resource version header file for Windows builds of libxml2, setting up version information constants that will be included in the Windows resource file.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    list(APPEND LIBXML2_SRCS win32/libxml2.rc)\n    file(\n        WRITE\n        ${CMAKE_CURRENT_BINARY_DIR}/rcVersion.h\n        \"#define LIBXML_MAJOR_VERSION ${LIBXML_MAJOR_VERSION}\\n\"\n        \"#define LIBXML_MINOR_VERSION ${LIBXML_MINOR_VERSION}\\n\"\n        \"#define LIBXML_MICRO_VERSION ${LIBXML_MICRO_VERSION}\\n\"\n        \"#define LIBXML_DOTTED_VERSION \\\"${VERSION}\\\"\\n\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring NetCDFCF Test List\nDESCRIPTION: Defines a list of Python test files for NetCDFCF reader testing, including NetCDF and XArray interface tests\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(tests\n  NetCDFCF2DBounds.py\n  NetCDFCFSetOutputType.py\n  NetCDFCFSphericalCoords.py\n  NetCDFCFUnstructured.py\n  NetCDFReader.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Dependencies\nDESCRIPTION: This snippet specifies the data files required by the tests using the `vtk_module_test_data` CMake macro.  The listed files, `Data/TestGPURayCastTransfer2DYScalarsTransferFunction.vti` and `Data/disk_out_ref.ex2`, are necessary for certain tests to run correctly and validate their outputs. These files are automatically made available to the tests during execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/TestGPURayCastTransfer2DYScalarsTransferFunction.vti\n  Data/disk_out_ref.ex2\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Building Full-text Index\nDESCRIPTION: Example command to build a full-text search index using doc_index.pl script.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nperl doc_index.pl --to ../../../VTK-doxygen\n```\n\n----------------------------------------\n\nTITLE: VTK WebAssembly Module Setup\nDESCRIPTION: Configures the VTK WebAssembly module with necessary classes and dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkWasmSceneManager)\n\nvtk_module_add_module(VTK::WebAssembly\n  CLASSES ${classes})\n\nvtk_add_test_mangling(VTK::WebAssembly)\n```\n\n----------------------------------------\n\nTITLE: Detecting Static Builds of OpenTURNS\nDESCRIPTION: Detects static builds of OpenTURNS and applies necessary patches for compatibility. It adds the OT_STATIC compile definition if missing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (openturns_library IN LISTS OPENTURNS_LIBRARY)\n  if (NOT TARGET \"${openturns_library}\")\n    continue ()\n  endif ()\n\n  get_property(openturns_type TARGET \"${openturns_library}\"\n    PROPERTY TYPE)\n  if (NOT openturns_type STREQUAL \"STATIC_LIBRARY\")\n    continue ()\n  endif ()\n\n  get_property(openturns_compile_definitions TARGET \"${openturns_library}\"\n    PROPERTY INTERFACE_COMPILE_DEFINITIONS)\n  if (NOT \"OT_STATIC\" IN_LIST openturns_compile_definitions)\n    if (NOT VTK_Filters_OpenTURNS_ONLY_BUILD_NEEDED)\n      message(AUTHOR_WARNING\n        \"OpenTURNS does not have a complete usage requirements set up for \"\n        \"static usage before its 1.23 release. Please backport the CMake \"\n        \"changes from https://github.com/openturns/openturns/pull/2555 for a \"\n        \"complete fix. If only a VTK build (and no subsequent\n        `find_package(VTK)` calls), this message may be suppressed by setting \"\n        \"`VTK_Filters_OpenTURNS_ONLY_BUILD_NEEDED=1`\")\n    endif ()\n\n    set_property(TARGET \"${openturns_library}\" APPEND\n      PROPERTY\n        INTERFACE_COMPILE_DEFINITIONS \"OT_STATIC\")\n  endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Adding GL2PS Test CMake Configuration\nDESCRIPTION: This snippet includes the configuration for GL2PS tests, integrating them within the CMake build to ensure that the GL2PS functionalities are available for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../../../../CMake/vtkTestingGL2PS.cmake)\nvtk_add_gl2ps_test_cxx(${GL2PSTests})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files in CMake\nDESCRIPTION: Registers test data files for VTK module testing, including CSV, XML, graph files, and various UTF-encoded text files. The files are primarily used for testing VTK's Infovis and data processing capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Infovis/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/csvWithBOM.csv\n  Data/Infovis/DimacsGraphs/,REGEX:.*\n  Data/Infovis/XML/example_phylo.xml\n  Data/Infovis/clustered-graph.tlp\n  Data/Infovis/eg1.ris\n  Data/Infovis/eg2.isi\n  Data/Infovis/multi_tree.tre\n  Data/Infovis/otu_table.biom\n  Data/Infovis/rep_set.tre\n  Data/Infovis/small.tlp\n  Data/authors.csv\n  Data/delimited.txt\n  Data/delimited2.txt\n  Data/delimited2UTF16.txt\n  Data/delimited2UTF16BE.txt\n  Data/delimited2UTF16LE.txt\n  Data/delimitedUTF16.txt\n  Data/delimitedUTF16BE.txt\n  Data/delimitedUTF16LE.txt\n  Data/fixedwidth.txt\n  Data/half_sphere_commented.csv\n  Data/vehicle_data.csv)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests for VTK Rendering Annotation Module\nDESCRIPTION: Defines a list of C++ test files for the VTK Rendering Annotation module. Some tests are marked with NO_VALID or LOOSE_VALID flags to indicate special validation requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Annotation/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingAnnotationCxxTests tests\n  TestAxisActor2D.cxx\n  TestAxisActor_Mode2D.cxx\n  TestAxisActor_MultiAxis.cxx\n  TestAxisActor_Text3D.cxx\n  TestAxisActor_X.cxx\n  TestAxisActor_Y.cxx\n  TestAxisActor_Z.cxx\n  TestBarChartActor.cxx\n  TestCaptionActor2D.cxx\n  TestConvexHull2D.cxx,NO_VALID\n  TestCornerAnnotation.cxx\n  TestCubeAxes2DMode.cxx\n  TestCubeAxes3.cxx\n  TestCubeAxesInnerGridAll.cxx\n  TestCubeAxesInnerGridClosest.cxx\n  TestCubeAxesInnerGridFurthest.cxx\n  TestCubeAxesIntersectionPoint.cxx\n  TestCubeAxesOrientedBoundingBox.cxx\n  TestCubeAxesSticky.cxx\n  TestCubeAxesStickyCentered.cxx\n  TestCubeAxesWithGridLines.cxx\n  TestCubeAxesWithXInnerGrids.cxx\n  TestCubeAxesWithXInnerPolys.cxx\n  TestCubeAxesWithXLines.cxx\n  TestCubeAxesWithYInnerGrids.cxx\n  TestCubeAxesWithYInnerPolys.cxx\n  TestCubeAxesWithYLines.cxx\n  TestCubeAxesWithZInnerGrids.cxx\n  TestCubeAxesWithZInnerPolys.cxx\n  TestCubeAxesWithZLines.cxx\n  TestEmptyCornerAnnotation.cxx\n  TestLegendBoxActor.cxx\n  TestLegendBoxActor2.cxx\n  TestLegendScaleActor.cxx\n  TestLegendScaleActorCustomLabels.cxx\n  TestLegendScaleActorDefault.cxx\n  TestPieChartActor.cxx\n  TestPolarAxes.cxx\n  TestPolarAxes2D.cxx\n  TestPolarAxes2DDefault.cxx\n  TestPolarAxesNoData.cxx\n  TestRadialGrid2D.cxx,LOOSE_VALID\n  TestScalarBar.cxx\n  TestScalarBarAboveBelow.cxx\n  TestSpiderPlotActor.cxx\n  TestXYPlotActor.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files for CLI11 Module\nDESCRIPTION: This snippet defines the CMake command to install header files necessary for the CLI11 module in VTK. It specifies the source and the binary directory for the header files to be included in the installation process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_cli11.h\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_cli11_forward.h\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/vtk_cli11_external.h\")\n\n```\n\n----------------------------------------\n\nTITLE: Registering EnSight Test Data in VTK\nDESCRIPTION: Specifies EnSight data files to be used in VTK module tests. The code uses REGEX patterns to include all files within specific EnSight directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/EnSight/,REGEX:.*\n  Data/EnSight/UndefAndPartial/,REGEX:.*\n  Data/EnSight/UndefAndPartialAscii/,REGEX:.*\n  Data/EnSight/particles/,REGEX:.*\n  Data/EnSight/.EnsightData_temporalCache/,REGEX:.*\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK H5Part C++ Tests\nDESCRIPTION: Sets up C++ test configuration for VTK H5Part module using CMake. Adds a test case 'TestIncludeH5Part.cxx' without data, validation, or output requirements, and creates the corresponding test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkh5partCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeH5Part.cxx)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkh5partCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Encoding String for OpenVR Dashboard\nDESCRIPTION: This snippet encodes a string input for the OpenVR dashboard, specifying output headers and binary data to be generated.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_encode_string(\n  INPUT         \"OpenVRDashboard.jpg\"\n  EXPORT_HEADER \"vtkRenderingOpenVRModule.h\"\n  EXPORT_SYMBOL \"VTKRENDERINGOPENVR_NO_EXPORT\"\n  HEADER_OUTPUT dashboard_header\n  SOURCE_OUTPUT dashboard_source\n  BINARY)\n```\n\n----------------------------------------\n\nTITLE: Setting ParallelDIY Module Definitions and Test Mangling in CMake\nDESCRIPTION: Configures module definitions for VTK::ParallelDIY, specifically disabling DIY threads through the DIY_NO_THREADS definition. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/DIY/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_definitions(VTK::ParallelDIY\n  PUBLIC DIY_NO_THREADS)\nvtk_add_test_mangling(VTK::ParallelDIY)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library Directory\nDESCRIPTION: This CMake snippet conditionally creates a directory named `shared` inside `${HDF5_SRC_BINARY_DIR}` if the `BUILD_SHARED_LIBS` option is enabled. The `file(MAKE_DIRECTORY)` command ensures that the directory exists.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_SHARED_LIBS)\n  file (MAKE_DIRECTORY \"${HDF5_SRC_BINARY_DIR}/shared\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK H5part Reader Tests in CMake\nDESCRIPTION: These CMake commands set up the tests for the VTK H5part IO module. The first command defines a test named 'TestH5partReader.cxx' with the NO_VALID flag, indicating that no valid baseline comparison image is required. The second command creates a test executable from the defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/H5part/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOH5partCxxTests tests\n  TestH5partReader.cxx,NO_VALID\n)\nvtk_test_cxx_executable(vtkIOH5partCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warning Flags for PROJ\nDESCRIPTION: Sets up compiler-specific warning flags for GNU, Clang, MSVC, and Intel compilers for both C and C++ in the PROJ project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJ_common_WARN_FLAGS\n  -Wall\n  -Wextra\n  -Wswitch\n  -Wshadow\n  -Wunused-parameter\n  -Wmissing-declarations\n  -Wformat\n  -Wformat-security\n)\nif(\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\")\n  set(PROJ_C_WARN_FLAGS ${PROJ_common_WARN_FLAGS}\n    -Wmissing-prototypes\n  )\n  set(PROJ_CXX_WARN_FLAGS ${PROJ_common_WARN_FLAGS})\nelseif(\"${CMAKE_C_COMPILER_ID}\" MATCHES \"Clang\")\n  set(PROJ_C_WARN_FLAGS ${PROJ_common_WARN_FLAGS}\n    -Wmissing-prototypes\n    -Wfloat-conversion\n    -Wc11-extensions\n  )\n  set(PROJ_CXX_WARN_FLAGS ${PROJ_common_WARN_FLAGS}\n    -Wfloat-conversion\n  )\nelseif(\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"MSVC\")\n  add_definitions(/D_CRT_SECURE_NO_WARNINGS)\n  set(PROJ_C_WARN_FLAGS\n    /W4\n    /wd4706\n    /wd4996\n  )\n  set(PROJ_CXX_WARN_FLAGS /EHsc ${PROJ_C_WARN_FLAGS})\nelseif(\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Intel\")\n  if(MSVC)\n    set(PROJ_C_WARN_FLAGS /Wall)\n    set(PROJ_CXX_WARN_FLAGS /Wall)\n  else()\n    set(PROJ_C_WARN_FLAGS -Wall)\n    set(PROJ_CXX_WARN_FLAGS -Wall)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unix VTK Path Setup\nDESCRIPTION: Command to set up the environment paths for VTK on Unix-based systems from the build tree root.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource ./unix_path.sh\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Tests for VTK Filters Parallel Geometry\nDESCRIPTION: Adds MPI-based tests using the previously defined source files. This command creates the main test suite for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkFiltersParallelGeometryCxxTests-MPI tests ${Tests_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test with Subdirectory and Test Data in CMake\nDESCRIPTION: This CMake snippet configures a VTK module test by adding the C++ source code subdirectory and registering a Conduit BP AMR JSON file as required test data. The vtk_module_test_data macro ensures the specified data file is available during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\nvtk_module_test_data(\n  Data/Conduit/bp_amr_example.json\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating CXX Test Executable for VTK Tests\nDESCRIPTION: This snippet compiles the tests added for the VTK IOSQL module into an executable for testing purposes. It links all specified tests into a single executable target.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOSQLCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Creating Zlib as a VTK Module\nDESCRIPTION: Creates Zlib as a VTK module using the VTK-specific module system rather than the standard CMake library targets. The module includes all source files and headers organized appropriately.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/vtkzlib/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# XXX(kitware): create the third-party library for VTK\nvtk_module_add_module(VTK::zlib\n    SOURCES ${ZLIB_SRCS}\n    HEADERS ${ZLIB_PUBLIC_HDRS}\n    PRIVATE_HEADERS ${ZLIB_PRIVATE_HDRS}\n    HEADERS_SUBDIR \"vtkzlib\")\nset_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Serialization Helpers\nDESCRIPTION: Conditionally adds serialization helper sources when VTK_WRAP_SERIALIZATION is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(serialization_helper_sources)\nif (VTK_WRAP_SERIALIZATION)\n  list(APPEND serialization_helper_sources\n    vtkAlgorithmSerDesHelper.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring KWSys Library Installation Rules\nDESCRIPTION: Sets up installation rules for library components including shared libraries, namelinks, archives and runtime components. Handles different installation directories and export names.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(KWSYS_INSTALL_LIBRARY_RULE)\nset(KWSYS_INSTALL_NAMELINK_RULE)\nif(KWSYS_INSTALL_LIB_DIR)\n  if(KWSYS_INSTALL_EXPORT_NAME)\n    list(APPEND KWSYS_INSTALL_LIBRARY_RULE EXPORT ${KWSYS_INSTALL_EXPORT_NAME})\n  endif()\n  set(KWSYS_INSTALL_LIBRARY_RULE ${KWSYS_INSTALL_LIBRARY_RULE}\n    LIBRARY DESTINATION ${KWSYS_INSTALL_LIB_DIR} NAMELINK_SKIP)\n  if(KWSYS_INSTALL_COMPONENT_NAME_RUNTIME)\n    set(KWSYS_INSTALL_LIBRARY_RULE ${KWSYS_INSTALL_LIBRARY_RULE}\n      COMPONENT ${KWSYS_INSTALL_COMPONENT_NAME_RUNTIME})\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with vtk_test_cxx_executable\nDESCRIPTION: This snippet uses vtk_test_cxx_executable to execute the defined tests for vtkDomainsMicroscopyCxxTests. The RENDERING_FACTORY flag is used, indicating a dependency on rendering components. This function ensures that the executable is correctly set up for testing the OpenSlideReader in a rendering context, ensuring compatibility and correct operation of image data rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkDomainsMicroscopyCxxTests tests RENDERING_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties in CMake\nDESCRIPTION: This snippet uses `set_property` in CMake to set environment variables for a specific test. It appends the `ENVIRONMENT` property with `VTK_TESTING=1` and `VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID`, which are used to configure the testing environment and image comparison method.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(TEST\n    VTK::RenderingLICOpenGL2Cxx-SurfaceLICCurvedContrastEnhancedColorMappedSmallGrainMask APPEND\n  PROPERTY\n    ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=TIGHT_VALID\")\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable for VTK Accelerators VTKm Data Model\nDESCRIPTION: Creates the test executable for VTK Accelerators VTKm Data Model tests with rendering factory support. This uses the previously defined test list to build the executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkAcceleratorsVTKmDataModelCxxTests tests\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling VTK Test Mangling\nDESCRIPTION: This snippet invokes the `vtk_add_test_mangling` macro to enable test name mangling for the `VTK::TestingIOSQL` module. Test mangling helps organize test output and makes it easier to identify the tests associated with a particular module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/IOSQL/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::TestingIOSQL)\n```\n\n----------------------------------------\n\nTITLE: Find Ant Executable\nDESCRIPTION: Finds the Ant build tool. If the tool is not found, it will terminate CMake with a fatal error.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(ANT_EXECUTABLE\n  NAMES ant\n  DOC   \"The ant build tool\")\nif(NOT ANT_EXECUTABLE)\n  message(FATAL_ERROR \"Can not find ant build tool: ant\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: VTK Financial Field Data Format Example\nDESCRIPTION: An example of VTK field data format for financial data. This format stores multiple arrays of different types, each representing different financial metrics with 3188 tuples per array.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/design_documents/VTKFileFormats.md#2025-04-21_snippet_10\n\nLANGUAGE: plain text\nCODE:\n```\n# vtk DataFile Version 2.0\nFinancial data in vtk field format\nASCII\nFIELD financialData 6\nTIME_LATE 1 3188 float\n29.14 0.00 0.00 11.71 0.00 0.00 0.00 0.00\n...(more stuff — 3188 total values)...\nMONTHLY_PAYMENT 1 3188 float\n7.26 5.27 8.01 16.84 8.21 15.75 10.62 15.47\n...(more stuff)...\nUNPAID_PRINCIPLE 1 3188 float\n430.70 380.88 516.22 1351.23 629.66 1181.97 888.91 1437.83\n...(more stuff)...\nLOAN_AMOUNT 1 3188 float\n441.50 391.00 530.00 1400.00 650.00 1224.00 920.00 1496.00\n...(more stuff)...\nINTEREST_RATE 1 3188 float\n13.875 13.875 13.750 11.250 11.875 12.875 10.625 10.500\n...(more stuff)...\nMONTHLY_INCOME 1 3188 unsigned_short\n39 51 51 38 35 49 45 56\n...(more stuff)...\n```\n\n----------------------------------------\n\nTITLE: Triggering CI Tests\nDESCRIPTION: Commands for triggering CI tests on merge requests with various options for controlling test execution\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nDo: test\nDo: test -s quick\nDo: test --named <regex>\nDo: test --stage <stage>\nDo: test --action <action>\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Template Classes\nDESCRIPTION: Defines template classes for the VTK CommonExecutionModel module, specifically including the temporal algorithm class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset (template_classes\n  vtkTemporalAlgorithm)\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Wrapped Headers\nDESCRIPTION: Specifies header files that should not be wrapped in the module's language bindings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_headers\n  vtkLagrangianThreadedData.h)\n```\n\n----------------------------------------\n\nTITLE: ADIOS2 Package Configuration\nDESCRIPTION: Configures ADIOS2 dependency and sets definitions for random access support in versions 2.8.0 and above.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PACKAGE ADIOS2)\nif (ADIOS2_VERSION VERSION_GREATER_EQUAL \"2.8.0\")\n  set(ADIOS_DEFS FIDES_ADIOS_HAS_RANDOM_ACCESS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory Based on vtk_testing_cxx_disabled\nDESCRIPTION: This snippet adds the Cxx subdirectory to the build only if the vtk_testing_cxx_disabled flag is not set. This allows for modular handling of the Cxx component depending on its testing configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\\n  add_subdirectory(Cxx)\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Directory\nDESCRIPTION: Conditionally adds the C++ test directory if C++ testing is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIParallel/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including Test Data\nDESCRIPTION: This snippet uses `vtk_module_test_data` to specify the data files required for running tests.  It makes sure the data files are available to the testing environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/uGridEx.vtk\n  Data/can.vtu)\n```\n\n----------------------------------------\n\nTITLE: McGill University License Declaration\nDESCRIPTION: License terms from McGill University's McConnell Brain Imaging Centre granting permission to use, copy, modify and distribute the software without fee.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MINC/Copyright.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/*=========================================================================\nCopyright 1993-2000 Peter Neelin and David MacDonald, McConnell Brain\nImaging Centre, Montreal Neurological Institute, McGill University.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies.  The\nauthor and McGill University make no representations about the\nsuitability of this software for any purpose.  It is provided \"as is\"\nwithout express or implied warranty.\n=========================================================================*/\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module Definition - CMake\nDESCRIPTION: This snippet utilizes the vtk_module_add_module command to define the VTK module 'VTK::IOVPIC' and specifies the classes it will include using the previously set 'classes' variable. This command is crucial for ensuring that the correct resources are associated with the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/VPIC/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOVPIC\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory Override for ANARI Volume Interface\nDESCRIPTION: Sets up a VTK object factory to allow vtkAnariVolumeMapper to override the vtkAnariVolumeInterface base class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkAnariVolumeInterface\n  OVERRIDE vtkAnariVolumeMapper\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK Filters Parallel Module in CMake\nDESCRIPTION: Sets up a list of class names for the VTK Filters Parallel module. These classes represent various parallel processing filters and utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAdaptiveTemporalInterpolator\n  vtkAggregateDataSetFilter\n  vtkAlignImageDataSetFilter\n  vtkAngularPeriodicFilter\n  vtkPAxisAlignedReflectionFilter\n  vtkCleanArrays\n  vtkCollectGraph\n  vtkCollectPolyData\n  vtkCollectTable\n  vtkCutMaterial\n  vtkDistributedDataFilter\n  vtkDuplicatePolyData\n  vtkExtractCTHPart\n  vtkExtractPolyDataPiece\n  vtkExtractUnstructuredGridPiece\n  vtkExtractUserDefinedPiece\n  vtkGenerateProcessIds\n  vtkHyperTreeGridGenerateGlobalIds\n  vtkHyperTreeGridGenerateProcessIds\n  vtkHyperTreeGridGhostCellsGenerator\n  vtkIntegrateAttributes\n  vtkIntegrationGaussianStrategy\n  vtkIntegrationLinearStrategy\n  vtkIntegrationStrategy\n  vtkMergeBlocks\n  vtkMultiProcessControllerHelper\n  vtkPHyperTreeGridProbeFilter\n  vtkPeriodicFilter\n  vtkPConvertToMultiBlockDataSet\n  vtkPExtractDataArraysOverTime\n  vtkPExtractExodusGlobalTemporalVariables\n  vtkPExtractSelectedArraysOverTime\n  vtkPieceRequestFilter\n  vtkPieceScalars\n  vtkPipelineSize\n  vtkPKdTree\n  vtkPLinearExtrusionFilter\n  vtkPMaskPoints\n  vtkPMergeArrays\n  vtkPOutlineCornerFilter\n  vtkPOutlineFilter\n  vtkPOutlineFilterInternals\n  vtkPPolyDataNormals\n  vtkPProbeFilter\n  vtkPProjectSphereFilter\n  vtkPReflectionFilter\n  vtkPResampleFilter\n  vtkPartitionBalancer\n  vtkPSphereSource\n  vtkPTextureMapToSphere\n  vtkPYoungsMaterialInterface\n  vtkRectilinearGridOutlineFilter\n  vtkRemoveGhosts\n  vtkTransmitPolyDataPiece\n  vtkTransmitRectilinearGridPiece\n  vtkTransmitStructuredDataPiece\n  vtkTransmitStructuredGridPiece\n  vtkTransmitUnstructuredGridPiece)\n```\n\n----------------------------------------\n\nTITLE: Including C++ Directory in VTK CMake Build\nDESCRIPTION: This CMake command adds the Cxx subdirectory to the build process, ensuring that all C++ source files in that directory are compiled as part of the VTK build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Data in CMake\nDESCRIPTION: This code snippet shows how to initialize test data using the vtk_module_test_data function within a CMakeLists.txt file. It specifies required test data by referencing a data file called residuals.dat. This function is useful for setting up testing environments in a VTK CMake-based project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/residuals.dat)\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test for PCellSizeFilter\nDESCRIPTION: This snippet adds an MPI test for the PCellSizeFilter using the `vtk_add_test_mpi` macro. It specifies the test name, source file (`PCellSizeFilter.cxx`), testing data directory (`TESTING_DATA`), and whether the test has validation data (`NO_VALID`).\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mpi(vtkFiltersParallelVerdictCxxTests-MPI tests PCellSizeFilter.cxx,TESTING_DATA,NO_VALID)\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory in CMake\nDESCRIPTION: This snippet adds the Cxx directory as a subdirectory in the CMake project, enabling the build system to process its contents. This is essential for organizing large projects like VTK, where modular components are included and built separately. No additional parameters are required.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pugixml/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Fixed-width Floating-point Type Parsing Example in C++23\nDESCRIPTION: Example showing how to use fast_float with fixed-width floating-point types introduced in C++23. This demonstrates parsing into std::float32_t type.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/README.md#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nstd::float32_t result;\nauto answer = fast_float::from_chars(f.data(), f.data() + f.size(), result);\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (Planar LIC, No Vector Normalization) in CMake\nDESCRIPTION: This snippet creates a test using `ExternalData_add_test` to examine planar LIC without vector normalization. It passes arguments to `TestSurfaceLIC` to disable vector normalization, generate a noise texture, enhance contrast, and color by magnitude. This configuration tests how LIC behaves when the input vectors are not normalized.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICPlanarVectorNormalizeOff\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICPlanarVectorNormalizeOff.png,:}\"\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/SurfaceVectors.vtk}\n    --camera-config=3\n    --vectors=V\n    --normalize-vectors=0\n    --step-size=0.5\n    --num-steps=2000\n    --generate-noise-texture=1\n    --noise-texture-size=128\n    --noise-grain-size=2\n    --number-of-noise-levels=256\n    --noise-gen-seed=12367\n    --enhance-contrast=1\n    --color-by-mag=1\n    --color-mode=1\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering LOD C++ Tests with CMake\nDESCRIPTION: This snippet adds a C++ test for the LODActor functionality and creates a test executable for the VTK Rendering LOD module. It uses VTK-specific CMake functions to set up the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LOD/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingLODCxxTests tests\n  TestLODActor.cxx,NO_VALID\n  )\nvtk_test_cxx_executable(vtkRenderingLODCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring GL2PS Tests\nDESCRIPTION: This snippet sets parameters for the GL2PS tests if the Ghostscript executable is found. It also adds GL2PS-related tests to the CMake build for rendering functionalities that depend on Ghostscript.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_GHOSTSCRIPT_EXECUTABLE)\n    set(TestGL2PSFontDPIScaling_ARGS DATA{../Data/Fonts/DejaVuSans.ttf})\n    vtk_add_test_cxx(vtkRenderingMatplotlibCxxTests GL2PSTests\n      TestGL2PSFontDPIScaling.cxx\n      TestGL2PSMathTextActor.cxx\n      TestGL2PSMathTextActor3D.cxx\n      TestGL2PSMathTextOutput.cxx\n      TestGL2PSMathTextScaling.cxx\n    )\n    list(APPEND tests\n      ${GL2PSTests})\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Subdirectory Inclusion in CMake\nDESCRIPTION: This snippet checks if the C++ testing is not disabled and attempts to add the Cxx subdirectory, allowing for organized build management and modular testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\\n  add_subdirectory(Cxx)\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Compile-time format string checking with fmt library in C++\nDESCRIPTION: Demonstrates the compile-time format string checking feature. This example would result in a compile-time error in C++20 as 'd' is an invalid format specifier for a string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Executable for VTK Tests\nDESCRIPTION: This snippet configures the CMake executable target for the VTK C++ tests. It links the test named vtkpngCxxTests with the specified tests variable. Proper setup of CMake and VTK environment is required. This setup is essential for compiling and running the specified tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkpngCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Support for XDMF\nDESCRIPTION: Sets up MPI support for XDMF, adding the necessary source files if MPI is enabled, or defining XDMF_NO_MPI if it's disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(XDMF_BUILD_MPI)\n    set(XdmfSources ${XdmfSources} ${XdmfMpiSource})\nelse()\n    add_definitions(\"-DXDMF_NO_MPI\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including vtkQt and setting Qt components\nDESCRIPTION: This snippet includes the `vtkQt` module, which provides common Qt-related functions and definitions for VTK. It also sets the required Qt components like OpenGL and Widgets.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkQt)\nset(qt_components\n  OpenGL\n  Widgets)\nif(vtk_qt_major_version VERSION_GREATER_EQUAL 6)\n  list(APPEND qt_components OpenGLWidgets)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Configuration\nDESCRIPTION: Adds Python subdirectory only if VTK Python wrapping is enabled, allowing flexible build configuration for Python support\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Library Project Headers with CMake\nDESCRIPTION: This CMake script sets up the installation of VTK library project header files. It defines the installation destination and lists the header files to be installed. The script uses the install() command to specify the files, destination, and component for installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/include/proj/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(installdest ${INCLUDEDIR}/proj)\n\ninstall(\n  FILES util.hpp metadata.hpp common.hpp crs.hpp datum.hpp\n    coordinatesystem.hpp coordinateoperation.hpp io.hpp nn.hpp\n  #DESTINATION ${installdest}\n  DESTINATION \"${_vtk_build_HEADERS_DESTINATION}/vtklibproj/include/proj\"\n  COMPONENT \"${_vtk_build_HEADERS_COMPONENT}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding GL2PS Rasterization Tests\nDESCRIPTION: Creates tests for rasterizing and verifying generated PostScript output.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_gl2ps_test_cxx(${GL2PSTests})\n```\n\n----------------------------------------\n\nTITLE: Understanding MPI Communicator Proxies\nDESCRIPTION: This snippet clarifies the transition from using duplicates of predefined communicator handles to using proxies for the actual MPI_COMM_WORLD and MPI_COMM_SELF handles.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CHANGES.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_SELF\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests for Render Window Exporters\nDESCRIPTION: Adds two Python test files to the VTK test suite using vtk_add_test_python. The tests are configured with NO_VALID and NO_RT flags, indicating they don't require validation images or runtime testing frameworks.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  NO_VALID NO_RT\n  TestBufferedRenderWindowExporter.py\n  TestPartitionedRenderWindowExporter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK IOParallelNetCDF Classes\nDESCRIPTION: Sets up a list of classes for the VTK IOParallelNetCDF module. This includes readers for NetCDF POP and SLAC data formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPNetCDFPOPReader\n  vtkPSLACReader)\n```\n\n----------------------------------------\n\nTITLE: Appending Test Definitions and Sources (C)\nDESCRIPTION: This snippet appends C-specific test definitions and source files if the C language is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(KWIML_LANGUAGE_C)\n  list(APPEND test_defs KWIML_LANGUAGE_C)\n  list(APPEND test_srcs\n    test_abi_C.c\n    test_int_C.c\n    test_include_C.c\n    )\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK HDF Tools Module in CMake\nDESCRIPTION: Sets up the VTK::IOHDFTools module as a header-only library. Specifies vtkHDF5ScopedHandle.h as a header that should not be wrapped during build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/HDFTools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(no_wrap_headers\n  vtkHDF5ScopedHandle.h)\n\nvtk_module_add_module(VTK::IOHDFTools\n  NOWRAP_HEADERS ${no_wrap_headers}\n  HEADER_ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Wrapped Headers for VTK Filters Statistics in CMake\nDESCRIPTION: This snippet defines a list of headers that should not be wrapped. In this case, it includes a single private header file for the vtkStatisticsAlgorithm.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(nowrap_headers\n  vtkStatisticsAlgorithmPrivate.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory in CMake\nDESCRIPTION: This CMake command adds the Cxx directory to the build process, allowing the inclusion of its source files in the VTK project. It is essential for organizing the C++ code and its associated dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK KissFFT Headers in CMake\nDESCRIPTION: Installs the generated vtk_kissfft.h header file for use in the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_kissfft.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Directory Structure\nDESCRIPTION: CMake configuration that sets up test data paths for the headsq directory and adds the C++ source directory to the build process. The test data is configured using a regex pattern to include all files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIImage/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/headsq/,REGEX:.*)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Factory and Adding Geometry Files in CMake\nDESCRIPTION: This snippet configures the source and header files for VTK object factories and appends necessary geometry data files for head and arm models. It uses custom macros to process geometry files into binaries and headers for use in VTK modules. Key parameters include files in the 'data' directory and export macro definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VRModels/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGVRMODELS_EXPORT\")\n\nset(geometry_sources)\nset(geometry_headers)\n\n# Generates headers with char arrays that contain the model file contents.\nset(geometry_files\n  data/vtkAvatarHead.vtp\n  data/vtkAvatarLeftForeArm.vtp\n  data/vtkAvatarLeftHand.vtp\n  data/vtkAvatarLeftUpperArm.vtp\n  data/vtkAvatarRightForeArm.vtp\n  data/vtkAvatarRightHand.vtp\n  data/vtkAvatarRightUpperArm.vtp\n  data/vtkAvatarTorso.vtp)\nforeach (geometry_file IN LISTS geometry_files)\n  vtk_encode_string(\n    INPUT         \"${geometry_file}\"\n    EXPORT_HEADER \"vtkRenderingVRModelsModule.h\"\n    EXPORT_SYMBOL \"VTKRENDERINGVRMODELS_NO_EXPORT\"\n    HEADER_OUTPUT header\n    SOURCE_OUTPUT source\n    BINARY\n    NUL_TERMINATE)\n  list(APPEND geometry_sources \"${source}\")\n  list(APPEND geometry_headers \"${header}\")\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingCellGrid Module Classes in CMake\nDESCRIPTION: Sets up the list of classes included in the VTK RenderingCellGrid module. These classes are the main components that provide cell grid rendering functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkDGRenderResponder\n  vtkOpenGLCellGridMapper\n  vtkRenderingCellGrid\n)\n```\n\n----------------------------------------\n\nTITLE: ExprTk Multi-Case Evaluation [*] Operator\nDESCRIPTION: Example of the multi-case evaluation operator [*] which evaluates any consequent for which its case statement is true. Returns zero or the result of the last evaluated consequent.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_16\n\nLANGUAGE: ExprTk\nCODE:\n```\n[*]\n{\n  case (x + 1) > (y - 2)    : x := z / 2 + sin(y / pi);\n  case (x + 2) < abs(y + 3) : w / 4 + min(5y,9);\n  case (x + 3) == (y * 4)   : y := abs(z / 6) + 7y;\n}\n```\n\n----------------------------------------\n\nTITLE: Python Test Configuration and Directory Include\nDESCRIPTION: Configures additional test data files and includes Python tests directory when Python wrapping is enabled. Includes specific test files for Python testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/cube-1.exo\n    Data/cyl_with_NaN.g\n    Data/dodecahedron.exo\n    Data/shared_face_polyhedra.exo)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Appending Test Definitions and Sources (CXX)\nDESCRIPTION: This snippet appends CXX-specific test definitions and source files if the CXX language is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(KWIML_LANGUAGE_CXX)\n  list(APPEND test_defs KWIML_LANGUAGE_CXX)\n  list(APPEND test_srcs\n    test_abi_CXX.cxx\n    test_int_CXX.cxx\n    test_include_CXX.cxx\n    )\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Unix-Specific Library Linking\nDESCRIPTION: Links the math library on Unix platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/vtkgl2ps/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX)\n  target_link_libraries(gl2ps\n    PRIVATE\n      m)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Getting the Commit Hash for Future Updates\nDESCRIPTION: Retrieves the short commit hash of the current xdmf2-upstream branch to record for future updates.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit rev-parse --short=8 xdmf2-upstream\n```\n\n----------------------------------------\n\nTITLE: Library Naming Note for Header-Only Modules\nDESCRIPTION: CMake note indicating that header-only modules that are part of kits is currently untested functionality, though it should theoretically be supported.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/ModuleSystem.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nHEADER_ONLY modules which are part of kits is currently untested. This\nshould be supported, but might not work at the moment.\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Paths in CMake\nDESCRIPTION: Specifies the data files and directories required for VTK module testing, including AMR hierarchical box datasets and many blocks test data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/AMR/HierarchicalBoxDataset.v1.1.vthb\n  Data/AMR/HierarchicalBoxDataset.v1.1/,REGEX:.*\n  Data/many_blocks/many_blocks.vtm\n  Data/many_blocks/many_blocks/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Configuring Expat XML_LARGE_SIZE Setting for VTK\nDESCRIPTION: Sets the XML_LARGE_SIZE configuration option for internal builds of Expat, enabling support for larger XML files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# match setting of EXPAT_LARGE_SIZE in our build\nif(NOT VTK_MODULE_USE_EXTERNAL_vtkexpat)\n  set(XML_LARGE_SIZE 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Tests and Test Data in VTK Project\nDESCRIPTION: Configures Python testing environment and adds necessary test data files if Python wrapping is enabled for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/SPH_Points.vtu\n    Data/SPH_Points2D.vtu\n    Data/SainteHelens.dem\n    Data/combq.bin\n    Data/combxyz.bin)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: Specifies test data files for a VTK module using vtk_module_test_data(). Includes various data files and a regex pattern for multiple files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/AngularSector.vtk\n  Data/EventRecording.log\n  Data/SainteHelens.dem\n  Data/SyntheticPolyline.vtp\n  Data/beach.tif\n  Data/combq.bin\n  Data/combxyz.bin\n  Data/fran_cut.png\n  Data/headsq/,REGEX:.*\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Process MPI Test for Parallel Connectivity\nDESCRIPTION: Sets up a single-process MPI test for parallel connectivity. This test uses specific data and does not perform validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkFiltersParallelGeometryCxxTests-MPI_NUMPROCS 1)\nvtk_add_test_mpi(vtkFiltersParallelGeometryCxxTests-MPI data_tests_1_proc\n  ParallelConnectivity1,ParallelConnectivity.cxx,TESTING_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Modules to VTK::GUISupportQt\nDESCRIPTION: This snippet links the specified Qt modules (`qt_modules`) to the VTK::GUISupportQt module. It makes the Qt functionality available to the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_link(VTK::GUISupportQt PUBLIC ${qt_modules})\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory in VTK CMake Build\nDESCRIPTION: CMake command to include the Python subdirectory in the VTK build process, enabling Python bindings and related functionality to be built as part of the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Configuration\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that the C++ source code for VTK should be compiled and included in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/GeometryPreview/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Cases for vtkloguruCxx\nDESCRIPTION: This command registers test cases for the vtkloguruCxx module using CMake. It specifies various types of tests to be included in the build process, such as NO_DATA, NO_VALID, and NO_OUTPUT. Additionally, it sets the source file containing the test cases, TestIncludeLoguru.cxx.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkloguruCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeLoguru.cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK DomainsChemistry Tests - CMake\nDESCRIPTION: This snippet defines a set of tests for the VTK DomainsChemistry module, specifying the test files and their properties. It includes settings for test timeouts and serial execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkDomainsChemistryCxxTests tests\n  TestBallAndStick.cxx\n  TestPDBBallAndStick.cxx\n  TestBondColorModeDiscreteByAtom.cxx\n  TestBondColorModeSingleColor.cxx\n  TestCompositeRender.cxx\n  TestCustomArrayRadius.cxx\n  TestFastRender.cxx\n  TestLiquoriceSticks.cxx\n  TestMolecule.cxx,NO_VALID\n  TestMoleculeIOLegacy.cxx\n  TestMoleculeSelection.cxx,NO_VALID\n  TestMoleculeMapperColors.cxx\n  TestMoleculeMapperPropertyUpdate.cxx\n  TestMoleculeToBondStickFilter.cxx,NO_VALID\n  TestMoleculeToLines.cxx,NO_VALID\n  TestMultiCylinderOn.cxx\n  TestMultiCylinderOff.cxx\n  TestPeriodicTable.cxx,NO_VALID\n  TestPointSetToMoleculeFilter.cxx,NO_VALID\n  TestProgrammableElectronicData.cxx,NO_VALID\n  TestProteinRibbon.cxx\n  TestSimpleBondPerceiver.cxx,NO_VALID\n  TestVDWSpheres.cxx\n  )\nvtk_test_cxx_executable(vtkDomainsChemistryCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ and Python Tests in VTK Module\nDESCRIPTION: This CMake script conditionally enables C++ and Python tests for a VTK module. It adds the C++ test directory if C++ testing is not disabled and adds Python tests along with necessary test data files if Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/nanowireTB23K298.xyz\n    Data/thio3xx.xyz\n    Data/caffeine.pdb\n    Data/caffeine_notrailingspaces.pdb)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for VTK C++ Tests\nDESCRIPTION: This snippet demonstrates how to create a test executable using 'vtk_test_cxx_executable' in a VTK project. The executable is linked to the previously defined 'vtkdoubleconversionCxxTests'. This requires a CMake setup with VTK modules. The 'tests' target is the main output.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkdoubleconversionCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test for VTK NetCDF Module\nDESCRIPTION: Configures the C++ test for the VTK NetCDF module, including the necessary test cases. It specifies the test executable and links it with required parameters. The provided test cases include handling scenarios with no data, no valid data, and no output.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtknetcdfCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeNetCDF.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Output Directory\nDESCRIPTION: Example of setting the output directory in Doxygen configuration file where documentation will be stored.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_4\n\nLANGUAGE: config\nCODE:\n```\nOUTPUT_DIRECTORY     = ../../../doc\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data for C++ and Python in VTK\nDESCRIPTION: This snippet sets up directories and files for VTK module testing, conditional on available features like C++ testing and Python wrapping. The 'vtk_module_test_data' function is employed to include necessary test data files and directories with regex pattern matches for some directories. Conditional 'add_subdirectory' calls manage the inclusion of subcomponents when specific options are enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/ANALYZE.IMG.GZ\n  Data/ANALYZE.HDR\n  Data/avg152T1_RL_nifti.nii.gz\n  Data/avg152T1_RL_nifti2.nii.gz\n  Data/beach.ascii\n  Data/beach.ascii.nhdr\n  Data/beach.nrrd\n  Data/beach_gzip.nrrd\n  Data/dicom/collection/,REGEX:.*\n  Data/filtered_func_data.nii.gz\n  Data/minimal.hdr.gz\n  Data/minimal.img.gz\n  Data/minimal.nii.gz\n  Data/nifti_rgb.nii.gz\n  Data/planar_rgb.nii.gz\n  Data/small.H\n  Data/small.H@\n  Data/vtk.tga)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/SainteHelens.dem\n    Data/beach.jpg\n    Data/beach.tif\n    Data/foot/foot.mha\n    Data/foot/foot.raw\n    Data/headsq/,REGEX:.*\n    Data/masonry.bmp)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Temporal Module in CMake\nDESCRIPTION: Adds the VTK::FiltersTemporal module using the previously defined classes. This command is part of the VTK build system and incorporates the specified classes into the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersTemporal\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Removed Protected Members in vtkAdaptiveDataSetSurfaceFilter\nDESCRIPTION: List of protected member variables that have been completely removed from the vtkAdaptiveDataSetSurfaceFilter class in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/htg-representation-decimation.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBBSelection\nCircleSelection\nDynamicDecimateLevelMax\nLevelMax\nLastCameraFocalPoint\nLastCameraParallelScale\nParallelProjection\nRadius\nScale\nWindowBounds\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTURNS Version for KernelSmothing Functionality\nDESCRIPTION: Warns users if the OpenTURNS version is less than 1.22 due to incorrect KernelSmothing results in earlier versions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (OpenTURNS_VERSION VERSION_LESS 1.22)\n  message(WARNING \"Using OpenTURNS ${OpenTURNS_VERSION}, \"\n    \"this version provides incorrect KernelSmothing results, consider updating to \"\n    \"OpenTURNS >= 1.22\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test for Connectivity\nDESCRIPTION: This snippet adds an MPI test named `vtkFiltersParallelMPICxxTests-MPI` that runs `TestImplicitConnectivity.cxx`.  It uses the `vtk_add_test_mpi` macro to define the test. The number of processes is then set to 1.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkFiltersParallelMPICxxTests-MPI tests\n  TestImplicitConnectivity.cxx\n  )\n\nset(vtkFiltersParallelMPICxxTests-MPI_NUMPROCS 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Conditional Cxx and Python Subdirectories in CMake\nDESCRIPTION: This snippet conditionally adds subdirectories for Cxx and Python based on whether Cxx testing is enabled and if Python wrapping is enabled, respectively. It is designed to integrate extended functionalities only when specific build configurations are met. There are no additional dependencies outside a properly configured VTK build environment. Inputs include boolean flags for Cxx and Python setup, with outputs being included subdirectory paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK iOS Install Directory\nDESCRIPTION: Shell command for creating installation directory structure for VTK iOS framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd vtkios; mkdir install\n```\n\n----------------------------------------\n\nTITLE: Supporting Non-MPI Builds for ADIOS2 VTX Reader in C++\nDESCRIPTION: This snippet checks if the ADIOS2 VTX reader can be built with or without MPI support, providing flexibility in deployment environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/adios2-vtx-reader-changes.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#ifdef ENABLE_MPI\n    // MPI specific code\n#else\n    // Non-MPI specific code\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring ViewsInfovis Examples\nDESCRIPTION: Sets up multiple VTK example executables (HelloWorld, Theme, CreateTree, MultiView) when ViewsInfovis component is available. Configures target linking and module initialization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Infovis/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::ViewsInfovis)\n  add_executable(HelloWorld\n    HelloWorld.cxx)\n  target_link_libraries(HelloWorld\n    PRIVATE\n      ${VTK_LIBRARIES})\n\n  add_executable(Theme\n    Theme.cxx)\n  target_link_libraries(Theme\n    PRIVATE\n      ${VTK_LIBRARIES})\n\n  add_executable(CreateTree\n    CreateTree.cxx)\n  target_link_libraries(CreateTree\n    PRIVATE\n      ${VTK_LIBRARIES})\n\n  add_executable(MultiView\n    MultiView.cxx)\n  target_link_libraries(MultiView\n    PRIVATE\n      ${VTK_LIBRARIES})\n\n  vtk_module_autoinit(\n    TARGETS HelloWorld\n            Theme\n            CreateTree\n            MultiView\n    MODULES ${VTK_LIBRARIES})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding PiecewiseItem Executable\nDESCRIPTION: This snippet adds the PiecewiseItem executable based on the presence of the ViewsContext2D target. It links the executable to the ChartsCore and ViewsContext2D components, making it possible to render piecewise items in charts.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Charts/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ViewsContext2D)\n  add_executable(PiecewiseItem\n    PiecewiseItem.cxx)\n  target_link_libraries(PiecewiseItem\n    PRIVATE\n      VTK::ChartsCore\n      VTK::ViewsContext2D)\n  vtk_module_autoinit(\n    TARGETS PiecewiseItem\n    MODULES VTK::ChartsCore\n            VTK::ViewsContext2D)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK IOXML\nDESCRIPTION: This snippet adds test mangling for the VTK::IOXML module, which is typically used to ensure unique identification of tests across various CMake builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOXML)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files List in CMake\nDESCRIPTION: The snippet defines a list of header files under the 'headers' variable, including various JSON processing components necessary for the vtknlohmann library integration in a VTK project. These files include serializers, input and output handlers, and utility macros.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  include/vtknlohmann/adl_serializer.hpp\n  include/vtknlohmann/byte_container_with_subtype.hpp\n  include/vtknlohmann/json.hpp\n  include/vtknlohmann/json_fwd.hpp\n  include/vtknlohmann/ordered_map.hpp\n\n  include/vtknlohmann/detail/abi_macros.hpp\n  include/vtknlohmann/detail/conversions/from_json.hpp\n  include/vtknlohmann/detail/conversions/to_chars.hpp\n  include/vtknlohmann/detail/conversions/to_json.hpp\n  include/vtknlohmann/detail/exceptions.hpp\n  include/vtknlohmann/detail/hash.hpp\n  include/vtknlohmann/detail/input/binary_reader.hpp\n  include/vtknlohmann/detail/input/input_adapters.hpp\n  include/vtknlohmann/detail/input/json_sax.hpp\n  include/vtknlohmann/detail/input/lexer.hpp\n  include/vtknlohmann/detail/input/parser.hpp\n  include/vtknlohmann/detail/input/position_t.hpp\n  include/vtknlohmann/detail/iterators/internal_iterator.hpp\n  include/vtknlohmann/detail/iterators/iter_impl.hpp\n  include/vtknlohmann/detail/iterators/iteration_proxy.hpp\n  include/vtknlohmann/detail/iterators/iterator_traits.hpp\n  include/vtknlohmann/detail/iterators/json_reverse_iterator.hpp\n  include/vtknlohmann/detail/iterators/primitive_iterator.hpp\n  include/vtknlohmann/detail/json_custom_base_class.hpp\n  include/vtknlohmann/detail/json_pointer.hpp\n  include/vtknlohmann/detail/json_ref.hpp\n  include/vtknlohmann/detail/macro_scope.hpp\n  include/vtknlohmann/detail/macro_unscope.hpp\n  include/vtknlohmann/detail/meta/call_std/begin.hpp\n  include/vtknlohmann/detail/meta/call_std/end.hpp\n  include/vtknlohmann/detail/meta/cpp_future.hpp\n  include/vtknlohmann/detail/meta/detected.hpp\n  include/vtknlohmann/detail/meta/identity_tag.hpp\n  include/vtknlohmann/detail/meta/is_sax.hpp\n  include/vtknlohmann/detail/meta/std_fs.hpp\n  include/vtknlohmann/detail/meta/type_traits.hpp\n  include/vtknlohmann/detail/meta/void_t.hpp\n  include/vtknlohmann/detail/output/binary_writer.hpp\n  include/vtknlohmann/detail/output/output_adapters.hpp\n  include/vtknlohmann/detail/output/serializer.hpp\n  include/vtknlohmann/detail/string_concat.hpp\n  include/vtknlohmann/detail/string_escape.hpp\n  include/vtknlohmann/detail/value_t.hpp\n\n  include/vtknlohmann/thirdparty/hedley/hedley.hpp\n  include/vtknlohmann/thirdparty/hedley/hedley_undef.hpp)\n\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Test\nDESCRIPTION: This CMake command adds a C++ test to the VTK project. It specifies the test name, disables validation, and lists the source files to be included in the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOTecplotTableCxxTests tests\n  NO_VALID\n  TestTecplotTableReader.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Surface LIC Painter Tests in CMake for VTK\nDESCRIPTION: Appends surface LIC painter tests to the test list. This approach allows for varying arguments to generate unique test names, avoiding the use of vtk_add_test_cxx.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND tests\n  TestSurfaceLIC.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in VTK CMake Configuration\nDESCRIPTION: Adds the C++ subdirectory to the build process, enabling the compilation of C++ code for this VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CityGML/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring OBJ to VTP Converter\nDESCRIPTION: Conditionally sets up the build target for the OBJ to VTP converter when required VTK modules are available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/IO/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::IOExport AND TARGET VTK::IOImport)\n  add_executable(objtovtp\n    objtovtp.cxx)\n  target_link_libraries(objtovtp\n    PRIVATE\n      ${VTK_LIBRARIES}\n      VTK::IOExport\n      VTK::IOImport\n      VTK::RenderingOpenGL2\n      )\n```\n\n----------------------------------------\n\nTITLE: Adding Interface Include Path for VTK scn Module\nDESCRIPTION: Adds an additional interface include path to ensure the module's headers can find each other when included with angle brackets. This is necessary for the install interface.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_include(VTK::scn\n  INTERFACE\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkscn/include>\")\n```\n\n----------------------------------------\n\nTITLE: Project Name and Version Configuration\nDESCRIPTION: Defines the project name as QtQuickCone and sets the project version to 1.0, establishing basic project metadata\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickCone/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MYNAME QtQuickCone)\n\nproject(${MYNAME} VERSION 1.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Case in VTK with CMake\nDESCRIPTION: This snippet configures a test case named 'TestFiberSurface' within the 'vtkFiltersTopologyCxxTests' test suite. It specifies that the test should not validate any output ('NO_VALID') as part of its parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Topology/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersTopologyCxxTests tests\n  TestFiberSurface.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ImagingStencil Module in CMake\nDESCRIPTION: This CMake snippet defines a list of VTK class files for the ImagingStencil module and registers them with the VTK build system. It also adds test mangling capabilities for the module, which supports testing framework integration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Stencil/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkImageStencil\n  vtkImageStencilToImage\n  vtkImageToImageStencil\n  vtkImplicitFunctionToImageStencil\n  vtkLassoStencilSource\n  vtkPolyDataToImageStencil\n  vtkROIStencilSource)\n\nvtk_module_add_module(VTK::ImagingStencil\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingStencil)\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA-specific Test Properties\nDESCRIPTION: Sets CUDA-specific properties and flags for test compilation when CUDA support is enabled, including warning suppression and position-independent code settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  set_source_files_properties(TestConduitSourceDeviceMemory.cxx PROPERTIES LANGUAGE CUDA)\n\n  vtkm_get_cuda_flags(CMAKE_CUDA_FLAGS)\n\n  string(APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -w\")\n\n  set_target_properties(vtkConduitCxxTests PROPERTIES\n    CUDA_ARCHITECTURES OFF\n    POSITION_INDEPENDENT_CODE ON\n    )\nif (TARGET VTK::ParallelMPI)\n  set_target_properties(vtkConduitCxxTests-MPI PROPERTIES\n    CUDA_ARCHITECTURES OFF\n    POSITION_INDEPENDENT_CODE ON\n    )\nendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Header Conversion Script\nDESCRIPTION: Example command to convert VTK headers to Doxygen format using the doc_header2doxygen.pl script.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nperl doc_header2doxygen.pl --to ../../../VTK-doxygen\n```\n\n----------------------------------------\n\nTITLE: Updating SQLite to Different Versions with Fossil\nDESCRIPTION: Commands to update your local SQLite repository to specific versions or timepoints using Fossil version control system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfossil update trunk             ;# latest trunk check-in\nfossil update release           ;# latest official release\nfossil update trunk:2024-01-01  ;# First trunk check-in after 2024-01-01\nfossil update version-3.39.0    ;# Version 3.39.0\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python MPI Test with CMake\nDESCRIPTION: Sets up a Python MPI test for VTK. The configuration defines the Python executable path pointing to pvtkpython and adds TestParallelNumpy.py as a test without validation, data, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/MPI4Py/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(VTK_PYTHON_EXE $<TARGET_FILE:pvtkpython>)\nvtk_add_test_python_mpi(\n  TestParallelNumpy.py,NO_VALID,NO_DATA,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests for MNI/MINC Components\nDESCRIPTION: CMake configuration block that adds Python test files for VTK's Medical imaging components. Includes tests for MNI objects, tag points, transforms, and MINC image reading/writing functionality. Uses vtk_add_test_python macro to register the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MINC/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestMNIObjects.py\n  TestMNITagPoints.py,LOOSE_VALID\n  TestMNITransforms.py\n  TestMINCImageReader.py\n  TestMINCImageWriter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory using CMake in C++ Project\nDESCRIPTION: This CMake command includes the 'Cxx' directory as part of the build process. It assumes the presence of a CMake setup that can find and use the specified subdirectory, typically containing C++ sources and additional CMakeList files. The command itself must be part of a larger CMake configuration file, and it doesn't produce any direct outputs.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingQt Module in CMake\nDESCRIPTION: Adds the VTK RenderingQt module using the previously defined classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Qt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingQt\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Performance Improvements in vtkDataSetSurfaceFilter\nDESCRIPTION: Optimizes vtkDataSetSurfaceFilter for nonlinear cells, enhancing rendering performance in Paraview.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid vtkDataSetSurfaceFilter::Optimize(/* parameters */) {\n    // Implementation for performance improvements\n}\n```\n\n----------------------------------------\n\nTITLE: Including VTK C++ Source Directory\nDESCRIPTION: CMake directive to add the C++ source code subdirectory to the build system. This ensures the C++ components of VTK are included in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests\nDESCRIPTION: Adds Python tests for various VTK components using the vtk_add_test_python function. Some tests are configured with NO_RT and NO_VALID options, indicating they don't require runtime testing or validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestNek5000Reader.py\n  TestPDataSetReaderGrid.py\n  TestPImageWriter.py\n  TestPDataSetReaderWriterWithFieldData.py,NO_RT,NO_VALID)\n```\n\n----------------------------------------\n\nTITLE: Legacy Storage Structure Comparison\nDESCRIPTION: Compares the old interleaved storage method with the new non-interleaved vtkCellArray approach for polyhedral cell representation\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/vtk-polyhedral-cells-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Legacy Storage Structure\n* **Connectivity** (vtkCellArray): point ids for polyhedral elements\n* **(Legacy)Faces** (vtkIdTypeArray): interleaved face information\n* **(Legacy)FaceLocations** (vtkIdTypeArray): offset array for face locations\n```\n\n----------------------------------------\n\nTITLE: Robot Review Trigger\nDESCRIPTION: Command to trigger a re-check by the Kitware Robot reviewer\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nDo: check\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Options in CMake for CGNS\nDESCRIPTION: Sets up HDF5 options, including enabling HDF5 interface, determining static or shared library usage, and finding HDF5 packages. It also handles legacy HDF5 configurations and sets up necessary variables and target libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): Hardcoded settings.\noption(CGNS_ENABLE_HDF5 \"Enable or disable HDF5 interface\" \"ON\")\nelse ()\nset(CGNS_ENABLE_HDF5 ON)\nendif ()\n\nif (FALSE) # XXX(kitware): Adapted for ParaView.\nif (CGNS_ENABLE_HDF5)\n\n  if (CGNS_BUILD_SHARED)\n    set (CG_HDF5_LINK_TYPE \"shared\")\n    set (CG_HDF5_LINK_TYPE_UPPER \"SHARED\")\n  else ()\n    set (CG_HDF5_LINK_TYPE \"static\")\n    set (CG_HDF5_LINK_TYPE_UPPER \"STATIC\")\n    set(HDF5_USE_STATIC_LIBRARIES ON)\n  endif ()\n  set (FIND_HDF_COMPONENTS C ${CG_HDF5_LINK_TYPE})\n  message (STATUS \"HDF5 find comps: ${FIND_HDF_COMPONENTS}\")\n\n  set (SEARCH_PACKAGE_NAME \"hdf5\")\n  \n  # If the first `find_package` below does not succeed, then the legacy `find_package`\n  # is tried (the `else` below).  The legacy find_package uses `HDF5_ROOT`.  But if \n  # this is set, then CMake will issue warning and mistakenly say that `HDF5_ROOT` is\n  # not used even though it might be.  This can confuse user, so set policy to not\n  # issue that warning.\n  if (${CMAKE_VERSION} VERSION_GREATER \"3.13\")\n     cmake_policy(SET CMP0074 NEW)\n  endif()\n\n  find_package (HDF5 NAMES ${SEARCH_PACKAGE_NAME} COMPONENTS ${FIND_HDF_COMPONENTS})\n  message (STATUS \"HDF5 C libs:${HDF5_FOUND} static:${HDF5_static_C_FOUND} and shared:${HDF5_shared_C_FOUND}\")\n  if (HDF5_FOUND)\n    if (NOT HDF5_static_C_FOUND AND NOT HDF5_shared_C_FOUND)\n      if (CG_HDF5_LINK_TYPE STREQUAL \"shared\")\n        set(CG_HDF5_LINK_TYPE \"static\")\n        set(CG_HDF5_LINK_TYPE_UPPER \"STATIC\")\n      else()\n        set(CG_HDF5_LINK_TYPE \"shared\")\n        set(CG_HDF5_LINK_TYPE_UPPER \"SHARED\")\n      endif()\n\n      set (FIND_HDF_COMPONENTS C ${CG_HDF5_LINK_TYPE})\n\n      find_package (HDF5 NAMES ${SEARCH_PACKAGE_NAME} COMPONENTS ${FIND_HDF_COMPONENTS} REQUIRED)\n      message (STATUS \"HDF5 libs:${HDF5_FOUND} C:${HDF5_C_${CG_HDF5_LINK_TYPE_UPPER}_LIBRARY}\")\n    endif()\n \n    set(LINK_LIBS ${HDF5_C_${CG_HDF5_LINK_TYPE_UPPER}_LIBRARY})\n  else ()\n    find_package (HDF5) # Legacy find\n    \n    #Legacy find_package does not set HDF5_TOOLS_DIR, so we set it here\n    set(HDF5_TOOLS_DIR ${HDF5_LIBRARY}/../bin)\n    \n    #Legacy find_package does not set HDF5_BUILD_SHARED_LIBS, so we set it here\n    set(GUESS_SHARED \"${HDF5_LIBRARY}/libhdf5${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n    foreach (ITEM ${HDF5_LIBRARIES})\n      if (ITEM MATCHES \"(.*)hdf5${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n        set(GUESS_SHARED \"${ITEM}\")\n        break()\n      endif()\n    endforeach()\n    if (CGNS_BUILD_SHARED AND EXISTS \"${GUESS_SHARED}\")\n      set (HDF5_BUILD_SHARED_LIBS 1)\n      set (CG_HDF5_LINK_TYPE \"shared\")\n      set (CG_HDF5_LINK_TYPE_UPPER \"SHARED\")\n    else ()\n      set (HDF5_BUILD_SHARED_LIBS 0)\n      set (CG_HDF5_LINK_TYPE \"static\")\n      set (CG_HDF5_LINK_TYPE_UPPER \"STATIC\")\n    endif ()\n    set (LINK_LIBS ${HDF5_LIBRARIES})\n  endif ()\n  set (HDF5_PACKAGE_NAME ${SEARCH_PACKAGE_NAME})\n\n  if (HDF5_FOUND)\n    if (NOT DEFINED HDF5_INCLUDE_DIRS)\n      set (HDF5_INCLUDE_DIRS ${HDF5_INCLUDE_DIR})\n    endif()\n    set (HDF5_HAVE_H5PUBCONF_H 1)\n    set (HDF5_HAVE_HDF5 1)\n    set (HDF5_HDF5_HEADER \"h5pubconf.h\")\n    message (STATUS \"HDF5-${HDF5_VERSION} found: INC=${HDF5_INCLUDE_DIRS} TOOLS=${HDF5_TOOLS_DIR} HDF5_BUILD_SHARED_LIBS=${HDF5_BUILD_SHARED_LIBS}\")\n    set (HDF5_LIBRARY ${LINK_LIBS})\n    message (STATUS \"HDF5 link libs: ${LINK_LIBS}\")\n  else ()\n    message (FATAL_ERROR \" HDF5 was specified but was not found\")\n  endif ()\n\n  set(HDF5_NEED_ZLIB \"OFF\" CACHE BOOL \"Does the HDF5 library require linking to zlib?\")\n  if(HDF5_NEED_ZLIB)\n    find_library(ZLIB_LIBRARY z)\n    mark_as_advanced(CLEAR ZLIB_LIBRARY)\n  else ()\n    mark_as_advanced(FORCE ZLIB_LIBRARY)\n  endif()\n\n  set(HDF5_NEED_SZIP \"OFF\" CACHE BOOL \"Does the HDF5 library require linking to szip?\")\n  if (HDF5_NEED_SZIP)\n    find_library(SZIP_LIBRARY NAMES szip sz)\n    mark_as_advanced(CLEAR SZIP_LIBRARY)\n  else ()\n    mark_as_advanced(FORCE SZIP_LIBRARY)\n  endif ()\n\n  # Check if HDF5 version is 1.8 or greater\n  if (HDF5_VERSION VERSION_LESS \"1.8.0\")\n    message (FATAL_ERROR \"HDF5 ${HDF5_VERSION}: version must be greater than 1.8.0\")\n  endif ()\n\n  set(HDF5_NEED_MPI \"OFF\" CACHE BOOL \"Does the HDF5 library require linking to mpi? (Only true if using parallel HDF5)\")\n  set(MPI_INC)\n  set(MPI_LIBS)\n  if (HDF5_NEED_MPI)\n    if (NOT MPI_FOUND)\n      include(FindMPI)\n    endif ()\n    # MPI variable names changed with cmake 2.8.5\n    if (DEFINED MPI_C_COMPILER)\n      mark_as_advanced(CLEAR MPI_C_COMPILER MPI_C_INCLUDE_PATH MPI_C_LIBRARIES)\n      mark_as_advanced(FORCE MPI_LIBRARY MPI_EXTRA_LIBRARY)\n      set(MPI_INC ${MPI_C_INCLUDE_PATH})\n      set(MPI_LIBS ${MPI_C_LIBRARIES})\n    else ()\n      mark_as_advanced(CLEAR MPI_COMPILER MPI_INCLUDE_PATH MPI_LIBRARY MPI_EXTRA_LIBRARY)\n      set(MPI_INC ${MPI_INCLUDE_PATH})\n      if (MPI_EXTRA_LIBRARY)\n        set(MPI_LIBS ${MPI_LIBRARY} ${MPI_EXTRA_LIBRARY})\n      else ()\n        set(MPI_LIBS ${MPI_LIBRARY})\n      endif ()\n    endif ()\n    mark_as_advanced(CLEAR MPIEXEC)\n  else ()\n    mark_as_advanced(FORCE MPI_C_COMPILER MPI_C_INCLUDE_PATH MPI_C_LIBRARIES)\n    mark_as_advanced(FORCE MPI_COMPILER MPI_INCLUDE_PATH MPI_LIBRARY MPI_EXTRA_LIBRARY MPIEXEC)\n  endif ()\n  mark_as_advanced(CLEAR HDF5_NEED_ZLIB HDF5_NEED_SZIP HDF5_NEED_MPI)\n\n  #Modern Target Library import if not defined\n  if (NOT TARGET hdf5-${CG_HDF5_LINK_TYPE})\n    add_library(hdf5-${CG_HDF5_LINK_TYPE} INTERFACE IMPORTED)\n    string(REPLACE \"-D\" \"\" _hdf5_definitions \"${HDF5_DEFINITIONS}\")\n    set_target_properties(hdf5-${CG_HDF5_LINK_TYPE} PROPERTIES\n                          INTERFACE_LINK_LIBRARIES \"${HDF5_LIBRARY}\"\n                          INTERFACE_INCLUDE_DIRECTORIES \"${HDF5_INCLUDE_DIRS}\"\n                          INTERFACE_COMPILE_DEFINITIONS \"${_hdf5_definitions}\")\n    if (CG_HDF5_LINK_TYPE STREQUAL \"shared\")\n      set_target_properties(hdf5-${CG_HDF5_LINK_TYPE} PROPERTIES\n                            INTERFACE_COMPILE_DEFINITIONS H5_BUILT_AS_DYNAMIC_LIB)\n\n    else()\n      set_target_properties(hdf5-${CG_HDF5_LINK_TYPE} PROPERTIES\n\t\t\t    INTERFACE_COMPILE_DEFINITIONS H5_BUILT_AS_STATIC_LIB)\n    endif()\n  endif ()\nelse ()\n  mark_as_advanced(FORCE HDF5_NEED_ZLIB HDF5_NEED_SZIP HDF5_NEED_MPI)\n  mark_as_advanced(FORCE ZLIB_LIBRARY SZIP_LIBRARY)\n  mark_as_advanced(FORCE MPI_C_COMPILER MPI_C_INCLUDE_PATH MPI_C_LIBRARIES)\n  mark_as_advanced(FORCE MPI_COMPILER MPI_INCLUDE_PATH MPI_LIBRARY MPI_EXTRA_LIBRARY MPIEXEC)\nendif ()\nelse ()\nif (VTK_MODULE_USE_EXTERNAL_VTK_hdf5)\n  # TODO: Implement.\n  set(H5_HAVE_PARALLEL OFF)\nelse ()\n  set(H5_HAVE_PARALLEL OFF)\nendif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Core Visual Tests for VTK Interaction Widgets\nDESCRIPTION: Adds a collection of C++ tests that require visual validation for VTK's interaction widgets. These tests verify the correct visual appearance and behavior of various widget implementations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkInteractionWidgetsCxxTests tests\n  BoxWidget.cxx\n  BoxWidget2.cxx\n  ImagePlaneWidget.cxx\n  ImagePlaneWidgetOriented.cxx\n  TerrainPolylineEditor.cxx\n  TestAffineWidget.cxx\n  TestAngleWidget2D.cxx\n  TestAngleWidget3D.cxx\n  TestBalloonWidget.cxx\n  TestBiDimensionalWidget.cxx,LOOSE_VALID\n  TestBorderWidget.cxx\n  TestBrokenLineWidget.cxx\n  TestCamera3DWidget.cxx\n  TestCameraWidget.cxx\n  TestCaptionWidget.cxx\n  TestCellCentersPointPlacer.cxx\n  TestCenteredSliderWidget2D.cxx\n  TestCheckerboardWidget.cxx\n  TestCoincidentHandleWidgets.cxx\n  TestCompassWidget.cxx\n  TestConstrainedHandleWidget.cxx\n  TestContourWidget2.cxx\n  TestCoordinateFrameWidget.cxx\n  TestDijkstraImageGeodesicPath.cxx\n  TestDisplaySizedImplicitPlaneWidget.cxx\n  TestDistanceWidget.cxx,LOOSE_VALID\n  TestDistanceWidget3D.cxx\n  TestFinitePlaneWidget.cxx\n  TestFixedSizeHandleRepresentation3D.cxx\n  TestFocalPlaneContour.cxx\n  TestHandleWidget.cxx\n  TestHandleWidget2D.cxx\n  TestImageActorContourWidget.cxx\n  TestImplicitAnnulusRadius.cxx\n  TestImplicitAnnulusWidget.cxx\n  TestImplicitConeWidget.cxx\n  TestImplicitCylinderWidget.cxx\n  TestImplicitCylinderWidget2.cxx\n  TestImplicitFrustumWidget.cxx\n  TestImplicitPlaneWidget.cxx\n  TestImplicitPlaneWidget2.cxx\n  TestImplicitPlaneWidget2LockNormalToCamera.cxx\n  TestImplicitPlaneWidget2b.cxx\n  TestImplicitPlaneWidget3.cxx\n  TestLightWidget.cxx\n  TestLogoWidget.cxx\n  TestLogoWidgetAlphaBlending.cxx\n  TestLogoWidgetDepthPeeling.cxx\n  TestLineWidget2b.cxx,NO_VALID\n  TestMeasurementCubeHandleRepresentation3D.cxx\n  TestMultipleViewports.cxx\n  TestOrientationMarkerWidget.cxx\n  TestOrientationMarkerWidget2.cxx\n  TestOrientationMarkerWidgetRepeatedAdd.cxx\n  TestOrientationWidget.cxx\n  TestOrthoPlanes.cxx\n  TestParallelopipedWidget.cxx\n  TestPickingManagerSeedWidget.cxx\n  TestPickingManagerSeedWidget2.cxx\n  TestPlaybackWidget.cxx\n  TestPointHandleRepresentation3D.cxx\n  TestPolylineWidget.cxx\n  TestProgrammaticPlacement.cxx\n  TestProgressBarWidget.cxx\n  TestProp3DButtonRepresentation.cxx,NO_VALID\n  TestRectilinearWipeWidget.cxx\n  TestResliceCursorWidget2.cxx\n  TestResliceCursorWidget3.cxx\n  TestScalarBarWidget.cxx,LOOSE_VALID\n  TestSeedWidget.cxx\n  TestSeedWidget2.cxx\n  TestSeedWidgetNonUniformRepresentations.cxx\n  TestSliderWidget.cxx\n  TestSliderWidget2D.cxx\n  TestSliderWidgetMultipleViewports.cxx\n  TestSphereWidget2CenterCursor.cxx\n  TestSphereWidgetZoomInOut.cxx\n  TestSplineWidget.cxx\n  TestTextWidget.cxx\n  TestTextRepresentationWithBorders.cxx\n  TestTextWidgetBackgroundInteractive.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Including C++ Test Subdirectory in CMake\nDESCRIPTION: Conditionally includes the C++ tests subdirectory if C++ testing is not disabled. This controls whether C++ tests will be built and run.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Tecplot Reader Test Cases with Multiple Input Files in CMake\nDESCRIPTION: Defines a list of Tecplot data files and creates individual test cases for each file using a loop. This approach allows testing the Tecplot reader with various file formats and data structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nLIST(APPEND tecplotFiles\n    3dgeom.dat\n    block_febrick_3d.dat\n    block_fetet_3d.dat\n    channel.dat\n    crystal_plot.dat\n    cube.dat\n    cylinder_3d.dat\n    cylinder_slice.dat\n    cylindrical.dat\n    ell.dat\n    humanoid_quad.dat\n    humanoid_tri.dat\n    movie.dat\n    multzn2d.dat\n    plane_slice.dat\n    point_febrick_3d_01.dat\n    point_febrick_3d_02.dat\n    point_fequad_2d.dat\n    point_fetet_3d.dat\n    point_fetri_2d_01.dat\n    point_fetri_2d_03.dat\n    simp3dbk.dat\n    simp3dpt.dat\n    simpscat.dat\n    simpxy.dat\n    simpxy2.dat\n    tecplot_fepolygon.dat\n    tecplot_fepolyhedron.dat\n    tiny.dat\n    1dgeom.dat\n)\nforeach(item IN LISTS tecplotFiles)\n    get_filename_component(name \"${item}\" NAME_WE)\n\n    vtk_add_test_cxx(vtkIOGeometryCxxTests tests\n      TestTecplotReader2_${name},TestTecplotReader2.cxx ${item} NO_VALID NO_OUTPUT)\n\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Inspecting VTK Class Documentation Using Python help() Function\nDESCRIPTION: This snippet demonstrates how to use the Python help() function to view documentation for a VTK class (vtkSphereSource in this example). It shows the class hierarchy, method descriptions, and other relevant information.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>> import vtk\nhelp(vtk.vtkSphereSource)\n\nHelp on vtkSphereSource object:\n\nclass vtkSphereSource(vtkmodules.vtkCommonExecutionModel.vtkPolyDataAlgorithm)\n |  vtkSphereSource - create a polygonal sphere centered at the origin\n |\n |  Superclass: vtkPolyDataAlgorithm\n |\n |  vtkSphereSource creates a sphere (represented by polygons) of\n |  specified radius centered at the origin. The resolution (polygonal\n |  discretization) in both the latitude (phi) and longitude (theta)\n |  directions can be specified. It also is possible to create partial\n |  spheres by specifying maximum phi and theta angles. By default, the\n |  surface tessellation of the sphere uses triangles; however you can\n |  set LatLongTessellation to produce a tessellation using\n |  quadrilaterals.\n |\n |  @warning\n |  Resolution means the number of latitude or longitude lines for a\n |  complete sphere. If you create partial spheres the number of\n |  latitude/longitude lines may be off by one.\n |\n |  Method resolution order:\n |      vtkSphereSource\n |      vtkmodules.vtkCommonExecutionModel.vtkPolyDataAlgorithm\n |      vtkmodules.vtkCommonExecutionModel.vtkAlgorithm\n |      vtkmodules.vtkCommonCore.vtkObject\n |      vtkmodules.vtkCommonCore.vtkObjectBase\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  GenerateNormalsOff(...)\n |      GenerateNormalsOff(self) -> None\n |      C++: virtual void GenerateNormalsOff()\n |\n |  GenerateNormalsOn(...)\n |      GenerateNormalsOn(self) -> None\n |      C++: virtual void GenerateNormalsOn()\n |\n |  GetCenter(...)\n |      GetCenter(self) -> (float, float, float)\n |      C++: virtual double *GetCenter()\n...\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Test Image Comparison Method\nDESCRIPTION: Configuring test properties to use specific image comparison method via environment variables\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/image-testing-framework.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset_tests_properties(Test1 PROPERTIES ENVIRONMENT \"VTK_TESTING=1;VTK_TESTING_IMAGE_COMPARE_METHOD=LOOSE_VALID\")\n```\n\n----------------------------------------\n\nTITLE: Git Master Branch Update\nDESCRIPTION: Commands to checkout master branch and pull latest changes after topic merge\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/develop.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout master\n$ git pull\n```\n\n----------------------------------------\n\nTITLE: VTK Mobile Build Configuration Tip\nDESCRIPTION: Markdown snippet providing a reference link to complete build instructions for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_for_mobile.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{tip}\nFor complete build instructions see [here](../build_instructions/build.md).\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK::IOMySQL\nDESCRIPTION: This snippet adds test mangling for the VTK::IOMySQL module. Test mangling is used to ensure that the module's API is stable and that symbol names are not accidentally changed. `vtk_add_test_mangling` macro is responsible for adding mangling tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOMySQL)\n```\n\n----------------------------------------\n\nTITLE: Configuring KWSys Namespace and Enabling Components\nDESCRIPTION: This snippet checks if a namespace is provided; if not, it defaults to 'kwsys', enabling testing in standalone mode. The project is named after the namespace, allowing CMake to handle source dependencies effectively. It also activates various components within the library based on mode and source directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT KWSYS_NAMESPACE)\n  set(KWSYS_NAMESPACE \"kwsys\")\n  set(KWSYS_STANDALONE 1)\nendif()\n\nproject(${KWSYS_NAMESPACE})\n\nset_property(DIRECTORY\n  PROPERTY IMPLICIT_DEPENDS_INCLUDE_TRANSFORM\n  \"KWSYS_HEADER(%)=<${KWSYS_NAMESPACE}/%>\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Fides\nDESCRIPTION: Configures the include directories for the Fides target, making the current directory available for private inclusion within the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/predefined/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(fides PRIVATE ${CMAKE_CURRENT_LIST_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Generated Headers with VTK Module\nDESCRIPTION: This code snippet demonstrates the use of `vtk_module_install_headers` to install header files. It ensures that the generated headers from the CMake build process are properly installed for external use.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_lz4.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Tests for VTK Module\nDESCRIPTION: Adds the C++ test subdirectory if C++ testing is not disabled for the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Transforms/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ABI Namespace Warning Check\nDESCRIPTION: Checks and warns about ABI namespace compatibility issues in non-CI environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/PythonCore/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT VTK_ABI_NAMESPACE_NAME STREQUAL \"<DEFAULT>\" AND NOT DEFINED ENV{CI})\n  message(WARNING \"Wrappings::PythonCore ABI does not not support the VTK_ABI_NAMESPACE_NAME \"\n                  \"and the symbols will not be mangled.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Definitions\nDESCRIPTION: Adds compile definitions specifically for shared library builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/vtkgl2ps/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_SHARED_LIBS)\n  target_compile_definitions(gl2ps\n    PRIVATE\n      GL2PSDLL)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Directory Inclusion in CMake\nDESCRIPTION: Checks if VTK_WRAP_PYTHON flag is enabled and includes the Python subdirectory in the build process if true. This controls whether Python bindings are generated for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/PythonInterpreter/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK EnSight Reader Classes\nDESCRIPTION: Defines the public reader classes for various EnSight file formats including binary, gold, and combined readers. These classes handle different variations of EnSight data file formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkEnSight6BinaryReader\n  vtkEnSight6Reader\n  vtkEnSightGoldBinaryReader\n  vtkEnSightGoldCombinedReader\n  vtkEnSightGoldReader\n  vtkEnSightMasterServerReader\n  vtkEnSightReader\n  vtkEnSightSOSGoldReader\n  vtkGenericEnSightReader)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Test Data in CMake\nDESCRIPTION: This snippet configures the VTK module test data by specifying data directories and file patterns that will be used during testing. It employs a function to declare the test data files, including an AMR (Adaptive Mesh Refinement) directory and various binary data files. The regular expression provided is used to include all necessary files from the specified directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/AMR/Enzo/DD0010/,REGEX:.*\n  Data/combq.bin\n  Data/combxyz.bin)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Classes - CMake\nDESCRIPTION: This snippet adds the defined classes to the VTK module 'VTK::IOTecplotTable' using 'vtk_module_add_module' function.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOTecplotTable\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Creating VTK IO Infovis Test Executable\nDESCRIPTION: Creates the test executable for the VTK IO Infovis C++ tests suite using the vtk_test_cxx_executable command.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Infovis/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOInfovisCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Test with Command-line Arguments\nDESCRIPTION: This snippet configures a VTK Python test for TestOutOfRangeDiscretizableColorTransferFunction with specific command-line arguments to use below and above range colors.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestOutOfRangeDiscretizableColorTransferFunction.py --useBelowRangeColor --useAboveRangeColor\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Build Settings File with CMake\nDESCRIPTION: This snippet uses the `configure_file` command to generate a `H5build_settings.c` file from a template. It takes `H5build_settings.cmake.c.in` as input, processes it with CMake variable substitution (`@ONLY`), and outputs the result to `${HDF5_SRC_BINARY_DIR}/H5build_settings.c`.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Generate the H5build_settings.c file\n#-----------------------------------------------------------------------------\nconfigure_file (${HDF5_SOURCE_DIR}/src/H5build_settings.cmake.c.in ${HDF5_SRC_BINARY_DIR}/H5build_settings.c @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Using Transformer with Shared Pointer in CLI11 (C++)\nDESCRIPTION: Demonstrates how to use a Transformer with a shared pointer to allow later modification of the transform map.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nauto p = std::make_shared<CLI::TransformPairs<std::string>>(std::initializer_list<std::pair<std::string,std::string>>({\"key1\", \"map1\"},{\"key2\",\"map2\"})); CLI::Transformer(p)\n```\n\n----------------------------------------\n\nTITLE: Creating NetCDF C++ Test Executable with vtk_test_cxx_executable\nDESCRIPTION: This CMake command creates an executable for the NetCDF C++ tests within the VTK project. It takes the specified tests and compiles them into a runnable executable named `tests`.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIONetCDFCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factory for SLAC Reader\nDESCRIPTION: Declares an object factory for the SLAC reader, specifying the base class and its override.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkSLACReader\n  OVERRIDE  vtkPSLACReader)\n```\n\n----------------------------------------\n\nTITLE: Conditional Appending to OpenVR Test List in CMake\nDESCRIPTION: This snippet conditionally appends additional C++ test files to the `OpenVR_tests` list if the `VTK_OPENVR_TESTING_ENABLE_RUNTIME_TESTS` option is enabled. It includes tests for initialization and rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"if (VTK_OPENVR_TESTING_ENABLE_RUNTIME_TESTS)\n  list (APPEND OpenVR_tests\n    TestOpenVRInitialization.cxx,NO_VALID\n    TestOpenVRRendering.cxx\n    TestOpenVRRenderingVolume.cxx)\nendif ()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Required GL2PS Compile Definitions\nDESCRIPTION: Adds compile definitions for ZLIB and PNG support in GL2PS.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/vtkgl2ps/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(gl2ps\n  PRIVATE\n    HAVE_ZLIB\n    HAVE_PNG)\n```\n\n----------------------------------------\n\nTITLE: Including VTK C++ Source Directory in CMake Build\nDESCRIPTION: Adds the Cxx subdirectory to CMake's build process, which contains VTK's C++ source code components. This is a standard CMake command for incorporating subdirectories into the build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Navigation Toctree\nDESCRIPTION: Sphinx toctree configuration for module-specific documentation, using glob pattern to include all module documentation files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/modules/index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{toctree}\n:titlesonly:\n:glob:\n:hidden:\n:caption: Module-specific documentation\n\n./vtk-modules/**\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters OpenTURNS Scatter Plot Matrix Test\nDESCRIPTION: Adds a specific C++ test for the VTK Filters OpenTURNS module, focusing on the scatter plot matrix for vehicle density.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersOpenTURNSCxxTests tests\n  TestScatterPlotMatrixVehiclesDensity.cxx)\n```\n\n----------------------------------------\n\nTITLE: Using Simple Ternary Conditional Expression in ExprTk\nDESCRIPTION: Demonstrates the simplest form of if-then-else statement in ExprTk where the conditional expression is used within another statement.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_32\n\nLANGUAGE: ExprTk\nCODE:\n```\nx := 3 * if (y < z, y + 1, 2 * z) / 2\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Processes for MPI Tests - CMake\nDESCRIPTION: This snippet sets the number of parallel processes for different tests related to VTK components using CMake. These settings are crucial for configuring the tests to run in a parallelized environment, defining how many instances of the tests will be executed simultaneously.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TestPLagrangianParticleTracker_NUMPROCS 2)\nset(TestPStream_NUMPROCS 2)\nset(TestPStreamGeometry_NUMPROCS 4)\nset(TestPParticleTracers_NUMPROCS 2)\nset(TestPStreamAMR_NUMPROCS 4)\n```\n\n----------------------------------------\n\nTITLE: VTK Module Library Configuration\nDESCRIPTION: Configures the Fides library build with VTK module system, including CUDA support and target properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::fides\n  SOURCES ${srcs}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkfides/fides\")\nvtkm_add_target_information(fides\n    DROP_UNUSED_SYMBOLS\n    MODIFY_CUDA_FLAGS\n    DEVICE_SOURCES ${srcs})\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters HyperTree Module and Test Mangling in CMake\nDESCRIPTION: Adds the VTK::FiltersHyperTree module with the specified headers, classes, and private classes. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersHyperTree\n  HEADERS ${headers}\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes})\nvtk_add_test_mangling(VTK::FiltersHyperTree)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Source Files\nDESCRIPTION: Define comprehensive list of source files from various NetCDF library components including dispatch, lib, HDF5 integration\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  libdispatch/datt.c\n  libdispatch/dattget.c\n  ...\n  libhdf5/hdf5var.c\n  libhdf5/nc4mem.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Tensor C++ Tests\nDESCRIPTION: This snippet adds C++ tests for the VTK Filters Tensor module. It specifies two test files: TestTensorPrincipalInvariants.cxx and TestYieldCriteria.cxx, both with the NO_VALID flag.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Tensor/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersTensorCxxTests tests\n  TestTensorPrincipalInvariants.cxx,NO_VALID\n  TestYieldCriteria.cxx,NO_VALID)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable in VTK\nDESCRIPTION: This snippet sets up a C++ test executable for the VTK IO Alembic tests. It creates a test named 'vtkIOAlembicCxxTests' with specific options, including the disabling of floating point exceptions and a rendering factory. This ensures the test executes under controlled conditions for accurate validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOAlembicCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingExternal Module in CMake\nDESCRIPTION: Adds the VTK RenderingExternal module to the project, specifying the classes to include and excluding header tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/External/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingExternal\n  CLASSES ${classes}\n  EXCLUDE_HEADER_TEST)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Test Configuration Header\nDESCRIPTION: Generates a header file for PostgreSQL testing configuration based on current source and binary directories\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/vtkIOPostgresSQLTestingCxxConfigure.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/vtkIOPostgresSQLTestingCxxConfigure.h)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK ExodusII Headers\nDESCRIPTION: Sets up the installation of the ExodusII header files for VTK. The commented line would install the generated header file from the binary directory, while the active line installs the static header file from the source directory. This ensures the header files are properly available to downstream projects using VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n#  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_exodusII.h\")\n  FILES \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_exodusII.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK IOChemistry Module in CMake\nDESCRIPTION: Adds test mangling configuration for the VTK IOChemistry module, which helps with proper name handling in test environments.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Chemistry/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOChemistry)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO FDS C++ Tests\nDESCRIPTION: Defines C++ test cases for the VTK IO FDS module. Configures three test files (TestFDSReader.cxx, TestFDSReader2.cxx, and TestFDSReader3.cxx) with NO_VALID and NO_OUTPUT options.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FDS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOFDSCxxTests tests\n  TestFDSReader.cxx,NO_VALID,NO_OUTPUT\n  TestFDSReader2.cxx,NO_VALID,NO_OUTPUT\n  TestFDSReader3.cxx,NO_VALID,NO_OUTPUT\n  )\n```\n\n----------------------------------------\n\nTITLE: Scons Installation Command\nDESCRIPTION: Command to install the double-conversion library using scons build system, with optional DESTDIR configuration\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/vtkdoubleconversion/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscons install\n```\n\nLANGUAGE: bash\nCODE:\n```\nscons DESTDIR=alternative_directory install\n```\n\n----------------------------------------\n\nTITLE: Setting Fortran Name Mangling Options in CMake\nDESCRIPTION: Sets default Fortran name mangling options for HDF5. These settings are overridden by Fortran detection in the fortran directory if Fortran support is enabled. VTK explicitly disables Fortran support with the FALSE condition.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nset (H5_FC_FUNC  \"H5_FC_FUNC(name,NAME) name ## _\")\nset (H5_FC_FUNC_ \"H5_FC_FUNC_(name,NAME) name ## _\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GL2PS Header Files in CMake\nDESCRIPTION: Generates the vtk_gl2ps.h header file from a template and installs it with the VTK module headers. This ensures the GL2PS functionality is properly exposed to other VTK components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_gl2ps.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_gl2ps.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_gl2ps.h\")\n```\n\n----------------------------------------\n\nTITLE: Set minimum CMake version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project. The FATAL_ERROR option ensures that CMake will stop processing if the version is not met.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Including Binary Directory\nDESCRIPTION: This CMake command adds the current binary directory to the include directories. This is necessary for the generated header file (vtkIOMySQLTestingCxxConfigure.h) to be found during compilation of the tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Making Update Script Executable on Unix\nDESCRIPTION: This command makes the `update.sh` script executable and adds it to the Git index. It is necessary to ensure that the script can be run during the update process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/UPDATING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n  $ chmod u+x update.sh && git add -u update.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Test for ThreadedWriter\nDESCRIPTION: CMake configuration snippet that adds a Python test case named TestThreadedWriter.py with the NO_VALID flag, indicating that test validation will be skipped.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Asynchronous/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  TestThreadedWriter.py,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a List of All Tests\nDESCRIPTION: This snippet creates a list named `all_tests` by concatenating several predefined test lists: `${tests}`, `${test_4_procs}`, `${test_1_procs}`, `${test_2_procs}`, and `${test_5_procs}`.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_tests\n  ${tests}\n  ${test_4_procs}\n  ${test_1_procs}\n  ${test_2_procs}\n  ${test_5_procs}\n  )\n```\n\n----------------------------------------\n\nTITLE: Testing Installation using CMake\nDESCRIPTION: This snippet checks if the CMAKE_INSTALL_PREFIX is equal to the specified installation directory. If it is, a test is added using the add_test command which runs a CMake command to configure the installation setup. The configuration is passed as a parameter to the command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Install/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Test \"make install\"\nif (CMAKE_INSTALL_PREFIX STREQUAL \"${VTK_BINARY_DIR}/InstallTest\")\n  add_test(\n    NAME    Install\n    COMMAND \"${CMAKE_COMMAND}\"\n            -DCONFIGURATION=$<CONFIGURATION>\n            \"-DVTK_BINARY_DIR=${VTK_BINARY_DIR}\"\n            -P \"${CMAKE_CURRENT_SOURCE_DIR}/InstallTest.cmake\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Include Subdirectory in CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` function to include the `Cxx` subdirectory in the CMake build process. This allows the CMakeLists.txt file in the `Cxx` directory to be processed as part of the overall build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Topology/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(Cxx)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Geometry Preview C++ Tests in CMake\nDESCRIPTION: Adds C++ tests for the VTK Filters Geometry Preview module and creates a test executable. The tests include functionality for Octree-based image processing and point set operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/GeometryPreview/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersGeometryPreviewCxxTests tests\n  TestOctreeImageToPointSetFilter.cxx\n  TestPointSetToOctreeImageFilter.cxx\n  TestPointSetStreamer.cxx\n  )\n\nvtk_test_cxx_executable(vtkFiltersGeometryPreviewCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests with CMake\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` CMake macro to define a test suite. It specifies the test name (`vtkFiltersVerdictCxxTests`) and lists the C++ source files that comprise the test. The `NO_VALID` keyword suggests that there are currently no validation files associated with these tests. The macro likely compiles the source files and links them into an executable for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersVerdictCxxTests tests\n  NO_VALID\n  CellSizeFilter.cxx\n  CellSizeFilter2.cxx\n  MeshQuality.cxx\n  TestCellQuality.cxx\n  TestBoundaryMeshQuality.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK::IOPDAL\nDESCRIPTION: Adds test mangling for the VTK::IOPDAL module, which is likely used for test configuration or naming conventions.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOPDAL)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Directory\nDESCRIPTION: Loads test data from the Data/SegY/ directory using regex pattern matching for file selection\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/SegY/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties (Timeout and Serial Execution)\nDESCRIPTION: This snippet sets the properties for the `TestPDBBallAndStickShadows` test, including a timeout value using the `VTK_TEST_TIMEOUT_TestPDBBallAndStickShadows` variable and enabling serial execution using `RUN_SERIAL ON`. This is to ensure the test has enough time to complete and avoid parallel execution issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ChemistryOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# On some machines this test takes 260ish seconds to complete, this allows for\n# some extra time\nif(NOT VTK_TEST_TIMEOUT_TestPDBBallAndStickShadows)\n  set(VTK_TEST_TIMEOUT_TestPDBBallAndStickShadows 400)\nendif()\nset_tests_properties(VTK::DomainsChemistryOpenGL2Cxx-TestPDBBallAndStickShadows\n    PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestPDBBallAndStickShadows}\n               RUN_SERIAL ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Directory Setup in CMake\nDESCRIPTION: Sets up the directory structure for generated headers and includes the header root directory in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT KWSYS_HEADER_ROOT)\n  set(KWSYS_HEADER_ROOT \"${PROJECT_BINARY_DIR}\")\nendif()\nset(KWSYS_HEADER_DIR \"${KWSYS_HEADER_ROOT}/${KWSYS_NAMESPACE}\")\ninclude_directories(${KWSYS_HEADER_ROOT})\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOOggTheora Module\nDESCRIPTION: This CMake snippet adds the VTK::IOOggTheora module using the `vtk_module_add_module` function, including the classes defined previously. It defines the core components of the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOOggTheora\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Compilation\nDESCRIPTION: CMake script that registers test data files and conditionally adds C++ and Python test subdirectories based on build configuration flags. Handles test data registration and conditional compilation setup for VTK module testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/SainteHelens.dem\n  Data/vtk.png\n  Data/vehicle_data.csv)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific Compiler Definitions in CMake for HDF5\nDESCRIPTION: This snippet adds Windows-specific compiler definitions for HDF5, including _CRT_SECURE_NO_WARNINGS and _CONSOLE for MSVC builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n  add_compile_definitions (_CRT_SECURE_NO_WARNINGS)\n  if (MSVC)\n    if (TRUE) # XXX(kitware): this is not what we want for VTK.\n      add_compile_definitions (_CRT_SECURE_NO_WARNINGS _CONSOLE)\n    else ()\n      add_compile_definitions (_BIND_TO_CURRENT_VCLIBS_VERSION=1 _CONSOLE)\n    endif ()\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Options for All Future Options\nDESCRIPTION: Demonstrates how to set default options that will apply to all future options added to the CLI application.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\napp.option_defaults()->required();\n// All future options will be required\n```\n\n----------------------------------------\n\nTITLE: Error Section Definitions\nDESCRIPTION: Defines sections used for grouping related minor errors. These sections help organize errors by functional area or type of operation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/H5err.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSECTION, ARGS, Argument errors\nSECTION, RESOURCE, Resource errors\nSECTION, FILEACC, File accessibility errors\n# ... additional sections\n```\n\n----------------------------------------\n\nTITLE: Registering Test Data in CMake\nDESCRIPTION: Registers the convexPointSet.vtu file as test data for VTK module tests using the vtk_module_test_data CMake function.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/convexPointSet.vtu)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Test Data in VTK Module\nDESCRIPTION: Specifies additional test data files required specifically for Python tests in VTK. This is only included when Python wrapping is enabled, demonstrating the modular design of VTK's testing infrastructure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/3GQP.pdb\n    Data/AMR/Enzo/DD0010/,REGEX:.*\n    Data/B.pgm\n    Data/RectGrid2.vtk\n    Data/Viewpoint/cow.g\n    Data/Viewpoint/cow.obj\n    Data/beach.tif\n    Data/blow.vtk\n    Data/combq.bin\n    Data/combxyz.bin\n    Data/cth.vtr\n    Data/cuttertest.vtu\n    Data/disk_out_ref.ex2\n    Data/financial.txt\n    Data/financial.vtk\n    Data/fran_cut.png\n    Data/fran_cut.vtk\n    Data/fullhead15.png\n    Data/headsq/,REGEX:.*\n    Data/masonry.bmp\n    Data/plate.vtk\n    Data/polyEx.vtk\n    Data/quadTetEdgeTest.vtk\n    Data/teapot.g\n    Data/tensors.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring HDR XYZ Format Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK HDR reader using XYZ format with a gradient sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestHDRReaderXYZ,TestHDRReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/gradient_xyz.hdr}\")\n```\n\n----------------------------------------\n\nTITLE: Define Project Name\nDESCRIPTION: Defines the project name as 'VolumeRender'. This name is used throughout the CMake configuration to refer to the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(VolumeRender)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Addition\nDESCRIPTION: Conditionally adds the C++ test directory if C++ testing is not disabled in the VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Common Archive Classes in CMake\nDESCRIPTION: Sets up a list of classes for the VTK Common Archive module. These classes are vtkBufferedArchiver and vtkPartitionedArchiver.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBufferedArchiver\n  vtkPartitionedArchiver)\n```\n\n----------------------------------------\n\nTITLE: Globbing Gridshift Files in CMake\nDESCRIPTION: Uses file globbing to collect gridshift files (.gsb and .gtx) and schema files (.json) for the PROJ project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/data/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB GSB_FILES  *.gsb)\nfile(GLOB GTX_FILES  *.gtx)\nset(GRIDSHIFT_FILES ${GSB_FILES} ${GTX_FILES})\n\nfile(GLOB SCHEMA_FILES *.json)\n```\n\n----------------------------------------\n\nTITLE: Copying HTML File\nDESCRIPTION: Adds a custom command to copy the HTML file to the build directory after the build process. Ensures that the HTML file is always up-to-date in the build output directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_custom_command(\\n  TARGET WrappedAsyncClipper\\n  POST_BUILD\\n  COMMAND\\n    ${CMAKE_COMMAND} -E copy_if_different\\n      \\\"${CMAKE_CURRENT_SOURCE_DIR}/index.html\\\"\\n      $<TARGET_FILE_DIR:WrappedAsyncClipper>\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Loguru Header File\nDESCRIPTION: This snippet uses the configure_file command to generate the vtk_loguru.h file from vtk_loguru.h.in during the build process in the current binary directory. It is a necessary step for preparing the build environment to include necessary configurations specific to the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_loguru.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_loguru.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test Mangling\nDESCRIPTION: This snippet adds test mangling for the VTK::ImagingCore module using the `vtk_add_test_mangling` CMake function. This is likely used to ensure that the module's symbols are properly exported and linked during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::ImagingCore)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK Filter Reduction Strategies\nDESCRIPTION: This snippet defines a set of classes used for filter reduction strategies within the VTK framework. These classes will be grouped into a variable and later used in module registration. The snippet is critical for organizing and managing multiple filter strategies for better modularity.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkToAffineArrayStrategy\n  vtkToConstantArrayStrategy\n  vtkToImplicitArrayFilter\n  vtkToImplicitRamerDouglasPeuckerStrategy\n  vtkToImplicitStrategy\n  vtkToImplicitTypeErasureStrategy\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in VTK Project\nDESCRIPTION: Unconditionally adds the Cxx subdirectory to the build configuration, ensuring C++ implementation is always included\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FreeType Font Config C++ Tests in CMake\nDESCRIPTION: This snippet adds C++ tests for the VTK FreeType Font Config module. It specifies the test file 'TestSystemFontRendering.cxx' to be included in the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingFreeTypeFontConfigCxxTests tests\n  TestSystemFontRendering.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectory in CMake\nDESCRIPTION: This CMake snippet configures a VTK module by specifying test data and adding a C++ subdirectory. It uses the vtk_module_test_data function to include a CSV file for testing, and then adds a Cxx subdirectory to the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/vehicle_data.csv)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Complex If-Else-If Chain in ExprTk\nDESCRIPTION: A more complex example of if-else-if chaining with both single-line and block-style statements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_40\n\nLANGUAGE: ExprTk\nCODE:\n```\nif (2 * x < max(y,3))\n{\n   y := z + x;\n   z := x + 3;\n}\nelse if (2y - z)\n   y := x - z;\n```\n\n----------------------------------------\n\nTITLE: Configuring NVTX Instrumentation Option in VTK ANARI Module\nDESCRIPTION: Defines a CMake option to enable NVTX instrumentation for performance profiling, which is disabled by default and marked as advanced.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(VTK_ANARI_ENABLE_NVTX \"Enable NVTX instrumentation\" OFF)\nmark_as_advanced(VTK_ANARI_ENABLE_NVTX)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test in VTK Framework\nDESCRIPTION: Configures a Python test for VTK using the vtk_add_test_python macro, which registers a specific test script for execution\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestSMPContourGridWithSpanSpace.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Template Files\nDESCRIPTION: Lists template implementation files to be included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(templates\n  vtkFFT.txx)\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Wrapped Classes for VTK Module in CMake\nDESCRIPTION: This snippet defines a list of classes that should not be wrapped, specifically vtkDIYKdTreeUtilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(nowrap_classes\n  vtkDIYKdTreeUtilities)\n```\n\n----------------------------------------\n\nTITLE: ExprTk Continue Statement Implementation\nDESCRIPTION: Example of a continue statement in ExprTk which skips the remaining portion of the nearest enclosing loop body and proceeds to the next iteration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_12\n\nLANGUAGE: ExprTk\nCODE:\n```\nfor (var i := 0; i < 10; i += 1)\n{\n   if (i < 5)\n      continue;\n   j -= i + 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing C# Source Files for XDMF Wrapper\nDESCRIPTION: Defines a list of C# source files that are used for SWIG-generated wrappers, providing C# bindings for the XDMF library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CSHARP_SOURCES\n  SWIGTYPE_p_double.cs\n  SWIGTYPE_p_float.cs\n  SWIGTYPE_p_hid_t.cs\n  SWIGTYPE_p_int.cs\n  SWIGTYPE_p_istream.cs\n  SWIGTYPE_p_long_long.cs\n  SWIGTYPE_p_ostream.cs\n  SWIGTYPE_p_p__xmlDoc.cs\n  SWIGTYPE_p_void.cs\n  SWIGTYPE_p__xmlNode.cs\n  XdmfArray.cs\n  XdmfArrayList.cs\n  XdmfAttribute.cs\n  XdmfCSharp.cs\n  XdmfCSharpPINVOKE.cs\n  XdmfDataDesc.cs\n  XdmfDataItem.cs\n  XdmfDataStructure.cs\n  XdmfDomain.cs\n  XdmfDOM.cs\n  XdmfDsmComm.cs\n  XdmfDsmCommMpi.cs\n  XdmfDsm.cs\n  XdmfElement.cs\n  XdmfGeometry.cs\n  XdmfGrid.cs\n  XdmfHDF.cs\n  XdmfHeavyData.cs\n  XdmfInformation.cs\n  XdmfLightData.cs\n  XdmfMap.cs\n  XdmfObject.cs\n  XdmfRegion.cs\n  XdmfRoot.cs\n  XdmfSet.cs\n  XdmfTime.cs\n  XdmfTopology.cs\n  XdmfValues.cs\n  XdmfValuesHDF.cs\n  XdmfValuesXML.cs\n  XdmfDsmBuffer.cs\n  XdmfDsmMsg.cs\n  XdmfOpenCallback.cs\n  XdmfCloseCallback.cs\n  XdmfReadCallback.cs\n  XdmfWriteCallback.cs\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGL Mesa Compile Flags\nDESCRIPTION: Sets special compile flags for TestEdgeFlags.cxx test file when using OpenGL Mesa.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  TestEdgeFlags.cxx # fails on OpenGL Mesa\n  PROPERTIES COMPILE_FLAGS -DVTK_OPENGL2)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Common Archive CXX Tests in CMake\nDESCRIPTION: Adds C++ tests for the VTK Common Archive module. It specifies two test files and sets them to run without data or validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonArchiveCxxTests tests\n  TestBufferedRenderWindowExporter.cxx,NO_DATA,NO_VALID\n  TestPartitionedRenderWindowExporter.cxx,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Including vtkMyDocumentation module\nDESCRIPTION: Includes a custom CMake module named `vtkMyDocumentation`. This module likely contains specific configurations and settings related to generating documentation for the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Utilities/Doxygen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(vtkMyDocumentation)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Parallel NetCDF CXX Tests in CMake\nDESCRIPTION: Sets up a test executable for VTK IO Parallel NetCDF CXX tests. It adds a single test file 'TestPNetCDFPOPReader.cxx' to the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOParallelNetCDFCxxTests tests\n  TestPNetCDFPOPReader.cxx\n  )\nvtk_test_cxx_executable(vtkIOParallelNetCDFCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Visibility to Hidden in CMake for PROJ\nDESCRIPTION: Sets the global visibility to hidden for both C and C++ compilers in the PROJ project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Tests for VTK Module\nDESCRIPTION: This snippet checks if Python wrapping is enabled for VTK, adds test data, and includes the 'Python' subdirectory for testing. It ensures Python tests are only built when Python support is configured.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/remote_events.json)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::IOCatalystConduit Module with Sources and Headers\nDESCRIPTION: Adds the module to the VTK build system with specified classes, private classes, sources, and private headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOCatalystConduit\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes}\n  SOURCES vtkConduitArrayUtilitiesInternals.cxx\n  PRIVATE_HEADERS vtkConduitArrayUtilitiesInternals.h)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build System\nDESCRIPTION: CMake directive to include the Cxx subdirectory in the build process. This ensures that all C++ source files within that directory are compiled as part of the VTK build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Support for External HDF5\nDESCRIPTION: Handles MPI configuration for external HDF5 builds. Checks for MPI support requirements and sets up appropriate linking when using parallel HDF5.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtkhdf5_is_parallel 0)\nif (VTK_MODULE_USE_EXTERNAL_vtkhdf5 AND HDF5_IS_PARALLEL)\n  if (NOT TARGET VTK::mpi)\n    message(FATAL_ERROR\n      \"An external MPI-aware HDF5 requires that VTK be built with MPI support \"\n      \"as well.\")\n  endif ()\n\n  set(vtkhdf5_is_parallel 1)\n  vtk_module_link(VTK::hdf5\n    INTERFACE\n      VTK::mpi)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Files in CMake\nDESCRIPTION: Copies configuration files, projection dictionaries, and gridshift files to the build directory if the source and build directories are different.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/data/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT \"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_BINARY_DIR}\")\n  foreach(FILE ${CONFIG_FILES} ${PROJ_DICTIONARY} ${GRIDSHIFT_FILES})\n    configure_file(${FILE} ${FILE} COPYONLY)\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Verdict C++ Tests with CMake\nDESCRIPTION: Sets up C++ tests for the VTK verdict module. The configuration specifies a test with no data, validation, or output requirements, focusing on including the verdict library. The test executable is then defined using the test source.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkverdictCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeVerdict.cxx)\nvtk_test_cxx_executable(vtkverdictCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding and Including VTK Module with Headers\nDESCRIPTION: This snippet uses 'vtk_module_add_module' to define a VTK module named VTK::nlohmannjson as a header-only module with the specified header files. 'vtk_module_include' ensures the headers are appropriately included both at build-time and install-time.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::nlohmannjson\n  HEADER_ONLY HEADER_DIRECTORIES\n  HEADERS ${headers}\n  HEADERS_SUBDIR vtknlohmannjson)\nvtk_module_include(VTK::nlohmannjson\n  INTERFACE\n    # Required because the files are included via `<nlohmannjson/…>` names.\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtknlohmannjson/include>\")\n\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Executable for vtkKissFFT Tests Using CMake\nDESCRIPTION: This snippet creates a C++ executable for the vtkKissFFT test cases using the vtk_test_cxx_executable command. This command ensures that the tests can be built and executed independently. This executable is essential for running the tests defined in the previous snippet.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkkissfftCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Up SharedForward Test and CTest Custom Configuration\nDESCRIPTION: Configures the SharedForward test and sets up CTest custom configuration. Also handles test properties for expected failures and suppressing known bogus failures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\n# Test SharedForward\nconfigure_file(${PROJECT_SOURCE_DIR}/testSharedForward.c.in\n               ${PROJECT_BINARY_DIR}/testSharedForward.c @ONLY IMMEDIATE)\nadd_executable(${KWSYS_NAMESPACE}TestSharedForward\n               ${PROJECT_BINARY_DIR}/testSharedForward.c)\nset_property(TARGET ${KWSYS_NAMESPACE}TestSharedForward PROPERTY LABELS ${KWSYS_LABELS_EXE})\nadd_dependencies(${KWSYS_NAMESPACE}TestSharedForward ${KWSYS_TARGET_C_LINK})\nadd_test(kwsys.testSharedForward ${EXEC_DIR}/${KWSYS_NAMESPACE}TestSharedForward 1)\nset_property(TEST kwsys.testSharedForward PROPERTY LABELS ${KWSYS_LABELS_TEST})\n\n# Configure some test properties.\nif(KWSYS_STANDALONE)\n  # We expect test to fail\n  set_tests_properties(kwsys.testFail PROPERTIES WILL_FAIL ON)\n  get_test_property(kwsys.testFail WILL_FAIL wfv)\n  set_tests_properties(kwsys.testFail PROPERTIES MEASUREMENT \"Some Key=Some Value\")\n  message(STATUS \"GET_TEST_PROPERTY returned: ${wfv}\")\nendif()\n\n# Set up ctest custom configuration file.\nconfigure_file(${PROJECT_SOURCE_DIR}/CTestCustom.cmake.in\n               ${PROJECT_BINARY_DIR}/CTestCustom.cmake @ONLY)\n\n# Suppress known consistent failures on buggy systems.\nif(KWSYS_TEST_BOGUS_FAILURES)\n  set_tests_properties(${KWSYS_TEST_BOGUS_FAILURES} PROPERTIES WILL_FAIL ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Establishes the minimum required CMake version for the project, ensuring compatibility with modern CMake features\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickBoxWidget/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: The snippet adds a subdirectory 'Cxx' into the CMake build process, allowing it to be included and compiled as part of the project. Ensure CMake is installed and the directory structure is correctly set up for dependency resolution.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Windows API Name Mangling Function Declarations\nDESCRIPTION: Function declarations showing the unmangled and mangled versions of GetClassName method for Windows API compatibility. These declarations allow the method to work correctly whether or not windows.h is included or UNICODE is defined.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.WindowsMangling.txt#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n# undef GetClassNameA\n  const char* GetClassNameA() const;\n  const char* GetClassNameW() const;\n```\n\n----------------------------------------\n\nTITLE: Unit Test Command Line Arguments in CMake\nDESCRIPTION: Demonstrates the standard command line format for VTK WASM unit tests, specifying the Python runner, engine path, test file, and test arguments\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/WebAssembly/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"python\" \"Testing\\/WebAssembly\\/runner.py\" --engine=\"\\/path\\/to\\/engine\" \"\\/path\\/to\\/vtkModuleNameCxxTests.js_file\" \"TestName\" \"arg1\" \"arg2\" ... \"argn\"\n```\n\n----------------------------------------\n\nTITLE: Generating 3D Data with ADIOS2 in C++\nDESCRIPTION: This snippet illustrates the creation of a 3D dataset utilizing the ADIOS2 library. It is generated with 2 processes as per the specifications in Nobert's git repository.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Data/ADIOS2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// 3D_7-point_24-step\n// Generated by adiosvm/Tutorial/gray-scott with 2 processes(Nobert's git repo)\n```\n\n----------------------------------------\n\nTITLE: Finding OpenXRRemoting Package\nDESCRIPTION: This snippet uses the `vtk_module_find_package` CMake function to locate the OpenXRRemoting package. It's a necessary step to ensure that the module can link against the OpenXRRemoting library.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_package(PACKAGE OpenXRRemoting)\n```\n\n----------------------------------------\n\nTITLE: Installing PROJ Data Files in CMake\nDESCRIPTION: Sets up the installation of all data files, including configuration files, projection dictionaries, gridshift files, database, and schema files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/data/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_DATA_FILE\n  ${CONFIG_FILES}\n  ${PROJ_DICTIONARY}\n  ${GRIDSHIFT_FILES}\n  ${PROJ_DB}\n  ${SCHEMA_FILES}\n)\ninstall(\n  FILES ${ALL_DATA_FILE}\n  DESTINATION ${DATADIR}\n  COMPONENT \"libproj-data\"\n)\n```\n\n----------------------------------------\n\nTITLE: Emscripten Conditional Check\nDESCRIPTION: Checks if the project is being built with Emscripten. If not, it skips the example and displays a message, ensuring the build proceeds only in an Emscripten environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"if (NOT EMSCRIPTEN)\\n  message(\\\"Skipping example: This needs to run inside an Emscripten build environment\\\")\\n  return ()\\nendif ()\"\n```\n\n----------------------------------------\n\nTITLE: Adding KISS FFT Module to VTK\nDESCRIPTION: This snippet adds the KISS FFT module to the VTK using the provided sources and headers. It organizes the module structure, ensuring headers are included in subdirectories correctly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::kissfft\\n  SOURCES ${sources}\\n  HEADERS ${headers}\\n  HEADER_DIRECTORIES\\n  HEADERS_SUBDIR \"vtkkissfft\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CommonColor Module in CMake\nDESCRIPTION: This snippet defines the classes for the VTK CommonColor module, adds the module to the project, and sets up test mangling. It includes two classes: vtkColorSeries and vtkNamedColors.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Color/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkColorSeries\n  vtkNamedColors)\n\nvtk_module_add_module(VTK::CommonColor\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::CommonColor)\n```\n\n----------------------------------------\n\nTITLE: Finding Ant Build Tool\nDESCRIPTION: Checks for the presence of the Ant build tool and raises an error if not found\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(ANT_EXECUTABLE\n  NAMES ant\n  DOC   \"The ant build tool\")\nif(NOT ANT_EXECUTABLE)\n  message(FATAL_ERROR \"Can not find ant build tool: ant\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests for AMR Functionality in CMake\nDESCRIPTION: CMake snippet that adds three Python tests for VTK's AMR (Adaptive Mesh Refinement) functionality. The tests include TestAMRExtractLevel.py and TestAMRResampleFilter.py (both marked with NO_VALID to indicate they don't require image validation) and TestAMRSliceFilter.py which does require validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/AMR/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestAMRExtractLevel.py,NO_VALID\n  TestAMRResampleFilter.py,NO_VALID\n  TestAMRSliceFilter.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Timeouts for VTK Widget Tests\nDESCRIPTION: Sets custom timeout values for specific VTK interaction widget tests that require longer execution times. This accommodates tests like TerrainPolylineEditor, TestPickingManagerSeedWidget, TestSphereHandleWidget, and TestOrthoPlanes which have higher computational requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Allow local customization of timeout for this test.\nif(NOT VTK_TEST_TIMEOUT_TerrainPolylineEditor)\n  set(VTK_TEST_TIMEOUT_TerrainPolylineEditor 350)\nendif()\nset_tests_properties(VTK::InteractionWidgetsCxx-TerrainPolylineEditor\n  PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TerrainPolylineEditor})\n\n# Allow local customization of timeout for this test.\nif(NOT VTK_TEST_TIMEOUT_TestPickingManagerSeedWidget)\n  set(VTK_TEST_TIMEOUT_TestPickingManagerSeedWidget 400)\nendif()\nset_tests_properties(VTK::InteractionWidgetsCxx-TestPickingManagerSeedWidget\n  PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestPickingManagerSeedWidget})\n\n# On some machines this test takes ~220 seconds to complete, allow for some\n# extra time\nif(NOT VTK_TEST_TIMEOUT_TestSphereHandleWidget)\n  set(VTK_TEST_TIMEOUT_TestSphereHandleWidget 300)\nendif()\nset_tests_properties(VTK::InteractionWidgetsCxx-TestSphereHandleWidget\n    PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestSphereHandleWidget}\n               RUN_SERIAL ON)\n\n# TestOrthoPlanes can take a long time\nif(NOT VTK_TEST_TIMEOUT_TestOrthoPlanes)\n  set(VTK_TEST_TIMEOUT_TestOrthoPlanes 300)\nendif()\nset_tests_properties(VTK::InteractionWidgetsCxx-TestOrthoPlanes\n    PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestOrthoPlanes}\n               RUN_SERIAL ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExodusII C++ Tests in VTK\nDESCRIPTION: This snippet configures C++ tests for the VTK ExodusII module. It adds a test named 'TestIncludeExodusII.cxx' with specific options (NO_DATA, NO_VALID, NO_OUTPUT) and then creates a test executable for running these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkexodusIICxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeExodusII.cxx)\nvtk_test_cxx_executable(vtkexodusIICxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test with VTK\nDESCRIPTION: This snippet demonstrates how to add a Python test case to the VTK testing framework. It specifies no validation and runtime tests with 'NO_VALID' and 'NO_RT' options and references a Python script 'MeshQuality.py' as the test case. This is commonly used for integrating new Python tests into the VTK suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_VALID NO_RT\n  MeshQuality.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Class Names and Header Files\nDESCRIPTION: This snippet sets up a list of classes and corresponding headers for the Token library. It also specifies generated headers that will be included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  Compiler\n  Hash\n  Singletons\n  Token\n  Type\n  TypeContainer\n  Manager\n\n  json/jsonToken\n  json/jsonManager\n\n  # Generated hedaers\n  \"${CMAKE_CURRENT_BINARY_DIR}/Options\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CxxABIConfigure\"\n  # XXX(kitware): Get this generated header installed:\n  \"${CMAKE_CURRENT_BINARY_DIR}/Exports\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Mangling for IOH5Rage Module - CMake\nDESCRIPTION: This code snippet is used to enable test mangling for the VTK IOH5Rage module. It helps to prevent naming conflicts in test cases related to this module, ensuring that tests are uniquely identified and executed correctly.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/H5Rage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOH5Rage)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Subdirectory in CMake\nDESCRIPTION: Includes the Cxx subdirectory in the build, which contains C++ test implementations for the VTK module under test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: This snippet uses the `vtk_module_add_module` CMake function to define the VTK::RenderingOpenXRRemoting module. It specifies the classes, non-wrapped classes, and non-wrapped headers that belong to this module. This is the core definition of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingOpenXRRemoting\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  NOWRAP_HEADERS ${nowrap_headers}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests for VTK IO\nDESCRIPTION: This snippet uses vtk\\_add\\_test\\_cxx to register a new test suite named vtkIOVPICCxxTests, including the test file TestVPICReader.cxx. The function is intended to integrate the test suite into CMake's test infrastructure, enabling it to be run as part of the build process. It requires the file TestVPICReader.cxx to exist in the specified directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/VPIC/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOVPICCxxTests tests\n  TestVPICReader.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Rendering Parallel LIC Module Definitions in CMake\nDESCRIPTION: Adds conditional compiler definitions to the VTK Rendering Parallel LIC module based on CMake options. These definitions enable timer-related features when the corresponding options are set.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_RENDERINGPARALLELLIC_SURFACELICPAINTER_TIMER)\n  vtk_module_definitions(VTK::RenderingParallelLIC\n    PRIVATE\n      vtkSurfaceLICPainterTIME)\nendif()\nif (VTK_RENDERINGPARALLELLIC_LINEINTEGRALCONVOLUTION2D_TIMER)\n  vtk_module_definitions(VTK::RenderingParallelLIC\n    PRIVATE\n      vtkLineIntegralConvolution2DTIME)\nendif()\nvtk_add_test_mangling(VTK::RenderingParallelLIC)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Data Files for VTK Module\nDESCRIPTION: Configures test data files for VTK module testing, including PDB and NDPI microscopy data files\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/2LYZ.pdb\n  Data/Microscopy/small2.ndpi)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (Planar LIC) in CMake\nDESCRIPTION: This snippet defines another external data test using `ExternalData_add_test`, but focuses on planar LIC.  It configures `TestSurfaceLIC` with a different input dataset (`SurfaceVectors.vtk`), camera configuration, step size, number of steps, and LIC intensity. This test checks the basic functionality of planar LIC rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICPlanarDefaults\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICPlanarDefaults.png,:}\"\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/SurfaceVectors.vtk}\n    --camera-config=3\n    --vectors=V\n    --step-size=1\n    --num-steps=40\n    --lic-intensity=0.8\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Tokenization\nDESCRIPTION: This snippet adds an executable target named 'tokenize', which is built from the 'tokenize.cxx' source file.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tokenize\n  tokenize.cxx\n)\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes\nDESCRIPTION: Command to push local changes to GitLab fork\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/develop_quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: git\nCODE:\n```\ngit push gitlab\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Tests Directory Inclusion\nDESCRIPTION: Adds the Python tests subdirectory if Python wrapping is enabled in the VTK build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking KISS FFT Module with Math Library on UNIX\nDESCRIPTION: This snippet checks if the build is on a UNIX system and if so, links the KISS FFT module with the math library, ensuring mathematical functions are available during compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\\n  vtk_module_link(VTK::kissfft PRIVATE m)\\endif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 as a VTK Third-Party Module in CMake\nDESCRIPTION: Declares SQLite3 as a third-party module for VTK, specifying licensing information, version details, and configuration options for both internal and external usage scenarios.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"public-domain\"\n    SPDX_LICENSE_IDENTIFIER\n      \"blessing\"\n    SPDX_COPYRIGHT_TEXT\n      \"NONE\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/sqlite.git@for/vtk-20250102-3.47.2\"\n    VERSION\n      \"3.47.2\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE SQLite3\n    TARGETS SQLite::SQLite3\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FreeType Font Config C++ Test Executable in CMake\nDESCRIPTION: This snippet sets up the test executable for VTK FreeType Font Config C++ tests. It uses the 'vtk_test_cxx_executable' command and specifies the RENDERING_FACTORY option.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingFreeTypeFontConfigCxxTests tests\n    RENDERING_FACTORY)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Subdirectory Conditional Logic\nDESCRIPTION: This snippet checks if C++ testing is enabled and, if so, adds the Cxx subdirectory for further testing definitions. This is managed using conditional statements for flexibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\\\n  add_subdirectory(Cxx)\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Test to VTK using Python\nDESCRIPTION: This snippet uses the vtk_add_test_python function to add a test case for reading and writing Newick trees. The test is configured with flags indicating the expected outputs (or lack thereof). It is integral for verifying the functionality of the NewickTreeReadWrite script within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Infovis/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nvtk_add_test_python(\\n  NO_DATA NO_VALID NO_OUTPUT\\n  TestNewickTreeReadWrite.py\\n  )\n```\n\n----------------------------------------\n\nTITLE: JSON Merge Patch Operations in C++\nDESCRIPTION: Implements JSON Merge Patch (RFC 7386) functionality for modifying JSON documents using a syntax that mirrors the document structure. Shows how to apply merge patches to JSON values.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\njson j_document = R\"({\n  \"a\": \"b\",\n  \"c\": {\n    \"d\": \"e\",\n    \"f\": \"g\"\n  }\n})\"_json;\n\njson j_patch = R\"({\n  \"a\":\"z\",\n  \"c\": {\n    \"f\": null\n  }\n})\"_json;\n\nj_document.merge_patch(j_patch);\n```\n\n----------------------------------------\n\nTITLE: Generating Source Code Hash for VTK Socket Communicator\nDESCRIPTION: Uses the VTK hash source utility to generate a hash header file for the vtkSocketCommunicator implementation. This creates a header that contains hash information for the socket communicator source.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(vtkHashSource)\n# Generate \"vtkSocketCommunicatorHash.h\".\nvtk_hash_source(\n  INPUT \"vtkSocketCommunicator.cxx\"\n  NAME \"vtkSocketCommunicatorHash\"\n  HEADER_OUTPUT hash_header)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Format Module Compilation Features\nDESCRIPTION: Configures compilation features for the VTK format module, specifically enabling C++ variadic templates support.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_compile_features(VTK::fmt\n  INTERFACE cxx_variadic_templates)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Inclusion in CMake\nDESCRIPTION: Conditionally adds the C++ test subdirectory if C++ testing is not disabled. This allows for conditional compilation of C++ tests based on build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Multi-Condition If-Else Statement in ExprTk\nDESCRIPTION: Demonstrates using logical operators within conditions and multiple else-if branches.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_41\n\nLANGUAGE: ExprTk\nCODE:\n```\nif (x < y or (x + z) > y)\n{\n   z := x + 3;\n   y := x - z;\n}\nelse if (abs(2y - z) >= 3)\n   y := x - z;\nelse\n{\n   z := abs(x * x);\n   x * y * z;\n};\n```\n\n----------------------------------------\n\nTITLE: ExprTk Complex Expression Example\nDESCRIPTION: Example demonstrating advanced expression composition using switch statements, while loops, and conditional operators\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_113\n\nLANGUAGE: C++\nCODE:\n```\nvar y := 3;\nfor (var x := switch\n                {\n                  case 1  :  7;\n                  case 2  : -1 + ~{var x{};};                  default :  y > 2 ? 3 : 4;\n                };\n       x != while (y > 0) { y -= 1; };\n       x -= {\n              if (min(x,y) < 2 * max(x,y))\n                x + 2;\n              else\n                x + y - 3;\n            }\n      )\n{\n    (x + y) / (x - y);\n};\n```\n\n----------------------------------------\n\nTITLE: Colored text output with fmt library in C++\nDESCRIPTION: Demonstrates printing colored and styled text using fmt::color and fmt::emphasis. This example shows foreground/background colors and text styles like bold, underline, and italic.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/README.md#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/color.h>\n\nint main() {\n  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,\n             \"Hello, {}!\\n\", \"world\");\n  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |\n             fmt::emphasis::underline, \"Olá, {}!\\n\", \"Mundo\");\n  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,\n             \"你好{}！\\n\", \"世界\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersGeneral Module\nDESCRIPTION: Adds the FiltersGeneral module to VTK with specified classes, templates, and non-wrappable classes. Also adds test mangling configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersGeneral\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${no_wrap_classes}\n  TEMPLATES ${templates})\nvtk_add_test_mangling(VTK::FiltersGeneral)\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Resource Compilation in CMake\nDESCRIPTION: This snippet enables automatic resource compilation using CMake's `CMAKE_AUTORCC` variable. When set to `ON`, CMake automatically detects and compiles Qt resource files (.qrc) during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_AUTORCC ON)\n```\n\n----------------------------------------\n\nTITLE: Defining Label Classes in VTK Module\nDESCRIPTION: This snippet defines a list of label-related classes that will be used in the VTK RenderingLabel module. It prepares the classes for inclusion in the module setup and ensures that all dependencies are accounted for.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Label/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkDynamic2DLabelMapper\n  vtkFreeTypeLabelRenderStrategy\n  vtkLabeledDataMapper\n  vtkLabeledTreeMapDataMapper\n  vtkLabelHierarchy\n  vtkLabelHierarchyAlgorithm\n  vtkLabelHierarchyCompositeIterator\n  vtkLabelHierarchyIterator\n  vtkLabelPlacementMapper\n  vtkLabelPlacer\n  vtkLabelRenderStrategy\n  vtkLabelSizeCalculator\n  vtkPointSetToLabelHierarchy)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Module Test Data - CMake\nDESCRIPTION: This snippet configures the VTK testing data by specifying the necessary data files for the testing module using the 'vtk_module_test_data' command. It includes various datasets necessary for testing purposes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\\\n  Data/AMR/HierarchicalBoxDataset.v1.0.vthb\\\n  Data/AMR/HierarchicalBoxDataset.v1.0/,REGEX:.*\\\n  Data/AMR/HierarchicalBoxDataset.v1.1.vthb\\\n  Data/AMR/HierarchicalBoxDataset.v1.1/,REGEX:.*\\\n  Data/AMR/HyperTreeGridWithInterface.htg\\\n  Data/mg_diff/mg_diff_0000.vtm\\\n  Data/mg_diff/mg_diff_0000/,REGEX:.*\\\n  Data/mg_diff/mg_diff_0062.vtm\\\n  Data/mg_diff/mg_diff_0062/,REGEX:.*\\\n  Data/HyperTreeGrid.1.htg\\\n  Data/ghost_cells.vtu\\\n  Data/many_time_steps.vtu\\\n  Data/polyhedron2pieces.vtu\\\n  Data/mb-of-mps.vtm\\\n  Data/mixed-mb.vtm\\\n  Data/mb-of-mps/,REGEX:.*\\\n  Data/xml-without-idtype-tag.vtu\\\n  Data/multicomb_0.vts\\\n  Data/time_series.vtu)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVR Input Files\nDESCRIPTION: This snippet iterates over a list of OpenVR input files and configures each file to be available in the binary directory during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(openvr_input_files\n  vtk_openvr_actions.json\n  vtk_openvr_binding_hpmotioncontroller.json\n  vtk_openvr_binding_knuckles.json\n  vtk_openvr_binding_oculus_touch.json\n  vtk_openvr_binding_vive_controller.json\n)\n\nforeach(inputfile IN LISTS openvr_input_files)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/${inputfile}\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${input_file}\"\n    COPYONLY)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of C++ and Python Subdirectories in CMake\nDESCRIPTION: This snippet conditionally adds C++ and Python subdirectories for testing. It checks if C++ testing is enabled and if Python wrapping is configured for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: VTK HDF5 HL Library Target Configuration\nDESCRIPTION: Configures the VTK-specific HDF5 HL library target with include directories, compile definitions and link dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/hl/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(vtkhdf5_hl_src ${HL_SOURCES} ${HL_HEADERS} ${HL_PRIVATE_HEADERS})\ntarget_include_directories(vtkhdf5_hl_src\n  PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}\n    ${HDF5_BINARY_DIR}\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkhdf5/hl/src>\")\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VR Functionality\nDESCRIPTION: This snippet sets up a list of classes that are involved in the VR functionality within VTK. These classes are necessary for rendering and interacting in a VR environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VR/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkVRCamera\n  vtkVRControlsHelper\n  vtkVRFollower\n  vtkVRHardwarePicker\n  vtkVRHMDCamera\n  vtkVRInteractorStyle\n  vtkVRMenuRepresentation\n  vtkVRMenuWidget\n  vtkVRModel\n  vtkVRPanelRepresentation\n  vtkVRPanelWidget\n  vtkVRRenderer\n  vtkVRRenderWindow\n  vtkVRRenderWindowInteractor)\n```\n\n----------------------------------------\n\nTITLE: Setting Standard C Headers Flag for HDF5 in CMake\nDESCRIPTION: Sets the H5_STDC_HEADERS flag required for various headers, and conditionally sets H5_TIME_WITH_SYS_TIME when not on Windows platforms. These are needed for proper HDF5 header configuration within VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nset(H5_STDC_HEADERS 1)\nif (NOT WIN32)\n  set(H5_TIME_WITH_SYS_TIME 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK HDF5 C++ Tests\nDESCRIPTION: CMake configuration that adds and configures C++ tests for the VTK HDF5 module. Sets up a test named TestIncludeHDF5.cxx with no data, validation, or output requirements, and creates the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkhdf5CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeHDF5.cxx)\nvtk_test_cxx_executable(vtkhdf5CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration Example\nDESCRIPTION: Example of a TOML configuration file format for CLI11\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\n# Comments are supported, using a #\n# The default section is [default], case-insensitive\n\nvalue = 1\nvalue2 = 123_456 # a string with separators\nstr = \"A string\"\nstr2 = \"A string\\nwith new lines\"\nstr3 = 'A literal \"string\"'\nvector = [1,2,3]\nstr_vector = [\"one\",\"two\",\"and three\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Management Headers and Sources - CMake\nDESCRIPTION: This snippet defines the source and header files related to memory management in the HDF5 library. It utilizes the IDE_GENERATED_PROPERTIES function to set the properties for the memory management component, H5MM.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset (H5MM_SOURCES\n    ${HDF5_SRC_DIR}/H5MM.c\n)\nset (H5MM_HDRS\n    ${HDF5_SRC_DIR}/H5MMpublic.h\n)\nIDE_GENERATED_PROPERTIES (\"H5MM\" \"${H5MM_HDRS}\" \"${H5MM_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Testing in CMake\nDESCRIPTION: Conditionally adds the Python testing subdirectory if Python wrapping is enabled for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Copy Target for iOS Examples in CMake\nDESCRIPTION: Creates a custom target that copies multiple example directories from source to binary build location. The directories include GLPaint, Surfaces, VolumeRender, and PlaneView examples for iOS.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(iOS-examples-copy ALL\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n          \\\"${CMAKE_CURRENT_SOURCE_DIR}/GLPaint\\\"\n          \\\"${CMAKE_CURRENT_BINARY_DIR}/GLPaint\\\"\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n          \\\"${CMAKE_CURRENT_SOURCE_DIR}/Surfaces\\\"\n          \\\"${CMAKE_CURRENT_BINARY_DIR}/Surfaces\\\"\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n          \\\"${CMAKE_CURRENT_SOURCE_DIR}/VolumeRender\\\"\n          \\\"${CMAKE_CURRENT_BINARY_DIR}/VolumeRender\\\"\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n          \\\"${CMAKE_CURRENT_SOURCE_DIR}/PlaneView\\\"\n          \\\"${CMAKE_CURRENT_BINARY_DIR}/PlaneView\\\")\n```\n\n----------------------------------------\n\nTITLE: Validating GLB Files\nDESCRIPTION: Command to validate GLB files using the glTF validator tool.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~/external/glTF-Validator/build/bin/gltf_validator Testing/Temporary/TestGLTFWriter.glb\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug and Release Builds on Unix\nDESCRIPTION: Commands to configure SQLite build environments for development (debug) and release builds with appropriate compiler flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n../sqlite/configure --enable-all --enable-debug CFLAGS='-O0 -g'\n```\n\n----------------------------------------\n\nTITLE: Pushing the updated branch to the main repository\nDESCRIPTION: This command pushes the changes from the local HEAD to the `xdmf2vtk-upstream` branch in the main repository. It updates the upstream snapshot branch with the newly committed changes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"git push .. HEAD:xdmf2vtk-upstream\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenVDB-related VTK Classes in CMake\nDESCRIPTION: Sets up a list of VTK classes related to OpenVDB functionality, including a writer and a reader class.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OpenVDB/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOpenVDBWriter\n  vtkOpenVDBReader)\n```\n\n----------------------------------------\n\nTITLE: Python Module Build Directory Configuration\nDESCRIPTION: Sets up Python module build directories with support for different configuration types (Debug/Release) using generator expressions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_CONFIGURATION_TYPES)\n  set(VTK_BUILD_PYTHON_MODULES_DIR\n    \"${CMAKE_BINARY_DIR}/$<CONFIG>/${VTK_PYTHON_SITE_PACKAGES_SUFFIX}\")\nelse ()\n  set(VTK_BUILD_PYTHON_MODULES_DIR\n    \"${CMAKE_BINARY_DIR}/${VTK_PYTHON_SITE_PACKAGES_SUFFIX}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Qt Module List\nDESCRIPTION: This snippet iterates through the `qt_components` list and creates a list of Qt modules in the format `Qt${vtk_qt_major_version}::${_qt_comp}`.  These modules are then used for linking against the VTK::GUISupportQt module.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(_qt_comp IN LISTS qt_components)\n  list(APPEND qt_modules \"Qt${vtk_qt_major_version}::${_qt_comp}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory to VTK Build in CMake\nDESCRIPTION: This CMake command adds the Cxx subdirectory to the build process, indicating that the C++ source code for VTK is located in this directory and should be compiled as part of the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/External/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Subdirectory Inclusion\nDESCRIPTION: Adds C++ test subdirectory only when C++ testing is not disabled\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding Required Qt Package for VTK\nDESCRIPTION: This snippet finds the required Qt package components for VTK. The command 'find_package' is used to locate the 'Widgets' component of the Qt version specified by 'vtk_qt_major_version'. This step is crucial to ensure that the necessary libraries are available for building the VTK GUI support features.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(\"Qt${vtk_qt_major_version}\" COMPONENTS Widgets REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Target in CMake\nDESCRIPTION: Sets up the library target with proper linking, compilation features, and installation rules based on build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(KWSYS_C_SRCS OR KWSYS_CXX_SRCS)\n  if(KWSYS_SPLIT_OBJECTS_FROM_INTERFACE)\n    set(KWSYS_TARGET_INTERFACE ${KWSYS_NAMESPACE})\n    set(KWSYS_TARGET_OBJECT ${KWSYS_NAMESPACE}_objects)\n    add_library(${KWSYS_TARGET_OBJECT} OBJECT\n      ${KWSYS_C_SRCS} ${KWSYS_CXX_SRCS})\n  else()\n    set(KWSYS_TARGET_INTERFACE ${KWSYS_NAMESPACE})\n    add_library(${KWSYS_TARGET_INTERFACE} ${KWSYS_LIBRARY_TYPE}\n      ${KWSYS_C_SRCS} ${KWSYS_CXX_SRCS})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Safety Settings for ExodusII\nDESCRIPTION: Sets the thread safety configuration for ExodusII based on the platform, disabling it for Windows and enabling it for other platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  set(EXODUS_THREADSAFE 0)\nelse ()\n  set(EXODUS_THREADSAFE 1)\nendif ()\nset(PARALLEL_AWARE_EXODUS 0)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Array Definition Statement Syntax in ASCII Art\nDESCRIPTION: This diagram illustrates the syntax for an array definition statement. It shows that an array can contain multiple expressions separated by commas, enclosed in square brackets.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_115\n\nLANGUAGE: ASCII Art\nCODE:\n```\n|                         |                 |                 |\n|                         +--<--- [,] <-----+                 |\n|                                                             |\n+-------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Matching C and MFC Runtime Linkage\nDESCRIPTION: This snippet ensures that the C runtime and MFC library linkages match each other by setting the CMAKE_MFC_FLAG appropriately based on the vtk_mfc_static variable. No additional dependencies are involved, but this setup is critical for runtime compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# C runtime lib linkage and MFC lib linkage *MUST* match.\n# If linking to C runtime static lib, link to MFC static lib.\n# If linking to C runtime dll, link to MFC dll.\nif (vtk_mfc_static)\n  set(CMAKE_MFC_FLAG 1)\nelse ()\n  set(CMAKE_MFC_FLAG 2)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Special Function Examples in ExprTk\nDESCRIPTION: Lists the available special functions in ExprTk which provide compiler-optimized equivalents of common mathematical expressions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_42\n\nLANGUAGE: ExprTk\nCODE:\n```\n// 3-Parameter special functions\n$f00(x,y,z) // (x + y) / z\n$f01(x,y,z) // (x + y) * z\n// ... and many more\n\n// 4-Parameter special functions\n$f48(x,y,z,w) // x + ((y + z) / w)\n$f49(x,y,z,w) // x + ((y + z) * w)\n// ... and many more\n```\n\n----------------------------------------\n\nTITLE: Viewing CMake Cache Variables with Grep\nDESCRIPTION: Bash command to clear CMake cache, configure with Expat help enabled, and filter the output to show variable definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -f CMakeCache.txt ; cmake -D_EXPAT_HELP=ON -LH . | grep -B1 ':.*=' | sed 's,^--$,,'\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for QtSQL Module\nDESCRIPTION: Applies test mangling configuration to the VTK QtSQL module to support testing infrastructure\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::GUISupportQtSQL)\n```\n\n----------------------------------------\n\nTITLE: MetaIO BSD License (1999-2007)\nDESCRIPTION: Earlier BSD-style license from Insight Software Consortium covering 1999-2007. Includes additional clause about modified source versions and similar terms for redistribution and liability.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/vtkmetaio/License.txt#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n/*=========================================================================\n\nCopyright (c) 1999-2007 Insight Software Consortium\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * The name of the Insight Software Consortium, nor the names of any\n   consortium members, nor of any contributors, may be used to endorse or\n   promote products derived from this software without specific prior written\n   permission.\n\n * Modified source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n=========================================================================*/\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing H5Part Headers\nDESCRIPTION: Configures the H5Part header template and installs the generated header file for use in the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_h5part.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_h5part.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_h5part.h\")\n```\n\n----------------------------------------\n\nTITLE: Checking Platform-Specific Locale Support\nDESCRIPTION: Checks for the availability of strtod_l function across different platforms using CMake's symbol existence verification.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckSymbolExists)\nif (WIN32)\n  check_symbol_exists(_strtod_l \"${strtod_l_headers}\" HAVE_STRTOD_L)\nelse ()\n  check_symbol_exists(strtod_l \"${strtod_l_headers}\" HAVE_STRTOD_L)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files and Configuring Headers\nDESCRIPTION: Sets up the source files for the module and configures the header file from a template.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  vtkmClipInstantiationsWithField.cxx\n  vtkmClipInstantiationsWithImplicitFunction.cxx)\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkmConfigFilters.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmConfigFilters.h\"\n  @ONLY)\n\nset(headers\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkmConfigFilters.h\")\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Dependencies\nDESCRIPTION: This CMake command `vtk_module_test_data` defines dependencies on test data.  The command searches for specific directories and ensures they are available during testing. The `REGEX:.*` ensures that all files within the specified directories are included.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/AMR/Enzo/DD0010/,REGEX:.*\n  Data/AMR/Flash/,REGEX:.*\n  Data/AMR/Velodyne/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Detecting Kokkos Backend Type (HIP, CUDA, SYCL)\nDESCRIPTION: Checks which Kokkos backend is being used (HIP, CUDA, or SYCL) and sets corresponding variables for conditional compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_KOKKOS_BACKEND STREQUAL \"HIP\")\n  set(VTK_KOKKOS_BACKEND_HIP 1)\nendif()\n\nif (VTK_KOKKOS_BACKEND STREQUAL \"CUDA\")\n  set(VTK_KOKKOS_BACKEND_CUDA 1)\nendif()\n\nif (VTK_KOKKOS_BACKEND STREQUAL \"SYCL\")\n  set(VTK_KOKKOS_BACKEND_SYCL 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` CMake macro to add C++ tests based on the files listed in the `VolumeCxxTests` variable. The macro likely handles the compilation and registration of these files as test cases within the VTK build system. `vtkRenderingVolumeCxxTests` is the name of the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingVolumeCxxTests tests\n  ${VolumeCxxTests}\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Finding LibArchive Package in CMake for VTK\nDESCRIPTION: Searches for the LibArchive package, which is a private dependency if the module is shared.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE_IF_SHARED\n  PACKAGE LibArchive)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Inclusion in CMake\nDESCRIPTION: This snippet conditionally includes the `Python` subdirectory if the `VTK_WRAP_PYTHON` variable is set (or is true). This enables the inclusion of Python wrapping and related tests when Python wrapping is enabled in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLite Executable for External VTK SQLite Usage\nDESCRIPTION: Configures the SQLite3 executable when using an external SQLite library. It finds the sqlite3 binary, creates an imported executable target, and sets its properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_MODULE_USE_EXTERNAL_vtksqlite)\n  if (vtk_sqlite_build_binary)\n    find_program(VTK_SQLITE_EXECUTABLE\n      NAMES sqlite3\n      DOC \"sqlite binary\")\n    if (NOT VTK_SQLITE_EXECUTABLE)\n      message(FATAL_ERROR\n        \"Failed to find the `sqlite3` binary; required to build other \"\n        \"components.\")\n    endif ()\n\n    add_executable(VTK::sqlitebin IMPORTED GLOBAL)\n    set_target_properties(VTK::sqlitebin\n      PROPERTIES\n        IMPORTED_LOCATION \"${VTK_SQLITE_EXECUTABLE}\")\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory to Build\nDESCRIPTION: This snippet uses CMake to add the Cxx directory to the VTK project, allowing for structured modular development.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Project\nDESCRIPTION: This snippet specifies the minimum required CMake version and sets the project name. It ensures that the CMake version used is within the specified range and defines the project name as DataManipulation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/DataManipulation/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(DataManipulation)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Test Executable\nDESCRIPTION: Creates the test executable for the VTK Filters Extraction tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersExtractionCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Disabling and Re-Enabling All Base Functions in ExprTk\nDESCRIPTION: Shows how to disable and then re-enable all base functions in the ExprTk parser. This affects whether expressions using built-in functions like 'abs', 'sin', etc. will compile.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_71\n\nLANGUAGE: cpp\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nparser.settings().disable_all_base_functions();\n\nparser\n   .compile(\"2 * abs(2 - 3)\",expression); // compilation failure\n\nparser.settings().enable_all_base_functions();\n\nparser\n   .compile(\"2 * abs(2 - 3)\",expression); // compilation success\n```\n\n----------------------------------------\n\nTITLE: ExprTk Repeat-Until Loop Structure\nDESCRIPTION: Example of a repeat-until loop which repeatedly evaluates statements until the condition becomes true. The final statement in the final iteration is used as the return value.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_9\n\nLANGUAGE: ExprTk\nCODE:\n```\nrepeat\n   y := x + z;\n   w := u + y;\nuntil ((x += 1) > 100)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters OpenTURNS C++ Tests\nDESCRIPTION: Configures C++ tests for the VTK Filters OpenTURNS module. It adds tests with no data, validation, or output requirements, including TestOTDensityMap and TestOTKernelSmoothing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/OpenTURNS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersOpenTURNSCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestOTDensityMap.cxx\n  TestOTKernelSmoothing.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Object Factory Configuration\nDESCRIPTION: Configures the object factory with source and header files, and sets an export macro for the Parallel Chemistry module\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKDOMAINSPARALLELCHEMISTRY_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Tests for SOA Arrays\nDESCRIPTION: Conditionally adds additional tests when SOA arrays are supported by the dispatcher. Specifically adds the InSitu Exodus test with NO_VALID flag.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(extra_tests)\nif(VTK_DISPATCH_SOA_ARRAYS)\n  list(APPEND extra_tests\n    TestInSituExodus.cxx,NO_VALID\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Custom Compiler Flag Detection Macro in CMake\nDESCRIPTION: Defines a macro 'ei_add_cxx_compiler_flag' to detect compiler support for a specific flag and add it to CMAKE_CXX_FLAGS if supported. The macro handles special characters in flag names for variable naming.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(ei_add_cxx_compiler_flag FLAG)\n  string(REGEX REPLACE \"-\" \"\" SFLAG1 ${FLAG})\n  string(REGEX REPLACE \"\\\\+\" \"p\" SFLAG ${SFLAG1})\n  check_cxx_compiler_flag(${FLAG} COMPILER_SUPPORT_${SFLAG})\n  if(COMPILER_SUPPORT_${SFLAG})\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${FLAG}\")\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK::RenderingOpenXR Module\nDESCRIPTION: Adds test mangling for the VTK::RenderingOpenXR module using VTK's test mangling command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingOpenXR)\n```\n\n----------------------------------------\n\nTITLE: Setting Option for Debug APIs\nDESCRIPTION: This snippet defines a CMake option `HDF5_ENABLE_DEBUG_APIS` to control extra debug output in all HDF5 packages. It's initialized to `OFF`, either explicitly or through a hardcoded setting.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (FALSE) # XXX(kitware): Hardcode settings.\noption (HDF5_ENABLE_DEBUG_APIS \"Turn on extra debug output in all packages\" OFF)\nelse ()\nset(HDF5_ENABLE_DEBUG_APIS OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Advanced Topics TOC Structure in Markdown\nDESCRIPTION: Sphinx/RST-style table of contents tree directive that defines the structure and navigation for VTK's advanced documentation topics. Uses titlesonly option to show only top-level entries and includes a caption.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:titlesonly:\n:caption: Contents\navailable_python_wheels\nspdx_and_sbom\nbuild_python_wheels\nbuild_wasm_emscripten\nbuild_for_mobile\nbuild_documentation\nmarshalling_hints\nobject_manager\nobject_serialization\nPythonWrappers\nruntime_settings\nWrappingTools\nmigration_guides/index\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK JsonCpp Module Sources and Headers\nDESCRIPTION: Sets up the source and header files for the VTK JsonCpp module. It also configures a header file and sets up shared library options if enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/vtkjsoncpp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  jsoncpp.cpp)\n\nset(headers\n  json/json-forwards.h\n  json/json.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/json/vtkjsoncpp_config.h\")\n\nif (BUILD_SHARED_LIBS)\n  set(JSON_DLL 1)\nendif ()\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/json/vtkjsoncpp_config.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/json/vtkjsoncpp_config.h\")\n```\n\n----------------------------------------\n\nTITLE: Importing updated RapidJSON into Fides\nDESCRIPTION: Commands for importing the updated RapidJSON into the Fides project by creating a new branch and running the update.sh script. This pulls the tagged version specified in the update.sh file.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/UPDATING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd thirdparty/rapidjson\n$ git checkout -b update_rapidjson\n$ ./update.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring ManyFiles XDMF Test\nDESCRIPTION: Adds a Python test specifically for handling multiple XDMF files. This test is configured with NO_OUTPUT, NO_VALID, and NO_RT flags, and conditionally includes arguments for large data processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/Testing/Python/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  ManyFiles.py NO_OUTPUT NO_VALID NO_RT ${_ManyFiles_ARGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Anari CXX Tests\nDESCRIPTION: Defines a set of C++ test files for the VTK Anari rendering module, including surface rendering tests for materials, shapes, and effects, as well as volume rendering tests for different mapping and camera configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingAnariCxxTests tests\n  # Surface Rendering Tests\n  TestAnariPass.cxx\n  TestAnariPassVisibility.cxx\n  TestAnariMaterials.cxx\n  TestAnariSphere.cxx\n  TestAnariDynamicObject.cxx\n  TestAnariAmbient.cxx\n  TestAnariCompositePolyDataMapper.cxx\n  TestAnariCylinder.cxx\n  TestAnariImplicits.cxx\n  TestAnariLayers.cxx\n  TestAnariLights.cxx\n  TestAnariMultiBlock.cxx\n  TestAnariMultiBlockPartialArrayFieldData.cxx\n  TestAnariOrthographic.cxx\n  TestAnariRenderMesh.cxx\n  TestAnariRendererType.cxx\n  TestAnariScalarBar.cxx\n  TestAnariStereo.cxx\n  TestAnariShadows.cxx\n  TestAnariPBRMaterials.cxx\n  TestAnariPBRMapping.cxx\n  TestAnariPBRMaterialsCoat.cxx\n  # Volume Rendering Tests\n  TestAnariVolumeRenderer.cxx\n  TestAnariSmartVolumeMapper.cxx\n  TestAnariVolumeWavelet.cxx\n  TestAnariTransfer2D.cxx\n  TestAnariCameraInside.cxx\n  TestAnariCameraInsideSmallSpacing.cxx\n  TestAnariCellData.cxx\n  TestAnariVolumeLightKit.cxx\n  TestAnariPerspectiveParallel.cxx\n  TestAnariPositionalLights.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMP0091 State with CMake\nDESCRIPTION: This snippet detects the state of CMake policy CMP0091, which relates to MSVC runtime library settings, and sets a variable to determine its usage. It checks if the policy state is 'NEW' and sets the use_policy_0091 variable accordingly. There are no external dependencies for this code.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/MFC/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Detect CMP0091 state.\nset(use_policy_0091 0)\nif (POLICY CMP0091) # XXX(cmake-3.15)\n  cmake_policy(GET CMP0091 policy_0091_state)\n  if (policy_0091_state STREQUAL \"NEW\")\n    set(use_policy_0091 1)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary Directory for xdmf2 Updates\nDESCRIPTION: Initializes a temporary Git repository to work with the upstream xdmf2 content. This creates a clean workspace for preparing the updated library content.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir xdmf2-tmp\ncd xdmf2-tmp\ngit init\ngit pull .. xdmf2-upstream\nrm -rf *\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Resources\nDESCRIPTION: Defines test data files required for VTK module testing, including particle tracer data and various VTK file formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/clt.vtm\n  Data/clt/,REGEX:.*\n  Data/ParticleTracers/image_pathline.vtp\n  Data/ParticleTracers/image_streakline.vtp\n  Data/ParticleTracers/image_tracer.vtp\n  Data/ParticleTracers/ug_pathline.vtp\n  Data/ParticleTracers/ug_streakline.vtp\n  Data/ParticleTracers/ug_tracer.vtp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Loader Tests for KWSys\nDESCRIPTION: Sets up tests for the DynamicLoader component with platform-specific settings for Windows. Creates test libraries and modules to verify dynamic loading functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(KWSYS_USE_SystemInformation)\n  set(KWSYS_CXX_TESTS ${KWSYS_CXX_TESTS} testSystemInformation.cxx)\nendif()\nif(KWSYS_USE_DynamicLoader)\n  set(KWSYS_CXX_TESTS ${KWSYS_CXX_TESTS} testDynamicLoader.cxx)\n  # If kwsys contains the DynamicLoader, need extra library\n  add_library(${KWSYS_NAMESPACE}TestDynload MODULE testDynload.c)\n  set_property(TARGET ${KWSYS_NAMESPACE}TestDynload PROPERTY LABELS ${KWSYS_LABELS_LIB})\n  add_dependencies(${KWSYS_NAMESPACE}TestDynload ${KWSYS_TARGET_INTERFACE})\n\n  if (WIN32)\n    # Windows tests supported flags.\n    add_library(${KWSYS_NAMESPACE}TestDynloadImpl SHARED testDynloadImpl.c)\n    set_property(TARGET ${KWSYS_NAMESPACE}TestDynloadImpl PROPERTY LABELS ${KWSYS_LABELS_LIB})\n    set_property(TARGET ${KWSYS_NAMESPACE}TestDynloadImpl PROPERTY DEFINE_SYMBOL BUILDING_TestDynloadImpl)\n    set_property(TARGET ${KWSYS_NAMESPACE}TestDynloadImpl PROPERTY RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/dynloaddir\")\n    add_dependencies(${KWSYS_NAMESPACE}TestDynloadImpl ${KWSYS_TARGET_INTERFACE})\n    add_library(${KWSYS_NAMESPACE}TestDynloadUse MODULE testDynloadUse.c)\n    set_property(TARGET ${KWSYS_NAMESPACE}TestDynloadUse PROPERTY LABELS ${KWSYS_LABELS_LIB})\n    set_property(TARGET ${KWSYS_NAMESPACE}TestDynloadUse PROPERTY LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/dynloaddir\")\n    add_dependencies(${KWSYS_NAMESPACE}TestDynloadUse ${KWSYS_TARGET_INTERFACE})\n    target_link_libraries(${KWSYS_NAMESPACE}TestDynloadUse PRIVATE ${KWSYS_NAMESPACE}TestDynloadImpl)\n  endif ()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Name Handling for Loguru in CMake\nDESCRIPTION: This segment sets module definitions to handle thread names, with a specific adaptation for the Emscripten system to use TLS for thread name handling instead of pthread functions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Loguru dynamically sets LOGURU_PTLS_NAMES = 1 in Linux (`__linux__`)\n# Additionally, loguru also checks if user has defined LOGURU_PTLS_NAMES and avoids using pthread_[set]getname_np\n# wasm currently doesn't implement pthread_[set]getname_np, so ask to use TLS for thread names.\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  vtk_module_definitions(VTK::loguru\n    PRIVATE\n      \"LOGURU_PTLS_NAMES=1\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Checking and Defining Data Types for XDMF\nDESCRIPTION: Performs system checks for data type sizes and defines appropriate XDMF-specific type definitions based on the results, ensuring portable code across platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_type_size(double XDMF_SIZEOF_DOUBLE)\ncheck_type_size(float XDMF_SIZEOF_FLOAT)\ncheck_type_size(int XDMF_SIZEOF_INT)\ncheck_type_size(long XDMF_SIZEOF_LONG)\n\n# Don't Really Need to check these ...\nset(XDMF_VOID_VALID 1)\nset(XDMF_VOID \"void\")\nset(XDMF_PTR_VALID 1)\nset(XDMF_PTR \"void *\")\nset(XDMF_CHAR_VALID 1)\nset(XDMF_CHAR \"char\")\nset(XDMF_8_INT_VALID 1)\nset(XDMF_8_INT  \"char\")\nset(XDMF_8_U_INT  \"unsigned char\")\nset(XDMF_16_INT_VALID 1)\nset(XDMF_16_INT \"short\")\nset(XDMF_16_U_INT \"unsigned short\")\n# These should be Valid\nif(${XDMF_SIZEOF_FLOAT} MATCHES 4)\n  set(XDMF_32_FLOAT_VALID 1)\n  set(XDMF_FLOAT \"float\")\n  set(XDMF_32_FLOAT \"float\")\nelse ()\n  message(SEND_ERROR \"Can't Find a 32 Bit Float\")\nendif ()\nif(${XDMF_SIZEOF_DOUBLE} MATCHES 8)\n  set(XDMF_64_FLOAT_VALID 1)\n  set(XDMF_DOUBLE \"double\")\n  set(XDMF_64_FLOAT \"double\")\nelse ()\n  message(SEND_ERROR \"Can't Find a 64 Bit Float\")\nendif ()\n# These are sometimes different\nif(${XDMF_SIZEOF_INT} MATCHES 4)\n  set(XDMF_32_INT_VALID 1)\n  set(XDMF_32_INT \"int\")\n  set(XDMF_32_U_INT \"unsigned int\")\n  set(XDMF_32_S_INT \"int\")\nelse ()\n  if(${XDMF_SIZEOF_LONG} MATCHES 4)\n    set(XDMF_32_INT_VALID 1)\n    set(XDMF_32_INT \"long\")\n    set(XDMF_32_U_INT \"unsigned long\")\n    set(XDMF_32_S_INT \"long\")\n  else()\n    message(SEND_ERROR \"Can't Find a 32 Bit Integer\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Generate2DAMRDataSetWithPulse Executable\nDESCRIPTION: This snippet defines an executable called `Generate2DAMRDataSetWithPulse` from the `Generate2DAMRDataSetWithPulse.cxx` source file. It links the executable with the VTK libraries to enable the use of VTK functions. The `MACOSX_BUNDLE` option specifies that it's built as a macOS application bundle.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/AMR/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(Generate2DAMRDataSetWithPulse MACOSX_BUNDLE\n  Generate2DAMRDataSetWithPulse.cxx)\ntarget_link_libraries(Generate2DAMRDataSetWithPulse\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersFlowPaths Module\nDESCRIPTION: Adds the FiltersFlowPaths module to VTK with specified classes and non-wrapped headers, and configures test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersFlowPaths\n  CLASSES ${classes}\n  NOWRAP_HEADERS ${nowrap_headers})\nvtk_add_test_mangling(VTK::FiltersFlowPaths)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOODBC Module\nDESCRIPTION: This CMake function adds the VTK::IOODBC module, specifying the classes and source files. `vtkIOODBC_AutoInit.cxx` likely handles automatic initialization of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOODBC\n  CLASSES ${classes}\n  SOURCES vtkIOODBC_AutoInit.cxx)\n```\n\n----------------------------------------\n\nTITLE: Building XMLWF Command Line Tool\nDESCRIPTION: This snippet adds an executable target for the xmlwf command line tool, specifying source files and linking against the Expat library. It also handles additional linking options for MinGW.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXPAT_BUILD_TOOLS)\n    set(xmlwf_SRCS\n        xmlwf/codepage.c\n        xmlwf/readfilemap.c\n        xmlwf/xmlfile.c\n        xmlwf/xmlwf.c\n    )\n\n    add_executable(xmlwf ${xmlwf_SRCS})\n    set_property(TARGET xmlwf PROPERTY RUNTIME_OUTPUT_DIRECTORY xmlwf)\n    target_link_libraries(xmlwf expat)\n    if(_EXPAT_LIBM_FOUND)\n        target_link_libraries(xmlwf m)\n    endif()\n    expat_install(TARGETS xmlwf DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n    if(MINGW AND _EXPAT_UNICODE_WCHAR_T)\n        # https://gcc.gnu.org/onlinedocs/gcc/x86-Windows-Options.html\n        target_link_options(xmlwf PRIVATE -municode)\n    endif()\n\n    if(EXPAT_BUILD_DOCS)\n        file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/doc)\n        add_custom_target(\n            xmlwf-manpage\n            COMMAND\n                \"${DOCBOOK_TO_MAN}\" \"${PROJECT_SOURCE_DIR}/doc/xmlwf.xml\" && mv \"XMLWF.1\" \"${PROJECT_BINARY_DIR}/doc/xmlwf.1\"\n            BYPRODUCTS\n                doc/xmlwf.1)\n        add_dependencies(expat xmlwf-manpage)\n        expat_install(FILES \"${PROJECT_BINARY_DIR}/doc/xmlwf.1\" DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n    elseif(EXISTS ${PROJECT_SOURCE_DIR}/doc/xmlwf.1)\n        expat_install(FILES \"${PROJECT_SOURCE_DIR}/doc/xmlwf.1\" DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Tests Directory Inclusion\nDESCRIPTION: Adds the C++ tests subdirectory if C++ testing is not disabled in the VTK build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Addition in CMake for VTK\nDESCRIPTION: Adds the 'Cxx' subdirectory for C++ tests if C++ testing is not disabled in the VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Test Scripts\nDESCRIPTION: This snippet configures batch test scripts for the HDF5 library. It checks for `LOCAL_BATCH_TEST` and, based on specific variables like `LOCAL_BATCH_SCRIPT_COMMAND`, `LOCAL_BATCH_SCRIPT_NAME`, and `LOCAL_BATCH_SCRIPT_PARALLEL_NAME`, configures the corresponding scripts using `configure_file`.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif (LOCAL_BATCH_TEST)\n  if (LOCAL_BATCH_SCRIPT_COMMAND STREQUAL \"raybsub\")\n    configure_file (\n        ${HDF5_SOURCE_DIR}/bin/batch/${LOCAL_BATCH_SCRIPT_COMMAND}\n        ${HDF5_BINARY_DIR}/${LOCAL_BATCH_SCRIPT_COMMAND} ESCAPE_QUOTES @ONLY\n    )\n  endif ()\n  if (LOCAL_BATCH_SCRIPT_NAME)\n    configure_file (\n        ${HDF5_SOURCE_DIR}/bin/batch/${LOCAL_BATCH_SCRIPT_NAME}.in.cmake\n        ${HDF5_BINARY_DIR}/${LOCAL_BATCH_SCRIPT_NAME} ESCAPE_QUOTES @ONLY\n    )\n  endif ()\n  if (LOCAL_BATCH_SCRIPT_PARALLEL_NAME)\n    configure_file (\n        ${HDF5_SOURCE_DIR}/bin/batch/${LOCAL_BATCH_SCRIPT_PARALLEL_NAME}.in.cmake\n        ${HDF5_BINARY_DIR}/${LOCAL_BATCH_SCRIPT_PARALLEL_NAME} ESCAPE_QUOTES @ONLY\n    )\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable using vtk_test_cxx_executable\nDESCRIPTION: This snippet utilizes the `vtk_test_cxx_executable` CMake macro to create a C++ executable for the tests. It specifies the name of the executable as `vtkGeovisCoreCxxTests`, which corresponds to the test suite defined in the previous snippet. This executable will be used to run the tests defined in the `vtk_add_test_cxx` block.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkGeovisCoreCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining Java Module Classes and Headers\nDESCRIPTION: Sets lists for Java utility classes and headers to be included in the VTK Java module, specifically vtkJavaUtil class and vtkJavaAwt header\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Java/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkJavaUtil)\n\nset(headers\n  vtkJavaAwt.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Test with CMake\nDESCRIPTION: Sets up a Python test case for TestSerializeRenderWindow.py using VTK's testing framework. The test is configured with NO_DATA, NO_VALID, and NO_OUTPUT flags indicating it doesn't require input data, validation data, or output checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  TestSerializeRenderWindow.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing FreeType Headers for VTK\nDESCRIPTION: Configures the installation of FreeType header files as part of the VTK build, organizing them in appropriate subdirectories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  SUBDIR  \"vtkfreetype/include\"\n  FILES   \"include/ft2build.h\"\n          \"include/vtk_freetype_mangle.h\")\nvtk_module_install_headers(\n  SUBDIR  \"vtkfreetype/include/freetype\"\n  FILES   \"include/freetype/freetype.h\"\n          \"include/freetype/ftadvanc.h\"\n          \"include/freetype/ftbbox.h\"\n          \"include/freetype/ftbdf.h\"\n          \"include/freetype/ftbitmap.h\"\n          \"include/freetype/ftbzip2.h\"\n          \"include/freetype/ftcache.h\"\n          \"include/freetype/ftcid.h\"\n          \"include/freetype/ftcolor.h\"\n          \"include/freetype/ftdriver.h\"\n          \"include/freetype/fterrdef.h\"\n          \"include/freetype/fterrors.h\"\n          \"include/freetype/ftfntfmt.h\"\n          \"include/freetype/ftgasp.h\"\n          \"include/freetype/ftglyph.h\"\n          \"include/freetype/ftgxval.h\"\n          \"include/freetype/ftgzip.h\"\n          \"include/freetype/ftimage.h\"\n          \"include/freetype/ftincrem.h\"\n          \"include/freetype/ftlcdfil.h\"\n          \"include/freetype/ftlist.h\"\n          \"include/freetype/ftlogging.h\"\n          \"include/freetype/ftlzw.h\"\n          \"include/freetype/ftmac.h\"\n          \"include/freetype/ftmm.h\"\n          \"include/freetype/ftmodapi.h\"\n          \"include/freetype/ftmoderr.h\"\n          \"include/freetype/ftotval.h\"\n          \"include/freetype/ftoutln.h\"\n          \"include/freetype/ftparams.h\"\n          \"include/freetype/ftpfr.h\"\n          \"include/freetype/ftrender.h\"\n          \"include/freetype/ftsizes.h\"\n          \"include/freetype/ftsnames.h\"\n          \"include/freetype/ftstroke.h\"\n          \"include/freetype/ftsynth.h\"\n          \"include/freetype/ftsystem.h\"\n          \"include/freetype/fttrigon.h\"\n          \"include/freetype/fttypes.h\"\n          \"include/freetype/ftwinfnt.h\"\n          \"include/freetype/t1tables.h\"\n          \"include/freetype/ttnameid.h\"\n          \"include/freetype/tttables.h\"\n          \"include/freetype/tttags.h\")\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for SQLite\nDESCRIPTION: Creates an export header for the SQLite library to handle symbol visibility and API exports. Defines the SQLITE_API macro and deprecation macros for maintaining API compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(sqlite\n  EXPORT_MACRO_NAME SQLITE_API\n  EXPORT_FILE_NAME  vtksqlite_export.h\n  DEPRECATED_MACRO_NAME VTKSQLITE_DEPRECATED)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Test Data and Directory in CMake for VTK Module\nDESCRIPTION: Specifies additional test data files for Python testing and adds the 'Python' subdirectory if Python wrapping is enabled in the VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/beach.tif\n    Data/combq.bin\n    Data/combxyz.bin\n    Data/multicomb_0.vts\n    Data/nek5000/eddy_uv/,REGEX:.*\n    Data/EnSight/elementTypesTest.case\n    Data/EnSight/elementTypesTest.geo)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Registering CityGML Test Data in VTK Module with CMake\nDESCRIPTION: Registers CityGML files and textures as test data for VTK module testing. Uses a regex pattern to include all files in the specified directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CityGML/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/CityGML/,REGEX:.*\n  Data/CityGML/textures/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests in VTK with CMake\nDESCRIPTION: Adds Python test scripts to the VTK testing framework with specific flags indicating these tests don't require data files, validation, or output checking. The tests being added are TestEnsemble.py and TestReleaseData.py.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  TestEnsemble.py\n  TestReleaseData.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Format Module\nDESCRIPTION: Adds the VTK format module with specified sources and headers, setting up the module structure with appropriate subdirectories.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/vtkfmt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::fmt\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkfmt\")\n```\n\n----------------------------------------\n\nTITLE: Using a Loop Runtime Check with Timeout in ExprTk\nDESCRIPTION: Example showing how to register and use a loop runtime check with ExprTk parser. Sets maximum loop iterations and timeout duration for expression evaluation, with error handling for timeout violations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_104\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::parser<T> parser_t;\ntypedef exprtk::loop_runtime_check loop_runtime_check_t;\n\nmy_loop_rtc loop_rtc;\nloop_rtc.loop_set = loop_runtime_check_t::e_all_loops;\nloop_rtc.max_loop_iterations = 100000;\n\nparser_t parser;\n\nparser.register_loop_runtime_check(loop_rtc);\n.\n.\n.\n.\nusing std::chrono;\nconst auto max_duration = seconds(25);\n\ntry\n{\n   loop_rtc.set_timeout_time(steady_clock::now() + max_duration);\n   expression.value();\n\n   loop_rtc.set_timeout_time(steady_clock::now() + max_duration);\n   expression.value();\n\n   loop_rtc.set_timeout_time(steady_clock::now() + max_duration);\n   expression.value();\n\n}\ncatch(std::runtime_error& exception)\n{\n   printf(\"Exception: %s\\n\",exception.what());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Case in VTK\nDESCRIPTION: This snippet configures a test case for the Alembic exporter in the VTK IO module. It specifies a test named 'vtkIOAlembicCxxTests' and includes the test file 'TestAlembicExporter.cxx', with no data and no validity checks required. This is used to ensure that the exports are functioning properly without requiring any input data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOAlembicCxxTests tests\n  TestAlembicExporter.cxx,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: Instructs CMake to include and process the Cxx subdirectory during the build configuration process. This ensures that C++ source files and related build targets in the Cxx directory are compiled and integrated into the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lzma/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Test Directory Inclusion\nDESCRIPTION: Conditionally adds the Python subdirectory for testing if Python wrapping is enabled in the VTK build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Exprtk Headers with CMake\nDESCRIPTION: Sets up header file list and configures VTK module header installation with relative paths. The headers are installed in the vtkexprtk subdirectory using vtk_module_install_headers CMake function.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n include/exprtk.hpp)\n\nvtk_module_install_headers(\n  USE_RELATIVE_PATHS\n  SUBDIR  \"vtkexprtk\"\n  FILES   ${headers})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building from Repository Source - Shell\nDESCRIPTION: These commands facilitate building the Ogg libraries from the repository source using SVN. It involves running autogen.sh, configuring, building, and optionally installing as root. Dependencies include SVN and Unix-like development tools.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./autogen.sh\n./configure\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Data for VTK Module in CMake\nDESCRIPTION: This snippet specifies test data for a VTK module using the vtk_module_test_data macro. It points to a VTU file containing minimal tensor data for testing purposes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Tensor/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/MinimalTensors.vtu)\n```\n\n----------------------------------------\n\nTITLE: Setting up VTK Catalyst Alias and Clearing Build Properties in CMake\nDESCRIPTION: Creates an alias for the catalyst-vtk target and clears various build properties including library name suffix and version information to ensure proper build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/Catalyst/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(VTK::catalyst-vtk ALIAS catalyst-vtk)\n\n# Clear the `-pvVERSION` suffix (if any).\nset(_vtk_build_LIBRARY_NAME_SUFFIX \"\")\n# Clear version information.\nset(_vtk_build_VERSION \"\")\nset(_vtk_build_SOVERSION \"\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Creation of Doxygen Target in CMake\nDESCRIPTION: This snippet checks if a 'doxygen' target already exists, and if not, creates one. This ensures that the 'doxygen' target is available for dependency management without creating duplicates.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET doxygen)\n    add_custom_target (doxygen)\n  endif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers and Sources in CMake\nDESCRIPTION: This snippet sets up a list of header and source files for the VTK double conversion module. The CMake lists 'headers' and 'sources' contain file paths required to build the module. The headers include paths to C++ header files, while sources list the corresponding implementation files. These lists are later used in the build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/vtkdoubleconversion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  double-conversion/bignum.h\n  double-conversion/cached-powers.h\n  double-conversion/diy-fp.h\n  double-conversion/double-conversion.h\n  double-conversion/fast-dtoa.h\n  double-conversion/fixed-dtoa.h\n  double-conversion/ieee.h\n  double-conversion/strtod.h\n  double-conversion/utils.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/double-conversion/vtkdoubleconversion_export.h\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  double-conversion/bignum.cc\n  double-conversion/bignum-dtoa.cc\n  double-conversion/cached-powers.cc\n  double-conversion/diy-fp.cc\n  double-conversion/double-conversion.cc\n  double-conversion/fast-dtoa.cc\n  double-conversion/fixed-dtoa.cc\n  double-conversion/strtod.cc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard C++ Tests for VTK IO Parallel\nDESCRIPTION: Adds standard (non-MPI) C++ tests for the VTK IO Parallel module. It includes tests for POpenFOAMReader variants and a Big Endian Plot3D test.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOParallelCxxTests tests\n  TestPOpenFOAMReader.cxx\n  TestPOpenFOAMReaderGlobalFaceZone.cxx,NO_VALID\n  TestPOpenFOAMReaderLagrangianSerial.cxx,NO_VALID\n  TestPOpenFOAMReaderLagrangianUncollated.cxx,NO_VALID\n  TestBigEndianPlot3D.cxx,NO_VALID\n  )\nvtk_test_cxx_executable(vtkIOParallelCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Output Directories\nDESCRIPTION: Sets up the CMake project, minimum version requirements, and configures output directories for binaries, libraries and archives using GNU install directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ImageProcessing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(ImageProcessing)\n\ninclude(GNUInstallDirs)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring NDGM Support for XDMF2\nDESCRIPTION: Sets up optional Network Distributed Global Memory (NDGM) support for XDMF2. Provides options to either use existing NDGM libraries or build from source, with appropriate include paths and library settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#NDGM\nif (FALSE) # XXX(kitware): hardcode settings\noption(XDMF_HAS_NDGM \"XDMF has Network Distributed Global Memory (NDGM)\" OFF)\nmark_as_advanced(XDMF_HAS_NDGM)\nelse ()\nset(XDMF_HAS_NDGM OFF)\nendif ()\nif(XDMF_HAS_NDGM)\n  option(XDMF_HAS_NDGM_SOURCE \"XDMF has Network Distributed Global Memory (NDGM) Source\" OFF)\n  if(XDMF_HAS_NDGM_SOURCE)\n    find_path(NDGM_DIR BuildNDGM.cmake ${xdmf2_SOURCE_DIR}/../Ndgm \"Root of Source for NDGM\")\n    if(NDGM_DIR)\n      message(STATUS \"......Process NDGM Source\")\n      include(${NDGM_DIR}/BuildNDGM.cmake)\n      #subdirs(NDGM)\n      include_directories(${NDGM_DIR}/libsrc)\n      set(NDGM_LIBRARY ndgm)\n    endif()\n  else()\n    message(STATUS \"......Looking for NDGM_INCLUDE_DIR\")\n    find_path(NDGM_INCLUDE_DIR Ndgm ${xdmf2_SOURCE_DIR}/../Ndgm/libsrc \"Include Directory for NDGM; Resolves #include <Ndgm/ndgm.h>\")\n    message(STATUS \"......Looking for NDGM_LIBRARY\")\n    find_library(NDGM_LIBRARY ndgm ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n    include_directories(${NDGM_INCLUDE_DIR})\n    set(NDGM_LIBRARY ${NDGM_LIBRARY})\n  endif()\n  set(HAVE_NDGM 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header-Only Classes\nDESCRIPTION: Specifies header-only classes for the VTK FiltersCellGrid module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  vtkDGOperationEvaluator.h\n  vtkDGOperationState.h\n  vtkDGOperationStateEntry.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Eigen Tests with CMake\nDESCRIPTION: Sets up C++ tests for VTK's Eigen module by defining the test source files and creating a test executable. Uses vtk_add_test_cxx and vtk_test_cxx_executable CMake functions with NO_DATA, NO_VALID, and NO_OUTPUT flags indicating these tests don't require data files, validation, or output checking.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkeigenCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeEigen.cxx)\nvtk_test_cxx_executable(vtkeigenCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Verdict Module with Build System in CMake\nDESCRIPTION: Adds the verdict module to the VTK build system using vtk_module_add_module, specifying headers, sources, and the subdirectory for installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/vtkverdict/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::verdict\n  HEADERS ${headers}\n  SOURCES ${sources}\n  HEADERS_SUBDIR \"vtkverdict\")\n```\n\n----------------------------------------\n\nTITLE: Finding Android Command Line Tool\nDESCRIPTION: Checks for the presence of the Android command line tool and raises an error if not found\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(ANDROID_EXECUTABLE\n  NAMES android\n  DOC   \"The android command-line tool\")\nif(NOT ANDROID_EXECUTABLE)\n  message(FATAL_ERROR \"Can not find android command line tool: android\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Git Development Setup Command\nDESCRIPTION: Command to run the setup script for VTK development environment\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Utilities/SetupForDevelopment.sh\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Module Sources with Old System (CMake)\nDESCRIPTION: Example of how to declare source files for a VTK module using the old module system in CMake. It demonstrates setting source files, properties, and handling optional dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(Module_SRCS\n  vtkPublicClass.cxx\n  vtkPrivateClass.cxx\n  helper.cpp\n  helper.h\n  public_helper.cpp\n  public_helper.h\n  public_header.h\n  vtkImplSource.cxx\n  vtkPublicTemplate.txx\n  vtkPrivateTemplate.txx\n  template.tcc # Not detected as a template, so not installed.\n  template.h\n  private_template.tcc\n  private_template.h\n)\n\n# Mark some files as only being header files.\nset_source_files_properties(\n  public_header.h\n  HEADER_FILE_ONLY\n)\n\n# Mark some headers as being private.\nset_source_files_properties(\n  helper.h\n  private_template.h\n  public_header.h\n  template.h\n  vtkImplSource.cxx # no header\n  vtkPrivateTemplate.h\n  PROPERTIES SKIP_HEADER_INSTALL 1\n)\n\nset(${vtk-module}_HDRS # Magic variable\n  public_helper.h\n  template.h\n  #helper.h # private headers just go ignored.\n)\n\n# Optional dependencies are detected through variables.\nif (Module_vtkSomeDep)\n  list(APPEND Module_SRCS\n    # Some optional file.\n    vtkOptional.cxx)\nendif ()\n\nvtk_module_library(vtkModuleName ${Module_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Find VTK modules\nDESCRIPTION: This snippet uses the `vtk_module_find_modules` macro to search for `vtk.module` files in all subdirectories of the current source directory.  The result is stored in the `vtk_module_files` variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_find_modules(vtk_module_files ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Reading CGNS Version from Header File\nDESCRIPTION: Reads the CGNS version from the source header file and uses regex to parse the version information.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Determine CGNS_VERSION from src/cgnslib.h for \nfile (READ ${PROJECT_SOURCE_DIR}/src/cgnslib.h _cgnslib_h_contents)\nstring (REGEX REPLACE \"*.\\#define[ \\t]+CGNS_DOTVERS[ \\t]+([0-9]*)\\.([0-9])[0-9]*.*$\"\n    \"\\1.\\2\" CGNS_VERSION ${_cgnslib_h_contents})\n```\n\n----------------------------------------\n\nTITLE: Creating VTK IO FDS Test Executable\nDESCRIPTION: Creates the test executable for the VTK IO FDS C++ tests using the CMake configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FDS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOFDSCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Deep Copy Worker Implementation\nDESCRIPTION: Implements a worker for deep copying between arrays with specialized implementations for AOS to AOS and SOA to SOA copies, plus a generic fallback implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ArrayDispatch-VTK-7-1.md#2025-04-21_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\nstruct DeepCopyWorker\n{\n  template <typename ValueType>\n  void operator()(vtkAOSDataArrayTemplate<ValueType> *src,\n                  vtkAOSDataArrayTemplate<ValueType> *dst)\n  {\n    std::copy(src->Begin(), src->End(), dst->Begin());\n  }\n\n  template <typename ValueType>\n  void operator()(vtkSOADataArrayTemplate<ValueType> *src,\n                  vtkSOADataArrayTemplate<ValueType> *dst)\n  {\n    vtkIdType numTuples = src->GetNumberOfTuples();\n    for (int comp; comp < src->GetNumberOfComponents(); ++comp)\n      {\n      ValueType *srcBegin = src->GetComponentArrayPointer(comp);\n      ValueType *srcEnd = srcBegin + numTuples;\n      ValueType *dstBegin = dst->GetComponentArrayPointer(comp);\n\n      std::copy(srcBegin, srcEnd, dstBegin);\n      }\n  }\n\n  template <typename Array1T, typename Array2T>\n  void operator()(Array1T *src, Array2T *dst)\n  {\n    vtkDataArrayAccessor<Array1T> s(src);\n    vtkDataArrayAccessor<Array2T> d(dst);\n\n    typedef typename vtkDataArrayAccessor<Array2T>::APIType DestType;\n\n    vtkIdType tuples = src->GetNumberOfTuples();\n    int comps = src->GetNumberOfComponents();\n\n    for (vtkIdType t = 0; t < tuples; ++t)\n      {\n      for (int c = 0; c < comps; ++c)\n        {\n        d.Set(t, c, static_cast<DestType>(s.Get(t, c)));\n        }\n      }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Grep Examples for Loguru Logs in Bash\nDESCRIPTION: These bash commands demonstrate how to filter Loguru log files using grep. Examples include filtering by verbosity level and thread name.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Only show warnings, errors and fatal messages:\ncat logfile.txt | egrep \"[^0-9]\\\\|\"\n\n# Ignore verbosity-levels 4 and above:\ncat logfile.txt | egrep \"[^4-9]\\\\|\"\n\n# Only show verbosity-level 6:\ncat logfile.txt | egrep \"6\\\\|\"\n\n# Only show messages from the main thread:\ncat logfile.txt | egrep \"\\\\[main thread     \\\\]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Rendering Classes in CMake\nDESCRIPTION: Configures a list of VTK volume rendering related classes for module compilation, including ray casting mappers, volume interfaces, and volume rendering helper classes\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkDirectionEncoder\n  vtkEncodedGradientEstimator\n  vtkEncodedGradientShader\n  vtkFiniteDifferenceGradientEstimator\n  vtkFixedPointRayCastImage\n  vtkFixedPointVolumeRayCastCompositeGOHelper\n  vtkFixedPointVolumeRayCastCompositeGOShadeHelper\n  vtkFixedPointVolumeRayCastCompositeHelper\n  vtkFixedPointVolumeRayCastCompositeShadeHelper\n  vtkFixedPointVolumeRayCastHelper\n  vtkFixedPointVolumeRayCastMapper\n  vtkFixedPointVolumeRayCastMIPHelper\n  vtkGPUVolumeRayCastMapper\n  vtkMultiVolume\n  vtkOSPRayVolumeInterface\n  vtkAnariVolumeInterface\n  vtkProjectedTetrahedraMapper\n  vtkRayCastImageDisplayHelper\n  vtkRecursiveSphereDirectionEncoder\n  vtkSphericalDirectionEncoder\n  vtkUnstructuredGridBunykRayCastFunction\n  vtkUnstructuredGridHomogeneousRayIntegrator\n  vtkUnstructuredGridLinearRayIntegrator\n  vtkUnstructuredGridPartialPreIntegration\n  vtkUnstructuredGridPreIntegration\n  vtkUnstructuredGridVolumeMapper\n  vtkUnstructuredGridVolumeRayCastFunction\n  vtkUnstructuredGridVolumeRayCastIterator\n  vtkUnstructuredGridVolumeRayCastMapper\n  vtkUnstructuredGridVolumeRayIntegrator\n  vtkUnstructuredGridVolumeZSweepMapper\n  vtkVolumeMapper\n  vtkVolumeOutlineSource\n  vtkVolumePicker\n  vtkVolumeRayCastSpaceLeapingImageFilter)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Classes in CMake\nDESCRIPTION: Defines a list of classes for the VTK Filters Parallel Verdict module, specifically setting the vtkPCellSizeFilter class\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPCellSizeFilter)\n```\n\n----------------------------------------\n\nTITLE: Registering Test Data with vtk_module_test_data in CMake\nDESCRIPTION: This snippet uses the `vtk_module_test_data` macro to register two binary files, `Data/combq.bin` and `Data/combxyz.bin`, as test data. The macro is used within the VTK build system to make these files available during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/combq.bin\n  Data/combxyz.bin)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Directories and Data\nDESCRIPTION: CMake configuration that conditionally adds C++ test directories and sets up Python test data if Python wrapping is enabled. Includes setup for AMR/Enzo test data and corresponding test directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/AMR/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/AMR/Enzo/DD0010/,REGEX:.*)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing XDMF2 Header File in CMake\nDESCRIPTION: Configures the XDMF2 header file from a template and installs it to the appropriate location in the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_xdmf2.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_xdmf2.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_xdmf2.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module with Classes and Headers\nDESCRIPTION: Adds the VTK TestingGenericBridge module using CMake, specifying the previously defined classes and headers\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/GenericBridge/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::TestingGenericBridge\n  CLASSES ${classes}\n  HEADERS ${headers})\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Directory Addition in CMake for VTK\nDESCRIPTION: Checks if Python wrapping is enabled via VTK_WRAP_PYTHON flag and conditionally adds the Python subdirectory to the build process. This allows optional Python binding generation for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Python/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Generating List of Projects Using update.sh Framework in Bash\nDESCRIPTION: This Bash script generates a sorted list of third-party projects that use the update.sh framework. It searches for update.sh files in the ThirdParty and Utilities directories, creating Markdown-formatted links.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/imported.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd VTK/ThirdParty\nfor path in $(ls -d -1 */) $(ls -d -1 ../Utilities/*/); do\n  path=${path%/*}  # \"dir1/dir2/Dir3/\" -> \"dir1/dir2/Dir3\"\n  project=${path##*/}  # \"dir1/dir2/Dir3\" -> \"Dir3\"\n  if [[ -f \"$path/update.sh\" ]]; then\n    echo \"  * [$project]($path/update.sh)\"\n  fi\ndone | sort --ignore-case\n```\n\n----------------------------------------\n\nTITLE: Macro for Setting CGNS Build Type\nDESCRIPTION: Defines a macro to handle the configuration of build types depending on whether a multi-configuration generator is used.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Macro to handle muticonfig generator\nmacro (SET_CGNS_BUILD_TYPE)\n  get_property(_isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  if(_isMultiConfig)\n    set(CGNS_CFG_NAME ${CMAKE_BUILD_TYPE})\n    set(CGNS_BUILD_TYPE ${CMAKE_CFG_INTDIR})\n    set(CGNS_CFG_BUILD_TYPE \\${CMAKE_INSTALL_CONFIG_NAME})\n  else()\n    set(CGNS_CFG_BUILD_TYPE \".\")\n    if(CMAKE_BUILD_TYPE)\n      set(CGNS_CFG_NAME ${CMAKE_BUILD_TYPE})\n      set(CGNS_BUILD_TYPE ${CMAKE_BUILD_TYPE})\n    else()\n      set(CGNS_CFG_NAME \"Release\")\n      set(CGNS_BUILD_TYPE \"Release\")\n    endif()\n  endif()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    if (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.15.0\")\n      message (VERBOSE \"Setting build type to 'Release' as none was specified.\")\n    endif()\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build.\" FORCE)\n    # Set the possible values of build type for cmake-gui\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n      \"MinSizeRel\" \"RelWithDebInfo\")\n  endif()\nendmacro ()\n\nSET_CGNS_BUILD_TYPE()\n```\n\n----------------------------------------\n\nTITLE: ExprTk Return Statement Patterns\nDESCRIPTION: Examples of return statements in ExprTk which immediately exit from the current expression with an optional set of values that can include scalars, vectors, or strings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_13\n\nLANGUAGE: ExprTk\nCODE:\n```\nreturn [1];\nreturn [x, 'abx'];\nreturn [x, x + y,'abx'];\nreturn [];\nif (x < y)\n  return [x, x - y, 'result-set1', 123.456];\nelse\n  return [y, x + y, 'result-set2'];\n```\n\n----------------------------------------\n\nTITLE: Conditional JavaScript Directory Inclusion for Emscripten\nDESCRIPTION: Conditionally adds the JavaScript subdirectory to the build process when targeting Emscripten platform.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  add_subdirectory(JavaScript)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring PTS and AVSucd Reader Tests in CMake\nDESCRIPTION: Defines tests for the PTS reader and AVSucd reader with various input formats including ASCII (contiguous and non-contiguous) and binary data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestPTSReader,TestPTSReader.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/samplePTS.pts}\n)\n\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestAVSucdReaderContiguousASCII,TestAVSucdReader.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/cellsnd.ascii.inp}\n)\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestAVSucdReaderNonContiguousASCII,TestAVSucdReader.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/cellsnd.noncontiguous.ascii.inp}\n)\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestAVSucdReaderBinary,TestAVSucdReader.cxx DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/cellsnd.bin.inp}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests without Data or Validation\nDESCRIPTION: This CMake command adds Python tests to the VTK project without data, valid output, or output validation. It specifies two test files and includes options to disable data, validation, and output checks.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  NO_DATA NO_VALID NO_OUTPUT\n  TestObjectIdMap.py\n  TestWebApplicationMemory.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Library Project C++ Tests with CMake\nDESCRIPTION: This CMake snippet sets up C++ tests for the VTK library project. It adds a test named 'vtklibprojCxxTests' with specific properties and creates a test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtklibprojCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeLibProj.cxx)\nvtk_test_cxx_executable(vtklibprojCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding XArray Test Arguments\nDESCRIPTION: Generates additional test arguments and baseline configurations for XArray interface testing by modifying original test names\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/NetCDF/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (name IN LISTS tests)\n  string(REGEX REPLACE \"(.*)\\.py\" \"\\\\1\" name_no_ext \"${name}\")\n  # pass xarray to test the XArray NetCDFCFReader connection\n  set(\"${name_no_ext}XArray_ARGS\" xarray)\n  # use the same baseline as the original NetCDFCFReader tests\n  set(\"${name_no_ext}XArray_BASELINE_NAME\" ${name_no_ext})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Theora Target Properties and Include Directories\nDESCRIPTION: Sets up include directories for the Theora target and configures visibility properties for C symbols.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(theora\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/theora>\")\nset_target_properties(theora\n  PROPERTIES\n    C_VISIBILITY_PRESET \"hidden\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for C++ Component\nDESCRIPTION: This snippet adds a subdirectory named 'Cxx' to the CMake build process, indicating that there are C++ source files that need to be included in the project. This is essential for organizing the build structure and managing dependencies for C++ files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Dependencies for VTK RenderingOpenGL2\nDESCRIPTION: Sets up platform-specific dependencies for the RenderingOpenGL2 module, handling Cocoa on macOS, DirectX on Windows, and Android-specific requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (VTK_USE_COCOA)\n  vtk_module_link(VTK::RenderingOpenGL2 PUBLIC \"-framework Cocoa\")\nelseif (VTK_USE_WIN32_OPENGL)\n  # vtkWin32OpenGLDXRenderWindow requires D3D.\n  vtk_module_find_package(PRIVATE_IF_SHARED\n    PACKAGE DirectX)\n  vtk_module_link(VTK::RenderingOpenGL2 NO_KIT_EXPORT_IF_SHARED PRIVATE DirectX::d3d11 DirectX::dxgi)\nendif ()\n\nif (ANDROID)\n  vtk_module_link(VTK::RenderingOpenGL2\n    PRIVATE\n      android)\nendif ()\n\nif (APPLE_IOS)\n  vtk_module_link(VTK::RenderingOpenGL2 PUBLIC \"-framework UIKit\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK Module in CMake\nDESCRIPTION: Adds test mangling for the specified VTK module to ensure correct symbol handling and compatibility during compilation in the VTK FiltersParallelGeometry module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersParallelGeometry)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: Sets up VTK module test data using regex pattern matching and conditionally adds C++ and Python test directories based on build configuration flags.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Hybrid/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/headsq/,REGEX:.*)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Virtual Method Signatures with const Qualifier\nDESCRIPTION: Modified method signatures with additional const qualifier to force compiler errors when users try to override deprecated methods. This helps direct users to use the new GetNameOfClass method instead.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.WindowsMangling.txt#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual const char* const GetClassName() const;\nvirtual const char* const GetClassNameA() const;\nvirtual const char* const GetClassNameW() const;\n```\n\n----------------------------------------\n\nTITLE: Updating RapidJSON in the third-party repository using Git\nDESCRIPTION: Commands for updating the RapidJSON project in its source repository by pulling from upstream, rebasing onto master, and pushing changes to the for/fides branch. This prepares the source project before importing changes into VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/UPDATING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cd rapidjson\n$ git checkout for/fides\n$ git fetch origin\n$ git rebase master\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Adding VTK scn Module with Headers and Sources\nDESCRIPTION: Adds the VTK::scn module to the build system, specifying the headers and sources to include, along with directory structure information.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::scn\n  HEADER_DIRECTORIES\n  HEADERS ${headers}\n  SOURCES ${private_sources}\n  PRIVATE_HEADERS ${private_headers}\n  HEADERS_SUBDIR \"vtkscn\")\n```\n\n----------------------------------------\n\nTITLE: Disabling HDF5 Thread-Safety Support in VTK\nDESCRIPTION: Sets the HDF5_ENABLE_THREADSAFE option to OFF explicitly for VTK's build. This code is specifically modified for VTK to disable thread-safety features that might be otherwise configurable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDF5_ENABLE_THREADSAFE OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring DICOM Reader Test in CMake for VTK\nDESCRIPTION: Sets up the test for VTK DICOM image reader using a prostate image sample from the test data directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestDICOMImageReader.cxx,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/dicom/prostate.IMG}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK XDMF3 C++ Tests with CMake\nDESCRIPTION: This snippet configures C++ tests for the XDMF3 component in VTK. It adds a test named 'TestIncludeXDMF3.cxx' and specifies that it doesn't require data files, validation, or output checking. It then creates an executable for running these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkxdmf3CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeXDMF3.cxx)\nvtk_test_cxx_executable(vtkxdmf3CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Up GLAD Source Files in CMake\nDESCRIPTION: Configures the base source and header files for the GLAD OpenGL loader, including platform-specific files for Windows, EGL, and X11 systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/glad/vtkglad/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  \"include/KHR/khrplatform.h\")\nset(sources)\n\nlist(APPEND headers\n  \"include/glad/vtk_gl_mangle.h\"\n  \"include/glad/gl.h\")\nlist(APPEND sources\n  \"src/gl.c\")\n\nif (WIN32)\n  list(APPEND sources\n    \"src/wgl.c\")\n  list(APPEND headers\n    \"include/glad/vtk_wgl_mangle.h\"\n    \"include/glad/wgl.h\")\nendif ()\nif (VTK_OPENGL_HAS_EGL)\n  list(APPEND sources \"src/egl.c\")\n  list(APPEND headers\n    \"include/glad/vtk_egl_mangle.h\"\n    \"include/glad/egl.h\"\n    \"include/EGL/eglplatform.h\")\nendif ()\nif (VTK_USE_X)\n  list(APPEND sources\n    \"src/glx.c\")\n  list(APPEND headers\n    \"include/glad/vtk_glx_mangle.h\"\n    \"include/glad/glx.h\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for VTK IO SegY C++ Tests\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` CMake macro to create an executable for running the C++ tests defined in the previous snippet. It takes the name of the test suite as input, which corresponds to the test suite name used in the `vtk_add_test_cxx` macro.  This ensures that the test framework can execute all defined test cases.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SegY/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOSegYCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional CMake Directory Configuration for VTK Testing\nDESCRIPTION: Controls the inclusion of test directories in the build process. Adds the C++ tests directory if C++ testing is not disabled, and includes Python tests directory if VTK Python wrapping is enabled. Uses CMake's conditional directory inclusion mechanism.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LOD/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Build Directories\nDESCRIPTION: CMake configuration that registers test data files and conditionally adds C++ and Python test subdirectories based on build options. Handles data file registration for both general tests and Python-specific tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/cad_cubes.vtp\n  Data/can.ex2)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/RectGrid2.vtk\n    Data/blow.vtk\n    Data/combq.bin\n    Data/combxyz.bin)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Subdirectory in CMake\nDESCRIPTION: Adds the C++ subdirectory to the build system, which likely contains the actual test implementations that use the data files configured above.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files and Headers for VTK Wrapping Tools\nDESCRIPTION: Sets up lists of source files and headers for the VTK wrapping tools module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources\n  vtkParse.tab.c\n  vtkParseData.c\n  vtkParseDepends.c\n  vtkParseExtras.c\n  vtkParseHierarchy.c\n  vtkParseMain.c\n  vtkParseMangle.c\n  vtkParseMerge.c\n  vtkParseMethodType.c\n  vtkParsePreprocess.c\n  vtkParseProperties.c\n  vtkParseString.c\n  vtkParseSystem.c\n  vtkWrap.c\n  vtkWrapText.c)\n\nset(headers\n  vtkParse.h\n  vtkParseAttributes.h\n  vtkParseData.h\n  vtkParseDepends.h\n  vtkParseExtras.h\n  vtkParseHierarchy.h\n  vtkParseMain.h\n  vtkParseMangle.h\n  vtkParseMerge.h\n  vtkParseMethodType.h\n  vtkParsePreprocess.h\n  vtkParseProperties.h\n  vtkParseString.h\n  vtkParseSystem.h\n  vtkParseType.h\n  vtkWrap.h\n  vtkWrapText.h)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory to VTK Build\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that C++ source code for the VTK project is located in this directory and should be included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Input Paths\nDESCRIPTION: Example showing how to specify input directories and files for Doxygen to process in the configuration file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_5\n\nLANGUAGE: config\nCODE:\n```\nINPUT = ../../../VTK-doxygen/Common ../../../VTK-doxygen/Filtering ../../../VTK-doxygen/Graphics ../../../VTK-doxygen/Hybrid ../../../VTK-doxygen/Imaging ../../../VTK-doxygen/IO ../../../VTK-doxygen/Parallel ../../../VTK-doxygen/Patented ../../../VTK-doxygen/Rendering ../../../VTK-doxygen/doc_version.dox ../../../VTK-doxygen/doc_class2examples.dox ../../../VTK-doxygen/doc_class2tests.dox ../../../VTK-doxygen/doc_index.dox\n```\n\n----------------------------------------\n\nTITLE: Configuring H5pubconf.h Generation in CMake\nDESCRIPTION: Generates the H5pubconf.h configuration file containing user settings needed for HDF5 compilation. This file is created from a template with the settings defined throughout the build configuration process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file (${HDF_RESOURCES_DIR}/H5pubconf.h.in ${HDF5_SRC_BINARY_DIR}/H5pubconf.h @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Control Flow Structures in ExprTk\nDESCRIPTION: Demonstrates how to selectively disable specific control flow structures (for-loop) in the ExprTk parser.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_74\n\nLANGUAGE: cpp\nCODE:\n```\nparser_t parser;\nexpression_t expression;\n\nconst std::string program =\n   \" var x := 0;                      \"\n   \" for (var i := 0; i < 10; i += 1) \"\n   \" {                                \"\n   \"   x += i;                        \"\n   \" }                                \";\n\nparser.settings()\n   .disable_control_structure(settings_t::e_ctrl_for_loop);\n\nparser\n```\n\n----------------------------------------\n\nTITLE: Configuring Core VTK Test Data Files\nDESCRIPTION: Registers core test data files including PNG images, VTI files, and TIFF files. Uses REGEX pattern matching for the headsq directory contents.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/ImageDiff1.png\n  Data/ImageDiff2.png\n  Data/ImageSSIM.vti\n  Data/beach.tif\n  Data/fullhead15.png\n  Data/headsq/,REGEX:.*\n  Data/ssim.vti)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Headers, Sources, and Templates in CMake\nDESCRIPTION: This snippet defines the headers, sources, and template files required for the VTK Testing Core module. It sets up various variables for later use in module creation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  vtkEmscriptenTestUtilities.h\n  vtkPermuteOptions.h\n  vtkTestDriver.h\n  vtkTestErrorObserver.h\n  vtkTestingColors.h\n  vtkWindowsTestUtilities.h)\n\nset(sources\n  vtkEmscriptenTestUtilities.cxx)\n\nset(templates\n  vtkTestConditionals.txx)\nset(classes\n  vtkTestUtilities)\n\n```\n\n----------------------------------------\n\nTITLE: VTK Modules Initialization - CMake\nDESCRIPTION: This snippet automatically initializes the VTK modules required for the Cone executable, ensuring that all linked libraries are correctly set up for use in the application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS  Cone\n  MODULES  ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of C++ Subdirectory\nDESCRIPTION: Conditionally adds the C++ subdirectory if C++ testing is not disabled. This allows flexibility in configuring the build process based on project requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of VTK Parallel MPI Classes in CMake\nDESCRIPTION: This snippet checks for the VTK::ParallelMPI target and conditionally includes vtkDIYAggregateDataSetFilter in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelDIY2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::ParallelMPI)\n  # FIXME: vtkDIYAggregateDataSetFilter should not require MPI\n  # current implementation does (ref: paraview/paraview#19098)\n  vtk_object_factory_declare(\n    BASE      vtkAggregateDataSetFilter\n    OVERRIDE  vtkDIYAggregateDataSetFilter)\n  list(APPEND classes\n    vtkDIYAggregateDataSetFilter)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Cell Grid Tests in CMake\nDESCRIPTION: Sets up C++ test cases for the VTK Filters Cell Grid module and creates a test executable. Includes tests for basis functions, cell grid evaluator, surface extraction, and DG cells, all marked as NO_VALID indicating no image-based validation is performed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkFiltersCellGridCxxTests tests\n  TestBasisFunctions.cxx,NO_VALID\n  TestCellGridEvaluator.cxx,NO_VALID\n  TestCellGridExtractSurface.cxx,NO_VALID\n  TestDGCells.cxx,NO_VALID\n)\nvtk_test_cxx_executable(vtkFiltersCellGridCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Theora Targets for VTK in CMake\nDESCRIPTION: Sets up Theora library targets for VTK, handling platform-specific configurations. For non-Windows platforms (or Windows with MSYS/MINGW), additional targets for encoding and decoding are included.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(theora_external_targets THEORA::THEORA)\nif (NOT WIN32 OR (WIN32 AND (MSYS OR MINGW)))\n  list(APPEND theora_external_targets\n    THEORA::ENC\n    THEORA::DEC)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Bug Fix in vtkQuadraticPolygon::PermuteFromPolygon\nDESCRIPTION: Fixes a specific bug in the PermuteFromPolygon method of vtkQuadraticPolygon to improve reliability and correctness of triangulation results.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid vtkQuadraticPolygon::PermuteFromPolygon(/* parameters */) {\n    // Bug fix implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK TIFF C++ Tests with CMake\nDESCRIPTION: This snippet defines and configures C++ tests for the VTK TIFF module. It first adds a test named 'vtktiffCxxTests' that includes the file 'TestIncludeTIFF.cxx' with flags indicating no data, validation, or output is needed. Then it creates the test executable for these tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtktiffCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeTIFF.cxx)\nvtk_test_cxx_executable(vtktiffCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: This snippet adds a C++ subdirectory to the CMake project, which typically contains the source files for the module. This allows the build system to compile additional files from the specified subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelFlowPaths/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This CMake snippet registers test data files required for the VTK module. It includes binary files (combq.bin, combxyz.bin) and image files (earth.ppm, vtk-transparent.png) that will be used in tests. The snippet also adds the C++ subdirectory to the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/combq.bin\n  Data/combxyz.bin\n  Data/earth.ppm\n  Data/vtk-transparent.png)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Interactor Style Selection in VTK\nDESCRIPTION: Conditionally selects the appropriate interactor style based on the target platform. Uses MultiTouchCamera for mobile platforms (Android/iOS) and StyleSwitch for other platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (ANDROID OR APPLE_IOS)\n  set(style_override \"vtkInteractorStyleMultiTouchCamera\")\nelse ()\n  set(style_override \"vtkInteractorStyleSwitch\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Wrapping for VTK Module in CMake\nDESCRIPTION: Adds C++ and Python subdirectories to the build if VTK Python wrapping is enabled. This allows for conditional compilation of Python-related components.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PIO/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Cxx)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ERF Reader Tests in CMake\nDESCRIPTION: Sets up C++ test cases for the VTK ERF Reader component. Configures a test named TestERFReader.cxx with NO_VALID and NO_OUTPUT flags, and creates the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ERF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOERFCxxTests tests\n  TestERFReader.cxx,NO_VALID,NO_OUTPUT\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOERFCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional VTK Module Test Data Inclusion (CMake)\nDESCRIPTION: This snippet conditionally includes test data for VTK modules if the VTK_USE_LARGE_DATA flag is enabled. It uses the vtk_module_test_data macro to specify data files related to the XDMF format with a regular expression.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXdmf3/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_module_test_data(\n    Data/XDMF/Iron/,REGEX:Iron_Protein\\.ImageData\\..*)\n\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL IO Test Cases\nDESCRIPTION: Adds C++ test executable for PostgreSQL database IO operations with specific test source files\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOPostgreSQLCxxTests tests\n  NO_DATA NO_VALID\n  TestPostgreSQLDatabase.cxx\n  TestPostgreSQLTableReadWrite.cxx\n  )\n\nvtk_test_cxx_executable(vtkIOPostgreSQLCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Source and Header Lists\nDESCRIPTION: This snippet defines CMake lists named `sources` and `private_headers` containing the source files and private header files required for the VTK RenderingTk module. These lists are later used by `vtk_module_add_module` to build the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(sources\n  vtkPythonTkWidgetsInit.cxx\n  vtkTkImageViewerWidget.cxx\n  vtkTkRenderWidget.cxx)\nset(private_headers\n  vtkTcl.h\n  vtkTclUtil.h\n  vtkTk.h\n  vtkTkImageViewerWidget.h\n  vtkTkRenderWidget.h\n  \\\"${CMAKE_CURRENT_BINARY_DIR}/vtkTkAppInitConfigure.h\\\"\n  \\\"${CMAKE_CURRENT_BINARY_DIR}/vtkTkInternals.h\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Setting KWIML Test Prefix\nDESCRIPTION: This snippet sets the KWIML test prefix if it's not already defined.  This prefix is used to name the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(NOT KWIML_TEST_PREFIX)\n  set(KWIML_TEST_PREFIX kwiml)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Directories in CMake\nDESCRIPTION: Conditionally adds test directories based on build configuration flags. Includes C++ tests if not disabled and Python tests if VTK Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeType/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK RenderingContext2D Classes in CMake\nDESCRIPTION: Defines a list of VTK classes that are part of the RenderingContext2D module. These classes handle various 2D and 3D context rendering capabilities including brushes, pens, scene management, and context devices.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Context2D/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkAbstractContextBufferId\n  vtkAbstractContextItem\n  vtkBlockItem\n  vtkBrush\n  vtkContext2D\n  vtkContext3D\n  vtkContextActor\n  vtkContextClip\n  vtkContextDevice2D\n  vtkContextDevice3D\n  vtkContextItem\n  vtkContextKeyEvent\n  vtkContextMapper2D\n  vtkContextMouseEvent\n  vtkContextScene\n  vtkContextTransform\n  vtkImageItem\n  vtkLabeledContourPolyDataItem\n  vtkMarkerUtilities\n  vtkPen\n  vtkPolyDataItem\n  vtkPropItem\n  vtkTooltipItem)\n```\n\n----------------------------------------\n\nTITLE: Configuring XDMF3 as VTK Third-Party Module in CMake\nDESCRIPTION: This code sets up the XDMF3 library as a third-party internal module in VTK. It includes license information, version details, and SPDX metadata. The configuration also disables C++ symbol visibility settings that would conflict with XDMF3's Windows exports.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(XDMF_NO_REALPATH 1)\n\n# FIXME: xdmf3 only exports symbols properly on Windows.\nunset(CMAKE_CXX_VISIBILITY_PRESET)\nunset(CMAKE_VISIBILITY_INLINES_HIDDEN)\n\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkxdmf3/Copyright.txt\"\n  SPDX_LICENSE_IDENTIFIER\n    \"BSD-4-Clause\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2011 U.S. Army Research Laboratory\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://gitlab.kitware.com/third-party/xdmf.git@for/vtk-20210822-master-gfe7dd1ca\"\n  VERSION\n    \"1.2.11\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Variables for HDF5 Directories\nDESCRIPTION: This snippet sets various CMake variables to define directory paths related to the HDF5 project structure. These variables are used to facilitate the organization and referencing of source files, resources, and libraries within the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n#----------------------------------------------------------------------------- \n# Define some CMake variables for use later in the project \n#----------------------------------------------------------------------------- \nset (HDF_CONFIG_DIR          ${HDF5_SOURCE_DIR}/config)\nset (HDF_RESOURCES_DIR       ${HDF5_SOURCE_DIR}/config/cmake)\nset (HDF_RESOURCES_EXT_DIR   ${HDF5_SOURCE_DIR}/config/cmake_ext_mod)\nset (HDF5_SRC_DIR            ${HDF5_SOURCE_DIR}/src)\nset (HDF5_TEST_SRC_DIR       ${HDF5_SOURCE_DIR}/test)\nset (HDF5_CPP_SRC_DIR        ${HDF5_SOURCE_DIR}/c++)\nset (HDF5_CPP_TST_DIR        ${HDF5_SOURCE_DIR}/c++/test)\nset (HDF5_HL_SRC_DIR         ${HDF5_SOURCE_DIR}/hl)\nset (HDF5_HL_CPP_SRC_DIR     ${HDF5_SOURCE_DIR}/hl/c++)\nset (HDF5_HL_TOOLS_DIR       ${HDF5_SOURCE_DIR}/hl/tools)\nset (HDF5_TOOLS_DIR          ${HDF5_SOURCE_DIR}/tools)\nset (HDF5_TOOLS_SRC_DIR      ${HDF5_SOURCE_DIR}/tools/src)\nset (HDF5_PERFORM_SRC_DIR    ${HDF5_SOURCE_DIR}/tools/src/perform)\nset (HDF5_UTILS_DIR          ${HDF5_SOURCE_DIR}/utils)\nset (HDF5_F90_SRC_DIR        ${HDF5_SOURCE_DIR}/fortran)\nset (HDF5_JAVA_JNI_SRC_DIR         ${HDF5_SOURCE_DIR}/java/src/jni)\nset (HDF5_JAVA_HDF5_SRC_DIR        ${HDF5_SOURCE_DIR}/java/src/hdf)\nset (HDF5_JAVA_TEST_SRC_DIR        ${HDF5_SOURCE_DIR}/java/test)\nset (HDF5_JAVA_LIB_DIR             ${HDF5_SOURCE_DIR}/java/lib)\nset (HDF5_JAVA_LOGGING_JAR         ${HDF5_SOURCE_DIR}/java/lib/slf4j-api-1.7.33.jar)\nset (HDF5_JAVA_LOGGING_NOP_JAR     ${HDF5_SOURCE_DIR}/java/lib/ext/slf4j-nop-1.7.33.jar)\nset (HDF5_JAVA_LOGGING_SIMPLE_JAR  ${HDF5_SOURCE_DIR}/java/lib/ext/slf4j-simple-1.7.33.jar)\nset (HDF5_DOXYGEN_DIR              ${HDF5_SOURCE_DIR}/doxygen)\n```\n\n----------------------------------------\n\nTITLE: VTK External Module Configuration Example\nDESCRIPTION: Example showing how to configure VTK to use external HDF5 package using CMake configuration\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/build_settings.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nccmake -D HDF5_ROOT:PATH=/home/user/myhdf5 ../vtk/sources\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Dependencies\nDESCRIPTION: Locates required and optional VTK components needed for the IO examples.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/IO/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonCore\n    IOGeometry\n    IOLegacy\n    IOXML\n    InteractionStyle\n    vtksys\n  OPTIONAL_COMPONENTS\n    IOExport\n    IOImport\n    RenderingOpenGL2\n    TestingRendering)\n```\n\n----------------------------------------\n\nTITLE: Commented Python Test Configuration\nDESCRIPTION: Commented-out section for Python test configuration that would add Python-specific test data and directory if Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# if (VTK_WRAP_PYTHON)\n#   vtk_module_test_data(\n#     Data/can.ex2\n#   )\n#   add_subdirectory(Python)\n# endif ()\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Check and Library Setup\nDESCRIPTION: Defines a function to verify if a VTK module can be imported in Python before adding it to the build. This snippet emphasizes the integration between CMake and Python to ensure modules intended for testing are actually usable. It later sets the library properties and adds the necessary aliases as part of the build setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWheel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction (check_module_importable result module)\n  execute_process(\n    COMMAND \"${_vtk_testing_python_exe_config}\" -c \"import ${module}\"\n    OUTPUT_VARIABLE _\n    ERROR_VARIABLE _\n    RESULT_VARIABLE res)\n  if (NOT res)\n    set(\"${result}\" 1 PARENT_SCOPE)\n  else ()\n    set(\"${result}\" 0 PARENT_SCOPE)\n  endif ()\nendfunction ()\n\nforeach (vtk_module_to_test IN LISTS vtk_modules_to_test)\n  get_property(module_exclude_wrap GLOBAL PROPERTY \"_vtk_module_${vtk_module_to_test}_exclude_wrap\")\n  if (NOT module_exclude_wrap)\n    get_property(module_library_name GLOBAL PROPERTY \"_vtk_module_${vtk_module_to_test}_library_name\")\n    check_module_importable(is_importable \"vtkmodules.${module_library_name}\")\n    if (NOT is_importable)\n      continue ()\n    endif ()\n  endif ()\n\n  get_property(target_name GLOBAL PROPERTY \"_vtk_module_${vtk_module_to_test}_target_name\")\n  get_property(namespace GLOBAL PROPERTY \"_vtk_module_${vtk_module_to_test}_namespace\")\n  add_library(\"${target_name}\" INTERFACE)\n  add_library(\"${namespace}::${target_name}\" ALIAS \"${target_name}\")\n  if (NOT module_exclude_wrap)\n    _vtk_module_set_module_property(\"${target_name}\"\n      PROPERTY  \"library_name\"\n      VALUE     \"${module_library_name}\")\n  endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of C++ Subdirectory - CMake\nDESCRIPTION: This snippet checks if VTK testing for C++ is enabled and conditionally includes the 'Cxx' subdirectory. It is a setup for managing C++ specific test resources and modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XML/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\\\n  add_subdirectory(Cxx)\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring mpi4py MPI Module Library\nDESCRIPTION: Creates a shared library module for mpi4py with platform-specific configurations and compile definitions\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(vtkmpi4py.MPI MODULE\n  MPI.c)\nset_target_properties(vtkmpi4py.MPI\n  PROPERTIES\n    OUTPUT_NAME \"MPI\"\n    PREFIX      \"\"\n    LIBRARY_OUTPUT_DIRECTORY \"${mpi4py_build_dir}/mpi4py\")\n\ntarget_compile_definitions(vtkmpi4py.MPI\n  PRIVATE\n    PyMPI_MISSING_MPI_Type_create_f90_integer\n    PyMPI_MISSING_MPI_Type_create_f90_real\n    PyMPI_MISSING_MPI_Type_create_f90_complex\n    PyMPI_MISSING_MPI_Status_f2c\n    PyMPI_MISSING_MPI_Status_c2f)\n\ntarget_link_libraries(vtkmpi4py.MPI\n  PRIVATE\n    VTK::mpi\n    VTK::Python)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files in CMake\nDESCRIPTION: Specifies test data files for the VTK module, specifically JSON files related to WasmSceneManager tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/WasmSceneManager/scalar-bar-widget.blobs.json\n  Data/WasmSceneManager/scalar-bar-widget.states.json\n  Data/WasmSceneManager/simple.blobs.json)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK HDF5 Module and Header Installation in CMake\nDESCRIPTION: Includes CMake installation configuration and sets up header installation for H5pubconf.h. Creates the VTK::hdf5 module as a header-only module and sets up its target dependencies to vtkhdf5_src and vtkhdf5_hl_src.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\ninclude (CMakeInstallation.cmake)\nvtk_module_install_headers(\n  FILES   \"${HDF5_BINARY_DIR}/src/H5pubconf.h\"\n  SUBDIR  \"vtkhdf5\")\n\nvtk_module_add_module(VTK::hdf5\n  HEADER_ONLY)\ntarget_link_libraries(hdf5\n  INTERFACE\n    vtkhdf5_src\n    vtkhdf5_hl_src)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Directory Structure in CMake\nDESCRIPTION: Sets up test data directory patterns for the VTK module and adds the Cxx subdirectory to the build. The configuration specifies headsq data files using regex pattern matching.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Morphological/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/headsq/,REGEX:.*)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectory in CMake for VTK\nDESCRIPTION: This CMake command adds a subdirectory named 'proj' to the build. It indicates that the 'proj' directory contains additional CMakeLists.txt files or source code that should be included in the VTK project build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/include/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(proj)\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Options - CMake\nDESCRIPTION: This section sets the compiler options for the Cone executable using the defined optimizations and debug options, ensuring correct compilation settings are applied based on previously defined variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/Cone/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(Cone\n  PRIVATE\n    ${emscripten_compile_options}\n    ${emscripten_optimizations}\n    ${emscripten_debug_options})\ntarget_link_options(Cone\n  PRIVATE\n    ${emscripten_link_options}\n    ${emscripten_optimizations}\n    ${emscripten_debug_options})\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: CMake directive that includes the C++ source code directory in the VTK build process. This ensures that C++ components of the Visualization Toolkit are compiled during the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FFMPEG/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module with Classes\nDESCRIPTION: This snippet utilizes the `vtk_module_add_module` macro to add the `VTK::TestingIOSQL` module to the build system.  It configures the module to include the classes specified in the `classes` variable, effectively associating the 'DatabaseSchemaWith2Tables' class with the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/IOSQL/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::TestingIOSQL\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Removing DeepCopy in vtkPolygon\nDESCRIPTION: Streamlines the vtkPolygon class by removing unnecessary DeepCopy calls, optimizing memory usage.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvoid vtkPolygon::RemoveDeepCopy(/* parameters */) {\n    // Implementation to remove DeepCopy\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VPIC Definition Header in CMake\nDESCRIPTION: Configures the VPICDefinition header file by generating it from a template file in the source directory to the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/vtkvpic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/VPICDefinition.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/VPICDefinition.h)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test Data with CMake\nDESCRIPTION: This snippet adds data files to be used by VTK module tests. The `vtk_module_test_data` command specifies the paths to the required data files, ensuring they are available during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Color/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/libtiff/gourds_tiled_200x300.tif\n  Data/rgb2lab.vti\n  Data/vtk.png)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Anari Test Executable\nDESCRIPTION: Configures the test executable for VTK Anari rendering tests with specific settings for rendering factory and floating-point exceptions, including test interactor and utilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingAnariCxxTests tests RENDERING_FACTORY\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  vtkAnariTestInteractor.cxx\n  vtkAnariTestUtilities.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Including VTK Module Configuration\nDESCRIPTION: RST directives for including macro definitions and CMake module documentation\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/vtkModuleJSON.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: macros.hrst\n.. cmake-module:: ../../../../CMake/vtkModuleJson.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IOFDS Module\nDESCRIPTION: Sets up the VTK IOFDS module by defining classes, adding the module, and configuring test mangling. Includes the vtkFDSReader class registration and module configuration using CMake commands.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FDS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkFDSReader)\n\nvtk_module_add_module(VTK::IOFDS\n  CLASSES ${classes}\n  )\n\nvtk_add_test_mangling(VTK::IOFDS)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files\nDESCRIPTION: This snippet uses CMake's `configure_file` command to generate header files from template files. It takes an input file (e.g., `vtkTkAppInitConfigure.h.in`) and creates a configured output file (e.g., `vtkTkAppInitConfigure.h`) in the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"configure_file(\n  \\\"${CMAKE_CURRENT_SOURCE_DIR}/vtkTkAppInitConfigure.h.in\\\"\n  \\\"${CMAKE_CURRENT_BINARY_DIR}/vtkTkAppInitConfigure.h\\\")\nconfigure_file(\n  \\\"${CMAKE_CURRENT_SOURCE_DIR}/vtkTkInternals.h.in\\\"\n  \\\"${CMAKE_CURRENT_BINARY_DIR}/vtkTkInternals.h\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Python Test Configuration and Data Setup\nDESCRIPTION: Configures additional test data and adds Python test directory when Python wrapping is enabled in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/FlowPaths/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/combq.bin\n    Data/combxyz.bin\n  )\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring vtksqlite C++ Tests in CMake\nDESCRIPTION: This snippet configures C++ tests for the vtksqlite module. It defines a test named 'vtksqliteCxxTests' that includes TestIncludeSQLite.cxx with options specifying no data, validation, or output requirements, and then creates a test executable with the same name.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtksqliteCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeSQLite.cxx)\nvtk_test_cxx_executable(vtksqliteCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serialization Helper Sources in VTK\nDESCRIPTION: Conditionally adds serialization helper source files when VTK serialization wrapping is enabled. These helpers support serialization and deserialization of interactor style objects.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Hand written (de)serialization routines\nset(serialization_helper_sources)\nif (VTK_WRAP_SERIALIZATION)\n  list(APPEND serialization_helper_sources\n    vtkInteractorStyleSwitchSerDesHelper.cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Test Data and Including Python Subdirectory in CMake\nDESCRIPTION: Conditionally includes Python-specific test data files and the Python tests subdirectory if Python wrapping is enabled. This ensures Python tests have access to the data files they need.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/Particles.raw\n    Data/PentaHexa.vtk\n    Data/bluntfinq.bin\n    Data/bluntfinxyz.bin\n    Data/brainImageSmooth.vtk\n    Data/caffeine.pdb\n    Data/caffeine_notrailingspaces.pdb\n    Data/motor.g\n    Data/multi-ascii.q\n    Data/multi-ascii.xyz\n    Data/multi-bin-2D.q\n    Data/multi-bin-2D.xyz\n    Data/multi-bin-C.q\n    Data/multi-bin-C.xyz\n    Data/multi-bin-oflow.q\n    Data/multi-bin.f\n    Data/multi-bin.q\n    Data/multi-bin.xyz\n    Data/multi.p3d\n    Data/points.txt\n    Data/prism.neu\n    Data/test.p3d\n    Data/texThres2.vtk\n    Data/vwgt.coords\n    Data/vwgt.graph\n    Data/room.dat.h5\n    Data/room.cas.h5\n    Data/mesh_3ddp.dat.h5\n    Data/mesh_3ddp.cas.h5)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Specifying Header Files\nDESCRIPTION: Defines standalone header files to be included in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  vtkTuple.h\n)\n```\n\n----------------------------------------\n\nTITLE: Option and Subcommand Dependencies\nDESCRIPTION: Configure dependencies and exclusions between options and subcommands\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\n.excludes(option_or_subcommand)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.needs(option_or_subcommand)\n```\n\nLANGUAGE: c++\nCODE:\n```\n.require_option()\n```\n\nLANGUAGE: c++\nCODE:\n```\n.require_subcommand()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingFFMPEGOpenGL2 Module in CMake\nDESCRIPTION: Sets up the VTK RenderingFFMPEGOpenGL2 module by defining classes and adding module configuration with test mangling support. The configuration includes the vtkOpenGLMovieSphere class and establishes necessary module dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FFMPEGOpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkOpenGLMovieSphere\n  )\n\nvtk_module_add_module(VTK::RenderingFFMPEGOpenGL2\n  CLASSES ${classes}\n  )\nvtk_add_test_mangling(VTK::RenderingFFMPEGOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This code snippet utilizes the CMake command 'add_subdirectory' to incorporate the specified Cxx subdirectory into the project's build system. This is essential for including additional source files or libraries found in the Cxx directory. The expected input is the relative path to the subdirectory, which can contain its own CMakeLists.txt for further configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PostgreSQL/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Symbol Mangling for LZ4 Library\nDESCRIPTION: Modifies exported LZ4 symbols to use a 'vtklz4_' prefix, preventing namespace conflicts when embedded in VTK\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lz4/vtklz4/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Symbol prefix to avoid conflicts in shared libraries\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package\nDESCRIPTION: This snippet uses `find_package` to locate the VTK library and specifies the required components (CommonColor, FiltersGeometry, RenderingCore). If VTK is not found, it prints a message and returns, skipping the example.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/DataManipulation/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK\n  COMPONENTS\n    CommonColor\n    FiltersGeometry\n    RenderingCore)\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to CMake Build\nDESCRIPTION: Adds the Cxx (C++) subdirectory to the CMake build process. This directive instructs CMake to process the CMakeLists.txt file in the Cxx directory as part of the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Versioning for HDF5 API in Plaintext\nDESCRIPTION: Specifies versioning information for HDF5 API functions, including the function name, parameter types, version introduced, and subsequent revisions. This information is used to generate versioned headers for the HDF5 library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/H5vers.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFUNCTION: H5Acreate; ; v10, v18\nFUNCTION: H5Aiterate; H5A_operator; v10, v18\nFUNCTION: H5Dcreate; ; v10, v18\nFUNCTION: H5Dopen; ; v10, v18\nFUNCTION: H5Eclear; ; v10, v18\nFUNCTION: H5Eget_auto; ; v10, v18\nFUNCTION: H5Eprint; ; v10, v18\nFUNCTION: H5Epush; ; v14, v18\nFUNCTION: H5Eset_auto; ; v10, v18\nFUNCTION: H5Ewalk; H5E_walk, H5E_error; v10, v18\nFUNCTION: H5Fget_info; H5F_info; v18, v110\nFUNCTION: H5Gcreate; ; v10, v18\nFUNCTION: H5Gopen; ; v10, v18\nFUNCTION: H5Lget_info; H5L_info; v18, v112\nFUNCTION: H5Lget_info_by_idx; H5L_info; v18, v112\nFUNCTION: H5Literate; H5L_iterate; v18, v112\nFUNCTION: H5Literate_by_name; H5L_iterate; v18, v112\nFUNCTION: H5Lvisit; H5L_iterate; v18, v112\nFUNCTION: H5Lvisit_by_name; H5L_iterate; v18, v112\nFUNCTION: H5Oget_info; ; v18, v111, v112\nFUNCTION: H5Oget_info_by_name; ; v18, v111, v112\nFUNCTION: H5Oget_info_by_idx; ; v18, v111, v112\nFUNCTION: H5Ovisit; ; v18, v111, v112\nFUNCTION: H5Ovisit_by_name; ; v18, v111, v112\nFUNCTION: H5Pencode; ; v110, v112\nFUNCTION: H5Pget_filter; ; v10, v18\nFUNCTION: H5Pget_filter_by_id; ; v16, v18\nFUNCTION: H5Pinsert; ; v14, v18\nFUNCTION: H5Pregister; ; v14, v18\nFUNCTION: H5Rdereference; ; v10, v110\nFUNCTION: H5Rget_obj_type; ; v16, v18\nFUNCTION: H5Sencode; ; v18, v112\nFUNCTION: H5Tarray_create; ; v14, v18\nFUNCTION: H5Tcommit; ; v10, v18\nFUNCTION: H5Tget_array_dims; ; v14, v18\nFUNCTION: H5Topen; ; v10, v18\n```\n\n----------------------------------------\n\nTITLE: Installing VTK HDF5 Headers\nDESCRIPTION: Configures and installs VTK HDF5 header files. Generates configuration header from template and installs it to the appropriate location.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_hdf5.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_hdf5.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_hdf5.h\")\n```\n\n----------------------------------------\n\nTITLE: Setting Property Headers and Sources - CMake\nDESCRIPTION: This snippet sets up the necessary source and header files for property management in the HDF5 library. IDE_GENERATED_PROPERTIES manages the component properties.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset (H5P_SOURCES\n    ${HDF5_SRC_DIR}/H5P.c\n    ${HDF5_SRC_DIR}/H5Pacpl.c\n    ${HDF5_SRC_DIR}/H5Pdapl.c\n    ${HDF5_SRC_DIR}/H5Pdcpl.c\n    ${HDF5_SRC_DIR}/H5Pdeprec.c\n    ${HDF5_SRC_DIR}/H5Pdxpl.c\n    ${HDF5_SRC_DIR}/H5Pencdec.c\n    ${HDF5_SRC_DIR}/H5Pfapl.c\n    ${HDF5_SRC_DIR}/H5Pfcpl.c\n    ${HDF5_SRC_DIR}/H5Pfmpl.c\n    ${HDF5_SRC_DIR}/H5Pgcpl.c\n    ${HDF5_SRC_DIR}/H5Pint.c\n    ${HDF5_SRC_DIR}/H5Plapl.c\n    ${HDF5_SRC_DIR}/H5Plcpl.c\n    ${HDF5_SRC_DIR}/H5Pmapl.c\n    ${HDF5_SRC_DIR}/H5Pmcpl.c\n    ${HDF5_SRC_DIR}/H5Pocpl.c\n    ${HDF5_SRC_DIR}/H5Pocpypl.c\n    ${HDF5_SRC_DIR}/H5Pstrcpl.c\n    ${HDF5_SRC_DIR}/H5Ptest.c\n)\n\nset (H5P_HDRS\n    ${HDF5_SRC_DIR}/H5Ppublic.h\n)\nIDE_GENERATED_PROPERTIES (\"H5P\" \"${H5P_HDRS}\" \"${H5P_SOURCES}\" )\n```\n\n----------------------------------------\n\nTITLE: Checking for Large File System Support in CMake\nDESCRIPTION: Sets up a check to determine if the system supports large file systems (>2GB) by reading and executing a test file. This is necessary for XDMF to handle large datasets.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckCXXSourceRuns)\nfile(READ \"${CMAKE_CURRENT_SOURCE_DIR}/vtkRequireLargeFilesSupport.cxx\"\n  XDMF_REQUIRE_LARGE_FILE_SUPPORT_FILE)\ncheck_cxx_source_runs(\"${XDMF_REQUIRE_LARGE_FILE_SUPPORT_FILE}\"\n  XDMF_REQUIRE_LARGE_FILE_SUPPORT)\n```\n\n----------------------------------------\n\nTITLE: Git Configuration Example\nDESCRIPTION: Example showing the requirement for valid git configuration with proper username and email.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/coding_conventions.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nEvery developer must have a valid name and email configured in git.\\\n```\n\n----------------------------------------\n\nTITLE: Conditional VTK RenderingTk Test Addition\nDESCRIPTION: This snippet checks if the VTK::RenderingTk target exists and conditionally adds the squadViewer.py test if it does. This ensures that the RenderingTk-specific test is only included when the required module is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::RenderingTk)\n  vtk_add_test_python(\n    squadViewer.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test with 1 Process\nDESCRIPTION: This snippet adds an MPI test named `vtkFiltersParallelMPICxxTests-MPI test_1_procs` which runs `TestDistributedPointCloudFilter1` and `TestDistributedPointCloudFilter.cxx`. The `vtk_add_test_mpi` macro is used, and the number of processes is set to 2 in the following line.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkFiltersParallelMPICxxTests-MPI test_1_procs\n  TestDistributedPointCloudFilter1,TestDistributedPointCloudFilter.cxx\n  )\n\nset(vtkFiltersParallelMPICxxTests-MPI_NUMPROCS 2)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Test Modules and Adding Subdirectories - CMake\nDESCRIPTION: This snippet iterates through identified test modules, checking for dependencies and potentially adding subdirectories for any found testing configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (_vtk_build_test IN LISTS vtk_test_modules)\n  get_property(_vtk_build_test_depends GLOBAL\n    PROPERTY \"_vtk_module_${_vtk_build_test}_test_depends\")\n  if (NOT TARGET \"${_vtk_build_test}\")\n    message(STATUS \"Skipping ${_vtk_build_test} because it was not built.\")\n    continue ()\n  endif ()\n\n  set(_vtk_build_test_has_depends TRUE)\n  set(_vtk_build_test_missing_depends)\n  foreach (_vtk_build_test_depend IN LISTS _vtk_build_test_depends)\n    if (NOT TARGET \"${_vtk_build_test_depend}\")\n      list(APPEND _vtk_build_test_missing_depends\n        \"${_vtk_build_test_depend}\")\n      set(_vtk_build_test_has_depends FALSE)\n    endif ()\n  endforeach ()\n  if (NOT _vtk_build_test_has_depends)\n    string(REPLACE \";\" \"\\n  \" _vtk_build_test_missing_depends \"${_vtk_build_test_missing_depends}\")\n    message(STATUS \"Skipping ${_vtk_build_test} due to missing dependencies:\\n  ${_vtk_build_test_missing_depends}\")\n    continue ()\n  endif ()\n\n  get_property(_vtk_build_module_file GLOBAL\n    PROPERTY  \"_vtk_module_${_vtk_build_test}_file\")\n\n  get_filename_component(_vtk_build_module_dir \"${_vtk_build_module_file}\" DIRECTORY)\n  file(RELATIVE_PATH _vtk_build_module_subdir \"${VTK_TOP_DIR}\" \"${_vtk_build_module_dir}\")\n  if (EXISTS \"${VTK_TOP_DIR}/${_vtk_build_module_subdir}/Testing\")\n    add_subdirectory(\n      \"${VTK_TOP_DIR}/${_vtk_build_module_subdir}/Testing\"\n      \"${CMAKE_BINARY_DIR}/${_vtk_build_module_subdir}/Testing\")\n  endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Test Mangling for VTK FiltersVerdict\nDESCRIPTION: This line adds test mangling for the VTK::FiltersVerdict module using the vtk_add_test_mangling command. This process prepares the module for testing by ensuring that any class names are uniquely identifiable in testing scenarios.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersVerdict)\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for VTK Module\nDESCRIPTION: In this snippet, a variable 'classes' is defined to hold the list of classes associated with the vtkAlembicExporter. This is used later during module addition.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Alembic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAlembicExporter)\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header and Linking Threads for Loguru in CMake\nDESCRIPTION: This section generates export headers for the module and links the necessary thread libraries if stack traces are enabled or for general module functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(loguru\n  EXPORT_MACRO_NAME LOGURU_EXPORT\n  EXPORT_FILE_NAME vtkloguru_export.h)\n\nvtk_module_find_package(PACKAGE Threads)\nvtk_module_link(VTK::loguru PRIVATE Threads::Threads)\n\nif (loguru_have_stacktraces)\n  vtk_module_link(VTK::loguru PRIVATE ${CMAKE_DL_LIBS})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking VTK Libraries\nDESCRIPTION: This snippet links the VTK libraries to the executable targets (Arrays, Cube, SGrid, RGrid) using `target_link_libraries`.  The PRIVATE keyword ensures that the linking is private to each target.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/DataManipulation/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(Arrays PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(Cube PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(SGrid PRIVATE ${VTK_LIBRARIES})\ntarget_link_libraries(RGrid PRIVATE ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Wrapping for Xdmf in CMake\nDESCRIPTION: Sets up Python wrapping for Xdmf if enabled. It checks for shared library builds, links with necessary dependencies, and configures the installation directory for Python modules.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(XDMF_WRAP_PYTHON)\n  if (NOT BUILD_SHARED_LIBS)\n    message(FATAL_ERROR \"Python Wrappers do not function\"\n                        \" properly without shared libraries\")\n  endif (NOT BUILD_SHARED_LIBS)\n  if (XDMF_BUILD_DSM)\n    XDMF_SWIG_PYTHON(${XDMF_LIBNAME} XdmfCore XdmfDSM)\n  else()\n    XDMF_SWIG_PYTHON(${XDMF_LIBNAME} XdmfCore)\n  endif()\n  set(\n    XDMF_PYTHON_INSTALL_DIR\n    ${CMAKE_INSTALL_PREFIX}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/xdmf\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version and Project\nDESCRIPTION: Sets the minimum required CMake version and defines the project name for the WrappedMace project\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(WrappedMace)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake snippet configures test data for a VTK module and adds a subdirectory for C++ code. It specifies a test data file 'disk_out_ref.ex2' and includes the 'Cxx' subdirectory in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelExodus/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/disk_out_ref.ex2)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout for TestFramebufferHDR in CMake\nDESCRIPTION: Configures a custom timeout for the TestFramebufferHDR test, allowing for local customization of the timeout value.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT VTK_TEST_TIMEOUT_TestFramebufferHDR)\n  set(VTK_TEST_TIMEOUT_TestFramebufferHDR 300)\nendif()\nset_tests_properties(VTK::RenderingOpenGL2Cxx-TestFramebufferHDR\n  PROPERTIES TIMEOUT ${VTK_TEST_TIMEOUT_TestFramebufferHDR})\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Dependencies\nDESCRIPTION: Specifies the required JavaScript files for WebGL rendering functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebGLExporter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(javascript_files\n  webglRenderer.js\n  glMatrix.js)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Arguments in CMake for VTK Charts Core Tests\nDESCRIPTION: Sets up command-line arguments for various VTK Charts Core tests, including font file paths and error thresholds.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TestChartUnicode_ARGS\n  DATA{../Data/Fonts/DejaVuSans.ttf}\n  -E 25\n  )\nset(TestChartsOn3D_ARGS\n  -E 16\n  )\nset(TestColorTransferFunction_ARGS\n  -E 80\n  )\nset(TestContextUnicode_ARGS\n  DATA{../Data/Fonts/DejaVuSans.ttf}\n  )\nset(TestControlPointsHandleItem_ARGS\n  -E 30\n  )\nset(TestLinePlot_ARGS\n  -E 25\n  )\nset(TestLinePlot2_ARGS\n  -E 25\n  )\nset(TestLinePlotInteraction_ARGS\n  -E 25\n  )\nset(TestMultipleRenderers_ARGS\n  -E 25\n  )\nset(TestMultipleScalarsToColors_ARGS\n  -E 25\n  )\nset(TestParallelCoordinates_ARGS\n  -E 15\n  )\nset(TestParallelCoordinatesDouble_ARGS\n  -E 15\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VisRTX Dependencies for VTK RenderingRayTracing\nDESCRIPTION: Sets up VisRTX dependencies, including version checks and linking for the VTK RenderingRayTracing module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_VISRTX)\n  vtk_module_find_package(\n    PACKAGE VisRTX\n    CONFIG_MODE)\n  if (DEFINED VisRTX_VERSION AND\n      VisRTX_VERSION VERSION_GREATER_EQUAL \"0.2.0\")\n    message(FATAL_ERROR\n      \"VisRTX 0.2.0 and above are intended to be used via the ANARI interface. \"\n      \"See https://gitlab.kitware.com/vtk/vtk/-/merge_requests/10324 for progress.\")\n  endif ()\n  vtk_module_link(VTK::RenderingRayTracing\n    PUBLIC\n      VisRTX_DynLoad)\n  vtk_module_definitions(VTK::RenderingRayTracing\n    PRIVATE\n      VTK_ENABLE_VISRTX)\nendif ()\nvtk_add_test_mangling(VTK::RenderingRayTracing)\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Testfixture - Unix Command\nDESCRIPTION: Command to build the augmented TCL interpreter (testfixture) for running SQLite tests on Unix systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake testfixture\n```\n\n----------------------------------------\n\nTITLE: Creating VTK C++ Test Executable\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` CMake macro to create an executable for the VTK C++ test. It takes the test name as an argument, which is used to create the executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkoggCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Including RST Macros and CMake Module Documentation\nDESCRIPTION: RST directives for including external macro definitions and referencing a CMake module for VTK's Graphviz functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/vtkModuleGraphviz.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: macros.hrst\n.. cmake-module:: ../../../../CMake/vtkModuleGraphviz.cmake\n```\n\n----------------------------------------\n\nTITLE: Finding Boost Package - CMake\nDESCRIPTION: This snippet uses the 'vtk_module_find_package' command to find and include Boost as a private dependency for the VTK Filters Reeb Graph module. This ensures that any functionalities from Boost used within these filters are properly linked.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ReebGraph/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_find_package(PRIVATE\n  PACKAGE Boost)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Fides Module in CMake\nDESCRIPTION: Sets a variable 'headers' containing the header files for the Fides predefined data model component. These headers define the interfaces for data model functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/predefined/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  DataModelHelperFunctions.h\n  DataModelFactory.h\n  InternalMetadataSource.h\n  PredefinedDataModel.h\n  SupportedDataModels.h\n)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Document Include Directive\nDESCRIPTION: ReStructuredText directive to include build.md content file in the documentation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/build_instructions/index.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} build.md\n```\n\n----------------------------------------\n\nTITLE: Converting Vector Types in CLI11 (C++)\nDESCRIPTION: Example of using the two-parameter template overload with vectors, allowing vector elements to be validated against a different type than their final storage type.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<double> v1;\napp.add_option<std::vector<double>,int>(\"--vs\",v1);\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Test Suite\nDESCRIPTION: Command to run individual test files using the testfixture interpreter.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntestfixture test/main.test\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration File Generation\nDESCRIPTION: This snippet configures the `kwiml-config.cmake` file and generates a package version file, including compatibility information. It also installs the generated CMake configuration files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(src/kwiml-config.cmake.in kwiml-config.cmake @ONLY)\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/kwiml-config-version.cmake\"\n  VERSION ${KWIML_VERSION}\n  COMPATIBILITY AnyNewerVersion\n  )\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/kwiml-config.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/kwiml-config-version.cmake\n  DESTINATION ${KWIML_INSTALL_PACKAGE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining and Adding VTK ImagingMorphological Module in CMake\nDESCRIPTION: This snippet defines the classes to be included in the VTK::ImagingMorphological module and adds the module to the VTK build system. It also sets up test mangling for the module. The module contains various image processing filters for morphological operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Morphological/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkImageConnectivityFilter\n  vtkImageConnector\n  vtkImageContinuousDilate3D\n  vtkImageContinuousErode3D\n  vtkImageDilateErode3D\n  vtkImageIslandRemoval2D\n  vtkImageNonMaximumSuppression\n  vtkImageOpenClose3D\n  vtkImageSeedConnectivity\n  vtkImageSkeleton2D\n  vtkImageThresholdConnectivity)\n\nvtk_module_add_module(VTK::ImagingMorphological\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingMorphological)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: Instructs CMake to include and process the Cxx subdirectory during project configuration and build process. This enables compilation and integration of C++ source files and components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK Microscopy Domain\nDESCRIPTION: This snippet adds test mangling for the VTK::DomainsMicroscopy module. Test mangling helps ensure that the module's tests are properly linked and executed within the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::DomainsMicroscopy)\n```\n\n----------------------------------------\n\nTITLE: Symbol and Header Existence Checks\nDESCRIPTION: Use CMake's CheckSymbolExists and CheckIncludeFiles to detect system-specific capabilities and available headers\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/vtknetcdf/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckSymbolExists)\ncheck_symbol_exists(\"isfinite\" \"math.h\" HAVE_DECL_ISFINITE)\ncheck_symbol_exists(\"fsync\" \"unistd.h\" HAVE_FSYNC)\n\ninclude(CheckIncludeFiles)\ncheck_include_file(\"stdarg.h\" HAVE_STDARG_H)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ test executable\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` macro to create an executable for the `vtkRenderingParallelCxxTests` test. The `tests` variable is assumed to be defined elsewhere and contains the list of source files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingParallelCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Pushing xdmf2 Updates to Main Repository\nDESCRIPTION: Pushes the committed changes back to the main repository and cleans up the temporary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push .. HEAD:xdmf2-upstream\ncd ..\nrm -rf xdmf2-tmp\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test in VTK\nDESCRIPTION: Configures a Python test script using VTK's test addition mechanism, specifically adding TestPLYReadWrite.py to the test suite\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestPLYReadWrite.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting TCL Directory for Windows Builds\nDESCRIPTION: Command to set the TCL directory environment variable for Windows builds, which is required for running tests and certain build processes.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nset TCLDIR=c:\\Tcl\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake snippet configures a VTK module by specifying test data and adding a C++ subdirectory. It uses the vtk_module_test_data function to include a VTK data file and the add_subdirectory command to include the Cxx directory in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/ironProt.vtk)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Project Naming and Version Definition\nDESCRIPTION: Sets the project name and version, using a variable to allow flexible naming and versioning of the QtQuickBoxWidget project\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickBoxWidget/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MYNAME QtQuickBoxWidget)\n\nproject(${MYNAME} VERSION 1.0)\n```\n\n----------------------------------------\n\nTITLE: Protected Members Moved to Private in vtkAdaptiveDataSetSurfaceFilter\nDESCRIPTION: List of protected member variables that have been moved to private access in the vtkAdaptiveDataSetSurfaceFilter class in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/htg-representation-decimation.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nAxis1\nAxis2\nCells\nDimension\nFixedLevelMax\nInData\nLastRendererSize\nMask\nOrientation\nOutData\nPoints\nRenderer\nViewPointDepend\n```\n\n----------------------------------------\n\nTITLE: Configuring Base VTK Test Data in CMake\nDESCRIPTION: Declares common test data files needed for VTK tests. This snippet includes basic data files (an Exodus file and a VTK polydata file) that are required for the base test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Hybrid/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/can.ex2\n  Data/cow.vtp)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Directory Structure in CMake\nDESCRIPTION: Specifies AVM format test data files to be used in VTK module testing and adds the C++ source code subdirectory to the build. The test data includes hexahedral and 2D wing geometry files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Avmesh/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/vwing_hexle.avm\n  Data/vwing_2d.avm)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Installing HDF5 with GNU Autotools\nDESCRIPTION: Standard installation procedure for HDF5 using GNU autotools, involving configure, make, and make install commands\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./configure\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in CMake Build\nDESCRIPTION: CMake directive to include the Cxx subdirectory in the build process, which contains the C++ source files for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/OpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Legacy Pipeline Update Example\nDESCRIPTION: Example showing the old way of requesting a subset during pipeline update, requiring UpdateInformation() call.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvtkNew<vtkRTAnalyticSource> source;\n// Set some properties of source here\nsource->UpdateInformation();\nsource->SetUpdateExtent(0, 5, 0, 5, 2, 2);\nsource->Update();\n```\n\n----------------------------------------\n\nTITLE: Initializing Sources and Private Headers for VTK Module\nDESCRIPTION: Initializes empty lists for sources and private headers that will be populated later in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources)\nset(private_headers)\n```\n\n----------------------------------------\n\nTITLE: Basic VTK Class Override in Python\nDESCRIPTION: Demonstrates how to create a simple override of the vtkPoints class using Python decorators. Shows the basic syntax for creating and removing class overrides.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/PythonWrappers.md#2025-04-21_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkCommonCore import vtkPoints\n@vtkPoints.override\nclass CustomPoints(vtkPoints):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Values with scnlib in C++\nDESCRIPTION: Demonstrates how to read multiple values from an input string using scnlib. This example shows parsing two integers and then a string from the remaining input, showcasing the use of result->values() for accessing multiple parsed items.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <scn/scan.h>\n\nint main() {\n    auto input = std::string{\"123 456 foo\"};\n    \n    auto result = scn::scan<int, int>(input, \"{} {}\");\n    // result == true\n    // result->range(): \" foo\"\n    \n    // All read values can be accessed through a tuple with result->values()\n    auto [a, b] = result->values();\n    \n    // Read from the remaining input\n    // Could also use scn::ranges::subrange{result->begin(), result->end()} as input\n    auto result2 = scn::scan<std::string>(result->range(), \"{}\");\n    // result2 == true\n    // result2->range().empty() == true\n    // result2->value() == \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Wrapped Classes\nDESCRIPTION: Defines helper classes that should not be wrapped for language bindings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_classes\n  vtkLICNoiseHelper\n  vtkSurfaceLICHelper)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK Common System Module\nDESCRIPTION: This snippet defines a list of classes that are part of the VTK Common System module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkClientSocket\n  vtkDirectory\n  vtkExecutableRunner\n  vtkServerSocket\n  vtkSocket\n  vtkSocketCollection\n  vtkTimerLog)\n```\n\n----------------------------------------\n\nTITLE: Set Test Property for GeoProjection\nDESCRIPTION: This CMake snippet appends a FAIL_REGULAR_EXPRESSION property to the VTK::GeovisCorePython-TestGeoProjection test, ensuring that it fails if the phrase 'Cannot find proj.db' appears in the output.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(TEST VTK::GeovisCorePython-TestGeoProjection\n  APPEND\n  PROPERTY\n    FAIL_REGULAR_EXPRESSION \"Cannot find proj.db\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated Symbols Usage in CMake for HDF5\nDESCRIPTION: This snippet defines a CMake option to enable or disable deprecated public API symbols in HDF5. It sets the H5_NO_DEPRECATED_SYMBOLS variable based on the option.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\noption (HDF5_ENABLE_DEPRECATED_SYMBOLS \"Enable deprecated public API symbols\" ON)\nif (HDF5_ENABLE_DEPRECATED_SYMBOLS)\n  set (H5_NO_DEPRECATED_SYMBOLS 0)\nelse ()\n  set (H5_NO_DEPRECATED_SYMBOLS 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding MPI Test for Polyhedral Mesh Distributed Data Filter\nDESCRIPTION: Adds an MPI-based test for the Polyhedral Mesh Distributed Data Filter. This test uses specific data and does not perform validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mpi(vtkFiltersParallelGeometryCxxTests-MPI data_tests_4_procs\n  TestPolyhedralMeshDistributedDataFilter.cxx,TESTING_DATA,NO_VALID\n)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Module Headers\nDESCRIPTION: This code snippet installs the header file generated from the configuration command into the VTK module. The 'vtk_module_install_headers' function specifies which files to install, ensuring that the generated header is available for use in the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_nlohmannjson.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectory in CMake\nDESCRIPTION: This CMake snippet configures test data for a VTK module using the 'dragon.ply' file and adds the 'Cxx' subdirectory to the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenVR/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/dragon.ply)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Verifying Source Code on Windows\nDESCRIPTION: Command to verify the authenticity of SQLite source code using nmake on Windows systems\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_13\n\nLANGUAGE: batch\nCODE:\n```\nnmake /f Makefile.msc verify-source\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Transforms C++ Tests in CMake\nDESCRIPTION: This CMake snippet sets up C++ tests for the VTK Common Transforms module. It defines a test suite with three test files (TestTransform.cxx, TestLandmarkTransform.cxx, and TestThinPlateSplineTransform.cxx) with the NO_DATA, NO_VALID, and NO_OUTPUT options, and then creates the corresponding test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Transforms/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonTransformsCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestTransform.cxx\n  TestLandmarkTransform.cxx\n  TestThinPlateSplineTransform.cxx\n  )\nvtk_test_cxx_executable(vtkCommonTransformsCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Texture Module in CMake\nDESCRIPTION: This snippet adds the VTK Filters Texture module to the VTK project using the vtk_module_add_module function. It includes the previously defined classes and sets up test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Texture/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersTexture\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersTexture)\n```\n\n----------------------------------------\n\nTITLE: Finding and Requiring JNI Package\nDESCRIPTION: Locates the Java Native Interface (JNI) package as a required dependency for the VTK Java module build process\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Java/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(JNI REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Modules with CMake\nDESCRIPTION: The snippet declares a CMake list named 'classes' containing VTK XML classes. It then adds a module 'VTK::IOXMLParser' with these classes and configures a test for it. Dependencies include CMake and relevant VTK source files. The main parameter is 'classes', defining the classes that are part of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/XMLParser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkXMLDataParser\n  vtkXMLParser\n  vtkXMLUtilities)\n\nvtk_module_add_module(VTK::IOXMLParser\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOXMLParser)\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Scene Manager Target Configuration\nDESCRIPTION: Configures the WebAssembly Scene Manager executable target with compilation and linking options.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_executable(WasmSceneManager\n  BASENAME vtkWasmSceneManager\n  vtkWasmSceneManagerEmBinding.cxx)\nadd_executable(\"VTK::WasmSceneManager\" ALIAS\n  WasmSceneManager)\ntarget_link_libraries(WasmSceneManager\n  PRIVATE\n    VTK::WebAssembly)\ntarget_compile_options(WasmSceneManager\n  PRIVATE\n    ${emscripten_compile_options}\n    ${emscripten_optimizations}\n    ${emscripten_debug_options})\ntarget_link_options(WasmSceneManager\n  PRIVATE\n    ${emscripten_link_options}\n    ${emscripten_optimizations}\n    ${emscripten_debug_options})\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags and Platform-Specific Settings\nDESCRIPTION: Adjusts compiler flags for different platforms including OSF1, HP-UX, and SunPro. Sets ANSI support flags and handles platform-specific compiler requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_ANSI_CFLAGS)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${CMAKE_ANSI_CFLAGS}\")\nendif()\n\nif(NOT CMAKE_COMPILER_IS_GNUCXX)\n  if(CMAKE_SYSTEM MATCHES \"OSF1-V.*\")\n    string(REGEX MATCH \"-timplicit_local\"\n      KWSYS_CXX_FLAGS_HAVE_IMPLICIT_LOCAL \"${CMAKE_CXX_FLAGS}\")\n    if(NOT KWSYS_CXX_FLAGS_HAVE_IMPLICIT_LOCAL)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -timplicit_local\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: This snippet sets the project name to \"QtQuickProperty\" using the `project()` command. This name is used for the generated build system files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MYNAME QtQuickProperty)\n\nproject(${MYNAME} VERSION 1.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Base VTK IO Geometry Tests in CMake\nDESCRIPTION: Defines the initial set of C++ tests for the VTK IO Geometry module, including tests for various readers and writers without validation requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOGeometryCxxTests tests\n  TestDataObjectIO.cxx,NO_VALID\n  UnstructuredGridCellGradients.cxx\n  UnstructuredGridFastGradients.cxx\n  UnstructuredGridGradients.cxx\n  TestFLUENTReader.cxx,NO_VALID\n  TestGLTFReaderMalformed.cxx,NO_VALID\n  TestOBJReaderDouble.cxx\n  TestOBJPolyDataWriter.cxx\n  TestOBJReaderComments.cxx,NO_VALID\n  TestOBJReaderGroups.cxx,NO_VALID\n  TestOBJReaderMaterials.cxx,NO_VALID\n  TestOBJReaderMultiline.cxx,NO_VALID\n  TestOBJReaderMultiTexture.cxx,NO_VALID\n  TestOBJWriterMultiTexture.cxx,NO_VALID\n  TestOBJReaderNormalsTCoords.cxx,NO_VALID\n  TestOBJReaderRelative.cxx,NO_VALID\n  TestOBJReaderSingleTexture.cxx,NO_VALID\n  TestOBJReaderMalformed.cxx,NO_VALID\n  TestOFFReader.cxx,NO_VALID\n  TestOpenFOAMReader.cxx\n  TestOpenFOAMReaderDimensionedFields.cxx,NO_VALID\n  TestOpenFOAMReaderFaceZone.cxx\n  TestOpenFOAMReaderLagrangianSerial.cxx,NO_VALID\n  TestOpenFOAMReaderLargePolyhedral.cxx,NO_VALID\n  TestOpenFOAMReaderPrecision.cxx\n  TestOpenFOAMReaderRegEx.cxx,NO_VALID\n  TestOpenFOAMReaderValuePointPatch.cxx\n  TestOpenFOAMReaderWeighByCellSize.cxx\n  TestProStarReader.cxx\n  TestTecplotReader.cxx\n  TestAMRReadWrite.cxx,NO_VALID\n  TestSimplePointsReaderWriter.cxx,NO_VALID\n  TestHoudiniPolyDataWriter.cxx,NO_VALID\n  UnitTestSTLWriter.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling CMAKE_AUTOMOC\nDESCRIPTION: This snippet sets the `CMAKE_AUTOMOC` variable to 1. This instructs CMake to automatically handle moc (Meta-Object Compiler) processing for Qt projects, simplifying the build process by automatically generating meta-object code for Qt classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(CMAKE_AUTOMOC 1)\"\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory to VTK Build\nDESCRIPTION: This CMake directive adds the Cxx directory to the build process, indicating that the C++ source code for VTK is located in this subdirectory and should be included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Architecture for XDMF Build\nDESCRIPTION: Determines the current system architecture and sets up the ARCH_TO_BUILD variable with platform-specific settings for the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nstring(REGEX REPLACE \"-\" \"_\" XDMF_SYSTEM ${CMAKE_SYSTEM_NAME})\n\nif (FALSE) # XXX(kitware): hide cache variables\nset(ARCH_TO_BUILD ${XDMF_SYSTEM} CACHE INTERNAL \"Host Arcitecture : Linux IRIXN32 IRIX64 AIX CYGWIN\")\nelse ()\nset(ARCH_TO_BUILD ${XDMF_SYSTEM})\nendif ()\n# Allow the user to customize their build with some local options\n#\nadd_definitions(-D${ARCH_TO_BUILD})\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests with VTK in CMake\nDESCRIPTION: This snippet uses the 'vtk_add_test_cxx' function to add C++ test files to the VTK project. It specifies that the tests will not use data, validation, or output checking. The 'vtk_test_cxx_executable' function is then used to configure the executable for these tests. Key parameter includes the test name ('vtkpegtlCxxTests') and the test files ('tests'). It assumes a VTK environment setup with these functions available.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pegtl/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkpegtlCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludePEGTL.cxx)\nvtk_test_cxx_executable(vtkpegtlCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility Properties for VTK scn Module\nDESCRIPTION: Configures symbol visibility settings for the scn target, hiding symbols by default and managing inline visibility for better binary compatibility and performance.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(scn PROPERTIES\n  CXX_VISIBILITY_PRESET hidden\n  VISIBILITY_INLINES_HIDDEN ON)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Loguru Module Headers and Sources in CMake\nDESCRIPTION: This snippet sets up CMake variables for Loguru's header and source files, and checks the availability of specific system headers, adjusting configurations accordingly.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/vtkloguru/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  loguru.hpp\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkloguru_export.h\")\n\nset(sources\n  loguru.cpp)\n\ninclude(CheckIncludeFile)\ncheck_include_file(\"<cxxabi.h>\" VTK_LOGURU_HAVE_CXXABI_H)\ncheck_include_file(\"<dlfcn.h>\" VTK_LOGURU_HAVE_DLFCN_H)\ncheck_include_file(\"<execinfo.h>\" VTK_LOGURU_HAVE_EXECINFO_H)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: Specifies test data files for a VTK module, including PIO and HDF5 formats. These files are likely used for testing the module's functionality with various input data.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PIO/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/PIO/simple.pio\n  Data/PIO/dumps.simple/simple-dmp000000\n  Data/PIO/dumps.simple/simple-dmp000010\n  Data/PIO/simple_h5.pio\n  Data/PIO/dumps.simple_h5/simple-dmp000000.h5\n  Data/PIO/dumps.simple_h5/simple-dmp000005.h5\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Wrapping and Test Data in CMake\nDESCRIPTION: This CMake script checks if VTK_WRAP_PYTHON is enabled, adds test data files, and includes the Python subdirectory. It ensures necessary data files are available for testing and sets up the Python wrapping environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Texture/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/bluntfinq.bin\n    Data/bluntfinxyz.bin\n    Data/earth.ppm\n    Data/masonry.bmp\n    Data/texThres2.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring XDMF2 Module Visibility Settings in CMake\nDESCRIPTION: Disables C++ symbol visibility presets and inline hidden visibility for the XDMF2 module, as it only exports symbols properly on Windows platforms.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# FIXME: xdmf2 only exports symbols properly on Windows.\nunset(CMAKE_CXX_VISIBILITY_PRESET)\nunset(CMAKE_VISIBILITY_INLINES_HIDDEN)\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Wrap Classes - CMake\nDESCRIPTION: This snippet creates a list for classes that will not be wrapped, optimizing the interface for certain OpenGL Volume rendering components, providing a better performance in graphics rendering.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(nowrap_classes\n  vtkOpenGLVolumeGradientOpacityTable\n  vtkOpenGLVolumeLookupTable\n  vtkOpenGLVolumeMaskGradientOpacityTransferFunction2D\n  vtkOpenGLVolumeMaskTransferFunction2D\n  vtkOpenGLVolumeOpacityTable\n  vtkOpenGLVolumeRGBTable\n  vtkOpenGLVolumeTransferFunction2D\n  vtkVolumeInputHelper)\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header in CMake\nDESCRIPTION: This snippet uses the CMake function 'generate_export_header' to create an export header file for the VTK double conversion module. The 'EXPORT_MACRO_NAME' defines the macro used for symbol exporting, while 'EXPORT_FILE_NAME' specifies the output location for the generated header. This is essential for managing symbol visibility in shared libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/vtkdoubleconversion/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(doubleconversion\n  EXPORT_MACRO_NAME VTKDOUBLECONVERSION_EXPORT\n  EXPORT_FILE_NAME double-conversion/vtkdoubleconversion_export.h)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests in VTK\nDESCRIPTION: This snippet is responsible for adding C++ test files to the VTK module's testing suite. It includes multiple test files like 'TestQuadraticHexaXdmfReader.cxx', 'TestTemporalXdmfReaderWriter.cxx', and 'XdmfTestVTKIO.cxx'. These tests are added without validation tags, indicating they may not require output validation checks. This setup helps in efficiently running a set of predefined test cases for the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOXdmf2CxxTests tests\n  TestQuadraticHexaXdmfReader.cxx,NO_VALID\n  TestTemporalXdmfReaderWriter.cxx,NO_VALID\n  XdmfTestVTKIO.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test to VTK Project using CMake\nDESCRIPTION: This CMake command adds a Python test script named 'testPythonItem.py' to the VTK project's test suite. It utilizes the custom VTK CMake function 'vtk_add_test_python' to integrate the Python test into the build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/PythonContext2D/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  testPythonItem.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Detecting and Configuring Dynamic Library Type\nDESCRIPTION: This snippet uses CMake functions to detect if the LZMA library is built as a shared library. The result is stored in the LZMA_BUILT_AS_DYNAMIC_LIB variable. It uses vtk_detect_library_shared to check the linking type of LZMA::LZMA.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/lzma/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(vtkDetectLibraryType)\nvtk_detect_library_shared(vtklzma LZMA::LZMA)\n\nset(LZMA_BUILT_AS_DYNAMIC_LIB \"${vtklzma_is_shared}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling\nDESCRIPTION: This snippet uses the `vtk_add_test_mangling` CMake function, likely to add tests related to symbol mangling issues within the VTK::RenderingOpenXRRemoting module. Mangling can be problematic with certain compilers/linkers and this helps ensure compatibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingOpenXRRemoting)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Headers with CMake\nDESCRIPTION: The `vtk_module_install_headers` command installs the specified headers into the build tree. It takes the subdirectory where the headers will be installed and the directories from which the headers will be copied as parameters. This command facilitates the installation of VTK CLI11 headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  SUBDIR      \"vtkcli11\"\n  DIRECTORIES \"CLI\")\n```\n\n----------------------------------------\n\nTITLE: Setting Test Arguments for SQLite Table Read/Write\nDESCRIPTION: This snippet sets the test arguments for the SQLite table read/write tests by specifying the input data file. It ensures that the specified data file is correctly referenced for the tests to utilize.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/SQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TestSQLiteTableReadWrite_ARGS DATA{../Data/Input/simple_table.vtk})\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK Module - CMake\nDESCRIPTION: This code snippet adds test mangling for the VTK module 'VTK::IOVPIC' using the vtk_add_test_mangling command, which is used to manage the naming of tests and prevent conflicts. It is essential for maintaining organized test procedures within the module development.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/VPIC/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOVPIC)\n```\n\n----------------------------------------\n\nTITLE: Test Subdirectory Inclusion\nDESCRIPTION: This snippet adds the test subdirectory to the build if testing is enabled via `KWIML_TEST_ENABLE`. This allows tests to be built and run as part of the KWIML project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(KWIML_TEST_ENABLE)\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring vtk_eigen.h Header File\nDESCRIPTION: This CMake code uses the `configure_file` command to generate the `vtk_eigen.h` header file from the template `vtk_eigen.h.in`. The generated header file is placed in the `${CMAKE_CURRENT_BINARY_DIR}` directory. This allows for dynamic configuration of the header file based on CMake variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_eigen.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_eigen.h\")\n```\n\n----------------------------------------\n\nTITLE: Conditional VTK Python Test Configuration in CMake\nDESCRIPTION: Sets up additional test data and includes the Python subdirectory if VTK_WRAP_PYTHON is enabled. This block specifies various data files for Python tests, including DEM, VTK, SLC, PNG, and regex-matched files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/SainteHelens.dem\n    Data/headsq/,REGEX:.*\n    Data/ironProt.vtk\n    Data/nut.slc\n    Data/ruler.png\n    Data/usa.vtk\n    Data/vtk.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Licensing Attribution Text for Binaries\nDESCRIPTION: Required attribution text for binary distributions or applications statically linking libjpeg-turbo\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis software is based in part on the work of the Independent JPEG Group.\n```\n\n----------------------------------------\n\nTITLE: Adding CXX Tests for GL2PS Rendering\nDESCRIPTION: Sets up C++ tests for the GL2PS OpenGL2 rendering system without validation checks.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/GL2PSOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingGL2PSOpenGL2CxxTests tests NO_VALID ${GL2PSTests})\n```\n\n----------------------------------------\n\nTITLE: Adding VTK RenderingContext2D Module\nDESCRIPTION: Configures the VTK RenderingContext2D module using the defined classes and adds test mangling support.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Context2D/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingContext2D\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::RenderingContext2D)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing VTK Verdict Header\nDESCRIPTION: Configures a header file for VTK's Verdict integration by processing a template file and copying it to the build directory. The resulting header is then installed with the VTK module installation system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_verdict.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_verdict.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_verdict.h\")\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ and Python Testing Directory Setup\nDESCRIPTION: Conditionally adds C++ and Python testing subdirectories based on build configuration flags. C++ tests are added if not explicitly disabled, and Python tests are added if Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Infovis/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test using CMake\nDESCRIPTION: This snippet uses the vtk_add_test_cxx function to add a C++ test for the VTK project. It specifies that no data, validation, or output is required for the test. The test is based on TestIncludeKWIML.cxx and must be present in the source tree for successful compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkkwimlCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeKWIML.cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Distribution Name Suffix\nDESCRIPTION: CMake configuration to customize the distribution name suffix for VTK wheel packages. Adds a suffix after 'vtk' in the package name.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_python_wheels.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(VTK_DIST_NAME_SUFFIX \"foo\" CACHE STRING \"\")\n```\n\n----------------------------------------\n\nTITLE: Including Socket Features Test Configuration in CMake\nDESCRIPTION: This snippet includes an external CMake file that likely contains tests for socket features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/vtkTestSocketFeatures.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Configure pkg-config files for libogg\nDESCRIPTION: Defines a function to configure pkg-config files, which are used to specify how software packages should be compiled and linked. This snippet sets various directory paths and the version variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\nfunction(configure_pkg_config_file pkg_config_file_in)\n    set(prefix ${CMAKE_INSTALL_PREFIX})\n    set(exec_prefix ${CMAKE_INSTALL_FULL_BINDIR})\n    set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})\n    set(includedir ${CMAKE_INSTALL_FULL_INCLUDEDIR})\n    set(VERSION ${PROJECT_VERSION})\n    string(REPLACE \".in\" \"\" pkg_config_file ${pkg_config_file_in})\n    configure_file(${pkg_config_file_in} ${pkg_config_file} @ONLY)\nendfunction()\n\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data for VTK Python Wrapping\nDESCRIPTION: This snippet checks if Python wrapping for VTK is enabled, and if so, it includes a specific test data file for Python tests. This allows the inclusion of relevant test data specifically necessary for testing the Python interface of VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Volume/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/m4_TotalDensity.cube)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Fast Float Headers using CMake\nDESCRIPTION: This CMake directive installs VTK fast_float headers into the 'vtkfast_float/vtkfast_float' subdirectory. It lists all header files to be installed as part of the module installation process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/vtkfast_float/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  SUBDIR \"vtkfast_float/vtkfast_float\"\n  FILES\n    vtkfast_float/ascii_number.h\n    vtkfast_float/bigint.h\n    vtkfast_float/constexpr_feature_detect.h\n    vtkfast_float/decimal_to_binary.h\n    vtkfast_float/digit_comparison.h\n    vtkfast_float/fast_float.h\n    vtkfast_float/fast_table.h\n    vtkfast_float/float_common.h\n    vtkfast_float/parse_number.h\n    vtkfast_float/vtkfast_float_mangle.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Classes to VTK Module\nDESCRIPTION: This snippet adds the defined classes to the VTK::FiltersVerdict module using the vtk_module_add_module command. It integrates the class names stored in the 'classes' variable, which consolidates these class definitions into the module system for the VTK toolkit.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersVerdict\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Parallel Core CXX Tests\nDESCRIPTION: Sets up C++ test cases for VTK Parallel Core module including field data serialization and threaded queue tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkParallelCoreCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestFieldDataSerialization.cxx\n  TestThreadedCallbackQueue.cxx\n  TestThreadedTaskQueue.cxx\n  )\nvtk_test_cxx_executable(vtkParallelCoreCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Including Directories for KISS FFT Module\nDESCRIPTION: This snippet specifies the include directories for the kissfft target, ensuring that the current source directory is included during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(kissfft\\n  PRIVATE\\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\")\n```\n\n----------------------------------------\n\nTITLE: Running Doxygen Command\nDESCRIPTION: Example command for running Doxygen in the VTK utilities directory to generate documentation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nD:\\src\\kitware\\vtk\\VTK\\Utilities\\Doxygen> doxygen\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Web Python Package\nDESCRIPTION: Configures the VTK Web Python package using vtk_module_add_python_package. Specifies the package name, files to include, and the installation destination.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_python_package(VTK::WebPython\n  FILES               ${files}\n  PACKAGE             \"vtkmodules.web\"\n  MODULE_DESTINATION  \"${VTK_PYTHON_SITE_PACKAGES_SUFFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Python Testing Directory in VTK CMake Configuration\nDESCRIPTION: This snippet checks if Python wrapping is enabled for VTK and adds the 'Python' subdirectory to the build if the condition is met. It allows for conditional compilation of Python tests in the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Executing C++ Test Executable for VTK\nDESCRIPTION: This snippet creates an executable for the C++ tests using the `vtk_test_cxx_executable` function. The `vtkIOMovieCxxTests` includes the tests specified earlier and is prepared for execution.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Movie/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOMovieCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factories\nDESCRIPTION: Declares object factory overrides for Nrrd and Image readers to support MPI functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIImage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE      vtkNrrdReader\n  OVERRIDE  vtkPNrrdReader)\nvtk_object_factory_declare(\n  BASE      vtkImageReader\n  OVERRIDE  vtkMPIImageReader)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Private Headers\nDESCRIPTION: Lists the private header files used within the VTK::IOParallel module.  These headers are not exposed to external modules, and are used for internal implementation details.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_headers\n  vtkMultiBlockPLOT3DReaderInternals.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK FiltersTensor Module in CMake\nDESCRIPTION: This snippet defines a list of classes to be included in the VTK FiltersTensor module. It specifies two classes: vtkTensorPrincipalInvariants and vtkYieldCriteria.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Tensor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkTensorPrincipalInvariants\n  vtkYieldCriteria)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of C++ Tests (Commented)\nDESCRIPTION: Commented code section that would conditionally compile C++ tests if enabled. Currently disabled as it's commented out in the source file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# if (NOT vtk_testing_cxx_disabled)\n#   add_subdirectory(Cxx)\n# endif ()\n```\n\n----------------------------------------\n\nTITLE: Setting private VTK classes for IOAMR\nDESCRIPTION: This snippet sets the list of private classes that are part of the VTK::IOAMR module. These internal classes are used for the implementation details of reading AMR data formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/AMR/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_classes\n  vtkAMREnzoReaderInternal\n  vtkAMReXGridReaderInternal\n  vtkAMRFlashReaderInternal\n  vtkAMRVelodyneReaderInternal)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: Adds the RenderingLICOpenGL2 module to VTK with all configured classes, sources, and headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingLICOpenGL2\n  CLASSES ${classes}\n  NOWRAP_CLASSES ${nowrap_classes}\n  SOURCES ${shader_cxx_files}\n  HEADERS ${headers}\n  PRIVATE_HEADERS ${shader_h_files})\n```\n\n----------------------------------------\n\nTITLE: Configuring Theora Header Files in CMake\nDESCRIPTION: Defines the header files for the Theora library, including public API headers and an export header that will be generated.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  include/theora/codec.h\n  include/theora/theora.h\n  include/theora/theoradec.h\n  include/theora/theoraenc.h\n  include/theora/vtk_theora_mangle.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/include/theora/vtktheora_export.h\")\n```\n\n----------------------------------------\n\nTITLE: Project Version and Basic Setup\nDESCRIPTION: Initializes the FIDES project with C/C++ languages and version 0.1, and sets up the CMake module path.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(FIDES LANGUAGES C CXX VERSION 0.1)\n\nlist(INSERT CMAKE_MODULE_PATH 0 \"${PROJECT_SOURCE_DIR}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Header Files for vtkutf8 Module - CMake\nDESCRIPTION: This snippet installs multiple header files located in the 'vtkutf8/utf8' directory including 'checked.h', 'core.h', and 'unchecked.h'. It organizes multiple files under a specified subdirectory for better structure.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/utf8/vtkutf8/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\\\n  SUBDIR  \"vtkutf8/utf8\"\\\n  FILES   \"utf8/checked.h\"\\\n          \"utf8/core.h\"\\\n          \"utf8/unchecked.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module Test Data in CMake\nDESCRIPTION: This snippet uses `vtk_module_test_data` to add test data for a VTK module. It specifies the directory containing the data (`Data/ex-blow_5/`) and uses a regular expression (`REGEX:.*`) to include all files within that directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/ex-blow_5/,REGEX:.*)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Portability and Compatibility Warnings\nDESCRIPTION: Suppression rules for warnings related to portability issues and functions that are platform-specific. These suppressions are necessary because VTK supports multiple platforms with different function availability.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_3\n\nLANGUAGE: cppcheck\nCODE:\n```\n// strdup() is more portable than the suggested _strdup().\nstrdupCalled\n\n// The suggested readdir_r isn't recommended either.\nreaddirCalled\n\n// Can't fix in portable way for all VTK-supported platforms.\nduplicateExpression:*/IO/PostgreSQL/vtkPostgreSQLQuery.cxx\nunpreciseMathCall\n\n// Same expression 'methTypeLong&&propertyTypeLongLong' found multiple times in chain of '||' operators because 'methTypeLong&&propertyTypeLongLong' and 'propertyTypeLongLong&&methTypeLong' represent the same value.\n// This is due to the long and long long being the same type on some platforms, but not others, so hard to fix portably\nknownConditionTrueFalse:*/Wrapping/Tools/vtkParseProperties.c\n\n// Using reallocf() would be a good solution, but it's not available on all platforms.\nmemleakOnRealloc\n\n// Using strtok_r() would be a good solution, but it's not available on all platforms.\nstrtokCalled\n```\n\n----------------------------------------\n\nTITLE: TIFF FAX Table Generation Configuration\nDESCRIPTION: Configures tools for generating FAX tables, currently disabled in VTK builds. Sets up tiff_mkg3states executable and custom target for generating FAX tables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/libtiff/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_CROSSCOMPILING)\n  add_executable(tiff_mkg3states ../placeholder.h)\n  target_sources(tiff_mkg3states PRIVATE mkg3states.c tif_fax3.h)\n  target_link_libraries(tiff_mkg3states tiff tiff_port)\n\n  add_custom_target(tiff_faxtable\n          DEPENDS tiff_mkg3states\n          COMMAND ${CMAKE_COMMAND} -E rm \"tif_fax3sm.c\"\n          COMMAND tiff_mkg3states -b -c const \"tif_fax3sm.c\"\n          WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Tests Directory Include\nDESCRIPTION: Adds the C++ tests directory if C++ testing is not disabled in the VTK configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Computing Third Derivatives with ExprTk in C++\nDESCRIPTION: Demonstrates how to compute the third derivative of a mathematical expression using the ExprTk library. The example shows two methods: using a reference to the variable and using the variable name as a string.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_98\n\nLANGUAGE: C++\nCODE:\n```\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\nconst std::string expression_string = \"sqrt(1 - (x^2))\";\n\nT x = T(0);\n\nsymbol_table_t symbol_table;\nsymbol_table.add_variable(\"x\",x);\n\nexpression_t expression;\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\nparser.compile(expression_string,expression);\n\n....\n\n// Third derivative of expression where value of x = 12.3 using a\n// reference to the x variable\nx = T(12.3);\nT derivative1 = exprtk::third_derivative(expression, x);\n\n// Third derivative of expression where value of x = 45.6 using\n// name of the x variable\nx = T(45.6);\nT derivative2 = exprtk::third_derivative(expression, \"x\");\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake\nDESCRIPTION: This snippet uses CMake to include a subdirectory named 'Cxx' into the current project build. No additional dependencies are needed for this operation as it is a basic CMake command. This command implies that there is a CMakeLists.txt within the 'Cxx' directory that CMake will further process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/netcdf/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Filters Modeling C++ Test Executable\nDESCRIPTION: Sets up the test executable for VTK Filters Modeling C++ tests with specific options to disable floating-point exceptions and use a rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Modeling/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersModelingCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Compilation Definitions in CMake\nDESCRIPTION: This snippet sets up compilation definitions for vtkSocket based on the availability of certain socket features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkSocket_defines)\nif (VTK_HAVE_GETSOCKNAME_WITH_SOCKLEN_T)\n  list(APPEND vtkSocket_defines \"VTK_HAVE_GETSOCKNAME_WITH_SOCKLEN_T\")\nendif ()\nif (VTK_HAVE_SO_REUSEADDR)\n  list(APPEND vtkSocket_defines \"VTK_HAVE_SO_REUSEADDR\")\nendif ()\nif(VTK_NO_PLATFORM_SOCKETS)\n  list(APPEND vtkSocket_defines \"VTK_SOCKET_FAKE_API\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake snippet configures test data for a VTK module and adds a subdirectory for C++ files. It specifies a PLY file as test data and includes the 'Cxx' subdirectory in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/dragon.ply)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing XDMF3 Header Files in VTK\nDESCRIPTION: This CMake snippet configures the XDMF3 header file from a template and installs it to the appropriate location. It uses the configure_file command to process the template and vtk_module_install_headers to handle installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_xdmf3.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_xdmf3.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_xdmf3.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding OpenXR Tests to VTK CXX Test Suite\nDESCRIPTION: Adds the defined OpenXR tests to the VTK CXX test suite and creates an executable for these tests. This uses VTK-specific CMake functions to integrate the tests into the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXR/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingOpenXRCxxTests tests ${openxr_tests})\nvtk_test_cxx_executable(vtkRenderingOpenXRCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Module Addition and Test Mangling\nDESCRIPTION: Adds the VTK Domains Parallel Chemistry module with defined classes, sources, and headers, and configures test mangling\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/ParallelChemistry/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::DomainsParallelChemistry\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::DomainsParallelChemistry)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers Using CMake\nDESCRIPTION: This snippet uses the `vtk_module_install_headers` function to install the `vtk_kwiml.h` header file. It specifies the file to be installed from the current source directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_kwiml.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: This snippet demonstrates adding a C++ source subdirectory using the add_subdirectory command in CMake. This is a common practice to include additional source directories which contain C++ code files, enabling modular or organized project structure within a VTK environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Parallel MPI Filter Classes in CMake\nDESCRIPTION: Sets up a list of class names for the VTK::FiltersParallelMPI module. These classes represent various distributed and parallel filters for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkDistributedPointCloudFilter\n  vtkPExtractGrid\n  vtkPExtractRectilinearGrid\n  vtkPExtractVOI\n  vtkStructuredImplicitConnectivity)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: This CMake directive adds the C++ source code directory to the build process, ensuring that all C++ components of VTK are compiled as part of the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Boost/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: VTK Expat Integration Requirements - Markdown\nDESCRIPTION: List of modifications made to Expat library for VTK integration, including build system changes and symbol mangling requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  * Add attributes to pass commit checks within VTK.\n  * Add CMake code to integrate with VTK's module system.\n  * Mangle all exported symbols to have a `vtkexpat_` prefix.\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Name in CMake\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.13 and names the project 'MultiCone'. It is important for ensuring that the build system meets the minimum requirements for project configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(MultiCone)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersTensor Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK::FiltersTensor module using the previously defined classes and sets up test mangling for the module. It uses CMake functions specific to VTK module configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Tensor/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersTensor\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersTensor)\n```\n\n----------------------------------------\n\nTITLE: Configuring Large Data Tests for VTK in CMake\nDESCRIPTION: Conditionally includes large test data files based on configuration flags. These tests are only enabled when VTK_USE_LARGE_DATA is set and the system is little-endian.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(enable_large_data_tests FALSE)\nif (VTK_USE_LARGE_DATA)\n  if (DEFINED VTK_WORDS_BIGENDIAN AND NOT VTK_WORDS_BIGENDIAN)\n    vtk_module_test_data(\n      Data/MFIXReader/,REGEX:.*\n      Data/WindBladeReader/,REGEX:.*\n      Data/WindBladeReader/field/,REGEX:.*\n      Data/WindBladeReader/turbine/,REGEX:.*)\n    set(enable_large_data_tests TRUE)\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Managing VTK Modules and Dependencies\nDESCRIPTION: This code snippet handles the discovery and management of VTK modules and their dependencies. It ensures that necessary modules are found and dependencies resolved before initiating the testing process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/External/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(vtk_test_modules GLOBAL\n  PROPERTY  _vtk_module_test_modules)\nforeach (_vtk_build_test IN LISTS vtk_test_modules)\n  get_property(_vtk_build_test_depends GLOBAL\n    PROPERTY \"_vtk_module_${_vtk_build_test}_test_depends\")\n  if (NOT TARGET \"${_vtk_build_test}\")\n    message(STATUS \"Skipping ${_vtk_build_test} because it was not built.\")\n    continue ()\n  endif ()\n\n  set(_vtk_build_test_has_depends TRUE)\n  set(_vtk_build_test_missing_depends)\n  foreach (_vtk_build_test_depend IN LISTS _vtk_build_test_depends)\n    if (NOT TARGET \"${_vtk_build_test_depend}\")\n      list(APPEND _vtk_build_test_missing_depends\n        \"${_vtk_build_test_depend}\")\n      set(_vtk_build_test_has_depends FALSE)\n    endif ()\n  endforeach ()\n  if (NOT _vtk_build_test_has_depends)\n    string(REPLACE \";\" \"\\n  \" _vtk_build_test_missing_depends \"${_vtk_build_test_missing_depends}\")\n    message(STATUS \"Skipping ${_vtk_build_test} due to missing dependencies:\\n  ${_vtk_build_test_missing_depends}\")\n    continue ()\n  endif ()\n\n  get_property(_vtk_build_module_file GLOBAL\n    PROPERTY  \"_vtk_module_${_vtk_build_test}_file\")\n\n  get_filename_component(_vtk_build_module_dir \"${_vtk_build_module_file}\" DIRECTORY)\n  file(RELATIVE_PATH _vtk_build_module_subdir \"${VTK_TOP_DIR}\" \"${_vtk_build_module_dir}\")\n  if (EXISTS \"${VTK_TOP_DIR}/${_vtk_build_module_subdir}/Testing\")\n    add_subdirectory(\n      \"${VTK_TOP_DIR}/${_vtk_build_module_subdir}/Testing\"\n      \"${CMAKE_BINARY_DIR}/${_vtk_build_module_subdir}/Testing\")\n  endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Suppression Function for Theora\nDESCRIPTION: Defines a function to suppress specific compiler warnings for the Theora library by checking if the compiler supports the warning flags and applying them.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/vtktheora/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCCompilerFlag)\nfunction (vtktheora_suppress_warning warning)\n  check_c_compiler_flag(\"-Wno-${warning}\" \"have_flag_${warning}\")\n  if (have_flag_${warning})\n    target_compile_options(theora\n      PRIVATE\n        \"-Wno-${warning}\")\n  endif ()\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK JPEG Third-Party Module in CMake\nDESCRIPTION: Sets up the JPEG module as a third-party component in VTK, specifying license information, version, and build options. It also configures and installs necessary header files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkjpeg/LICENSE.md\"\n    SPDX_LICENSE_IDENTIFIER\n      \"IJG AND BSD-3-Clause AND ZLIB\"\n    SPDX_COPYRIGHT_TEXT\n      \"Copyright (C)2009-2021 D. R. Commander.\"\n      \"Copyright (C)2015 Viktor Szathmáry.\"\n      \"copyright (C) 1991-2020, Thomas G. Lane, Guido Vollbeding\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/libjpeg-turbo.git@for/vtk-20210727-2.1.0\"\n    VERSION\n      \"2.1.0\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE JPEG\n    TARGETS JPEG::JPEG\n    STANDARD_INCLUDE_DIRS)\n\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_jpeg.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_jpeg.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_jpeg.h\")\n```\n\n----------------------------------------\n\nTITLE: Release Index Placeholder Template in Markdown\nDESCRIPTION: HTML comment and placeholder tag that will be replaced with auto-generated release index content using the util.create_release_index() function during documentation compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/release_details/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- to be replaced by util.create_release_index() during compilation -->\n{{release_index}}\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for VTK scn Module\nDESCRIPTION: Configures compilation definitions for the VTK::scn module, specifically controlling regex and fast float functionality through preprocessor definitions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/vtkscn/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_definitions(VTK::scn\n  PUBLIC\n    SCN_DISABLE_REGEX=0\n    SCN_REGEX_BACKEND=0 # std::regex\n    SCN_DISABLE_FAST_FLOAT=0)\n```\n\n----------------------------------------\n\nTITLE: Building VTK XdmfCore Library with Source Files\nDESCRIPTION: Creates a list of source files with .cpp extensions and builds the vtkxdmfcore library. Sets up include directories and links necessary dependencies like libxml2, Boost, and HDF5.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/vtkxdmf3/core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(sources)\nforeach (xdmf_core_source IN LISTS XdmfCoreSources)\n  list(APPEND sources\n    \"${xdmf_core_source}.cpp\")\nendforeach ()\n\nadd_library(vtkxdmfcore ${sources})\ntarget_include_directories(vtkxdmfcore\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\"\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../CMake/VersionSuite>\"\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\"\n    \"$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkxdmf3/core>\")\ntarget_link_libraries(vtkxdmfcore\n  PUBLIC\n    VTK::libxml2\n    Boost::boost\n  PRIVATE\n    VTK::hdf5)\n_vtk_module_apply_properties(vtkxdmfcore)\n_vtk_module_install(vtkxdmfcore)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Testing Subdirectory and Test Data\nDESCRIPTION: Adds Python testing subdirectory and test data when Python wrapping is enabled\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/disk_out_ref.ex2)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This snippet uses the CMake command 'add_subdirectory' to include the Cxx directory as part of the build configuration. It does not have specific dependencies or prerequisites but assumes that the provided Cxx directory contains a CMakeLists.txt file for further configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Generic Filters Module\nDESCRIPTION: Adds the FiltersGeneric module to VTK using the defined classes and configures test mangling for the module. This setup is essential for building and testing the generic filters functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersGeneric\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersGeneric)\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Test Data\nDESCRIPTION: Registers VoronoiMesh test data file for use in the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/voronoiMesh.vtu)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Sources\nDESCRIPTION: This snippet defines the source files for the project, including C++ source files, QML files, and a resource file. These files will be compiled and linked into the final executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PROJECT_SOURCES\n  main.cpp\n  main.qml\n  DynamicSplitView.qml\n  qml.qrc\n)\n```\n\n----------------------------------------\n\nTITLE: Creating CXX Executable for PCellSizeFilter Test\nDESCRIPTION: This snippet creates a CXX executable for the PCellSizeFilter test using the `vtk_test_cxx_executable` macro. It specifies the executable name and the source file (`PCellSizeFilter.cxx`).\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelVerdict/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersParallelVerdictCxxTests-MPI tests\n  PCellSizeFilter.cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Statistics Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK Filters Statistics module to the project using the vtk_module_add_module function. It also adds test mangling for the module. The module includes the previously defined classes and non-wrapped headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersStatistics\n  CLASSES ${classes}\n  NOWRAP_HEADERS ${nowrap_headers})\nvtk_add_test_mangling(VTK::FiltersStatistics)\n```\n\n----------------------------------------\n\nTITLE: Registering Test Data Files for VTK HyperTreeGrid Module in CMake\nDESCRIPTION: This snippet registers various HyperTreeGrid (.htg) format test data files and a VTP file to be used in tests. The files include various configurations for 1D, 2D, and 3D HyperTreeGrid structures.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/AMR/htg3d.htg\n  Data/HTG/binary_1D_X_311_mask.htg\n  Data/HTG/binary_2D_XY_331_mask.htg\n  Data/HTG/binary_3D_333_mask.htg\n  Data/HTG/donut_XZ_shift_2d.htg\n  Data/HTG/ghost.htg\n  Data/HTG/htg_for_axis_aligned_cut.htg\n  Data/HTG/shell_3d.htg\n  Data/HTG/single_cell_3d.htg\n  Data/HTG/three_cells_3d.htg\n  Data/TestHyperTreeGridBinary3DContourImplicitInteger.vtp)\n```\n\n----------------------------------------\n\nTITLE: Adding CXX Tests for VTK Accelerators VTKm Data Model\nDESCRIPTION: Adds C++ tests for VTK Accelerators VTKm Data Model, specifically excluding validation for TestVTKMDataSet.cxx. The tests are added to a variable for later use in creating the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkAcceleratorsVTKmDataModelCxxTests tests\n  TestVTKMDataSet.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Wrapping with Test Data\nDESCRIPTION: Conditional CMake block that executes when VTK_WRAP_PYTHON is enabled. Sets up test data files and includes the Python subdirectory for building.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Style/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/SainteHelens.dem\n    Data/beach.tif)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Support for VPIC Module\nDESCRIPTION: Adds a definition for parallel VPIC processing when MPI is enabled in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/vtkvpic/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USING_MPI)\n  target_add_definitions(vpic\n    PRIVATE\n      USE_PARALLEL_VPIC)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Common Archive Module in CMake\nDESCRIPTION: Adds the VTK::CommonArchive module with the previously defined classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::CommonArchive\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Build\nDESCRIPTION: CMake command to include the Cxx subdirectory in the build process, which contains C++ source files for the VTK project\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/gl2ps/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Test Data Files in CMake\nDESCRIPTION: This CMake snippet registers various data files required for VTK module testing. The files include different mesh formats (VTU, VTP, VTK) that are used for testing VTK's data processing capabilities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/Disc_BiQuadraticQuads_0_0.vtu\n  Data/Disc_QuadraticQuads_0_0.vtu\n  Data/blowGeom.vtk\n  Data/cell_850113.vtu\n  Data/cell_12851_26.vtu\n  Data/cone.vtp\n  Data/headsq/,REGEX:.*\n  Data/nonWatertightPolyhedron.vtu\n  Data/onePolyhedron.vtu\n  Data/poly_lines.vtu\n  Data/polyhedron_mesh.vtu\n  Data/quadraticTetra01.vtu\n  Data/sliceOfPolyhedron.vtu\n  Data/test_surface.vtp\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Private Classes\nDESCRIPTION: This CMake snippet defines a list of private classes for the VTK::IOOMF module. The `set` command is used to create a CMake list variable named `private_classes` and assigns a list of classes related to OMF core functionality to it.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_classes\n  core/OMFElement\n  core/OMFFile\n  core/OMFHelpers\n  core/OMFProject)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: Instructs CMake to include and process the Cxx subdirectory during the build configuration. This enables compilation and inclusion of C++ source files and related build targets in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ODBC/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Definitions for KISS FFT\nDESCRIPTION: This snippet sets compilation definitions for the kissfft target. It uses the public visibility to expose KISSFFT_SCALAR_TYPE. Additionally, for Windows builds, it sets specific definitions for shared libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(kissfft\\n  PUBLIC \"kiss_fft_scalar=${KISSFFT_SCALAR_TYPE}\")\\nif (WIN32 AND BUILD_SHARED_LIBS)\\n  target_compile_definitions(kissfft\\n    PRIVATE\\n      KISSFFT_DLL_EXPORT=1\\n    INTERFACE\\n      KISSFFT_DLL_IMPORT=1)\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK KissFFT Header File in CMake\nDESCRIPTION: Generates the vtk_kissfft.h header file from a template, placing it in the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/kissfft/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_kissfft.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_kissfft.h\")\n```\n\n----------------------------------------\n\nTITLE: Set Library Output Directory\nDESCRIPTION: Sets the output directory for the built libraries, specifically placing them in a directory structure based on the target Android architecture ABI. This is required for correctly packaging the libraries within the Android APK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/libs/${CMAKE_ANDROID_ARCH_ABI})\nmessage(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n```\n\n----------------------------------------\n\nTITLE: Adding a Test for VTK SQL Database Support in CMake\nDESCRIPTION: This snippet adds a test for the VTK GUI support specifically targeting SQL databases. It utilizes the CMake function 'vtk_add_test_cxx' to define the test case 'vtkGUISupportQtSQLCxxTests'. To run the test, the source file 'TestQtSQLDatabase.cxx' is specified. Ensure that the appropriate environment and VTK package configurations are set before running this test.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkGUISupportQtSQLCxxTests tests\n  NO_VALID\n  TestQtSQLDatabase.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Git Revision Extraction for Eigen Version in CMake\nDESCRIPTION: Conditionally extracts the Git revision number from the repository if the source directory is a Git clone. The code is currently disabled through a conditional ('if (FALSE)') in the VTK version.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# if we are not in a git clone\nif(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/.git)\n  # if the git program is absent or this will leave the EIGEN_GIT_REVNUM string empty,\n  # but won't stop CMake.\n  execute_process(COMMAND git ls-remote --refs -q ${CMAKE_SOURCE_DIR} HEAD OUTPUT_VARIABLE EIGEN_GIT_OUTPUT)\nendif()\n\n# extract the git rev number from the git output...\nif (FALSE) # XXX(kitware): Use version number from header\nif(EIGEN_GIT_OUTPUT)\nstring(REGEX MATCH \"^([0-9;a-f]+).*\" EIGEN_GIT_CHANGESET_MATCH \"${EIGEN_GIT_OUTPUT}\")\nset(EIGEN_GIT_REVNUM \"${CMAKE_MATCH_1}\")\nendif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests on Device and Simulator\nDESCRIPTION: Commands for running automated tests on physical iOS devices and simulators using xcodebuild.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/iOS/VTKViewer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild test -project VTKViewer.xcodeproj -scheme VTKViewer -destination 'platform=iOS,name=My iPhone'\n```\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild test -project VTKViewer.xcodeproj -scheme VTKViewer -destination 'platform=iOS Simulator,name=iPhone 7,OS=11.0'\n```\n\nLANGUAGE: bash\nCODE:\n```\n> xcodebuild test -project VTKViewer.xcodeproj -scheme VTKViewer\n-destination 'platform=iOS,name=My iPhone'\n-destination 'platform=Simulator,name=iPhone,OS=11.0\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Subdirectory Addition in CMake\nDESCRIPTION: Adds the 'Cxx' subdirectory for C++ tests if vtk_testing_cxx is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including reStructuredText Macros and CMake Module Reference\nDESCRIPTION: Documents the inclusion of a macro file and references a CMake module file path for VTK module testing functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/api/cmake/vtkModuleTesting.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: macros.hrst\n.. cmake-module:: ../../../../CMake/vtkModuleTesting.cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK H5Part Third Party Module\nDESCRIPTION: Sets up H5Part as an internal third-party module for VTK with specified license information, version details, and standard include directories. The configuration includes copyright information and source location details.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party_internal(\n  LICENSE_FILES\n    \"vtkh5part/COPYING\"\n  SPDX_LICENSE_IDENTIFIER\n    \"BSD-3-Clause\"\n  SPDX_COPYRIGHT_TEXT\n    \"Copyright (c) 2006-2009, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any\"\n    \"required approvals from the U.S. Dept. of Energy) and the Paul Scherrer Institut (Switzerland).\"\n  SPDX_DOWNLOAD_LOCATION\n    \"git+https://gitlab.kitware.com/third-party/h5part.git@for/vtk-20220119-1.6.6\"\n  VERSION\n    \"1.6.6\"\n  STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Using collect_variables Helper Function in ExprTk\nDESCRIPTION: Demonstrates how to use the collect_variables helper function to extract all variable symbols from a string expression. The variables are stored in an STL container and can be processed further. The function returns true if parsing succeeds, false otherwise.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_90\n\nLANGUAGE: C++\nCODE:\n```\nconst std::string expression = \"x + abs(y / z)\";\n\nstd::vector<std::string> variable_list;\n\nif (exprtk::collect_variables(expression, variable_list))\n{\n   for (const auto& var : variable_list)\n   {\n      ...\n   }\n}\nelse\n  printf(\"An error occurred.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Blue Obelisk Data Generator - CMake\nDESCRIPTION: This snippet allows the user to enable the build for the vtkBlueObeliskDataInternal.h data generator. The setting is configurable through an option in CMake.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(VTK_BUILD_BODR_DATA_GENERATOR\n  \"If enabled, the test used to generate the vtkBlueObeliskDataInternal.h header will be built.\"\n  OFF\n)\nmark_as_advanced(VTK_BUILD_BODR_DATA_GENERATOR)\n\nif(VTK_BUILD_BODR_DATA_GENERATOR)\n  add_executable(GenerateBlueObeliskHeader\n    GenerateBlueObeliskHeader.cxx)\n  target_link_libraries(GenerateBlueObeliskHeader\n    PRIVATE\n      VTK::DomainsChemistry)\n  vtk_module_autolink(\n    TARGETS GenerateBlueObeliskHeader\n    MODULES VTK::DomainsChemistry)\n  add_test(\n    NAME    VTK::DomainsChemistry-GenerateBlueObeliskHeader\n    COMMAND GenerateBlueObeliskHeader\n            \"${CMAKE_CURRENT_SOURCE_DIR}/../..\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: CMake configuration block that adds multiple Python test files to the VTK testing framework. Some tests are marked with NO_RT and NO_VALID flags to indicate special test execution requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Extraction/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  extractBlocks.py,NO_RT,NO_VALID\n  ExtractEdgesQuadraticCells.py\n  extractGlobalTemporalVariables.py,NO_RT,NO_VALID\n  extractPolyData.py\n  extractRectGrid.py\n  ExtractTensors.py\n  extractUGrid.py\n  extractVectors.py\n  TestExtractCellsByType.py,NO_RT,NO_VALID\n  ../../../Core/Testing/Python/TestExtractCells.py\n  TestExtractEdges.py,NO_RT,NO_VALID\n  TestExtractEdges2.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Managing Test Mangles for VTK Rendering Label\nDESCRIPTION: This snippet registers the RenderingLabel module for test mangling which ensures that the module's symbols are correctly handled during testing, preventing naming conflicts.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Label/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingLabel)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Rendering Label C++ Tests in CMake\nDESCRIPTION: This snippet adds C++ tests for the VTK Rendering Label module and creates a test executable. It also sets a timeout property for a specific test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Label/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkRenderingLabelCxxTests tests\n  TestClipLabels.cxx\n  TestDynamic2DLabelMapper.cxx\n  TestLabelPlacer.cxx\n  TestLabelPlacer2D.cxx\n  TestLabelPlacerCoincidentPoints.cxx,LOOSE_VALID\n  TestLabelPlacementMapper.cxx\n  TestLabelPlacementMapper2D.cxx\n  TestLabelPlacementMapperCoincidentPoints.cxx\n  )\nvtk_test_cxx_executable(vtkRenderingLabelCxxTests tests)\nset_tests_properties(VTK::RenderingLabelCxx-TestLabelPlacer PROPERTIES TIMEOUT 300)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executables and Linking Libraries in CMake\nDESCRIPTION: This code snippet defines the test executable for VTK GUI support using the 'vtk_test_cxx_executable' command. It creates an executable named 'vtkGUISupportQtSQLCxxTests' for the specified tests and links the Qt Widgets library as a private dependency. This is required for the tests to run successfully and to utilize the GUI features provided by Qt.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtSQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkGUISupportQtSQLCxxTests tests)\ntarget_link_libraries(vtkGUISupportQtSQLCxxTests\n  PRIVATE\n    \"Qt${vtk_qt_major_version}::Widgets\")\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Subdirectory Inclusion\nDESCRIPTION: This CMake block conditionally adds the 'Cxx' subdirectory based on the 'vtk_testing_cxx_disabled' variable. If 'vtk_testing_cxx_disabled' is not set, the 'Cxx' subdirectory, presumably containing C++ tests, is included in the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Large Data Tests in CMake\nDESCRIPTION: Conditionally adds large data tests when enabled, including tests for WindBlade and MFIX readers that require substantial data files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Geometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(enable_large_data_tests)\n  vtk_add_test_cxx(vtkIOGeometryCxxTests large_data_tests\n    TestWindBladeReader.cxx\n    TestMFIXReader.cxx,NO_VALID\n    )\n  list(APPEND tests\n    ${large_data_tests}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ImagingHybrid Module Classes\nDESCRIPTION: Defines a list of C++ classes that comprise the VTK ImagingHybrid module. These classes provide various imaging functionality including splatter rendering, texture generation, and surface reconstruction.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Hybrid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkBooleanTexture\n  vtkCheckerboardSplatter\n  vtkFastSplatter\n  vtkGaussianSplatter\n  vtkImageCursor3D\n  vtkImageRectilinearWipe\n  vtkImageToPoints\n  vtkPointLoad\n  vtkSampleFunction\n  vtkShepardMethod\n  vtkSliceCubes\n  vtkSurfaceReconstructionFilter\n  vtkTriangularTexture\n  vtkVoxelModeller)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This snippet specifies various data files to be used for VTK module testing. It includes different file types such as .htg, .vtk, .vtu, and .png.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/AMR/htg3d.htg\n  Data/RectGrid2.vtk\n  Data/SampleStructGrid.vtk\n  Data/ironProt.vtk\n  Data/periodicPiece.vtu\n  Data/tetraMesh.vtk\n  Data/two_vtk_logos_stacked.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK WebGL Exporter Classes\nDESCRIPTION: Defines the core C++ classes needed for the WebGL export functionality in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebGLExporter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkPVWebGLExporter\n  vtkWebGLDataSet\n  vtkWebGLExporter\n  vtkWebGLObject\n  vtkWebGLPolyData\n  vtkWebGLWidget)\n```\n\n----------------------------------------\n\nTITLE: JPEG Library Version and Configuration Settings\nDESCRIPTION: Sets library-specific configuration variables including version, supported features, and platform-specific settings\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(JPEG_LIB_VERSION 80)\nset(LIBJPEG_TURBO_VERSION \"2.0.0\")\nset(BITS_IN_JSAMPLE 8)\nset(C_ARITH_CODING_SUPPORTED 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK FiltersImaging Module in CMake\nDESCRIPTION: This snippet defines a list of classes to be included in the VTK FiltersImaging module. It includes classes for computing histogram 2D outliers, extracting histogram 2D, and pairwise extraction of histogram 2D.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Imaging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkComputeHistogram2DOutliers\n  vtkExtractHistogram2D\n  vtkPairwiseExtractHistogram2D)\n```\n\n----------------------------------------\n\nTITLE: Conditional Thread Safety Test Addition\nDESCRIPTION: Adds thread concurrency test when VTK_PYTHON_FULL_THREADSAFE is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Python/Testing/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_PYTHON_FULL_THREADSAFE)\n  list(APPEND python_tests TestThreadConcurrency.py)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake features used in the script are supported by the CMake version installed on the system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests to VTK Module\nDESCRIPTION: Adds multiple Python test scripts to the VTK testing system with various execution options. Options like NO_DATA, NO_VALID, NO_OUTPUT, and JUST_VALID specify test execution requirements and validation constraints.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Geometry/Testing/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  dataSetSurfaceFilter.py\n  dataSetSurfaceFilter2.py,NO_DATA,NO_VALID,NO_OUTPUT\n  geomFilter.py\n  geometryFilterConvexPointSet.py,NO_VALID,NO_OUTPUT\n  LagrangeGeometricOperations.py,JUST_VALID\n  officeStreamPoints.py\n  rectGrid.py\n  structuredGridBlanking.py\n  TestAttributeSmoothingFilter.py\n  TestAttributeSmoothingFilter2.py\n  TestGeometryFilter.py\n  TestGeometryFilter2.py\n  TestGhostPoints.py,NO_DATA,NO_VALID,NO_OUTPUT\n  TestMarkBoundaryFilter.py,\n  TestMarkBoundaryFilter2.py\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Modules with New System (vtk.module)\nDESCRIPTION: Example of how to declare VTK modules using the new module system in a vtk.module file. It shows the declarative syntax for specifying module properties, dependencies, and conditions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/ModuleMigration.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMODULE\n  vtkModuleName\nCONDITION\n  SOME_OPTION\nGROUPS\n  # groups the module belongs to\nKIT\n  # the kit the module belongs to\n#IMPLEMENTABLE # Implicit in the old build system. Now explicit.\nIMPLEMENTS\n  # modules containing vtkObjectFactory instances that are implemented here\nDEPENDS\n  # public dependencies\nPRIVATE_DEPENDS\n  # private dependencies\nOPTIONAL_DEPENDS\n  vtkSomeDep\nORDER_DEPENDS\n  # modules which must be built before this one but which are not actually\n  # linked.\nTEST_DEPENDS\n  # test dependencies\nTEST_OPTIONAL_DEPENDS\n  # optional test dependencies\n  vtkSomeDep\n#EXCLUDE_WRAP\n  # present for modules which cannot be wrapped\n```\n\n----------------------------------------\n\nTITLE: Versioning Setup\nDESCRIPTION: This snippet sets the KWIML version and extracts major, minor, and patch components. It then calculates a decimal representation of the version. If parsing the version fails, a fatal error is raised.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n#----------------------------------------------------------------------------\nset(KWIML_VERSION 1.0.0)\nif(KWIML_VERSION MATCHES \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)\")\n  set(KWIML_VERSION_MAJOR \"${CMAKE_MATCH_1}\")\n  set(KWIML_VERSION_MINOR \"${CMAKE_MATCH_2}\")\n  set(KWIML_VERSION_PATCH \"${CMAKE_MATCH_3}\")\n  math(EXPR KWIML_VERSION_DECIMAL\n    \"${KWIML_VERSION_MAJOR}*1000000 + ${KWIML_VERSION_MINOR}*1000 + ${KWIML_VERSION_PATCH}\")\nelse()\n  message(FATAL_ERROR \"Failed to parse KWIML_VERSION='${KWIML_VERSION}'\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Mangling for VTK Filters Temporal in CMake\nDESCRIPTION: Configures test mangling for the VTK::FiltersTemporal module. This is likely used in the VTK testing framework to handle symbol mangling in tests related to this module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::FiltersTemporal)\n```\n\n----------------------------------------\n\nTITLE: Setting C Standard in CMake\nDESCRIPTION: Sets the C language standard to C99 for the project build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_STANDARD 99)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExprTk Third-Party Module in CMake\nDESCRIPTION: Sets up ExprTk as a third-party module with version 0.0.3, defining license information, copyright, and download location. Configures both internal header-only implementation and external package requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    HEADER_ONLY\n    LICENSE_FILES           \"vtkexprtk/license.txt\"\n    SPDX_LICENSE_IDENTIFIER \"MIT\"\n    SPDX_COPYRIGHT_TEXT     \"1999-2024 Arash Partow\"\n    SPDX_DOWNLOAD_LOCATION  \"git+https://gitlab.kitware.com/third-party/exprtk.git@for/vtk-20250313-0.0.3-cmake\"\n    VERSION                 \"0.0.3\"\n  EXTERNAL\n    PACKAGE ExprTk\n    VERSION 0.0.3\n    TARGETS ExprTk::ExprTk\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Extracting Eigen Version from Header File in CMake\nDESCRIPTION: Parses the Eigen version information from the Macros.h header file using regex matching to extract world, major, and minor version numbers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/eigen/vtkeigen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# automatically parse the version number\nfile(READ \"${PROJECT_SOURCE_DIR}/eigen/src/Core/util/Macros.h\" _eigen_version_header)\nstring(REGEX MATCH \"define[ \\t]+EIGEN_WORLD_VERSION[ \\t]+([0-9]+)\" _eigen_world_version_match \"${_eigen_version_header}\")\nset(EIGEN_WORLD_VERSION \"${CMAKE_MATCH_1}\")\nstring(REGEX MATCH \"define[ \\t]+EIGEN_MAJOR_VERSION[ \\t]+([0-9]+)\" _eigen_major_version_match \"${_eigen_version_header}\")\nset(EIGEN_MAJOR_VERSION \"${CMAKE_MATCH_1}\")\nstring(REGEX MATCH \"define[ \\t]+EIGEN_MINOR_VERSION[ \\t]+([0-9]+)\" _eigen_minor_version_match \"${_eigen_version_header}\")\nset(EIGEN_MINOR_VERSION \"${CMAKE_MATCH_1}\")\nset(EIGEN_VERSION_NUMBER ${EIGEN_WORLD_VERSION}.${EIGEN_MAJOR_VERSION}.${EIGEN_MINOR_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Classes\nDESCRIPTION: Defines template class implementations for specialized data structures and algorithms.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(template_classes\n  vtkAngularPeriodicDataArray\n  vtkArrayListTemplate\n  vtkMappedUnstructuredGrid\n  vtkMappedUnstructuredGridCellIterator\n  vtkPeriodicDataArray\n  vtkStaticCellLinksTemplate\n  vtkStaticEdgeLocatorTemplate\n  vtkStaticFaceHashLinksTemplate)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Tests and Dependencies for KWSys\nDESCRIPTION: This snippet defines the C++ tests for KWSys with conditional tests based on available features. It also sets up additional dependencies like testConsoleBufChild for specific tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n# C++ tests\nset(KWSYS_CXX_TESTS ${KWSYS_CXX_TESTS}\n  testConfigure.cxx\n  testStatus.cxx\n  testSystemTools.cxx\n  testCommandLineArguments.cxx\n  testCommandLineArguments1.cxx\n  testDirectory.cxx\n  )\nif(KWSYS_STL_HAS_WSTRING)\n  set(KWSYS_CXX_TESTS ${KWSYS_CXX_TESTS}\n    testEncoding.cxx\n    )\nendif()\nif(KWSYS_USE_FStream)\n  set(KWSYS_CXX_TESTS ${KWSYS_CXX_TESTS}\n    testFStream.cxx\n    )\nendif()\nif(KWSYS_USE_ConsoleBuf)\n  add_executable(testConsoleBufChild testConsoleBufChild.cxx)\n  set_property(TARGET testConsoleBufChild PROPERTY C_CLANG_TIDY \"\")\n  set_property(TARGET testConsoleBufChild PROPERTY CXX_CLANG_TIDY \"\")\n  set_property(TARGET testConsoleBufChild PROPERTY C_INCLUDE_WHAT_YOU_USE \"\")\n  set_property(TARGET testConsoleBufChild PROPERTY CXX_INCLUDE_WHAT_YOU_USE \"\")\n  set_property(TARGET testConsoleBufChild PROPERTY LABELS ${KWSYS_LABELS_EXE})\n  target_link_libraries(testConsoleBufChild ${KWSYS_TARGET_LINK})\n  set(KWSYS_CXX_TESTS ${KWSYS_CXX_TESTS}\n    testConsoleBuf.cxx\n    )\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" AND\n     CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"19.0.23506\")\n    set_property(SOURCE testConsoleBuf.cxx testConsoleBufChild.cxx PROPERTY COMPILE_FLAGS /utf-8)\n  endif()\n  set_property(SOURCE testConsoleBuf.cxx APPEND PROPERTY COMPILE_DEFINITIONS\n    KWSYS_ENCODING_DEFAULT_CODEPAGE=${KWSYS_ENCODING_DEFAULT_CODEPAGE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signedness for HDF5 Overflow Detection\nDESCRIPTION: List of C data types and their signedness (SIGNED/UNSIGNED) used for generating overflow detection headers. Each line contains a type followed by its signedness designation, separated by a comma. The list includes standard C types and HDF5-specific types.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/H5overflow.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nunsigned, UNSIGNED;\nint8_t, SIGNED;\nint, SIGNED;\nlong, SIGNED;\nint64_t, SIGNED;\nuint8_t, UNSIGNED;\nuint16_t, UNSIGNED;\nuint32_t, UNSIGNED;\nuint64_t, UNSIGNED;\nptrdiff_t, SIGNED;\nsize_t, UNSIGNED;\nssize_t, SIGNED;\nhaddr_t, UNSIGNED;\nhsize_t, UNSIGNED;\nhssize_t, SIGNED;\nh5_stat_size_t, UNSIGNED;\n```\n\n----------------------------------------\n\nTITLE: Adding a C++ Test with VTK\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` CMake macro to add a C++ test named `tests` which will execute `TestIncludeCGNS.cxx`. The `NO_DATA`, `NO_VALID`, and `NO_OUTPUT` flags indicate that this is a simple test that doesn't require input data, validation, or output comparison.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkcgnsCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeCGNS.cxx)\n```\n\n----------------------------------------\n\nTITLE: Perl Script for Attribute Deprecation Detection\nDESCRIPTION: DiagAttribute.pl script that identifies deprecated attribute data classes and methods, providing warnings and suggestions for code modernization.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nDiagAttribute.pl\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for VTK Module - CMake\nDESCRIPTION: This snippet defines a set of classes for the 'vtkTecplotTableReader' which is part of the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TecplotTable/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkTecplotTableReader)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK CXX Executable\nDESCRIPTION: This snippet utilizes the `vtk_test_cxx_executable` CMake macro to create the test executable for the programmable filters. It disables floating-point exceptions and specifies the rendering factory to be used for the tests.  The macro configures the executable with necessary VTK libraries and settings required for testing within the VTK environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Programmable/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersProgrammableCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Tests and Test Data for VTK Module\nDESCRIPTION: Configures test data and adds the Python test subdirectory if VTK Python wrapping is enabled. Test data includes specific files and patterns for the VTK module tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Transforms/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/earth.ppm\n    Data/headsq/,REGEX:.*\n    Data/masonry.bmp)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK FLUENT CFF Reader Module\nDESCRIPTION: Sets up the VTK FLUENT CFF reader module by defining the required classes and configuring module properties. Adds test mangling support for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FLUENTCFF/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkFLUENTCFFReader)\n\nvtk_module_add_module(VTK::IOFLUENTCFF\n  CLASSES ${classes}\n  )\nvtk_add_test_mangling(VTK::IOFLUENTCFF)\n```\n\n----------------------------------------\n\nTITLE: Registering H5part Test Data and Adding Cxx Subdirectory in VTK Module\nDESCRIPTION: Configures an H5part sample file as test data for the VTK module and adds the Cxx subdirectory to the build process. This is a standard pattern in VTK modules to include necessary test data files and source code directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/H5part/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/H5part/sample.h5part)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Settings for ExodusII\nDESCRIPTION: Sets the shared library build option for ExodusII to match the global build shared libraries setting.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXODUSII_BUILD_SHARED_LIBS \"${BUILD_SHARED_LIBS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring LibTiff Build Options for VTK\nDESCRIPTION: Disables most LibTiff options that aren't needed for VTK integration. This includes turning off tools, tests, documentation, and deprecated features to simplify the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(tiff-deprecated ON)\nset(tiff-tools OFF)\nset(tiff-tools-unsupported OFF)\nset(tiff-tests OFF)\nset(tiff-contrib OFF)\nset(tiff-docs OFF)\nset(tiff-deprecated OFF)\nset(tiff-install OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Wrapped Classes\nDESCRIPTION: Defines classes that should not be wrapped for language bindings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_classes\n  vtkHyperTreeGridEntry\n  vtkHyperTreeGridGeometryEntry\n  vtkHyperTreeGridGeometryUnlimitedEntry\n  vtkHyperTreeGridGeometryLevelEntry\n  vtkHyperTreeGridGeometryUnlimitedLevelEntry\n  vtkHyperTreeGridLevelEntry)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters Texture Classes in CMake\nDESCRIPTION: This snippet defines a list of classes that are part of the VTK Filters Texture module. These classes are related to texture coordinate generation and manipulation in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Texture/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkImplicitTextureCoords\n  vtkScalarsToTextureFilter\n  vtkTextureMapToCylinder\n  vtkTextureMapToPlane\n  vtkTextureMapToSphere\n  vtkThresholdTextureCoords\n  vtkTransformTextureCoords\n  vtkTriangularTCoords)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: This CMake snippet specifies the inclusion of test data for a VTK module. It uses the 'vtk_module_test_data' function to reference a test file located at 'Data/omf-test-file.omf', ensuring that the data is correctly utilized during the testing of VTK modules. Requires CMake and VTK setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/omf-test-file.omf\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Mac Font Support for FreeType\nDESCRIPTION: Links against necessary macOS frameworks when Mac font support is enabled in the FreeType configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# If we want freetype's Mac font support we need to link against\n# a couple of Mac OS X frameworks.\nif (APPLE AND VTKFREETYPE_MAC_FONT_SUPPORT)\n  target_link_libraries(freetype\n    \"-framework ApplicationServices -framework CoreServices\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ subdirectory to VTK build system\nDESCRIPTION: This CMake directive adds the C++ code directory to the build process. It tells CMake to process the CMakeLists.txt file in the Cxx subdirectory, incorporating its targets into the main project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Parallel/DIY/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This CMake code adds three subdirectories to the current project. Each `add_subdirectory` call instructs CMake to process the CMakeLists.txt file located within the specified directory and incorporate its contents into the current project's build process. This allows for modular project structuring and management.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(NativeVTK)\nadd_subdirectory(JavaVTK)\nadd_subdirectory(VolumeRender)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ and C Standards in CMake for PROJ\nDESCRIPTION: Configures the C++ standard to C++11 and C standard to C99 for the PROJ project. It sets the standards as required and disables extensions.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_C_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Python Tests\nDESCRIPTION: This snippet uses the vtk_add_test_python CMake function to add multiple Python test files to the VTK project. It lists various test files related to different VTK functionalities such as cone resolution, glyphs, and geometric sources.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Sources/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  coneResolution.py\n  glyph2D.py\n  Disk.py\n  OSCone.py\n  TestButtonSource.py\n# TestEllipseArcSourceResolution.py #19221\n  TestExponentialPointSource.py\n  TestGlyphScaling.py\n  TestPlatonicNormals.py\n  TestPlatonicSolids.py\n  TestRegularPolygonSource.py\n  TestStaticCellLocatorLineIntersection.py\n  TestStaticPointLocatorLineIntersection.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling Platform-Specific Debug Files in FreeType\nDESCRIPTION: Appends the appropriate debug source file to the sources list depending on the platform (Windows vs others).\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  list(APPEND sources\n    builds/windows/ftdebug.c)\nelse ()\n  list(APPEND sources\n    src/base/ftdebug.c)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK FiltersVerdict Module\nDESCRIPTION: This snippet sets up a list of class names related to mesh quality for the VTK FiltersVerdict module. It uses the set command to group class names which can later be referenced in module setup. The classes include vtkBoundaryMeshQuality, vtkCellQuality, vtkCellSizeFilter, vtkMatrixMathFilter, and vtkMeshQuality, which are specialized for handling different quality metrics in mesh processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Verdict/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBoundaryMeshQuality\n  vtkCellQuality\n  vtkCellSizeFilter\n  vtkMatrixMathFilter\n  vtkMeshQuality)\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Test Data Files\nDESCRIPTION: Adds VTK test data files to the module's test data collection, including AngularSector.vtk and SemiDisk.vtk from specific data directories\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Selection/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/AngularSector.vtk\n  Data/SemiDisk/SemiDisk.vtk)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests with vtk_add_test_python in CMake\nDESCRIPTION: This CMake snippet utilizes the `vtk_add_test_python` macro to incorporate Python test scripts into the VTK build process. The listed Python files will be treated as test cases and executed during the VTK testing phase. The macro takes a list of Python script names as input.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  cursor3D.py\n  TestTextActor3D.py\n  TestTkRenderWidget.py\n  TestTkRenderWindowInteractor.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Header Configuration and Generation\nDESCRIPTION: Generates configuration headers dynamically based on platform and build settings, supporting cross-platform compatibility\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}${header_input_dir}/jconfig.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/jconfig.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory for Testing\nDESCRIPTION: Configures CMake to include the Cxx subdirectory, which typically contains C++ test implementations for the VTK module\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Selection/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOParallelExodus Module and Test Mangling in CMake\nDESCRIPTION: Adds the VTK::IOParallelExodus module to the build system, specifying classes, sources, and private headers. Also adds test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelExodus/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOParallelExodus\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOParallelExodus)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Style and Design Pattern Warnings\nDESCRIPTION: Suppression rules for stylistic warnings and design pattern issues that are either deemed acceptable in the VTK codebase or generate too many false positives to be practical.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_4\n\nLANGUAGE: cppcheck\nCODE:\n```\n// VTK assumes IEEE 754 floats, so this warning isn't useful.\nmemsetClassFloat\n\n// These are too stylistic\nuseStlAlgorithm\n\n// Gives too many false positives.\nassertWithSideEffect\nargumentSize\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Common Execution Model C++ Test without Validation\nDESCRIPTION: This CMake command adds a single C++ test to the vtkCommonExecutionModelCxxTests suite. It specifies that this test does not require validation, and lists the source file for the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ExecutionModel/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonExecutionModelCxxTests tests\n  NO_VALID\n  TestMultiOutputSimpleFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK MPI Image Reader Classes\nDESCRIPTION: Defines the set of classes to be included in the MPI Image reader module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIImage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkMPIImageReader\n  vtkPNrrdReader)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExodusII Header Files\nDESCRIPTION: Uses CMake's configure_file command to generate configuration header files from templates with substituted variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/exodus_config.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/include/exodus_config.h\"\n  @ONLY)\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include/exodusII_cfg.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/include/exodusII_cfg.h\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: VTK-Fides Integration Requirements List\nDESCRIPTION: Bullet points listing the key changes required to integrate Fides into VTK, including build system modifications and dependency handling.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/README.kitware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  * avoid using `clang-format` for the import\n  * use VTK's MPI\n  * update CMake files to use `vtk_module` to get into VTK's install tree\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for VTK png Module\nDESCRIPTION: This CMake command sets a list of header files that are part of the VTK png module. These header files provide declarations and definitions used in the source files.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/vtkpng/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  png.h\n  pngconf.h\n  pnglibconf.h\n  vtk_png_mangle.h)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Environment for VTK\nDESCRIPTION: The code initializes a CMake environment with specific version requirements for managing test directories. It includes setting various parameters required for building test directories and manages dependencies crucial for VTK testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/External/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.16 FATAL_ERROR)\n\nproject(VTKTestExternal)\nif(VTK_SOURCE_DIR OR VTK_BINARY_DIR)\n  message(FATAL_ERROR \"This directory may build only outside VTK!\")\nendif()\n\ninclude(CTest)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: Adds the VTK::FiltersCellGrid module with all configured classes, headers, sources, templates, and private headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersCellGrid\n  CLASSES ${classes}\n  HEADERS ${header} ${headers}\n  SOURCES ${sources}\n  TEMPLATES ${templates}\n  PRIVATE_HEADERS ${private_headers}\n)\n```\n\n----------------------------------------\n\nTITLE: Using CreateTimerQueueTimer for Precision Timing in Win32\nDESCRIPTION: This snippet replaces the native Win32 API `SetTimer` with `CreateTimerQueueTimer`, addressing precision issues with timer duration in Windows applications. It improves the timing accuracy for short intervals, making it suitable for high-precision requirements in applications.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/windows-timers.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Using the CreateTimerQueueTimer API for improved timer precision\n// Previous implementation used SetTimer which lacked accuracy\nCreateTimerQueueTimer(&hTimer, hTimerQueue, TimerCallback, NULL, 0, TimerInterval, WT_EXECUTEINTIMERTHREAD);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Fides Target in CMake\nDESCRIPTION: Adds source files to the Fides target using full paths. These source files implement the data model functionality defined in the headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/predefined/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(fides PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}/DataModelHelperFunctions.cxx\n  ${CMAKE_CURRENT_SOURCE_DIR}/DataModelFactory.cxx\n  ${CMAKE_CURRENT_SOURCE_DIR}/InternalMetadataSource.cxx\n  ${CMAKE_CURRENT_SOURCE_DIR}/PredefinedDataModel.cxx\n  ${CMAKE_CURRENT_SOURCE_DIR}/SupportedDataModels.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Header File\nDESCRIPTION: This CMake snippet configures a header file named vtkIOMySQLTestingCxxConfigure.h from a template. It takes the input template file from the source directory and generates the configured header in the binary directory. This allows for customization of the test based on configuration variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_MYSQL_TEST_URL)\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vtkIOMySQLTestingCxxConfigure.h.in\n    ${CMAKE_CURRENT_BINARY_DIR}/vtkIOMySQLTestingCxxConfigure.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Third-Party and Utility Code Warnings\nDESCRIPTION: Suppression rules for excluding warnings from third-party libraries, KWSys utilities, MetaIO, DICOMParser, and other non-core VTK components that aren't the focus of the static analysis.\nSOURCE: https://github.com/kitware/vtk/blob/master/CMake/VTKcppcheckSuppressions.txt#2025-04-21_snippet_1\n\nLANGUAGE: cppcheck\nCODE:\n```\n// Suppress everything from ThirdParty.\n*:*/ThirdParty/*\n*:*H5*\n\n// Similarly, these aren't really part of VTK proper.\n*:*/Utilities/KWSys/*\n*:*/Utilities/MetaIO/*\n*:*/Utilities/DICOMParser/*\n*:*/Remote/WikiExamples/*\n*:*/Remote/vtkDICOM/*\n```\n\n----------------------------------------\n\nTITLE: Merging the upstream branch as a subtree\nDESCRIPTION: This command merges the `xdmf2vtk-upstream` branch into the current branch as a subtree using the recursive merge strategy. The `-X subtree=IO/Xdmf2` option specifies that the `IO/Xdmf2` directory should be treated as the root of the subtree.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"git merge -s recursive -X subtree=IO/Xdmf2 \\\n           xdmf2vtk-upstream\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Output Window Process Outer Build\nDESCRIPTION: Sets up the initial project configuration and attempts to compile the inner build process. Handles output file generation and error checking for the compilation process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/OutputWindowProcess/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT VTK_OWP_BUILD_INNER)\n  PROJECT(VTK_OWP)\n  IF(NOT VTK_OWP_OUTPUT)\n    SET(VTK_OWP_OUTPUT\n      ${VTK_OWP_BINARY_DIR}/vtkWin32OutputWindowProcessEncoded.c)\n  ENDIF()\n  IF(NOT VTK_OWP_NAME)\n    SET(VTK_OWP_NAME Win32OutputWindowProcess)\n  ENDIF()\n  SET(CMAKE_TRY_COMPILE_CONFIGURATION Release)\n  TRY_COMPILE(COMPILED\n    ${VTK_OWP_BINARY_DIR}/Inner\n    ${VTK_OWP_SOURCE_DIR}\n    VTK_OWP_INNER vtk_owp_encode\n    CMAKE_FLAGS -DCMAKE_BUILD_TYPE:STRING=${CMAKE_TRY_COMPILE_CONFIGURATION}\n                -DVTK_OWP_BUILD_INNER:BOOL=1\n                -DVTK_OWP_OUTPUT:STRING=${VTK_OWP_OUTPUT}\n                -DVTK_OWP_NAME:STRING=${VTK_OWP_NAME}\n    OUTPUT_VARIABLE OUTPUT)\n  IF(COMPILED)\n    MESSAGE(STATUS \"Creating \\\"${VTK_OWP_OUTPUT}\\\" succeeded.\")\n  ELSE()\n    FILE(WRITE ${VTK_OWP_OUTPUT} \"failed_to_generate\\n\")\n    MESSAGE(FATAL_ERROR\n      \"Creating \\\"${VTK_OWP_OUTPUT}\\\" failed with output [${OUTPUT}].\")\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Speed Up vtkPolygon::BoundedTriangulate\nDESCRIPTION: Minor optimization to enhance the performance of the BoundedTriangulate method in vtkPolygon.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/refactor-vtkCell-triangulate.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid vtkPolygon::BoundedTriangulate(/* parameters */) {\n    // Optimized implementation\n}\n```\n\n----------------------------------------\n\nTITLE: VTK Module Initialization\nDESCRIPTION: Automatically initializes VTK modules for the target executable\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_autoinit(\n  TARGETS  WrappedMace\n  MODULES  ${VTK_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Memory Type Header\nDESCRIPTION: Generates a header file for device memory type definitions based on the template and current configuration settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CatalystConduit/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtkDeviceMemoryType.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtkDeviceMemoryType.h\"\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data in CMake\nDESCRIPTION: Specifies VTK module test data files for the ChangingBlocksOverTime dataset. It includes .vtm and .vtu files for different time steps.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/ChangingBlocksOverTime/wavelet_0.vtm\n  Data/ChangingBlocksOverTime/wavelet_1.vtm\n  Data/ChangingBlocksOverTime/wavelet_0.vtu\n  Data/ChangingBlocksOverTime/wavelet_1.vtu)\n```\n\n----------------------------------------\n\nTITLE: MinGW Big Object Compilation Flag\nDESCRIPTION: Sets the big object compilation flag for ExprTk function parser when building with MinGW, excluding Android builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Misc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (MINGW AND NOT ANDROID)\n  set_property(SOURCE vtkExprTkFunctionParser.cxx APPEND\n    PROPERTY\n      COMPILE_FLAGS \"-Wa,-mbig-obj\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Private Classes for VTK Filters HyperTree Module in CMake\nDESCRIPTION: Sets up a list of private classes for the VTK Filters HyperTree module. These classes are implementation details not exposed in the public API.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(private_classes\n  vtkHyperTreeGridGeometryImpl\n  vtkHyperTreeGridGeometry1DImpl\n  vtkHyperTreeGridGeometry2DImpl\n  vtkHyperTreeGridGeometry3DImpl\n  vtkHyperTreeGridGeometrySmallDimensionsImpl\n)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Bridge Classes in CMake\nDESCRIPTION: Sets a list of VTK bridge-related class names used in the TestingGenericBridge module, including various iterator and data set bridge classes\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/GenericBridge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkBridgeAttribute\n  vtkBridgeCell\n  vtkBridgeCellIterator\n  vtkBridgeCellIteratorOnCellBoundaries\n  vtkBridgeCellIteratorOnCellList\n  vtkBridgeCellIteratorOnDataSet\n  vtkBridgeCellIteratorOne\n  vtkBridgeCellIteratorStrategy\n  vtkBridgeDataSet\n  vtkBridgePointIterator\n  vtkBridgePointIteratorOnCell\n  vtkBridgePointIteratorOnDataSet\n  vtkBridgePointIteratorOne)\n```\n\n----------------------------------------\n\nTITLE: Configuring vtk_diy2.h Header File\nDESCRIPTION: This CMake code configures the `vtk_diy2.h.in` header file using `configure_file`. It takes the input file from the source directory, and creates the output file in the binary directory. This step is essential for generating a header file with project-specific settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_diy2.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_diy2.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Checker Option in CMake for HDF5\nDESCRIPTION: This snippet defines a CMake option to enable using a memory checker for HDF5. If enabled, it sets the H5_USING_MEMCHECKER variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\noption (HDF5_ENABLE_USING_MEMCHECKER \"Indicate that a memory checker is used\" OFF)\nif (HDF5_ENABLE_USING_MEMCHECKER)\n  set (H5_USING_MEMCHECKER 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining MetaIO Source Files\nDESCRIPTION: Defines the list of source files that comprise the MetaIO library implementation. Includes various meta object types and utility files.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/vtkmetaio/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  metaUtils.cxx\n  metaArray.cxx\n  metaArrow.cxx\n  metaBlob.cxx\n  metaCommand.cxx\n  metaContour.cxx\n  metaDTITube.cxx\n  metaEllipse.cxx\n  metaFEMObject.cxx\n  metaForm.cxx\n  metaGroup.cxx\n  metaGaussian.cxx\n  metaImage.cxx\n  metaImageUtils.cxx\n  metaLandmark.cxx\n  metaLine.cxx\n  metaMesh.cxx\n  metaObject.cxx\n  metaScene.cxx\n  metaSurface.cxx\n  metaTube.cxx\n  metaTransform.cxx\n  metaTubeGraph.cxx\n  metaVesselTube.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module\nDESCRIPTION: This CMake command adds a VTK module named VTK::png. It specifies the source files, header files, and the subdirectory where the header files are located within the module's include directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/png/vtkpng/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::png\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR vtkpng)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Module in VTK CMake\nDESCRIPTION: This CMake script uses `vtk_module_test_data` to define file paths for a comprehensive list of test data files. These files are in various formats such as HDF, VTP, VTI, and VTU, and they are stored in specific directories. This setup is crucial for running tests that require these data inputs. The script does not specify any parameters directly but relies on the files being in expected locations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/HDF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/mandelbrot-vti.hdf\n  Data/mandelbrot.vti\n  Data/can.vtu\n  Data/can.pvtu\n  Data/can/can_0.vtu\n  Data/can/can_1.vtu\n  Data/can/can_2.vtu\n  Data/can-vtu.hdf\n  Data/can-pvtu.hdf\n  Data/amr_gaussian_pulse.hdf\n  Data/amr_gaussian_pulse.vthb\n  Data/amr_gaussian_pulse/amr_gaussian_pulse_0.vti\n  Data/amr_gaussian_pulse/amr_gaussian_pulse_1.vti\n  Data/amr_gaussian_pulse/amr_gaussian_pulse_2.vti\n  Data/test_poly_data.hdf\n  Data/test_transient_poly_data.hdf\n  Data/test_transient_poly_data_offset.vtkhdf\n  Data/test_transient_poly_data_field_data.vtkhdf\n  Data/transient_sphere.hdf\n  Data/temporal_unstructured_grid.vtkhdf\n  Data/transient_harmonics.hdf\n  Data/transient_wavelet.hdf\n  Data/wavelet_cell_data.hdf\n  Data/wavelet_cell_data.vti\n  Data/hdf_poly_data_twin.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_000.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_001.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_002.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_003.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_004.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_005.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_006.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_007.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_008.vtp\n  Data/hdf_transient_poly_data_twin/hdf_transient_poly_data_twin_009.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_0.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_1.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_2.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_3.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_4.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_5.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_6.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_7.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_8.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_9.vtpd\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_0/transient_sphere_0_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_0/transient_sphere_0_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_1/transient_sphere_1_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_1/transient_sphere_1_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_2/transient_sphere_2_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_2/transient_sphere_2_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_3/transient_sphere_3_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_3/transient_sphere_3_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_4/transient_sphere_4_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_4/transient_sphere_4_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_5/transient_sphere_5_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_5/transient_sphere_5_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_6/transient_sphere_6_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_6/transient_sphere_6_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_7/transient_sphere_7_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_7/transient_sphere_7_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_8/transient_sphere_8_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_8/transient_sphere_8_1.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_9/transient_sphere_9_0.vtp\n  Data/hdf_transient_partitioned_poly_data_twin/transient_sphere_9/transient_sphere_9_1.vtp\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_0.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_1.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_2.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_3.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_4.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_5.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_6.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_7.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_8.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_9.vtpd\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_0/transient_sphere_0_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_0/transient_sphere_0_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_1/transient_sphere_1_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_1/transient_sphere_1_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_2/transient_sphere_2_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_2/transient_sphere_2_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_3/transient_sphere_3_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_3/transient_sphere_3_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_4/transient_sphere_4_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_4/transient_sphere_4_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_5/transient_sphere_5_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_5/transient_sphere_5_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_6/transient_sphere_6_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_6/transient_sphere_6_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_7/transient_sphere_7_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_7/transient_sphere_7_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_8/transient_sphere_8_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_8/transient_sphere_8_1.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_9/transient_sphere_9_0.vtu\n  Data/hdf_transient_partitioned_ug_twin/transient_sphere_9/transient_sphere_9_1.vtu\n  Data/elements.vtu\n  Data/explicitStructuredGrid.vtu\n  Data/explicitStructuredGridEmpty.vtu\n  Data/cube-with-time.vtu\n\n  Data/vtkHDF/sanitization.vtu\n\n  Data/vtkHDF/null_term_string.vtkhdf\n  Data/vtkHDF/utf8_string.vtkhdf\n\n  Data/vtkHDF/test_composite.hdf\n  Data/vtkHDF/test_composite.hdf_000000.vtpc\n  Data/vtkHDF/test_composite.hdf_000000/test_composite.hdf_000000_0_0.vtp\n  Data/vtkHDF/test_composite.hdf_000000/test_composite.hdf_000000_1_0.vtu\n  Data/vtkHDF/test_composite.hdf_000000/test_composite.hdf_000000_2_0.vti\n\n  Data/vtkHDF/dummy_pdc_structure.vtpc\n  Data/vtkHDF/multi_ds_pdc.vtpc\n  Data/vtkHDF/dummy_pdc_structure/dummy_pdc_structure_0_0.vtp\n  Data/vtkHDF/dummy_pdc_structure/dummy_pdc_structure_1_0.vtp\n  Data/vtkHDF/dummy_pdc_structure/dummy_pdc_structure_2_0.vtu\n\n  Data/vtkHDF/test_multiblock_hdf.vtm\n  Data/vtkHDF/test_multiblock_hdf/test_multiblock_hdf_0_0.vtp\n  Data/vtkHDF/test_multiblock_hdf/test_multiblock_hdf_1_0.vtp\n  Data/vtkHDF/test_multiblock_hdf/test_multiblock_hdf_2_0.vtu\n\n  Data/vtkHDF/test_temporal_overlapping_amr.vtkhdf\n  Data/vtkHDF/test_temporal_overlapping_amr_version_2_2.vtkhdf\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_0.vthb\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_0/transient_expected_overlapping_amr_0_0.vti\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_0/transient_expected_overlapping_amr_0_1.vti\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_0/transient_expected_overlapping_amr_0_2.vti\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_1.vthb\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_1/transient_expected_overlapping_amr_1_0.vti\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_1/transient_expected_overlapping_amr_1_1.vti\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_2.vthb\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_2/transient_expected_overlapping_amr_2_0.vti\n  Data/vtkHDF/Transient/transient_expected_overlapping_amr_2/transient_expected_overlapping_amr_2_1.vti\n)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Compiler Warnings (GNU)\nDESCRIPTION: This snippet suppresses printf/scanf format warnings for GNU compilers when testing if the sizes match. It iterates through C and CXX languages and sets compiler flags accordingly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"foreach(lang C CXX)\n  if(KWIML_LANGUAGE_${lang} AND CMAKE_${lang}_COMPILER_ID STREQUAL \\\"GNU\\\")\n    set(CMAKE_${lang}_FLAGS \\\"${CMAKE_${lang}_FLAGS} -Wno-format -Wno-format-security\\\")\n  endif()\nendforeach()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: This CMake code snippet uses the `vtk_test_cxx_executable` macro to create an executable named `vtkIOIOSSCxxTests` that will run the previously defined C++ tests. This command is responsible for compiling and linking the test files into an executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/IOSS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOIOSSCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK IO Export Test Executable\nDESCRIPTION: Creates the executable for the VTK IO Export tests with special flags to disable floating point exceptions and enable rendering factory.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOExportCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module and Test Mangling with CMake\nDESCRIPTION: This part of the file adds the \"DomainsChemistry\" module using the defined classes and links it with private headers. It also sets up tests for ensuring proper name mangling in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Chemistry/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::DomainsChemistry\n  CLASSES ${classes}\n  PRIVATE_HEADERS vtkBlueObeliskDataInternal.h)\nvtk_add_test_mangling(VTK::DomainsChemistry)\n```\n\n----------------------------------------\n\nTITLE: LibXML2 Version Extraction from configure.ac\nDESCRIPTION: Parses configure.ac file to extract library version information using regex matching and sets version variables\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile(STRINGS \"configure.ac\" CONFIGURE_AC_LINES)\nforeach(line ${CONFIGURE_AC_LINES})\n    if(line MATCHES [[^m4_define\\(\\[(MAJOR_VERSION|MINOR_VERSION|MICRO_VERSION)\\],[ \\t]*([0-9]+)\\)$]])\n        set(LIBXML_${CMAKE_MATCH_1} ${CMAKE_MATCH_2})\n    elseif(line MATCHES \"^(LIBXML_MAJOR_VERSION|LIBXML_MINOR_VERSION|LIBXML_MICRO_VERSION)=([0-9]+)$\")\n        set(${CMAKE_MATCH_1} ${CMAKE_MATCH_2})\n    endif()\nendforeach()\nset(VERSION \"${LIBXML_MAJOR_VERSION}.${LIBXML_MINOR_VERSION}.${LIBXML_MICRO_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Defining XDMF Extra Source Files in CMake\nDESCRIPTION: Lists additional source files for XDMF that are generated from lexical and parser definitions, used for expression parsing.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset( XdmfExtraSource\n  XdmfExprLex.cxx\n  XdmfExprYacc.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable with VTK\nDESCRIPTION: This snippet uses the `vtk_test_cxx_executable` CMake macro to create an executable for the C++ tests named `tests`.  This macro handles the build process for the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkcgnsCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK RenderingHyperTreeGrid Module in CMake\nDESCRIPTION: This snippet sets up the VTK RenderingHyperTreeGrid module by defining classes, adding the module, and configuring rendering options. It includes conditional compilation for offscreen rendering and adds test mangling.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/HyperTreeGrid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkHyperTreeGridMapper)\n\nvtk_module_add_module(VTK::RenderingHyperTreeGrid\n  CLASSES ${classes}\n  )\n\nif (VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\n  vtk_module_definitions(VTK::RenderingCore\n    PRIVATE\n      VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\nendif()\nvtk_add_test_mangling(VTK::RenderingHyperTreeGrid)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Wrapping Tools Module\nDESCRIPTION: Adds the VTK wrapping tools module and sets compile options for Emscripten builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Tools/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(\"${ns}::WrappingTools\"\n  SOURCES ${sources}\n  HEADERS ${headers})\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  vtk_module_compile_options(\"${ns}::WrappingTools\"\n    PRIVATE\n      \"-pthread\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Correct Termination of If-Statements in ExprTk\nDESCRIPTION: Shows the correct way to terminate an if-statement with a semicolon to avoid unintended operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_36\n\nLANGUAGE: ExprTk\nCODE:\n```\nx := if (y < z) y + 3;\nw + x\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Tests with CMake\nDESCRIPTION: This CMake script configures test data and conditionally adds subdirectories for C++ and Python tests in a VTK module. It checks for C++ testing availability and Python wrapping before adding respective subdirectories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Temporal/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data()\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(Data/cube-with-time.vtu)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: VTK Project MIT License Text\nDESCRIPTION: The standard MIT license text used for the VTK project, including copyright notice for Tencent and RapidJSON.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/rapidjson/fidesrapidjson/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved.\n\nLicensed under the MIT License (the \"License\"); you may not use this file except\nin compliance with the License. You may obtain a copy of the License at\n\nhttp://opensource.org/licenses/MIT\n\nUnless required by applicable law or agreed to in writing, software distributed \nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR \nCONDITIONS OF ANY KIND, either express or implied. See the License for the \nspecific language governing permissions and limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests for C++ JSON Library\nDESCRIPTION: Commands for building and running the test suite for the JSON library. Includes creating a build directory, configuring CMake with test options, building the project, and running the tests with proper output settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir build\n$ cd build\n$ cmake .. -DJSON_BuildTests=On\n$ cmake --build .\n$ ctest --output-on-failure\n```\n\n----------------------------------------\n\nTITLE: Removal of Convenience Aliases and Constants\nDESCRIPTION: This code indicates the removal of convenience aliases and constants in MPI, suggesting the proper replacements to use in an updated implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/mpi4py/vtkmpi4py/CHANGES.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nMPI.WORLD\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.SELF\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.WORLD_SIZE\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.WORLD_RANK\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD.Get_size()\n```\n\nLANGUAGE: Python\nCODE:\n```\nMPI.COMM_WORLD.Get_rank()\n```\n\n----------------------------------------\n\nTITLE: Copying QML Files with CMake\nDESCRIPTION: This snippet iterates through a list of QML files and uses CMake's `configure_file` command to copy them to the build directory. The `COPYONLY` option indicates that the files are simply copied without any modification or processing.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (qml_file IN LISTS qml_files)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/${qml_file}\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${qml_file}\"\n    COPYONLY)\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for VTK FiltersParallelImaging Module in CMake\nDESCRIPTION: This snippet defines a list of classes that are part of the VTK FiltersParallelImaging module. These classes are related to parallel imaging operations in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelImaging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkExtractPiece\n  vtkMemoryLimitImageDataStreamer\n  vtkPComputeHistogram2DOutliers\n  vtkPExtractHistogram2D\n  vtkPPairwiseExtractHistogram2D\n  vtkTransmitImageDataPiece)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git LFS for Fides Testing\nDESCRIPTION: Commands to initialize Git Large File Storage (LFS) for managing Fides test datasets after cloning the repository.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfides$ git lfs install\nfides$ git lfs pull\n```\n\n----------------------------------------\n\nTITLE: Finding Sphinx Build Executable\nDESCRIPTION: Searches for the sphinx-build executable in system path and stores its location\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Sphinx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(SPHINX_BUILD_EXECUTABLE\n  NAMES sphinx-build\n  DOC \"Sphinx Documentation Builder (sphinx-doc.org)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Arguments in VTK Widget Tests\nDESCRIPTION: Sets command line arguments for specific VTK widget tests. TestOrientedGlyphContour receives a playback file argument, while TerrainPolylineEditor gets projection mode and height offset parameters.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TestOrientedGlyphContour_ARGS \"--PlaybackFile\" \"DATA{../Data/Input/TestOrientedGlyphContourEventLog.txt}\")\nset(TerrainPolylineEditor_ARGS -ProjectionMode 2 -HeightOffset 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel VTK Python Test\nDESCRIPTION: CMake configuration for adding a parallel VTK Python test using MPI. This test is conditionally added if the VTK::pvtkpython target exists. It uses MPIEXEC to run the test with 4 processes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Parallel/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET VTK::pvtkpython)\n  add_test(NAME vtkFiltersParallelPython-testTransmit\n    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 4 ${MPIEXEC_PREFLAGS}\n      $<TARGET_FILE:VTK::pvtkpython> ${CMAKE_CURRENT_SOURCE_DIR}/testTransmit.py\n      ${VTK_MPI_POSTFLAGS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten-specific Test Settings in CMake\nDESCRIPTION: Sets a flag for WASM-enabled browser tests when the target system is Emscripten.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n  set(_vtk_test_cxx_wasm_enabled_in_browser ON)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Classes\nDESCRIPTION: This snippet defines a CMake variable `classes` containing a list of C++ classes that belong to the VTK::FiltersSMP module. These classes are vtkSMPContourGrid, vtkSMPMergePoints, and vtkSMPMergePolyDataHelper.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/SMP/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkSMPContourGrid\n  vtkSMPMergePoints\n  vtkSMPMergePolyDataHelper)\n```\n\n----------------------------------------\n\nTITLE: Add JNI Subdirectory\nDESCRIPTION: Adds the jni subdirectory to the build. This assumes there is a jni directory containing the native source code. The `add_subdirectory` command includes the CMakeLists.txt file located in the 'jni' directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/VolumeRender/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(jni)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test Subdirectory Conditional Logic\nDESCRIPTION: This snippet adds a directory for Python tests if the Python wrapping is enabled. This allows the organization of Python-related tests separate from C++ tests based on configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n  add_subdirectory(Python)\\\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Finding TCL Package\nDESCRIPTION: This snippet uses CMake's `find_package` command to locate the TCL library. It requires the TCL package to be present and configured on the system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(TCL REQUIRED)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data for Large Data Usage in CMake\nDESCRIPTION: This CMake snippet conditionally includes test data files and a C++ subdirectory when VTK_USE_LARGE_DATA is enabled. It specifies NetCDF and SLAC data files for testing purposes.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelNetCDF/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_USE_LARGE_DATA)\n  vtk_module_test_data(\n    Data/NetCDF/test.pop.nc\n    Data/SLAC/ll-9cell-f523/ll-9cell-f523.ncdf\n    Data/SLAC/ll-9cell-f523/mode0.l0.R2.457036E+09I2.778314E+04.m3)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring UNIX-Specific FreeType Sources and Headers\nDESCRIPTION: Handles UNIX-specific source files and configures system headers for UNIX platforms, generating ftconfig.h from a template.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\n  list(APPEND sources\n    builds/unix/ftsystem.c)\n  include(CheckIncludeFile)\n  check_include_file(\"fcntl.h\" HAVE_FCNTL_H)\n  check_include_file(\"unistd.h\" HAVE_UNISTD_H)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/builds/unix/ftconfig.h.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/include/freetype/config/ftconfig.h\")\nelse ()\n  list(APPEND sources\n    src/base/ftsystem.c)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ExprTk Variable Assignment and Complex Expressions\nDESCRIPTION: Examples showing variable assignment operations and complex mathematical expressions using ExprTk syntax.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nz := x + sin(2.567 * pi / y)\nu := 2.123 * {pi * z} / (w := x + cos(y / pi))\n2x + 3y + 4z + 5w == 2 * x + 3 * y + 4 * z + 5 * w\n3(x + y) / 2.9 + 1.234e+12 == 3 * (x + y) / 2.9 + 1.234e+12\n(x + y)3.3 + 1 / 4.5 == [x + y] * 3.3 + 1 / 4.5\n```\n\n----------------------------------------\n\nTITLE: ExprTk Variable Naming Pattern\nDESCRIPTION: Regular expression pattern defining valid variable, vector, string variable and function names in ExprTk. Names must start with a letter and can contain letters, numbers, underscores and dots.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_111\n\nLANGUAGE: regex\nCODE:\n```\n[a-zA-Z][a-zA-Z0-9_.]*[a-zA-Z0-9_]+\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory with CMake\nDESCRIPTION: This CMake command adds the 'Cxx' directory as a subdirectory to the current CMake project. This allows the CMakeLists.txt file within the 'Cxx' directory to be processed as part of the overall build process.  It is typically used to organize larger projects into modular components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Creating Android Project Configuration Custom Target\nDESCRIPTION: Generates a custom CMake target to update and configure the Android project using the Android command line tool\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(NativeVTK-ant-configure ALL\n  COMMAND \"${ANDROID_EXECUTABLE}\"\n          update project\n          --name NativeVTK\n          --path \"${CMAKE_CURRENT_SOURCE_DIR}\"\n          --target \"android-${CMAKE_SYSTEM_VERSION}\"\n  COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different\n          \"${CMAKE_CURRENT_SOURCE_DIR}/build.xml\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/build.xml\"\n  # ... (additional file copy commands)\n  WORKING_DIRECTORY\n          \"${CMAKE_CURRENT_BINARY_DIR}\")\n\nadd_dependencies(NativeVTK-ant-configure NativeVTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ZLIB C++ Tests in CMake\nDESCRIPTION: Sets up C++ tests for the VTK ZLIB module using CMake. It defines a test named 'TestIncludeZLIB.cxx' with flags specifying no data, validation, or output requirements, and then creates a test executable from it.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkzlibCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeZLIB.cxx)\nvtk_test_cxx_executable(vtkzlibCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Public Members in VTK HTG Surface Representation\nDESCRIPTION: List of public member functions that have been deprecated and no longer have any effect in the HTG Surface Representation implementation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/dev/htg-representation-decimation.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nSet/GetCircleSelection\nSet/GetBBSelection\nSet/GetDynamicDecimateLevelMax\nSet/GetScale\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files\nDESCRIPTION: Registers multiple .dg format test data files for VTK module testing using vtk_module_test_data CMake function.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/dgEdges.dg\n  Data/dgGhostHexahedra.dg\n  Data/dgHexahedra.dg\n  Data/dgMixed.dg\n  Data/dgPyramid19.dg\n  Data/dgPyramids.dg\n  Data/dgQuadraticQuadrilaterals.dg\n  Data/dgQuadrilateral.dg\n  Data/dgTetrahedra.dg\n  Data/dgTriangle.dg\n  Data/dgWedges.dg\n  Data/fandisk.dg\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for No-Wrapping\nDESCRIPTION: This snippet defines classes that will not be wrapped by VTK's wrapping tools. It lists classes like `vtkOpenXRManagerD3DGraphics` and `vtkOpenXRManagerRemoteConnection` which will be used directly.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenXRRemoting/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_classes\n  vtkOpenXRManagerD3DGraphics\n  vtkOpenXRManagerRemoteConnection\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for VTK H5Part Module\nDESCRIPTION: Defines the list of source files for the H5Part module, including implementation files for H5Block, H5MultiBlock, and H5Part functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/h5part/vtkh5part/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  src/H5Block.c\n  src/H5BlockF.c\n  src/H5BlockReadWrite.c\n  src/H5BlockReadWriteF.c\n  src/H5MultiBlock.c\n  src/H5MultiBlockReadWrite.c\n  src/H5PartAttrib.c\n  src/H5PartAttribF.c\n  src/H5Part.c\n  src/H5PartF.c\n  src/TestUnderscoreC.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: This snippet configures the include directories for the token library to ensure the proper paths are available during the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(token\n  PUBLIC\n    $<BUILD_INTERFACE:${token_SOURCE_DIR}>\n    $<BUILD_INTERFACE:${token_BINARY_DIR}>\n    # XXX(kitware): Use path that works with VTK module\n    # $<INSTALL_INTERFACE:include/token/${token_VERSION}>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating HDF IO Test Executable in VTK using CMake\nDESCRIPTION: Builds the executable for the serial VTK HDF IO tests. This command links the test source files and creates a runnable test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/HDF/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOHDFCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This CMake command adds the `Cxx` directory as a subdirectory to the current project. CMake will process the CMakeLists.txt file within the `Cxx` directory, incorporating its targets and settings into the overall build process. This is a common pattern for organizing large CMake projects into modular components.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Parallel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Build\nDESCRIPTION: CMake directive to include the Cxx subdirectory in the build process, which contains the C++ implementation files for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fast_float/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring TIFF Normal Reader Test in CMake for VTK\nDESCRIPTION: Sets up a test for the VTK TIFF reader with standard TIFF files using a test TIFF example.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestTIFFReaderMultipleNormal,TestTIFFReaderMultiple.cxx,NO_VALID,NO_OUTPUT\n    \"DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/libtiff/test.tif}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Test Case and Setting Properties\nDESCRIPTION: This snippet adds a test case named `${KWIML_TEST_PREFIX}.test` which executes the `kwiml_test` executable. It also sets the `LABELS` property for the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_test(NAME ${KWIML_TEST_PREFIX}.test COMMAND kwiml_test)\nset_property(TEST ${KWIML_TEST_PREFIX}.test PROPERTY LABELS ${KWIML_TEST_LABELS})\"\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable with vtk_test_cxx_executable\nDESCRIPTION: This CMake snippet employs the `vtk_test_cxx_executable` macro to create the executable for the test named `vtkcli11CxxTests`. This configures the executable target for use in the CMake testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkcli11CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of C++ Subdirectory in CMake\nDESCRIPTION: Adds the 'Cxx' subdirectory if C++ testing is not disabled for the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ParallelXML/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing VTK LibPROJ Header in CMake\nDESCRIPTION: This snippet configures the vtk_libproj.h header file and installs it. It uses CMAKE_CURRENT_SOURCE_DIR and CMAKE_CURRENT_BINARY_DIR to manage file paths for configuration and installation.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_libproj.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_libproj.h\")\n\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_libproj.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling\nDESCRIPTION: This CMake snippet adds test mangling for the VTK::IOOMF module using the `vtk_add_test_mangling` command. This is likely related to ensuring proper symbol visibility and linking during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OMF/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOOMF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Expat Character Encoding Options\nDESCRIPTION: Sets up character encoding options for Expat, including Unicode support and wchar_t handling. Configures build flags based on the selected character type.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXPAT_CHAR_TYPE STREQUAL \"char\")\n    set(_EXPAT_UNICODE OFF)\n    set(_EXPAT_UNICODE_WCHAR_T OFF)\nelseif(EXPAT_CHAR_TYPE STREQUAL \"ushort\")\n    set(_EXPAT_UNICODE ON)\n    set(_EXPAT_UNICODE_WCHAR_T OFF)\n    if(EXPAT_BUILD_EXAMPLES)\n        message(SEND_ERROR \"Examples can not be built with option -DEXPAT_CHAR_TYPE=ushort. Please pass -DEXPAT_CHAR_TYPE=(char|wchar_t) or -DEXPAT_BUILD_EXAMPLES=OFF.\")\n    endif()\n    if(EXPAT_BUILD_TESTS)\n        message(SEND_ERROR \"The testsuite can not be built with option -DEXPAT_CHAR_TYPE=ushort. Please pass -DEXPAT_CHAR_TYPE=(char|wchar_t) or -DEXPAT_BUILD_TESTS=OFF.\")\n    endif()\n    if(EXPAT_BUILD_TOOLS)\n        message(SEND_ERROR \"The xmlwf tool can not be built with option -DEXPAT_CHAR_TYPE=ushort. Please pass -DEXPAT_CHAR_TYPE=(char|wchar_t) or -DEXPAT_BUILD_TOOLS=OFF.\")\n    endif()\nelseif(EXPAT_CHAR_TYPE STREQUAL \"wchar_t\")\n    set(_EXPAT_UNICODE ON)\n    set(_EXPAT_UNICODE_WCHAR_T ON)\n    if(NOT WIN32)\n        string(FIND \"${CMAKE_C_FLAGS}\" \"-fshort-wchar\" _expat_short_wchar_found)\n        if(${_expat_short_wchar_found} EQUAL \"-1\")\n            message(SEND_ERROR \"Configuration -DEXPAT_CHAR_TYPE=wchar_t requires -DCMAKE_{C,CXX}_FLAGS=-fshort-wchar (which was not found) and libc compiled with -fshort-wchar, too.\")\n        endif()\n        if (EXPAT_BUILD_TOOLS)\n            message(SEND_ERROR \"The xmlwf tool can not be built with option -DEXPAT_CHAR_TYPE=wchar_t outside of Windows. Please pass -DEXPAT_CHAR_TYPE=char or -DEXPAT_BUILD_TOOLS=OFF.\")\n        endif()\n    endif()\nelse()\n    message(SEND_ERROR \"Option -DEXPAT_CHAR_TYPE=(char|ushort|wchar_t) cannot be \\\"${EXPAT_CHAR_TYPE}\\\".\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: VTK Citation in BibTeX Format\nDESCRIPTION: BibTeX entry for citing VTK in scientific research publications, referencing the fourth edition of 'The Visualization Toolkit' book by Schroeder, Martin, and Lorensen.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/about.md#2025-04-21_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@Book{vtkBook,\n  author    = \"Will Schroeder and Ken Martin and Bill Lorensen\",\n  title     = \"The Visualization Toolkit (4th ed.)\",\n  publisher = \"Kitware\",\n  year      = \"2006\",\n  isbn      = \"978-1-930934-19-1\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK CityGML Reader Tests in CMake\nDESCRIPTION: This CMake snippet sets up the test suite for the VTK CityGML reader by adding a C++ test and creating an executable. It specifies TestCityGMLReader.cxx as the test file to be included in the test suite.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CityGML/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOCityGMLCxxTests tests\n  TestCityGMLReader.cxx\n  )\nvtk_test_cxx_executable(vtkIOCityGMLCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding TestStringToPath Python Test\nDESCRIPTION: This snippet conditionally adds the `TestStringToPath.py` Python test if the `VTK::PythonContext2D` target is defined. This indicates that the `TestStringToPath.py` test depends on the functionality provided by the `VTK::PythonContext2D` module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET VTK::PythonContext2D)\n  vtk_add_test_python(\n    TestStringToPath.py\n  )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Emscripten Link Options Configuration\nDESCRIPTION: Sets up Emscripten-specific linking options including memory settings, exported functions, and environment configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/WebAssembly/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(emscripten_link_options)\nlist(APPEND emscripten_link_options\n  \"-lembind\"\n  \"--extern-post-js=${CMAKE_CURRENT_SOURCE_DIR}/post.js\"\n  \"-sALLOW_MEMORY_GROWTH=1\"\n  \"-sALLOW_TABLE_GROWTH=1\"\n  \"-sEXPORT_NAME=vtkWasmSceneManager\"\n  \"-sENVIRONMENT=node,web\"\n  \"-sEXPORTED_RUNTIME_METHODS=['addFunction','UTF8ToString']\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Factory - CMake\nDESCRIPTION: This snippet configures the object factory with files and export macros, centralizing the object creation logic for the specified rendering volume module in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGVOLUMEOPENGL2_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Module Test Data and Directory\nDESCRIPTION: CMake conditional block that configures test data files and includes Python subdirectory when VTK_WRAP_PYTHON is enabled. Specifies required test data files including BMP, OBJ, and MINC formats.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MINC/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/masonry.bmp\n    Data/mni-surface-mesh.obj\n    Data/t3_grid_0.mnc)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Atamai License Declaration\nDESCRIPTION: License terms from Atamai, Inc. specifying conditions for source and binary redistribution with disclaimer of warranty and liability limitations.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MINC/Copyright.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*=========================================================================\n\nCopyright (c) 2006 Atamai, Inc.\n\nUse, modification and redistribution of the software, in source or\nbinary forms, are permitted provided that the following terms and\nconditions are met:\n\n1) Redistribution of the source code, in verbatim or modified\n   form, must retain the above copyright notice, this license,\n   the following disclaimer, and any notices that refer to this\n   license and/or the following disclaimer.\n\n2) Redistribution in binary form must include the above copyright\n   notice, a copy of this license and the following disclaimer\n   in the documentation or with other materials provided with the\n   distribution.\n\n3) Modified copies of the source code must be clearly marked as such,\n   and must not be misrepresented as verbatim copies of the source code.\n\nTHE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE SOFTWARE \"AS IS\"\nWITHOUT EXPRESSED OR IMPLIED WARRANTY INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  IN NO EVENT SHALL ANY COPYRIGHT HOLDER OR OTHER PARTY WHO MAY\nMODIFY AND/OR REDISTRIBUTE THE SOFTWARE UNDER THE TERMS OF THIS LICENSE\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, LOSS OF DATA OR DATA BECOMING INACCURATE\nOR LOSS OF PROFIT OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF\nTHE USE OR INABILITY TO USE THE SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n=========================================================================*/\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake command includes the C++ implementation subdirectory in the VTK build process. It instructs CMake to process the CMakeLists.txt file found in the 'Cxx' directory, which contains the C++ components of the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf3/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersAMR Module and Test Mangling\nDESCRIPTION: Adds the defined classes to the VTK::FiltersAMR module and sets up test mangling for the module. This configures the module for building and testing within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/AMR/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersAMR\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersAMR)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Compile Options\nDESCRIPTION: Sets the compile options for the WrappedAsyncClipper target. These options, which includes pthread, are set to be public, affecting all dependent targets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/WrappedAsyncClipper/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_compile_options(WrappedAsyncClipper\\n  PUBLIC\\n    ${emscripten_compile_options}\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting executable permission for update.sh on Unix systems\nDESCRIPTION: Command for making the update.sh script executable and staging the change in Git on Unix-based systems. This is necessary before committing the script.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/UPDATING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ chmod u+x update.sh && git add -u update.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring PROJ Data Files in CMake\nDESCRIPTION: Sets up configuration files and projection dictionaries for PROJ. It defines lists of files to be used in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/data/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CONFIG_FILES\n  proj.ini\n)\n\nset(PROJ_DICTIONARY\n  world\n  other.extra\n  nad27\n  GL27\n  nad83\n  nad.lst\n  CH\n  ITRF2000\n  ITRF2008\n  ITRF2014\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Classes for VTK IOH5Rage Module - CMake\nDESCRIPTION: This snippet sets up the classes for the VTK IOH5Rage module, specifically declaring H5RageAdaptor and vtkH5RageReader. It is used in the configuration of a VTK module and is essential for the proper linking of classes in the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/H5Rage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  H5RageAdaptor\n  vtkH5RageReader)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Test Directory Configuration in CMake\nDESCRIPTION: This snippet conditionally adds the Python test subdirectory if Python wrapping is enabled for VTK. It controls whether Python tests will be built as part of the testing infrastructure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Opening Built Documentation on macOS\nDESCRIPTION: Opens the built VTK documentation in the default web browser on macOS systems using the open command.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_documentation.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopen _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Using FetchContent to Download nlohmann_json at Configure Time\nDESCRIPTION: CMake snippet demonstrating how to automatically download the JSON library as a dependency at configure time using FetchContent, available since CMake v3.11.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/nlohmannjson/vtknlohmannjson/README.md#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\n\nFetchContent_Declare(json URL https://github.com/nlohmann/json/releases/download/v3.11.3/json.tar.xz)\nFetchContent_MakeAvailable(json)\n\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable Configuration\nDESCRIPTION: Configures the final test executable with specific flags for floating point exceptions and rendering factory setup.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkImagingCoreCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory\nDESCRIPTION: Configures CMake to include and process the Cxx subdirectory, which likely contains C++ source files and build instructions\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion in CMake\nDESCRIPTION: This CMake code snippet conditionally adds the 'Ex2' subdirectory.  The 'Ex2' subdirectory is only included if the target 'VTK::RenderingOpenGL2' exists, checking the existence of a VTK rendering module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Examples/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET VTK::RenderingOpenGL2)\n  add_subdirectory(Ex2)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-Specific Definitions and Source Lists\nDESCRIPTION: Adds platform-specific definitions and combines the source file lists for building the XDMF library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32)\n  add_definitions(-D_HPUX_SOURCE) #???\nendif()\n\nset(XdmfSources ${XdmfFormatSource} ${XdmfExtraSource} ${XdmfModelSource})\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files in CMake\nDESCRIPTION: Specifies data files needed for VTK module testing. Includes CSV files for information visualization tests, a VTU file for unstructured grid data testing, and a PNG image file. After defining test data files, the configuration adds the Cxx subdirectory for C++ test implementations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/Infovis/authors-tabletographtest.csv\n  Data/Infovis/merge1.csv\n  Data/Infovis/merge2.csv\n  Data/authors.csv\n  Data/cube.vtu\n  Data/hearts8bit.png)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Filters Points Module and Test Mangling in CMake\nDESCRIPTION: Adds the VTK Filters Points module to the project and sets up test mangling. This configures the module with the previously defined classes and prepares it for testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersPoints\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersPoints)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required version of CMake to ensure compatibility with certain features used in the build configuration. No parameters are required, and no direct inputs or outputs are involved.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Modernized Qt VTK Widget Methods\nDESCRIPTION: Updated method names for Qt VTK widget classes showing the transition from legacy naming to Qt-style naming conventions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.2.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// Old API\nQVTKOpenGLNativeWidget::SetRenderWindow()\nQVTKOpenGLNativeWidget::GetRenderWindow()\n\n// New API\nQVTKOpenGLNativeWidget::setRenderWindow()\nQVTKOpenGLNativeWidget::renderWindow()\n```\n\n----------------------------------------\n\nTITLE: Deprecated Shader Related Methods\nDESCRIPTION: Shader-related methods that have been moved from vtkOpenGLPolyDataMapper to vtkShaderProperty with equivalent functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.2.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvtkOpenGLPolyDataMapper::AddShaderReplacement()\nvtkOpenGLPolyDataMapper::ClearShaderReplacement()\nvtkOpenGLPolyDataMapper::SetVertexShaderCode()\nvtkOpenGLPolyDataMapper::SetFragmentShaderCode()\nvtkOpenGLPolyDataMapper::SetGeometryShaderCode()\n```\n\n----------------------------------------\n\nTITLE: Explicit Flag Values in CLI11 (C++)\nDESCRIPTION: Demonstrates the explicit form of flag option syntax with specific values assigned to different flags. Shows both the negation syntax and explicit value assignment.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cli11/vtkcli11/README.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\napp.add_flag(\"-1{1},-2{2},-3{3}\",result,\"numerical flag\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Headers\nDESCRIPTION: Defines the header files that are part of the module's public API.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/DataModel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers\n  vtkCellGridResponder.h\n  vtkCellGridResponderBase.h\n  vtkCellType.h\n  vtkColor.h\n  vtkDataAssemblyVisitor.h\n  vtkDataObjectTreeInternals.h\n  vtkHyperTreeGridScales.h\n  vtkHyperTreeGridTools.h\n  vtkIntersectionCounter.h\n  vtkLabelMapLookup.h\n  vtkRect.h\n  vtkVector.h\n  vtkVectorOperators.h)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Deployment Target for Apple\nDESCRIPTION: This snippet specifies the minimum version of CMake required (3.9 to 3.22) and handles checks for Apple's deployment target, resetting cache variables when necessary. This ensures appropriate configuration checks are performed based on the deployment environment.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.9...3.22 FATAL_ERROR)\n\nif (APPLE)\n  if (NOT CMAKE_OSX_DEPLOYMENT_TARGET STREQUAL KWSYS_LAST_OSX_DEPLOYMENT_TARGET)\n    unset(KWSYS_CXX_HAS_UTIMENSAT CACHE)\n  endif ()\n  set(KWSYS_LAST_OSX_DEPLOYMENT_TARGET \"${CMAKE_OSX_DEPLOYMENT_TARGET}\"\n    CACHE INTERNAL \"remember the last deployment target to trigger configure rechecks\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Tracking VTK Release Branch\nDESCRIPTION: Command to create and switch to a local branch that tracks the upstream release branch, which contains stable releases with bug fixes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/developers_guide/git/download.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout --track -b release origin/release\n```\n\n----------------------------------------\n\nTITLE: Installing License Documentation in CMake\nDESCRIPTION: Handles the installation of license documentation, configuring it as part of the runtime component.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(KWSYS_INSTALL_DOC_DIR)\n  if(KWSYS_INSTALL_COMPONENT_NAME_RUNTIME)\n    set(KWSYS_INSTALL_LICENSE_OPTIONS ${KWSYS_INSTALL_LICENSE_OPTIONS}\n      COMPONENT ${KWSYS_INSTALL_COMPONENT_NAME_RUNTIME}\n      )\n  endif()\n\n  install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt\n    DESTINATION ${KWSYS_INSTALL_DOC_DIR}/${KWSYS_NAMESPACE}\n    ${KWSYS_INSTALL_LICENSE_OPTIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data and Directory Structure in CMake\nDESCRIPTION: Sets up test data files and directories for VTK module testing. Specifies the publications.csv test data file and adds the Cxx subdirectory to the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/BoostGraphAlgorithms/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/Infovis/publications.csv)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: New Unmangled Method Declaration\nDESCRIPTION: Declaration of the new GetNameOfClass method that replaces the original GetClassName method, providing a clean solution without Windows API name mangling issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Upgrading/README.WindowsMangling.txt#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual const char* GetNameOfClass() const;\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module Test Data\nDESCRIPTION: Adds a VTK unstructured grid test data file (voronoiMesh.vtu) to the module's test resources\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/voronoiMesh.vtu)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Web Core C++ Tests\nDESCRIPTION: Sets up VTK C++ tests for the Web Core module. Configures the TestDataEncoder test case with the NO_VALID flag and creates the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkWebCoreCxxTests tests\n  NO_VALID\n  TestDataEncoder.cxx)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkWebCoreCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding test mangling\nDESCRIPTION: This snippet adds test mangling for the `VTK::SerializationManager` module. This helps ensure the module functions correctly in different environments and configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Serialization/Manager/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mangling(VTK::SerializationManager)\n```\n\n----------------------------------------\n\nTITLE: Adding VPIC Module to VTK\nDESCRIPTION: Creates the VPIC module for VTK, specifying the source and header files and setting the header subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/vpic/vtkvpic/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::vpic\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \"vtkvpic\")\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for VTK Migration Guides in Markdown\nDESCRIPTION: This code snippet creates a table of contents using the toctree directive in Markdown. It specifies the ModuleMigration guide as the only content item.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/migration_guides/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:titlesonly:\n:caption: Contents\n\nModuleMigration\n```\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test Mangling for IOXdmf3\nDESCRIPTION: This snippet adds a test to ensure proper name mangling for the VTK::IOXdmf3 module. This test is crucial for ensuring that the module's symbols are correctly linked and used in VTK applications.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOXdmf3)\n```\n\n----------------------------------------\n\nTITLE: Initial import of RapidJSON into third-party repository\nDESCRIPTION: Steps for importing a new third-party project (RapidJSON) into a Kitware GitLab repository, including cloning from the original source, adding the Kitware remote, and creating the for/fides branch for tracking Fides-specific patches.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/UPDATING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/Tencent/rapidjson.git\n$ cd rapidjson/\n$ git remote add kitware git@gitlab.kitware.com:third-party/rapidjson.git\n$ git push -u kitware\n$ git push -u kitware --tags\n$ git checkout -b for/fides\n$ git push --set-upstream kitware for/fides\n```\n\n----------------------------------------\n\nTITLE: Mangling Tests in VTK TestingCore Module\nDESCRIPTION: This snippet adds test mangling for the VTK TestingCore module, ensuring consistency in test names across different compilation units.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Core/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::TestingCore)\n\n```\n\n----------------------------------------\n\nTITLE: HDF5 File Space Strategy Feature Check\nDESCRIPTION: C code to test for HDF5 file space strategy support (HDF5 >= 1.10.1)\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include \"hdf5.h\"\nint main(void)\n{\n   hid_t foo;\n   H5Pset_file_space_strategy(foo, H5F_FSPACE_STRATEGY_FSM_AGGR, 1, (hsize_t)1);\n   return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Python-Specific Test Data Configuration\nDESCRIPTION: Configures additional test data paths specifically for Python testing and adds Python subdirectory when Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/General/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/42400-IDGH.stl\n    Data/EnSight/,REGEX:elements\\..*\n    Data/RectGrid2.vtk\n    Data/RedCircle.png\n    Data/SampleStructGrid.vtk\n    Data/camscene.png\n    Data/can.ex2\n    Data/combq.bin\n    Data/combxyz.bin\n    Data/earth.ppm\n    Data/headsq/,REGEX:.*\n    Data/ironProt.vtk\n    Data/office.binary.vtk\n    Data/uGridEx.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking LibArchive to VTK Common Archive CXX Tests in CMake\nDESCRIPTION: Links the LibArchive library to the VTK Common Archive C++ test executable as a private dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(vtkCommonArchiveCxxTests\n  PRIVATE\n  LibArchive::LibArchive)\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Wrapped VTK ANARI Classes\nDESCRIPTION: Specifies which classes in the ANARI module should not be wrapped for language bindings, including interface and profiling classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(nowrap_classes\n  vtkAnariPolyDataMapperInheritInterface\n  vtkAnariProfiling\n)\n```\n\n----------------------------------------\n\nTITLE: Building Test Executable for vtkloguruCxx\nDESCRIPTION: This command instructs CMake to generate an executable for the vtkloguruCxxTests tests. It sets the necessary linkages and configurations for building the test executable, allowing developers to run the tests defined earlier.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkloguruCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test with Specific Conditions - CMake\nDESCRIPTION: This snippet utilizes the vtk_add_test_cxx macro to register a unit test for the vtkdiy2 module. It specifies conditions such as NO_DATA, NO_VALID, and NO_OUTPUT, along with the test file TestIncludeDIY2.cxx required for the test's execution. This facilitates the development of robust software by ensuring that the vtkdiy2 module behaves as expected under different test scenarios.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkdiy2CxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeDIY2.cxx)\n```\n\n----------------------------------------\n\nTITLE: Installing Fides Header Files\nDESCRIPTION: Sets up the installation rules for the Fides headers. The headers will be installed to the predefined directory within the Fides include installation path.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/predefined/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${headers}\n  DESTINATION ${FIDES_INSTALL_INCLUDE_DIR}/predefined)\n```\n\n----------------------------------------\n\nTITLE: Defining EnSight Python Tests in VTK\nDESCRIPTION: Adds multiple Python test files for the EnSight file format reader in VTK. Some tests are marked with NO_VALID or NO_RT flags to indicate they should not be validated or regression tested.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  EnSight6Elements.py\n  EnSight6ElementsBin.py\n  EnSight6OfficeBin.py\n  EnSight6TemporalGeometryChange.py,NO_VALID\n  EnSightBlow1ASCII.py\n  EnSightBlow1Bin.py\n  EnSightBlow2ASCII.py\n  EnSightBlow2Bin.py\n  EnSightBlow3Bin.py\n  EnSightBlow4Bin.py\n  EnSightBlow5ASCII.py\n  EnSightCompound.py\n  EnSightGoldAsymTensor.py\n  EnSightGoldAsymTensorBin.py\n  EnSightGoldElements.py\n  EnSightGoldElementsBin.py\n  EnSightGoldEmptyParts.py,NO_VALID,NO_RT\n  EnSightGoldFortran.py\n  EnSightGoldRigidBody.py\n  EnSightGoldUndefAndPartialAscii.py,NO_VALID,NO_RT\n  EnSightGoldUndefAndPartialBin.py,NO_VALID,NO_RT\n  EnSightIronProtASCII.py\n  EnSightIronProtBin.py\n  EnSightMandelbrot.py\n  EnSightNfacedASCII.py\n  EnSightNfacedBin.py\n  EnSightOfficeASCII.py\n  EnSightOfficeBin.py\n  EnSightRectGridASCII.py\n  EnSightRectGridBin.py\n  EnSightSelectArrays.py\n  EnSightTensorsInversion.py\n  EnSightTensorsInversionBin.py\n  EnSightTimeChange.py,NO_VALID,NO_RT\n  nacaBinary.py\n  TestEnSightGoldCombinedReader.py,NO_RT\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring GL2PS Tests in VTK with CMake\nDESCRIPTION: This code sets up VTK's GL2PS testing suite. It includes test files for various GL2PS functionality like billboard text, context, labeled data mappers, scalar bars, text actors, and stacked plots. The tests are conditionally enabled only when GhostScript is available on the system.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportGL2PS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(../../../../CMake/vtkGhostscript.cmake)\n\n# Only run GL2PS tests if GhostScript is available\nif(VTK_GHOSTSCRIPT_EXECUTABLE)\n  set(GL2PSTests\n    TestGL2PSBillboardTextActor3D.cxx\n    TestGL2PSContext.cxx # No image export supported in OGL\n    TestGL2PSLabeledDataMapper.cxx\n    TestGL2PSScalarBar.cxx\n    TestGL2PSTextActor3D.cxx\n    TestGL2PSTextActor.cxx\n    TestGL2PSTextMapper.cxx\n    TestStackedPlotGL2PS.cxx\n    )\n\n  set(GL2PSTestsPDFBothOpenGL\n    TestGL2PSExporterMultipleRenderers.cxx\n    TestGL2PSExporterRaster.cxx\n    TestGL2PSExporterVolumeRaster.cxx\n    )\n\n  set(GL2PSTestsPDF\n    ${GL2PSTestsPDFBothOpenGL}\n  )\n\n  vtk_add_test_cxx(vtkIOExportGL2PSCxxTests tests\n    ${GL2PSTests}\n    ${GL2PSTestsPDF}\n    )\n  vtk_test_cxx_executable(vtkIOExportGL2PSCxxTests tests\n    DISABLE_FLOATING_POINT_EXCEPTIONS\n    RENDERING_FACTORY\n    )\n\n  set(TestGL2PSExporterVolumeRasterError 50)\n\n  include(../../../../CMake/vtkTestingGL2PS.cmake)\n  # text alignment and rotation with TextAsPath off is not\n  # yet implemented for the OpenGL2 backend.\n  vtk_add_gl2ps_test_cxx(${GL2PSTests})\n  # test postscript and pdf\n  vtk_add_gl2ps_test_cxx(pdf ${GL2PSTestsPDFBothOpenGL})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Inclusion\nDESCRIPTION: Conditionally adds the C++ (Cxx) subdirectory for testing if C++ testing is not disabled in the VTK build configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Including Java Directory in VTK Build\nDESCRIPTION: CMake command to add the Java subdirectory to the build process, enabling Java bindings/wrappers for VTK\nSOURCE: https://github.com/kitware/vtk/blob/master/Wrapping/Java/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Java)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common System Tests in CMake\nDESCRIPTION: Sets up C++ test files for the VTK Common System module and creates a test executable. Includes test files for Directory, ExecutableRunner, and TimerLog components with no data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/System/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonSystemCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestDirectory.cxx\n  TestExecutableRunner.cxx\n  otherTimerLog.cxx\n  )\n\nvtk_test_cxx_executable(vtkCommonSystemCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring PROJ_LIB Environment Variable Behavior in CMake\nDESCRIPTION: Sets whether the PROJ_LIB environment variable should be tried after the hardcoded location in the PROJ project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJ_LIB_ENV_VAR_TRIED_LAST OFF)\nif(PROJ_LIB_ENV_VAR_TRIED_LAST)\n    add_definitions(-DPROJ_LIB_ENV_VAR_TRIED_LAST)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for VTK Imaging Color CXX Tests\nDESCRIPTION: This CMake command creates an executable named `vtkImagingColorCxxTests` for the C++ tests. It compiles and links the source files specified in the `vtk_add_test_cxx` command to create the test executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Color/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkImagingColorCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test with vtk_add_test_python\nDESCRIPTION: This snippet registers a Python test for the VTK project using the vtk_add_test_python command. It is designed to integrate the specified Python script (ReadXdmf2Polyhedron.py) with the testing framework, without validating output (NO_VALID) and without running in real-time (NO_RT). The key parameters include the test script filename and flags indicating the testing mode.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  ReadXdmf2Polyhedron.py,NO_VALID,NO_RT\n)\n```\n\n----------------------------------------\n\nTITLE: Extract and set project version for libogg\nDESCRIPTION: Using regular expressions, this snippet extracts the major, minor, and patch version numbers from configure.ac or sets default values. It then sets the project version for use in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\nset(PROJECT_VERSION_MAJOR 1)\nset(PROJECT_VERSION_MINOR 3)\nset(PROJECT_VERSION_PATCH 4)\nset(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})\n\n```\n\n----------------------------------------\n\nTITLE: Copying HTML File to Build Directory in CMake\nDESCRIPTION: This command copies the 'index.html' file to the build directory of 'MultiCone', ensuring that the necessary HTML interface is present for the WebAssembly application.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  TARGET MultiCone\n  COMMAND\n    ${CMAKE_COMMAND} -E copy_if_different\n      \"${CMAKE_CURRENT_SOURCE_DIR}/index.html\"\n      $<TARGET_FILE_DIR:MultiCone>\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Inclusion\nDESCRIPTION: Conditionally adds the C++ test directory if VTK C++ testing is not disabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Engys/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTKMY Common Library - CMake\nDESCRIPTION: This snippet creates the vtkmyCommon library under the VTKMY namespace by utilizing the classes defined previously. This library can be linked with other components of the VTK project. The module is specified with a unique namespace, ensuring modular design within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/Common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTKMY::Common\\n  CLASSES ${classes})\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Creation with VTK Module System\nDESCRIPTION: Provides alternative library creation methods using VTK's module system with platform-specific configurations\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libharu/vtklibharu/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): Use VTK's module system\nadd_library(hpdf ${LIBHPDF_SRCS})\n...\nelse ()\n  vtk_module_add_module(VTK::libharu\n    SOURCES ${LIBHPDF_SRCS})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: New Pipeline Update Example\nDESCRIPTION: Example demonstrating the new simplified API for pipeline updates with requests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/Doxygen/ChangesVTK-7-1.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvtkNew<vtkRTAnalyticSource> source;\nint updateExtent[6] = {0, 5, 0, 5, 2, 2};\n// Set some properties of source here\nsource->UpdateExtent(updateExtent);\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module with CMake\nDESCRIPTION: This snippet defines a list of classes, sets up a VTK module, and adds test mangling for serialization using CMake. Dependencies include VTK and CMake setup. The 'set' command initializes a list of classes and the 'vtk_module_add_module' command is used to register the module, with 'vtk_add_test_mangling' adding test mangling for the specified module classes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/Serialization/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkSerDesMock\n  vtkSerDesMockObject)\n\nvtk_module_add_module(VTK::TestingSerialization\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::TestingSerialization)\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Testfixture - Windows Command\nDESCRIPTION: Command to build the augmented TCL interpreter (testfixture) for running SQLite tests on Windows systems using Microsoft's nmake.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\nnmake /f Makefile.msc testfixture.exe\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Build\nDESCRIPTION: CMake command to include the Cxx directory in the build process. This directive tells CMake to process the CMakeLists.txt file in the Cxx subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MPI/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Checking for Alpha Channel Colorspace Extensions in C\nDESCRIPTION: Shows how to check for the existence of libjpeg-turbo's alpha channel colorspace extensions at compile time using a preprocessor macro.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_ALPHA_EXTENSIONS\n// Alpha channel colorspace extensions are supported\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party CGNS Module\nDESCRIPTION: This snippet uses the `vtk_module_third_party` CMake function to configure the CGNS library for use as a third-party module in VTK. It specifies the license details including the SPDX license identifier, copyright text, and download location. The function further includes details about internal and external module properties, such as package name, version, and the targets to include. The configuration ensures that the module includes standard directories and specifies its installation paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_third_party(\n  INTERNAL\n    LICENSE_FILES\n      \"vtkcgns/license.txt\"\n    SPDX_LICENSE_IDENTIFIER\n      \"Zlib\"\n    SPDX_COPYRIGHT_TEXT\n      \"© Copyright 1991-2020, CGNS Steering Commmittee\"\n    SPDX_DOWNLOAD_LOCATION\n      \"git+https://gitlab.kitware.com/third-party/cgns.git@for/vtk-20250124-4.5.0-2\"\n    VERSION\n      \"4.50\"\n    STANDARD_INCLUDE_DIRS\n  EXTERNAL\n    PACKAGE CGNS\n    VERSION       \"4.10\"\n    TARGETS CGNS::CGNS\n    STANDARD_INCLUDE_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Fides Python Tests in CMake\nDESCRIPTION: This CMake code registers three Python tests for the Fides component in VTK. The tests are registered with the vtk_add_test_python function, with specific flags indicating test requirements. The NO_VALID flag suggests the test doesn't need validation against reference images, NO_OUTPUT indicates no standard output validation, and NO_DATA indicates the test doesn't require external data files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Fides/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n   TestFidesBasic.py,NO_VALID,NO_OUTPUT\n   TestFidesWriterBasic.py,NO_DATA,NO_VALID\n   TestFidesWriterTime.py,NO_DATA,NO_VALID\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HDF5 Library Target to the Build\nDESCRIPTION: Adds the HDF5 source directory to the build process. This ensures that the HDF5 library is built as part of the larger project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory (src)\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Allocation Sanity Checks in CMake for HDF5\nDESCRIPTION: This snippet defines a CMake option to enable internal memory allocation sanity checks for HDF5. If enabled, it sets the H5_MEMORY_ALLOC_SANITY_CHECK variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\noption (HDF5_MEMORY_ALLOC_SANITY_CHECK \"Indicate that internal memory allocation sanity checks are enabled\" OFF)\nif (HDF5_MEMORY_ALLOC_SANITY_CHECK)\n  set (H5_MEMORY_ALLOC_SANITY_CHECK 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Header Existence Check for CXXABI\nDESCRIPTION: This snippet checks if the cxxabi.h header exists and whether it contains a demangle function, which is essential for symbol handling in C++. If found, it configures a header file for ABI.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/token/vtktoken/token/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Determine whether the cxxabi header exists and if it contains a demangle function.\n# XXX(c++17): prefer `__has_include`\ncheck_include_file_cxx(\"cxxabi.h\" HAVE_CXXABI_H)\nif (HAVE_CXXABI_H)\n  check_cxx_symbol_exists(abi::__cxa_demangle \"cxxabi.h\" token_HAS_CXXABI_DEMANGLE)\nendif()\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CxxABIConfigure.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CxxABIConfigure.h\")\n```\n\n----------------------------------------\n\nTITLE: Defining XDMF Format Source Files in CMake\nDESCRIPTION: Creates a list of source files related to the XDMF format module. These files handle the core data format functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset( XdmfFormatSource\n  XdmfArray\n  XdmfDOM\n  XdmfDataDesc\n  XdmfDataItem\n  XdmfDataStructure\n  XdmfDataTransform\n  XdmfElement\n  XdmfExpression\n  XdmfHDF\n  XdmfHDFSupport\n  XdmfHeavyData\n  XdmfInformation\n  XdmfLightData\n  XdmfObject\n  XdmfValues\n  XdmfValuesBinary\n  XdmfValuesHDF\n  XdmfValuesXML\n  )\n```\n\n----------------------------------------\n\nTITLE: VTK Test Data Registration\nDESCRIPTION: Registers test data files for VTK module testing, including .bts, .vtpd, and .vtp files from the Engys dataset.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Engys/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n        Data/Engys/bts/2400-IDGH.bts\n        Data/Engys/vtpd/2400-IDGH.vtpd\n        Data/Engys/vtpd/2400-IDGH/2400-IDGH_0.vtp\n        Data/Engys/bts/multiple_patches.bts\n        Data/Engys/vtpd/multiple_patches.vtpd\n        Data/Engys/vtpd/multiple_patches/multiple_patches_0.vtp\n        Data/Engys/vtpd/multiple_patches/multiple_patches_1.vtp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Wrapping Directory Addition in CMake for VTK\nDESCRIPTION: This CMake snippet checks if Python wrapping is enabled for VTK. If the VTK_WRAP_PYTHON variable is true, it adds the Python subdirectory to the build process, allowing for Python bindings to be generated for VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/PythonContext2D/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: RapidJSON Configuration\nDESCRIPTION: Sets up RapidJSON configuration, defaulting to internal version rather than external dependency.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FIDES_USE_EXTERNAL_RAPIDJSON OFF)\n```\n\n----------------------------------------\n\nTITLE: Disabling HDF5 Map API in VTK\nDESCRIPTION: Explicitly disables the HDF5 Map API for VTK's build. In the original code this would be an option, but for VTK it's hardcoded to OFF.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset (HDF5_ENABLE_MAP_API OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Test Executable with vtk_test_cxx_executable\nDESCRIPTION: This CMake command creates a C++ executable for the specified test. It takes the test name ('vtkIOOggTheoraCxxTests tests') as an argument and configures the executable to link against the necessary VTK libraries and dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOOggTheoraCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Charts Core C++ Tests in CMake\nDESCRIPTION: Specifies a list of C++ test files for the VTK Charts Core module, including options for data handling and validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Charts/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkChartsCoreCxxTests tests\n  TestAdjustLowerBoundForLogPlot.cxx\n  TestContextScene.cxx,NO_DATA,NO_VALID\n  TestColorTransferControlPointsItem.cxx,NO_DATA,NO_VALID\n  TestCompositeControlPointsItem.cxx,NO_DATA,NO_VALID\n  TestControlPointsItemEvents.cxx,NO_DATA,NO_VALID\n  TestAreaPlot.cxx\n  TestAxes.cxx,LOOSE_VALID\n  TestAxes2.cxx\n  TestBagPlot.cxx,LOOSE_VALID\n  TestBarGraph.cxx,LOOSE_VALID\n  TestBarGraphHorizontal.cxx,LOOSE_VALID\n  TestBarGraphSelection.cxx,LOOSE_VALID\n  TestBoxPlot.cxx,LOOSE_VALID\n  TestBoxPlot2.cxx,LOOSE_VALID\n  TestCategoryLegend.cxx\n  TestColorTransferFunction.cxx\n  TestChartBadPoints.cxx,LOOSE_VALID\n  TestChartDouble.cxx\n  TestChartDoubleColors.cxx\n  TestChartDoubleColorsOpaque.cxx\n  TestChartLogScaleUpdates.cxx\n  TestChartMatrix.cxx,LOOSE_VALID\n  TestChartMatrix2.cxx,LOOSE_VALID\n  TestChartMatrix3.cxx\n  TestChartPicking.cxx,NO_DATA,NO_VALID\n  TestChartTileScaling.cxx\n  TestChartUnicode.cxx\n  TestChartsOn3D.cxx\n  TestChartXYInvertedAxis.cxx\n  TestChartXYZ.cxx\n  TestChartXYZMarginsRotations.cxx\n  TestChartXYZOuterEdgeLabelling.cxx\n  TestChartXYZUnconstrained.cxx\n  TestContext.cxx,LOOSE_VALID\n  TestContextArea.cxx,LOOSE_VALID\n  TestContextAreaFixedAspect.cxx,LOOSE_VALID\n  TestContextAreaFixedMargins.cxx,LOOSE_VALID\n  TestContextAreaFixedRect.cxx\n  TestContextImage.cxx\n  TestContextItemStacking.cxx\n  TestContextUnicode.cxx\n  TestControlPointsHandleItem.cxx\n  TestDiagram.cxx\n  TestFunctionalBagPlot.cxx,LOOSE_VALID\n  TestHistogram2D.cxx,LOOSE_VALID\n  TestHistogram2DComponent.cxx\n  TestHistogram2DMagnitude.cxx\n  TestInteractiveChartXYZ.cxx\n  TestLegendHiddenPlots.cxx,LOOSE_VALID\n  TestLinePlot.cxx\n  TestLinePlotDouble.cxx\n  TestLinePlotDouble2.cxx,LOOSE_VALID\n  TestLinePlot3D.cxx\n  TestLinePlotAxisFonts.cxx,LOOSE_VALID\n  TestLinePlot2.cxx\n  TestLinePlotInteraction.cxx\n  TestLinePlotSelection.cxx,LOOSE_VALID\n  TestLinePlotSelection2.cxx,LOOSE_VALID\n  TestLinePlotSelectionMultiBlock.cxx\n  TestMultipleChartRenderers.cxx,LOOSE_VALID\n  TestMultipleRenderers.cxx\n  TestMultipleScalarsToColors.cxx\n  TestParallelCoordinates.cxx\n  TestParallelCoordinatesDouble.cxx\n  TestParallelCoordinatesLegend.cxx\n  TestParallelCoordinatesSelection.cxx,NO_VALID\n  TestPieChart.cxx\n  TestPlotBarRangeHandlesItem.cxx,NO_DATA,NO_VALID\n  TestPlotMatrix.cxx,LOOSE_VALID\n  TestPlotRangeHandlesItem.cxx,NO_DATA,NO_VALID\n  TestPropItem.cxx\n  TestRangeHandlesItemEvents.cxx,NO_DATA,NO_VALID\n  TestScalarsToColors.cxx\n  TestScatterPlot.cxx,LOOSE_VALID\n  TestScatterPlotMatrix.cxx\n  TestScatterPlotMatrixHistogram.cxx\n  TestScatterPlotMatrixVehicles.cxx\n  TestScatterPlotMatrixVisible.cxx\n  TestScientificPlot.cxx,LOOSE_VALID\n  TestStackedBarGraph.cxx\n  TestStackedPlot.cxx,LOOSE_VALID\n  TestSurfacePlot.cxx\n  TestZoomAxis.cxx\n  TestZoomIndividualAxis.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Components in CMake\nDESCRIPTION: Initializes and configures the list of required C++ classes and C components for the library build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(KWSYS_CLASSES)\nset(KWSYS_H_FILES Configure SharedForward)\nset(KWSYS_HXX_FILES Configure String)\n\nset(cppclasses\n  Directory DynamicLoader Encoding Glob RegularExpression SystemTools\n  CommandLineArguments FStream SystemInformation ConsoleBuf Status\n  )\nforeach(cpp ${cppclasses})\n  if(KWSYS_USE_${cpp})\n    set(KWSYS_CLASSES ${KWSYS_CLASSES} ${cpp})\n    if(EXISTS ${PROJECT_SOURCE_DIR}/kwsys${cpp}.cmake)\n      include(${PROJECT_SOURCE_DIR}/kwsys${cpp}.cmake)\n    endif()\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Test Mangling\nDESCRIPTION: Adds test mangling for the VTK::IOParallel module using the vtk_add_test_mangling CMake function. This ensures that the module's tests are properly linked and executed within the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Parallel/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOParallel)\n```\n\n----------------------------------------\n\nTITLE: Modified (3-clause) BSD License Copyright Notice\nDESCRIPTION: Standard copyright notice for libjpeg-turbo under the Modified BSD License\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jpeg/vtkjpeg/LICENSE.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopyright (C)2009-2021 D. R. Commander.  All Rights Reserved.\nCopyright (C)2015 Viktor Szathmáry.  All Rights Reserved.\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Python Tests with CMake\nDESCRIPTION: Adds Python test files to VTK's test suite using vtk_add_test_python macro. Includes spline tests and parametric function tests, with some marked as LOOSE_VALID.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ComputationalGeometry/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_python(\n  CSpline.py\n  KSpline.py\n  TestParametricFunctions.py,LOOSE_VALID\n  TestMoreParametricFunctions.py,LOOSE_VALID\n  closedSplines.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining ExodusII Header Files\nDESCRIPTION: Sets the list of header files for the ExodusII library, including both source headers and generated configuration headers.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  include/exodusII.h\n  include/exodusII_int.h\n  include/vtk_exodusII_mangle.h\n  \"${CMAKE_CURRENT_BINARY_DIR}/include/exodusII_cfg.h\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/include/exodus_config.h\")\n```\n\n----------------------------------------\n\nTITLE: Running VTK Unit Tests with CTest\nDESCRIPTION: Command to run VTK unit tests with verbose output using CTest.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/docs/advanced/build_wasm_emscripten.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ctest -R FooUnitTest -VV\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Object Factory in CMake\nDESCRIPTION: Configures the VTK object factory, specifying source and header files, and an export macro for symbol visibility.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKRENDERINGPARALLELLIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Rendering Core Test Executable\nDESCRIPTION: Creates the test executable for VTK Rendering Core C++ tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingCoreCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK EnSight Single-Process Tests\nDESCRIPTION: Sets up C++ tests for VTK EnSight IO module, specifically for testing static mesh cache functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/EnSight/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkIOEnSightCxxTests tests\n  TestEnSightReaderStaticMeshCache.cxx,NO_VALID\n  )\n\nvtk_test_cxx_executable(vtkIOEnSightCxxTests tests\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Project Minimum Requirements\nDESCRIPTION: Sets the minimum CMake version and project name for the native VTK Android project\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12)\nproject(NativeVTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSPRay Tests in CMake for VTK Ray Tracing\nDESCRIPTION: Sets up a series of C++ tests for VTK's ray tracing capabilities using OSPRay. Tests include surface rendering, volume rendering, path tracing, and widget functionalities.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/RayTracing/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ENABLE_OSPRAY)\n  vtk_add_test_cxx(vtkRenderingRayTracingCxxTests tests\n    # Surface rendering tests\n    TestOSPRayAmbient.cxx\n#   TestOSPRayAMRVolumeRenderer.cxx #19221\n    TestOSPRayCompositePolyDataMapper2.cxx\n    TestOSPRayDepthOfField.cxx\n    TestOSPRayDynamicObject.cxx\n    TestOSPRayDynamicScene.cxx\n    TestOSPRayImplicits.cxx\n    TestOSPRayIsosurface.cxx\n    TestOSPRayLayers.cxx\n    TestOSPRayLights.cxx\n    TestOSPRayLightWidget.cxx\n    TestOSPRayMultiBlock.cxx\n#   TestOSPRayMultiBlockPartialArrayFieldData.cxx #19221\n    TestOSPRayOrthographic.cxx\n    TestOSPRayPass.cxx\n    TestOSPRayPointGaussianMapper.cxx\n    TestOSPRayRenderMesh.cxx\n    TestOSPRayRotatedNormals.cxx\n    TestOSPRayScalarBar.cxx\n    TestOSPRayTime.cxx\n    TestOSPRayUnstructuredVolumeMapper.cxx\n    TestOSPRayUnstructuredVolumeMapperMixedCells.cxx\n    TestOSPRayWindow.cxx\n    TestOSPRayStereo.cxx\n    TestRayTracedMolecules.cxx\n    # Volume rendering tests\n    TestGPURayCastCameraInside.cxx\n    TestGPURayCastCellData.cxx\n    TestGPURayCastCameraInsideSmallSpacing.cxx\n    TestGPURayCastMapperBenchmark.cxx\n    TestGPURayCastMapperSampleDistance.cxx\n    TestGPURayCastPerspectiveParallel.cxx\n    #TestGPURayCastPositionalLights.cxx\n    TestGPURayCastVolumeLightKit.cxx\n    TestGPURayCastVolumePolyData.cxx\n    TestGPURayCastVolumeScale.cxx\n    TestGPURayCastVolumeUpdate.cxx\n    TestGPUVolumeRayCastMapper.cxx\n#   TestOSPRayVolumeRenderer.cxx #19221\n    TestOSPRayVolumeRendererCrop.cxx\n#   TestSmartVolumeMapper.cxx #19221\n    # Path tracer tests\n    TestCategoricalMaterials.cxx\n    TestCategoricalMultiBlock.cxx\n    TestPathTracerBackground.cxx\n    TestPathTracerGLTFImporter.cxx DATA{../Data/WaterBottle.glb}\n    TestPathTracerLuminous.cxx\n    TestPathTracerMaterialLibrary.cxx,NO_VALID\n    TestPathTracerMaterials.cxx\n    TestPathTracerShadows.cxx\n    # Miscellaneous tests\n    TestOSPRayCache.cxx\n    TestOSPRayTiling.cxx\n    # Widgets tests\n    TestOSPRayBoxWidget2.cxx\n    TestOSPRayImplicitPlaneWidget2.cxx\n    TestOSPRayPointCloudWidget.cxx\n    TestOSPRayPointHandleRepresentation3D.cxx\n    TestOSPRayRepresentationVisibility.cxx\n    TestOSPRaySplineWidget2.cxx\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Paths in CMake\nDESCRIPTION: Specifies test data directory paths for FDS (Fire Dynamics Simulator) related tests in VTK. Includes multiple data directories with regex patterns to match all files.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/FDS/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n   Data/FDS/test_core/,REGEX:.*\n   Data/FDS/visibility_adjustment/,REGEX:.*\n   Data/FDS/1000meca/,REGEX:.*\n   )\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version with Project Definition\nDESCRIPTION: This snippet sets the minimum required version of CMake and defines the LabeledMesh project. It establishes the baseline for the project configuration and ensures compatibility with specific CMake features.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Annotation/Cxx/LabeledMesh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(LabeledMesh)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Freetype C++ Tests with CMake\nDESCRIPTION: This CMake snippet adds a C++ test for VTK Freetype and creates a test executable. It specifies that the test requires no data, validation, or output, and includes a single test file 'TestIncludeFreetype.cxx'.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkfreetypeCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeFreetype.cxx)\nvtk_test_cxx_executable(vtkfreetypeCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of C++ Tests in VTK CMake Configuration\nDESCRIPTION: This CMake code conditionally adds a C++ test subdirectory based on whether VTK C++ testing is enabled. It uses a CMake if statement to check the vtk_testing_cxx_disabled variable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Tensor/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Handling Missing VTK Dependencies in CMake\nDESCRIPTION: Checks if VTK was found and skips the example with an appropriate message if VTK is missing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Modelling/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT VTK_FOUND)\n  message(\"Skipping example: ${VTK_NOT_FOUND_MESSAGE}\")\n  return ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK InfovisLayout CXX Tests\nDESCRIPTION: Configures C++ test cases for the VTK InfovisLayout module using CMake. Some tests are commented out due to unsatisfied dependencies, while others are marked with NO_VALID flag indicating they don't require image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Layout/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkInfovisLayoutCxxTests tests\n  # TestAssignCoordinates.cxx # todo (unsatisfied deps)\n  TestChacoGraphReader.cxx\n  TestCirclePackLayoutStrategy.cxx\n  # TestCosmicTreeLayoutStrategy.cxx # todo (unsatisfied deps)\n  TestGraphLayoutStrategy.cxx,NO_VALID\n  TestIncrementalForceLayout.cxx,NO_VALID\n  TestTreeMapLayoutStrategy.cxx\n  )\nvtk_test_cxx_executable(vtkInfovisLayoutCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Custom Loop Runtime Check Implementation in ExprTk C++\nDESCRIPTION: Shows how to implement a custom loop runtime check class by extending the exprtk::loop_runtime_check base class. Includes methods for checking loop conditions and handling violations when they occur.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_102\n\nLANGUAGE: C++\nCODE:\n```\nstruct my_loop_rtc final : exprtk::loop_runtime_check\n{\n\n   bool check() override\n   {\n      //\n      return ...;\n   }\n\n   void handle_runtime_violation\n      (const exprtk::violation_context&) override\n   {\n      throw std::runtime_error(\"Loop runtime violation.\");\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Source Code on Unix/Linux\nDESCRIPTION: Command to verify the authenticity of SQLite source code using make on Unix-like systems\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmake verify-source\n```\n\n----------------------------------------\n\nTITLE: Setting Up Library Type for XDMF\nDESCRIPTION: Sets the library type (shared or static) based on the BUILD_SHARED_LIBS option.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/libsrc/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  set(LIBTYPE SHARED)\nelse()\n  set(LIBTYPE STATIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference Branch for xdmf2-upstream in Git\nDESCRIPTION: Creates a local Git branch to explicitly reference the upstream snapshot branch head for xdmf2.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/xdmf2/vtkxdmf2/README-VTK.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit branch xdmf2-upstream 0b284a49\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK IO Project Base Settings\nDESCRIPTION: Sets up basic CMake project configuration including minimum version requirements and output directories.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/IO/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(IO)\n\ninclude(GNUInstallDirs)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Python-Specific Test Data Configuration\nDESCRIPTION: Registers additional test data files specifically required for Python tests, including PGM, PPM, VTK, and various medical imaging formats. Only included when Python wrapping is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Core/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/B.pgm\n    Data/E07733S002I009.MR\n    Data/cactus.3337.pts\n    Data/earth.ppm\n    Data/ironProt.vtk\n    Data/masonry.bmp\n    Data/mr.001\n    Data/nut.slc\n    )\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK fmt Library Tests in CMake\nDESCRIPTION: This CMake snippet sets up C++ tests for the fmt library integration in VTK. It adds a test executable named 'vtkfmtCxxTests' with specific properties and includes the 'TestIncludeFMT.cxx' file. The test is configured with NO_DATA, NO_VALID, and NO_OUTPUT options.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fmt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkfmtCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeFMT.cxx)\nvtk_test_cxx_executable(vtkfmtCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Executing and Linking VTX Tests in CMake\nDESCRIPTION: This snippet completes the configuration of the VTX tests by creating an executable (`vtkIOADIOS2VTXCxxTests`) and linking it against the `adios2::adios2` library. This ensures that the VTX tests can be built and executed with the necessary ADIOS2 dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ADIOS2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOADIOS2VTXCxxTests tests)\ntarget_link_libraries(vtkIOADIOS2VTXCxxTests PUBLIC adios2::adios2)\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory to VTK CMake Build\nDESCRIPTION: This CMake command adds the Cxx subdirectory to the build process, instructing CMake to process the CMakeLists.txt file in that directory. This is a common pattern in CMake-based projects to organize build configurations hierarchically.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/zlib/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Finding LibArchive Package in CMake\nDESCRIPTION: Locates the required LibArchive package for the VTK Common Archive tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Archive/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(LibArchive REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring JPEG Unicode Filename Writer Test in CMake for VTK\nDESCRIPTION: Adds a test for writing JPEG images to a Unicode filename in VTK without validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Image/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkIOImageCxxTests tests\n  TestWriteToUnicodeFileJPEG,TestWriteToUnicodeFile.cxx,NO_VALID\n    \"image.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files for vtkutf8 Module - CMake\nDESCRIPTION: This snippet installs the header file 'utf8.h' for the vtkutf8 module. It specifies the subdirectory where the header file is located.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/utf8/vtkutf8/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\\\n  SUBDIR  \"vtkutf8\"\\\n  FILES   \"utf8.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding CXX Tests for VTK Imaging Color\nDESCRIPTION: This CMake command adds C++ tests for the vtkImagingColor module. It specifies the source files `ImageQuantizeToIndex.cxx` and `TestRGBToLAB.cxx` to be included in the test suite. The `NO_VALID` argument indicates that these tests do not have corresponding validation data.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/Color/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkImagingColorCxxTests tests\n  ImageQuantizeToIndex.cxx,NO_VALID\n  TestRGBToLAB.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory\nDESCRIPTION: Adds the C++ implementation subdirectory for the VTK module\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelMPI/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK ImagingOpenGL2 Module in CMake\nDESCRIPTION: Sets up the VTK ImagingOpenGL2 module by defining the class list and creating the module with appropriate test mangling. Currently, the module includes only the vtkOpenGLImageGradient class.\nSOURCE: https://github.com/kitware/vtk/blob/master/Imaging/OpenGL2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkOpenGLImageGradient\n  )\n\nvtk_module_add_module(VTK::ImagingOpenGL2\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::ImagingOpenGL2)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests for QVTKOpenGLWidget\nDESCRIPTION: This snippet configures tests for the `QVTKOpenGLWidget`. It includes tests for basic widget integration, picking, and MSAA. The commented-out line signifies a test that might be disabled due to known issues.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_add_test_cxx(vtkGUISupportQtCxxTests tests\n  -w QVTKOpenGLWidget\n  TestQVTKOpenGLWidgetQWidgetWidget,TestQWidgetWidget.cxx,NO_VALID\n  TestQVTKOpenGLWidgetPicking,TestQtPicking.cxx,NO_VALID\n  TestQVTKOpenGLWidgetSwapWindows,TestQtSwapWindows.cxx,NO_VALID\n  TestQVTKOpenGLWidget,TestQtWidget.cxx\n# TestQVTKOpenGLWidgetWithDisabledInteractor,TestQtWithDisabledInteractor.cxx #19221\n  TestQVTKOpenGLWidgetWithMSAA,TestQtWithMSAA.cxx\n  TestQVTKOpenGLWidgetWithChartHistogram2D,TestQtWithChartHistogram2D.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory in VTK CMake Build\nDESCRIPTION: CMake command to include the C++ source code directory (Cxx) in the VTK build process. This ensures that all C++ components of VTK are compiled during the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring GeovisCore Module with CMake\nDESCRIPTION: This snippet defines and configures the VTK GeovisCore module using CMake. It specifies the classes `vtkGeoProjection` and `vtkGeoTransform` to be included in the module. It also adds a test mangling for the module to ensure proper integration and functionality within the VTK framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkGeoProjection\n  vtkGeoTransform)\n\nvtk_module_add_module(VTK::GeovisCore\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::GeovisCore)\n```\n\n----------------------------------------\n\nTITLE: Configuring XGC Components for Fides Library in CMake\nDESCRIPTION: This CMake snippet defines XGC headers, adds sources to the Fides target, sets build properties for VTKM compatibility, configures include paths, and specifies installation directories. It manages the integration of XGC components into the Fides library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/fides/xgc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(xgc_headers\n  XGCCommon.h\n)\n\ntarget_sources(fides PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}/XGCCommon.cxx)\n\nvtkm_add_target_information(fides\n    DROP_UNUSED_SYMBOLS\n    DEVICE_SOURCES XGCCommon.cxx)\n\ntarget_include_directories(fides PRIVATE ${CMAKE_CURRENT_LIST_DIR})\n\ninstall(FILES ${xgc_headers}\n  DESTINATION ${FIDES_INSTALL_INCLUDE_DIR}/xgc)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Setup with CMake\nDESCRIPTION: CMake configuration that loads test data and conditionally adds test subdirectories based on language settings. Includes VTP test data file and adds C++ and Python test directories if their respective features are enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Context2D/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/isofill_0.vtp)\n\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Test for VTK - CMake\nDESCRIPTION: This snippet defines an executable for the vtkdiy2CxxTests using the vtk_test_cxx_executable macro. This executable is crucial for running the associated tests in a test suite to validate the functionality of the vtkdiy2 library. It ensures that the compiled test cases can be run independently, enhancing the modular testing approach.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/diy2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkdiy2CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Web Python Module\nDESCRIPTION: Adds the VTK Web Python module using vtk_module_add_python_module, specifying the package to include.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_python_module(VTK::WebPython\n  PACKAGES \"vtkmodules.web\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Build Inputs and Configuring Testing - CMake\nDESCRIPTION: This snippet sets various configuration parameters for test build inputs such as data directories and utility targets, and manages dependencies for tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(_vtk_build_TEST_DATA_TARGET \"VTKData\")\nset(_vtk_build_TEST_INPUT_DATA_DIRECTORY \"${VTK_TOP_DIR}/Testing\")\nset(_vtk_build_TEST_OUTPUT_DATA_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/ExternalData/Testing\")\nset(_vtk_build_TEST_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/Testing/Temporary\")\nset(_vtk_build_UTILITY_TARGET \"VTKTestExternalWasm::vtkbuild\")\n```\n\n----------------------------------------\n\nTITLE: TIFF Library Installation Configuration\nDESCRIPTION: Configures installation targets, exports, and package configuration files for the TIFF library. Currently disabled in VTK builds.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/libtiff/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(tiff-install)\n  export(TARGETS tiff NAMESPACE TIFF:: FILE \"${CMAKE_CURRENT_BINARY_DIR}/libtiffTargets.cmake\")\n  install(TARGETS tiff EXPORT TiffTargets\n          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n  install(FILES ${tiff_public_HEADERS}\n          DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n\n  set(TIFF_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/tiff)\n  install(EXPORT TiffTargets\n          FILE TiffTargets.cmake\n          NAMESPACE TIFF::\n          DESTINATION ${TIFF_CONFIGDIR}\n  )\n\n  include(CMakePackageConfigHelpers)\n  write_basic_package_version_file(\n    TiffConfigVersion.cmake\n    VERSION ${LIBTIFF_VERSION}\n    COMPATIBILITY SameMajorVersion)\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/TiffConfigVersion.cmake DESTINATION ${TIFF_CONFIGDIR})\n\n  configure_file(${PROJECT_SOURCE_DIR}/cmake/TiffConfig.cmake.in\n                 ${CMAKE_CURRENT_BINARY_DIR}/TiffConfig.cmake @ONLY)\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/TiffConfig.cmake DESTINATION ${TIFF_CONFIGDIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Redefining Disabled Base Functions in ExprTk (C++)\nDESCRIPTION: Shows how to redefine a disabled base function (sin) as a custom function taking degree input.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_80\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nstruct sine_deg final : public exprtk::ifunction<T>\n{\n   sine_deg() : exprtk::ifunction<T>(1) {}\n\n   inline T operator()(const T& v) override\n   {\n      const T pi = exprtk::details::numeric::constant::pi;\n      return std::sin((v * T(pi)) / T(180));\n   }\n};\n\n...\n\ntypedef exprtk::symbol_table<T> symbol_table_t;\ntypedef exprtk::expression<T>   expression_t;\ntypedef exprtk::parser<T>       parser_t;\n\ntypedef typename parser_t::settings_store settings_t;\n\nsine_deg<T> sine;\n\nsymbol_table.add_reserved_function(\"sin\",sine);\n\nexpression_t expression;\n\nexpression.register_symbol_table(symbol_table);\n\nparser_t parser;\n\nparser.settings()\n   .disable_base_function(settings_t::e_bf_sin);\n\nparser.compile(\"1 + sin(30)\",expression);\n```\n\n----------------------------------------\n\nTITLE: Configuring Renderman Tests When Available\nDESCRIPTION: Sets up additional tests when Renderman is detected, including shader compilation, rendering, and image comparison tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Export/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Tests to run if Renderman is present\nif(RMANTREE)\n  # write a Renderman ini file to specify the shaderpath\n  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/rendermn.ini\n          \"/shaderpath &:${CMAKE_CURRENT_SOURCE_DIR}/Testing/Cxx\")\n  add_test(NAME VTK::IOExport-RIBExporterShaderCompile\n          COMMAND ${RMANTREE}/bin/shader\n          ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input/bozo.sl\n          ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input/dented.sl\n          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  )\n  add_test(NAME VTK::IOExport-RIBExporterPrman\n          COMMAND ${RMANTREE}/bin/prman\n            ${_vtk_build_TEST_OUTPUT_DIRECTORY}/TestRIBExporter.rib\n          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  )\n  # Image diff rman generated tif with baseline\n  set(baseline_dir ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\n  ExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n        NAME VTK::IOExportCxx-ComparePrmanImage\n        COMMAND ${RMANTREE}/bin/cmptiff -d 100\n        DATA{${baseline_dir}/TestRIBExporter.tif}\n        ${_vtk_build_TEST_OUTPUT_DIRECTORY}/TestRIBExporter.tif\n  )\n  set_tests_properties(VTK::IOExport-RIBExporterPrman\n        PROPERTIES\n        DEPENDS\n        \"VTK::IOExport-TestRIBExporter\"\n        DEPENDS\n        \"VTK::IOExport-RIBExporterShaderCompile\"\n        ENVIRONMENT\n        \"RMANTREE=${RMANTREE}\"\n  )\n  set_tests_properties(\"VTK::IOExportCxx-ComparePrmanImage\"\n        PROPERTIES\n        DEPENDS \"VTK::IOExportCxx-TestRIBExporter\"\n        REQUIRED_FILES\n          \"${_vtk_build_TEST_OUTPUT_DIRECTORY}/TestRIBExporter.tif\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding C++ Tests in VTK Module\nDESCRIPTION: This snippet checks if C++ testing is enabled for the VTK module and adds the 'Cxx' subdirectory if it is. This allows for conditional compilation of C++ tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/Web/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Filters Statistics Classes in CMake\nDESCRIPTION: This snippet defines a list of classes that are part of the VTK Filters Statistics module. These classes implement various statistical algorithms and data processing techniques.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Statistics/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkAutoCorrelativeStatistics\n  vtkBivariateLinearTableThreshold\n  vtkComputeQuantiles\n  vtkComputeQuartiles\n  vtkContingencyStatistics\n  vtkCorrelativeStatistics\n  vtkDescriptiveStatistics\n  vtkExtractFunctionalBagPlot\n  vtkExtractHistogram\n  vtkHighestDensityRegionsStatistics\n  vtkKMeansDistanceFunctor\n  vtkKMeansDistanceFunctorCalculator\n  vtkKMeansStatistics\n  vtkLengthDistribution\n  vtkMultiCorrelativeStatistics\n  vtkOrderStatistics\n  vtkPCAStatistics\n  vtkStatisticsAlgorithm\n  vtkStrahlerMetric\n  vtkStreamingStatistics)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Executable for VTK Filters\nDESCRIPTION: This code configures an executable for the test suite vtkFiltersTextureCxxTests using VTK's CMake macro vtk_test_cxx_executable. It ensures that the test executable is properly built and linked for execution of the registered test cases.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Texture/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersTextureCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Registering Python Tests for Exodus Module in VTK with CMake\nDESCRIPTION: Configures multiple Python test files for the Exodus module in VTK using the vtk_add_test_python function. The tests include TestExodusPolyhedra.py, TestExodusPolyhedraAgain.py, and TestExodusWithNaN.py, with the last test having the NO_RT and NO_VALID flags to indicate it doesn't require regression testing or image validation.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Exodus/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestExodusPolyhedra.py\n  TestExodusPolyhedraAgain.py\n  TestExodusWithNaN.py,NO_RT,NO_VALID\n)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Module for ZSpace Rendering CMake\nDESCRIPTION: Finalizes the VTK module setup for ZSpace by adding it, specifying the public and private classes, and including or linking against dependencies based on SDK settings.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ZSpace/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::RenderingZSpace\n  CLASSES ${classes}\n  PRIVATE_CLASSES ${private_classes})\n\nif(VTK_ZSPACE_USE_COMPAT_SDK)\n  vtk_module_include(VTK::RenderingZSpace\n    PRIVATE\n      # XXX(cmake-3.26): Use `BUILD_LOCAL_INTERFACE` instead.\n      \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty>\")\nelse()\n  vtk_module_link(VTK::RenderingZSpace\n    PUBLIC zSpace::zSpace)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Architecture for VTK Accelerators VTKm Filters Tests Executable in CMake\nDESCRIPTION: Disables CUDA architecture specification for the VTK Accelerators VTKm Filters CXX tests executable when CUDA is available.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Filters/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET vtkm::cuda)\n  set_target_properties(vtkAcceleratorsVTKmFiltersCxxTests PROPERTIES\n    CUDA_ARCHITECTURES OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 Utilities Build Options in CMake\nDESCRIPTION: Configures build options for HDF5 utilities with conditional handling for parallel tools that depend on MFU, CIRCLE, and DTCMP libraries. For parallel tools to be built, both HDF5_BUILD_PARALLEL_TOOLS and HDF5_ENABLE_PARALLEL must be enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS \"${HDF5_SOURCE_DIR}/utils\" AND IS_DIRECTORY \"${HDF5_SOURCE_DIR}/utils\")\n  option (HDF5_BUILD_PARALLEL_TOOLS  \"Build Parallel HDF5 Tools\" OFF)\n  if (HDF5_BUILD_PARALLEL_TOOLS AND HDF5_ENABLE_PARALLEL)\n    set (CMAKE_PREFIX_PATH \"$HDF_RESOURCES_DIR\")\n    find_package(MFU REQUIRED)\n    if (MFU_FOUND)\n      message(STATUS \"LL_PATH=${LL_PATH}\")\n      set (H5_HAVE_LIBMFU 1)\n      set (H5_HAVE_MFU_H 1)\n      set (CMAKE_REQUIRED_INCLUDES \"${MFU_INCLUDE_DIR}\")\n      set (MFU_LIBRARY_DEBUG \"$MFU_LIBRARY\")\n      set (MFU_LIBRARY_RELEASE \"$MFU_LIBRARY\")\n    endif ()\n    find_package(CIRCLE REQUIRED)\n    if (CIRCLE_FOUND)\n      set (H5_HAVE_LIBCIRCLE 1)\n      set (H5_HAVE_CIRCLE_H 1)\n      set (CMAKE_REQUIRED_INCLUDES \"${CIRCLE_INCLUDE_DIR}\")\n    endif ()\n    find_package(DTCMP REQUIRED)\n    if (DTCMP_FOUND)\n      set (H5_HAVE_LIBDTCMP 1)\n      set (H5_HAVE_DTCMP_H 1)\n      set (CMAKE_REQUIRED_INCLUDES \"${DTCMP_INCLUDE_DIR}\")\n    endif ()\n  endif ()\n  add_subdirectory (utils)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests using vtk_add_test_cxx\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` CMake macro to add C++ tests for the vtkGeovisCore module. It defines a test suite named `vtkGeovisCoreCxxTests` and specifies the source files (`TestGeoProjection.cxx`, `TestLibProj.cxx`) to be included in the test suite. The `NO_VALID` flag likely indicates that the tests might not always pass due to external dependencies or data variability.\nSOURCE: https://github.com/kitware/vtk/blob/master/Geovis/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_cxx(vtkGeovisCoreCxxTests tests\n  TestGeoProjection.cxx,NO_VALID\n  TestLibProj.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Bridge Headers in CMake\nDESCRIPTION: Sets a list of header files for the VTK bridge module, including the export header for the TestingGenericBridge module\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/GenericBridge/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(headers\n  vtkBridgeExport.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK SCN Library Tests in CMake\nDESCRIPTION: This CMake code sets up the testing environment for the VTK SCN library. It defines a C++ test named 'TestIncludeSCN.cxx' with no data, validation, or output requirements, and then creates the executable for running the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/scn/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkscnlibCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n        TestIncludeSCN.cxx)\nvtk_test_cxx_executable(vtkscnlibCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Subdirectory Addition in CMake\nDESCRIPTION: Adds the 'Python' subdirectory for Python tests if VTK_WRAP_PYTHON is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Interaction/Widgets/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Test Configuration\nDESCRIPTION: Configures Python-specific test data and adds Python test subdirectory when Python wrapping is enabled\nSOURCE: https://github.com/kitware/vtk/blob/master/Domains/Microscopy/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  vtk_module_test_data(\n    Data/RectGrid2.vtk)\n\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configure Header File (vtk_doubleconversion.h)\nDESCRIPTION: Configures the header file \"vtk_doubleconversion.h\" using CMake's `configure_file` command. It copies the input file from the source directory to the binary directory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_doubleconversion.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/vtk_doubleconversion.h\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK MPI Image Tests\nDESCRIPTION: Sets up MPI-enabled test cases and creates a test executable for VTK's image processing module. Includes parallel isosurface testing files and configures them with testing data dependencies.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MPIImage/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_add_test_mpi(vtkIOMPIImageCxxTests-MPI tests\n  TESTING_DATA\n  ParallelIso.cxx\n  ParallelIso2.cxx\n  )\nvtk_test_cxx_executable(vtkIOMPIImageCxxTests-MPI tests)\n```\n\n----------------------------------------\n\nTITLE: Extracting VTK Version\nDESCRIPTION: Example command to extract VTK version information using doc_version.pl script.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nperl doc_version.pl --logo \"vtk-logo.gif\" --to ../../../VTK-doxygen\n```\n\n----------------------------------------\n\nTITLE: Adding Module to VTK Build System\nDESCRIPTION: Adds the IOAsynchronous module to the VTK build system using the specified classes and enables test mangling for the module\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Asynchronous/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::IOAsynchronous\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOAsynchronous)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK Java Module\nDESCRIPTION: Adds a new VTK Java module with specified classes and headers using the vtk_module_add_module command\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Java/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::Java\n  CLASSES ${classes}\n  HEADERS ${headers}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data Files for VTK RenderingOpenGL2 Module in CMake\nDESCRIPTION: Specifies the data files required for testing the VTK RenderingOpenGL2 module. These files include cursor images and VTK multiblock datasets.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/OpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/pen_1.cur\n  Data/pen_1.xcursor\n  Data/overlap_faces.vtm\n  Data/overlap_faces/overlap_faces_0_0.vtp\n  Data/overlap_faces/overlap_faces_1_0.vtp\n  Data/overlap_faces/overlap_faces_2_0.vtp\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional SDK Package and Class Management CMake\nDESCRIPTION: Handles conditions based on the SDK compatibility choice to manage class inclusions and package dependencies. When compatible SDK is used, no extra library linking is needed, otherwise it finds the zSpace package.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ZSpace/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (VTK_ZSPACE_USE_COMPAT_SDK)\n  # No need to search for specific package in that case.\n  # Headers are included in the zSpaceCompat subfolder,\n  # and there is no static library to link at compile time.\n  list(APPEND private_classes\n    vtkZSpaceCoreCompatibilitySDKManager)\nelse ()\n  list(APPEND private_classes\n    vtkZSpaceCoreSDKManager)\n  vtk_module_find_package(PACKAGE zSpace)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Engys IO Test Executable in CMake\nDESCRIPTION: This command creates a test executable from the previously defined test collection. It links the 'vtkIOEngysCxxTests' test group with the 'tests' target to generate an executable that can run the defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Engys/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOEngysCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Outputting Expat Configuration Status in CMake\nDESCRIPTION: This snippet generates a detailed status message displaying the current configuration of the Expat library build. It includes information about the generator, build type, installation prefix, and various feature toggles.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"===========================================================================\")\nmessage(STATUS \"\")\nmessage(STATUS \"Configuration\")\nmessage(STATUS \"  Generator .................. ${CMAKE_GENERATOR}\")\nif(_EXPAT_GENERATOR_IS_MULTI_CONFIG)\n    message(STATUS \"  Build types ................ ${CMAKE_CONFIGURATION_TYPES}\")\nelse()\n    message(STATUS \"  Build type ................. ${CMAKE_BUILD_TYPE}\")\nendif()\nmessage(STATUS \"  Prefix ..................... ${CMAKE_INSTALL_PREFIX}\")\nmessage(STATUS \"  Shared libraries ........... ${EXPAT_SHARED_LIBS}\")\nif(MSVC)\n    message(STATUS \"  Static CRT ................. ${EXPAT_MSVC_STATIC_CRT}\")\nendif()\nmessage(STATUS \"  Character type ............. ${_EXPAT_CHAR_TYPE_SUMMARY}\")\nif(NOT _EXPAT_GENERATOR_IS_MULTI_CONFIG)\n    message(STATUS \"  Library name postfix ....... ${EXPAT_${_EXPAT_BUILD_TYPE_UPPER}_POSTFIX}\")\nendif()\nmessage(STATUS \"\")\nmessage(STATUS \"  Build documentation ........ ${EXPAT_BUILD_DOCS}\")\nmessage(STATUS \"  Build examples ............. ${EXPAT_BUILD_EXAMPLES}\")\nmessage(STATUS \"  Build fuzzers .............. ${EXPAT_BUILD_FUZZERS}\")\nmessage(STATUS \"  Build tests ................ ${EXPAT_BUILD_TESTS}\")\nmessage(STATUS \"  Build tools (xmlwf) ........ ${EXPAT_BUILD_TOOLS}\")\nmessage(STATUS \"  Build pkg-config file ...... ${EXPAT_BUILD_PKGCONFIG}\")\nmessage(STATUS \"  Install files .............. ${EXPAT_ENABLE_INSTALL}\")\nmessage(STATUS \"\")\nmessage(STATUS \"  Features\")\nmessage(STATUS \"    // Advanced options, changes not advised\")\nmessage(STATUS \"    Attributes info .......... ${EXPAT_ATTR_INFO}\")\nmessage(STATUS \"    Context bytes ............ ${EXPAT_CONTEXT_BYTES}\")\nmessage(STATUS \"    DTD support .............. ${EXPAT_DTD}\")\nmessage(STATUS \"    General entities ......... ${EXPAT_GE}\")\nmessage(STATUS \"    Large size ............... ${EXPAT_LARGE_SIZE}\")\nmessage(STATUS \"    Minimum size ............. ${EXPAT_MIN_SIZE}\")\nmessage(STATUS \"    Namespace support ........ ${EXPAT_NS}\")\nmessage(STATUS \"\")\nmessage(STATUS \"  Entropy sources\")\nif(WIN32)\n    message(STATUS \"    rand_s ................... ON\")\nelse()\n    message(STATUS \"    getrandom ................ ${HAVE_GETRANDOM}\")\n    message(STATUS \"    syscall SYS_getrandom .... ${HAVE_SYSCALL_GETRANDOM}\")\n    message(STATUS \"    libbsd ................... ${EXPAT_WITH_LIBBSD}\")\n    message(STATUS \"    /dev/random .............. ${EXPAT_DEV_URANDOM}\")\nendif()\nmessage(STATUS \"\")\nif(CMAKE_GENERATOR STREQUAL \"Unix Makefiles\")\n    message(STATUS \"Continue with\")\n    message(STATUS \"  make\")\n    if(EXPAT_BUILD_TESTS)\n        message(STATUS \"  make test\")\n    endif()\n    if(EXPAT_ENABLE_INSTALL)\n        message(STATUS \"  sudo make install\")\n    endif()\n    message(STATUS \"\")\nendif()\nmessage(STATUS \"===========================================================================\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersImaging Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the defined classes to the VTK::FiltersImaging module and sets up test mangling for the module. It uses CMake functions specific to VTK module configuration.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Imaging/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersImaging\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersImaging)\n```\n\n----------------------------------------\n\nTITLE: Installing VTK MPI Headers\nDESCRIPTION: Installs the VTK MPI header files to the appropriate location in the build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MPI/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_SOURCE_DIR}/vtk_mpi.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Subdirectory in CMake\nDESCRIPTION: Instructs CMake to include and process the Cxx subdirectory during the build configuration. This enables compilation and integration of C++ source files and components.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/MySQL/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Registering VTK Filter Reduction Module\nDESCRIPTION: This snippet adds the previously defined classes to the VTK module for filter reduction. This registration is essential for the VTK build system to incorporate the filter strategies into the proper module, enabling their usage throughout the framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Reduction/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersReduction\n  CLASSES ${classes}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Directory Configuration in CMake\nDESCRIPTION: This snippet conditionally adds the C++ test subdirectory if C++ testing is not disabled. It controls whether C++ tests will be built as part of the testing infrastructure.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/HyperTree/Testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT vtk_testing_cxx_disabled)\n  add_subdirectory(Cxx)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Classes for PDAL Integration\nDESCRIPTION: Sets up a list of VTK classes that will be used for PDAL integration. Currently, it only includes vtkPDALReader.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PDAL/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPDALReader)\n```\n\n----------------------------------------\n\nTITLE: Configuring pkg-config for Expat\nDESCRIPTION: This snippet conditionally builds a pkg-config file for Expat, setting relevant properties. It checks for installation directories and generates the pkg-config file based on build configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/expat/vtkexpat/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): Do not install a .pc file.\nif(EXPAT_BUILD_PKGCONFIG)\n    if(CMAKE_INSTALL_LIBDIR MATCHES \"^\")\n        set(_expat_pkgconfig_libdir \"${CMAKE_INSTALL_LIBDIR}\")\n    else()\n        set(_expat_pkgconfig_libdir \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n\n    if(CMAKE_INSTALL_INCLUDEDIR MATCHES \"^\")\n        set(_expat_pkgconfig_includedir \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    else()\n        set(_expat_pkgconfig_includedir \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\n    endif()\n\n    set_target_properties(expat PROPERTIES\n        pkgconfig_prefix \"${CMAKE_INSTALL_PREFIX}\"\n        pkgconfig_exec_prefix \"\\${prefix}\"\n        pkgconfig_libdir \"${_expat_pkgconfig_libdir}\"\n        pkgconfig_includedir \"${_expat_pkgconfig_includedir}\"\n        pkgconfig_version \"${PACKAGE_VERSION}\")\n\n    foreach(_build_type ${CMAKE_BUILD_TYPE} Debug Release RelWithDebInfo MinSizeRel)\n        string(TOLOWER \"${_build_type}\" _build_type_lower)\n        string(TOUPPER \"${_build_type}\" _build_type_upper)\n        set_property(TARGET expat PROPERTY \"pkgconfig_${_build_type_lower}_name\" \"expat${EXPAT_${_build_type_upper}_POSTFIX}\")\n        set_property(TARGET expat PROPERTY \"pkgconfig_${_build_type_lower}_output_name\" \"${_EXPAT_OUTPUT_NAME}${EXPAT_${_build_type_upper}_POSTFIX}\")\n        if(_EXPAT_LIBM_FOUND)\n            set_property(TARGET expat PROPERTY \"pkgconfig_libm\" \"-lm\")\n        else()\n            set_property(TARGET expat PROPERTY \"pkgconfig_libm\" \"\")\n        endif()\n    endforeach()\n\n    file(GENERATE\n        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/expat.pc\n        INPUT ${PROJECT_SOURCE_DIR}/expat.pc.cmake)\n\n    expat_install(FILES ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/expat.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Test\nDESCRIPTION: This snippet uses the `vtk_add_test_cxx` CMake macro to define a VTK C++ test. It specifies the test name, flags indicating that it doesn't require data, validation, or output, and the source file for the test.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkoggCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  TestIncludeOGG.cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files and Build Structure\nDESCRIPTION: CMake configuration that registers test data files (VTK surface vectors, PNG image, and VTS timestep data) for VTK module testing and includes the C++ source directory in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/SurfaceVectors.vtk\n  Data/noise.png\n  Data/timestep_0_15.vts)\n\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Initialize CMake for libogg project\nDESCRIPTION: Sets the minimum required CMake version and initializes the libogg project in CMake. This sets up the initial environment for building.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/ogg/vtkogg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(libogg)\n```\n\n----------------------------------------\n\nTITLE: Standalone Project Return\nDESCRIPTION: If KWIML is not a standalone project (i.e., included as a subdirectory), this snippet will return, preventing further configuration steps specific to a standalone KWIML project from being executed.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT kwiml_standalone)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK IOPLY Classes in CMake\nDESCRIPTION: This snippet defines a list of classes for the VTK IOPLY module. It includes vtkPLY, vtkPLYReader, and vtkPLYWriter.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/PLY/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(classes\n  vtkPLY\n  vtkPLYReader\n  vtkPLYWriter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Bindings for LibXml2\nDESCRIPTION: Sets up Python bindings for LibXml2 if LIBXML2_WITH_PYTHON is enabled. This includes generating Python files, creating a LibXml2Mod library, and setting up installation rules for Python-related components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(LIBXML2_WITH_PYTHON)\n    execute_process(\n        COMMAND\n        ${Python_EXECUTABLE}\n        ${CMAKE_CURRENT_SOURCE_DIR}/python/generator.py\n        ${CMAKE_CURRENT_SOURCE_DIR}/doc/libxml2-api.xml\n        ${CMAKE_CURRENT_SOURCE_DIR}/python/libxml2-python-api.xml\n        WORKING_DIRECTORY\n        ${CMAKE_CURRENT_BINARY_DIR}\n    )\n    file(READ python/libxml.py LIBXML_PY)\n    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/libxml2.py.in \"${LIBXML_PY}\")\n    file(READ ${CMAKE_CURRENT_BINARY_DIR}/libxml2class.py LIBXML2CLASS_PY)\n    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/libxml2.py.in \"${LIBXML2CLASS_PY}\")\n    configure_file(${CMAKE_CURRENT_BINARY_DIR}/libxml2.py.in libxml2.py COPYONLY)\n    add_library(\n        LibXml2Mod\n        libxml2-py.c\n        libxml2-py.h\n        python/libxml.c\n        python/libxml_wrap.h\n        python/types.c\n    )\n    target_include_directories(\n        LibXml2Mod\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/python>\n    )\n    target_link_libraries(LibXml2Mod LibXml2 Python::Python)\n    set_target_properties(\n        LibXml2Mod\n        PROPERTIES\n        IMPORT_PREFIX lib\n        OUTPUT_NAME xml2mod\n        PREFIX lib\n        VERSION ${PROJECT_VERSION}\n    )\n    if (WIN32)\n        set_target_properties(LibXml2Mod PROPERTIES SUFFIX \".pyd\")\n    endif()\n    install(\n        TARGETS    LibXml2Mod\n        ARCHIVE DESTINATION ${LIBXML2_PYTHON_INSTALL_DIR} COMPONENT development\n        LIBRARY DESTINATION ${LIBXML2_PYTHON_INSTALL_DIR} COMPONENT runtime NAMELINK_COMPONENT development\n        RUNTIME DESTINATION ${LIBXML2_PYTHON_INSTALL_DIR} COMPONENT runtime\n    )\n    if(MSVC AND BUILD_SHARED_LIBS)\n        install(FILES $<TARGET_PDB_FILE:LibXml2Mod> DESTINATION ${LIBXML2_PYTHON_INSTALL_DIR} CONFIGURATIONS Debug RelWithDebInfo COMPONENT debug)\n    endif()\n    install(FILES python/drv_libxml2.py DESTINATION ${LIBXML2_PYTHON_INSTALL_DIR} COMPONENT runtime)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libxml2.py DESTINATION ${LIBXML2_PYTHON_INSTALL_DIR} COMPONENT runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: ABI Namespace Warning Check\nDESCRIPTION: Generates a warning if VTK ABI namespace is not set to default and not running in continuous integration environment\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Java/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT VTK_ABI_NAMESPACE_NAME STREQUAL \"<DEFAULT>\" AND NOT DEFINED ENV{CI})\n  message(WARNING \"Utilties::Java ABI does not not support the VTK_ABI_NAMESPACE_NAME \"\n                  \"and the symbols will not be mangled.\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Add subdirectory for utilities\nDESCRIPTION: This snippet adds a subdirectory named `Utilities` to the build process. It is mentioned that the utilities folder creates doxygen documentation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Utilities)\n```\n\n----------------------------------------\n\nTITLE: Generating PROJ Database in CMake\nDESCRIPTION: Creates a custom command to generate the proj.db database file. It sets up the necessary paths and dependencies for the database generation process.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/libproj/vtklibproj/data/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${PROJ_DB}\n  COMMAND ${CMAKE_COMMAND} -E remove -f ${PROJ_DB}\n  COMMAND ${CMAKE_COMMAND}\n  \"-DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\"\n  \"-DCMAKE_CROSSCOMPILING_EMULATOR=${CMAKE_CROSSCOMPILING_EMULATOR}\"\n    \"-DALL_SQL_IN=${ALL_SQL_IN}\" \"-DEXE_SQLITE3=${EXE_SQLITE3}\" \"-DPROJ_DB=${PROJ_DB}\" \"-DPROJ_VERSION=${PROJ_VERSION}\"\n    -P \"${CMAKE_CURRENT_SOURCE_DIR}/generate_proj_db.cmake\"\n  COMMAND ${CMAKE_COMMAND} -E copy ${PROJ_DB} ${CMAKE_CURRENT_BINARY_DIR}/for_tests\n  DEPENDS ${SQL_FILES} \"${CMAKE_CURRENT_SOURCE_DIR}/generate_proj_db.cmake\"\n  WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n  COMMENT \"Generating proj.db\"\n  VERBATIM\n)\n\nadd_custom_target(generate_proj_db ALL DEPENDS ${PROJ_DB})\n```\n\n----------------------------------------\n\nTITLE: Defining Typedef Versioning for HDF5 API in Plaintext\nDESCRIPTION: Specifies versioning information for HDF5 API typedefs, including the typedef name, version introduced, and subsequent revisions. This information is used to generate versioned headers for the HDF5 library.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/src/H5vers.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTYPEDEF: H5E_auto; v10, v18\nTYPEDEF: H5O_info; v18, v112\nTYPEDEF: H5O_iterate; v18, v112\nTYPEDEF: H5Z_class; v16, v18\n```\n\n----------------------------------------\n\nTITLE: Finding Tk Internal Headers\nDESCRIPTION: This snippet conditionally searches for internal Tk headers based on the operating system (Windows or macOS/Cocoa). It determines the appropriate header file name (`tkWinInt.h` or `tkMacOSXInt.h`) and include paths based on the `TK_INCLUDE_PATH` variable. It uses the `find_path` command to locate the Tk internal header path.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Tk/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"# Need Tk internal headers on Windows and OS X\nset(_internal_tk_header)\nset(_internal_tk_include_paths)\nif (WIN32)\n  get_filename_component(_parent \\\"${TK_INCLUDE_PATH}\\\" PATH)\n  set(_internal_tk_header \\\"tkWinInt.h\\\")\n  set(_internal_tk_include_paths \\\"${_parent}/win\\\")\nelif (VTK_USE_COCOA)\n  get_filename_component(_parent \\\"${TK_INCLUDE_PATH}\\\" PATH)\n  set(_internal_tk_header \\\"tkMacOSXInt.h\\\")\n  set(_internal_tk_include_paths\n    \\\"${_parent}/PrivateHeaders\\\"\n    \\\"${_parent}/tk-private\\\"\n    \\\"${_parent}/macosx\\\")\nendif ()\n\nif (_internal_tk_header)\n  find_path(\n     TK_INTERNAL_PATH\n     ${_internal_tk_header}\n     PATHS ${_internal_tk_include_paths} ${TK_INCLUDE_PATH}\n     DOC \\\"The path to the Tk internal headers (${_internal_tk_header}).\\\")\n  mark_as_advanced(TK_INTERNAL_PATH)\nelse ()\n  set(TK_INTERNAL_PATH)\nendif ()\"\n```\n\n----------------------------------------\n\nTITLE: Include GNUInstallDirs module\nDESCRIPTION: This snippet includes the `GNUInstallDirs` CMake module, which provides standard installation directories for libraries, headers, documentation, and other files. This module sets variables like `CMAKE_INSTALL_LIBDIR`, `CMAKE_INSTALL_BINDIR`, etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Build/vtkMy/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK C++ Tests for QVTKRenderWidget\nDESCRIPTION: This snippet sets up C++ tests for the `QVTKRenderWidget`. Similar to other widget tests, it defines tests for core functionality, picking behavior, and MSAA integration. Some lines are commented out, indicating potentially disabled tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/Qt/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_add_test_cxx(vtkGUISupportQtCxxTests tests\n  -w QVTKRenderWidget\n  TestQVTKRenderWidgetQWidgetWidget,TestQWidgetWidget.cxx,NO_VALID\n  TestQVTKRenderWidgetPicking,TestQtPicking.cxx,NO_VALID\n  TestQVTKRenderWidgetSwapWindows,TestQtSwapWindows.cxx,NO_VALID\n# TestQVTKRenderWidget,TestQtWidget.cxx #19221\n# TestQVTKRenderWidgetWithDisabledInteractor,TestQtWithDisabledInteractor.cxx #19112\n  TestQVTKRenderWidgetWithMSAA,TestQtWithMSAA.cxx\n  TestQVTKRenderWidgetWithChartHistogram2D,TestQtWithChartHistogram2D.cxx\n  )\"\n```\n\n----------------------------------------\n\nTITLE: MSVC Warning Suppression Configuration\nDESCRIPTION: Sets up MSVC-specific warning suppression flags for the VTK-m module compilation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC)\n  set(msvc_warning_flags\n    /wd4702\n    /wd4512\n    /wd4510\n    /wd4503\n    )\n  set(vtkm_msvc_flags)\n  foreach (msvc_warning_flag IN LISTS msvc_warning_flags)\n    if (TARGET vtkm::cuda)\n      list(APPEND vtkm_msvc_flags\n        $<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler=${msvc_warning_flag},${msvc_warning_flag}>)\n    else ()\n      list(APPEND vtkm_msvc_flags\n        ${msvc_warning_flag})\n    endif ()\n  endforeach ()\n  vtk_module_compile_options(VTK::AcceleratorsVTKmDataModel\n    PRIVATE\n      ${vtkm_msvc_flags})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Doxygen Input Paths\nDESCRIPTION: Defines the input paths for VTK documentation generation, including various VTK modules like Common, Filtering, Graphics, etc.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nINPUT = ../../../VTK-doxygen/Common ../../../VTK-doxygen/Filtering ../../../VTK-doxygen/Graphics ../../../VTK-doxygen/Hybrid ../../../VTK-doxygen/Imaging ../../../VTK-doxygen/IO ../../../VTK-doxygen/Parallel ../../../VTK-doxygen/Patented ../../../VTK-doxygen/Rendering ../../../VTK-doxygen/doc_version.dox ../../../VTK-doxygen/doc_class2examples.dox ../../../VTK-doxygen/doc_class2tests.dox ../../../VTK-doxygen/doc_index.dox\n```\n\n----------------------------------------\n\nTITLE: Declaring VTK Object Factories in CMake\nDESCRIPTION: Declares object factories for VTK classes, specifying base classes and their overrides. This is used to configure polymorphic behavior in VTK.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ParallelLIC/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_object_factory_declare(\n  BASE vtkSurfaceLICInterface\n  OVERRIDE vtkPSurfaceLICInterface)\nvtk_object_factory_declare(\n  BASE vtkLineIntegralConvolution2D\n  OVERRIDE vtkPLineIntegralConvolution2D)\nvtk_object_factory_declare(\n  BASE vtkSurfaceLICComposite\n  OVERRIDE vtkPSurfaceLICComposite)\n```\n\n----------------------------------------\n\nTITLE: License File Installation\nDESCRIPTION: Installs the Copyright.txt file to the specified license destination directory\nSOURCE: https://github.com/kitware/vtk/blob/master/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  FILES       \"${CMAKE_CURRENT_LIST_DIR}/Copyright.txt\"\n  DESTINATION \"${CMAKE_INSTALL_LICENSEDIR}\"\n  COMPONENT   \"license\")\n```\n\n----------------------------------------\n\nTITLE: Adding VTK::IOVideo Module\nDESCRIPTION: This code snippet adds the VTK::IOVideo module using `vtk_module_add_module`, specifying the classes defined earlier and the generated header file. The `${classes}` variable holds the list of classes that will be part of the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Video/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOVideo\n  CLASSES ${classes}\n  HEADERS \"${CMAKE_CURRENT_BINARY_DIR}/vtkIOVideoConfigure.h\")\n```\n\n----------------------------------------\n\nTITLE: Conditional CUDA Toolkit Package Finding for NVTX Support\nDESCRIPTION: Conditionally finds the CUDA Toolkit package with nvToolsExt component when NVTX instrumentation is enabled, with a note about setting CUDAToolkit_ROOT environment variable if not found.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_ANARI_ENABLE_NVTX)\n  # If not found, set CUDAToolkit_ROOT env variable.\n  # e.g. export CUDAToolkit_ROOT=<path>\n  vtk_module_find_package(\n    PACKAGE CUDAToolkit\n    COMPONENTS CUDA::nvToolsExt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Cross-References Between Classes and Examples in VTK Documentation\nDESCRIPTION: The script `doc_class2example.pl` creates cross-references between VTK classes and their examples. This facilitates better navigation and understanding of class functionalities within the generated documentation.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\ndoc_class2example.pl\n```\n\n----------------------------------------\n\nTITLE: Defining Test Executable in VTK CMake\nDESCRIPTION: Configures an executable target for the TRUCHAS Reader tests in the CMake project, allowing for the execution of defined tests.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/TRUCHAS/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOTRUCHASCxxTests tests\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating Class to Examples Documentation\nDESCRIPTION: Example command to generate documentation linking classes to their examples using doc_class2example.pl script.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Doxygen/doc_readme.txt#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nperl doc_class2example.pl --link http://public.kitware.com/cgi-bin/cvsweb.cgi/~checkout~/VTK/Utilities/Doxygen --to ../../../VTK-doxygen\n```\n\n----------------------------------------\n\nTITLE: Preventing In-Source Builds\nDESCRIPTION: Checks and prevents building the project directly in the source directory to maintain project structure integrity\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Android/NativeVTK/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_BINARY_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n  message(FATAL_ERROR \"VTK Android does not support in-source builds :) .\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Test Executable with CMake\nDESCRIPTION: This snippet uses a custom CMake function `vtk_test_cxx_executable` to create an executable for the VTK C++ tests. It specifies the resource file and source files needed to build the executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/GUISupport/QtQuick/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_test_cxx_executable(vtkGUISupportQtQuickCxxTests tests\n  \"${CMAKE_CURRENT_BINARY_DIR}/TestQQuickVTK.qrc\"\n  TestQQuickCommon.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK RenderingExternal in CMake\nDESCRIPTION: Adds test mangling for the VTK RenderingExternal module, which is likely related to test configuration or naming conventions.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/External/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::RenderingExternal)\n```\n\n----------------------------------------\n\nTITLE: Including Ghostscript CMake Configuration\nDESCRIPTION: This snippet includes the vtkGhostscript CMake configuration file to ensure that Ghostscript functionalities are available in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/Matplotlib/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../../../../CMake/vtkGhostscript.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK ExodusII Module\nDESCRIPTION: This snippet uses the `vtk_module_add_module` function to define the VTK::exodusII module. It specifies the header directories, source files, and header subdirectory for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exodusII/vtkexodusII/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"vtk_module_add_module(VTK::exodusII\n  HEADER_DIRECTORIES\n  SOURCES ${sources}\n  HEADERS ${headers}\n  HEADERS_SUBDIR \\\"vtkexodusII\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Including Test Data for Wine Glass Model in VTK\nDESCRIPTION: This snippet includes a WineGlass model for testing in VTK when C++ testing is not disabled. It utilizes the vtk_module_test_data function to specify the data source.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Import/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\\\n  Data/WineGlass.wrl\\\n)\n```\n\n----------------------------------------\n\nTITLE: Running Development Setup Script in Bash\nDESCRIPTION: Command to execute the setup script for development environment configuration in new local work trees.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWSys/vtksys/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./SetupForDevelopment.sh\n```\n\n----------------------------------------\n\nTITLE: Finding VTK Package and Setting Up Python Interpreter - CMake\nDESCRIPTION: This snippet finds the required VTK package and Python interpreter necessary for running tests within the VTK testing framework.\nSOURCE: https://github.com/kitware/vtk/blob/master/Testing/ExternalWasm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK REQUIRED NO_MODULE)\nfind_package(Python3 REQUIRED Interpreter)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Rendering Scene Graph C++ Test Executable\nDESCRIPTION: This CMake command creates a C++ test executable for the VTK Rendering Scene Graph module. It uses the previously defined test cases to build the executable.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/SceneGraph/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkRenderingSceneGraphCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding all changes to git\nDESCRIPTION: Adds all changes in the working directory to the git staging area.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"git add --all\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test Mangling for VTK IOOggTheora\nDESCRIPTION: This CMake snippet adds test mangling for the VTK::IOOggTheora module using the `vtk_add_test_mangling` function.  This likely ensures that the module's symbols are properly handled during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/OggTheora/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_mangling(VTK::IOOggTheora)\n```\n\n----------------------------------------\n\nTITLE: Xcode Output Directory Workaround\nDESCRIPTION: This snippet provides a workaround for Xcode 2.x, ensuring the output directory is created before linking, preventing potential errors.  It uses a custom command to create the directory during the pre-build step.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/KWIML/vtkkwiml/test/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(CMAKE_OSX_ARCHITECTURES AND XCODE\n    AND NOT \\\"${XCODE_VERSION}\\\" MATCHES \\\"^[^12]\\\")\n  add_custom_command(\n    TARGET kwiml_test\n    PRE_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory \\\"${CMAKE_CFG_INTDIR}\\\"\n    )\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (MultiBlock LIC, Perlin Noise) in CMake\nDESCRIPTION: This snippet defines an external data test to evaluate Surface LIC on a multi-block dataset using Perlin noise. The arguments passed to `TestSurfaceLIC` specify the input multi-block dataset (`ex-blow_5.vtm`), the displacement vector field, Perlin noise settings, contrast enhancement, color by magnitude, map mode bias, and masking parameters. This tests LIC rendering on complex geometries with specific noise and masking configurations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/LICOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_add_test(${_vtk_build_TEST_DATA_TARGET}\n  NAME VTK::RenderingLICOpenGL2Cxx-SurfaceLICMultiBlockContrastEnhancedPerlin\n  COMMAND vtkRenderingLICOpenGL2CxxTests TestSurfaceLIC\n    -D ${_vtk_build_TEST_OUTPUT_DATA_DIRECTORY}\n    -T ${_vtk_build_TEST_OUTPUT_DIRECTORY}\n    -V \"DATA{../Data/Baseline/TestSurfaceLICMultiBlockContrastEnhancedPerlin.png,:}\"\n    --data=DATA{${_vtk_build_TEST_INPUT_DATA_DIRECTORY}/Data/ex-blow_5.vtm}\n    --camera-config=4\n    --vectors=DISPLACEMENT_\n    --step-size=0.1\n    --num-steps=50\n    --generate-noise-texture=1\n    --noise-type=2\n    --noise-texture-size=128\n    --noise-grain-size=2\n    --number-of-noise-levels=1024\n    --noise-gen-seed=1\n    --enhance-contrast=4\n    --color-by-mag=1\n    --color-mode=1\n    --map-mode-bias=0.1\n    --mask-on-surface=1\n    --mask-intensity=0.41\n    --mask-color 0 0 0\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing FreeType Configuration Headers for VTK\nDESCRIPTION: Configures the installation of FreeType configuration header files in the appropriate VTK subdirectory.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/freetype/vtkfreetype/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  SUBDIR  \"vtkfreetype/include/freetype/config\"\n  FILES   \"include/freetype/config/ftconfig.h\"\n          \"include/freetype/config/ftheader.h\"\n          \"include/freetype/config/ftmodule.h\"\n          \"include/freetype/config/ftoption.h\"\n          \"include/freetype/config/ftstdlib.h\"\n          \"include/freetype/config/integer-types.h\"\n          \"include/freetype/config/mac-support.h\"\n          \"include/freetype/config/public-macros.h\")\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK CMake Build\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process, indicating that C++ source code in that directory should be compiled as part of the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/theora/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding VTK FiltersParallelImaging Module and Test Mangling in CMake\nDESCRIPTION: This snippet adds the VTK FiltersParallelImaging module using the previously defined classes and sets up test mangling for the module. It uses VTK-specific CMake functions for module management.\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/ParallelImaging/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_add_module(VTK::FiltersParallelImaging\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::FiltersParallelImaging)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14. This ensures that the CMake version used to build the project is compatible with the features used in the CMakeLists.txt file.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/GUI/QML/QtQuickProperty/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Registering 3D Tiles Test Data in CMake\nDESCRIPTION: Configures test data files for a VTK module, specifically targeting 3D Tiles format testing. The data includes various tile formats (OBJ, JSON, GML, GLB, B3DM) representing Jacksonville and Berlin datasets needed for testing VTK's 3D Tiles functionality.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Cesium3DTiles/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/3DTiles/jacksonville-triangle.obj\n  Data/3DTiles/jacksonville-tileset.json\n  Data/3DTiles/berlin-triangle.gml\n  Data/3DTiles/berlin-tileset.json\n  # tile=set\n  Data/3DTiles/jacksonville-gltf/9/9.glb\n  Data/3DTiles/jacksonville-gltf/14/14.glb\n  Data/3DTiles/jacksonville-gltf/15/15.glb\n  Data/3DTiles/jacksonville-gltf/16/16.glb\n  Data/3DTiles/jacksonville-gltf/tileset.json\n  Data/3DTiles/jacksonville-b3dm/9/9.b3dm\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Data-Requiring Tests in VTK InfovisCore\nDESCRIPTION: Defines a variable 'NEEDS_DATA' containing tests that require data but don't need validation against reference images (NO_VALID).\nSOURCE: https://github.com/kitware/vtk/blob/master/Infovis/Core/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(NEEDS_DATA\n  TestStringToNumeric.cxx,NO_VALID\n  TestMergeTables.cxx,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring HDF5 C++ Library Build Option in CMake\nDESCRIPTION: Configures build option for HDF5 C++ library, with VTK-specific hardcoding to disable it. Includes compatibility checks for parallel mode and C++ support, which are mutually exclusive unless ALLOW_UNSUPPORTED is enabled.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS \"${HDF5_SOURCE_DIR}/c++\" AND IS_DIRECTORY \"${HDF5_SOURCE_DIR}/c++\")\n  if (FALSE) # XXX(kitware): Hardcode settings.\n  option (HDF5_BUILD_CPP_LIB  \"Build HDF5 C++ Library\" OFF)\n  else ()\n  set(HDF5_BUILD_CPP_LIB OFF)\n  endif ()\n  if (HDF5_BUILD_CPP_LIB)\n    # check for unsupported options\n    if (HDF5_ENABLE_PARALLEL)\n      if (NOT ALLOW_UNSUPPORTED)\n        message (FATAL_ERROR \" **** Parallel and C++ options are mutually exclusive, override with ALLOW_UNSUPPORTED option **** \")\n      else ()\n        if (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.15.0\")\n          message (VERBOSE \" **** Allowing unsupported Parallel and C++ options **** \")\n        endif ()\n      endif ()\n    endif ()\n\n    include (${HDF_RESOURCES_DIR}/HDFCXXCompilerFlags.cmake)\n\n    add_subdirectory (c++)\n    if (HDF5_BUILD_HL_LIB)\n      if (EXISTS \"${HDF5_SOURCE_DIR}/hl/c++\" AND IS_DIRECTORY \"${HDF5_SOURCE_DIR}/hl/c++\")\n        #-- Build the High Level Fortran source codes\n        add_subdirectory (hl/c++)\n      endif ()\n    endif ()\n  endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building Parallel Iso-surface Example\nDESCRIPTION: Configures the build target for the parallel iso-surface example. Creates an executable and links it with VTK libraries.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/ParallelProcessing/Generic/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(ParallelIso ParallelIso.cxx)\ntarget_link_libraries(ParallelIso\n  PRIVATE\n    ${VTK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Improving Error Reporting in ADIOS2 VTX Reader in C++\nDESCRIPTION: This snippet updates how the ADIOS2 VTX reader reports errors, changing from exceptions to using vtkErrorMacro to enhance stability and prevent application crashes.\nSOURCE: https://github.com/kitware/vtk/blob/master/Documentation/release/9.4/adios2-vtx-reader-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nif (errorCondition) {\n    vtkErrorMacro(\"An error occurred while processing the request.\");\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Filters Points Test Executable\nDESCRIPTION: Generates test executable with specific configuration options including disabling floating point exceptions and using rendering factory\nSOURCE: https://github.com/kitware/vtk/blob/master/Filters/Points/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkFiltersPointsCxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Common Computational Geometry C++ Tests\nDESCRIPTION: This CMake snippet adds C++ tests for the VTK Common Computational Geometry module. It specifies test files and creates a test executable without data, validation, or output requirements.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/ComputationalGeometry/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_cxx(vtkCommonComputationalGeometryCxxTests tests\n  NO_DATA NO_VALID NO_OUTPUT\n  UnitTestParametricSpline.cxx\n  TestBilinearQuadIntersection.cxx\n  )\nvtk_test_cxx_executable(vtkCommonComputationalGeometryCxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Tests in CMake\nDESCRIPTION: This snippet registers Python scripts with the VTK testing system using CMake. Dependencies include CMake and Python bindings in VTK. Required parameters include test script filenames and execution flags. The inputs are test names and flags such as NO_DATA and NO_VALID. The output is a registered test within the VTK framework, with conditions based on the flags specified.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/WebGPU/Testing/Python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_add_test_python(\n  TestReadPixels.py,NO_DATA,NO_VALID\n  TestWritePixels.py,NO_DATA,NO_VALID\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing VTK Loguru Headers\nDESCRIPTION: This CMake snippet is responsible for installing the vtk_loguru.h header file in the appropriate include directory. It is a critical part of the installation process to ensure that necessary header files are accessible after the build.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/loguru/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_loguru.h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data and Subdirectories in CMake\nDESCRIPTION: This CMake snippet configures test data for a VTK module and adds a C++ subdirectory to the build. It specifies a WebM video file as test data and includes the 'Cxx' subdirectory in the build process.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FFMPEGOpenGL2/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/tracktor.webm\n  )\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: MetaIO BSD License (2000-2014)\nDESCRIPTION: BSD-style license from Insight Software Consortium covering the period 2000-2014. Specifies terms for source and binary redistribution, naming rights, and liability disclaimers.\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/MetaIO/vtkmetaio/License.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n/*=========================================================================\n\nCopyright 2000-2014 Insight Software Consortium\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the name of the Insight Software Consortium nor the names of\n  its contributors may be used to endorse or promote products derived\n  from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n=========================================================================*/\n```\n\n----------------------------------------\n\nTITLE: Adding VTK IOLegacy Module\nDESCRIPTION: Adds the defined classes to the VTK::IOLegacy module and configures test mangling for the module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Legacy/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_add_module(VTK::IOLegacy\n  CLASSES ${classes})\nvtk_add_test_mangling(VTK::IOLegacy)\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite on Windows using MSVC\nDESCRIPTION: Commands to build various SQLite components on Windows using Microsoft Visual C++ compiler (MSVC) and nmake build tool.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/sqlite/vtksqlite/README.md#2025-04-21_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nnmake /f Makefile.msc sqlite3.exe\nnmake /f Makefile.msc sqlite3.c\nnmake /f Makefile.msc sqldiff.exe\n# Makefile targets below this point require TCL development libraries\nnmake /f Makefile.msc tclextension-install\nnmake /f Makefile.msc devtest\nnmake /f Makefile.msc releasetest\nnmake /f Makefile.msc sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Setting executable permission for update.sh on Windows systems\nDESCRIPTION: Git command for making the update.sh script executable on Windows systems by updating the file mode in the Git index. This ensures the script is executable after checkout on other systems.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/fides/vtkfides/thirdparty/UPDATING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ git update-index --chmod=+x update.sh\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Python Subdirectory in VTK CMake Configuration\nDESCRIPTION: This CMake snippet conditionally adds the Python subdirectory to the build process only if VTK_WRAP_PYTHON is enabled. This allows for optional Python bindings generation in the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf3/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Collecting Assignment Symbols in ExprTk\nDESCRIPTION: Shows how to use the Dependent Entity Collector to identify symbols that may be assigned values within an expression. This is useful for tracking potential modifications to variables.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/vtkexprtk/readme.txt#2025-04-21_snippet_64\n\nLANGUAGE: C++\nCODE:\n```\n// Collect assignments\nparser.dec().collect_assignments() = true;\n\nif (!parser.compile(expression_string,expression))\n{\n   // error....\n}\n\nstd::deque<symbol_t> symbol_list;\n\nparser.dec().assignment_symbols(symbol_list);\n\nfor (std::size_t i = 0; i < symbol_list.size(); ++i)\n{\n   symbol_t& symbol = symbol_list[i];\n\n   switch (symbol.second)\n   {\n      case parser_t::e_st_variable : ... break;\n      case parser_t::e_st_vector   : ... break;\n      case parser_t::e_st_string   : ... break;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Executable with CMake\nDESCRIPTION: Sets up the VTK test C++ executable for volume rendering, specifying special compile-time configurations and linking encoded shader files. This includes disabling floating point exceptions and using a specific rendering factory to handle graphics operations.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/VolumeOpenGL2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n\nvtk_test_cxx_executable(vtkRenderingVolumeOpenGL2CxxTests tests\n  DISABLE_FLOATING_POINT_EXCEPTIONS\n  RENDERING_FACTORY\n  ${shader_c_files}\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing CGNS Headers and Configuring Package in CMake\nDESCRIPTION: Sets up the installation of CGNS header files and configures the package for CMake, including version file creation and export of targets. This section is conditionally excluded in the VTK build system.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (FALSE) # XXX(kitware): Use the VTK module system.\ninstall(FILES ${headers}\n\tDESTINATION include)\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  ${CMAKE_CURRENT_BINARY_DIR}/cgns-config-version.cmake\n  VERSION ${CGNS_VERSION}\n  COMPATIBILITY SameMajorVersion )\nconfigure_package_config_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/cgns-config.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/cgns-config.cmake\n  INSTALL_DESTINATION lib/cmake/cgns )\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/cgns-config-version.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/cgns-config.cmake\n\tDESTINATION lib/cmake/cgns)\ninstall(EXPORT cgns-targets\n\tFILE cgns-targets.cmake\n\tNAMESPACE CGNS::\n\tDESTINATION lib/cmake/cgns\n\t)\nelse ()\nvtk_module_install_headers(\n  FILES   ${headers}\n  SUBDIR  \"vtkcgns/src\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK GL2PS Exporter Classes and Module\nDESCRIPTION: Sets up VTK GL2PS exporter classes and configures the module with object factory declarations. Defines base and override classes, configures factory sources, and adds the module with necessary components.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/ExportGL2PS/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(classes\n  vtkGL2PSExporter\n  vtkOpenGLGL2PSExporter\n  )\n\nvtk_object_factory_declare(\n  BASE vtkGL2PSExporter\n  OVERRIDE vtkOpenGLGL2PSExporter)\n\nvtk_object_factory_configure(\n  SOURCE_FILE vtk_object_factory_source\n  HEADER_FILE vtk_object_factory_header\n  EXPORT_MACRO \"VTKIOEXPORTGL2PS_EXPORT\")\n\nvtk_module_add_module(VTK::IOExportGL2PS\n  CLASSES ${classes}\n  SOURCES ${vtk_object_factory_source}\n  PRIVATE_HEADERS ${vtk_object_factory_header})\nvtk_add_test_mangling(VTK::IOExportGL2PS)\n```\n\n----------------------------------------\n\nTITLE: Executing C++ Tests in VTK\nDESCRIPTION: This snippet configures the execution of C++ tests in the VTK module. It initializes a test executable 'vtkIOXdmf2CxxTests' that aggregates the added test cases. This configuration ensures that all specified tests are compiled and executed, facilitating the verification of the VTK module.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/Xdmf2/Testing/Cxx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_test_cxx_executable(vtkIOXdmf2CxxTests tests)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: CMake command to include the C++ source code directory (Cxx) in the VTK build process. This is a fundamental build configuration step that ensures all C++ components are compiled.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/FreeTypeFontConfig/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Medical Project Build Settings\nDESCRIPTION: Initial CMake configuration including project setup and output directory settings. Sets minimum CMake version and configures build output paths.\nSOURCE: https://github.com/kitware/vtk/blob/master/Examples/Medical/Cxx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8...3.12 FATAL_ERROR)\nproject(Medical)\n\ninclude(GNUInstallDirs)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: CMake Build and Test Configuration\nDESCRIPTION: Commands to build the library using cmake, with options for shared libraries and testing\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/doubleconversion/vtkdoubleconversion/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake . -DBUILD_SHARED_LIBS=ON\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake . -DBUILD_TESTING=ON\\nmake\\ntest/cctest/cctest --list | tr -d '<' | xargs test/cctest/cctest\n```\n\n----------------------------------------\n\nTITLE: Setting Template Classes\nDESCRIPTION: Specifies template classes for the VTK Common Math module.\nSOURCE: https://github.com/kitware/vtk/blob/master/Common/Math/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(template_classes\n  vtkQuaternion\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Python Tests\nDESCRIPTION: Conditionally adds the Python subdirectory to the build when VTK Python wrapping is enabled. This allows Python tests to be included only when Python support is configured.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (VTK_WRAP_PYTHON)\n  add_subdirectory(Python)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: CMake command to include the Cxx subdirectory in the VTK build process, which contains C++ source files and components.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/exprtk/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Directory to CMake Build\nDESCRIPTION: CMake directive that adds the Cxx subdirectory to the build process. This ensures that C++ source files in that directory are compiled as part of the VTK project.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/Core/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Directory to VTK Build\nDESCRIPTION: This CMake command adds the C++ source directory (Cxx) to the build process. It tells CMake to process the CMakeLists.txt file in the Cxx subdirectory as part of the overall build.\nSOURCE: https://github.com/kitware/vtk/blob/master/Accelerators/Vtkm/DataModel/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Finding and Using Verdict Package in CMake Projects\nDESCRIPTION: Shows how to find the Verdict package in a CMake project. The find_package command locates the Verdict installation on the system so it can be used in the project.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/verdict/vtkverdict/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Verdict)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK JsonCpp Module Properties\nDESCRIPTION: Sets up include directories, compile features, and target properties for the VTK JsonCpp module. It specifies C++11 as the required standard and sets the DLL build symbol.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/jsoncpp/vtkjsoncpp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(jsoncpp\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/json>\")\ntarget_compile_features(jsoncpp\n  PUBLIC\n    cxx_std_11)\nset_target_properties(jsoncpp\n  PROPERTIES\n    DEFINE_SYMBOL JSON_DLL_BUILD)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Test Data Files in CMake\nDESCRIPTION: Registers DG (Discontinuous Galerkin) mesh files as test data for VTK module testing using CMake configuration directives.\nSOURCE: https://github.com/kitware/vtk/blob/master/IO/CellGrid/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvtk_module_test_data(\n  Data/dgHexahedra.dg\n  Data/dgQuadrilateral.dg\n  Data/dgTetrahedra.dg\n  Data/dgTriangle.dg\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Module Test Data Files in CMake\nDESCRIPTION: Lists all the test data files needed for VTK module tests, including 3D models, volume data, textures, skybox images, and material maps. The function registers these files to be available during testing.\nSOURCE: https://github.com/kitware/vtk/blob/master/Rendering/ANARI/Testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_test_data(\n  Data/bunny.ply\n  Data/dragon.ply\n  Data/ironProt.vtk\n  Data/many_blocks/many_blocks.vtm\n  Data/many_blocks/many_blocks/,REGEX:.*\n  Data/vase_1comp.vti\n  Data/wintersun.jpg\n  Data/skybox/posx.jpg\n  Data/skybox/negx.jpg\n  Data/skybox/posy.jpg\n  Data/skybox/negy.jpg\n  Data/skybox/posz.jpg\n  Data/skybox/negz.jpg\n  Data/vtk_Material.png\n  Data/vtk_Base_Color.png\n  Data/vtk_Normal.png\n  Data/vtk_Anisotropy.png\n  Data/tooth.nhdr)\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Header in CMake\nDESCRIPTION: This snippet generates a configuration header file from a template, which is essential for conditional compilation in the build process. It requires the CMake environment to be set up properly and depends on the source and binary directories being defined correctly. The output is a processed header file named 'libport_config.h'.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/tiff/vtktiff/port/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/libport_config.h.cmake.in\n        ${CMAKE_CURRENT_BINARY_DIR}/libport_config.h\n        @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Linking JNI Libraries\nDESCRIPTION: Links the required JNI libraries to the VTK Java module as a public dependency\nSOURCE: https://github.com/kitware/vtk/blob/master/Utilities/Java/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_link(VTK::Java\n  PUBLIC\n    ${JNI_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PEGTL Module Headers\nDESCRIPTION: Installs the generated PEGTL configuration header into the appropriate VTK module header directory using vtk_module_install_headers command.\nSOURCE: https://github.com/kitware/vtk/blob/master/ThirdParty/pegtl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nvtk_module_install_headers(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/vtk_pegtl.h\")\n```"
  }
]