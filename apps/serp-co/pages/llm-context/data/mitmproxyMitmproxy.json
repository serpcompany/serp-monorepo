[
  {
    "owner": "mitmproxy",
    "repo": "mitmproxy",
    "content": "TITLE: Map Local Example: Replace main.js\nDESCRIPTION: This example replaces requests to `example.com/main.js` with the content of the local file `~/main-local.js`. The separator is `|`.  When the URL matches the regex, the local file is served instead of fetching from the original URL.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n\\|example.com/main.js\\|~/main-local.js\n```\n\n----------------------------------------\n\nTITLE: Map Remote Example: Redirect .jpg to placedog.net\nDESCRIPTION: This example redirects all requests ending with `.jpg` to `https://placedog.net/640/480?random`. The separator is `|`. The regex `.*\\.jpg$` matches any URL ending in `.jpg`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n\\|.*\\.jpg$|https://placedog.net/640/480?random\n```\n\n----------------------------------------\n\nTITLE: Client Replay and Saving with mitmdump (Bash)\nDESCRIPTION: This command replays requests from `srcfile` and writes the resulting flows to `dstfile`.  The `-n` flag disables binding to the proxy port. This is useful for transforming a capture file and saving the result.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/_index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -nC srcfile -w dstfile\n```\n\n----------------------------------------\n\nTITLE: Map Local Example: Replace static directory (v2)\nDESCRIPTION: This example demonstrates a `map_local` rule to replace `example.com/static/foo` with the content of the `~/static` directory.  The separator is `|`. If `example.com/static/foo/bar.css` is requested, mitmproxy will serve `~/static/bar.css` if it exists, otherwise `~/static/bar.css/index.html`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n\\|example.com/static/foo\\|~/static\n```\n\n----------------------------------------\n\nTITLE: Scripted Data Transformation with mitmdump (Bash)\nDESCRIPTION: This command loads HTTP flows from srcfile, transforms them using the specified Python script (add_header.py), and writes the modified flows to dstfile. The `-ns` flag indicates a script that transforms flows, and `-r` and `-w` specify the input and output files, respectively. This is useful for automating complex modifications of HTTP traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/_index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -ns examples/simple/add_header.py -r srcfile -w dstfile\n```\n\n----------------------------------------\n\nTITLE: Blocklist Example: Block google-analytics.com\nDESCRIPTION: This example demonstrates blocking requests to google-analytics.com and returning a 404 Not Found status code. The `~d` filter matches domains. The separator is `:`. The status code `404` will be returned when a request matches the domain.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n:~d google-analytics.com:404\n```\n\n----------------------------------------\n\nTITLE: Saving Traffic with mitmdump (Bash)\nDESCRIPTION: This command starts mitmdump in proxy mode and writes all intercepted HTTP traffic to the specified outfile. It captures both requests and responses, creating a record of the entire communication for later analysis or replay. No specific dependencies are required other than having mitmdump installed.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/_index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -w outfile\n```\n\n----------------------------------------\n\nTITLE: Abbreviated Mitmproxy Addon Script in Python\nDESCRIPTION: This example illustrates the abbreviated scripting syntax for creating Mitmproxy addons. It shows how a module can be treated as an addon object by placing event handler functions in the module scope. This specific example adds a header to every request.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/overview.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom mitmproxy import http\n\n\ndef request(flow: http.HTTPFlow):\n    flow.request.headers[\"example\"] = \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Local Capture: Intercept Traffic (Shell)\nDESCRIPTION: Demonstrates how to use mitmproxy in local capture mode to intercept traffic from specific processes or all processes on the same machine. Includes examples for intercepting all traffic, specific processes (like cURL), and processes by PID.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmitmproxy --mode local       # Intercept everything on this machine.\nmitmproxy --mode local:curl  # Intercept cURL only.\nmitmproxy --mode local:42    # Intercept PID 42 only.\n```\n\n----------------------------------------\n\nTITLE: Simple Command Example in mitmproxy (Python)\nDESCRIPTION: This code snippet demonstrates a simple mitmproxy addon command using the `command.command` decorator. The command increments a counter and prints a message to the event log. Type annotations are mandatory for command arguments and return values.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/commands.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mitmproxy import command\nfrom mitmproxy import ctx\n\nclass MyAddon:\n    def __init__(self):\n        self.num = 0\n\n    @command.command(\"myaddon.inc\")\n    def inc(self) -> None:\n        self.num += 1\n        ctx.log.alert(f\"num = {self.num}\")\n\naddons = [MyAddon()]\n```\n\n----------------------------------------\n\nTITLE: Modify Body File Replacement Example\nDESCRIPTION: This example shows how to replace 'foo' with the content of the file '~/xss-exploit' in requests using mitmdump. The `~q` filter specifies that the replacement should apply only to requests.  It assumes the file exists at the specified path and contains the desired replacement data. Requires bash environment and mitmdump.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nmitmdump --modify-body :~q:foo:@~/xss-exploit\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy Mode (Shell)\nDESCRIPTION: Shows how to start mitmproxy in reverse proxy mode, forwarding client requests to a preconfigured target server (example.com).\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmitmdump --mode reverse:https://example.com\n```\n\n----------------------------------------\n\nTITLE: Mitmproxy: Ignore Host Examples\nDESCRIPTION: These examples illustrate various ways to use the `--ignore-hosts` option in mitmproxy for different scenarios, such as ignoring traffic from the iOS App Store, ignoring a specific domain but not its subdomains, and ignoring traffic based on IP address ranges in transparent mode. They demonstrate the flexibility of the regex-based ignore patterns.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/ignore-domains.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Exempt traffic from the iOS App Store (the regex is lax, but usually just works):\n--ignore-hosts apple.com:443\n# \"Correct\" version without false-positives:\n--ignore-hosts '^(.+\\.)?apple\\.com:443$'\n\n# Ignore example.com, but not its subdomains:\n--ignore-hosts '^example.com:'\n\n# Transparent mode:\n--ignore-hosts 17\\.178\\.96\\.59:443\n# IP address range:\n--ignore-hosts 17\\.178\\.\\d+\\.\\d+:443\n```\n\n----------------------------------------\n\nTITLE: Run mitmproxy in Transparent Mode\nDESCRIPTION: Starts mitmproxy in transparent mode with the `--showhost` option, which displays the Host header in the URL. It's crucial to run mitmproxy with necessary privileges if redirecting system traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --mode transparent --showhost\n```\n\n----------------------------------------\n\nTITLE: Anatomy of a Mitmproxy Addon in Python\nDESCRIPTION: This addon keeps track of the number of flows (HTTP requests) seen. Every time a new flow is detected, it increments and logs the tally. It demonstrates the basic structure of a mitmproxy addon, including the `addons` global list and event handler methods.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/overview.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom mitmproxy import http\n\n\nclass Counter:\n    def __init__(self):\n        self.num = 0\n\n    def request(self, flow: http.HTTPFlow):\n        self.num = self.num + 1\n        print(\"We've seen %d flows\" % self.num)\n\n\naddons = [Counter()]\n```\n\n----------------------------------------\n\nTITLE: Using mitmproxy as HTTP Proxy\nDESCRIPTION: These commands demonstrate how to configure curl to use mitmproxy as an HTTP and HTTPS proxy. The http_proxy and https_proxy environment variables are set to point to localhost:8080, where mitmproxy is listening. The -k option disables SSL certificate verification for HTTPS requests.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/release/docker/DockerHub-README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ http_proxy=http://localhost:8080/ curl http://example.com/\n$ https_proxy=http://localhost:8080/ curl -k https://example.com/\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Certificate Generation\nDESCRIPTION: These commands use OpenSSL to generate a self-signed certificate for use with mitmproxy. The first command generates a private key, the second creates a self-signed certificate using the key, and the third concatenates the key and certificate into a single PEM file suitable for use with mitmproxy's `--certs` option.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out cert.key 2048\n```\n\nLANGUAGE: bash\nCODE:\n```\n# (Specify the mitm domain as Common Name, e.g. \\*.google.com)\nopenssl req -new -x509 -key cert.key -out cert.crt\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat cert.key cert.crt > cert.pem\n```\n\n----------------------------------------\n\nTITLE: Add HTTP Header with Response Count in Mitmproxy (Python)\nDESCRIPTION: This addon demonstrates how to add an HTTP response header containing the count of responses seen so far. It uses the `response` event hook to intercept and modify HTTP responses, adding a custom header with the current count. This requires the mitmproxy library to be installed.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/event-hooks.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom mitmproxy import http\n\nclass AddHeader:\n    def __init__(self):\n        self.num = 0\n\n    def response(self, flow: http.HTTPFlow):\n        self.num = self.num + 1\n        flow.response.headers[\"count\"] = str(self.num)\n\n\naddons = [AddHeader()]\n```\n\n----------------------------------------\n\nTITLE: URL containing \"google.com\" Filter\nDESCRIPTION: This filter expression matches any request URL that contains the string \"google.com\". It's a simple example demonstrating how to match a specific string within a URL using a filter in mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/filters.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ngoogle\\.com\n```\n\n----------------------------------------\n\nTITLE: Blocklist Example: Only allow example.com\nDESCRIPTION: This example shows how to only allow requests to example.com by blocking everything else. The `!~d` filter negates the domain match, effectively blocking all requests that do not match `^example\\.com$`.  A 403 Forbidden response is returned for blocked requests.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n:!~d ^example\\.com$:403\n```\n\n----------------------------------------\n\nTITLE: Simple Option Declaration in Mitmproxy Addon (Python)\nDESCRIPTION: This snippet demonstrates how to declare a simple boolean option named `addheader` within a mitmproxy addon. The `load` event is used to register the option using `loader.add_option`. The `response` event then checks if the option is enabled and adds a header to the response if it is.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/options.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mitmproxy import http\n\ncount = 0\n\nclass AddHeader:\n    def __init__(self):\n        self.num = 0\n\n    def load(self, loader):\n        loader.add_option(\n            \"addheader\", bool, False, \"Add a header to each response.\"\n        )\n\n    def response(self, flow: http.HTTPFlow):\n        if flow.request.pretty_host == \"example.com\":\n            return  # Do not process example.com\n        if flow.live and flow.live.is_replay:\n            return  # Do not process replay flows\n        if flow.response and flow.response.content:\n            if flow.options.addheader:\n                global count\n                count = count + 1\n                flow.response.headers[\"count\"] = str(count)\n\n\naddons = [AddHeader()]\n```\n\n----------------------------------------\n\nTITLE: Configure Linux Routing for Transparent Proxy\nDESCRIPTION: This set of commands configures Linux routing to enable transparent proxying. It defines a routing table, marks packets from the client network, redirects TCP traffic on ports 80 and 443 to mitmproxy's port, and adds routing rules for the marked packets.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nCLIENT_NET=192.168.1.0/24\nTABLE_ID=100\nMARK=1\n\necho \"$TABLE_ID     mitmproxy\" >> /etc/iproute2/rt_tables\niptables -t mangle -A PREROUTING -d $CLIENT_NET -j MARK --set-mark $MARK\niptables -t nat \\\n    -A PREROUTING -p tcp -s $CLIENT_NET \\\n    --match multiport --dports 80,443 -j \\\n    REDIRECT --to-port 8080\n\nip rule add fwmark $MARK lookup $TABLE_ID\nip route add local $CLIENT_NET dev lo table $TABLE_ID\n```\n\n----------------------------------------\n\nTITLE: Command Example Working with Paths (Python)\nDESCRIPTION: This example demonstrates a mitmproxy addon command that takes a path as an argument. The command calculates a histogram of domains in the specified flows and writes it to the given path. mitmproxy provides tab completion for both flow specifications and paths.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/commands.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import Counter\nfrom typing import Sequence\n\nfrom mitmproxy import command\nfrom mitmproxy import flow\nfrom mitmproxy import http\n\n\nclass MyAddon:\n    @command.command(\"myaddon.histogram\")\n    def histogram(self, flows: Sequence[flow.Flow], path: str) -> None:\n        counts = Counter()\n        for f in flows:\n            if isinstance(f, http.HTTPFlow) and f.request:\n                counts[f.request.host] += 1\n        with open(path, \"w\") as fp:\n            for domain, count in counts.most_common():\n                fp.write(f\"{domain},{count}\\n\")\n\n\naddons = [MyAddon()]\n```\n\n----------------------------------------\n\nTITLE: Simple Contentview Example in mitmproxy\nDESCRIPTION: This Python snippet demonstrates a simple contentview implementation in mitmproxy. It inherits from the `Contentview` base class and defines a `render` method to pretty-print binary data. This contentview can be loaded as a regular addon to mitmproxy using the `-s` flag.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/contentviews.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom mitmproxy import contentviews\nfrom mitmproxy.contentviews import TrivialSyntaxHighlighter\nfrom mitmproxy.contentviews import ContentView\nfrom mitmproxy.contentviews import format_text\nfrom mitmproxy.http import Headers\n\n\nclass ViewExample(ContentView):\n    name = \"Example\"\n    order = 1\n\n    def __init__(self, *, highlight: TrivialSyntaxHighlighter) -> None:\n        self.highlight = highlight\n\n    def render(self, value: bytes, *, content_type: str | None = None, headers: Headers | None = None) -> contentviews.TViewResult:\n        yield \"example: \" + value.decode(errors=\"replace\")\n        yield format_text(\"example: \", value.decode(errors=\"replace\"))\n        yield self.highlight(value, content_type=content_type)\n\n\ndef load(loader):\n    loader.add_contentview(ViewExample)\n```\n\n----------------------------------------\n\nTITLE: Configure pf for Transparent Proxying (macOS)\nDESCRIPTION: Configures pf (Packet Filter) rules in pf.conf to redirect HTTP (port 80) and HTTPS (port 443) traffic to mitmproxy running on port 8080. The interface 'en0' is specified.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nrdr pass on en0 inet proto tcp to any port {80, 443} -> 127.0.0.1 port 8080\n```\n\n----------------------------------------\n\nTITLE: Running Mitmproxy with a Python Script (Bash)\nDESCRIPTION: This snippet shows how to run mitmproxy with a specified Python script.  The `-s` flag is used to load the script, allowing the addon to modify mitmproxy's behavior.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/options.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mitmproxy -s ./examples/addons/options-simple.py\n```\n\n----------------------------------------\n\nTITLE: Explicit HTTPS CONNECT Request Example\nDESCRIPTION: Shows an HTTP CONNECT request used for establishing a tunnel through an explicit proxy for HTTPS traffic. The proxy facilitates a raw TCP connection to the specified host and port. No dependencies are required.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/how-mitmproxy-works.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nCONNECT example.com:443 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Modify Header Example: Set Host\nDESCRIPTION: This example sets the 'Host' header to 'example.org' for all requests, overwriting any existing 'Host' header. It leverages the mitmproxy command-line interface. Requires mitmproxy installation.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n/~q/Host/example.org\n```\n\n----------------------------------------\n\nTITLE: Record HTTP conversation to a file using mitmdump (bash)\nDESCRIPTION: This command uses mitmdump to record the HTTP conversation to a file named wireless-login. The -w option specifies the output file for the recorded traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/tutorials/client-replay.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -w wireless-login\n```\n\n----------------------------------------\n\nTITLE: Replay recorded HTTP conversation using mitmdump (bash)\nDESCRIPTION: This command replays the HTTP conversation recorded in the wireless-login file using mitmdump. The -C option specifies the input file for the replay process, simulating the recorded client requests.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/tutorials/client-replay.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -C wireless-login\n```\n\n----------------------------------------\n\nTITLE: Logging with standard library in mitmproxy\nDESCRIPTION: This snippet shows the new way of logging in mitmproxy using the standard Python `logging` module.  Instead of `mitmproxy.ctx.log`, developers should now use `import logging` and the standard logging functions like `logging.info`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/api-changelog.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.info(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: SOCKS5 Proxy Mode\nDESCRIPTION: This command starts mitmproxy as a SOCKS5 proxy, enabling interception of traffic using the SOCKS5 protocol. This is similar to the regular proxy mode but using SOCKS5 instead of HTTP for connection establishment.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmitmdump --mode socks5\n```\n\n----------------------------------------\n\nTITLE: Command Example Working with Flows (Python)\nDESCRIPTION: This example demonstrates how to create a mitmproxy addon command that works with flows. The `myaddon.addheader` command adds a header to the request of each flow in the provided sequence. Users can specify flows using flow selectors.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/commands.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Sequence\n\nfrom mitmproxy import command\nfrom mitmproxy import flow\nfrom mitmproxy import http\n\n\nclass MyAddon:\n    @command.command(\"myaddon.addheader\")\n    def addheader(self, flows: Sequence[flow.Flow]) -> None:\n        for f in flows:\n            if isinstance(f, http.HTTPFlow) and f.request:\n                f.request.headers[\"x-custom\"] = \"awesome\"    \n\naddons = [MyAddon()]\n```\n\n----------------------------------------\n\nTITLE: Map Remote Example: Redirect example.org to mitmproxy.org\nDESCRIPTION: This example re-routes all GET requests from `example.org` to `mitmproxy.org`.  The separator is `|`. The `~m GET` filter restricts the rule to GET requests only. The regex `//example.org/` matches the specified URL.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n\\|~m GET|//example.org/|//mitmproxy.org/\n```\n\n----------------------------------------\n\nTITLE: Configure iptables for Transparent Proxying\nDESCRIPTION: Configures iptables rules to redirect HTTP (port 80) and HTTPS (port 443) traffic to mitmproxy running on port 8080. The traffic originating from eth0 interface is redirected to mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\niptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080\niptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080\nip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080\nip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080\n```\n\n----------------------------------------\n\nTITLE: Map Local Example: Replace static directory (GET only)\nDESCRIPTION: This example shows how to apply a `map_local` rule only to GET requests. The separator is `|`. The `~m GET` filter restricts the rule to GET requests only. If `example.com/static/foo/bar.css` is requested, mitmproxy will serve `~/static/foo/bar.css` if it exists, otherwise `~/static/foo/bar.css/index.html`, but only for GET requests.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n\\|~m GET\\|example.com/static\\|~/static\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Create Certificate Authority\nDESCRIPTION: This command uses OpenSSL to create a certificate authority. It creates a self-signed certificate (ca.crt) and a private key (ca.key), including the necessary X509v3 extensions required by mitmproxy. Finally it concatenates the key and certificate into a single PEM file.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -x509 -new -nodes -key ca.key -sha256 -out ca.crt -addext keyUsage=critical,keyCertSign\ncat ca.key ca.crt > mitmproxy-ca.pem\n```\n\n----------------------------------------\n\nTITLE: Excluding text/html Content Type Filter\nDESCRIPTION: This filter expression matches anything except requests with a text/html content type. It uses negation (!) combined with the ~q and ~t operators to exclude requests with the specified content type.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/filters.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n!(~q & ~t \"text/html\")\n```\n\n----------------------------------------\n\nTITLE: Mitmproxy Custom Certificate for specific domains\nDESCRIPTION: This command starts mitmproxy and configures it to use the custom certificate located at `cert.pem` for the specified domain (`*.example.com`). Mitmproxy will use this certificate instead of generating one signed by its own CA for the specified domain.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --certs *.example.com=cert.pem\n```\n\n----------------------------------------\n\nTITLE: Replaying flows for a specific domain in mitmproxy\nDESCRIPTION: This command replays flows for a specific domain using the `replay.client` command and a filter expression. The `~d google.com` filter selects flows for the domain google.com. This command needs to be executed within the mitmproxy console.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/commands.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n:replay.client \"~d google.com\"\n```\n\n----------------------------------------\n\nTITLE: Enable IP Forwarding and Redirect Traffic (iptables) - bash\nDESCRIPTION: These commands enable IP forwarding and configure iptables to redirect HTTP (port 80) and HTTPS (port 443) traffic from the internal network (eth1) to mitmproxy running on port 8080. This allows mitmproxy to intercept and proxy the traffic from the virtual machines.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w net.ipv4.ip_forward=1\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo iptables -t nat -A PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to-port 8080\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo iptables -t nat -A PREROUTING -i eth1 -p tcp --dport 443 -j REDIRECT --to-port 8080\n```\n\n----------------------------------------\n\nTITLE: Modify Header Example: Conditional Set Host\nDESCRIPTION: This example demonstrates setting the 'Host' header to 'example.org' only for requests that do not already have a 'Host' header. It uses a combined filter `~q & !~h Host:` to achieve this. It requires mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\n/~q & !~h Host:/Host/example.org\n```\n\n----------------------------------------\n\nTITLE: Enable IP Forwarding on Linux (sysctl)\nDESCRIPTION: Enables IP forwarding on a Linux system, allowing the machine to forward packets instead of rejecting them. This command needs to be executed to allow the machine to act as a router for the redirected traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.ip_forward=1\nsysctl -w net.ipv6.conf.all.forwarding=1\n```\n\n----------------------------------------\n\nTITLE: Configure pf for Local Traffic Redirection (macOS)\nDESCRIPTION: Configures pf (Packet Filter) rules in pf.conf to divert HTTP (port 80) and HTTPS (port 443) traffic to mitmproxy running on port 8080. Redirection only occurs for connections not originating from the `tproxy_user` to avoid infinite loops.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n#The ports to redirect to proxy\nredir_ports = \"{http, https}\"\n\n#The address the transparent proxy is listening on\ntproxy = \"127.0.0.1 port 8080\"\n\n#The user the transparent proxy is running as\ntproxy_user = \"nobody\"\n\n#The users whose connection must be redirected.\n#\n#This cannot involve the user which runs the\n#transparent proxy as that would cause an infinite loop.\n```\n\n----------------------------------------\n\nTITLE: Mitmproxy: Ignoring a Specific Domain\nDESCRIPTION: This command shows how to use the `--ignore-hosts` option with mitmproxy to prevent interception of traffic to a specific domain (example.com:443). The domain is specified as a regular expression, ensuring it is matched exactly.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/ignore-domains.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n>>> mitmproxy --ignore-hosts '^example\\.com:443$'\n```\n\n----------------------------------------\n\nTITLE: Filtering Saved Traffic with mitmdump (Bash)\nDESCRIPTION: This command processes an existing traffic file (infile), applies a filter to select specific flows (in this case, only POST requests), and writes the filtered traffic to a new file (outfile). The `-n` flag prevents mitmdump from binding to the proxy port, making it suitable for offline processing. The filter expression `~m post` selects flows where the HTTP method is POST.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/_index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -nr infile -w outfile \"~m post\"\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL Key Logging with SSLKEYLOGFILE (Bash)\nDESCRIPTION: This command sets the SSLKEYLOGFILE environment variable to a file path and then runs mitmproxy.  mitmproxy will then log SSL/TLS master secrets to the specified file, enabling Wireshark to decrypt SSL/TLS traffic. $PWD represents the current working directory.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/wireshark-tls.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSSLKEYLOGFILE=\"$PWD/.mitmproxy/sslkeylogfile.txt\" mitmproxy\n```\n\n----------------------------------------\n\nTITLE: Blocklist Example: Block example.com (No Response)\nDESCRIPTION: This example shows how to block requests to example.com without sending any HTTP response (hanging up).  The `~d` filter matches domains, and the `444` status code instructs mitmproxy to close the connection without responding. The separator is `:`. \nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n:~d example.com$:444\n```\n\n----------------------------------------\n\nTITLE: Configure iptables for Local Traffic Redirection\nDESCRIPTION: Configures iptables rules to redirect all traffic from the local machine (excluding the mitmproxy user) to mitmproxy running on port 8080. This is a workaround for redirecting traffic originating from the same machine running mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\niptables -t nat -A OUTPUT -p tcp -m owner ! --uid-owner mitmproxyuser --dport 80 -j REDIRECT --to-port 8080\niptables -t nat -A OUTPUT -p tcp -m owner ! --uid-owner mitmproxyuser --dport 443 -j REDIRECT --to-port 8080\nip6tables -t nat -A OUTPUT -p tcp -m owner ! --uid-owner mitmproxyuser --dport 80 -j REDIRECT --to-port 8080\niptables -t nat -A OUTPUT -p tcp -m owner ! --uid-owner mitmproxyuser --dport 443 -j REDIRECT --to-port 8080\n```\n\n----------------------------------------\n\nTITLE: Run mitmproxy as Specific User\nDESCRIPTION: Runs mitmproxy as the `mitmproxyuser` to avoid circular redirection issues when redirecting local traffic. The home directory is explicitly specified and `block_global=false` is set.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u mitmproxyuser -H bash -c '$HOME/.local/bin/mitmproxy --mode transparent --showhost --set block_global=false'\n```\n\n----------------------------------------\n\nTITLE: Setting Option Value from the Command Line (Bash)\nDESCRIPTION: This snippet illustrates how to set the value of an addon option directly from the command line when running mitmproxy.  The `--set` flag is used to override the default value of the `addheader` option to `true`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/options.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy -s ./examples/addons/options-simple.py --set addheader=true\n```\n\n----------------------------------------\n\nTITLE: Map Local Example: Replace static directory\nDESCRIPTION: This example replaces requests under `example.com/static` with files from the local directory `~/static`. The separator is `|`. If `example.com/static/foo/bar.css` is requested, mitmproxy will serve `~/static/foo/bar.css` if it exists, otherwise `~/static/foo/bar.css/index.html`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n\\|example.com/static\\|~/static\n```\n\n----------------------------------------\n\nTITLE: Run mitmproxy in Transparent Mode - bash\nDESCRIPTION: This command starts mitmproxy in transparent proxy mode. This mode allows mitmproxy to intercept and proxy traffic without requiring explicit proxy configuration on the client machines. This is essential for the transparent proxy setup described in the document.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --mode transparent\n```\n\n----------------------------------------\n\nTITLE: Run mitmproxy in Transparent Mode (macOS)\nDESCRIPTION: Starts mitmproxy in transparent mode with the `--showhost` option. This option tells mitmproxy to display the Host header in the URL.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --mode transparent --showhost\n```\n\n----------------------------------------\n\nTITLE: Upstream Proxy Mode\nDESCRIPTION: This command configures mitmproxy to forward all requests to a specified upstream proxy. It requires specifying the upstream proxy's address and port.  It supports HTTP and HTTPS.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmitmdump --mode upstream:http://example.com:8081\n```\n\n----------------------------------------\n\nTITLE: Disable ICMP Redirects on Linux (sysctl)\nDESCRIPTION: Disables ICMP redirects to prevent the test device from bypassing the proxy and finding a direct route to the destination.  This ensures all traffic is routed through mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.conf.all.send_redirects=0\n```\n\n----------------------------------------\n\nTITLE: Running mitmproxy TUI in Docker\nDESCRIPTION: This command runs the mitmproxy terminal user interface (TUI) within a Docker container. It maps port 8080 from the container to the host and mounts the ~/.mitmproxy directory for persistent storage of CA certificates. The --rm flag removes the container after it exits, and -it provides an interactive terminal.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/release/docker/DockerHub-README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run --rm -it -v ~/.mitmproxy:/home/mitmproxy/.mitmproxy -p 8080:8080 mitmproxy/mitmproxy\n```\n\n----------------------------------------\n\nTITLE: Local Capture: Negated Target Selection (Shell)\nDESCRIPTION: Shows how to exclude specific processes when using mitmproxy in local capture mode. The exclamation mark negates the target selection, intercepting everything except the specified processes.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmitmproxy --mode local:!curl  # Intercept everything on this machine but cURL.\n```\n\n----------------------------------------\n\nTITLE: Configure pf for Transparent Proxying (OpenBSD)\nDESCRIPTION: Configures pf (Packet Filter) rules in /etc/pf.conf to divert HTTP (port 80) and HTTPS (port 443) traffic to mitmproxy running on port 8080.  The interface 're2' is used for the test device.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nmitm_if = \"re2\"\npass in quick proto tcp from $mitm_if to port { 80, 443 } divert-to 127.0.0.1 port 8080\n```\n\n----------------------------------------\n\nTITLE: Create mitmproxy User\nDESCRIPTION: Creates a dedicated user to run mitmproxy, improving security and preventing circular traffic redirection issues. A dedicated home directory for the user is created and mitmproxy installed there.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd --create-home mitmproxyuser\nsudo -u mitmproxyuser -H bash -c 'cd ~ && pip install --user mitmproxy'\n```\n\n----------------------------------------\n\nTITLE: Interactive Contentview Example in mitmproxy\nDESCRIPTION: This Python snippet implements an interactive contentview in mitmproxy, allowing users to edit the prettified representation. It defines the `edit` method to handle user edits and re-encode the data. It utilizes the `contentviews.TViewResult` to return the modified representation.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/contentviews.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom mitmproxy import contentviews\nfrom mitmproxy.contentviews import TrivialSyntaxHighlighter\nfrom mitmproxy.contentviews import ContentView\nfrom mitmproxy.contentviews import format_text\nfrom mitmproxy.http import Headers\nfrom mitmproxy.utils import human\n\n\nclass ViewExample(ContentView):\n    name = \"Example (Interactive)\"\n    order = 1\n\n    def __init__(self, *, highlight: TrivialSyntaxHighlighter) -> None:\n        self.highlight = highlight\n\n    def render(self, value: bytes, *, content_type: str | None = None, headers: Headers | None = None) -> contentviews.TViewResult:\n        yield \"example: \" + value.decode(errors=\"replace\")\n        yield format_text(\"example: \", value.decode(errors=\"replace\"))\n        yield self.highlight(value, content_type=content_type)\n\n    def edit(self, data: bytes, *, content_type: str | None = None, headers: Headers | None = None) -> bytes:\n        prompt = human.prompt(\"Edit this\", data.decode(errors=\"replace\"))\n        if prompt:\n            return prompt.encode()\n        return data\n\n\ndef load(loader):\n    loader.add_contentview(ViewExample)\n```\n\n----------------------------------------\n\nTITLE: Generate certificate hash and copy (bash)\nDESCRIPTION: This command generates the hash of the certificate and copies it to a file with the hash as the filename and '.0' as the extension, which is required for Android to recognize it as a trusted CA certificate.  It assumes the certificate is named `mitmproxy-ca-cert.cer` and located in the current directory.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhashed_name=`openssl x509 -inform PEM -subject_hash_old -in mitmproxy-ca-cert.cer | head -1` && cp mitmproxy-ca-cert.cer $hashed_name.0\n```\n\n----------------------------------------\n\nTITLE: Transparent Proxy Mode\nDESCRIPTION: This command starts mitmproxy in transparent proxy mode, intercepting traffic at the network layer without client-side configuration. It requires network configuration to redirect traffic to the mitmproxy instance.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmitmdump --mode transparent\n```\n\n----------------------------------------\n\nTITLE: dnsmasq.conf Configuration\nDESCRIPTION: This configuration file is used for setting up dnsmasq to provide DHCP and DNS services for the internal network. It listens for DNS requests on eth1, acts as a DHCP server assigning IP addresses in the range 192.168.3.10-192.168.3.100, and broadcasts gateway and DNS server information.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n# Listen for DNS requests on the internal network\ninterface=eth1\nbind-interfaces\n# Act as a DHCP server, assign IP addresses to clients\ndhcp-range=192.168.3.10,192.168.3.100,96h\n# Broadcast gateway and dns server information\ndhcp-option=option:router,192.168.3.1\ndhcp-option=option:dns-server,192.168.3.1\n```\n\n----------------------------------------\n\nTITLE: Executing Flow Commands with Selectors (Bash)\nDESCRIPTION: These bash commands show how to load the addon into mitmproxy and how to invoke the toy command using flow selectors: @focus, @all, and ~d google.com.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/commands.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> mitmproxy -s ./examples/addons/commands-flows.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n:myaddon.addheader @focus\n```\n\nLANGUAGE: bash\nCODE:\n```\n:myaddon.addheader @all\n```\n\nLANGUAGE: bash\nCODE:\n```\n:myaddon.addheader ~d google.com\n```\n\n----------------------------------------\n\nTITLE: Handling Configuration Updates in Mitmproxy Addon (Python)\nDESCRIPTION: This snippet demonstrates how to use the `configure` event in a mitmproxy addon to respond to option changes. It shows how to validate option values and raise an `exceptions.OptionsError` if the value is invalid. The `add_option` uses `typing.Optional` to allow the option to be unset.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/options.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nfrom mitmproxy import http\nfrom mitmproxy import exceptions\n\n\nclass Header:\n    def __init__(self):\n        self.header_value: typing.Optional[int] = None\n\n    def load(self, loader):\n        loader.add_option(\n            \"addheader\",\n            typing.Optional[int],\n            None,\n            \"Add a header to each response. Value is the header value.\",\n        )\n\n    def configure(self, updates):\n        if \"addheader\" in updates:\n            if flow.options.addheader is not None:\n                if flow.options.addheader > 100:\n                   raise exceptions.OptionsError(\"addheader must be <= 100\")\n\n    def request(self, flow: http.HTTPFlow):\n        if flow.request and flow.request.headers:\n           if flow.options.addheader is not None:\n               flow.request.headers[\"header\"] = str(flow.options.addheader)\n\naddons = [Header()]\n```\n\n----------------------------------------\n\nTITLE: Restart dnsmasq (Ubuntu >= 16.04) - bash\nDESCRIPTION: This command restarts the dnsmasq service on Ubuntu 16.04 or newer. It's required to apply the changes made to the dnsmasq configuration file (**/etc/dnsmasq.conf**).\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart dnsmasq\n```\n\n----------------------------------------\n\nTITLE: Enable IP Routing in Windows\nDESCRIPTION: These commands enable IP routing in Windows, allowing the system to act as a router.  The `reg add` command modifies the registry to enable IP routing. The `sc config` command configures the RemoteAccess service to start on demand. The `sc start` command initiates the RemoteAccess service.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_21\n\nLANGUAGE: batch\nCODE:\n```\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters /v IPEnableRouter /D 1 /t REG_DWORD /f\n\n```\n\nLANGUAGE: batch\nCODE:\n```\nsc config RemoteAccess start= demand\n\n```\n\nLANGUAGE: batch\nCODE:\n```\nsc start RemoteAccess\n```\n\n----------------------------------------\n\nTITLE: Passing CLI Options to mitmdump in Docker\nDESCRIPTION: This command demonstrates how to pass command-line options to mitmdump when running it within a Docker container. The --set ssl_insecure=true option disables SSL certificate verification. The --rm flag removes the container after it exits, and -it provides an interactive terminal.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/release/docker/DockerHub-README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run --rm -it -p 8080:8080 mitmproxy/mitmproxy mitmdump --set ssl_insecure=true\n```\n\n----------------------------------------\n\nTITLE: Restart dnsmasq (Ubuntu <= 14.04) - bash\nDESCRIPTION: This command restarts the dnsmasq service on Ubuntu 12.04 or 14.04. It's required to apply the changes made to the dnsmasq configuration file (**/etc/dnsmasq.conf**).\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo service dnsmasq restart\n```\n\n----------------------------------------\n\nTITLE: macOS Certificate Trust Command\nDESCRIPTION: This command uses the `security` tool on macOS to add the mitmproxy CA certificate to the system keychain and trust it for SSL and basic authentication. It allows macOS to trust certificates signed by the mitmproxy CA.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo security add-trusted-cert -d -p ssl -p basic -k /Library/Keychains/System.keychain ~/.mitmproxy/mitmproxy-ca-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Running mitmweb in Docker\nDESCRIPTION: This command runs mitmweb within a Docker container, mapping ports 8080 and 8081. Port 8080 is for the proxy, and 8081 is for the web interface. The mitmweb application is configured to listen on all interfaces (0.0.0.0). The --rm flag removes the container after it exits, and -it provides an interactive terminal.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/release/docker/DockerHub-README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run --rm -it -p 8080:8080 -p 127.0.0.1:8081:8081 mitmproxy/mitmproxy mitmweb --web-host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Start Android Emulator with writable system\nDESCRIPTION: Starts a specified Android Virtual Device (AVD) with the `-writable-system` option, allowing modifications to the system partition. This is crucial for installing the custom CA certificate. The `-show-kernel` option can be added for debugging kernel logs.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nemulator -avd <avd_name_here> -writable-system\n```\n\n----------------------------------------\n\nTITLE: Run mitmproxy in Transparent Mode (OpenBSD)\nDESCRIPTION: Starts mitmproxy in transparent mode with the `--showhost` option, listening on localhost. This allows mitmproxy to intercept redirected traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --mode transparent --listen-host 127.0.0.1 --showhost\n```\n\n----------------------------------------\n\nTITLE: OpenBSD Packet Filter Configuration\nDESCRIPTION: This configuration snippet uses OpenBSD's Packet Filter (pf) to redirect traffic to mitmproxy running in transparent mode. It defines rules to pass TCP traffic from any source to any destination on specified redirect ports, forwarding it to the tproxy address. It also includes a rule to route traffic destined for the redirect ports from users other than the tproxy user to the loopback interface.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nrdr pass proto tcp from any to any port $redir_ports -> $tproxy\npass out route-to (lo0 127.0.0.1) proto tcp from any to any port $redir_ports user { != $tproxy_user }\n\n# End the file with a blank newline\n```\n\n----------------------------------------\n\nTITLE: Modify Header Example: Set User-Agent from File\nDESCRIPTION: This example sets the 'User-Agent' header to the content read from the file '~/useragent.txt' for all requests. It assumes the file exists and contains the desired User-Agent string. Requires a valid file path and mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\n/~q/User-Agent/@~/useragent.txt\n```\n\n----------------------------------------\n\nTITLE: Enable pf (OpenBSD)\nDESCRIPTION: Enables the pf firewall, activating the configured rules. This is necessary for the firewall to start enforcing the specified rules.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndoas pfctl -e\n```\n\n----------------------------------------\n\nTITLE: Windows Certificate Installation Command\nDESCRIPTION: This command uses the `certutil` command-line tool to add the mitmproxy CA certificate to the Windows root certificate store, enabling Windows to trust certificates issued by the mitmproxy CA.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\ncertutil -addstore root mitmproxy-ca-cert.cer\n```\n\n----------------------------------------\n\nTITLE: Compile mitmproxy Shim for Full Transparency\nDESCRIPTION: This is the command to compile the C code that allows mitmproxy to run in full transparency mode while dropping root privileges. Requires libcap.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\ngcc examples/complex/full_transparency_shim.c -o mitmproxy_shim -lcap\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running mitmproxy with uv\nDESCRIPTION: This snippet demonstrates how to clone the mitmproxy repository, navigate to the directory, and run mitmproxy using uv, which automatically sets up a virtual environment and installs dependencies.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mitmproxy/mitmproxy.git\ncd mitmproxy\nuv run mitmproxy --version\n```\n\n----------------------------------------\n\nTITLE: Block ICMP Redirects in Windows Firewall\nDESCRIPTION: This command adds a rule to the Windows Advanced Firewall to block outgoing ICMP redirect messages. This prevents the test device from being informed of a shorter route that bypasses the proxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_22\n\nLANGUAGE: batch\nCODE:\n```\nnetsh advfirewall firewall add rule name=\"Don't send ICMP redirects\" dir=out protocol=icmpv4:5,any action=block\n```\n\n----------------------------------------\n\nTITLE: Running Mitmdump with Options Configuration (Bash)\nDESCRIPTION: This snippet shows how to run `mitmdump` (the command-line version of mitmproxy) and set an option value directly from the command line. If the provided option value is invalid, as defined by the addon's `configure` method, mitmdump will display an error message.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/options.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> mitmdump -s ./examples/addons/options-configure.py --set addheader=1000\n```\n\n----------------------------------------\n\nTITLE: Run mitmproxy as a Specific User\nDESCRIPTION: This command is used to run mitmproxy as a specific user (nobody) to avoid circular traffic redirection issues in transparent mode. The `--mode transparent` option enables transparent proxying, and the `--showhost` argument displays the Host header in the URL.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u nobody mitmproxy --mode transparent --showhost\n```\n\n----------------------------------------\n\nTITLE: Restart Network Manager (Ubuntu <= 14.04) - bash\nDESCRIPTION: This command restarts the NetworkManager service on Ubuntu 12.04 or 14.04. This is necessary after modifying the NetworkManager configuration file (**/etc/NetworkManager/NetworkManager.conf**) to disable the internal dnsmasq instance.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo restart network-manager\n```\n\n----------------------------------------\n\nTITLE: TUN Interface Mode with Custom Name\nDESCRIPTION: This command starts mitmproxy in TUN mode, specifying a custom interface name.  It requires root privileges (or CAP_NET_ADMIN).\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo mitmdump --mode tun:mitm-tun\n```\n\n----------------------------------------\n\nTITLE: Remount System Partition Read-Write\nDESCRIPTION: Remounts the `/system` partition as read-write, allowing modifications. This is a crucial step for copying the CA certificate to the system certificate store. The command might require multiple reboots in some cases.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadb remount\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks with tox\nDESCRIPTION: This snippet demonstrates how to run linting checks using tox to ensure code style consistency. Failure of these checks will block merging of pull requests.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nuv run tox -e lint\n```\n\n----------------------------------------\n\nTITLE: Push Certificate to System Store\nDESCRIPTION: Copies the renamed CA certificate to the `/system/etc/security/cacerts` directory on the Android emulator. This is the location where Android stores trusted system certificates. Requires ADB with root privileges and a writable system partition.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nadb push <path_to_certificate> /system/etc/security/cacerts\n```\n\n----------------------------------------\n\nTITLE: DNS Server Mode\nDESCRIPTION: This command starts mitmproxy as a DNS server, listening for DNS queries and resolving them using the operating system's capabilities.  Custom name servers can be specified, and the hosts file can be ignored.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmitmdump --mode dns\n```\n\n----------------------------------------\n\nTITLE: Activating Virtualenv (Windows)\nDESCRIPTION: This snippet shows how to activate the virtual environment created by uv on Windows systems, enabling the execution of mitmproxy commands such as mitmdump.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n.venv\\Scripts\\activate\nmitmdump --version\n```\n\n----------------------------------------\n\nTITLE: Requesting Client Certificate with mitmproxy (Bash)\nDESCRIPTION: This command instructs mitmproxy to request a client certificate from the connecting client and also specifies a client certificate to be used for connections to upstream servers. This configuration establishes an mTLS connection between the client and mitmproxy and also enables mitmproxy to use mTLS with upstream servers, using the specified client certificate.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --set request_client_cert=True --set client_certs=client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests with tox\nDESCRIPTION: This snippet demonstrates how to run the basic test suite for mitmproxy using tox, which is configured to execute various test environments defined in pyproject.toml.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv run tox\n```\n\n----------------------------------------\n\nTITLE: Install dnsmasq - bash\nDESCRIPTION: This command installs the dnsmasq package on the Ubuntu system. Dnsmasq is used to provide DHCP and DNS services within the internal network. This allows the proxied machine to automatically obtain an IP address and DNS server information.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install dnsmasq\n```\n\n----------------------------------------\n\nTITLE: Custom key bindings example in mitmproxy\nDESCRIPTION: This is an example of a custom key binding configuration in the `~/.mitmproxy/keys.yaml` file. It defines a sequence of maps, where each map represents a key binding.  The `key` field specifies the key to bind, `cmd` specifies the command to execute, `context` specifies the context in which the key binding applies, and `help` provides a help string.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/commands.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{< example src=\"examples/keys.yaml\" lang=\"yaml\" >}}\n```\n\n----------------------------------------\n\nTITLE: Start Live Compilation with npm\nDESCRIPTION: This command starts the live compilation process for the mitmproxy web interface. It typically uses a build tool like webpack or Parcel to automatically rebuild the project whenever changes are detected in the source code, facilitating rapid development and testing.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/web/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Explicit HTTP GET Request Example\nDESCRIPTION: Illustrates a standard HTTP GET request made through an explicit proxy.  The request includes the full URL, allowing the proxy to forward the request to the specified server. No dependencies are required.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/how-mitmproxy-works.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET http://example.com/index.html HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Enable IP Forwarding on OpenBSD (sysctl)\nDESCRIPTION: Enables IP forwarding on an OpenBSD system, allowing the machine to forward packets instead of rejecting them. This command needs to be executed to allow the machine to act as a router for the redirected traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w net.inet.ip.forwarding=1\n```\n\n----------------------------------------\n\nTITLE: Find Network Interfaces (ip link) - bash\nDESCRIPTION: This command is used to display the network interfaces configured on the Ubuntu system. It helps identify which interface is connected to the internet (e.g., eth0 or enp0s3) and which is connected to the internal network (e.g., eth1 or enp0s8). This information is crucial for subsequent network configuration steps.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nip link\n```\n\n----------------------------------------\n\nTITLE: Blocklist Pattern Example\nDESCRIPTION: This snippet illustrates the structure of a mitmproxy blocklist pattern.  It defines a flow-filter and a status code that mitmproxy will return when the filter matches. The separator character is arbitrary, defined by the first character used.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n/flow-filter/status-code\n```\n\n----------------------------------------\n\nTITLE: Map Local Pattern Example\nDESCRIPTION: This snippet shows the structure of a `map_local` pattern in mitmproxy. It can consist of a flow-filter, a URL regex, and a local path.  The separator character is arbitrary, defined by the first character used.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n|url-regex|local-path\n|flow-filter|url-regex|local-path\n```\n\n----------------------------------------\n\nTITLE: Enable IP Forwarding on macOS (sysctl)\nDESCRIPTION: Enables IP forwarding on a macOS system, allowing the machine to forward packets instead of rejecting them. This command needs to be executed to allow the machine to act as a router for the redirected traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w net.inet.ip.forwarding=1\n```\n\n----------------------------------------\n\nTITLE: Map Remote Pattern Example\nDESCRIPTION: This snippet demonstrates the structure of a mitmproxy `map_remote` pattern. It consists of a flow-filter (optional), a URL regex to match against, and a replacement string. The separator character is arbitrary, defined by the first character used.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n|flow-filter|url-regex|replacement\n|url-regex|replacement\n```\n\n----------------------------------------\n\nTITLE: Enable pf (macOS)\nDESCRIPTION: Enables the pf firewall, activating the configured rules. This is necessary for the firewall to start enforcing the specified rules.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo pfctl -e\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy with Specific Ports (Text)\nDESCRIPTION: Demonstrates how to run multiple reverse proxy servers on different ports using the `--mode` argument repeatedly.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmitmdump --mode reverse:https://example.com@80 --mode reverse:https://example.com@443\n```\n\n----------------------------------------\n\nTITLE: Load pf Configuration (macOS)\nDESCRIPTION: Loads the pf configuration file (pf.conf) using pfctl, configuring the firewall rules. This is required after making changes to the pf.conf file.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo pfctl -f pf.conf\n```\n\n----------------------------------------\n\nTITLE: Mitmproxy Custom Certificate for all domains\nDESCRIPTION: This command starts mitmproxy and configures it to use the custom certificate located at `cert.pem` for all domains. The asterisk (*) is used as a wildcard to match all domain names.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --certs *=cert.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Mitmproxy using Homebrew on macOS\nDESCRIPTION: This snippet installs mitmproxy on macOS using the Homebrew package manager. Homebrew simplifies the installation process by handling dependencies and configuration.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask mitmproxy\n```\n\n----------------------------------------\n\nTITLE: Configure sudoers for pfctl Access\nDESCRIPTION: Modifies the /etc/sudoers file to allow any user to run `/sbin/pfctl -s state` as root without a password. This is required for mitmproxy to inspect the state table.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nALL ALL=NOPASSWD: /sbin/pfctl -s state\n```\n\n----------------------------------------\n\nTITLE: Set Certificate Permissions\nDESCRIPTION: Sets the permissions of the pushed CA certificate in the `/system/etc/security/cacerts` directory to 664. This ensures that the certificate is readable by the system and has the correct security context.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nadb shell chmod 664 /system/etc/security/cacerts/<name_of_pushed_certificate>\n```\n\n----------------------------------------\n\nTITLE: Magisk Module Creation: module.prop\nDESCRIPTION: Defines the properties of the Magisk module, including its ID, name, version, author, and a short description. This file is crucial for Magisk to recognize and install the module correctly.  The example provided is a basic configuration.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nid=mitmproxycert\nname=MITM proxy certificate\nversion=1\nversionCode=1\nauthor=mitmproxycert\ndescription=My shiny MITM proxy certificate to reveal all secrets and obtain world domination!\n```\n\n----------------------------------------\n\nTITLE: Start mitmproxy in Transparent Mode on Windows\nDESCRIPTION: This command starts mitmproxy in transparent mode on Windows. The `--mode transparent` option activates transparent proxying, while `--showhost` uses the Host header for URL display.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_23\n\nLANGUAGE: batch\nCODE:\n```\nmitmproxy --mode transparent --showhost\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Path Argument (Bash)\nDESCRIPTION: This bash command demonstrates how to execute the command with a flow selector and file path argument using `:myaddon.histogram @all /tmp/xxx`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/commands.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n:myaddon.histogram @all /tmp/xxx\n```\n\n----------------------------------------\n\nTITLE: Disable Secure Boot Verification (avbctl)\nDESCRIPTION: Disables Android Verified Boot (AVB) verification.  This is necessary for modifying system partitions on some Android emulator versions and is a prerequisite for remounting the system partition as read-write.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nadb shell avbctl disable-verification\n```\n\n----------------------------------------\n\nTITLE: List Android Virtual Devices\nDESCRIPTION: Lists all available Android Virtual Devices (AVDs) configured in the Android Studio AVD Manager. This is a preliminary step to identify the target AVD for installing the CA certificate.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nemulator -list-avds\n```\n\n----------------------------------------\n\nTITLE: Mitmproxy: Observing Host and Port\nDESCRIPTION: This command demonstrates how to run mitmdump to observe the host:port information in the event log, which is necessary for creating accurate ignore patterns. The output shows client and server connection details, including the IP address and port.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/ignore-domains.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n>>> mitmdump\nProxy server listening at http://*:8080\n127.0.0.1:57089: client connect\n127.0.0.1:57089: server connect example.com:443 (93.184.216.34:443)\n127.0.0.1:57089: GET https://example.com/ HTTP/2.0\n     << HTTP/2.0 200 OK 1.23k\n127.0.0.1:57089: client disconnect\n127.0.0.1:57089: server disconnect example.com:443 (93.184.216.34:443)\n^C\n```\n\n----------------------------------------\n\nTITLE: Bumping Homebrew Cask (macOS)\nDESCRIPTION: This command is used to create a pull request to update the mitmproxy cask in Homebrew. It needs to be run from a macOS machine with Homebrew installed.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/release/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew bump-cask-pr mitmproxy\n```\n\n----------------------------------------\n\nTITLE: Executing the Simple Command (Bash)\nDESCRIPTION: This bash command shows how to start mitmproxy console with the simple command addon loaded and how to execute the command at the prompt using `:myaddon.inc`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/commands.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mitmproxy -s ./examples/addons/commands-simple.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n:myaddon.inc\n```\n\n----------------------------------------\n\nTITLE: Open recorded HTTP conversation in mitmproxy console (bash)\nDESCRIPTION: This command opens the recorded HTTP conversation in the mitmproxy console tool. The -r option specifies the input file for reviewing and editing the recorded traffic.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/tutorials/client-replay.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy -r wireless-login\n```\n\n----------------------------------------\n\nTITLE: Running mitmdump in Docker\nDESCRIPTION: This command runs mitmdump within a Docker container, mapping port 8080 from the container to the host. mitmdump is a command-line tool that captures and saves HTTP traffic. The --rm flag removes the container after it exits, and -it provides an interactive terminal.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/release/docker/DockerHub-README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run --rm -it -p 8080:8080 mitmproxy/mitmproxy mitmdump\n```\n\n----------------------------------------\n\nTITLE: Restart Network Manager (Ubuntu >= 16.04) - bash\nDESCRIPTION: This command restarts the NetworkManager service on Ubuntu 16.04 or newer. This is necessary after modifying the NetworkManager configuration file (**/etc/NetworkManager/NetworkManager.conf**) to disable the internal dnsmasq instance.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent-vms.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart NetworkManager\n```\n\n----------------------------------------\n\nTITLE: Compile and Run mitmproxy Shim for Dropped Privileges\nDESCRIPTION: These commands compile and execute a shim program that allows mitmproxy to run in full transparent mode with dropped privileges. It involves compiling a C program, setting ownership and permissions, and then running the shim with the mitmproxy command.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ngcc examples/complex/full_transparency_shim.c -o mitmproxy_shim -lcap\nsudo chown root:root mitmproxy_shim\nsudo chmod u+s mitmproxy_shim\n./mitmproxy_shim $(which mitmproxy) --mode transparent --set spoof-source-address\n```\n\n----------------------------------------\n\nTITLE: Deprecated Logging with ctx.log in mitmproxy\nDESCRIPTION: This snippet demonstrates the deprecated way of logging in mitmproxy using `mitmproxy.ctx.log`.  Addons should now use the standard Python logging module instead. This involves importing `ctx` from `mitmproxy` and calling the `log.info` method with the desired message.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/api-changelog.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mitmproxy import ctx\nctx.log.info(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Replacing GET String in Request Filter\nDESCRIPTION: This filter expression replaces the entire GET string in a request using a regular expression. It uses quotes to ensure the expression is treated as a single string and utilizes the \":~q ~m GET:.*:/replacement.html\" syntax for replacement.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/filters.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n\":~q ~m GET:.*:/replacement.html\"\n```\n\n----------------------------------------\n\nTITLE: Restart ADB as Root\nDESCRIPTION: Restarts the Android Debug Bridge (ADB) server with root privileges. This is required to perform system-level modifications, such as pushing the CA certificate to the `/system` partition.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nadb root\n```\n\n----------------------------------------\n\nTITLE: Load pf Configuration (OpenBSD)\nDESCRIPTION: Loads the pf configuration file (/etc/pf.conf) using pfctl, configuring the firewall rules. This is required after making changes to the pf.conf file.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/transparent.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndoas pfctl -f /etc/pf.conf\n```\n\n----------------------------------------\n\nTITLE: Update Request Port and Host Header in mitmproxy\nDESCRIPTION: This snippet describes the behavior of updating the `Request.port` attribute in mitmproxy.  When `Request.port` is modified, the Host header is also updated if it is present in the request. This aligns with the existing behavior of `Request.host`. No code is present, the description describes intended functionality.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Run Tests with npm\nDESCRIPTION: This command executes the test suite for the mitmproxy web interface. It runs the tests defined in the project's configuration, providing feedback on the correctness and stability of the code. It's essential to run tests before submitting changes.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/web/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Explicit HTTPS CONNECT Request with IP Example\nDESCRIPTION: Demonstrates an HTTP CONNECT request to a server using its IP address.  This requires mitmproxy to perform upstream certificate sniffing to determine the hostname. No dependencies are required.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/how-mitmproxy-works.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nCONNECT 10.1.1.1:443 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: `json()` method for HTTP request and responses\nDESCRIPTION: This adds a `json()` method to HTTP Request and Response instances which returns the decoded JSON body.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Client Replay with mitmdump (Bash)\nDESCRIPTION: This command replays HTTP requests from a previously saved file (outfile) without binding to the proxy port. The `-C` flag specifies the input file for client-side replay. The optional `-w` flag allows writing the resulting flows to another file for further analysis. This feature is useful for simulating client behavior and testing server responses.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/_index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -nC outfile\n```\n\n----------------------------------------\n\nTITLE: Loading the Contentview Addon in mitmproxy\nDESCRIPTION: This shell command demonstrates how to load a custom contentview addon in mitmproxy. The `-s` flag is used to specify the path to the Python script implementing the contentview. Mitmproxy will hot-reload the contentview when the file contents change.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/contentviews.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmitmproxy -s examples/addons/contentview.py\n```\n\n----------------------------------------\n\nTITLE: Streamed data saving example addon\nDESCRIPTION: This update includes an example addon that saves streamed data to individual files. This is an illustrative example, where the code is an example addon for mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Transparent HTTP GET Request Example\nDESCRIPTION: Presents an HTTP GET request as seen in a transparent proxy setup. It omits the schema and hostname, requiring the proxy to determine the original destination via platform-specific modules (e.g., iptables on Linux).\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/how-mitmproxy-works.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /index.html HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Making a Request Through the Mitmproxy Proxy (Bash)\nDESCRIPTION: This snippet demonstrates how to configure the `http_proxy` environment variable to route HTTP traffic through mitmproxy. The `curl` command is then used to make a request to `http://google.com` which will be intercepted by mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/options.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> env http_proxy=http://localhost:8080 curl -I http://google.com\n```\n\n----------------------------------------\n\nTITLE: GameCenter Score Submission URL\nDESCRIPTION: This URL is the endpoint to which the game submits the player's score. Intercepting this request allows for modification of the score before it reaches the GameCenter server.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/tutorials/highscores.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://service.gc.apple.com/WebObjects/GKGameStatsService.woa/wa/submitScore\n```\n\n----------------------------------------\n\nTITLE: Local Capture: Comma-Separated List (Shell)\nDESCRIPTION: Demonstrates how to specify multiple processes to include or exclude in local capture mode using a comma-separated list. Allows for intercepting only specified processes or everything but those processes.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmitmproxy --mode local:curl,wget    # Intercept cURL and wget only.\nmitmproxy --mode local:!curl,!wget  # Intercept everything but cURL and wget.\n```\n\n----------------------------------------\n\nTITLE: Modified GameCenter Score Submission XML\nDESCRIPTION: This XML snippet demonstrates a modified score submission, where the 'score-value' has been increased to a much larger number. Replaying this modified request will submit the inflated score to the GameCenter.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/tutorials/highscores.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plist version=\"1.0\">\n  <dict>\n    <key>scores</key>\n    <array>\n      <dict>\n        <key>category</key>\n        <string>SMW_Adv_USA1</string>\n        <key>context</key>\n        <integer>0</integer>\n        <key>score-value</key>\n        <integer>2200272667</integer>\n        <key>timestamp</key>\n        <integer>1363515361321</integer>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Running pytest on Specific Test Files\nDESCRIPTION: This snippet shows how to run pytest directly on individual test files or folders, allowing for faster and more focused testing. It includes coverage reporting and looponfail options.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd test/mitmproxy/addons\nuv run pytest --cov mitmproxy.addons.anticache --cov-report term-missing --looponfail test_anticache.py\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Certificate Installation\nDESCRIPTION: This command uses curl to access a website through the mitmproxy proxy and specifies the path to the mitmproxy CA certificate for verification. This allows curl to trust the certificates generated by mitmproxy for intercepted HTTPS connections.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proxy 127.0.0.1:8080 --cacert ~/.mitmproxy/mitmproxy-ca-cert.pem https://example.com/\n```\n\n----------------------------------------\n\nTITLE: Replaying a specific flow using the @focus specifier in mitmproxy\nDESCRIPTION: This command replays the currently focused flow using the `replay.client` command and the `@focus` flow specifier. The `@focus` specifier expands to the currently focused flow, causing it to be replayed. This command needs to be executed within the mitmproxy console.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/commands.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n:replay.client @focus\n```\n\n----------------------------------------\n\nTITLE: Reboot Android Device\nDESCRIPTION: Reboots the Android device (emulator) after making system-level changes. This ensures that the changes are applied and the device boots with the modified configuration. Often performed after disabling AVB or remounting partitions.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nadb reboot\n```\n\n----------------------------------------\n\nTITLE: Replaying all flows in mitmproxy\nDESCRIPTION: This command replays all flows using the `replay.client` command and the `@all` flow specifier. The `@all` specifier expands to all available flows, causing them to be replayed one by one. This command needs to be executed within the mitmproxy console.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/commands.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n:replay.client @all\n```\n\n----------------------------------------\n\nTITLE: Flow marking with emoji and filters\nDESCRIPTION: The `flow.mark` command can now mark flows with either the default \"red ball\" marker, a single character, or an emoji. The `~marker` filter is added to filter flows based on marker characters.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Wget Command for Certificate Installation\nDESCRIPTION: This command uses wget to access a website through the mitmproxy proxy and specifies the path to the mitmproxy CA certificate for verification. This allows wget to trust the certificates generated by mitmproxy for intercepted HTTPS connections.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -e https_proxy=127.0.0.1:8080 --ca-certificate ~/.mitmproxy/mitmproxy-ca-cert.pem https://example.com/\n```\n\n----------------------------------------\n\nTITLE: Flow commenting feature\nDESCRIPTION: This introduces a new `flow.comment` command to add comments to flows. The `~comment <regex>` filter syntax is added to search flow comments.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Install Dependencies with npm\nDESCRIPTION: This command installs the necessary Node.js dependencies for the mitmproxy web interface project. It reads the `package.json` file in the current directory and downloads all listed modules and their dependencies from the npm registry.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/web/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Modifying Headers using `--modify-headers`\nDESCRIPTION: This fixes an issue where modifying headers using the `--modify-headers` option would not work correctly when the header was also part of the filter expression.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Format Code with Prettier\nDESCRIPTION: This command formats the code in the mitmproxy web interface project using Prettier. It automatically adjusts the code style to conform to the project's coding standards, improving readability and consistency. This command should be run before committing code changes.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/web/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prettier\n```\n\n----------------------------------------\n\nTITLE: Set Android SDK paths in .bashrc\nDESCRIPTION: This snippet shows how to add the Android SDK emulator and platform-tools directories to the $PATH environment variable. This allows the `emulator` and `adb` commands to be run from any terminal location.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/howto/install-system-trusted-ca-android.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:$HOME/Android/Sdk/platform-tools\nexport PATH=$PATH:$HOME/Android/Sdk/emulator\n```\n\n----------------------------------------\n\nTITLE: Adding `export_preserve_original_ip` option\nDESCRIPTION: This adds the `export_preserve_original_ip` option, allowing the exported command to connect to the IP address from the original request. Currently, this is only supported for curl.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Original GameCenter Score Submission XML\nDESCRIPTION: This XML snippet shows the original format of the score submission to Apple's GameCenter. The 'score-value' key holds the player's score which can be modified.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/tutorials/highscores.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plist version=\"1.0\">\n  <dict>\n    <key>scores</key>\n    <array>\n      <dict>\n        <key>category</key>\n        <string>SMW_Adv_USA1</string>\n        <key>context</key>\n        <integer>0</integer>\n        <key>score-value</key>\n        <integer>55</integer>\n        <key>timestamp</key>\n        <integer>1363515361321</integer>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Change http-reply-from-proxy.py example wording in mitmproxy\nDESCRIPTION: This entry refers to a change in wording within the `http-reply-from-proxy.py` example provided in the mitmproxy project. The change aims to improve the clarity or correctness of the example.  No code is present, the description describes a change in documentation.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: TUN Mode in Docker Container\nDESCRIPTION: This docker command shows how to run mitmproxy in TUN mode inside a docker container. It requires `--privileged` and `--network host` options.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --privileged --network host mitmproxy/mitmproxy bash -c \"mitmdump --mode tun\"\n```\n\n----------------------------------------\n\nTITLE: Activating Virtualenv (Linux/macOS)\nDESCRIPTION: This snippet shows how to activate the virtual environment created by uv on Linux and macOS systems, allowing direct execution of mitmproxy commands like mitmdump.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource .venv/bin/activate\nmitmdump --version\n```\n\n----------------------------------------\n\nTITLE: Modify Body Regex Replacement Example\nDESCRIPTION: This example demonstrates how to replace 'foo' with 'bar' in the bodies of requests using the mitmproxy command-line interface.  The `~q` filter specifies that the replacement only applies to requests. This requires mitmproxy to be installed and accessible in the terminal.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n/~q/foo/bar\n```\n\n----------------------------------------\n\nTITLE: Request Body Containing \"test\" Filter\nDESCRIPTION: This filter expression matches requests whose body contains the string \"test\". It uses the ~q and ~b operators to specify that the match should occur within the request body.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/filters.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n~q ~b test\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocketMessage.injected Flag\nDESCRIPTION: This change introduces a new `injected` flag to the `WebSocketMessage` object. This flag allows developers to identify WebSocket messages that were injected or modified by mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Running a Script with mitmdump (Bash)\nDESCRIPTION: This command executes a Python script (add_header.py) using mitmdump. The `-s` flag specifies the script to be run. This allows for programmatic modification of HTTP traffic. The script should be located in the examples/simple/ directory, which comes standard with mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/_index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmitmdump -s examples/simple/add_header.py\n```\n\n----------------------------------------\n\nTITLE: Java Certificate Import Command\nDESCRIPTION: This command uses the `keytool` utility to import the mitmproxy CA certificate into the Java cacerts keystore. This allows Java applications to trust the certificates generated by mitmproxy for intercepted HTTPS connections. The default password for cacerts is 'changeit'.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/certificates.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo keytool -importcert -alias mitmproxy -storepass changeit -keystore $JAVA_HOME/lib/security/cacerts -trustcacerts -file ~/.mitmproxy/mitmproxy-ca-cert.pem\n```\n\n----------------------------------------\n\nTITLE: TUN Interface Mode\nDESCRIPTION: This command creates a virtual network interface and redirects traffic to it for interception by mitmproxy. It requires root privileges and manual configuration of the routing table. Usage with containers requires `--privileged` and `--network host`.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/modes.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo mitmdump --mode tun\n```\n\n----------------------------------------\n\nTITLE: Running Mitmproxy Addon using mitmdump in Bash\nDESCRIPTION: This command demonstrates how to run a mitmproxy addon using mitmdump.  The `-s` flag specifies the path to the Python script containing the addon.  The script's functionality will be integrated into mitmdump's behavior.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/addons/overview.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmitmdump -s ./anatomy.py\n```\n\n----------------------------------------\n\nTITLE: Setting Options via Command Line\nDESCRIPTION: This snippet demonstrates how to set mitmproxy options directly from the command line using the `--set` flag.  Options are set by name and value. Multiple `--set` flags can be used to set multiple options.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/concepts/options.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy --set anticomp=true\nmitmweb --set ignore_hosts=example.com --set ignore_hosts=example.org\n```\n\n----------------------------------------\n\nTITLE: HTTP Streaming: Customizing with Script\nDESCRIPTION: This example showcases how to use a script to customize HTTP streaming by setting the `.stream` attribute of requests/responses to `True`. This requires writing and integrating a Python script with mitmproxy.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n{{< example src=\"examples/addons/http-stream-simple.py\" lang=\"py\" >}}\n```\n\n----------------------------------------\n\nTITLE: Modify Header Example: Remove Host Header\nDESCRIPTION: This example demonstrates removing the 'Host' header from all requests. The empty value after the header name indicates removal. Requires mitmproxy installation.\nSOURCE: https://github.com/mitmproxy/mitmproxy/blob/main/docs/src/content/overview/features.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n/~q/Host/\n```"
  }
]