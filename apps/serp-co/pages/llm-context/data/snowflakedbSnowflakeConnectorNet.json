[
  {
    "owner": "snowflakedb",
    "repo": "snowflake-connector-net",
    "content": "TITLE: Connecting to Snowflake with Connection String Syntax\nDESCRIPTION: Demonstrates the syntax format for creating a Snowflake connection string. Connection strings consist of key-value pairs separated by semicolons, with values containing special characters requiring double quotation marks.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"<key1>=<value1>;<key2>=<value2>...\"\n```\n\nLANGUAGE: text\nCODE:\n```\npassword=\"=;;;=dummy==password;;\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Snowflake with Password Authentication in C#\nDESCRIPTION: Demonstrates how to open a connection to Snowflake using password-based authentication. This example shows the basic pattern for creating a connection, opening it, and ensuring proper disposal with a using statement.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;user=testuser;password=XXXXX;db=testdb;schema=testschema\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Snowflake.Data Package\nDESCRIPTION: NuGet Package Manager Console command to install the Snowflake.Data package.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPM> Install-Package Snowflake.Data\n```\n\n----------------------------------------\n\nTITLE: Executing a Query and Reading Data with Snowflake .NET Connector\nDESCRIPTION: This snippet demonstrates how to establish a connection to Snowflake, execute a query, and read the results using the Snowflake .NET connector. It shows the basic pattern of opening a connection, creating and executing a command, and processing the results.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = connectionString;\n    conn.Open();\n\n    IDbCommand cmd = conn.CreateCommand();\n    cmd.CommandText = \"select * from t\";\n    IDataReader reader = cmd.ExecuteReader();\n\n    while(reader.Read())\n    {\n        Console.WriteLine(reader.GetString(0));\n    }\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Parameter for Multi-Statement Support\nDESCRIPTION: This snippet demonstrates how to set the MULTI_STATEMENT_COUNT session parameter, which controls how Snowflake handles multiple SQL statements in a single request. By default, this is set to 1 to protect against SQL injection attacks.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nALTER SESSION SET MULTI_STATEMENT_COUNT = <0/1>;\n```\n\n----------------------------------------\n\nTITLE: Using Bound Parameters with Snowflake .NET Connector\nDESCRIPTION: This example demonstrates how to use parameter binding with Snowflake .NET connector. It shows how different C# data types (Int32, Int64, Int16) can be bound to Snowflake's INTEGER column type. The example creates a table, inserts three rows with bound parameters, and then drops the table.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = connectionString;\n    conn.Open();\n\n    IDbCommand cmd = conn.CreateCommand();\n    cmd.CommandText = \"create or replace table T(cola int)\";\n    int count = cmd.ExecuteNonQuery();\n    Assert.AreEqual(0, count);\n\n    IDbCommand cmd = conn.CreateCommand();\n    cmd.CommandText = \"insert into t values (?), (?), (?)\";\n\n    var p1 = cmd.CreateParameter();\n    p1.ParameterName = \"1\";\n    p1.Value = 10;\n    p1.DbType = DbType.Int32;\n    cmd.Parameters.Add(p1);\n\n    var p2 = cmd.CreateParameter();\n    p2.ParameterName = \"2\";\n    p2.Value = 10000L;\n    p2.DbType = DbType.Int32;\n    cmd.Parameters.Add(p2);\n\n    var p3 = cmd.CreateParameter();\n    p3.ParameterName = \"3\";\n    p3.Value = (short)1;\n    p3.DbType = DbType.Int16;\n    cmd.Parameters.Add(p3);\n\n    var count = cmd.ExecuteNonQuery();\n    Assert.AreEqual(3, count);\n\n    cmd.CommandText = \"drop table if exists T\";\n    count = cmd.ExecuteNonQuery();\n    Assert.AreEqual(0, count);\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows with Array Binding in Snowflake .NET\nDESCRIPTION: This snippet demonstrates how to use array binding to efficiently insert multiple rows (70,000 integers) into a Snowflake table in a single operation using the Snowflake .NET connector.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n\tconn.ConnectionString = ConnectionString;\n\tconn.Open();\n\n\tusing (IDbCommand cmd = conn.CreateCommand())\n\t{\n\t\tcmd.CommandText = \"create or replace table putArrayBind(colA integer)\";\n\t\tcmd.ExecuteNonQuery();\n\n\t\tstring insertCommand = \"insert into putArrayBind values (?)\";\n\t\tcmd.CommandText = insertCommand;\n\n\t\tint total = 70000;\n\n\t\tList<int> arrint = new List<int>();\n\t\tfor (int i = 0; i < total; i++)\n\t\t{\n\t\t\tarrint.Add(i);\n\t\t}\n\t\tvar p1 = cmd.CreateParameter();\n\t\tp1.ParameterName = \"1\";\n\t\tp1.DbType = DbType.Int16;\n\t\tp1.Value = arrint.ToArray();\n\t\tcmd.Parameters.Add(p1);\n\n\t\tcount = cmd.ExecuteNonQuery(); // count = 70000\n\t}\n\n\tconn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Maximum Pool Size in Snowflake .NET Connector\nDESCRIPTION: Demonstrates how connection requests are queued when the maximum pool size is reached. The example creates 8 tasks that each try to open a connection with a pool limit of 2, showing how connection requests wait for available connections to be returned to the pool.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";MaxPoolSize=2\";\n\nTask[] tasks = new Task[8];\nfor (int i = 0; i < tasks.Length; i++)\n{\n    var taskName = $\"Task {i}\";\n    tasks[i] = Task.Run(() =>\n    {\n        using (var connection = new SnowflakeDbConnection(connectionString))\n        {\n            StopWatch sw = new StopWatch();\n\n            // register opening time\n            sw.Start();\n            connection.Open();\n            sw.Stop();\n\n            // output\n            Console.WriteLine($\"{taskName} waited {Math.Round((double)sw.ElapsedMilliseconds / 1000)} seconds\");\n\n            // wait 2s before closing the connection\n            Thread.Sleep(2000);\n        }\n    });\n}\nTask.WaitAll(tasks);\n\n// check current pool size\nvar poolSize = SnowflakeDbConnectionPool.GetPool(connectionString).GetCurrentPoolSize();\nAssert.AreEqual(2, poolSize);\n\n// output:\n// Task 1 waited 0 seconds\n// Task 4 waited 0 seconds\n// Task 7 waited 2 seconds\n// Task 0 waited 2 seconds\n// Task 6 waited 4 seconds\n// Task 3 waited 4 seconds\n// Task 2 waited 6 seconds\n// Task 5 waited 6 seconds\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with PUT Command in Snowflake .NET Connector\nDESCRIPTION: Demonstrates how to use the PUT command to upload local files to Snowflake stages. The example shows connection setup, command execution, and error handling including accessing the QueryId for tracking purposes. The command supports named stages, internal table stages, and user stages.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StageFiles.md#2025-04-17_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    try\n    {\n\t    conn.ConnectionString = \"<connection parameters>\";\n\t    conn.Open();\n\t    var cmd = (SnowflakeDbCommand)conn.CreateCommand(); // cast allows get QueryId from the command\n\n\t    cmd.CommandText = \"PUT file://some_data.csv @my_schema.my_stage AUTO_COMPRESS=TRUE\";\n\t    var reader = cmd.ExecuteReader();\n\t    Assert.IsTrue(reader.read());\n        Assert.DoesNotThrow(() => Guid.Parse(cmd.GetQueryId()));\n    }\n    catch (SnowflakeDbException e)\n    {\n        Assert.DoesNotThrow(() => Guid.Parse(e.QueryId)); // when failed\n        Assert.That(e.InnerException.GetType(), Is.EqualTo(typeof(FileNotFoundException)));\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing a Query Asynchronously on Snowflake Server (Asynchronous Client Code)\nDESCRIPTION: This example shows how to start a query to be executed asynchronously on the Snowflake server using asynchronous client code with C# async/await pattern. It opens the connection asynchronously and executes the command using the asynchronous execution mode.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (SnowflakeDbConnection conn = new SnowflakeDbConnection(\"account=testaccount;username=testusername;password=testpassword\"))\n{\n      await conn.OpenAsync(CancellationToken.None).ConfigureAwait(false);\n      SnowflakeDbCommand cmd = (SnowflakeDbCommand)conn.CreateCommand())\n      cmd.CommandText = \"SELECT ...\";\n      var queryId = await cmd.ExecuteAsyncInAsyncMode(CancellationToken.None).ConfigureAwait(false);\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with GET Command in Snowflake .NET Connector\nDESCRIPTION: Shows how to use the GET command to download files from Snowflake stages to local directories. The example includes connection setup, command execution, and proper error handling. The command works with named stages, table internal stages, and user stages.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StageFiles.md#2025-04-17_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    try\n    {\n\t    conn.ConnectionString = \"<connection parameters>\";\n\t    conn.Open();\n\t    var cmd = (SnowflakeDbCommand)conn.CreateCommand(); // cast allows get QueryId from the command\n\n\t    cmd.CommandText = \"GET @my_schema.my_stage/stage_file.csv file://local_file.csv AUTO_COMPRESS=TRUE\";\n\t    var reader = cmd.ExecuteReader();\n\t    Assert.IsTrue(reader.read()); // True on success, False if failure\n        Assert.DoesNotThrow(() => Guid.Parse(cmd.GetQueryId()));\n    }\n    catch (SnowflakeDbException e)\n    {\n        Assert.DoesNotThrow(() => Guid.Parse(e.QueryId)); // on failure\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Arrow Data Format in Snowflake for .NET Connector\nDESCRIPTION: Commands to enable the Arrow data format at different levels (session, user, or account) for the Snowflake .NET connector. Arrow format can improve performance and reduce memory consumption compared to the default JSON format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/DataTypes.md#2025-04-17_snippet_0\n\nLANGUAGE: snowflake\nCODE:\n```\n-- at the session level\nALTER SESSION SET DOTNET_QUERY_RESULT_FORMAT = ARROW;\n-- or at the user level\nALTER USER SET DOTNET_QUERY_RESULT_FORMAT = ARROW;\n-- or at the account level\nALTER ACCOUNT SET DOTNET_QUERY_RESULT_FORMAT = ARROW;\n```\n\n----------------------------------------\n\nTITLE: Connecting with Browser-based SSO in C#\nDESCRIPTION: Establishes a Snowflake connection using browser-based SSO authentication.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;authenticator=externalbrowser;user={login_name_for_IdP};db=testdb;schema=testschema\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: OriginalPool Mode for Changed Session Handling in Snowflake .NET\nDESCRIPTION: Demonstrates the 'OriginalPool' mode which allows changed connections to be returned to the original pool despite modifications to schema, database, warehouse or role. This mode requires careful handling as it may lead to SQL syntax errors if not managed properly.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";ChangedSession=OriginalPool;MinPoolSize=1;MaxPoolSize=1\";\nvar connection = new SnowflakeDbConnection(connectionString);\n\nconnection.Open();\nvar randomSchemaName = Guid.NewGuid();\nconnection.CreateCommand($\"create schema \\\"{randomSchemaName}\\\").ExecuteNonQuery(); // schema gets changed\n// application is running commands on a schema with random name\nconnection.Close(); // connection returns to the original pool but it's schema will no longer match with initial value\n\nvar connection2 = new SnowflakeDbConnection(connectionString);\nconnection2.Open();\n// operations here will be performed against schema: randomSchemaName\n```\n\n----------------------------------------\n\nTITLE: Reading Structured Object in C# with Snowflake .NET Connector\nDESCRIPTION: C# code snippet demonstrating how to read a structured object from a Snowflake query result into a custom C# class using the GetObject<T> method.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar reader = (SnowflakeDbDataReader) command.ExecuteReader();\nAssert.IsTrue(reader.Read());\nvar address = reader.GetObject<Address>(0);\n```\n\n----------------------------------------\n\nTITLE: Connecting through Proxy Server in C#\nDESCRIPTION: Establishes a Snowflake connection through a proxy server with authentication.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;user=testuser;password=XXXXX;db=testdb;schema=testschema;useProxy=true;proxyHost=myproxyserver;proxyPort=8888;proxyUser=test;proxyPassword=test\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Statements in a Batch with Snowflake .NET Connector\nDESCRIPTION: This example shows how to execute multiple SQL statements in a single batch request. It first sets MULTI_STATEMENT_COUNT to 1 at the session level, then specifies that exactly 3 statements will be executed in the batch, and processes the results using NextResult() to navigate between result sets.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n\tconn.ConnectionString = ConnectionString;\n\tconn.Open();\n\tIDbCommand cmd = conn.CreateCommand();\n\tcmd.CommandText = \"ALTER SESSION SET MULTI_STATEMENT_COUNT = 1;\";\n\tcmd.ExecuteNonQuery();\n\tconn.Close();\n}\n\nusing (DbCommand cmd = conn.CreateCommand())\n{\n    // Set statement count\n    var stmtCountParam = cmd.CreateParameter();\n    stmtCountParam.ParameterName = \"MULTI_STATEMENT_COUNT\";\n    stmtCountParam.DbType = DbType.Int16;\n    stmtCountParam.Value = 3;\n    cmd.Parameters.Add(stmtCountParam);\n    cmd.CommandText = \"CREATE OR REPLACE TABLE test(n int); INSERT INTO test values(1), (2); SELECT * FROM test ORDER BY n;\n    DbDataReader reader = cmd.ExecuteReader();\n    do\n    {\n        if (reader.HasRow)\n        {\n            while (reader.Read())\n            {\n                // read data\n            }\n        }\n    }\n    while (reader.NextResult());\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Vector Data Types in Snowflake .NET Connector\nDESCRIPTION: Demonstrates how to read Vector columns from Snowflake into strongly-typed arrays in C#. The example shows reading both integer and float vector types using the SnowflakeDbDataReader.GetArray<T>() method with the appropriate type parameter.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/VectorType.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar reader = (SnowflakeDbDataReader) command.ExecuteReader();\nAssert.IsTrue(reader.Read());\nint[] intVector = reader.GetArray<int>(0);\nfloat[] floatVector = reader.GetArray<float>(1);\n```\n\n----------------------------------------\n\nTITLE: Connecting with Encrypted Private Key File in C#\nDESCRIPTION: Establishes a Snowflake connection using an encrypted private key file with password for JWT authentication.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;authenticator=snowflake_jwt;user=testuser;private_key_file={pathToThePrivateKeyFile};private_key_pwd={passwordForDecryptingThePrivateKey};db=testdb;schema=testschema\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Query Asynchronously on Snowflake Server (Synchronous Client Code)\nDESCRIPTION: This example demonstrates how to start a query to be executed asynchronously on the Snowflake server using synchronous client code. The server responds with a queryId that can be used to check status or retrieve results later, even in a different session.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (SnowflakeDbConnection conn = new SnowflakeDbConnection(\"account=testaccount;username=testusername;password=testpassword\"))\n{\n      conn.Open();\n      SnowflakeDbCommand cmd = (SnowflakeDbCommand)conn.CreateCommand();\n      cmd.CommandText = \"SELECT ...\";\n      var queryId = cmd.ExecuteInAsyncMode();\n      // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting with Unencrypted Private Key File in C#\nDESCRIPTION: Establishes a Snowflake connection using an unencrypted private key file for JWT authentication. Requires path to private key file.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;authenticator=snowflake_jwt;user=testuser;private_key_file={pathToThePrivateKeyFile};db=testdb;schema=testschema\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Results from Asynchronously Executed Queries\nDESCRIPTION: These examples show how to retrieve results from a query that was executed asynchronously on the Snowflake server. The synchronous and asynchronous methods will repeatedly check query status until completion, timeout, or reaching the maximum attempts.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nDbDataReader reader = cmd.GetResultsFromQueryId(queryId);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nDbDataReader reader = await cmd.GetResultsFromQueryIdAsync(queryId, CancellationToken.None).ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Reading Connection from Configuration File in C#\nDESCRIPTION: Establishes a Snowflake connection using credentials from the TOML configuration file.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.Open(); // Reads connection definition from configuration file.\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Size of All Connection Pools in Snowflake .NET Connector\nDESCRIPTION: Code to get the total number of connections across all connection pools in the application. This example creates two pools with different minimum sizes and then checks the combined size.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\nvar pool1 = SnowflakeDbConnectionPool.GetPool(connectionString + \";MinPoolSize=2\");\nvar pool2 = SnowflakeDbConnectionPool.GetPool(connectionString + \";MinPoolSize=3\");\nvar poolsSize = SnowflakeDbConnectionPool.GetCurrentPoolSize();\nAssert.AreEqual(5, poolSize);\n```\n\n----------------------------------------\n\nTITLE: Checking Query Status for Asynchronous Execution (Synchronous)\nDESCRIPTION: This snippet demonstrates how to check the status of a query that was executed asynchronously on the Snowflake server using synchronous code. It verifies whether the query is still running and if any errors have occurred.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar queryStatus = cmd.GetQueryStatus(queryId);\nAssert.IsTrue(conn.IsStillRunning(queryStatus)); // assuming that the query is still running\nAssert.IsFalse(conn.IsAnError(queryStatus)); // assuming that the query has not finished with error\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Timeout in Snowflake .NET Connector\nDESCRIPTION: Shows how to set the overall timeout for establishing a connection to Snowflake. This parameter specifies the maximum time (in seconds) to wait for a connection to be established before timing out.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";connection_timeout=160\";\nusing (var connection = new SnowflakeDbConnection(connectionString))\n{\n    connection.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Connection Pools in Snowflake .NET Connector\nDESCRIPTION: Code to clear all connection pools created by the application. This releases all connections except for the minimum number specified by MinPoolSize for each pool.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\nSnowflakeDbConnectionPool.ClearAllPools();\n```\n\n----------------------------------------\n\nTITLE: Closing Snowflake Connection Asynchronously in C#\nDESCRIPTION: This snippet demonstrates how to close a Snowflake database connection asynchronously using the CloseAsync method. It requires casting the connection to SnowflakeDbConnection and uses a CancellationToken for potential cancellation.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Disconnecting.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nCancellationTokenSource cancellationTokenSource  = new CancellationTokenSource();\n// Close the connection\n((SnowflakeDbConnection)conn).CloseAsync(cancellationTokenSource.Token);\n```\n\n----------------------------------------\n\nTITLE: Configuring log4net for Snowflake Connector in app.config\nDESCRIPTION: Sample app.config file configuration for log4net used by the Snowflake Connector for .NET. It sets up a rolling file appender that creates log files up to 10MB in size with a specific formatting pattern.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Logging.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <configSections>\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"/>\n  </configSections>\n\n  <log4net>\n    <appender name=\"MyRollingFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <file value=\"snowflake_dotnet.log\" />\n      <appendToFile value=\"true\"/>\n      <rollingStyle value=\"Size\" />\n      <maximumFileSize value=\"10MB\" />\n      <staticLogFileName value=\"true\" />\n      <maxSizeRollBackups value=\"10\" />\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <!-- <header value=\"[DateTime]  [Thread]  [Level]  [ClassName] Message&#13;&#10;\" /> -->\n        <conversionPattern value=\"[%date] [%t] [%-5level] [%logger] %message%newline\" />\n      </layout>\n    </appender>\n\n    <root>\n      <level value=\"ALL\" />\n      <appender-ref ref=\"MyRollingFileAppender\" />\n    </root>\n  </log4net>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Connection Pools in C#\nDESCRIPTION: Shows how to create multiple connection pools by using different connection strings. Each unique connection string creates a separate pool.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var connection = new SnowflakeDbConnection(ConnectionString + \";application=App1\"))\n{\n    connection.Open();\n    // Pool 1 is created\n}\n\nusing (var connection = new SnowflakeDbConnection(ConnectionString + \";application=App2\"))\n{\n    connection.Open();\n    // Pool 2 is created\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameters for Snowflake .NET Connector Tests (JSON)\nDESCRIPTION: Sample parameters.json file that must be created in the Snowflake.Data.Tests directory before running tests. This configuration includes credentials and connection details for the Snowflake account that tests will run against.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Testing.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"testconnection\": {\n    \"SNOWFLAKE_TEST_USER\": \"snowman\",\n    \"SNOWFLAKE_TEST_PASSWORD\": \"XXXXXXX\",\n    \"SNOWFLAKE_TEST_ACCOUNT\": \"TESTACCOUNT\",\n    \"SNOWFLAKE_TEST_WAREHOUSE\": \"TESTWH\",\n    \"SNOWFLAKE_TEST_DATABASE\": \"TESTDB\",\n    \"SNOWFLAKE_TEST_SCHEMA\": \"TESTSCHEMA\",\n    \"SNOWFLAKE_TEST_ROLE\": \"TESTROLE\",\n    \"SNOWFLAKE_TEST_HOST\": \"testaccount.snowflakecomputing.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Pool Size in C#\nDESCRIPTION: Demonstrates how to set the minimum pool size using a connection string parameter. The pool is created with the specified minimum size, and the current pool size is verified.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar connectionString = ConnectionString + \";MinPoolSize=10\";\nusing (var connection = new SnowflakeDbConnection(connectionString))\n{\n    connection.Open();\n    // Pool of size 10 is created\n}\nvar poolSize = SnowflakeDbConnectionPool.GetPool(connectionString).GetCurrentPoolSize();\nAssert.AreEqual(10, poolSize);\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Extracting CRL Endpoints from Certificate Chain\nDESCRIPTION: A shell script that uses OpenSSL to retrieve the certificate chain for a Snowflake endpoint and extract the CRL distribution points from each certificate in the chain.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CertficateValidation.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport hostname=\"myaccount.eu-central-1.snowflakecomputing.com\"\necho | openssl s_client -showcerts -connect \"$hostname\":443 -servername \"$hostname\" 2>/dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; out=\"cert\"a\".pem\"; print >out}'; for cert in cert*.pem; do echo \"--> $cert\"; openssl x509 -text -in $cert | grep -A4 \"X509v3 CRL Distribution Points\" ; echo; done\n```\n\n----------------------------------------\n\nTITLE: Reading Structured Array in C# with Snowflake .NET Connector\nDESCRIPTION: C# code snippet demonstrating how to read a structured array from a Snowflake query result using the GetArray<T> method.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar reader = (SnowflakeDbDataReader) command.ExecuteReader();\nAssert.IsTrue(reader.Read());\nvar array = reader.GetArray<string>(0);\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Checking CRL Endpoints in Windows\nDESCRIPTION: A PowerShell script that retrieves the certificate chain for a Snowflake account and extracts the CRL distribution points without requiring additional tools on Windows systems.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CertficateValidation.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nif ( $($args.Count) -ne 1 ) {\n\tWrite-Output \"Please use the full name of your Snowflake account as an argument.\"\n\tWrite-Output \"Example: powershell .\\checkCrl.ps1 xy12345.eu-central-1.snowflakecomputing.com\"\n\texit 1\n}\n$sfaccount = $args[0]  \n$Connection = [System.Net.HttpWebRequest]::Create('https://' + $sfaccount)  \n$Response = $Connection.GetResponse()  \n$Response.Dispose()  \n$Certificate = $Connection.ServicePoint.Certificate  \n$Chain = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Chain  \n$Chain.build($Certificate)  \n$Chain.ChainElements.Certificate | % {set-content -value $($_.Export([Security.Cryptography.X509Certificates.X509ContentType]::Cert)) -encoding byte -path \"$pwd\\$($_.Thumbprint).sf.cer\"}  \nGet-ChildItem *.sf.cer | ForEach-Object { certutil $_ | Select-String -Pattern \"Subject:\" -Context 1 ; certutil $_ | Select-String -Pattern \"Distribution Point Name\" -Context 2 }\nRemove-Item *.sf.cer\n```\n\n----------------------------------------\n\nTITLE: Connecting with OAuth Token in C#\nDESCRIPTION: Establishes a Snowflake connection using OAuth authentication with a provided token.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;user=testuser;authenticator=oauth;token={oauthTokenValue};db=testdb;schema=testschema\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Structured Map in C# with Snowflake .NET Connector\nDESCRIPTION: C# code snippet demonstrating how to read a structured map from a Snowflake query result using the GetMap<TKey, TValue> method.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar reader = (SnowflakeDbDataReader) command.ExecuteReader();\nAssert.IsTrue(reader.Read());\nvar map = reader.GetMap<int, string>(0);\n```\n\n----------------------------------------\n\nTITLE: Verifying CRL Endpoint Connectivity Using curl\nDESCRIPTION: Example commands using curl to verify connectivity to CRL endpoints, both directly and through a proxy, which is important for ensuring the .NET driver can access revocation information.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CertficateValidation.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -O http://crl.pki.goog/gsr1/gsr1.crl\n# same with using a proxy:\ncurl -x \"http://@my.pro.xy:8080\" http://crl.pki.goog/gsr1/gsr1.crl\n```\n\n----------------------------------------\n\nTITLE: Connecting with Okta Native SSO in C#\nDESCRIPTION: Establishes a Snowflake connection using Okta native SSO authentication.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nusing (IDbConnection conn = new SnowflakeDbConnection())\n{\n    conn.ConnectionString = \"account=testaccount;authenticator={okta_url_endpoint};user={login_name_for_IdP};db=testdb;schema=testschema\";\n\n    conn.Open();\n\n    conn.Close();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CRL Endpoint Connectivity Using wget\nDESCRIPTION: Example commands using wget to verify connectivity to CRL endpoints, both directly and through a proxy, which is important for ensuring the .NET driver can access revocation information.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CertficateValidation.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwget http://crl.pki.goog/gsr1/gsr1.crl\n# same with using a proxy:\nwget -e http_proxy=my.pro.xy:8080 http://crl.pki.goog/gsr1/gsr1.crl\n```\n\n----------------------------------------\n\nTITLE: Retrieving TimeSpan Data from Snowflake TIME Columns\nDESCRIPTION: This snippet shows how to retrieve a TIME column as a TimeSpan value by casting the reader to SnowflakeDbDataReader and using the GetTimeSpan method. This approach is necessary since the GetTimeSpan method is not available in the standard IDataReader interface.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTimeSpan timeSpanTime = ((SnowflakeDbDataReader)reader).GetTimeSpan(13);\n```\n\n----------------------------------------\n\nTITLE: Destroy Mode for Changed Session Handling in Snowflake .NET\nDESCRIPTION: Shows the 'Destroy' mode for handling connections with changed session properties. When a connection alters schema, database, warehouse or role, it is marked as 'dirty' and destroyed upon closing instead of returning to the pool, maintaining pool integrity.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";ChangedSession=Destroy\";\nvar connection = new SnowflakeDbConnection(connectionString);\n\nconnection.Open();\nvar randomSchemaName = Guid.NewGuid();\nconnection.CreateCommand($\"create schema \\\"{randomSchemaName}\\\").ExecuteNonQuery(); // schema gets changed\n// application is running commands on a schema with random name\nconnection.Close(); // connection does not return to the original pool and gets destroyed; pool will reconstruct the pool\n                    // with new connections accordingly to the MinPoolSize\n\nvar connection2 = new SnowflakeDbConnection(connectionString);\nconnection2.Open();\n// operations here will be performed against schema indicated in the ConnectionString\n```\n\n----------------------------------------\n\nTITLE: Enabling In-Memory Credential Caching in Snowflake .NET\nDESCRIPTION: Sets the credential manager to use the in-memory implementation, which is the most secure option that stores credentials only during the application's runtime.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Cache.md#2025-04-17_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSnowflakeCredentialManagerFactory.UseInMemoryCredentialManager();\n```\n\n----------------------------------------\n\nTITLE: Pool Size Exceeded Timeout Configuration in Snowflake .NET\nDESCRIPTION: Shows how to configure a timeout for waiting on an idle connection when the maximum pool size is reached. When the timeout is exceeded and no idle connections are available, an exception is thrown, preventing indefinite waiting.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";MaxPoolSize=2;WaitingForIdleSessionTimeout=3\";\n\nTask[] tasks = new Task[8];\nfor (int i = 0; i < tasks.Length; i++)\n{\n    var taskName = $\"Task {i}\";\n    tasks[i] = Task.Run(() =>\n    {\n        try\n        {\n            using (var connection = new SnowflakeDbConnection(connectionString))\n            {\n                StopWatch sw = new StopWatch();\n\n                // register opening time\n                sw.Start();\n                connection.Open();\n                sw.Stop();\n\n                // output\n                Console.WriteLine($\"{taskName} waited {Math.Round((double)sw.ElapsedMilliseconds / 1000)} seconds\");\n\n                // wait 2s before closing the connection\n                Thread.Sleep(2000);\n            }\n        }\n        catch (SnowflakeDbException ex)\n        {\n            Console.WriteLine($\"{taskName} - {ex.Message}\");\n        }\n    });\n}\nTask.WaitAll(tasks);\n\n// check current pool size\nvar poolSize = SnowflakeDbConnectionPool.GetPool(connectionString).GetCurrentPoolSize();\nAssert.AreEqual(2, poolSize);\n\n// output:\n// Task 3 waited 0 seconds\n// Task 0 waited 0 seconds\n// Task 5 waited 2 seconds\n// Task 6 waited 2 seconds\n// Task 4 - Error: Snowflake Internal Error: Unable to connect. Could not obtain a connection from the pool within a given timeout SqlState: 08006, VendorCode: 270001, QueryId:\n// Task 7 - Error: Snowflake Internal Error: Unable to connect. Could not obtain a connection from the pool within a given timeout SqlState: 08006, VendorCode: 270001, QueryId:\n// Task 1 - Error: Snowflake Internal Error: Unable to connect. Could not obtain a connection from the pool within a given timeout SqlState: 08006, VendorCode: 270001, QueryId:\n// Task 2 - Error: Snowflake Internal Error: Unable to connect. Could not obtain a connection from the pool within a given timeout SqlState: 08006, VendorCode: 270001, QueryId:\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Credential Manager Caching in Snowflake .NET\nDESCRIPTION: Sets the credential manager to use the Windows Credential Manager implementation, which leverages the built-in Windows capabilities for secure token storage.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Cache.md#2025-04-17_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSnowflakeCredentialManagerFactory.UseWindowsCredentialManager();\n```\n\n----------------------------------------\n\nTITLE: Connection Expiration Timeout in Snowflake .NET Connector\nDESCRIPTION: Demonstrates the use of ExpirationTimeout to control the overall lifetime of pooled connections. When connections exceed the specified timeout, they are removed from the pool and new connections are created to maintain the minimum pool size.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";MinPoolSize=1;ExpirationTimeout=2\";\nvar connection1 = new SnowflakeDbConnection(connectionString);\nvar connection2 = new SnowflakeDbConnection(connectionString);\nvar connection3 = new SnowflakeDbConnection(connectionString);\n\nconnection1.Open();\nconnection2.Open();\nconnection1.Close();\nconnection2.Close();\n\n// 2 connections are in the pool\nAssert.AreEqual(2, SnowflakeDbConnectionPool.GetPool(connectionString).GetCurrentPoolSize());\n\nThread.Sleep(2000);\n\nconnection3.Open();\nconnection3.Close();\n\n// both previous connections have expired\nAssert.AreEqual(1, SnowflakeDbConnectionPool.GetPool(connectionString).GetCurrentPoolSize());\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Credential Manager in Snowflake .NET\nDESCRIPTION: Configures the Snowflake .NET driver to use a custom credential manager implementation, allowing users to implement their own caching mechanism.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Cache.md#2025-04-17_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nSnowflakeCredentialManagerFactory.SetCredentialManager(CustomCredentialManagerImplementation);\n```\n\n----------------------------------------\n\nTITLE: Passing Arrays to Stored Procedures using JSON in Snowflake .NET\nDESCRIPTION: This snippet shows how to pass an array to a Snowflake stored procedure by serializing it to JSON and using PARSE_JSON(?). This works around the limitation that direct array binding is not supported.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\nusing Snowflake.Data;\nusing Newtonsoft.Json;\n..\n\n                    using (IDbCommand cmd = conn.CreateCommand())\n                    {\n\n                        int[] vals = new int[] { 1, 2, 3 };\n                        string array = JsonConvert.SerializeObject(vals); // alternatively you can do `vals.ToArray()` when passing it to `p1.Value`\n                        string sql = \"CALL test_db.public.test(parse_json(?))\";\n // test SP, returns a single value\n                        // execute this sql with bind variable 'array'\n                        cmd.CommandText = sql;\n\n                        var p1 = cmd.CreateParameter();\n                        p1.ParameterName = \"1\";\n                        p1.Value = array; // passing the array in the bind variable. \n                        p1.DbType = DbType.String;\n                        cmd.Parameters.Add(p1);\n\n                        IDataReader reader = cmd.ExecuteReader();\n                        while (reader.Read())\n                        {\n                            Console.WriteLine(reader.GetString(0));\n                        }\n                        conn.Close();\n                    }\n```\n\n----------------------------------------\n\nTITLE: Checking Query Status for Asynchronous Execution (Asynchronous)\nDESCRIPTION: This snippet shows how to asynchronously check the status of a query that was executed asynchronously on the Snowflake server. It retrieves the query status asynchronously and verifies the execution state using the same helper methods as the synchronous version.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/QueryingData.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar queryStatus = await cmd.GetQueryStatusAsync(queryId, CancellationToken.None).ConfigureAwait(false);\nAssert.IsTrue(conn.IsStillRunning(queryStatus)); // assuming that the query is still running\nAssert.IsFalse(conn.IsAnError(queryStatus)); // assuming that the query has not finished with error\n```\n\n----------------------------------------\n\nTITLE: Evicting Connection from Pool in C#\nDESCRIPTION: Demonstrates how to mark a single, opened connection to evict from the pool without turning off pooling. When the connection is closed, it will not be pooled.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var connection = new SnowflakeDbConnection(ConnectionString))\n{\n    connection.Open();\n    connection.PreventPooling();\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating C# Class for Property Name-Based Object Construction\nDESCRIPTION: Example of using the SnowflakeObject attribute to specify that the object should be constructed based on property names, with a SnowflakeColumn attribute for property name mapping.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[SnowflakeObject(ConstructionMethod = SnowflakeObjectConstructionMethod.PROPERTIES_NAMES)]\npublic class Address\n{\n    [SnowflakeColumn(Name = \"nearestCity\")]\n    public string city { get; set; }\n    public string state { get; set; }\n    public Zip zip { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Result Format for Structured Types in Snowflake SQL\nDESCRIPTION: SQL command to alter the session and set the .NET query result format to JSON, which is required for reading structured types.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER SESSION SET DOTNET_QUERY_RESULT_FORMAT = JSON;\n```\n\n----------------------------------------\n\nTITLE: Annotating C# Class for Constructor-Based Object Creation\nDESCRIPTION: Example of using the SnowflakeObject attribute to specify that the object should be constructed using a constructor, with a matching constructor definition.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[SnowflakeObject(ConstructionMethod = SnowflakeObjectConstructionMethod.CONSTRUCTOR)]\npublic class Address\n{\n    private string _city;\n    private string _state;\n\n    public Address()\n    {\n    }\n\n    public Address(string city, string state)\n    {\n        _city = city;\n        _state = state;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Pool Size in Snowflake .NET Connector\nDESCRIPTION: Code to retrieve the size of a specific connection pool using SnowflakeDbConnectionPool. This returns the total number of connections in the pool including idle, busy, and initializing connections. The default pool size is 2.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\nvar pool = SnowflakeDbConnectionPool.GetPool(connectionString);\nvar poolSize = pool.GetCurrentPoolSize();\n// default pool size is 2\nAssert.AreEqual(2, poolSize);\n```\n\n----------------------------------------\n\nTITLE: Testing Connection Pool Management in Snowflake .NET Connector\nDESCRIPTION: This code sample demonstrates how to monitor the size of a Snowflake connection pool as connections are opened and closed. It shows clearing pools, setting maximum size, opening multiple connections with different connection strings, and verifying connection states and pool sizes.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPoolingDeprecated.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void TestConnectionPoolClean()\n{\n  SnowflakeDbConnectionPool.ClearAllPools();\n  SnowflakeDbConnectionPool.SetMaxPoolSize(2);\n  var conn1 = new SnowflakeDbConnection();\n  conn1.ConnectionString = ConnectionString;\n  conn1.Open();\n  Assert.AreEqual(ConnectionState.Open, conn1.State);\n\n  var conn2 = new SnowflakeDbConnection();\n  conn2.ConnectionString = ConnectionString + \" retryCount=1\";\n  conn2.Open();\n  Assert.AreEqual(ConnectionState.Open, conn2.State);\n  Assert.AreEqual(0, SnowflakeDbConnectionPool.GetCurrentPoolSize());\n  conn1.Close();\n  conn2.Close();\n  Assert.AreEqual(2, SnowflakeDbConnectionPool.GetCurrentPoolSize());\n  var conn3 = new SnowflakeDbConnection();\n  conn3.ConnectionString = ConnectionString + \"  retryCount=2\";\n  conn3.Open();\n  Assert.AreEqual(ConnectionState.Open, conn3.State);\n\n  var conn4 = new SnowflakeDbConnection();\n  conn4.ConnectionString = ConnectionString + \"  retryCount=3\";\n  conn4.Open();\n  Assert.AreEqual(ConnectionState.Open, conn4.State);\n\n  conn3.Close();\n  Assert.AreEqual(2, SnowflakeDbConnectionPool.GetCurrentPoolSize());\n  conn4.Close();\n  Assert.AreEqual(2, SnowflakeDbConnectionPool.GetCurrentPoolSize());\n\n  Assert.AreEqual(ConnectionState.Closed, conn1.State);\n  Assert.AreEqual(ConnectionState.Closed, conn2.State);\n  Assert.AreEqual(ConnectionState.Closed, conn3.State);\n  Assert.AreEqual(ConnectionState.Closed, conn4.State);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Connection Pool Reference in Snowflake .NET Connector\nDESCRIPTION: Code snippet that demonstrates how to get a reference to a specific connection pool. This is a prerequisite for clearing a specific pool or checking its size.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nvar pool = SnowflakeDbConnectionPool.GetPool(connectionString);\n```\n\n----------------------------------------\n\nTITLE: Cloning Snowflake .NET Connector Repository\nDESCRIPTION: Command to clone the Snowflake .NET connector source code from GitHub repository.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:snowflakedb/snowflake-connector-net snowflake-connector-net\n```\n\n----------------------------------------\n\nTITLE: Defining Custom C# Class for Snowflake Structured Object\nDESCRIPTION: Example of a C# class definition that can be used to deserialize a Snowflake structured object.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Address\n{\n    public string city { get; set; }\n    public string state { get; set; }\n    public Zip zip { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling in Snowflake .NET Connector\nDESCRIPTION: Demonstrates how to disable connection pooling for specific connection strings. By default, pooling is disabled for External Browser or Key-Pair Authentication (without a password) for security reasons, but can be explicitly enabled or disabled as needed.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/ConnectionPooling.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = ConnectionString + \";PoolingEnabled=false\";\nusing (var connection = new SnowflakeDbConnection(connectionString))\n{\n    connection.Open();\n}\n\n// no connection in the pool\nvar poolSize = SnowflakeDbConnectionPool.GetPool(connectionString).GetCurrentPoolSize();\nAssert.AreEqual(0, poolSize);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NuGet\nDESCRIPTION: Commands to navigate to the project directory and restore NuGet dependencies.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd snowflake-connector-net\nnuget restore\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Easy Logging in Snowflake Connector\nDESCRIPTION: Example JSON configuration for the Easy Logging feature in Snowflake Connector for .NET. This allows changing log levels at runtime and specifying a directory for log files without modifying the application code.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Logging.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"common\": {\n    \"log_level\": \"INFO\",\n    \"log_path\": \"c:\\\\some-path\\\\some-directory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Snowflake .NET Connector\nDESCRIPTION: Command to build the Snowflake .NET connector project in Release configuration.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd Snowflake.Data\ndotnet build --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Constructing Structured Object in Snowflake SQL\nDESCRIPTION: SQL query to create a structured object with defined types for city and state fields.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT OBJECT_CONSTRUCT('city','San Mateo', 'state', 'CA')::OBJECT(city VARCHAR, state VARCHAR)\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Signature\nDESCRIPTION: Shell command to verify the authenticity and integrity of the Snowflake.Data package using cosign.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncosign verify-blob snowflake.data.4.2.0.nupkg \\\n--key snowflake-connector-net-v4.2.0.pub \\\n--signature Snowflake.Data.4.2.0.nupkg.sig\n```\n\n----------------------------------------\n\nTITLE: Constructing Structured Array in Snowflake SQL\nDESCRIPTION: SQL query to create a structured array of text values.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ARRAY_CONSTRUCT('a', 'b', 'c')::ARRAY(TEXT)\n```\n\n----------------------------------------\n\nTITLE: Including Semicolon in Snowflake Connection String\nDESCRIPTION: Shows how to include a semicolon in a connection string parameter, which normally acts as a delimiter. This example demonstrates wrapping the value in double quotes to escape the semicolon.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nstring connectionString = String.Format(\n  \"account=testaccount; \" +\n  \"user=testuser; \" +\n  \"password=\\\"test;password\\\";\"\n);\n```\n\n----------------------------------------\n\nTITLE: Constructing Structured Map in Snowflake SQL\nDESCRIPTION: SQL query to create a structured map with integer keys and varchar values.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT OBJECT_CONSTRUCT('5','San Mateo', '8', 'CA', '13', '01-234')::MAP(INTEGER, VARCHAR)\n```\n\n----------------------------------------\n\nTITLE: Including Equal Sign in Snowflake Connection String\nDESCRIPTION: Shows how to include an equal sign in a connection string parameter value. Since version 2.0.18, a single equal sign can be used without special escaping.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nstring connectionString = String.Format(\n  \"account=testaccount; \" +\n  \"user=testuser; \" +\n  \"password=test=password;\"\n);\n```\n\n----------------------------------------\n\nTITLE: Including Single Quote in Snowflake Connection String\nDESCRIPTION: Shows how to include a single quote character in a connection string parameter such as password. This example uses String.Format to build the connection string with proper escaping.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nstring connectionString = String.Format(\n  \"account=testaccount; \" +\n  \"user=testuser; \" +\n  \"password=test'password;\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using Double Quoted Identifiers in Snowflake Connection String\nDESCRIPTION: Demonstrates how to use double quoted identifiers for object property values in connection strings. This approach allows case-sensitive values and special characters in database object names.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nstring connectionString = String.Format(\n  \"account=testaccount; \" +\n  \"database=\\\"testDB\\\";\"\n);\n```\n\n----------------------------------------\n\nTITLE: Including Double Quote in Snowflake Connection String\nDESCRIPTION: Shows how to include a double quote character in a connection string parameter. This example demonstrates the correct syntax for embedding double quotes in connection parameters.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nstring connectionString = String.Format(\n  \"account=testaccount; \" +\n  \"user=testuser; \" +\n  \"password=test\\\"password;\"\n);\n```\n\n----------------------------------------\n\nTITLE: Setting TOML File Permissions in Bash\nDESCRIPTION: Commands to set required file permissions for connections.toml file on MacOS/Linux systems.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nchown $USER connections.toml\nchmod 0600 connections.toml\n```\n\n----------------------------------------\n\nTITLE: Escaping Double Quotes in Snowflake Double Quoted Identifiers\nDESCRIPTION: Shows how to include double quotes as part of a double quoted identifier value in a connection string. Double quotes within double quoted values must be escaped by doubling them.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nstring connectionString = String.Format(\n  \"account=testaccount; \" +\n  \"database=\\\"\\\"\\\"test\\\"\\\"user\\\"\\\"\\\";\" // DATABASE => \"\"test\"db\"\"\n);\n```\n\n----------------------------------------\n\nTITLE: Building the Project for .NET 6\nDESCRIPTION: This command builds the Snowflake .NET connector with full debug information for .NET 6, which is necessary for proper code coverage analysis.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build snowflake-connector-net.sln /p:DebugType=Full\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Configuration Example\nDESCRIPTION: Simple TOML configuration file example for Snowflake connection credentials.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md#2025-04-17_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[myconnection]\naccount = \"myaccount\"\nuser = \"jdoe\"\npassword = \"xyz1234\"\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage for .NET 6 on AWS\nDESCRIPTION: This command runs code coverage analysis on the .NET 6 build using dotnet-coverage, targeting AWS cloud provider, and outputs results in Cobertura XML format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net6.0 --no-build -l console;verbosity=normal\" --output net6.0_AWS_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Enabling File-Based Credential Caching in Snowflake .NET\nDESCRIPTION: Sets the credential manager to use the file-based implementation, which stores credentials in a JSON file on the system. This is the least secure caching option.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Cache.md#2025-04-17_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSnowflakeCredentialManagerFactory.UseFileCredentialManager();\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage for .NET 6 on Azure\nDESCRIPTION: This command runs code coverage analysis on the .NET 6 build using dotnet-coverage, targeting Azure cloud provider, and outputs results in Cobertura XML format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net6.0 --no-build -l console;verbosity=normal\" --output net6.0_AZURE_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Annotating C# Class for Property Order-Based Object Construction\nDESCRIPTION: Example of using the SnowflakeObject attribute to specify that the object should be constructed based on property order.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[SnowflakeObject(ConstructionMethod = SnowflakeObjectConstructionMethod.PROPERTIES_ORDER)]\npublic class Address\n{\n    public string city { get; set; }\n    public string state { get; set; }\n    public Zip zip { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Snowflake .NET Connector (Bash)\nDESCRIPTION: Command for running only integration tests for the Snowflake .NET connector. This filters the test execution to include only tests with 'IntegrationTests' in their fully qualified name.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Testing.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd Snowflake.Data.Tests\ndotnet test -l \"console;verbosity=normal\" --filter FullyQualifiedName~IntegrationTests\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage for .NET 6 on GCP\nDESCRIPTION: This command runs code coverage analysis on the .NET 6 build using dotnet-coverage, targeting Google Cloud Platform, and outputs results in Cobertura XML format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net6.0 --no-build -l console;verbosity=normal\" --output net6.0_GCP_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Ignoring Properties in Order-Based Construction with C# Annotation\nDESCRIPTION: Demonstration of using the SnowflakeColumn attribute to ignore specific properties when constructing objects based on property order.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/StructuredTypes.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Address\n{\n    [SnowflakeColumn(IgnoreForPropertyOrder = true)]\n    public string city { get; set; }\n    public string state { get; set; }\n    public Zip zip { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Certificate Validation Failure in .NET\nDESCRIPTION: Sample error message that occurs when the .NET driver fails to verify certificate validity due to inaccessible CRL endpoints or SSL inspection interference.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CertficateValidation.md#2025-04-17_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nerror:System.Security.Authentication.AuthenticationException:\nThe remote certificate is invalid because of errors in the certificate chain: RevocationStatusUnknown, OfflineRevocation\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests for Snowflake .NET Connector (Bash)\nDESCRIPTION: Command for running the basic test suite for the Snowflake .NET connector using the dotnet CLI. This executes tests targeting the .NET 6.0 framework with normal verbosity console output.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Testing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd Snowflake.Data.Tests\ndotnet test -f net6.0 -l \"console;verbosity=normal\"\n```\n\n----------------------------------------\n\nTITLE: Static Member Variable Naming in C#\nDESCRIPTION: Demonstrates naming conventions for static class members using s_ prefix for internal/private members and PascalCase for public members.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleClass\n{\n    private static Something s_someVariable;\n    internal static Something s_someInternalVariable;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Tests for Snowflake .NET Connector (Bash)\nDESCRIPTION: Command for running tests with code coverage analysis for the Snowflake .NET connector. This generates a Cobertura XML report using dotnet-coverage to collect metrics while running the test suite.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Testing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net6.0 --no-build -l console;verbosity=normal\" --output net6.0_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Thread Static Member Naming in C#\nDESCRIPTION: Shows naming pattern for thread-static members using t_ prefix with camelCase.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleClass\n{\n    [ThreadStatic]\n    private static Something t_someVariable;\n    \n    [ThreadStatic]\n    internal static Something t_someInternalVariable;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Snowflake .NET Connector (Bash)\nDESCRIPTION: Command for running only unit tests for the Snowflake .NET connector. This filters the test execution to include only tests with 'UnitTests' in their fully qualified name.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Testing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd Snowflake.Data.Tests\ndotnet test -l \"console;verbosity=normal\" --filter FullyQualifiedName~UnitTests -l console;verbosity=normal\n```\n\n----------------------------------------\n\nTITLE: Const Member Naming in C#\nDESCRIPTION: Shows PascalCase naming convention for const members regardless of access modifier.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleClass\n{\n    public int SomeInteger = 1234;\n    private string SomeString = \"abc\";\n    internal string SomeInternalString = \"xyz\";\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Test Structure in C#\nDESCRIPTION: Demonstrates the Arrange-Act-Assert pattern in unit tests with HTTP client configuration example.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// arrange\nvar config = new HttpClientConfig(\n    true,\n    \"snowflake.com\",\n    \"123\",\n    \"testUser\",\n    \"proxyPassword\",\n    \"localhost\", \n    false,\n    false\n);\n\n// act\nvar handler = (HttpClientHandler) HttpUtil.Instance.SetupCustomHttpHandler(config);\n\n// assert\nAssert.IsTrue(handler.UseProxy);\nAssert.IsNotNull(handler.Proxy);\n```\n\n----------------------------------------\n\nTITLE: Public Member Naming in C#\nDESCRIPTION: Shows PascalCase naming convention for public members.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleClass\n{\n    public Something SomeVariable;\n}\n```\n\n----------------------------------------\n\nTITLE: Local Variable Naming in C#\nDESCRIPTION: Shows camelCase naming convention for local variables.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    Something someVariable;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Project Directory\nDESCRIPTION: This command cleans the .NET project directory and clears the NuGet cache to ensure a clean build environment.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet clean snowflake-connector-net.sln && dotnet nuget locals all --clear\n```\n\n----------------------------------------\n\nTITLE: Const Variable Naming in C#\nDESCRIPTION: Demonstrates PascalCase naming convention for const variables.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    const SomeConst = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Project for .NET Framework\nDESCRIPTION: This command builds the Snowflake .NET connector for .NET Framework (4.7.2) using MSBuild in Release configuration.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild snowflake-connector-net.sln -p:Configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Method Naming in C#\nDESCRIPTION: Shows PascalCase naming convention for all methods regardless of access modifier.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvoid SomeMethod() {\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage for .NET Framework on AWS\nDESCRIPTION: This command runs code coverage analysis on the .NET Framework build using dotnet-coverage, targeting AWS cloud provider, and outputs results in Cobertura XML format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net472 --no-build -l console;verbosity=normal\" --output net472_AWS_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Enum Naming in C#\nDESCRIPTION: Illustrates PascalCase naming convention for enums and their values.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum SomeEnumeration\n{\n    SomeValue = 5,\n    SomeOtherValue = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage for .NET Framework on Azure\nDESCRIPTION: This command runs code coverage analysis on the .NET Framework build using dotnet-coverage, targeting Azure cloud provider, and outputs results in Cobertura XML format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net472 --no-build -l console;verbosity=normal\" --output net472_AZURE_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Interface Naming in C#\nDESCRIPTION: Shows interface naming convention using I prefix.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IName\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage for .NET Framework on GCP\nDESCRIPTION: This command runs code coverage analysis on the .NET Framework build using dotnet-coverage, targeting Google Cloud Platform, and outputs results in Cobertura XML format.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/CodeCoverage.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet-coverage collect \"dotnet test --framework net472 --no-build -l console;verbosity=normal\" --output net472_GCP_coverage.xml --output-format cobertura --settings coverage.config\n```\n\n----------------------------------------\n\nTITLE: Standard Interface Implementation Class Naming in C#\nDESCRIPTION: Demonstrates naming convention for classes implementing standard interfaces using Snowflake prefix.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SnowflakeDbCommand : DbCommand\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Object Member Variable Naming in C#\nDESCRIPTION: Demonstrates naming pattern for object members using _ prefix with camelCase for internal/private members.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleClass\n{\n    private Something _someVariable;\n    internal Something _someInternalVariable;\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Class Naming in C#\nDESCRIPTION: Shows naming convention for regular classes without standard interface implementation.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FastParser\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Public Static Member Naming in C#\nDESCRIPTION: Illustrates naming convention for public static members using PascalCase.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExampleClass\n{\n    public static Something SomeVariable;\n}\n```\n\n----------------------------------------\n\nTITLE: Property Naming in C#\nDESCRIPTION: Illustrates PascalCase naming convention for properties.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic ExampleProperty\n{\n    get;\n    set;\n}\n```\n\n----------------------------------------\n\nTITLE: Test Method Naming in C#\nDESCRIPTION: Shows PascalCase naming convention for test methods using TestThatSomethingShouldHappen pattern.\nSOURCE: https://github.com/snowflakedb/snowflake-connector-net/blob/master/CodingConventions.md#2025-04-17_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void TestThatLoginWithInvalidPassowrdFails() {\n}\n\n[Test]\npublic void TestCreatingHttpClientHandlerWithProxy() {\n}\n```"
  }
]