[
  {
    "owner": "kirillzyusko",
    "repo": "react-native-keyboard-controller",
    "content": "TITLE: Implementing Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to create a UI component that animates in response to keyboard movements. The code uses the useKeyboardAnimation hook to access keyboard height and animation progress values, which are then applied to scale and translate a view element when the keyboard appears or disappears.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Keyboard Events in React Native\nDESCRIPTION: Basic example of implementing the useKeyboardHandler hook to track keyboard lifecycle events. This hook requires worklet directives for all handlers and provides access to keyboard height, animation progress, duration and focused element information.\n\nLANGUAGE: typescript\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation in React Native with useKeyboardAnimation Hook\nDESCRIPTION: This example demonstrates how to use the useKeyboardAnimation hook to animate UI elements in response to keyboard appearance. The component applies scaling and translation transformations to a green square based on keyboard height and animation progress, with a TextInput that triggers the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAwareScrollView with Dynamic Text Inputs in React Native\nDESCRIPTION: This code demonstrates how to use KeyboardAwareScrollView from react-native-keyboard-controller to create a scrollable form with multiple text inputs. It includes a custom TextInput component and dynamically generates 10 input fields with alternating keyboard types. The component automatically adjusts for keyboard display with a bottom offset of 50 pixels.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardAwareScrollView Example with TextInput Components\nDESCRIPTION: A comprehensive example of KeyboardAwareScrollView with multiple TextInput components. This example includes a custom TextInput component, styling, and demonstrates setting a bottomOffset for better keyboard handling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard-Aware Form with Toolbar in React Native\nDESCRIPTION: This example demonstrates how to implement a keyboard-aware form using KeyboardAwareScrollView and KeyboardToolbar from react-native-keyboard-controller. It includes a custom TextInput component with focus state handling and provides proper keyboard interaction for multiple form fields.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with KeyboardProvider in React Native\nDESCRIPTION: Example showing how to wrap a React Native application with the KeyboardProvider component, which is required for the library to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form with KeyboardAwareScrollView and KeyboardToolbar in React Native\nDESCRIPTION: This code demonstrates a form implementation using react-native-keyboard-controller library. It creates a scrollable form that adapts to keyboard appearance and includes a keyboard toolbar. The example contains multiple text input fields organized in a structured layout.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form with KeyboardAwareScrollView and KeyboardToolbar in React Native\nDESCRIPTION: This code demonstrates a complete implementation of a form using react-native-keyboard-controller components. It includes a custom TextInput component with focus state management, a KeyboardAwareScrollView that adjusts content when the keyboard appears, and a KeyboardToolbar for enhanced keyboard interaction.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OverKeyboardView with React Native Gesture Handler\nDESCRIPTION: A complete example showing how to implement the OverKeyboardView component with a text input and a button to toggle a blue box that appears over the keyboard. This implementation uses react-native-gesture-handler for touch handling and demonstrates proper styling and event management.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n} from \"react-native\";\nimport {\n  GestureHandlerRootView,\n  TouchableOpacity,\n} from \"react-native-gesture-handler\";\nimport { OverKeyboardView } from \"react-native-keyboard-controller\";\n\nexport default function OverKeyboardViewExample() {\n  const [isShow, setShow] = useState(false);\n\n  return (\n    <View>\n      <TextInput style={styles.input} testID=\"over_keyboard_view.input\" />\n      <Button\n        testID=\"over_keyboard_view.show\"\n        title=\"Show\"\n        onPress={() => setShow(true)}\n      />\n      <OverKeyboardView visible={isShow}>\n        <GestureHandlerRootView style={styles.fullScreen}>\n          <TouchableWithoutFeedback\n            style={styles.fullScreen}\n            testID=\"over_keyboard_view.background\"\n            onPress={() => setShow(false)}\n          >\n            <View style={styles.container}>\n              <TouchableOpacity\n                testID=\"over_keyboard_view.content\"\n                onPress={() => setShow(false)}\n              >\n                <View style={styles.background} />\n              </TouchableOpacity>\n            </View>\n          </TouchableWithoutFeedback>\n        </GestureHandlerRootView>\n      </OverKeyboardView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fullScreen: {\n    flex: 1,\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  background: {\n    width: 200,\n    height: 200,\n    backgroundColor: \"blue\",\n  },\n  input: {\n    backgroundColor: \"yellow\",\n    width: 200,\n    height: 50,\n    alignSelf: \"center\",\n    marginTop: 150,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with React Native Keyboard Controller\nDESCRIPTION: A complete example showing how to use KeyboardAvoidingView from react-native-keyboard-controller with the 'padding' behavior. The component automatically adjusts content position when the keyboard appears, maintaining a consistent cross-platform experience.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard Animation Hook in React Native with Navigation\nDESCRIPTION: A custom implementation of a keyboard animation hook that changes softInputMode only when a screen is focused. This resolves issues with nested navigation stacks by properly managing Android's softInputMode across screen transitions using React Navigation's useFocusEffect.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to implement a basic keyboard animation using the useKeyboardAnimation hook from react-native-keyboard-controller. The code creates a green square that scales and moves in response to the keyboard appearance. It uses Animated.View with transform properties based on keyboard height and animation progress.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardAwareScrollView Implementation Example\nDESCRIPTION: A full implementation example of KeyboardAwareScrollView with styled TextInput components. This demonstrates how to create a form with multiple text inputs that adjusts to keyboard appearance. It includes custom styling and configuration options like bottomOffset.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook with Navigation Focus in React Native\nDESCRIPTION: Implementation of a custom keyboard animation hook that changes softInputMode to adjustResize only when the screen is focused. This prevents softInputMode issues in deep navigation stacks by restoring the default mode when the screen loses focus. Uses react-navigation's useFocusEffect for proper lifecycle management.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BottomSheetKeyboardAwareScrollView Component for @gorhom/bottom-sheet\nDESCRIPTION: This code creates a custom BottomSheetKeyboardAwareScrollView component that combines KeyboardAwareScrollView with @gorhom/bottom-sheet functionality. It uses Reanimated and HOCs from bottom-sheet to create a compatible scrollable component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from \"react\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardAwareScrollViewProps,\n} from \"react-native-keyboard-controller\";\nimport {\n  SCROLLABLE_TYPE,\n  createBottomSheetScrollableComponent,\n  type BottomSheetScrollViewMethods,\n} from \"@gorhom/bottom-sheet\";\nimport type { BottomSheetScrollViewProps } from \"@gorhom/bottom-sheet/src/components/bottomSheetScrollable/types\";\nimport Reanimated from \"react-native-reanimated\";\n\nconst AnimatedScrollView =\n  Reanimated.createAnimatedComponent<KeyboardAwareScrollViewProps>(\n    KeyboardAwareScrollView,\n  );\nconst BottomSheetScrollViewComponent = createBottomSheetScrollableComponent<\n  BottomSheetScrollViewMethods,\n  BottomSheetScrollViewProps\n>(SCROLLABLE_TYPE.SCROLLVIEW, AnimatedScrollView);\nconst BottomSheetKeyboardAwareScrollView = memo(BottomSheetScrollViewComponent);\n\nBottomSheetKeyboardAwareScrollView.displayName =\n  \"BottomSheetKeyboardAwareScrollView\";\n\nexport default BottomSheetKeyboardAwareScrollView as (\n  props: BottomSheetScrollViewProps & KeyboardAwareScrollViewProps,\n) => ReturnType<typeof BottomSheetKeyboardAwareScrollView>;\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in Functional Components\nDESCRIPTION: Demonstrates how to import and use the useKeyboardAnimation hook to access keyboard animation values (height and progress) in functional React Native components.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with KeyboardAwareScrollView and KeyboardToolbar in React Native\nDESCRIPTION: A complete example showing how to build a form with multiple text inputs using react-native-keyboard-controller. The component uses KeyboardAwareScrollView to adjust content when keyboard appears and KeyboardToolbar to navigate between form fields. It also includes a custom TextInput component with focus state handling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with React Native Keyboard Controller\nDESCRIPTION: A complete example showing how to use the KeyboardAvoidingView component from react-native-keyboard-controller with behavior set to padding. The example includes a form with text inputs and styling to demonstrate proper keyboard avoidance implementation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      contentContainerStyle={styles.container}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ToolbarExample with KeyboardAwareScrollView and KeyboardToolbar in React Native\nDESCRIPTION: A full example demonstrating how to create a form with KeyboardAwareScrollView and KeyboardToolbar from react-native-keyboard-controller. The component contains multiple text inputs arranged in a scrollable view that automatically adjusts to the keyboard. It also includes a keyboard toolbar for enhanced input navigation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to use the useKeyboardAnimation hook from react-native-keyboard-controller to create keyboard animations. The component scales and translates a view based on keyboard visibility and height, with the animation triggered by a TextInput focus. It uses the progress and height values to create smooth transitions as the keyboard appears and disappears.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard-Aware Form with ToolbarExample Component in React Native\nDESCRIPTION: This code snippet demonstrates how to create a form using KeyboardAwareScrollView and KeyboardToolbar components from react-native-keyboard-controller. It contains a custom TextInput component with focus state management and styling for different states (focused, disabled). The form includes various fields organized in different layouts.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with React Native Keyboard Controller in TSX\nDESCRIPTION: A complete example of KeyboardAvoidingView implementation with form inputs. This component automatically adjusts its height, position, or padding based on keyboard appearance to ensure form elements remain visible while typing. The example includes a styled form with text inputs and a submit button.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      contentContainerStyle={styles.container}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Animation Component with Jest in React Native\nDESCRIPTION: A complete test case example that demonstrates how to test components that use the useKeyboardAnimation hook. It verifies that a component correctly updates its transform style in response to keyboard height changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook for React Navigation\nDESCRIPTION: A custom implementation of a keyboard animation hook that changes softInputMode only when the screen is focused. This hook uses React Navigation's useFocusEffect to ensure proper softInputMode management in navigation stacks, setting to adjustResize when focused and restoring the default mode when unfocused.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: Demonstrates how to use the useKeyboardAnimation hook to access animated values for keyboard height and animation progress in a functional component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView in React Native with consistent cross-platform behavior\nDESCRIPTION: This example demonstrates how to use the KeyboardAvoidingView component from react-native-keyboard-controller. It creates a form with text inputs that properly adjust when the keyboard appears. The component uses padding behavior with custom styling and a vertical offset to ensure the form remains visible above the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      contentContainerStyle={styles.container}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with react-native-keyboard-controller\nDESCRIPTION: This example demonstrates how to use the KeyboardAvoidingView component from react-native-keyboard-controller. The component adjusts its position based on keyboard appearance, with configurable behavior, container styles, and vertical offset. It includes a form with text inputs and a submit button.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      contentContainerStyle={styles.container}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with padding behavior in React Native\nDESCRIPTION: A complete example showing how to use KeyboardAvoidingView from react-native-keyboard-controller to create a form that adjusts to avoid the keyboard. The component uses padding behavior with a vertical offset and includes styled form elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      contentContainerStyle={styles.container}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook in React Native\nDESCRIPTION: Implementation of a custom keyboard animation hook that changes softInputMode when a screen is focused and restores the default mode when unfocused. This hook uses react-navigation's useFocusEffect to ensure proper softInputMode management in navigation stacks.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete FlatList Example with KeyboardAwareScrollView Integration\nDESCRIPTION: A full implementation example showing how to integrate KeyboardAwareScrollView with FlatList, including TextInput components inside list items for keyboard-aware scrolling behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardStickyView with Offset Configuration in React Native\nDESCRIPTION: Example demonstrating how to implement a sticky footer that moves with the keyboard using KeyboardStickyView. The component uses offset configuration to add spacing in both opened and closed keyboard states.\n\nLANGUAGE: tsx\nCODE:\n```\nconst offset = { closed: 0, opened: 20 };\n\nconst StickyFooter = () => {\n  return (\n    <KeyboardStickyView offset={offset}>\n      <Footer />\n    </KeyboardStickyView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook in TypeScript with React Navigation\nDESCRIPTION: Implementation of a custom keyboard animation hook that changes Android's softInputMode on screen focus and restores it when unfocused. This approach works better with navigation stacks compared to the default hooks that modify the mode on component mount/unmount.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardStickyView with Offset Configuration in React Native\nDESCRIPTION: Example demonstrating how to implement a sticky footer that moves with the keyboard using KeyboardStickyView. The component uses offset configuration to add spacing in both opened and closed keyboard states.\n\nLANGUAGE: tsx\nCODE:\n```\nconst offset = { closed: 0, opened: 20 };\n\nconst StickyFooter = () => {\n  return (\n    <KeyboardStickyView offset={offset}>\n      <Footer />\n    </KeyboardStickyView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardAwareScrollView Example with Multiple TextInputs\nDESCRIPTION: Complete example showing KeyboardAwareScrollView with multiple TextInput components. Demonstrates proper styling, multiline input configuration, and keyboard type handling with a bottom offset.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardAwareScrollView Example with Multiple TextInputs\nDESCRIPTION: Complete example showing KeyboardAwareScrollView with multiple TextInput components. Demonstrates proper styling, multiline input configuration, and keyboard type handling with a bottom offset.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardToolbar Implementation with Form Example\nDESCRIPTION: A comprehensive example showing how to implement a form with multiple text inputs using KeyboardAwareScrollView and KeyboardToolbar. Includes custom TextInput component with focus state handling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { StyleSheet, Text, TextInput as TextInputRN, View } from \"react-native\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardToolbar,\n} from \"react-native-keyboard-controller\";\n\nimport type {\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputProps,\n} from \"react-native\";\n\nexport default function ToolbarExample() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={35} style={scrollViewStyles}>\n        <TextInput placeholder=\"Your name\" title=\"Name\" />\n        <TextInput placeholder=\"Your surname\" title=\"Surname\" />\n        <TextInput\n          placeholder=\"example@gmail.com\"\n          title=\"Email\"\n          editable={false}\n        />\n        <TextInput\n          placeholder=\"Tell us funny facts about you\"\n          title=\"About you\"\n          editable={false}\n        />\n        <View style={styles.row}>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"DD\" title=\"Day\" />\n          </View>\n          <View style={[styles.birthday, styles.withPadding]}>\n            <TextInput placeholder=\"MM\" title=\"Month\" />\n          </View>\n          <View style={styles.birthday}>\n            <TextInput placeholder=\"YYYY\" title=\"Year\" />\n          </View>\n        </View>\n        <TextInput placeholder=\"Country\" title=\"Country\" />\n        <TextInput placeholder=\"Region of the city\" title=\"Region\" />\n        <TextInput placeholder=\"City where you currently live\" title=\"City\" />\n        <TextInput placeholder=\"Street name\" title=\"Street\" />\n        <TextInput placeholder=\"House number\" title=\"House\" />\n        <TextInput placeholder=\"Flat number\" title=\"Flat\" />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n  birthday: {\n    flex: 1 / 3,\n  },\n  withPadding: {\n    paddingHorizontal: 16,\n  },\n});\nconst scrollViewStyles = [styles.withPadding, styles.container];\n\ntype CustomTextInputProps = {\n  title?: string;\n} & TextInputProps;\n\nconst TextInput = (props: CustomTextInputProps) => {\n  const { title, ...rest } = props;\n  const [isFocused, setFocused] = useState(false);\n\n  const onFocus = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(true);\n      props.onFocus?.(e);\n    },\n    [],\n  );\n\n  const onBlur = useCallback(\n    (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n      setFocused(false);\n      props.onBlur?.(e);\n    },\n    [],\n  );\n\n  return (\n    <>\n      {!!title && <Text style={textInputStyles.title}>{title}</Text>}\n      <TextInputRN\n        placeholderTextColor=\"#6c6c6c\"\n        style={[\n          textInputStyles.container,\n          rest.editable === false && textInputStyles.disabled,\n          isFocused && textInputStyles.focused,\n        ]}\n        multiline\n        numberOfLines={2}\n        testID={rest.placeholder}\n        {...rest}\n        placeholder={`${rest.placeholder}`}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      />\n    </>\n  );\n};\n\nconst textInputStyles = StyleSheet.create({\n  title: {\n    marginBottom: 6,\n    marginLeft: 3,\n    color: \"black\",\n    fontSize: 16,\n  },\n  container: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  focused: {\n    borderColor: \"#20AAFF\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating KeyboardAwareScrollView with FlatList and FlashList in React Native\nDESCRIPTION: Demonstrates how to integrate KeyboardAwareScrollView with virtualized lists like FlatList and FlashList by using the renderScrollComponent prop.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlatList } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\n<FlatList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n\n// or\n\nimport { FlashList } from \"@shopify/flash-list\";\n\n<FlashList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to create a keyboard animation using the useKeyboardAnimation hook from react-native-keyboard-controller. The component animates a green square when the keyboard appears, scaling it and moving it with the keyboard height. It includes a TextInput to trigger the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to create a keyboard animation using the useKeyboardAnimation hook from react-native-keyboard-controller. The component animates a green square that scales and translates in response to keyboard appearance. The animation uses Animated values with native driver enabled.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard Basic Example\nDESCRIPTION: Example of hiding the keyboard and waiting for it to be fully hidden before proceeding.\n\nLANGUAGE: typescript\nCODE:\n```\nawait KeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook with Basic Event Handlers in React Native\nDESCRIPTION: Basic example of using useKeyboardHandler hook with all available event handlers (onStart, onMove, onInteractive, onEnd). Each handler needs a worklet directive to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus-Aware Keyboard Animation Hook with React Navigation\nDESCRIPTION: This custom hook uses React Navigation's useFocusEffect to set softInputMode to adjustResize only when the screen is in focus, and restores the default mode when leaving. It helps avoid the issue of softInputMode persisting across multiple screens in a navigation stack.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardContext,\n  KeyboardController,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useContext(KeyboardContext);\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete FlatList Integration with KeyboardAwareScrollView\nDESCRIPTION: A complete example showing how to integrate FlatList with KeyboardAwareScrollView. The list renders multiple items with TextInput components that will properly adjust when the keyboard appears.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Complete FlatList Integration Example with KeyboardAwareScrollView\nDESCRIPTION: A comprehensive example showing a complete implementation of FlatList with KeyboardAwareScrollView. The example includes TextInput components inside list items with appropriate styling and configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard Animation Hook with React Navigation\nDESCRIPTION: Custom implementation of a keyboard animation hook that properly manages Android softInputMode during screen focus and unfocus. This hook uses react-navigation's useFocusEffect to change softInputMode to adjustResize only when the screen is visible, and restores the default mode when unfocused.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Interaction Handler Using useKeyboardHandler Hook\nDESCRIPTION: Using the useKeyboardHandler hook to detect and respond to interactive keyboard movements. The onInteractive callback allows for custom handling of keyboard gestures during user interaction.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard with KeyboardController in React Native\nDESCRIPTION: This method hides the keyboard on both Android and iOS platforms. Unlike React Native's standard implementation, it works with any focused input component, not just TextInput, providing more flexible keyboard dismissal functionality.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Integrating KeyboardAwareScrollView with FlatList and FlashList in React Native\nDESCRIPTION: Example of integrating KeyboardAwareScrollView with FlatList and FlashList through the renderScrollComponent prop. This approach allows keyboard-aware behavior in virtualized lists.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlatList } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\n<FlatList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n\n// or\n\nimport { FlashList } from \"@shopify/flash-list\";\n\n<FlashList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Resize Mode with KeyboardController in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom hook that enables SOFT_INPUT_ADJUST_RESIZE mode when a component mounts and restores the default mode on unmount. It imports the necessary modules from react-native-keyboard-controller and utilizes React's useEffect hook for lifecycle management.\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nexport const useResizeMode = () => {\n  useEffect(() => {\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n\n    return () => KeyboardController.setDefaultMode();\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing OverKeyboardView in React Native\nDESCRIPTION: A complete example showing how to implement OverKeyboardView to display content over the keyboard. The example uses a TextInput field with a button to show a blue square overlay when activated. The overlay can be dismissed by touching either the background or the blue square itself.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n} from \"react-native\";\nimport {\n  GestureHandlerRootView,\n  TouchableOpacity,\n} from \"react-native-gesture-handler\";\nimport { OverKeyboardView } from \"react-native-keyboard-controller\";\n\nexport default function OverKeyboardViewExample() {\n  const [isShow, setShow] = useState(false);\n\n  return (\n    <View>\n      <TextInput style={styles.input} testID=\"over_keyboard_view.input\" />\n      <Button\n        testID=\"over_keyboard_view.show\"\n        title=\"Show\"\n        onPress={() => setShow(true)}\n      />\n      <OverKeyboardView visible={isShow}>\n        <GestureHandlerRootView style={styles.fullScreen}>\n          <TouchableWithoutFeedback\n            style={styles.fullScreen}\n            testID=\"over_keyboard_view.background\"\n            onPress={() => setShow(false)}\n          >\n            <View style={styles.container}>\n              <TouchableOpacity\n                testID=\"over_keyboard_view.content\"\n                onPress={() => setShow(false)}\n              >\n                <View style={styles.background} />\n              </TouchableOpacity>\n            </View>\n          </TouchableWithoutFeedback>\n        </GestureHandlerRootView>\n      </OverKeyboardView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fullScreen: {\n    flex: 1,\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  background: {\n    width: 200,\n    height: 200,\n    backgroundColor: \"blue\",\n  },\n  input: {\n    backgroundColor: \"yellow\",\n    width: 200,\n    height: 50,\n    alignSelf: \"center\",\n    marginTop: 150,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardAvoidingView with Navigation Header Offset\nDESCRIPTION: This example shows how to use KeyboardAvoidingView with React Navigation by accounting for the header height using the useHeaderHeight hook. This ensures proper keyboard avoidance when using navigation stacks with headers.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHeaderHeight } from \"@react-navigation/elements\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nconst MyScreen = () => {\n  const headerHeight = useHeaderHeight();\n\n  return (\n    <KeyboardAvoidingView\n      behavior=\"padding\"\n      keyboardVerticalOffset={headerHeight}\n    >\n      <TextInput placeholder=\"Type here...\" />\n    </KeyboardAvoidingView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native App\nDESCRIPTION: A basic example showing how to wrap your React Native application with KeyboardProvider to enable keyboard events handling throughout your app. The component works with KeyboardControllerView to receive events during keyboard movements and make them available through context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAwareScrollView with Custom TextInput Components in React Native\nDESCRIPTION: This example demonstrates how to use KeyboardAwareScrollView from react-native-keyboard-controller to handle keyboard interactions properly. It creates a custom TextInput component that extends React Native's TextInput with additional styling and then renders multiple instances of this component within a keyboard-aware scrollable container. The component automatically adjusts its position when the keyboard appears.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardProvider in a React Native App\nDESCRIPTION: Example of how to wrap your React Native application with the KeyboardProvider component to enable keyboard event handling and animations throughout your app.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardProvider in a React Native App\nDESCRIPTION: Example showing how to implement KeyboardProvider in a React Native application. The KeyboardProvider should wrap your app components to handle keyboard events and provide keyboard-related values through context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea in React Native\nDESCRIPTION: Example implementation of KeyboardGestureArea that demonstrates how to wrap UI components and connect with a TextInput. This setup allows gesture-based keyboard control by setting the interpolator to 'ios' style, adding an offset of 50 pixels, and connecting with a TextInput via the nativeID.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea\n  interpolator=\"ios\"\n  offset={50}\n  textInputNativeID=\"composer\"\n>\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n  <TextInput nativeID=\"composer\" />\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useKeyboardHandler Hook in React Native\nDESCRIPTION: Basic example of implementing the useKeyboardHandler hook with onStart, onMove, and onEnd event handlers. Each handler must contain the 'worklet' directive to avoid runtime exceptions.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useKeyboardHandler Hook in React Native\nDESCRIPTION: Basic example of implementing the useKeyboardHandler hook with onStart, onMove, and onEnd event handlers. Each handler must contain the 'worklet' directive to avoid runtime exceptions.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom useKeyboardAnimation Hook with Navigation Focus Control in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom useKeyboardAnimation hook that changes Android's softInputMode only when a screen is focused and restores it when the screen loses focus. It uses useFocusEffect from react-navigation to trigger the mode changes only when needed.\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard Animation Hook with React Navigation\nDESCRIPTION: A custom implementation of a keyboard animation hook that uses React Navigation's useFocusEffect to properly manage Android's softInputMode. It sets softInputMode to adjustResize when a screen is focused and restores the default mode when unfocused, preventing unwanted behavior in navigation stacks.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Animation Completion with onEnd\nDESCRIPTION: Example of using the onEnd handler which is called when keyboard movement is complete. The event contains the current keyboard metrics after animation is finished.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native App\nDESCRIPTION: Example showing how to wrap your React Native application with KeyboardProvider to enable keyboard event handling and animation functionality. The provider creates a context that makes keyboard state accessible to child components.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler for Keyboard Events\nDESCRIPTION: Example of the onMove handler which is called every animation frame when the keyboard changes position. It allows tracking of the keyboard's current height and progress values.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Basic useKeyboardHandler Hook Implementation in TypeScript\nDESCRIPTION: A basic example of implementing the useKeyboardHandler hook with all available event handlers. Each handler receives keyboard events with information about the animation state.\n\nLANGUAGE: typescript\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Done Button in KeyboardToolbar\nDESCRIPTION: Implementation example showing how to add haptic feedback when the Done button is pressed using the onDoneCallback prop and react-native-haptic-feedback library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onDoneCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in React Functional Components\nDESCRIPTION: Demonstrates how to import and use the useKeyboardAnimation hook to access keyboard animation values (height and progress) in functional components.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Keyboard Animation Hook with React Navigation\nDESCRIPTION: This custom hook implementation uses useFocusEffect from React Navigation to properly manage Android softInputMode settings. It sets the softInputMode to SOFT_INPUT_ADJUST_RESIZE when the screen is focused and restores the default mode when unfocused, ensuring proper keyboard behavior across navigation transitions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating KeyboardAwareScrollView with FlatList and FlashList in React Native\nDESCRIPTION: Shows how to use KeyboardAwareScrollView with FlatList and FlashList by passing it as a renderScrollComponent prop. This approach allows for keyboard-aware behavior in virtualized lists.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlatList } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\n<FlatList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n\n// or\n\nimport { FlashList } from \"@shopify/flash-list\";\n\n<FlashList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardStickyView with Custom Offsets in React Native\nDESCRIPTION: Example demonstrating how to use the KeyboardStickyView component with custom offset values for opened and closed keyboard states. The component wraps a Footer component to make it move with the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nconst offset = { closed: 0, opened: 20 };\n\nconst StickyFooter = () => {\n  return (\n    <KeyboardStickyView offset={offset}>\n      <Footer />\n    </KeyboardStickyView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using onInteractive Handler for User Drag Interactions\nDESCRIPTION: Example of using the onInteractive handler which is called when the user manually drags the keyboard. Available on Android 11+ with KeyboardGestureArea and on iOS with keyboardDismissMode=\"interactive\".\n\nLANGUAGE: typescript\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardGestureArea with iOS-like Interpolation in React Native\nDESCRIPTION: Example of using KeyboardGestureArea with iOS-style keyboard gesture handling. The component wraps a ScrollView to enable interactive keyboard control based on user gestures within the defined area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook in Functional Components (TypeScript)\nDESCRIPTION: Basic usage example of the useReanimatedKeyboardAnimation hook in a functional component. It provides height and progress values that respond to keyboard state changes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in React Native App\nDESCRIPTION: Example of wrapping a React Native application with the KeyboardProvider component, which is required for the library to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardStickyView with Offset Configuration in React Native\nDESCRIPTION: Example of implementing the KeyboardStickyView component with custom offset configuration for keyboard open and closed states. The component wraps a Footer component to make it stick to the keyboard as it opens and closes.\n\nLANGUAGE: tsx\nCODE:\n```\nconst offset = { closed: 0, opened: 20 };\n\nconst StickyFooter = () => {\n  return (\n    <KeyboardStickyView offset={offset}>\n      <Footer />\n    </KeyboardStickyView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook with React Navigation\nDESCRIPTION: Implementation of a custom keyboard animation hook that correctly manages Android's softInputMode across screen navigation. This hook uses useFocusEffect from React Navigation to set softInputMode to adjustResize when the screen is focused and restore default mode when unfocused, solving issues with deep navigation stacks.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n  useKeyboardContext,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useKeyboardContext();\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard with KeyboardController in React Native\nDESCRIPTION: Method for hiding the keyboard that returns a Promise resolving when the keyboard is fully hidden. Works with any focused input component beyond just TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic dismiss(options?: DismissOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook with Functional Component in React Native\nDESCRIPTION: Simple example of using the useReanimatedKeyboardAnimation hook in a functional component to access keyboard animation values (height and progress).\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook with Functional Components in TSX\nDESCRIPTION: This snippet demonstrates how to implement the useReanimatedKeyboardAnimation hook in a functional React Native component to access keyboard animation values for height and progress.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Event Listeners in React Native\nDESCRIPTION: Example of how to add and remove a keyboard event listener using react-native-keyboard-controller within a React component. The code demonstrates proper subscription to the 'keyboardWillShow' event and cleanup in the useEffect hook.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler in useKeyboardHandler\nDESCRIPTION: Example of the onInteractive handler that responds to user drag gestures on the keyboard. This function is called when users manually drag the keyboard, available on Android 11+ and iOS with keyboardDismissMode='interactive'.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Tracking Keyboard Movement in React Native\nDESCRIPTION: Implementation of the onMove handler which is called every frame when the keyboard changes position. It allows tracking progress and height values during animation.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler in React Native with Worklets\nDESCRIPTION: Example of using the useFocusedInputHandler hook to intercept text changes and selection changes in a focused TextInput. The hook accepts an object with handler functions that run as worklets.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n    onSelectionChange: ({ target, selection }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OverKeyboardView in React Native\nDESCRIPTION: A complete example demonstrating how to use OverKeyboardView to display a custom view over the keyboard. The example shows how to toggle visibility with a button and handle touch events to dismiss the view.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  StyleSheet,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n} from \"react-native\";\nimport {\n  GestureHandlerRootView,\n  TouchableOpacity,\n} from \"react-native-gesture-handler\";\nimport { OverKeyboardView } from \"react-native-keyboard-controller\";\n\nexport default function OverKeyboardViewExample() {\n  const [isShow, setShow] = useState(false);\n\n  return (\n    <View>\n      <TextInput style={styles.input} testID=\"over_keyboard_view.input\" />\n      <Button\n        testID=\"over_keyboard_view.show\"\n        title=\"Show\"\n        onPress={() => setShow(true)}\n      />\n      <OverKeyboardView visible={isShow}>\n        <GestureHandlerRootView style={styles.fullScreen}>\n          <TouchableWithoutFeedback\n            style={styles.fullScreen}\n            testID=\"over_keyboard_view.background\"\n            onPress={() => setShow(false)}\n          >\n            <View style={styles.container}>\n              <TouchableOpacity\n                testID=\"over_keyboard_view.content\"\n                onPress={() => setShow(false)}\n              >\n                <View style={styles.background} />\n              </TouchableOpacity>\n            </View>\n          </TouchableWithoutFeedback>\n        </GestureHandlerRootView>\n      </OverKeyboardView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fullScreen: {\n    flex: 1,\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  background: {\n    width: 200,\n    height: 200,\n    backgroundColor: \"blue\",\n  },\n  input: {\n    backgroundColor: \"yellow\",\n    width: 200,\n    height: 50,\n    alignSelf: \"center\",\n    marginTop: 150,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation Component in React Native\nDESCRIPTION: This example demonstrates how to use the useKeyboardAnimation hook to create interactive animations that respond to keyboard events. The component renders a green square that scales and moves in response to keyboard opening and closing, plus a text input field that triggers the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler with useKeyboardHandler\nDESCRIPTION: Example of using the onInteractive handler which is called when the user directly drags the keyboard. It shows how to capture and respond to user-driven keyboard position changes.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Next Input Field\nDESCRIPTION: Example of moving focus from the current input field to the next one in sequence.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setFocusTo(\"next\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Visibility Check in React Native\nDESCRIPTION: Example of checking whether the keyboard is currently visible before performing conditional operations.\n\nLANGUAGE: typescript\nCODE:\n```\nif (KeyboardController.isVisible()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in a Functional Component\nDESCRIPTION: Example of importing and using the useKeyboardController hook in a functional component to access and modify the enabled state of the keyboard controller.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Input Fields with KeyboardController in React Native\nDESCRIPTION: This method sets focus to the selected field based on the provided parameter. It supports moving focus to the previous field, current field (restoring focus), or next field in the form.\n\nLANGUAGE: typescript\nCODE:\n```\nsetFocusTo(\"next\");\n```\n\n----------------------------------------\n\nTITLE: Complete Example of KeyboardAwareScrollView with FlatList in React Native\nDESCRIPTION: A full implementation example showing how to integrate KeyboardAwareScrollView with FlatList, including rendering TextInputs within list items and configuring the component with proper styling and behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in React Native Application\nDESCRIPTION: This example shows how to wrap your application with KeyboardProvider to enable keyboard event handling. The KeyboardProvider component works with KeyboardControllerView to receive and process keyboard movement events.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Current Keyboard State in React Native\nDESCRIPTION: Method for retrieving the last known keyboard state, including visibility, height, animation duration, and information about the focused input.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic state(): KeyboardState;\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler with useKeyboardHandler\nDESCRIPTION: Example of using the onMove handler which is called on every frame during keyboard movement. It shows how to capture keyboard progress and height values for animation purposes.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Keyboard Mode on Android\nDESCRIPTION: Restores the default windowSoftInputMode declared in the AndroidManifest.xml or app.json (for Expo). This resets any runtime changes made to the keyboard behavior.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: Example of importing and using the useKeyboardAnimation hook to access keyboard height and progress animated values in a functional component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: Example of importing and using the useReanimatedKeyboardAnimation hook from react-native-keyboard-controller to get access to keyboard height and progress animated values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard on All Platforms\nDESCRIPTION: Hides the keyboard on both iOS and Android. Unlike React Native's built-in method, this works for any focused input component, including custom input components.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard Method Signature\nDESCRIPTION: Method for hiding the keyboard on both iOS and Android, returning a Promise that resolves when the keyboard is fully hidden.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic dismiss(options?: DismissOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation in Class Components\nDESCRIPTION: Example of working with keyboard animations in class components by leveraging KeyboardContext. This approach sets Android input modes, consumes the animated values through context, and properly cleans up when unmounting.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BottomSheetKeyboardAwareScrollView Component for @gorhom/bottom-sheet\nDESCRIPTION: Implementation of a custom component that integrates KeyboardAwareScrollView with @gorhom/bottom-sheet. Uses Reanimated and bottom-sheet utilities to create a compatible scrollable component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from \"react\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardAwareScrollViewProps,\n} from \"react-native-keyboard-controller\";\nimport {\n  SCROLLABLE_TYPE,\n  createBottomSheetScrollableComponent,\n  type BottomSheetScrollViewMethods,\n} from \"@gorhom/bottom-sheet\";\nimport type { BottomSheetScrollViewProps } from \"@gorhom/bottom-sheet/src/components/bottomSheetScrollable/types\";\nimport Reanimated from \"react-native-reanimated\";\n\nconst AnimatedScrollView =\n  Reanimated.createAnimatedComponent<KeyboardAwareScrollViewProps>(\n    KeyboardAwareScrollView,\n  );\nconst BottomSheetScrollViewComponent = createBottomSheetScrollableComponent<\n  BottomSheetScrollViewMethods,\n  BottomSheetScrollViewProps\n>(SCROLLABLE_TYPE.SCROLLVIEW, AnimatedScrollView);\nconst BottomSheetKeyboardAwareScrollView = memo(BottomSheetScrollViewComponent);\n\nBottomSheetKeyboardAwareScrollView.displayName =\n  \"BottomSheetKeyboardAwareScrollView\";\n\nexport default BottomSheetKeyboardAwareScrollView as (\n  props: BottomSheetScrollViewProps & KeyboardAwareScrollViewProps,\n) => ReturnType<typeof BottomSheetKeyboardAwareScrollView>;\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in Functional Components\nDESCRIPTION: Demonstrates how to access keyboard animation values with the useKeyboardAnimation hook in a functional React component. Returns height and progress values that can be used to animate UI elements in response to keyboard changes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native App\nDESCRIPTION: Basic example of how to wrap a React Native app with the KeyboardProvider component. The provider works with KeyboardControllerView to handle keyboard events and make them available via context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in Functional Components\nDESCRIPTION: This snippet demonstrates how to import and use the useKeyboardController hook to access and modify the keyboard controller's enabled state in a functional component. It returns the enabled state and a setter function.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Complete FlatList Example with KeyboardAwareScrollView Integration\nDESCRIPTION: A complete example showing a FlatList with TextInput components using KeyboardAwareScrollView to ensure proper keyboard behavior. The example includes styling and basic list configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardStickyView with Offset in React Native\nDESCRIPTION: Example of implementing a sticky footer that moves with the keyboard using KeyboardStickyView component. The offset property defines additional spacing when the keyboard is closed (0) or opened (20).\n\nLANGUAGE: typescript\nCODE:\n```\nconst offset = { closed: 0, opened: 20 };\n\nconst StickyFooter = () => {\n  return (\n    <KeyboardStickyView offset={offset}>\n      <Footer />\n    </KeyboardStickyView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Next Input Field in React Native\nDESCRIPTION: Example of moving focus to the next input field in a form using the KeyboardController.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setFocusTo(\"next\");\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity for KeyboardToolbar Container\nDESCRIPTION: Example demonstrating how to set the opacity of the KeyboardToolbar container using hexadecimal format with the opacity prop.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar opacity=\"EE\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Focus Between Input Fields\nDESCRIPTION: Changes focus between input fields. It can set focus to the previous field, current field (restore focus), or next field in the sequence.\n\nLANGUAGE: typescript\nCODE:\n```\nsetFocusTo(\"next\");\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook in Functional Components\nDESCRIPTION: This example demonstrates how to import and use the useReanimatedKeyboardAnimation hook to access keyboard animation values in a functional React component. The hook provides height and progress values as Reanimated shared values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Using the useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: Basic example of how to use the useReanimatedFocusedInput hook in a React Native component. The hook returns an input object as a SharedValue that can be used to get information about the currently focused TextInput.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors in KeyboardToolbar\nDESCRIPTION: Example of customizing the theme colors for KeyboardToolbar by extending the DefaultKeyboardToolbarTheme and overriding specific color values for both dark and light modes.\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  DefaultKeyboardToolbarTheme,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst theme: KeyboardToolbarProps[\"theme\"] = {\n  ...DefaultKeyboardToolbarTheme,\n  dark: {\n    ...DefaultKeyboardToolbarTheme.dark,\n    primary: \"#FFCC00\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Promise-Based Keyboard Dismissal in React Native\nDESCRIPTION: Example of the new promise-based dismiss method that provides a cleaner way to handle code execution after keyboard dismissal. The await syntax eliminates the need for event listeners to track keyboard state changes.\n\nLANGUAGE: ts\nCODE:\n```\nimport { KeyboardController } from \"react-native-keyboard-controller\";\n\nawait KeyboardController.dismiss();\nsetVisible(true);\n```\n\n----------------------------------------\n\nTITLE: Using onInteractive Handler with useKeyboardHandler\nDESCRIPTION: Example of implementing the onInteractive handler which is called when the user manually drags the keyboard. This is available on Android 11+ with KeyboardGestureArea and on iOS with keyboardDismissMode=\"interactive\".\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler with Event Handlers in React Native\nDESCRIPTION: Example showing how to use the useFocusedInputHandler hook with onChangeText and onSelectionChange handlers. The hook accepts a configuration object with worklet functions and a dependencies array.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n    onSelectionChange: ({ target, selection }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Done Button in KeyboardToolbar\nDESCRIPTION: Example of implementing haptic feedback when the done button is pressed in KeyboardToolbar, with platform-specific feedback options using react-native-haptic-feedback.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onDoneCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler for Interactive Keyboard Events\nDESCRIPTION: Implementation of the useKeyboardHandler hook with an onInteractive callback to detect and respond to interactive keyboard movements. This allows differentiating between standard keyboard open/close events and user-driven interactive dismissal.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Using onStart Handler to Detect Keyboard Appearance\nDESCRIPTION: Example of using the onStart handler which is called before keyboard movement begins. The event contains destination values for keyboard metrics.\n\nLANGUAGE: typescript\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: Basic example of importing and using the useReanimatedKeyboardAnimation hook to access keyboard height and animation progress values with Reanimated in a functional component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler Hook with Text Change and Selection Events in React Native\nDESCRIPTION: Basic example of implementing the useFocusedInputHandler hook to intercept text change and selection change events from a focused TextInput component. The hook takes an object with handler functions and a dependencies array.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n    onSelectionChange: ({ target, selection }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Interactive Keyboard Movement\nDESCRIPTION: Example demonstrating how to use the useKeyboardHandler hook with an onInteractive handler to respond to interactive keyboard movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Handling onMove Event in useKeyboardHandler Hook\nDESCRIPTION: Example of implementing the onMove handler which is called during keyboard animation. This allows tracking keyboard position in real-time by updating shared values with current height and progress.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Next Button Action in KeyboardToolbar\nDESCRIPTION: Example showing how to prevent the default action of the Next button (moving focus to next input) by calling preventDefault() in the callback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onNextCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the next input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Android Interactive Keyboard Dismissal\nDESCRIPTION: Implementation of KeyboardGestureArea that wraps a ScrollView to enable interactive keyboard dismissal on Android. The 'interpolator' prop is set to 'ios' to mimic iOS-style keyboard behavior.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Keyboard Controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager with the save flag.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler for Keyboard Events\nDESCRIPTION: Example of the onInteractive handler which triggers when users manually drag the keyboard. This handler is only available on Android 11+ with KeyboardGestureArea or on iOS with keyboardDismissMode=\"interactive\".\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Listener with React Hooks\nDESCRIPTION: Example showing how to use KeyboardEvents listener with React hooks. It demonstrates how to add a listener for the keyboardWillShow event within a useEffect hook and properly remove it during component cleanup.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Setting Input Mode in Android with KeyboardController\nDESCRIPTION: This method dynamically changes the windowSoftInputMode (softwareKeyboardLayoutMode in Expo) during runtime on Android. It takes an argument that specifies the desired input mode.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: Setting Toolbar Opacity in KeyboardToolbar\nDESCRIPTION: Example of customizing the opacity of the KeyboardToolbar container by setting the opacity prop with a hexadecimal value.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar opacity=\"EE\" />\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Input Mode in Android\nDESCRIPTION: Restores the default windowSoftInputMode (softwareKeyboardLayoutMode in Expo) that was declared in the AndroidManifest.xml or app.json file.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Start Event in React Native\nDESCRIPTION: Example of implementing the onStart handler which is called before keyboard movement begins. The event provides information about the keyboard's destination state.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using onStart Handler with useKeyboardHandler\nDESCRIPTION: Example of implementing the onStart handler which is called before keyboard movement begins. The event provides destination values for keyboard height and progress.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets to KeyboardToolbar\nDESCRIPTION: Example showing how to apply safe area insets to KeyboardToolbar to avoid overlap with system UI elements, especially important in landscape orientation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\n// ...\n\nconst insets = useSafeAreaInsets();\n\n<KeyboardToolbar insets={insets} />;\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal in Android\nDESCRIPTION: Wrapping a ScrollView with KeyboardGestureArea to enable gesture tracking and interactive keyboard dismissal on Android.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Yarn\nDESCRIPTION: Command to install the react-native-keyboard-controller package using Yarn package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Interactive Keyboard Events\nDESCRIPTION: Implementation of the useKeyboardHandler hook to detect and respond to interactive keyboard movements. The onInteractive callback is used to differentiate between standard keyboard movements and user-driven interactive dismissals.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native Application\nDESCRIPTION: Example of how to wrap your React Native application with the KeyboardProvider component, which enables keyboard event handling throughout the app. The provider should be placed at the root level of your component tree.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler for Keyboard Position Tracking\nDESCRIPTION: Using onMove handler to track keyboard position during animation. This function is called every frame when the keyboard changes position, allowing developers to apply animations based on keyboard movement.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Basic useKeyboardHandler Implementation in React Native\nDESCRIPTION: Example of using the useKeyboardHandler hook to access keyboard lifecycle events. This hook requires worklet directives in all handler functions.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Done Button Text in KeyboardToolbar\nDESCRIPTION: Example of changing the text of the done button in KeyboardToolbar by using the doneText prop to specify a custom label.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar doneText=\"Close\" />\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea with iOS-like Interpolation in React Native\nDESCRIPTION: This example demonstrates how to implement the KeyboardGestureArea component with iOS-style interpolation. The component is wrapped around a ScrollView, allowing gesture-based keyboard control for all content within the ScrollView.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in react-native or expo bare workflow\nDESCRIPTION: Modification needed in android/build.gradle to specify the correct Kotlin version to resolve incompatible version errors during Android builds.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using onEnd Handler for Keyboard Movement Completion\nDESCRIPTION: Example of using the onEnd handler which is called when the keyboard has completed its movement. The event contains the current keyboard metrics after animation.\n\nLANGUAGE: typescript\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea Component in React Native\nDESCRIPTION: Example of implementing KeyboardGestureArea with iOS-style interpolation and an offset of 50 pixels. This wraps a ScrollView and enables gesture-controlled keyboard positioning for Android 11+ devices.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\" offset={50}>\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler for Keyboard Animation Completion\nDESCRIPTION: Using onEnd handler to detect when keyboard animation completes. This function provides final keyboard metrics after movement has completed.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook in React Native\nDESCRIPTION: Basic implementation of the useKeyboardHandler hook showing the structure with all available callback functions. Each handler requires a 'worklet' directive to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Previous Button in KeyboardToolbar\nDESCRIPTION: Example showing how to add haptic feedback when the Previous button is pressed using the onPrevCallback prop and react-native-haptic-feedback library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onPrevCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in React Native Function Components\nDESCRIPTION: A simple example of using the useKeyboardAnimation hook in a functional component to access keyboard height and progress animated values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler for Keyboard Animation Completion\nDESCRIPTION: Using onEnd handler to detect when keyboard animation completes. This function provides final keyboard metrics after movement has completed.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in Class Components\nDESCRIPTION: Shows how to use keyboard animation with class components by utilizing KeyboardContext, setting Android input modes, and consuming animated values. Includes proper lifecycle management.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook with Basic Structure in React Native\nDESCRIPTION: Basic implementation of the useKeyboardHandler hook showing the structure with all four possible event handlers: onStart, onMove, onInteractive, and onEnd. Each handler requires a 'worklet' directive.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents Listener in React Hooks\nDESCRIPTION: Example of implementing a keyboard event listener using React's useEffect hook. Shows how to subscribe to the 'keyboardWillShow' event and properly clean up the listener when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo managed workflow\nDESCRIPTION: JSON configuration to add to app.json or app.config.js when using Expo managed workflow to set the correct Kotlin version with the expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea with iOS-like Interpolation in React Native\nDESCRIPTION: Example of implementing the KeyboardGestureArea component with iOS-like interpolation behavior to enable interactive keyboard gestures within a ScrollView. The component allows users to control keyboard position through gestures in the defined area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Enabling 120 FPS on iOS ProMotion Displays\nDESCRIPTION: A diff showing the required modification to Info.plist file to enable 120 FPS animations on iOS devices with ProMotion displays when using onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard Visibility Method\nDESCRIPTION: Method for determining if the keyboard is currently visible, returning a boolean value.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic isVisible(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Handling onEnd Event in useKeyboardHandler Hook\nDESCRIPTION: Example of implementing the onEnd handler which is called when keyboard movement completes. The event contains the final keyboard metrics after animation is complete.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler for Keyboard Drag Gestures\nDESCRIPTION: Example of using the onInteractive handler which is called when the user manually drags the keyboard. This is available on Android 11+ and requires KeyboardGestureArea.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardGestureArea with iOS-like Interpolation in React Native\nDESCRIPTION: This example demonstrates how to use the KeyboardGestureArea component with iOS-style interpolation behavior. The component wraps a ScrollView, allowing gesture-based control of the keyboard within the specified area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: MutexLockWithTimeout C++ Exception Stacktrace\nDESCRIPTION: Example stacktrace of the MutexLockWithTimeout C++ exception that occurs when using KeyboardProvider or KeyboardAwareScrollView on Android with the new architecture enabled.\n\nLANGUAGE: bash\nCODE:\n```\nNonPI::MutexLockWithTimeout at line 384 within libc\noffset 726000) (std::__ndk1::mutex::lock at line 12 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Binding::schedulerDidFinishTransaction at line 84 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Scheduler::uiManagerDidFinishTransaction at line 68 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::UIManager::shadowTreeDidFinishTransaction const at line 64 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::mount const at line 348 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::tryCommit const at line 2612 within split_config.arm64_v8a.apk\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler in useKeyboardHandler\nDESCRIPTION: Example of the onEnd handler that captures final keyboard state. This function is called when keyboard movement completes, providing the current metrics of the keyboard position.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea with ScrollView and TextInput in React Native\nDESCRIPTION: Example showing how to implement KeyboardGestureArea with iOS-like interpolation behavior, a vertical offset, and a linked TextInput through nativeID. This creates a gesture-responsive area that controls keyboard visibility.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea\n  interpolator=\"ios\"\n  offset={50}\n  textInputNativeID=\"composer\"\n>\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n  <TextInput nativeID=\"composer\" />\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea Component with ScrollView in React Native\nDESCRIPTION: Example of implementing the KeyboardGestureArea component with an iOS-style interpolator and a 50-pixel offset. This wraps a ScrollView to enable gesture-based keyboard control in the specified region.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\" offset={50}>\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Test Case for Keyboard Animation in React Native\nDESCRIPTION: A complete test example demonstrating how to test a component that uses useKeyboardAnimation hook. It tests that a component's translateY style property correctly updates based on keyboard height changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal on Android\nDESCRIPTION: Implementation showing how to wrap a ScrollView with KeyboardGestureArea to enable interactive keyboard dismissal on Android. The interpolator prop is set to \"ios\" to mimic iOS keyboard behavior.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Previous Button Behavior in KeyboardToolbar\nDESCRIPTION: Example showing how to prevent the default previous input focus action when pressing the Previous button by calling preventDefault() on the event in the onPrevCallback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onPrevCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the prev input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Handler for Keyboard Events\nDESCRIPTION: Example of the onStart handler that detects when the keyboard is about to appear. This is called before keyboard movement begins with destination values for height and progress.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for react-native-keyboard-controller\nDESCRIPTION: Configures the Jest mock for the react-native-keyboard-controller library. This code should be added to your Jest setup file to enable testing of components that use the keyboard controller.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents Listeners in React Native\nDESCRIPTION: Example of how to subscribe to keyboard events using react-native-keyboard-controller within a React component. The code demonstrates setting up an event listener for the keyboardWillShow event and properly cleaning it up when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in Class Components\nDESCRIPTION: This snippet shows how to use KeyboardController and KeyboardContext to implement keyboard animation tracking in class components. It demonstrates proper setup, including handling Android input modes and cleanup.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native Application\nDESCRIPTION: Basic example showing how to wrap a React Native application with the KeyboardProvider component. The component enables keyboard awareness and animation capabilities throughout the app.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Component with useKeyboardAnimation Hook\nDESCRIPTION: This example demonstrates testing a React component that uses the useKeyboardAnimation hook from react-native-keyboard-controller. It shows how to mock different keyboard states and verify that the component updates its styles correctly based on keyboard position changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Previous Button Action in KeyboardToolbar\nDESCRIPTION: Example showing how to prevent the default action (moving focus to the previous input) when the Previous button is pressed by using preventDefault() in the callback function.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onPrevCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the prev input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to KeyboardToolbar in React Native\nDESCRIPTION: Example of adding custom content to the middle section of the KeyboardToolbar, such as an AutoFill component that's conditionally displayed based on application state.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  content={\n    showAutoFill ? (\n      <AutoFillContacts onContactSelected={onContactSelected} />\n    ) : null\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea with iOS-style Interpolation in React Native\nDESCRIPTION: Example of implementing KeyboardGestureArea with iOS-style interpolation wrapped around a ScrollView. This configuration allows for interactive keyboard control through gestures in the specified area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: FocusedInputLayoutChangedEvent Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the data structure returned by the useReanimatedFocusedInput hook. It contains information about the focused TextInput including its target tag, parent ScrollView tag, and detailed layout measurements.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n  parentScrollViewTarget: number; // tag of the parent ScrollView\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Done Button Action in KeyboardToolbar\nDESCRIPTION: Example showing how to prevent the default action (dismissing the keyboard) when the Done button is pressed by using preventDefault() in the callback function.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onDoneCallback={(e) => {\n    e.preventDefault(); // keyboard will not be dismissed, since we cancelled the default action\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native App\nDESCRIPTION: This example shows how to wrap a React Native application with the KeyboardProvider component, which enables keyboard movement events to be tracked and mapped to Animated/Reanimated values and stored in context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Touchable Component for Toolbar Buttons\nDESCRIPTION: Example showing how to provide a custom button component for the KeyboardToolbar. This allows replacing the default buttons with a custom TouchableOpacity implementation for next, previous, and done buttons.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomButton: KeyboardToolbarProps[\"button\"] = ({\n  children,\n  onPress,\n}) => <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n\n// ...\n\n<KeyboardToolbar button={CustomButton} />;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to KeyboardToolbar in React Native\nDESCRIPTION: Example showing how to add custom content to the middle section of the KeyboardToolbar. This allows for context-sensitive UI elements like AutoFill suggestions.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  content={\n    showAutoFill ? (\n      <AutoFillContacts onContactSelected={onContactSelected} />\n    ) : null\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Keyboard State in React Native\nDESCRIPTION: Method signature for retrieving the last keyboard state information or null if the keyboard hasn't been shown yet.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic state(): KeyboardEventData | null;\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Done Button Action in KeyboardToolbar\nDESCRIPTION: Example of preventing the default keyboard dismiss action when the done button is pressed by using preventDefault() in the callback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onDoneCallback={(e) => {\n    e.preventDefault(); // keyboard will not be dismissed, since we cancelled the default action\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Done Button Text in KeyboardToolbar\nDESCRIPTION: Simple example showing how to change the text displayed on the Done button to a custom string, in this case changing it from the default 'Done' to 'Close'.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar doneText=\"Close\" />\n```\n\n----------------------------------------\n\nTITLE: Listening to Keyboard Events in React Native\nDESCRIPTION: Example showing how to use useEffect hook to listen for keyboard events. This demonstrates adding a listener for keyboardWillShow event and properly removing it when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Android Input Mode in React Native\nDESCRIPTION: Method signature for restoring the default windowSoftInputMode as declared in AndroidManifest.xml or app.json in Expo.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setDefaultMode(): void;\n```\n\n----------------------------------------\n\nTITLE: Adding ProMotion Support for iOS in Info.plist\nDESCRIPTION: Configuration change needed in Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard While Maintaining Focus in React Native\nDESCRIPTION: Example of hiding the keyboard while keeping focus on the input field by using the keepFocus option.\n\nLANGUAGE: typescript\nCODE:\n```\nawait KeyboardController.dismiss({ keepFocus: true });\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation with Class Components in React Native\nDESCRIPTION: Example of implementing keyboard animation in class components using KeyboardContext, including proper setup and teardown of Android input modes for keyboard resizing behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: A basic example of importing and using the useKeyboardAnimation hook in a functional component. The hook provides height and progress animated values for keyboard animations.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Icons in KeyboardToolbar\nDESCRIPTION: Example of rendering custom icons for the previous and next buttons in KeyboardToolbar using the icon prop. This implementation uses emoji-based navigation indicators.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler for User Drag Gestures\nDESCRIPTION: Example of implementing the onInteractive handler which is called when users manually drag the keyboard, available on Android 11+ and iOS with keyboardDismissMode=\"interactive\".\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Android Soft Input Mode in React Native\nDESCRIPTION: Sets the Android windowSoftInputMode during runtime to control keyboard behavior. This example changes the mode to SOFT_INPUT_ADJUST_RESIZE.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setInputMode(mode: AndroidSoftInputModes): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler in useKeyboardHandler\nDESCRIPTION: Example of the onMove handler that tracks keyboard movement. This function is called every frame when the keyboard changes position, allowing real-time tracking of progress and height.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Done Button in KeyboardToolbar\nDESCRIPTION: Example of adding haptic feedback when the Done button is pressed using the onDoneCallback prop, which provides a tactile response while maintaining the default keyboard dismissal functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onDoneCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal on Android\nDESCRIPTION: Implementation showing how to wrap a ScrollView with KeyboardGestureArea to enable interactive keyboard dismissal on Android. The interpolator prop is set to 'ios' to customize the dismissal behavior.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal on Android\nDESCRIPTION: Implementation of KeyboardGestureArea to enable interactive keyboard dismissal on Android. The component wraps a ScrollView and uses the 'ios' interpolator for a smooth dismissal animation.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Android Build Gradle\nDESCRIPTION: Code for modifying the Android build.gradle file to specify a higher Kotlin version to resolve compatibility issues during builds.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyboardToolbar Theme in React Native\nDESCRIPTION: Shows how to customize the theme colors of KeyboardToolbar by extending the default theme. This example demonstrates overriding only the primary color for dark mode while keeping other default colors.\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  DefaultKeyboardToolbarTheme,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst theme: KeyboardToolbarProps[\"theme\"] = {\n  ...DefaultKeyboardToolbarTheme,\n  dark: {\n    ...DefaultKeyboardToolbarTheme.dark,\n    primary: \"#FFCC00\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Previous Button in KeyboardToolbar\nDESCRIPTION: Example of implementing haptic feedback for the previous button in KeyboardToolbar using react-native-haptic-feedback with platform-specific settings.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onPrevCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal on Android\nDESCRIPTION: Implementation showing how to wrap a ScrollView with KeyboardGestureArea to enable interactive keyboard dismissal with iOS-like interpolation.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in Android build.gradle\nDESCRIPTION: Configuration for setting the correct Kotlin version in Android build.gradle to resolve compatibility issues with the library.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FocusedInputSelectionChangedEvent Type Definition\nDESCRIPTION: Type definition for the event object passed to the onSelectionChange handler of useFocusedInputHandler. The event contains the target node ID and detailed selection information including coordinates and positions.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputSelectionChangedEvent = {\n  target: number;\n  selection: {\n    start: {\n      x: number;\n      y: number;\n      position: number;\n    };\n    end: {\n      x: number;\n      y: number;\n      position: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Input Mode with KeyboardController in React Native for Android\nDESCRIPTION: This method dynamically changes the windowSoftInputMode (softwareKeyboardLayoutMode in Expo) during runtime in Android applications. It takes an argument that specifies the desired input mode, such as SOFT_INPUT_ADJUST_RESIZE.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: FocusedInputSelectionChangedEvent Type Definition in React Native\nDESCRIPTION: Type definition for the event object received by the onSelectionChange handler in useFocusedInputHandler. The event contains the target identifier and selection details with start and end coordinates and positions.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputSelectionChangedEvent = {\n  target: number;\n  selection: {\n    start: {\n      x: number;\n      y: number;\n      position: number;\n    };\n    end: {\n      x: number;\n      y: number;\n      position: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Component in KeyboardToolbar with React Native\nDESCRIPTION: Example of how to provide a custom button component to the KeyboardToolbar using the 'button' prop. This allows substituting the default button implementation with a custom touchable component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomButton: KeyboardToolbarProps[\"button\"] = ({\n  children,\n  onPress,\n}) => <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n\n// ...\n\n<KeyboardToolbar button={CustomButton} />;\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Done Button in KeyboardToolbar\nDESCRIPTION: Example showing how to add haptic feedback when the Done button is pressed using the onDoneCallback prop and react-native-haptic-feedback library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onDoneCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea with ScrollView in React Native\nDESCRIPTION: Example of implementing KeyboardGestureArea with iOS-style interpolation wrapping a ScrollView component. This setup allows users to control keyboard position through gestures within the defined area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager with the --save flag.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler for Keyboard Animation Completion\nDESCRIPTION: Example of implementing the onEnd handler which is called when keyboard movement completes, containing the current keyboard metrics after animation.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Toolbar Opacity in KeyboardToolbar\nDESCRIPTION: Example showing how to set the opacity of the KeyboardToolbar container using a hexadecimal value. This affects the transparency of the entire toolbar.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar opacity=\"EE\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Focus with KeyboardController\nDESCRIPTION: This method sets focus to a specified field relative to the current focus. It accepts values 'prev' for previous field, 'current' for the last focused field, or 'next' for the next field.\n\nLANGUAGE: typescript\nCODE:\n```\nsetFocusTo(\"next\");\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler for User Keyboard Dragging\nDESCRIPTION: Example of using the onInteractive handler which is called when users manually drag the keyboard. This feature requires Android 11+ with KeyboardGestureArea or iOS with keyboardDismissMode=\"interactive\" on ScrollView.\n\nLANGUAGE: typescript\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Data Structure in TypeScript\nDESCRIPTION: Definition of the TypeScript interface for keyboard event data. The structure includes height of the keyboard, duration of the animation, timestamp of the event, and the target TextInput tag.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager with the save flag.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Enabling 120 FPS Animation in Info.plist for iOS\nDESCRIPTION: Configuration changes needed in Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using the onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyboardToolbar Theme Colors in React Native\nDESCRIPTION: Example of customizing the theme colors for the KeyboardToolbar by extending the DefaultKeyboardToolbarTheme with custom primary color for dark mode.\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  DefaultKeyboardToolbarTheme,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst theme: KeyboardToolbarProps[\"theme\"] = {\n  ...DefaultKeyboardToolbarTheme,\n  dark: {\n    ...DefaultKeyboardToolbarTheme.dark,\n    primary: \"#FFCC00\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider Component in React Native\nDESCRIPTION: Example of how to wrap your React Native application with the KeyboardProvider component, which is required for the keyboard controller functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the structure of keyboard event data in react-native-keyboard-controller. Each event contains the keyboard height, animation duration, event timestamp, and the tag of the focused TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider Component in React Native\nDESCRIPTION: Example of how to wrap your React Native application with the KeyboardProvider component, which is required for the keyboard controller functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: Basic example of importing and using the useKeyboardAnimation hook to access the height and progress animated values for keyboard animations.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard Visibility in React Native\nDESCRIPTION: Method for determining if the keyboard is currently visible, returning a boolean value that can be used for conditional logic in the application.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic isVisible(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Previous Button Action in KeyboardToolbar\nDESCRIPTION: Example showing how to prevent the default action of the Previous button (moving focus to previous input) by calling preventDefault() in the callback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onPrevCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the prev input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Input Mode to SOFT_INPUT_ADJUST_RESIZE\nDESCRIPTION: Example of setting the Android input mode to SOFT_INPUT_ADJUST_RESIZE, which adjusts the window size when the keyboard appears.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: Adding Blur Effect to KeyboardToolbar in React Native\nDESCRIPTION: Implementation of a custom blur effect for the KeyboardToolbar using @react-native-community/blur. This follows iOS Human Interface Guidelines by adding a blur effect similar to the native iOS keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlurView } from \"@react-native-community/blur\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomBlur: KeyboardToolbarProps[\"blur\"] = ({ children }) => (\n  <BlurView\n    blurType=\"chromeMaterial\"\n    blurAmount={10}\n    reducedTransparencyFallbackColor=\"white\"\n    style={{ position: \"absolute\", top: 0, left: 0, bottom: 0, right: 0 }}\n  >\n    {children}\n  </BlurView>\n);\n\n// ...\n\n<KeyboardToolbar blur={CustomBlur} opacity=\"4F\" />;\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation with Class Components in React Native\nDESCRIPTION: Example of implementing keyboard animation in a class component using KeyboardContext, including proper setup and cleanup of Android soft input modes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for React Native Keyboard Controller\nDESCRIPTION: Code to add to Jest setup file to enable mocking of the react-native-keyboard-controller library for unit testing.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents Listener in React Native\nDESCRIPTION: Demonstrates how to add and remove a keyboard event listener using React useEffect hook. The example shows subscribing to the 'keyboardWillShow' event and proper cleanup.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Blur Effect to KeyboardToolbar\nDESCRIPTION: Implementation of a custom blur effect for KeyboardToolbar using the @react-native-community/blur package. This follows iOS Human Interface Guidelines by applying a blur effect that mimics the native keyboard appearance.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlurView } from \"@react-native-community/blur\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomBlur: KeyboardToolbarProps[\"blur\"] = ({ children }) => (\n  <BlurView\n    blurType=\"chromeMaterial\"\n    blurAmount={10}\n    reducedTransparencyFallbackColor=\"white\"\n    style={{ position: \"absolute\", top: 0, left: 0, bottom: 0, right: 0 }}\n  >\n    {children}\n  </BlurView>\n);\n\n// ...\n\n<KeyboardToolbar blur={CustomBlur} opacity=\"4F\" />;\n```\n\n----------------------------------------\n\nTITLE: Setting Input Mode to SOFT_INPUT_ADJUST_RESIZE in React Native\nDESCRIPTION: Example of using KeyboardController to set the Android input mode to SOFT_INPUT_ADJUST_RESIZE, which changes how the app layout responds to keyboard appearance.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: Getting Keyboard State Method\nDESCRIPTION: Method for retrieving the last known keyboard state, returning null if the keyboard has not been shown yet.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic state(): KeyboardEventData | null;\n```\n\n----------------------------------------\n\nTITLE: Setting Input Mode with KeyboardController in React Native\nDESCRIPTION: This method dynamically changes the windowSoftInputMode (softwareKeyboardLayoutMode in Expo) during runtime on Android. It takes an argument specifying the desired input mode, in this case SOFT_INPUT_ADJUST_RESIZE.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for FocusedInputLayoutChangedEvent\nDESCRIPTION: TypeScript interface defining the structure of the data returned by the useReanimatedFocusedInput hook. It includes properties for the target TextInput, parent ScrollView, and detailed layout information.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n  parentScrollViewTarget: number; // tag of the parent ScrollView\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard in React Native\nDESCRIPTION: Method signature for hiding the keyboard on both Android and iOS. Returns a Promise that resolves when the keyboard is fully hidden.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic dismiss(options?: DismissOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Setting SOFT_INPUT_ADJUST_RESIZE Mode in React Native\nDESCRIPTION: Practical example of setting the Android input mode to SOFT_INPUT_ADJUST_RESIZE, which adjusts the window size when the keyboard appears.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: Type Checking with TypeScript for react-native-keyboard-controller\nDESCRIPTION: Command to verify that code passes TypeScript type checking.\n\nLANGUAGE: sh\nCODE:\n```\nyarn typescript\n```\n\n----------------------------------------\n\nTITLE: Customizing Done Button Text in KeyboardToolbar\nDESCRIPTION: Example showing how to customize the text displayed on the Done button of the KeyboardToolbar component.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar doneText=\"Close\" />\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of keyboard event data. It includes properties for keyboard height, animation duration, event timestamp, target input field, keyboard type, and appearance.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n  type: string; // `keyboardType` property from focused `TextInput`\n  appearance: string; // `keyboardAppearance` property from focused `TextInput`\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController to Set Input Mode in React Native\nDESCRIPTION: Example hook demonstrating how to use KeyboardController to change the Android soft input mode to SOFT_INPUT_ADJUST_RESIZE and restore the default mode on component unmount. This pattern is useful for temporarily changing keyboard behavior in specific components.\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nexport const useResizeMode = () => {\n  useEffect(() => {\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n\n    return () => KeyboardController.setDefaultMode();\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController hook with setEnabled method in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the useKeyboardController hook to toggle the keyboard controller functionality. It shows checking the current enabled status and disabling the keyboard controller for specific screens, causing a fallback to default Android behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\n// if you want to know whether is module active at the moment\nconsole.log(enabled);\n\n// disable keyboard controller on a specific screen\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Android Software Input Mode in React Native\nDESCRIPTION: Method for dynamically changing the windowSoftInputMode (softwareKeyboardLayoutMode in Expo) during runtime in Android applications. Takes an argument specifying the desired input mode.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setInputMode(mode: AndroidSoftInputModes): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Input Mode for Android Keyboard Behavior\nDESCRIPTION: Sets the windowSoftInputMode (softwareKeyboardLayoutMode in Expo) during runtime on Android. This example changes the input mode to SOFT_INPUT_ADJUST_RESIZE.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setInputMode(AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);\n```\n\n----------------------------------------\n\nTITLE: Testing Component with Keyboard Animation in React Native\nDESCRIPTION: This example demonstrates how to test a component that uses the useKeyboardAnimation hook from react-native-keyboard-controller. It shows how to simulate different keyboard states and verify that the component responds correctly to keyboard height changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Content in KeyboardToolbar\nDESCRIPTION: Example showing how to add custom content in the middle section of the KeyboardToolbar using the content prop, conditionally displaying an AutoFillContacts component.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  content={\n    showAutoFill ? (\n      <AutoFillContacts onContactSelected={onContactSelected} />\n    ) : null\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Keyboard Dismissal in React Native\nDESCRIPTION: Example of using KeyboardController to hide the keyboard and waiting for the dismissal to complete before proceeding with code execution.\n\nLANGUAGE: typescript\nCODE:\n```\nawait KeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Software Input Mode in React Native\nDESCRIPTION: Method for restoring the default windowSoftInputMode (softwareKeyboardLayoutMode in Expo) as declared in the AndroidManifest.xml or app.json configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setDefaultMode(): void;\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the structure of keyboard event data that is passed to event listeners. Includes properties for keyboard height, animation duration, timestamp, target input tag, keyboard type, and appearance.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n  type: string; // `keyboardType` property from focused `TextInput`\n  appearance: string; // `keyboardAppearance` property from focused `TextInput`\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components via Context\nDESCRIPTION: Shows how to access keyboard controller functionality in class components using the KeyboardContext. This enables class components to check if the module is enabled and toggle its state as needed.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardAwareScrollView Example with Multiple TextInputs\nDESCRIPTION: A full implementation showing KeyboardAwareScrollView with multiple TextInput components, demonstrating how the keyboard-aware behavior adjusts the scroll position when the keyboard appears.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Next Button Action in KeyboardToolbar\nDESCRIPTION: Example demonstrating how to prevent the default action (moving focus to the next input) when the Next button is pressed by using preventDefault() in the callback function.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onNextCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the next input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting AndroidSoftInputMode using KeyboardController in React Native\nDESCRIPTION: This code creates a custom hook that enables SOFT_INPUT_ADJUST_RESIZE mode when a component mounts and restores the default mode on unmount. It imports KeyboardController and AndroidSoftInputModes from react-native-keyboard-controller to manage keyboard behavior.\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nexport const useResizeMode = () => {\n  useEffect(() => {\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n\n    return () => KeyboardController.setDefaultMode();\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard While Maintaining Focus in React Native\nDESCRIPTION: Example of hiding the keyboard while keeping the input field focused by using the keepFocus option with the dismiss method.\n\nLANGUAGE: typescript\nCODE:\n```\nawait KeyboardController.dismiss({ keepFocus: true });\n```\n\n----------------------------------------\n\nTITLE: Complete FlatList Integration Example with KeyboardAwareScrollView\nDESCRIPTION: A comprehensive example showing a complete implementation of KeyboardAwareScrollView with FlatList, including TextInput rendering and styling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to KeyboardToolbar in React Native\nDESCRIPTION: Example of rendering custom content in the middle of the KeyboardToolbar by using the content prop to conditionally display an AutoFillContacts component.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  content={\n    showAutoFill ? (\n      <AutoFillContacts onContactSelected={onContactSelected} />\n    ) : null\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with Padding Behavior in React Native\nDESCRIPTION: This example demonstrates how to implement KeyboardAvoidingView with 'padding' behavior to automatically adjust content position when the keyboard appears. The component includes a form with text inputs and a submit button inside a styled container.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition for KeyboardEventData in react-native-keyboard-controller\nDESCRIPTION: Defines the structure of keyboard event data with properties for height, duration, timestamp, and target. This type is used for all keyboard events in the library.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in Functional Components\nDESCRIPTION: This snippet demonstrates how to import and use the useKeyboardController hook in a functional React component. It shows how to destructure the enabled state and setEnabled function from the hook, and then how to disable the keyboard controller functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Visibility Check\nDESCRIPTION: Example of conditionally executing code based on keyboard visibility status.\n\nLANGUAGE: typescript\nCODE:\n```\nif (KeyboardController.isVisible()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Using isVisible to Check Keyboard Status in React Native\nDESCRIPTION: Example of using KeyboardController to conditionally execute code based on whether the keyboard is currently visible or not.\n\nLANGUAGE: typescript\nCODE:\n```\nif (KeyboardController.isVisible()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Keyboard Movement with useKeyboardHandler Hook\nDESCRIPTION: Implementing the useKeyboardHandler hook with an onInteractive handler to respond to user-initiated keyboard movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Blur Effect to KeyboardToolbar in React Native\nDESCRIPTION: Example of implementing a custom blur effect for the KeyboardToolbar using @react-native-community/blur library, which helps match iOS Human Interface Guidelines for keyboard appearance.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlurView } from \"@react-native-community/blur\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomBlur: KeyboardToolbarProps[\"blur\"] = ({ children }) => (\n  <BlurView\n    blurType=\"chromeMaterial\"\n    blurAmount={10}\n    reducedTransparencyFallbackColor=\"white\"\n    style={{ position: \"absolute\", top: 0, left: 0, bottom: 0, right: 0 }}\n  >\n    {children}\n  </BlurView>\n);\n\n// ...\n\n<KeyboardToolbar blur={CustomBlur} opacity=\"4F\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native App\nDESCRIPTION: This snippet demonstrates how to use the KeyboardProvider component to wrap your React Native application. The KeyboardProvider works with KeyboardControllerView to receive events during keyboard movements and makes these events available through a context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the structure of keyboard event data containing height, duration, timestamp, and target properties. This type is used across all keyboard events in the library.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea with ScrollView in React Native\nDESCRIPTION: Example of implementing the KeyboardGestureArea component with iOS-style interpolation, wrapping a ScrollView. This setup allows for gesture-based keyboard position control within the ScrollView area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Interactive Keyboard Events in React Native\nDESCRIPTION: Implementation of the useKeyboardHandler hook with an onInteractive handler to react to interactive keyboard movements. This allows differentiating between standard keyboard shows/hides and user-driven interactive movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Next and Previous Icons in KeyboardToolbar\nDESCRIPTION: Demonstrates how to provide custom icons for the next and previous buttons in KeyboardToolbar using the icon prop. The example uses emoji text instead of default icons.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler for Keyboard Animation Completion\nDESCRIPTION: Example of the onEnd handler that executes when keyboard movement is complete. This receives the final keyboard metrics after the animation has finished.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents Listener in React Native\nDESCRIPTION: Example of implementing a keyboard event listener using the useEffect hook. The code demonstrates how to listen for the 'keyboardWillShow' event and properly clean up the listener when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation in React Native Class Components\nDESCRIPTION: Example of using keyboard animation in a class component by leveraging KeyboardContext. Shows how to set Android input modes and consume the animated values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to KeyboardToolbar in React Native\nDESCRIPTION: Demonstrates how to add custom content to the middle section of the KeyboardToolbar using the content prop. This example shows conditional rendering of an AutoFillContacts component.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  content={\n    showAutoFill ? (\n      <AutoFillContacts onContactSelected={onContactSelected} />\n    ) : null\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom ScrollView Component with KeyboardAwareScrollView in React Native\nDESCRIPTION: Example of using a custom ScrollView component from react-native-gesture-handler as the ScrollViewComponent prop in KeyboardAwareScrollView.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollView } from \"react-native-gesture-handler\";\n\n<KeyboardAwareScrollView ScrollViewComponent={ScrollView} />;\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the structure of the keyboard event data object that is passed to event listeners. It includes properties for the keyboard height, animation duration, event timestamp, and the target TextInput element.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Listeners in React Native\nDESCRIPTION: This code demonstrates how to use the KeyboardEvents API to listen for keyboard events in a React component. It creates a listener for the 'keyboardWillShow' event inside a useEffect hook and properly cleans up by removing the listener on component unmount.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook in React Native\nDESCRIPTION: A simple example demonstrating how to import and use the useReanimatedKeyboardAnimation hook to access keyboard height and animation progress values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Event Data Structure in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of keyboard event data. It includes properties for keyboard height, animation duration, event timestamp, and the tag of the focused TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets to KeyboardToolbar\nDESCRIPTION: Example of using safe area insets to properly position the KeyboardToolbar, preventing overlap with system UI elements especially in landscape orientation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\n// ...\n\nconst insets = useSafeAreaInsets();\n\n<KeyboardToolbar insets={insets} />;\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Done Button Action in KeyboardToolbar\nDESCRIPTION: Example showing how to prevent the default action of the Done button (dismissing the keyboard) by calling preventDefault() in the callback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onDoneCallback={(e) => {\n    e.preventDefault(); // keyboard will not be dismissed, since we cancelled the default action\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple layout structure for a chat application using ScrollView to display messages. This represents the starting point before implementing interactive keyboard features.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Listener Implementation in React Native\nDESCRIPTION: Example showing how to use KeyboardEvents to listen for keyboard events in a React component. The code demonstrates adding a listener for the keyboardWillShow event within a useEffect hook and properly cleaning up the listener when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents Listener in React Native\nDESCRIPTION: Example of implementing a keyboard event listener in a React component using the react-native-keyboard-controller library. Demonstrates proper setup and cleanup of a keyboardWillShow event listener inside a useEffect hook.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components\nDESCRIPTION: This snippet shows how to access keyboard animation values in a class component using KeyboardContext, and how to properly manage Android soft input modes for keyboard display.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager with the save flag.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: FocusedInputSelectionChangedEvent Type Structure in React Native\nDESCRIPTION: TypeScript type definition for the event object passed to the onSelectionChange handler, containing the target input ID and detailed selection information including coordinates and positions.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputSelectionChangedEvent = {\n  target: number;\n  selection: {\n    start: {\n      x: number;\n      y: number;\n      position: number;\n    };\n    end: {\n      x: number;\n      y: number;\n      position: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: Simple example demonstrating how to use the useReanimatedFocusedInput hook in a React Native component. The hook returns an input object as a SharedValue that contains information about the currently focused TextInput.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the structure of keyboard event data including height, duration, timestamp, target, type, and appearance properties that are available in all keyboard events.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n  type: string; // `keyboardType` property from focused `TextInput`\n  appearance: string; // `keyboardAppearance` property from focused `TextInput`\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to implement a keyboard animation using the useKeyboardAnimation hook from react-native-keyboard-controller. The component renders a green square that scales and translates based on keyboard visibility, along with a text input field that triggers the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation for Interactive Keyboard Demo in JSX\nDESCRIPTION: This code snippet displays a centered Lottie animation that demonstrates the interactive keyboard feature. It imports the Lottie component and animation data from a JSON file, then renders the animation with specified dimensions and looping enabled.\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: 20 }}>\n  <Lottie\n    className=\"lottie\"\n    animationData={lottie}\n    style={{ width: 400, height: 400 }}\n    loop\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the useFocusedInputHandler Hook in React Native\nDESCRIPTION: This code demonstrates how to use the new useFocusedInputHandler hook to handle text changes in focused input fields. The hook provides a worklet-based onChangeText callback that receives the current text value, allowing for custom logic implementation.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n\n      // Your custom logic here\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme for KeyboardToolbar\nDESCRIPTION: Example showing how to create a custom theme for the KeyboardToolbar by extending the DefaultKeyboardToolbarTheme and overriding specific color values for both dark and light modes.\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  DefaultKeyboardToolbarTheme,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst theme: KeyboardToolbarProps[\"theme\"] = {\n  ...DefaultKeyboardToolbarTheme,\n  dark: {\n    ...DefaultKeyboardToolbarTheme.dark,\n    primary: \"#FFCC00\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler for Keyboard Drag Gestures\nDESCRIPTION: Example of the onInteractive handler that responds to user drag gestures on the keyboard. This is called when the user manually drags the keyboard to change its position.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation in Class Components (TypeScript)\nDESCRIPTION: Example of how to use keyboard animation values in a class component using KeyboardContext. It demonstrates setting up the Android input mode, consuming reanimated values, and proper cleanup.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FocusedInputLayoutChangedEvent Type Definition in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of the data returned by the useReanimatedFocusedInput hook. The structure includes the target TextInput ID and its layout information including position and dimensions.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler Hook in React Native\nDESCRIPTION: Example showing how to use the useFocusedInputHandler hook to intercept text changes and selection changes from a focused TextInput component.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n    onSelectionChange: ({ target, selection }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating KeyboardAwareScrollView with FlatList and FlashList in React Native\nDESCRIPTION: Example showing how to connect KeyboardAwareScrollView with FlatList or FlashList using the renderScrollComponent prop. This allows list components to properly handle keyboard display.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlatList } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\n<FlatList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n\n// or\n\nimport { FlashList } from \"@shopify/flash-list\";\n\n<FlashList\n  renderScrollComponent={(props) => <KeyboardAwareScrollView {...props} />}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach Using KeyboardController.state() in React Native\nDESCRIPTION: This example demonstrates the recommended approach of using KeyboardController.state() method in event handlers to access keyboard state without causing unnecessary re-renders.\n\nLANGUAGE: tsx\nCODE:\n```\n// use KeyboardController.state()\n\n<Button\n  onPress={() => {\n    const state = KeyboardController.state();\n    if (state.isVisible) {\n      // ...\n    }\n  }}\n>\n  Go to Next Page\n</Button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for FocusedInputLayoutChangedEvent\nDESCRIPTION: Type definition showing the structure of the data returned by the useReanimatedFocusedInput hook. It includes information about the focused TextInput, its parent ScrollView, and detailed layout properties.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n  parentScrollViewTarget: number; // tag of the parent ScrollView\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icons for Navigation Buttons in KeyboardToolbar\nDESCRIPTION: Example showing how to customize the next and previous button icons in the KeyboardToolbar by providing a custom icon component that renders different emoji based on the button type.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler for Keyboard Animation\nDESCRIPTION: Example of the onMove handler that tracks keyboard position during animation. This is called every frame when the keyboard changes position, allowing for smooth animations tied to keyboard movement.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard Visibility in React Native\nDESCRIPTION: Method signature for determining if the keyboard is currently visible on screen.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic isVisible(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Changing Input Focus Method\nDESCRIPTION: Method for changing focus between input fields, with options to move to the previous, current, or next field.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setFocusTo(direction: \"prev\" | \"current\" | \"next\"): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in Class Components with KeyboardContext\nDESCRIPTION: Example of using keyboard animation in a class component through KeyboardContext. The implementation includes proper Android input mode setup and cleanup, providing access to the same animated values available in the hook version.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: onSelectionChange Event Type Definition in useFocusedInputHandler\nDESCRIPTION: TypeScript type definition for the event structure passed to the onSelectionChange handler, containing selection coordinates and position information.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputSelectionChangedEvent = {\n  target: number;\n  selection: {\n    start: {\n      x: number;\n      y: number;\n      position: number;\n    };\n    end: {\n      x: number;\n      y: number;\n      position: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Listening to Keyboard Events in React Native\nDESCRIPTION: Demonstrates how to subscribe to keyboard events using the KeyboardEvents module. The example shows subscribing to the keyboardWillShow event inside a useEffect hook and properly cleaning up the event listener on component unmount.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook with Functional Components in React Native\nDESCRIPTION: Basic example of using the useReanimatedKeyboardAnimation hook in a functional component to access keyboard animation values. The hook provides height and progress values that can be used in animations.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Listening to Keyboard Events in React Native\nDESCRIPTION: Demonstrates how to subscribe to keyboard events using the KeyboardEvents module. The example shows subscribing to the keyboardWillShow event inside a useEffect hook and properly cleaning up the event listener on component unmount.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation with Class Components in React Native\nDESCRIPTION: Shows how to access keyboard animation values in a class component using KeyboardContext. Also demonstrates how to properly set and reset Android input modes for keyboard behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Toolbar Background Opacity\nDESCRIPTION: Example showing how to customize the opacity of the KeyboardToolbar container by providing a hexadecimal opacity value. This allows for semi-transparent toolbar backgrounds.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar opacity=\"EE\" />\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in React Native Functional Components\nDESCRIPTION: Example of importing and using the useKeyboardAnimation hook to access keyboard animation values (height and progress) in a functional component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in React Native Class Components\nDESCRIPTION: Example showing how to use KeyboardController and KeyboardContext in a class component to achieve similar functionality to the useReanimatedKeyboardAnimation hook.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FocusedInputTextChangedEvent Type Definition in React Native\nDESCRIPTION: Type definition for the event object received by the onChangeText handler in useFocusedInputHandler. The event contains the current text value of the TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputTextChangedEvent = {\n  text: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components in React Native\nDESCRIPTION: This snippet shows how to use the KeyboardController in class components through React's context API. It demonstrates importing the necessary components, setting up the context, and accessing the enabled state and setEnabled function from within a class component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler Hook with onChangeText in React Native\nDESCRIPTION: Example of using the useFocusedInputHandler hook to intercept text changes in the currently focused TextInput. The hook takes an object with handlers and a dependency array as parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo managed workflow\nDESCRIPTION: JSON configuration for app.json or app.config.js to set the correct Kotlin version using expo-build-properties plugin in Expo managed workflow.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Structure Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of the FocusedInputLayoutChangedEvent returned by the useReanimatedFocusedInput hook. This structure includes information about the focused TextInput's tag, parent ScrollView tag, and detailed layout coordinates.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n  parentScrollViewTarget: number; // tag of the parent ScrollView\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to KeyboardToolbar Previous Button\nDESCRIPTION: Example of implementing haptic feedback when the Previous button is pressed, using the react-native-haptic-feedback library with platform-specific feedback types.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onPrevCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to use the useKeyboardAnimation hook to create an animation that responds to keyboard events. The component shows a green box that scales and translates based on keyboard visibility, and includes a text input field that triggers the keyboard.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook in Functional Components\nDESCRIPTION: A simple example of using the useReanimatedKeyboardAnimation hook in a functional component to access keyboard height and progress values for animation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler for Keyboard Animation\nDESCRIPTION: Example of implementing the onMove handler which is called every frame during keyboard position changes, allowing real-time tracking of keyboard movement.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components in React Native\nDESCRIPTION: This snippet shows how to access the keyboard controller functionality in class components using React Context. It demonstrates importing the necessary components, setting up the context, and accessing the enabled state and setEnabled function.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: Basic example showing how to use the useReanimatedFocusedInput hook to access information about the currently focused TextInput component in a React Native application.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: Complete Test Case Example for useKeyboardAnimation Hook\nDESCRIPTION: A comprehensive test case that demonstrates how to test a component using the useKeyboardAnimation hook. It shows how to mock different keyboard heights and verify that the component responds correctly to keyboard position changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler in useKeyboardHandler\nDESCRIPTION: Example of implementing the onMove handler which is called on every frame when keyboard changes position. The example shows updating Reanimated shared values with keyboard metrics.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with package managers\nDESCRIPTION: Commands to install the react-native-keyboard-controller package using either yarn or npm package managers.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-keyboard-controller\n# or with npm\n# npm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to KeyboardToolbar Next Button\nDESCRIPTION: Example of implementing haptic feedback when the Next button is pressed, using the react-native-haptic-feedback library with platform-specific feedback types.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onNextCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Animation with useKeyboardAnimation Hook in React Native\nDESCRIPTION: This example demonstrates how to use the useKeyboardAnimation hook to animate a view when the keyboard appears or disappears. The hook provides progress and height values that can be used to create smooth animations with the native driver. The example shows scaling and translation transformations applied to a view in response to keyboard events.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook with Functional Components in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the useKeyboardController hook to access and modify the keyboard controller's enabled state. It shows how to destructure the hook's return values and disable the library's functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal on Android\nDESCRIPTION: Implementation showing how to wrap a ScrollView with KeyboardGestureArea to enable gesture-based keyboard dismissal on Android. The interpolator prop is set to \"ios\" to customize the dismissal animation style.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Handler in useKeyboardHandler\nDESCRIPTION: Example of implementing the onStart handler which is called before keyboard movement begins. It shows how to check if the keyboard will appear using the progress value.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo build properties for Kotlin compatibility\nDESCRIPTION: JSON configuration for Expo managed workflow using expo-build-properties plugin to set the correct Kotlin version.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Interactive Keyboard Movement\nDESCRIPTION: Implementation of useKeyboardHandler hook with onInteractive handler to detect and respond to keyboard interactive movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Next Button in KeyboardToolbar\nDESCRIPTION: Example of adding haptic feedback when the Next button is pressed using the onNextCallback prop, providing tactile confirmation while preserving the default focus-shifting behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onNextCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation in a Functional Component (TSX)\nDESCRIPTION: Basic example of importing and using the useReanimatedKeyboardAnimation hook to get access to keyboard height and progress values for animation purposes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Enabling 120 FPS on iOS ProMotion Displays\nDESCRIPTION: Required Info.plist modification to unlock 120 FPS animations on iOS devices with ProMotion displays when using the onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Enabling 120 FPS on iOS ProMotion Displays\nDESCRIPTION: Configuration change for Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using the keyboard animations.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler for User Keyboard Dragging\nDESCRIPTION: Using onInteractive handler to respond to user dragging the keyboard. This event is only available on Android 11+ when using KeyboardGestureArea or on iOS with keyboardDismissMode=\"interactive\".\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Keyboard Movement with useKeyboardHandler Hook\nDESCRIPTION: Implementation of the useKeyboardHandler hook to respond to interactive keyboard movements. The onInteractive handler is called when the keyboard is being dragged.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents listener in react-native-keyboard-controller\nDESCRIPTION: Example of how to add a keyboard event listener using useEffect hook. The code demonstrates subscribing to the keyboardWillShow event and properly cleaning up the listener when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents listener in react-native-keyboard-controller\nDESCRIPTION: Example of how to add a keyboard event listener using useEffect hook. The code demonstrates subscribing to the keyboardWillShow event and properly cleaning up the listener when the component unmounts.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Handler for Keyboard Events\nDESCRIPTION: Example of implementing the onStart handler which is called before keyboard movement begins. It receives destination values indicating the keyboard's final state.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider Component\nDESCRIPTION: Example showing how to wrap your application with the KeyboardProvider component, which is required for the library to function correctly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Blur Effect to KeyboardToolbar with react-native-community/blur\nDESCRIPTION: Example of adding a custom blur effect to the KeyboardToolbar background using @react-native-community/blur. This helps match the iOS Human Interface Guidelines by providing the translucent keyboard appearance effect.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlurView } from \"@react-native-community/blur\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomBlur: KeyboardToolbarProps[\"blur\"] = ({ children }) => (\n  <BlurView\n    blurType=\"chromeMaterial\"\n    blurAmount={10}\n    reducedTransparencyFallbackColor=\"white\"\n    style={{ position: \"absolute\", top: 0, left: 0, bottom: 0, right: 0 }}\n  >\n    {children}\n  </BlurView>\n);\n\n// ...\n\n<KeyboardToolbar blur={CustomBlur} opacity=\"4F\" />;\n```\n\n----------------------------------------\n\nTITLE: Complete FlatList Integration with KeyboardAwareScrollView\nDESCRIPTION: Full example showing a FlatList with TextInput components wrapped in a KeyboardAwareScrollView. Demonstrates proper implementation of keyboard-aware behavior in a list with input fields.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, FlatList, TextInput } from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst List = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={new Array(10).fill(0).map((_, i) => i)}\n        keyExtractor={(data) => String(data)}\n        renderItem={() => {\n          return (\n            <View\n              style={{\n                width: \"100%\",\n                height: 250,\n                backgroundColor: \"#00000066\",\n                justifyContent: \"center\",\n              }}\n            >\n              <TextInput\n                style={{\n                  height: 40,\n                  width: \"100%\",\n                  borderColor: \"black\",\n                  borderWidth: 2,\n                }}\n              />\n            </View>\n          );\n        }}\n        renderScrollComponent={(props) => (\n          <KeyboardAwareScrollView {...props} />\n        )}\n        ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Restoring Focus to Last Input with KeyboardController in React Native\nDESCRIPTION: Shows how to restore focus to the most recently focused input field using the KeyboardController API. This is particularly useful when the keyboard has been dismissed but you want to bring focus back to the last active input.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardController } from \"react-native-keyboard-controller\";\n\n// if keyboard is closed - it'll restore a focus\n// if keyboard is open - it will not do anything\nKeyboardController.setFocusTo(\"current\");\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Detecting Interactive Keyboard Movement\nDESCRIPTION: Example of using the useKeyboardHandler hook with an onInteractive handler to detect and respond to interactive keyboard movements. This allows differentiating between standard keyboard appearance and user-driven interactive movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in build.gradle\nDESCRIPTION: Modification for the Android build.gradle file to set the correct Kotlin version when encountering incompatible Kotlin version errors.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable 120 FPS on iOS Promotion Displays\nDESCRIPTION: A diff showing the addition required in Info.plist to enable 120 FPS on iOS devices with ProMotion displays when using the onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Component in KeyboardToolbar with React Native\nDESCRIPTION: Example of using a custom button component for the KeyboardToolbar's next, previous and done buttons by implementing the button prop with TouchableOpacity.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomButton: KeyboardToolbarProps[\"button\"] = ({\n  children,\n  onPress,\n}) => <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n\n// ...\n\n<KeyboardToolbar button={CustomButton} />;\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application\nDESCRIPTION: A simple starting point layout for a chat application using ScrollView to display messages.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Component in KeyboardToolbar with TouchableOpacity\nDESCRIPTION: Example of customizing button rendering in KeyboardToolbar by providing a custom TouchableOpacity component through the button prop. This allows controlling the appearance and behavior of the next, previous, and done buttons.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomButton: KeyboardToolbarProps[\"button\"] = ({\n  children,\n  onPress,\n}) => <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n\n// ...\n\n<KeyboardToolbar button={CustomButton} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Bottom Sheet Compatible KeyboardAwareScrollView\nDESCRIPTION: Custom component implementation that combines KeyboardAwareScrollView with @gorhom/bottom-sheet. Uses Reanimated and HOC wrappers to create a keyboard-aware scrollable component for bottom sheets.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from \"react\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardAwareScrollViewProps,\n} from \"react-native-keyboard-controller\";\nimport {\n  SCROLLABLE_TYPE,\n  createBottomSheetScrollableComponent,\n  type BottomSheetScrollViewMethods,\n} from \"@gorhom/bottom-sheet\";\nimport type { BottomSheetScrollViewProps } from \"@gorhom/bottom-sheet/src/components/bottomSheetScrollable/types\";\nimport Reanimated from \"react-native-reanimated\";\n\nconst AnimatedScrollView =\n  Reanimated.createAnimatedComponent<KeyboardAwareScrollViewProps>(\n    KeyboardAwareScrollView,\n  );\nconst BottomSheetScrollViewComponent = createBottomSheetScrollableComponent<\n  BottomSheetScrollViewMethods,\n  BottomSheetScrollViewProps\n>(SCROLLABLE_TYPE.SCROLLVIEW, AnimatedScrollView);\nconst BottomSheetKeyboardAwareScrollView = memo(BottomSheetScrollViewComponent);\n\nBottomSheetKeyboardAwareScrollView.displayName =\n  \"BottomSheetKeyboardAwareScrollView\";\n\nexport default BottomSheetKeyboardAwareScrollView as (\n  props: BottomSheetScrollViewProps & KeyboardAwareScrollViewProps,\n) => ReturnType<typeof BottomSheetKeyboardAwareScrollView>;\n```\n\n----------------------------------------\n\nTITLE: iOS ProMotion Display Configuration for 120 FPS\nDESCRIPTION: Required configuration change in Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView with React Native Keyboard Controller\nDESCRIPTION: Example showing how to use the KeyboardAvoidingView component from react-native-keyboard-controller with padding behavior. The component adjusts itself when the keyboard appears to keep the form elements visible, demonstrating proper implementation with styling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nexport default function KeyboardAvoidingViewExample() {\n  return (\n    <KeyboardAvoidingView\n      behavior={\"padding\"}\n      contentContainerStyle={styles.container}\n      keyboardVerticalOffset={100}\n      style={styles.content}\n    >\n      <View style={styles.inner}>\n        <Text style={styles.heading}>Header</Text>\n        <View>\n          <TextInput placeholder=\"Username\" style={styles.textInput} />\n          <TextInput placeholder=\"Password\" style={styles.textInput} />\n        </View>\n        <TouchableOpacity style={styles.button}>\n          <Text style={styles.text}>Submit</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    maxHeight: 600,\n  },\n  heading: {\n    fontSize: 36,\n    marginBottom: 48,\n    fontWeight: \"600\",\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    height: 45,\n    borderColor: \"#000000\",\n    borderWidth: 1,\n    borderRadius: 10,\n    marginBottom: 36,\n    paddingLeft: 10,\n  },\n  button: {\n    marginTop: 12,\n    height: 45,\n    borderRadius: 10,\n    backgroundColor: \"rgb(40, 64, 147)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontWeight: \"500\",\n    fontSize: 16,\n    color: \"white\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: iOS ProMotion Display Configuration for 120 FPS\nDESCRIPTION: Required configuration change in Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Event Structure Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the data structure returned by the useReanimatedFocusedInput hook. It includes information about the focused TextInput such as its tag, parent ScrollView tag, and layout details including position and dimensions.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n  parentScrollViewTarget: number; // tag of the parent ScrollView\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple starting point layout for a chat application with a ScrollView containing Messages component.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler for Keyboard Animation Completion\nDESCRIPTION: Example of using the onEnd handler which is called when the keyboard has completed its movement. This handler receives the final keyboard metrics.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Handler for Keyboard Events\nDESCRIPTION: Example of using onStart handler to detect when keyboard will appear. The event provides information about the keyboard before movement starts, with progress value indicating the destination state.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Icons in KeyboardToolbar for React Native\nDESCRIPTION: Example of implementing custom icons for the previous and next buttons in KeyboardToolbar by using emoji text elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Button Component for KeyboardToolbar in React Native\nDESCRIPTION: Example of customizing the button component used in KeyboardToolbar by providing a custom TouchableOpacity implementation. This allows for full control over the appearance and behavior of the toolbar buttons.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomButton: KeyboardToolbarProps[\"button\"] = ({\n  children,\n  onPress,\n}) => <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n\n// ...\n\n<KeyboardToolbar button={CustomButton} />;\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in Functional Components in React Native\nDESCRIPTION: This snippet demonstrates how to use the useKeyboardController hook to access and control the enabled state of the react-native-keyboard-controller library in a functional component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the data structure for keyboard events in react-native-keyboard-controller. Each event provides information about the keyboard height, animation duration, timestamp, and the target TextInput element.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Input Mode Example\nDESCRIPTION: Example of restoring the application to use the default Android input mode configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple starting point layout for a chat application with a ScrollView containing Messages component. This represents the basic structure before implementing interactive keyboard functionality.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Animation Completion in React Native\nDESCRIPTION: Implementation of the onEnd handler which executes when keyboard movement is complete. The event contains the current keyboard metrics after animation.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Input Mode Example\nDESCRIPTION: Example of restoring the application to use the default Android input mode configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Next Button in KeyboardToolbar\nDESCRIPTION: Example of implementing haptic feedback for the next button in KeyboardToolbar using react-native-haptic-feedback with platform-specific configurations.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onNextCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard-Responsive Animation in React Native\nDESCRIPTION: This example demonstrates how to create a UI element that transforms in response to keyboard events. It uses the useKeyboardAnimation hook to access animated values for keyboard height and progress, allowing the application of scale and translation transformations based on keyboard visibility.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Input Field Focus in React Native\nDESCRIPTION: Method signature for changing focus between input fields. Supports moving to previous, current, or next field.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setFocusTo(direction: \"prev\" | \"current\" | \"next\"): void;\n```\n\n----------------------------------------\n\nTITLE: Customizing Done Button Text in KeyboardToolbar\nDESCRIPTION: Simple example showing how to change the text of the Done button in KeyboardToolbar by using the doneText prop.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar doneText=\"Close\" />\n```\n\n----------------------------------------\n\nTITLE: Initial ScrollView Setup for Chat Application in React Native\nDESCRIPTION: Basic starting point layout for a chat application with a ScrollView component that contains the Messages component.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyboard Animation with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to create a keyboard animation in React Native using the useKeyboardAnimation hook from react-native-keyboard-controller. The component renders a green square that scales and translates when the keyboard appears. The animation uses the progress and height values provided by the hook to create smooth transitions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Input Field Focus in React Native\nDESCRIPTION: Method signature for changing focus between input fields. Supports moving to previous, current, or next field.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setFocusTo(direction: \"prev\" | \"current\" | \"next\"): void;\n```\n\n----------------------------------------\n\nTITLE: KeyboardEventData Type Definition in TypeScript\nDESCRIPTION: Defines the structure of keyboard event data containing height of keyboard, animation duration, event timestamp, and the target TextInput tag.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in Functional Component\nDESCRIPTION: Example of importing and using the useKeyboardController hook to access and modify the enabled state of the keyboard controller. This allows toggling between the library's edge-to-edge behavior and standard Android adjustResize behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation in JSX\nDESCRIPTION: This code snippet demonstrates how to import and render a Lottie animation on a React page. It imports the Lottie component and animation data, then renders it centered with specific dimensions in a container div.\n\nLANGUAGE: jsx\nCODE:\n```\nimport Lottie from \"lottie-react\";\nimport lottie from \"../../src/components/HomepageFeatures/transform.lottie.json\";\n\n<div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: 20 }}>\n  <Lottie\n    className=\"lottie\"\n    animationData={lottie}\n    style={{ width: 400, height: 400 }}\n    loop\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo Managed Workflow\nDESCRIPTION: JSON configuration for app.json or app.config.js to set the Kotlin version when using Expo managed workflow.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Previous Button Action in KeyboardToolbar\nDESCRIPTION: Example of preventing the default focus movement to the previous input when the previous button is pressed by using preventDefault() in the callback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onPrevCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the prev input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Blur Effect to KeyboardToolbar in React Native\nDESCRIPTION: Example showing how to implement a custom blur effect for the KeyboardToolbar using @react-native-community/blur. This helps match the iOS keyboard's visual style by blurring content underneath the toolbar.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlurView } from \"@react-native-community/blur\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomBlur: KeyboardToolbarProps[\"blur\"] = ({ children }) => (\n  <BlurView\n    blurType=\"chromeMaterial\"\n    blurAmount={10}\n    reducedTransparencyFallbackColor=\"white\"\n    style={{ position: \"absolute\", top: 0, left: 0, bottom: 0, right: 0 }}\n  >\n    {children}\n  </BlurView>\n);\n\n// ...\n\n<KeyboardToolbar blur={CustomBlur} opacity=\"4F\" />;\n```\n\n----------------------------------------\n\nTITLE: Enabling 120 FPS on iOS ProMotion Displays\nDESCRIPTION: Configuration change needed in Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using the onMove handler which is based on CADisplayLink.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of KeyboardEventData Structure\nDESCRIPTION: Type definition for the keyboard event data structure provided by react-native-keyboard-controller. Includes properties for keyboard height, animation duration, event timestamp, and the target TextInput element.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardEventData = {\n  height: number; // height of the keyboard\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused TextInput\n};\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components\nDESCRIPTION: Example showing how to use react-native-keyboard-controller with class components by utilizing the KeyboardContext. This provides the same functionality as the hook but works within the class component lifecycle.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: KeyboardState Type Definition for React Native\nDESCRIPTION: Type definition for the keyboard state object returned by the state method, containing properties like visibility, height, animation details, and information about the focused input.\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyboardState = {\n  isVisible: boolean;\n  height: number;\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused `TextInput`\n  type: string; // `keyboardType` property from focused `TextInput`\n  appearance: string; // `keyboardAppearance` property from focused `TextInput`\n};\n```\n\n----------------------------------------\n\nTITLE: Setting KeyboardToolbar Background Opacity\nDESCRIPTION: Example of setting the opacity of the KeyboardToolbar container using a hexadecimal value, allowing for semi-transparent toolbar backgrounds.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar opacity=\"EE\" />\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in a Functional Component\nDESCRIPTION: Demonstrates how to import and use the useKeyboardController hook to access the library's enabled state and toggle it. The hook returns an object with 'enabled' boolean and 'setEnabled' function.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components\nDESCRIPTION: This snippet shows how to use the KeyboardController functionality in a class component using React's context API. It demonstrates how to access the enabled state and setEnabled function through the KeyboardContext and disable the module when needed.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Interactive Keyboard Gestures\nDESCRIPTION: Example of using the onInteractive handler which responds to user drag gestures on the keyboard. Available on Android 11+ with KeyboardGestureArea or on iOS with keyboardDismissMode=\"interactive\".\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Complete KeyboardAwareScrollView Example with Multiple TextInputs\nDESCRIPTION: A comprehensive example showing KeyboardAwareScrollView with multiple TextInput components. Demonstrates bottomOffset customization, styling, and handling of different input types with proper keyboard adjustments.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  StyleSheet,\n  TextInputProps,\n  TextInput as TextInputRN,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-controller\";\n\nconst TextInput = (props: TextInputProps) => {\n  return (\n    <TextInputRN\n      placeholderTextColor=\"#6c6c6c\"\n      style={styles.textInput}\n      multiline\n      numberOfLines={2}\n      testID={props.placeholder}\n      {...props}\n      placeholder={`${props.placeholder} (${\n        props.keyboardType === \"default\" ? \"text\" : \"numeric\"\n      })`}\n    />\n  );\n};\n\nexport default function AwareScrollView() {\n  return (\n    <KeyboardAwareScrollView\n      bottomOffset={50}\n      style={styles.container}\n      contentContainerStyle={styles.content}\n    >\n      {new Array(10).fill(0).map((_, i) => (\n        <TextInput\n          key={i}\n          placeholder={`TextInput#${i}`}\n          keyboardType={i % 2 === 0 ? \"numeric\" : \"default\"}\n        />\n      ))}\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  content: {\n    paddingTop: 50,\n  },\n  textInput: {\n    width: \"100%\",\n    minHeight: 50,\n    maxHeight: 200,\n    marginBottom: 50,\n    borderColor: \"black\",\n    borderWidth: 2,\n    marginRight: 160,\n    borderRadius: 10,\n    color: \"black\",\n    paddingHorizontal: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Build Properties for Kotlin Support\nDESCRIPTION: JSON configuration for app.json or app.config.js to set the Kotlin version in Expo managed workflow using the expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Action on KeyboardToolbar Previous Button\nDESCRIPTION: Example showing how to prevent the default action (focus moving to previous input) when the Previous button is pressed by using preventDefault() in the callback.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar\n  onPrevCallback={(e) => {\n    e.preventDefault(); // the focus will not be moved to the prev input\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icons for KeyboardToolbar Navigation Buttons\nDESCRIPTION: Implementation of custom icons for the next and previous buttons in the KeyboardToolbar using emoji text elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Control in Class Components\nDESCRIPTION: This example shows how to use KeyboardController with class components by accessing the KeyboardContext. It demonstrates importing necessary components, setting up the context, and toggling the keyboard controller's enabled state.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo Project\nDESCRIPTION: JSON configuration for app.json or app.config.js to set the Kotlin version in an Expo managed workflow using expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for React Native Keyboard Controller\nDESCRIPTION: This snippet shows how to configure Jest to mock the react-native-keyboard-controller library. It should be added to your Jest setup file to enable testing of components that use the keyboard controller.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardGestureArea for Android\nDESCRIPTION: Enhanced layout that wraps ScrollView within KeyboardGestureArea to enable interactive keyboard dismissal on Android. The interpolator prop is set to 'ios' to customize the keyboard dismissal animation style.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Using BottomSheetKeyboardAwareScrollView with @gorhom/bottom-sheet\nDESCRIPTION: Example showing how to use the custom BottomSheetKeyboardAwareScrollView component with @gorhom/bottom-sheet. This allows for keyboard-aware scrolling inside a bottom sheet.\n\nLANGUAGE: tsx\nCODE:\n```\nimport BottomSheet from \"@gorhom/bottom-sheet\";\nimport BottomSheetKeyboardAwareScrollView from \"./BottomSheetKeyboardAwareScrollView\";\n\nexport function Example() {\n  return (\n    <BottomSheet>\n      <BottomSheetKeyboardAwareScrollView>\n        {/* More content here */}\n      </BottomSheetKeyboardAwareScrollView>\n    </BottomSheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Android build.gradle\nDESCRIPTION: Modification to the Android build.gradle file to specify a higher Kotlin version to resolve compatibility issues during build.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components via Context\nDESCRIPTION: Example showing how to access the keyboard controller functionality in a class component by using the KeyboardContext. This allows class components to check and modify the enabled state of the library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying React Native Keyboard Controller Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication for GitHub Pages or similar hosting.\n\nLANGUAGE: bash\nCODE:\n```\nUSE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation Example of useKeyboardState in React Native Component\nDESCRIPTION: A practical example showing how to properly use the useKeyboardState hook to conditionally apply styles based on keyboard visibility in a React Native component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { useKeyboardState } from \"react-native-keyboard-controller\";\n\nconst ShowcaseComponent = () => {\n  const { isVisible } = useKeyboardState();\n\n  return (\n    <View style={isVisible ? styles.highlighted : null}>\n      <Text>Address form</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  highlighted: {\n    borderColor: \"#0070D8\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application\nDESCRIPTION: A simple starting point layout for a typical chat application, using ScrollView to display messages. This represents the initial code before implementing interactive keyboard functionality.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors in KeyboardToolbar\nDESCRIPTION: Example showing how to customize the theme colors of the KeyboardToolbar by extending the DefaultKeyboardToolbarTheme object, supporting both dark and light themes.\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  DefaultKeyboardToolbarTheme,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst theme: KeyboardToolbarProps[\"theme\"] = {\n  ...DefaultKeyboardToolbarTheme,\n  dark: {\n    ...DefaultKeyboardToolbarTheme.dark,\n    primary: \"#FFCC00\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Example App on iOS for react-native-keyboard-controller\nDESCRIPTION: Command to run the example app on iOS simulator to test changes to the library.\n\nLANGUAGE: sh\nCODE:\n```\nyarn example ios\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin version in Android build.gradle\nDESCRIPTION: Configuration to set the correct Kotlin version in the Android build.gradle file to resolve compatibility issues with the library.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation with React Class Components\nDESCRIPTION: Example of implementing keyboard animation in a class component using KeyboardContext. This approach demonstrates setting Android soft input modes, consuming reanimated values through context, and proper cleanup on component unmount.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing KeyboardToolbar Button Using TouchableOpacity in React Native\nDESCRIPTION: Shows how to customize the buttons in KeyboardToolbar by providing a custom TouchableOpacity component through the button prop. This allows for personalized button appearance and behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst CustomButton: KeyboardToolbarProps[\"button\"] = ({\n  children,\n  onPress,\n}) => <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n\n// ...\n\n<KeyboardToolbar button={CustomButton} />;\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController to Manage Android's Soft Input Modes in React Native\nDESCRIPTION: This example demonstrates creating a custom hook that sets the keyboard input mode to SOFT_INPUT_ADJUST_RESIZE when a component mounts and restores the default mode when it unmounts. This allows for runtime changes to keyboard behavior in Android applications.\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  KeyboardController,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nexport const useResizeMode = () => {\n  useEffect(() => {\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n\n    return () => KeyboardController.setDefaultMode();\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple starting point layout for a chat application with a ScrollView component that contains Messages. This represents the base structure before adding interactive keyboard functionality.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for react-native-keyboard-controller\nDESCRIPTION: This code shows how to configure the Jest mock for react-native-keyboard-controller in your Jest setup file. It imports the mock implementation from the library's jest directory.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in Android build.gradle\nDESCRIPTION: Configuration for Android build.gradle to set the correct Kotlin version and resolve compatibility issues during Android builds.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in Class Components\nDESCRIPTION: An example showing how to use KeyboardContext in class components to access reanimated keyboard values, including setup and cleanup of Android input modes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FocusedInputTextChangedEvent Type Structure in React Native\nDESCRIPTION: TypeScript type definition for the event object passed to the onChangeText handler in useFocusedInputHandler, containing the current text value of the focused input.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputTextChangedEvent = {\n  text: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller via Package Manager\nDESCRIPTION: Commands to install the react-native-keyboard-controller package using either yarn or npm package managers.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-keyboard-controller\n# or with npm\n# npm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal on Android\nDESCRIPTION: Wrapping ScrollView with KeyboardGestureArea to enable interactive keyboard dismissal with iOS-like behavior. The interpolator prop is set to 'ios' to mimic iOS keyboard dismissal animation.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to KeyboardToolbar Next Button\nDESCRIPTION: Implementation of haptic feedback when the Next button is pressed on the KeyboardToolbar, enhancing the user experience with tactile feedback.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onNextCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: FocusedInputTextChangedEvent Type Definition\nDESCRIPTION: Type definition for the event object passed to the onChangeText handler of useFocusedInputHandler. The event contains the current text of the focused TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputTextChangedEvent = {\n  text: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in React Native App\nDESCRIPTION: Example of wrapping a React Native application with the KeyboardProvider component from react-native-keyboard-controller, which is required to use the library's functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bottom Sheet Compatible KeyboardAwareScrollView\nDESCRIPTION: Demonstrates how to create a wrapper component that combines KeyboardAwareScrollView with @gorhom/bottom-sheet for keyboard-aware behavior inside bottom sheets.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from \"react\";\nimport {\n  KeyboardAwareScrollView,\n  KeyboardAwareScrollViewProps,\n} from \"react-native-keyboard-controller\";\nimport {\n  SCROLLABLE_TYPE,\n  createBottomSheetScrollableComponent,\n  type BottomSheetScrollViewMethods,\n} from \"@gorhom/bottom-sheet\";\nimport type { BottomSheetScrollViewProps } from \"@gorhom/bottom-sheet/src/components/bottomSheetScrollable/types\";\nimport Reanimated from \"react-native-reanimated\";\n\nconst AnimatedScrollView =\n  Reanimated.createAnimatedComponent<KeyboardAwareScrollViewProps>(\n    KeyboardAwareScrollView,\n  );\nconst BottomSheetScrollViewComponent = createBottomSheetScrollableComponent<\n  BottomSheetScrollViewMethods,\n  BottomSheetScrollViewProps\n>(SCROLLABLE_TYPE.SCROLLVIEW, AnimatedScrollView);\nconst BottomSheetKeyboardAwareScrollView = memo(BottomSheetScrollViewComponent);\n\nBottomSheetKeyboardAwareScrollView.displayName =\n  \"BottomSheetKeyboardAwareScrollView\";\n\nexport default BottomSheetKeyboardAwareScrollView as (\n  props: BottomSheetScrollViewProps & KeyboardAwareScrollViewProps,\n) => ReturnType<typeof BottomSheetKeyboardAwareScrollView>;\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Dismissing Keyboard in React Native\nDESCRIPTION: Example of hiding the keyboard and waiting for it to be fully hidden before proceeding with other operations.\n\nLANGUAGE: typescript\nCODE:\n```\nawait KeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook with React Navigation Focus Control\nDESCRIPTION: Custom implementation of a keyboard animation hook that sets softInputMode to adjustResize only when the screen is focused and restores default mode when unfocused. This solves the issue with react-navigation keeping previous screens mounted which affects keyboard behavior across screens.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext, useCallback } from \"react\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport {\n  KeyboardContext,\n  KeyboardController,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nfunction useKeyboardAnimation() {\n  useFocusEffect(\n    useCallback(() => {\n      KeyboardController.setInputMode(\n        AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n      );\n\n      return () => KeyboardController.setDefaultMode();\n    }, []),\n  );\n\n  const context = useContext(KeyboardContext);\n\n  return context.animated;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: A simple example showing how to use the useReanimatedFocusedInput hook in a React Native component. The hook returns an input property as a SharedValue which contains information about the currently focused TextInput.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: Customizing Done Button Text in KeyboardToolbar\nDESCRIPTION: Example of changing the text of the Done button in KeyboardToolbar using the doneText prop, which allows for localization or contextual action naming.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar doneText=\"Close\" />\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Expo\nDESCRIPTION: Command to install the react-native-keyboard-controller package in an Expo project using the Expo CLI.\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager with the save flag.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Using BottomSheetKeyboardAwareScrollView with @gorhom/bottom-sheet\nDESCRIPTION: Demonstrates how to use the custom BottomSheetKeyboardAwareScrollView component within a Bottom Sheet. This example shows the basic structure needed to combine keyboard awareness with bottom sheets.\n\nLANGUAGE: tsx\nCODE:\n```\nimport BottomSheet from \"@gorhom/bottom-sheet\";\nimport BottomSheetKeyboardAwareScrollView from \"./BottomSheetKeyboardAwareScrollView\";\n\nexport function Example() {\n  return (\n    <BottomSheet>\n      <BottomSheetKeyboardAwareScrollView>\n        {/* More content here */}\n      </BottomSheetKeyboardAwareScrollView>\n    </BottomSheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Interactive Keyboard Movement\nDESCRIPTION: Example of the useKeyboardHandler hook implementation with an onInteractive callback to handle interactive keyboard movements. This allows differentiating between standard keyboard visibility changes and user-driven gesture movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up KeyboardProvider Component\nDESCRIPTION: Example of wrapping an application with the KeyboardProvider component, which is required to use the keyboard controller functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: Simple example demonstrating how to use the useReanimatedFocusedInput hook in a React component to get information about the currently focused TextInput. The hook returns a SharedValue containing the input data.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icons for KeyboardToolbar Navigation Buttons\nDESCRIPTION: Implementation of custom icons for the previous and next buttons in KeyboardToolbar using emoji text. This example demonstrates how to replace the default arrow icons with custom components.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Build Properties for Kotlin Support\nDESCRIPTION: JSON configuration for Expo managed workflow to set the correct Kotlin version using the expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Keyboard Controller with Yarn\nDESCRIPTION: Command to install the react-native-keyboard-controller package using Yarn package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Setting up KeyboardProvider in React Native App\nDESCRIPTION: Example of wrapping a React Native application with the KeyboardProvider component, which is required for the library to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with Class Components in React Native\nDESCRIPTION: Example showing how to use KeyboardController in a class component by accessing KeyboardContext, setting input modes for Android, and consuming reanimated values via context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo Managed Workflow\nDESCRIPTION: JSON configuration for setting up the correct Kotlin version in an Expo managed workflow using the expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: Example of how to use the useReanimatedFocusedInput hook in a React Native component to access information about the currently focused TextInput as a SharedValue from react-native-reanimated.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for FocusedInputTextChangedEvent in React Native\nDESCRIPTION: Type definition for the event object received by the onChangeText handler. This event contains the current text value of the focused TextInput element.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputTextChangedEvent = {\n  text: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Package Managers\nDESCRIPTION: Commands for installing the react-native-keyboard-controller package using either yarn or npm package managers.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-keyboard-controller\n# or with npm\n# npm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller via Package Manager\nDESCRIPTION: Command line instructions for installing the react-native-keyboard-controller package using either yarn or npm package managers.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-keyboard-controller\n# or with npm\n# npm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Using Bottom Sheet with KeyboardAwareScrollView in React Native\nDESCRIPTION: Shows how to use the custom BottomSheetKeyboardAwareScrollView component within a bottom sheet for proper keyboard handling in bottom sheet UI.\n\nLANGUAGE: tsx\nCODE:\n```\nimport BottomSheet from \"@gorhom/bottom-sheet\";\nimport BottomSheetKeyboardAwareScrollView from \"./BottomSheetKeyboardAwareScrollView\";\n\nexport function Example() {\n  return (\n    <BottomSheet>\n      <BottomSheetKeyboardAwareScrollView>\n        {/* More content here */}\n      </BottomSheetKeyboardAwareScrollView>\n    </BottomSheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with useKeyboardAnimation Hook\nDESCRIPTION: Complete example of a test case that demonstrates how to test a component that uses the useKeyboardAnimation hook. It shows how to mock different keyboard states and verify the component responds correctly to height changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Yarn\nDESCRIPTION: Command to install the react-native-keyboard-controller package using Yarn package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedFocusedInput Hook in React Native\nDESCRIPTION: Basic example of how to use the useReanimatedFocusedInput hook in a React Native component to access information about the currently focused TextInput.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { input } = useReanimatedFocusedInput();\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Package Managers\nDESCRIPTION: Commands to install the react-native-keyboard-controller package using either yarn or npm package managers.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-keyboard-controller\n# or with npm\n# npm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Using Bottom Sheet with KeyboardAwareScrollView in React Native\nDESCRIPTION: Shows how to use the custom BottomSheetKeyboardAwareScrollView component within a bottom sheet for proper keyboard handling in bottom sheet UI.\n\nLANGUAGE: tsx\nCODE:\n```\nimport BottomSheet from \"@gorhom/bottom-sheet\";\nimport BottomSheetKeyboardAwareScrollView from \"./BottomSheetKeyboardAwareScrollView\";\n\nexport function Example() {\n  return (\n    <BottomSheet>\n      <BottomSheetKeyboardAwareScrollView>\n        {/* More content here */}\n      </BottomSheetKeyboardAwareScrollView>\n    </BottomSheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Android build.gradle\nDESCRIPTION: Instructions for modifying the Android build.gradle file to specify a compatible Kotlin version when facing version incompatibility errors.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Yarn\nDESCRIPTION: Command to install the react-native-keyboard-controller package using Yarn package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple example layout for a typical chat application using ScrollView to display messages. This represents the starting point before implementing interactive keyboard functionality.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardGestureArea Component with ScrollView in React Native\nDESCRIPTION: Example showing how to implement the KeyboardGestureArea component with iOS-like interpolation behavior wrapped around a ScrollView. This setup allows users to control the keyboard position through gestures within the defined area.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    {/* The other UI components of application in your tree */}\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler Hook with onChangeText and onSelectionChange in React Native\nDESCRIPTION: Example of how to implement the useFocusedInputHandler hook to intercept text changes and selection changes in a focused TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n    onSelectionChange: ({ target, selection }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo managed workflow\nDESCRIPTION: JSON configuration for app.json or app.config.js that uses expo-build-properties plugin to set the Kotlin version to 1.6.21 for Android builds in Expo managed workflow.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Expo\nDESCRIPTION: Command to install the react-native-keyboard-controller package in an Expo project. Only works with custom dev client, not with Expo Go.\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Layout Example in React Native\nDESCRIPTION: A simple starting point for a chat application layout with a ScrollView containing messages.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Text for Done Button in KeyboardToolbar\nDESCRIPTION: Shows how to customize the text displayed on the Done button in KeyboardToolbar using the doneText prop.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardToolbar doneText=\"Close\" />\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Yarn\nDESCRIPTION: Command to install the react-native-keyboard-controller package using Yarn package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler with onChangeText and onSelectionChange in React Native\nDESCRIPTION: Example of using the useFocusedInputHandler hook to intercept text changes and selection changes in a focused TextInput. The hook accepts an object with handler functions and a dependencies array.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n    onSelectionChange: ({ target, selection }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in React Native App\nDESCRIPTION: Example of wrapping a React Native application with the KeyboardProvider component, which is required for the library to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native Application\nDESCRIPTION: A basic example showing how to wrap your React Native application with the KeyboardProvider component to enable keyboard management functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nconst App = () => {\n  return (\n    <KeyboardProvider>\n      {/* The other components in your tree */}\n    </KeyboardProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in react-native/expo bare workflow\nDESCRIPTION: Modifies the android/build.gradle file to specify the correct Kotlin version to resolve incompatible version errors. This is needed when your project requires a higher Kotlin version than what's currently set.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MutexLockWithTimeout C++ Exception Stack Trace\nDESCRIPTION: Example stack trace of the MutexLockWithTimeout exception that occurs when using KeyboardProvider or KeyboardAwareScrollView on Android with the new architecture enabled.\n\nLANGUAGE: bash\nCODE:\n```\nNonPI::MutexLockWithTimeout at line 384 within libc\noffset 726000) (std::__ndk1::mutex::lock at line 12 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Binding::schedulerDidFinishTransaction at line 84 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Scheduler::uiManagerDidFinishTransaction at line 68 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::UIManager::shadowTreeDidFinishTransaction const at line 64 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::mount const at line 348 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::tryCommit const at line 2612 within split_config.arm64_v8a.apk\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Start Events with useKeyboardHandler\nDESCRIPTION: Example of using the onStart handler which is called before keyboard movement begins. The event provides destination values, allowing detection of whether the keyboard will appear or disappear.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in Functional Components\nDESCRIPTION: Example of using the useKeyboardAnimation hook in a functional component to access height and progress animated values for tracking keyboard state.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Using useFocusedInputHandler Hook with onChangeText Event in React Native\nDESCRIPTION: Example showing how to use the useFocusedInputHandler hook to intercept text changes from a focused TextInput. The worklet function receives the updated text whenever the user modifies the input.\n\nLANGUAGE: typescript\nCODE:\n```\nuseFocusedInputHandler(\n  {\n    onChangeText: ({ text }) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up KeyboardProvider in React Native App\nDESCRIPTION: Code snippet showing how to wrap your React Native application with the KeyboardProvider component that's required for the library to function properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Animation in React Native Components with Jest\nDESCRIPTION: Example test case showing how to test a component that uses the useKeyboardAnimation hook. The test verifies that the component correctly responds to keyboard height changes by updating its transform style.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: MutexLockWithTimeout C++ Exception Stacktrace\nDESCRIPTION: Example stacktrace of the MutexLockWithTimeout C++ exception that occurs when using KeyboardProvider or KeyboardAwareScrollView on Android with the new architecture enabled.\n\nLANGUAGE: bash\nCODE:\n```\nNonPI::MutexLockWithTimeout at line 384 within libc\noffset 726000) (std::__ndk1::mutex::lock at line 12 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Binding::schedulerDidFinishTransaction at line 84 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Scheduler::uiManagerDidFinishTransaction at line 68 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::UIManager::shadowTreeDidFinishTransaction const at line 64 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::mount const at line 348 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::tryCommit const at line 2612 within split_config.arm64_v8a.apk\n```\n\n----------------------------------------\n\nTITLE: Using setDefaultMode to Reset Input Mode in React Native\nDESCRIPTION: Example of using KeyboardController to reset the Android input mode to the default value specified in the application configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Using setDefaultMode to Reset Input Mode in React Native\nDESCRIPTION: Example of using KeyboardController to reset the Android input mode to the default value specified in the application configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in a Functional Component\nDESCRIPTION: Example of importing and using the useKeyboardController hook to access and modify the enabled state of the react-native-keyboard-controller library in a functional component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Adding ProMotion Display Support in Info.plist for 120 FPS Animations\nDESCRIPTION: Modification to Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays when using the keyboard controller.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: FocusedInputSelectionChangedEvent Type Definition in TypeScript\nDESCRIPTION: Defines the type structure for the onSelectionChange event in the useFocusedInputHandler hook. The event provides detailed information about text selection including target input ID and coordinates for selection start and end positions.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputSelectionChangedEvent = {\n  target: number;\n  selection: {\n    start: {\n      x: number;\n      y: number;\n      position: number;\n    };\n    end: {\n      x: number;\n      y: number;\n      position: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in Expo Managed Workflow\nDESCRIPTION: JSON configuration for Expo managed workflow to set the correct Kotlin version using the expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Test Case for Keyboard Animation in React Native\nDESCRIPTION: A complete test case example showing how to test a component that uses useKeyboardAnimation hook. The test verifies that the component's translation styles update correctly based on keyboard position changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding 120 FPS ProMotion Support in Info.plist\nDESCRIPTION: Configuration for enabling 120 FPS on iOS devices with ProMotion displays. The diff shows what needs to be added to Info.plist to unlock higher framerates for keyboard animations.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Importing KeyboardAwareScrollView Component with Lottie Animation\nDESCRIPTION: Example of importing and using Lottie animation alongside the KeyboardAwareScrollView documentation. This snippet shows how the documentation page itself is structured with a visual animation component.\n\nLANGUAGE: jsx\nCODE:\n```\nimport Lottie from \"lottie-react\";\nimport lottie from \"@site/src/components/HomepageFeatures/text-inputs.lottie.json\";\n\n<div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: 20 }}>\n  <Lottie\n    className=\"lottie\"\n    animationData={lottie}\n    style={{ width: 400, height: 400 }}\n    loop\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler with useKeyboardHandler\nDESCRIPTION: Example of using the onEnd handler which is called when keyboard movement completes. It demonstrates how to update animation values when the keyboard reaches its final position.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo with expo-build-properties Plugin\nDESCRIPTION: JSON configuration for Expo managed workflow to set the required Kotlin version using the expo-build-properties plugin.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"kotlinVersion\": \"1.6.21\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Component with useKeyboardAnimation Hook in React Native\nDESCRIPTION: A complete test case example that demonstrates how to test a component using the useKeyboardAnimation hook. The test verifies that the component responds correctly to different keyboard states by checking the transform styles applied to an Animated.View.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController API for Input Navigation in React Native\nDESCRIPTION: Demonstrates how to use the KeyboardController API to navigate between text input fields in React Native. The API provides methods to move focus to the next or previous input field without manually managing refs.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardController } from \"react-native-keyboard-controller\";\n\n// this will move focus to the next TextInput\nKeyboardController.setFocusTo(\"next\");\n// or if we want to set focus to previous field\nKeyboardController.setFocusTo(\"prev\");\n```\n\n----------------------------------------\n\nTITLE: Example of MutexLockWithTimeout Exception Stacktrace\nDESCRIPTION: A sample stacktrace of the MutexLockWithTimeout C++ exception that occurs when using KeyboardProvider or KeyboardAwareScrollView on Android with the new architecture enabled.\n\nLANGUAGE: bash\nCODE:\n```\nNonPI::MutexLockWithTimeout at line 384 within libc\noffset 726000) (std::__ndk1::mutex::lock at line 12 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Binding::schedulerDidFinishTransaction at line 84 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::Scheduler::uiManagerDidFinishTransaction at line 68 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::UIManager::shadowTreeDidFinishTransaction const at line 64 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::mount const at line 348 within split_config.arm64_v8a.apk\noffset c01000) (facebook::react::ShadowTree::tryCommit const at line 2612 within split_config.arm64_v8a.apk\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation in React Native Documentation\nDESCRIPTION: JSX code snippet that displays a centered Lottie animation in React documentation. The animation is imported from a JSON file and styled with flexbox to appear centered with specific dimensions and looping behavior.\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: 20 }}>\n  <Lottie\n    className=\"lottie\"\n    animationData={lottie}\n    style={{ width: 400, height: 400 }}\n    loop\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Handler with useKeyboardHandler\nDESCRIPTION: Example of using the onStart handler which is called before keyboard movement begins. It demonstrates how to detect if the keyboard will appear using the progress value.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with YARN\nDESCRIPTION: Command to install the react-native-keyboard-controller package using YARN package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Animation Behavior with React Native Keyboard Controller\nDESCRIPTION: A complete test case that demonstrates how to test components that use the useKeyboardAnimation hook. It shows how to mock different keyboard states and verify that the component responds correctly to keyboard height changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing New Versions to npm for react-native-keyboard-controller\nDESCRIPTION: Command to publish new versions using release-it, which handles common tasks like bumping version based on semver, creating tags and releases.\n\nLANGUAGE: sh\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardAvoidingView with Navigation Headers\nDESCRIPTION: Example of using KeyboardAvoidingView with react-navigation that accounts for header height using the useHeaderHeight hook. This ensures proper keyboard avoidance when using stack navigation with headers.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHeaderHeight } from \"@react-navigation/elements\";\nimport { KeyboardAvoidingView } from \"react-native-keyboard-controller\";\n\nconst MyScreen = () => {\n  const headerHeight = useHeaderHeight();\n\n  return (\n    <KeyboardAvoidingView\n      behavior=\"padding\"\n      keyboardVerticalOffset={headerHeight}\n    >\n      <TextInput placeholder=\"Type here...\" />\n    </KeyboardAvoidingView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook with React Native\nDESCRIPTION: Basic implementation of the useKeyboardHandler hook showing the structure with all available handlers. Each handler receives keyboard event data and must include a 'worklet' directive.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager with the save flag.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for React Native Keyboard Controller\nDESCRIPTION: Code snippet showing how to set up the built-in mock for Jest in the jest setup file. This enables testing components that use the keyboard controller functionality.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn for react-native-keyboard-controller\nDESCRIPTION: Command to install required dependencies for each package in the project using Yarn. This is the recommended approach as the tooling is built around Yarn rather than npm.\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Icons in KeyboardToolbar\nDESCRIPTION: Example showing how to provide custom icons for the previous and next navigation buttons using the icon prop. This allows for complete visual customization of the navigation controls.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport {\n  KeyboardToolbar,\n  KeyboardToolbarProps,\n} from \"react-native-keyboard-controller\";\n\nconst Icon: KeyboardToolbarProps[\"icon\"] = ({ type }) => {\n  return <Text>{type === \"next\" ? \"⬇️\" : \"⬆️\"}</Text>;\n};\n\n// ...\n\n<KeyboardToolbar icon={Icon} />;\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for React Native Keyboard Controller Website\nDESCRIPTION: Command to generate static website content into the build directory, which can then be served using any static hosting service.\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Implementing onMove Handler for Keyboard Animation\nDESCRIPTION: Example of using the onMove handler which is called every frame when the keyboard changes position. This handler allows tracking keyboard position in real-time.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onMove: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin version in Android build.gradle\nDESCRIPTION: Solution for incompatible Kotlin version errors by specifying the correct kotlinVersion in the Android build.gradle file.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for react-native-keyboard-controller\nDESCRIPTION: This snippet shows how to mock the react-native-keyboard-controller library in Jest by adding a mock configuration to your Jest setup file.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native Keyboard Controller\nDESCRIPTION: This CMake script configures the build environment for the react-native-keyboard-controller native module. It sets up compilation options, defines file paths, specifies source files, and configures library dependencies with conditional logic for different React Native versions (before and after v0.76).\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE ON)\n\nset(LIB_LITERAL reactnativekeyboardcontroller)\nset(LIB_TARGET_NAME react_codegen_${LIB_LITERAL})\n\nset(LIB_ANDROID_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../..)\nset(LIB_COMMON_DIR ${LIB_ANDROID_DIR}/../common/cpp)\nset(LIB_COMMON_COMPONENTS_DIR ${LIB_COMMON_DIR}/react/renderer/components/${LIB_LITERAL})\nset(LIB_ANDROID_GENERATED_JNI_DIR ${LIB_ANDROID_DIR}/build/generated/source/codegen/jni)\nset(LIB_ANDROID_GENERATED_COMPONENTS_DIR ${LIB_ANDROID_GENERATED_JNI_DIR}/react/renderer/components/${LIB_LITERAL})\n\nadd_compile_options(\n  -fexceptions\n  -frtti\n  -std=c++20\n  -Wall\n  -Wpedantic\n  -Wno-gnu-zero-variadic-macro-arguments\n  -Wno-dollar-in-identifier-extension\n)\n\nfile(GLOB LIB_CUSTOM_SRCS CONFIGURE_DEPENDS *.cpp ${LIB_COMMON_COMPONENTS_DIR}/*.cpp)\nfile(GLOB LIB_CODEGEN_SRCS CONFIGURE_DEPENDS ${LIB_ANDROID_GENERATED_JNI_DIR}/*.cpp ${LIB_ANDROID_GENERATED_COMPONENTS_DIR}/*.cpp)\n\nadd_library(\n  ${LIB_TARGET_NAME}\n  SHARED\n  ${LIB_CUSTOM_SRCS}\n  ${LIB_CODEGEN_SRCS}\n)\n\ntarget_include_directories(\n  ${LIB_TARGET_NAME}\n  PUBLIC\n  .\n  ${LIB_COMMON_DIR}\n  ${LIB_ANDROID_GENERATED_JNI_DIR}\n  ${LIB_ANDROID_GENERATED_COMPONENTS_DIR}\n)\n\nif(ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)\n  target_link_libraries(\n    ${LIB_TARGET_NAME}\n    ReactAndroid::reactnative\n    ReactAndroid::jsi\n    fbjni::fbjni\n  )\nelse()\n  target_link_libraries(\n    ${LIB_TARGET_NAME}\n    fbjni\n    folly_runtime\n    glog\n    jsi\n    react_codegen_rncore\n    react_debug\n    react_nativemodule_core\n    react_render_core\n    react_render_debug\n    react_render_graphics\n    react_render_mapbuffer\n    react_render_componentregistry\n    react_utils\n    rrc_view\n    turbomodulejsijni\n    yoga\n  )\nendif()\n\ntarget_compile_options(\n  ${LIB_TARGET_NAME}\n  PRIVATE\n  -DLOG_TAG=\\\"ReactNative\\\"\n  -fexceptions\n  -frtti\n  -std=c++20\n  -Wall\n)\n\ntarget_include_directories(\n ${CMAKE_PROJECT_NAME}\n PUBLIC\n ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to Next Button in KeyboardToolbar\nDESCRIPTION: Example showing how to add haptic feedback when the Next button is pressed using the onNextCallback prop and react-native-haptic-feedback library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onNextCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing onStart Handler in useKeyboardHandler\nDESCRIPTION: Example of using the onStart handler which is called before keyboard movement begins. It demonstrates how to determine if the keyboard will appear by checking the progress value.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      'worklet';\n      const willKeyboardAppear = e.progress === 1;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with Yarn\nDESCRIPTION: Command to install the react-native-keyboard-controller package using Yarn package manager.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-keyboard-controller\n```\n\n----------------------------------------\n\nTITLE: Setting up a Jest Mock for react-native-keyboard-controller\nDESCRIPTION: Code that sets up a Jest mock for the react-native-keyboard-controller library by requiring its built-in mock implementation. This should be added to your Jest setup file.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController Hook in Functional Components\nDESCRIPTION: Demonstrates how to use the useKeyboardController hook in a React functional component to access the library's enabled state and control its functionality. The hook returns an object with 'enabled' status and 'setEnabled' function.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Basic useKeyboardHandler Hook Implementation in React Native\nDESCRIPTION: Basic implementation of the useKeyboardHandler hook that demonstrates how to use all four keyboard event handlers. Each handler requires a 'worklet' directive to work properly.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple starting point layout for a chat application, consisting of a ScrollView containing a Messages component.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in React Native App\nDESCRIPTION: Example of wrapping a React Native application with the KeyboardProvider component, which is required for the keyboard controller functionality to work properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Layout for Chat Application in React Native\nDESCRIPTION: A simple starting layout for a typical chat application with a ScrollView component containing Messages. This serves as the foundation before adding interactive keyboard functionality.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Keyboard Controller Website\nDESCRIPTION: Command to install the necessary dependencies for the website using yarn package manager.\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Enabling 120 FPS for iOS Keyboard Animations\nDESCRIPTION: Configuration needed in Info.plist to enable 120 FPS animations on iOS devices with ProMotion displays.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Running Example App on Android for react-native-keyboard-controller\nDESCRIPTION: Command to run the example app on Android device or emulator to test changes to the library.\n\nLANGUAGE: sh\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Fixing Linting Errors for react-native-keyboard-controller\nDESCRIPTION: Command to automatically fix formatting errors detected by the linter.\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook with Event Handlers in React Native\nDESCRIPTION: Basic example of implementing the useKeyboardHandler hook with all four event handlers. Each handler requires a 'worklet' directive to function properly with React Native Reanimated.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Packager for react-native-keyboard-controller Example App\nDESCRIPTION: Command to start the Metro packager for the example app to test your changes during development.\n\nLANGUAGE: sh\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Linting Code for react-native-keyboard-controller\nDESCRIPTION: Command to verify that code passes ESLint checks.\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for react-native-keyboard-controller\nDESCRIPTION: This snippet shows how to set up the built-in Jest mock for the react-native-keyboard-controller library. This code should be added to your Jest setup file to properly mock the library's functionality during tests.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying React Native Keyboard Controller Website Without SSH\nDESCRIPTION: Command to deploy the website without SSH, using GitHub username for authentication. This builds the site and pushes to the gh-pages branch.\n\nLANGUAGE: bash\nCODE:\n```\nGIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing onInteractive Handler in useKeyboardHandler\nDESCRIPTION: Example of implementing the onInteractive handler which is called when user manually drags the keyboard. It demonstrates updating UI in response to user-driven keyboard movements.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Haptic Feedback to KeyboardToolbar Done Button\nDESCRIPTION: Implementation of haptic feedback when the Done button is pressed on the KeyboardToolbar, providing tactile response to user interactions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from \"react-native\";\nimport { KeyboardToolbar } from \"react-native-keyboard-controller\";\nimport { trigger } from \"react-native-haptic-feedback\";\n\nconst options = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: false,\n};\nconst haptic = () =>\n  trigger(Platform.OS === \"ios\" ? \"impactLight\" : \"keyboardTap\", options);\n\n// ...\n\n<KeyboardToolbar onDoneCallback={haptic} />;\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for React Native Keyboard Controller Website\nDESCRIPTION: Command to start a local development server which opens a browser window and supports live reloading.\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook in React Native\nDESCRIPTION: Basic example of using the useKeyboardHandler hook to monitor keyboard events. The hook accepts object with handlers for different keyboard lifecycle events and a dependencies array.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onStart: (e) => {\n      \"worklet\";\n    },\n    onMove: (e) => {\n      \"worklet\";\n    },\n    onInteractive: (e) => {\n      \"worklet\";\n    },\n    onEnd: (e) => {\n      \"worklet\";\n    },\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation in React Class Components\nDESCRIPTION: Shows how to implement keyboard animation in class components using KeyboardContext and KeyboardController. Demonstrates proper lifecycle handling for Android input modes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard Cross-Platform\nDESCRIPTION: Hides the keyboard on any platform. Unlike React Native's built-in method, this works with any focused input component, not just TextInput.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Animation with Class Components in React Native\nDESCRIPTION: Example showing how to access keyboard animation values in a class component using KeyboardContext. It also demonstrates setting Android input modes for proper keyboard behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Focus Between Input Fields\nDESCRIPTION: Sets focus to a specific field relative to the current focus. Takes a parameter indicating whether to focus the previous field, current field, or next field.\n\nLANGUAGE: typescript\nCODE:\n```\nsetFocusTo(\"next\");\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardController with React class components\nDESCRIPTION: Example showing how to access the keyboard controller functionality in class components using the KeyboardContext. This demonstrates how to get access to the enabled state and setEnabled function within a class component's lifecycle methods.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. get an access to `enabled` and `setEnabled` props\n    const { enabled, setEnabled } = this.context;\n\n    // 3. disable a module on demand in your app\n    setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Input Mode in Android with KeyboardController\nDESCRIPTION: This method restores the default windowSoftInputMode declared in the AndroidManifest.xml (or app.json in Expo). It resets the input mode to the default value.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.setDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardController hook in React Native\nDESCRIPTION: A basic example showing how to import and use the useKeyboardController hook to access and control the enabled state of the keyboard controller library. The hook returns the current enabled state and a function to change it.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardController } from \"react-native-keyboard-controller\";\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nsetEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard with KeyboardController\nDESCRIPTION: This method hides the keyboard for any focused input, extending functionality beyond the limitations of the default React Native implementation which relies on specific internal components.\n\nLANGUAGE: typescript\nCODE:\n```\nKeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Using useReanimatedKeyboardAnimation Hook in Functional Components\nDESCRIPTION: Example of how to use the useReanimatedKeyboardAnimation hook in a functional component to access keyboard animation values. The hook provides height and progress values for tracking keyboard state.\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useReanimatedKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useReanimatedKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Resetting to Default Android Input Mode\nDESCRIPTION: Method signature for restoring the default windowSoftInputMode as declared in AndroidManifest.xml or app.json for Expo applications.\n\nLANGUAGE: typescript\nCODE:\n```\nstatic setDefaultMode(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in a Class Component (TSX)\nDESCRIPTION: Example showing how to use react-native-keyboard-controller in a class component by leveraging the KeyboardContext, setting Android input modes, and consuming reanimated values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Not Recommended Approach Using useKeyboardState in Event Handlers\nDESCRIPTION: This example shows a non-recommended approach of using the useKeyboardState hook in event handlers, which could cause unnecessary re-renders.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { isVisible } = useKeyboardState();\n\n<Button\n  onPress={() => {\n    // don't consume state from hook\n    if (isVisible) {\n      // ...\n    }\n  }}\n>\n  Go to next Page\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in React Native Class Components\nDESCRIPTION: Example of using KeyboardController and KeyboardContext in a class component. This approach demonstrates how to access keyboard animation values, set Android input modes, and properly clean up resources.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume reanimated values 😊\n    const { reanimated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using onEnd Handler with useKeyboardHandler\nDESCRIPTION: Example of implementing the onEnd handler which is called when keyboard movement completes. The event contains the current keyboard metrics after animation is finished.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler in useKeyboardHandler\nDESCRIPTION: Example of implementing the onEnd handler which is called when keyboard completes its movement. It shows updating UI values with the final keyboard position metrics.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in react-native or expo bare workflow\nDESCRIPTION: Modifies android/build.gradle to specify the correct Kotlin version to resolve incompatible Kotlin version errors. This change sets the Kotlin version to 1.6.21.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onEnd Handler in useKeyboardHandler\nDESCRIPTION: Example of implementing the onEnd handler which is called when keyboard completes its movement. It shows updating UI values with the final keyboard position metrics.\n\nLANGUAGE: ts\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onEnd: (e) => {\n      'worklet';\n      progress.value = e.progress;\n      height.value = e.height;\n    }\n  },\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Version in react-native/expo bare workflow\nDESCRIPTION: Modification required in android/build.gradle to specify the correct Kotlin version to fix incompatibility errors during Android builds.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KeyboardGestureArea for Interactive Keyboard Dismissal in Android\nDESCRIPTION: Implementation of KeyboardGestureArea to enable interactive keyboard dismissal on Android. The component wraps the ScrollView and uses the iOS-style interpolator for keyboard animations.\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardGestureArea interpolator=\"ios\">\n  <ScrollView>\n    <Messages />\n  </ScrollView>\n</KeyboardGestureArea>\n```\n\n----------------------------------------\n\nTITLE: Testing a Component with useKeyboardAnimation Hook\nDESCRIPTION: This example demonstrates how to test a React component that uses the useKeyboardAnimation hook from react-native-keyboard-controller. The test verifies that the component correctly applies styling based on keyboard position changes by mocking different return values for the hook.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Application Layout in React Native\nDESCRIPTION: A simple starting point layout for a chat application with a ScrollView containing Messages component.\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollView>\n  <Messages />\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Testing keyboard animations with react-native-keyboard-controller\nDESCRIPTION: Complete test case example showing how to test components using the useKeyboardAnimation hook. The test verifies that the component's transform style updates correctly based on keyboard positions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-native/extend-expect\";\nimport React from \"react\";\nimport { Animated } from \"react-native\";\nimport { render } from \"@testing-library/react-native\";\n\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nfunction TestComponent() {\n  const { height } = useKeyboardAnimation();\n\n  return (\n    <Animated.View\n      testID=\"view\"\n      style={{ transform: [{ translateY: height }] }}\n    />\n  );\n}\n\ndescribe(\"basic keyboard interaction\", () => {\n  it(\"should have different styles depends on position\", () => {\n    const { getByTestId, update } = render(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({ transform: [{ translateY: 0 }] });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(150),\n      progress: new Animated.Value(0.5),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 150 }],\n    });\n\n    (useKeyboardAnimation as jest.Mock).mockReturnValue({\n      height: new Animated.Value(300),\n      progress: new Animated.Value(1),\n    });\n    update(<TestComponent />);\n\n    expect(getByTestId(\"view\")).toHaveStyle({\n      transform: [{ translateY: 300 }],\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardHandler Hook for Interactive Keyboard Movement\nDESCRIPTION: Implementation of the useKeyboardHandler hook with an onInteractive callback to handle interactive keyboard movements. This allows distinguishing between regular keyboard show/hide events and user-driven interactive movements.\n\nLANGUAGE: tsx\nCODE:\n```\nuseKeyboardHandler(\n  {\n    onInteractive: (e) => {\n      \"worklet\";\n      // your handler for interactive keyboard movement\n    },\n  },\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for React Native Keyboard Controller\nDESCRIPTION: Code snippet showing how to add the Jest mock to your Jest setup file. This enables testing of components that use the keyboard controller functionality.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Animation in React Native Class Components\nDESCRIPTION: Example showing how to use KeyboardContext with class components instead of the hook approach. Demonstrates proper lifecycle management for Android input modes and consuming animated values from context.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardContext,\n  AndroidSoftInputModes,\n} from \"react-native-keyboard-controller\";\n\nclass KeyboardAnimation extends React.PureComponent {\n  // 1. use context value\n  static contextType = KeyboardContext;\n\n  componentDidMount() {\n    // 2. set input mode for android to `adjustResize`\n    // (can be omitted if you already have `adjustResize` in `AndroidManifest.xml`)\n    KeyboardController.setInputMode(\n      AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE,\n    );\n  }\n\n  componentWillUnmount() {\n    // 2. return to default input mode (for Android)\n    // in order not to break other part of your app\n    KeyboardController.setDefaultMode();\n  }\n\n  render() {\n    // 3. consume animated values 😊\n    const { animated } = this.context;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Mock for React Native Keyboard Controller\nDESCRIPTION: This code snippet shows how to set up the built-in Jest mock for the react-native-keyboard-controller library. It should be added to your Jest setup file to enable testing of components that use the keyboard controller.\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock(\"react-native-keyboard-controller\", () =>\n  require(\"react-native-keyboard-controller/jest\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardAnimation Hook in React Native Functional Components\nDESCRIPTION: A simple example of importing and using the useKeyboardAnimation hook in a functional component to access keyboard height and animation progress values.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst { height, progress } = useKeyboardAnimation();\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider in a React Native App\nDESCRIPTION: Code example showing how to wrap a React Native application with the KeyboardProvider component, which is required for using the react-native-keyboard-controller library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure TypeScript Definition\nDESCRIPTION: TypeScript type definition showing the structure of the data returned by the useReanimatedFocusedInput hook, including the target TextInput and its layout properties.\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedInputLayoutChangedEvent = {\n  target: number; // tag of the focused TextInput\n\n  // layout of the focused TextInput\n  layout: {\n    x: number; // `x` coordinate inside the parent component\n    y: number; // `y` coordinate inside the parent component\n    width: number; // `width` of the TextInput\n    height: number; // `height` of the TextInput\n    absoluteX: number; // `x` coordinate on the screen\n    absoluteY: number; // `y` coordinate on the screen\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-keyboard-controller with NPM\nDESCRIPTION: Command to install the react-native-keyboard-controller package using NPM package manager.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-native-keyboard-controller --save\n```\n\n----------------------------------------\n\nTITLE: Using One-Time Keyboard Listener with Previous API (React Native)\nDESCRIPTION: Example of how developers previously handled keyboard dismissal using a one-time listener that resolves after the keyboard is hidden. This approach was necessary because the dismiss method was synchronous and didn't provide feedback about completion.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  KeyboardController,\n  KeyboardEvents,\n} from \"react-native-keyboard-controller\";\n\nconst subscription = KeyboardEvents.addListener(\"keyboardDidHide\", () => {\n  setVisible(true);\n  subscription.remove();\n});\n\nKeyboardController.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Setting up KeyboardProvider in React Native application\nDESCRIPTION: Example showing how to wrap your React Native application with the KeyboardProvider component, which is required to use the keyboard controller functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Keyboard Animation Component with useKeyboardAnimation in React Native\nDESCRIPTION: This example demonstrates how to create a component that animates in response to keyboard events. It uses the useKeyboardAnimation hook to access keyboard height and animation progress values, which are then applied to transform properties of an Animated.View to create a scaling and translation effect as the keyboard appears and disappears.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Animated, StyleSheet, TextInput, View } from \"react-native\";\nimport { useKeyboardAnimation } from \"react-native-keyboard-controller\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  box: {\n    width: 60,\n    height: 60,\n    marginVertical: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default function KeyboardAnimation() {\n  // 1. we need to use hook to get an access to animated values\n  const { height, progress } = useKeyboardAnimation();\n\n  const scale = progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 2],\n  });\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <Animated.View\n          style={{\n            width: 50,\n            height: 50,\n            backgroundColor: \"#17fc03\",\n            borderRadius: 15,\n            // 2. we can apply any transformations we want\n            transform: [{ translateY: height }, { scale }],\n          }}\n        />\n      </View>\n      <TextInput\n        style={{\n          width: \"100%\",\n          marginTop: 50,\n          height: 50,\n          backgroundColor: \"yellow\",\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting kotlinVersion in Android build.gradle\nDESCRIPTION: Configuration for setting the correct Kotlin version in the Android build.gradle file to resolve compatibility issues with the library.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardEvents Listener in React Native\nDESCRIPTION: Example showing how to add and remove a keyboard event listener using the React useEffect hook. This demonstrates proper subscription management to avoid memory leaks.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeyboardEvents } from \"react-native-keyboard-controller\";\n\nuseEffect(() => {\n  const show = KeyboardEvents.addListener(\"keyboardWillShow\", (e) => {\n    // place your code here\n  });\n\n  return () => {\n    show.remove();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in Android Build Gradle\nDESCRIPTION: Configuration for updating the Kotlin version in Android's build.gradle file to resolve compatibility issues with the library.\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = \"1.6.21\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 120 FPS Support for iOS ProMotion Displays\nDESCRIPTION: Modification to Info.plist required to enable 120 FPS animations on iOS devices with ProMotion displays when using onMove handler.\n\nLANGUAGE: diff\nCODE:\n```\n+\t<key>CADisableMinimumFrameDurationOnPhone</key>\n+\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardProvider Component in React Native App\nDESCRIPTION: Code snippet showing how to wrap a React Native application with the KeyboardProvider component, which is required for using the keyboard controller functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardProvider } from \"react-native-keyboard-controller\";\n\nexport default function App() {\n  return (\n    <KeyboardProvider>\n      {/* your main application code goes here */}\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for react-native-keyboard-controller\nDESCRIPTION: Command to run the unit tests for the project using Jest.\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Dismissing Keyboard while Keeping Input Focus in React Native\nDESCRIPTION: Example of using the new keepFocus parameter with the dismiss method to maintain focus on the input field even after the keyboard is dismissed. This helps preserve the context of which field was last active.\n\nLANGUAGE: ts\nCODE:\n```\nKeyboardController.dismiss({ keepFocus: true });\n```"
  }
]