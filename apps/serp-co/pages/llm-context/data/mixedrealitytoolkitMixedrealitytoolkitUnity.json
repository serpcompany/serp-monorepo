[
  {
    "owner": "mixedrealitytoolkit",
    "repo": "mixedrealitytoolkit-unity",
    "content": "TITLE: Demonstrating Key Path Examples in Data Binding\nDESCRIPTION: This snippet illustrates various examples of key paths used in the data binding framework to uniquely identify pieces of information in a data source. It shows how to access nested data structures and list items.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.data/Documentation~/DataBinding.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* temperature\n* contacts[10].firstName\n* contacts\n* contacts[10].addresses[3].city\n* [10].title\n* kingdom.animal.mammal.aardvark.diet.foodtypes.termites\n```\n\n----------------------------------------\n\nTITLE: Implementing TextMeshPro Data Binding in Unity MRTK\nDESCRIPTION: This example demonstrates how to set up TextMeshPro text with data binding variables to display dynamic content from a JSON API. The text uses double curly braces syntax to reference properties from the data source.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.data/Documentation~/DataBinding.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{ activity }}. It's {{ type }}.\n```\n\n----------------------------------------\n\nTITLE: Implementing MRTK Subsystem Base Class Template in C#\nDESCRIPTION: Template for creating new MRTK subsystem base classes. Includes abstract provider pattern, registration method, and interface implementation placeholders. Requires MixedReality.Toolkit.Subsystems namespace and Unity subsystem dependencies.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/SubsystemBaseClassTemplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// TODO: [Optional] Add copyright and license statement(s).\n\nusing MixedReality.Toolkit.Subsystems;\nusing UnityEngine.Scripting;\nusing UnityEngine.SubsystemsImplementation;\n\nnamespace %NAMESPACE%\n{\n    [Preserve]\n    public class %SUBSYSTEMBASECLASSNAME% :\n        MRTKSubsystem<%SUBSYSTEMBASECLASSNAME%, %SUBSYSTEMBASECLASSNAME%Descriptor, %SUBSYSTEMBASECLASSNAME%.Provider>,\n        I%SUBSYSTEMBASECLASSNAME%\n    {\n        /// <summary>\n        /// Construct the <c>%SUBSYSTEMBASECLASSNAME%</c>.\n        /// </summary>\n        public %SUBSYSTEMBASECLASSNAME%()\n        { }\n\n        [Preserve]\n        public abstract class Provider : MRTKSubsystemProvider<%SUBSYSTEMBASECLASSNAME%>, I%SUBSYSTEMBASECLASSNAME%\n        {\n            #region I%SUBSYSTEMBASECLASSNAME% implementation\n\n            // TODO: Implement abstract Provider class.\n\n            #endregion I%SUBSYSTEMBASECLASSNAME% implementation\n        }\n\n        #region I%SUBSYSTEMBASECLASSNAME% implementation\n\n        // TODO: Calls into abstract Provider (ex: public int MaxValue => provider.MaxValue;\n\n        #endregion I%SUBSYSTEMBASECLASSNAME% implementation\n\n        /// <summary>\n        /// Registers a %SUBSYSTEMBASECLASSNAME% implementation based on the given subsystem parameters.\n        /// </summary>\n        /// <param name=\"subsystemParams\">The parameters defining the %SUBSYSTEMBASECLASSNAME%\n        /// functionality implemented by the subsystem provider.</param>\n        /// <returns>\n        /// <c>true</c> if the subsystem implementation is registered. Otherwise, <c>false</c>.\n        /// </returns>\n        public static bool Register(%SUBSYSTEMBASECLASSNAME%Cinfo subsystemParams)\n        {\n            %SUBSYSTEMBASECLASSNAME%Descriptor Descriptor = %SUBSYSTEMBASECLASSNAME%Descriptor.Create(subsystemParams);\n            SubsystemDescriptorStore.RegisterDescriptor(Descriptor);\n            return true;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MRTK Subsystem Configuration Info Class in C#\nDESCRIPTION: This snippet defines a configuration info class for an MRTK subsystem. It inherits from MRTKSubsystemCinfo and includes a method for equality comparison. Placeholders are provided for adding subsystem-specific properties.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/SubsystemDescriptorTemplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class %SUBSYSTEMBASECLASSNAME%Cinfo : MRTKSubsystemCinfo\n{\n    // TODO: Add subsystem specific properties.\n\n    /// <summary>\n    /// Tests for equality.\n    /// </summary>\n    /// <param name=\"other\">The other <see cref=\"%SUBSYSTEMNAME%\"/> to compare against.</param>\n    /// <returns>`True` if every field in <paramref name=\"other\"/> is equal to this <see cref=\"%SUBSYSTEMBASECLASSNAME%\"/>, otherwise false.</returns>\n    public override bool Equals(MRTKSubsystemCinfo other)\n    {\n        // TODO: Add comparison of subsystem specific property values.\n        return base.Equals(other);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subsystem Configuration Class Template in C# for MRTK\nDESCRIPTION: This code snippet defines a template for creating configuration classes for subsystems in the Mixed Reality Toolkit. It inherits from BaseSubsystemConfig and is designed to be customized with subsystem-specific properties. The class is marked with CreateAssetMenu to allow creating configuration assets through the Unity editor.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/SubsystemConfigTemplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// TODO: [Optional] Add copyright and license statement(s).\n\nusing MixedReality.Toolkit;\nusing UnityEngine;\n\nnamespace %NAMESPACE%\n{\n    /// <summary>\n    /// The configuration object for all %SUBSYSTEMBASECLASSNAME% implementations.\n    /// </summary>\n    [CreateAssetMenu(\n        fileName = \"%SUBSYSTEMBASECLASSNAME%Config.asset\",\n        menuName = \"Custom/Subsystems/%SUBSYSTEMBASECLASSNAME% Config\")]\n    public class %SUBSYSTEMBASECLASSNAME%Config : BaseSubsystemConfig\n    {\n        // TODO: Add subsystem specific configuration properties.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MRTK Subsystem Descriptor Class in C#\nDESCRIPTION: This snippet defines a descriptor class for an MRTK subsystem. It inherits from MRTKSubsystemDescriptor and includes a constructor and a static Create method. Placeholders are provided for initializing and adding subsystem-specific properties.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/SubsystemDescriptorTemplate.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class %SUBSYSTEMBASECLASSNAME%Descriptor :\n    MRTKSubsystemDescriptor<%SUBSYSTEMBASECLASSNAME%, %SUBSYSTEMBASECLASSNAME%.Provider>\n{\n    /// <summary>\n    /// Constructs a <c>%SUBSYSTEMBASECLASSNAME%Descriptor</c> based on the given parameters.\n    /// </summary>\n    /// <param name=cinfo>The parameters required to initialize the descriptor.</param>\n    %SUBSYSTEMBASECLASSNAME%Descriptor(%SUBSYSTEMBASECLASSNAME%Cinfo cinfo) : base(cinfo)\n    {\n        // TODO: Initialize subsystem specific properties.\n    }\n\n    // TODO: Add subsystem specific properties.\n\n    /// <summary>\n    /// Creates a <c>%SUBSYSTEMBASECLASSNAME%Descriptor</c> based on the given parameters validating that the\n    /// <c>id</c> and <c>implentationType</c> properties are specified.\n    /// </summary>\n    /// <param name='cinfo'>The parameters required to initialize the descriptor.</param>\n    /// <returns>\n    /// The created <c>%SUBSYSTEMBASECLASSNAME%Descriptor</c>.\n    /// </returns>\n    internal static %SUBSYSTEMBASECLASSNAME%Descriptor Create(%SUBSYSTEMBASECLASSNAME%Cinfo cinfo)\n    {\n        // Validates cinfo.\n        if (!XRSubsystemHelpers.CheckTypes<%SUBSYSTEMBASECLASSNAME%, %SUBSYSTEMBASECLASSNAME%.Provider>(\n                cinfo.Name,\n                cinfo.SubsystemTypeOverride,\n                cinfo.ProviderType))\n        {\n            throw new ArgumentException(\"Could not create %SUBSYSTEMBASECLASSNAME%Descriptor.\");\n        }\n\n        return new %SUBSYSTEMBASECLASSNAME%Descriptor(cinfo);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an XR Subsystem Provider Constructor and Configuration in C#\nDESCRIPTION: Basic structure for an XR subsystem provider class showing the configuration property and constructor implementation. It retrieves configuration data using XRSubsystemHelpers and includes a TODO reminder to apply the configuration to the provider. Placeholder names (%CONFIGNAME% and %SUBSYSTEMNAME%) must be replaced with actual type names.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/ApplyConfigTemplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected %CONFIGNAME% Config { get; }\n\npublic %SUBSYSTEMNAME%Provider() : base()\n{\n    Config = XRSubsystemHelpers.GetConfiguration<%CONFIGNAME%, %SUBSYSTEMNAME%>();\n    \n    // TODO: Apply the configuration to the provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MRTK Subsystem in C#\nDESCRIPTION: This code snippet defines a template for creating a new MRTK subsystem. It includes subsystem registration, attribute decoration for Unity's subsystem framework, and a skeleton for the subsystem provider implementation.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/SubsystemDerivedClassTemplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing MixedReality.Toolkit;\nusing MixedReality.Toolkit.Subsystems;\nusing UnityEngine;\nusing UnityEngine.Scripting;\n\nnamespace %NAMESPACE%\n{\n    [Preserve]\n    [MRTKSubsystem(\n        Name = \"%RUNTIMENAME%\",\n        DisplayName = \"%DISPLAYNAME%\",\n        Author = \"%ORGANIZATION%\",\n        ProviderType = typeof(%SUBSYSTEMNAME%Provider),\n        SubsystemTypeOverride = typeof(%SUBSYSTEMNAME%),\n        ConfigType = typeof(%CONFIGNAME%))]\n    public class %SUBSYSTEMNAME% : %SUBSYSTEMBASECLASSNAME%\n    {\n        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]\n        static void Register()\n        {\n            // Fetch subsystem metadata from the attribute.\n            var cinfo = XRSubsystemHelpers.ConstructCinfo<%SUBSYSTEMNAME%, %SUBSYSTEMBASECLASSNAME%Cinfo>();\n\n            if (!%SUBSYSTEMNAME%.Register(cinfo))\n            {\n                Debug.LogError($\"Failed to register the {cinfo.Name} subsystem.\");\n            }\n        }\n\n        [Preserve]\n        class %SUBSYSTEMNAME%Provider : Provider\n        {\n%APPLYCONFIG%\n            #region I%SUBSYSTEMBASECLASSNAME% implementation\n\n            // TODO: Add the provider implementation.\n\n            #endregion %SUBSYSTEMBASECLASSNAME% implementation\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subsystem Interface Template in C#\nDESCRIPTION: Defines a template for creating new subsystem interfaces with placeholder tokens for namespace and class names. The interface is marked as internal and includes TODO comments for adding copyright statements and implementation-specific members.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/SubsystemWizard/Templates/SubsystemInterfaceTemplate.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// TODO: [Optional] Add copyright and license statement(s).\n\nnamespace %NAMESPACE%\n{\n    /// <summary>\n    /// Interface defining the functionality of %SUBSYSTEMBASECLASSNAME%.\n    /// </summary>\n    internal interface I%SUBSYSTEMBASECLASSNAME%\n    {\n        // TODO: Add subsystem specific properties and/or methods.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DescribableObject in Unity for Assistive Reading\nDESCRIPTION: DescribableObject is a script that can be added to UI elements and scene objects to enable future assistive readers to understand the role and details of the object. It's currently in early development stages.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.accessibility/Documentation~/Accessibility.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> DescribableObject is in the early stages of development and is provided to allow review and to gather feedback.\n```\n\n----------------------------------------\n\nTITLE: Implementing TextAccessibility for Automatic Text Color Inversion in Unity\nDESCRIPTION: The TextAccessibility script can be attached to TextMesh Pro objects to enable automatic color inversion, improving readability for users with low vision or color perception issues. It supports both backed and non-backed text objects.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.accessibility/Documentation~/Accessibility.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> The invert text color feature supports both backed and non-backed TextMesh Pro objects. In Augmented Reality experiences, non-backed text will not invert as effectively as backed text.\n```\n\n----------------------------------------\n\nTITLE: Supported Platforms Table in Markdown\nDESCRIPTION: Markdown table showing supported platforms and devices for MRTK3, including OpenXR devices like HoloLens 2, Magic Leap 2, and various VR headsets.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Platform | Supported Devices |\n|---|---|\n| OpenXR devices | Microsoft HoloLens 2 <br> Magic Leap 2 <br> Meta Quest 1/2 <br> Windows Mixed Reality (experimental) <br> SteamVR (experimental) <br> Oculus Rift on OpenXR (experimental) <br> Varjo XR-3 (experimental) <br> **If your OpenXR device already works with MRTK3, let us know!**\n| Windows | Traditional flat-screen desktop (experimental)\n| And more coming soon! |\n```\n\n----------------------------------------\n\nTITLE: Early Preview Packages Table in Markdown\nDESCRIPTION: Markdown table listing MRTK3 packages that are in early preview status, including their official package names.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Package Name |\n| --- | --- |\n| Accessibility | org.mixedrealitytoolkit.accessibility |\n| Data Binding and Theming | org.mixedrealitytoolkit.data |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Resolved Key Paths in Data Binding\nDESCRIPTION: This snippet shows examples of fully resolved key paths in the data binding framework. It demonstrates how partial key paths are combined with absolute key paths to reference specific data items within a larger dataset.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.data/Documentation~/DataBinding.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* \"f3cb1906-d8b3-489d-9f74-725e5542b55d/photo_url\"\n* \"f3cb1906-d8b3-489d-9f74-725e5542b55d/title\"\n* \"f3cb1906-d8b3-489d-9f74-725e5542b55d/date_taken\"\n* \"f3cb1906-d8b3-489d-9f74-725e5542b55d/description\"\n```\n\n----------------------------------------\n\nTITLE: Referencing UX Control Theming Components in Markdown\nDESCRIPTION: This markdown snippet lists and describes key components used in UX control theming for MRTK-Unity, including DataBindingConfigurator, data sources, MRTK_UXComponents_ThemeProfile, and ThemeProvider.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/UnityProjects/MRTKDevTemplate/Assets/UX Theming Example/Themes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UX Control Theming\n\nAll UXComponents controls can easily be themed. New UX elements that are application specific can also be themed quite easily by creating either a new binding profile, or extending the existing UXComponents binding profile. A single script, DataBindingConfigurator, added to the root of a prefab, will do all the necessary binding.\n\nAny data source of any kind such as DataSourceReflection, DataSourceDictionary, or DataSourceJSON can be used to provide theming data. \n\nThe default UXComponents controls uses a ScriptableObject, MRTK_UXComponents_ThemeProfile, as a data source, which is then attached to a DataSourceReflection data source instance to retrieve data from it. \n\nAs long as the data source uses the same naming conventions as the UXComponents controls, as seen in the MRTK_UXComponents_ThemeProfile instance of the UXCoreThemeProfile ScriptableObject, it will work properly with the standard UXComponents controls.\n\nAlthough not a requirement, a helper script called ThemeProvider, can be used to make it easy to set up and provide the right profile.  If this is higher in the Scene's GameObject heirarchy than the controls that depend on it, it will automatically be discovered and used because it implements IDataSourceProvider\n```\n\n----------------------------------------\n\nTITLE: Adding Required Packages for MRTK3 Controller Model Loading in Unity\nDESCRIPTION: Instructions for adding the glTFast and KTX packages to a Unity project using the Package Manager. These packages are necessary for MRTK3 to load controller models in their special, animation-enabled format.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.input/Visualizers/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nglTFast: com.unity.cloud.gltfast\nKTX: com.unity.cloud.ktx\n```\n\n----------------------------------------\n\nTITLE: GitHub Access Roles Documentation in Markdown\nDESCRIPTION: Lists and describes the different GitHub access roles (read, triage, write) and their corresponding permissions and requirements for contributors to the MRTK Unity project.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Read** Read and clone repositories. Open and comment on issues and pull requests.\n* **Triage** Read permissions plus manage issues and pull requests.\n* **Write** Triage permissions plus read, clone and push to repositories.\n```\n\n----------------------------------------\n\nTITLE: Maintainers Table in Markdown\nDESCRIPTION: A markdown table listing the project maintainers with their names, GitHub aliases, and organizational affiliations. Includes representatives from Microsoft, Magic Leap, Qualcomm, and Ultraleap.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/MAINTAINERS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     Name          |     Alias       |     Affiliated Organization     |\n|-------------------|-----------------|---------------------------------|\n| Jackie Curley     | jackiecurley    | Microsoft                       |\n| Chris Oje         | whitetigerhelix | Microsoft                       |\n| Griff Hazen       | GHazen-ML       | Magic Leap                      |\n| Wyck Hebert       | whebertML       | Magic Leap                      |\n| Kurtis Eveleigh   | keveleigh       | Qualcomm                        |\n| Max Palmer        | MaxPalmer-UH    | Ultraleap                       |\n| Rob Blenkinsopp   | rblenkinsopp    | Ultraleap                       |\n```\n\n----------------------------------------\n\nTITLE: Issue Management Label Table in Markdown\nDESCRIPTION: Markdown table defining all available issue labels and their descriptions for the MRTK-Unity project, including type labels, status labels, and needs labels.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/contributions/opening-and-assessing-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Label  | Description |\n|--------|------------ |\n| Type: Appeal | A Project appeal that needs the attention of the Project Maintainers |\n| Type: Bug | A problem with an existing feature that can be fixed with the next patched release. |\n| Type: Feature Request |  A request for a new feature that can be included with the next minor version release. |\n| Type: Breaking Change | A change that contains incompatible API or behavior changes from an older package version. The fix for this issue must be included with the next major version release. |\n| Type: Release Blocker | A bug that should be fixed sometime before the next release. |\n| Type: Documentation | Issue for new or existing documentation. |\n| Type: Good First Issue | Issue that is good for newcomers. |\n| Needed By: [Org Name] | The specified affiliated organization depends on this issue. |\n| Needs: Author Feedback | Needs additional information from the issue author. |\n| Needs: Triage | Needs to be triaged. |\n| Needs: Repro | Missing clear or consistent reproduction steps. |\n| Needs: Issue Template | Missing some required information in the issue template. |\n| Needs: Version Info | Missing the version number in which the bug was reproduced. |\n| Needs: Platform Info | Missing the platforms which this bug was reproduced on. |\n| Needs: Verify on Latest | Needs to be verified on the latest version of the Project package |\n| Needs: Design Feedback | A Project designer needs to provide feedback. |\n| Needs: [Org Name] Attention | The specified affiliated organization needs to review the issue. |\n| Package: [Package Name] | The Project package that is impacted by this issue. |\n| Area: [Area Name] | The Project area of the that is impacted by this issue. |\n| Status: Duplicate | The issue is a duplicate of another issue. The duplicate issue must be referenced in the comments. |\n| Status: In Review | A fix for the issue has been submitted for review. |\n| Status: Fixed | A fix for the issue has been merged. |\n| Status: Answered | A discussion topic has been answered. |\n| Status: Won't Fix | A valid problem that will not be fixed. |\n| Status: Invalid | Not a valid discussion topic, bug, or feature request. |\n| Status: By Design | Described behavior that is expected. |\n| Status: Help Wanted | Extra attention is needed to resolve the issue |\n| Status: Blocked | Development is blocked by another task or issue. |\n| Merge: Blocked | The pull request merge is blocked until Project Maintainers approve. |\n```\n\n----------------------------------------\n\nTITLE: Markdown Dependencies Table Structure\nDESCRIPTION: A standardized table format used throughout the document to track dependency versions, showing minimum version, maximum version, change date, author, and reason for changes.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/DEPENDS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Min Version | Max Version | Date          | Author          | Change Reason                        |\n|-------------|-------------|---------------|-----------------|--------------------------------------|\n| 2021.3.21   |             | Sep. 20, 2023 | @AMollis        | Initial versions                     |\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Entries in Markdown\nDESCRIPTION: This code snippet demonstrates the structure and formatting of changelog entries using Markdown. It includes headers for different versions, and bullet points for added and fixed items.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.standardassets/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.2.0-development] - 2024-03-22\n\n### Added\n\n* Added unified font atlas and updated corresponding fonts and their materials. [PR #700](https://github.com/MixedRealityToolkit/MixedRealityToolkit-Unity/pull/700)\n\n## [3.1.0] - 2024-02-09\n\n### Added\n\n* Added SimpleEmptyButton (Experimental) and SimpleActionButton (Experimental) prefabs plus corresponding (Experimental) assets and demoscene. [PR #635](https://github.com/MixedRealityToolkit/MixedRealityToolkit-Unity/pull/635)\n\n### Fixed    \n  \n* Fixed support for UPM package publishing in the Unity Asset Store. [PR #519](https://github.com/MixedRealityToolkit/MixedRealityToolkit-Unity/pull/519)\n* Fixing shaders of a couple of TMPro fonts [PR #696](https://github.com/MixedRealityToolkit/MixedRealityToolkit-Unity/pull/696)\n* Set the Data packages's CooperHewitt-BoldItalic SDK shader to the Graphic Tools TMPro shader [PR #696](https://github.com/MixedRealityToolkit/MixedRealityToolkit-Unity/pull/696)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Version history entries detailing changes made to the MRTK Unity package across versions 3.0.2 through 3.0.4, including package publishing fixes and assembly definition updates.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.tools/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.4-development] - 2024-08-29\n\n### Changed\n\n* Package patch version update to allow UPM publishing\n\n## [3.0.3] - 2024-04-17\n\n### Fixed\n\n* Fixing .asmdef for Editor Unit Tests, so it now contains proper `defineConstraints`.\n\n## [3.0.2] - 2024-03-20\n\n### Fixed\n\n* Fixed support for UPM package publishing in the Unity Asset Store.\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog in Markdown\nDESCRIPTION: This snippet shows the basic structure of the changelog file, including the title, format reference, and section headers for unreleased changes and specific version releases.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/org.mixedrealitytoolkit.windowsspeech/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/).\n\n## [Unreleased]\n\n### Changed\n\n* Subsystem no longer registers itself on non-Windows platforms.\n\n## [3.0.3] - 2024-04-17\n\n### Fixed\n\n* Reduced package description to support for UPM package publishing in the Unity Asset Store.\n\n## [3.0.2] - 2024-03-20\n\n### Fixed\n\n* Fixed support for UPM package publishing in the Unity Asset Store. [PR #519](https://github.com/MixedRealityToolkit/MixedRealityToolkit-Unity/pull/519)\n```\n\n----------------------------------------\n\nTITLE: Cloning the MRTK Repository with Branch Specification\nDESCRIPTION: Command for cloning the MRTK repository with the main branch specified, used in the contribution process to ensure working with the current development branch.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/contributions/code-contributions.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngit clone --branch main YOUR_GIT_URL\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for MRTK Contributions\nDESCRIPTION: Git command for creating a new branch to make changes or fixes to the MRTK codebase, following the contribution workflow.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/contributions/code-contributions.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ngit checkout -b foobar_fix\n```\n\n----------------------------------------\n\nTITLE: Running MRTK Playmode Tests Locally in Batch Mode\nDESCRIPTION: PowerShell script command for running MRTK tests locally in batch mode to identify issues before continuous integration. The script generates output files in the /out folder.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/contributions/code-contributions.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n./Tooling/Tests/run_playmode_tests.ps1\n```\n\n----------------------------------------\n\nTITLE: Running MRTK Tests with Custom Unity Version and Project Path\nDESCRIPTION: PowerShell command for running MRTK tests with specified Unity version and project path parameters, allowing for more flexible testing configurations.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/contributions/code-contributions.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n./Tooling/Tests/run_playmode_tests.ps1 -unityVersion 2021.3.5f1 -projectPath ../my/project/path\n```\n\n----------------------------------------\n\nTITLE: Specifying Unity Editor Version for Mixed Reality Toolkit Project\nDESCRIPTION: This configuration specifies that the project was created with Unity 2021.3.26f1. The file includes both the base editor version and the full version with its specific revision hash.\nSOURCE: https://github.com/mixedrealitytoolkit/mixedrealitytoolkit-unity/blob/main/UnityProjects/MRTKDevTemplate/ProjectSettings/ProjectVersion.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nm_EditorVersion: 2021.3.26f1\nm_EditorVersionWithRevision: 2021.3.26f1 (a16dc32e0ff2)\n```"
  }
]