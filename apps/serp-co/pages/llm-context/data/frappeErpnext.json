[
  {
    "owner": "frappe",
    "repo": "erpnext",
    "content": "TITLE: Setting up ERPNext for Local Development\nDESCRIPTION: Steps to set up ERPNext locally for development. This includes creating a new site, getting the ERPNext app, and installing it using Bench commands.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nbench start\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Create a new site\nbench new-site erpnext.localhost\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Get the ERPNext app\nbench get-app https://github.com/frappe/erpnext\n\n# Install the app\nbench --site erpnext.localhost install-app erpnext\n```\n\n----------------------------------------\n\nTITLE: Setting up ERPNext with Docker\nDESCRIPTION: Commands to clone the Frappe Docker repository and start ERPNext using Docker Compose. This setup creates a local ERPNext instance accessible on port 8080.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/frappe/frappe_docker\ncd frappe_docker\ndocker compose -f pwd.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Reposting Item Valuation Process in Python\nDESCRIPTION: This snippet represents the entry point for the entire reposting process in ERPNext. It involves the 'repost_entries' function from the repost_item_valuation.py file, which manages the status of reposting items through various stages such as 'Queued', 'In Progress', 'Completed', 'Failed', and 'Skipped'. The function requires the 'Repost Item Valuation' doctype and interacts with the stock ledger to re-evaluate future transactions when a backdated transaction is detected.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/spec/reposting.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nEntry point for whole process is \"repost_entries\" function in repost_item_valuation.py\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Journal Entry in Python\nDESCRIPTION: This function creates a parent Journal Entry in an accounting system. It sets up accounts, calculates amounts, and handles currency conversions. The function takes various parameters to customize the entry creation process.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/accounts/doctype/journal_entry_account/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef make_journal_entry(account1, account2, amount, cost_center=None, project=None, finance_book=None, party_type=None, party=None, party_balance=None, posting_date=None, entry_type='Journal Entry', against_voucher=None, against_voucher_type=None, company=None, user_remark=None, save=True, submit=False, do_not_submit=False, multi_currency=None, exchange_rate=None, account_currency=None, payment_type=None, reference_date=None, reference_no=None, ignore_ifnull=False, is_cancellation=0):\n    \n    # ... (function implementation)\n    \n    # Create Journal Entry\n    jv = frappe.new_doc('Journal Entry')\n    jv.voucher_type = entry_type\n    jv.posting_date = posting_date or nowdate()\n    jv.company = company\n    jv.finance_book = finance_book\n    jv.user_remark = user_remark\n    jv.multi_currency = multi_currency\n    jv.is_cancellation = is_cancellation\n    \n    # ... (additional setup)\n    \n    if save or submit:\n        jv.insert()\n        \n        if submit:\n            jv.submit()\n    \n    return jv\n```\n\n----------------------------------------\n\nTITLE: Defining Purchase Invoice Advance DocType in Python for ERPNext\nDESCRIPTION: This code snippet defines the DocType 'Purchase Invoice Advance' using Frappe's Document class. It specifies various fields to track advance payments, including the advance amount, reference details, and allocation status.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/accounts/doctype/purchase_invoice_advance/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n# License: GNU General Public License v3. See license.txt\n\n\nfrom frappe.model.document import Document\n\nclass PurchaseInvoiceAdvance(Document):\n\tpass\n```\n\n----------------------------------------\n\nTITLE: Querying Stock Ledger Entry in SQL\nDESCRIPTION: This SQL snippet filters non-cancelled stock ledger entries for a specified item and warehouse. This is essential for operations on item-warehouse combinations in the stock ledger by sorting entries based on posting date, time, and creation timestamp. Requires valid 'item_code' and 'warehouse_name' for execution, returning entries in chronological order.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/spec/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom `tabStock Ledger Entry` as sle\nwhere\n    is_cancelled = 0  --- cancelled entries don\\'t affect ledger\n    and item_code = 'item_code' and warehouse = 'warehouse_name'\norder by timestamp(posting_date, posting_time), creation\n```\n\n----------------------------------------\n\nTITLE: Creating Address Template using Jinja\nDESCRIPTION: A Jinja template example showing how to format address fields including optional fields like state, pincode, phone, fax and email. The template handles conditional rendering of optional address components and formats them with proper line breaks.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/regional/address_template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\n{{ address_line1 }}<br>\n{% if address_line2 %}{{ address_line2 }}<br>{% endif -%}\n{{ city }}<br>\n{% if state %}{{ state }}<br>{% endif -%}\n{% if pincode %} PIN:  {{ pincode }}<br>{% endif -%}\n{{ country }}<br>\n{% if phone %}Phone: {{ phone }}<br>{% endif -%}\n{% if fax %}Fax: {{ fax }}<br>{% endif -%}\n{% if email_id %}Email: {{ email_id }}<br>{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Payment Ledger Basic Entry Example\nDESCRIPTION: Example showing Payment Ledger entries for an invoice of ₹100 with a partial payment of ₹80\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/accounts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| voucher_no | against_voucher_no | amount |\n|------------|--------------------|--------|\n| SINV-01    | SINV-01            | 100    |\n| PAY-01     | SINV-01            | -80    |\n```\n\n----------------------------------------\n\nTITLE: Payment Ledger Credit Note Reconciliation Example\nDESCRIPTION: Example demonstrating Payment Ledger entries for reconciling a credit note of ₹70 against an invoice of ₹100 using a Journal Entry\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/accounts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| voucher_no | against_voucher_no | amount |\n|------------|--------------------|--------|\n| SINV-01    | SINV-01            | 100    |\n|            |                    |        |\n| CR-NOTE-01 | CR-NOTE-01         | -70    |\n|            |                    |        |\n| JE-01      | CR-NOTE-01         | +70    |\n| JE-01      | SINV-01            | -70    |\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic FIFO Slot Addition (Plain Text)\nDESCRIPTION: This example demonstrates the basic concept of FIFO slots. As stock comes in, a new slot representing [quantity, date] is appended to the FIFO queue, allowing tracking of total stock and the age of each batch.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nEg. For Item A:\n----------------------\nDate | Qty | Queue\n----------------------\n1st  | +50 | [[50, 1-12-2021]]\n2nd  | +20 | [[50, 1-12-2021], [20, 2-12-2021]]\n----------------------\n```\n\n----------------------------------------\n\nTITLE: Illustrating FIFO Outward Transaction with Sufficient Balance (Plain Text)\nDESCRIPTION: This example shows how the FIFO queue is updated when an outward transaction (stock issue) occurs and there is sufficient quantity in the oldest slot. The required quantity is deducted directly from the first slot.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n----------------------\nDate | Qty | Queue\n----------------------\n1st  | +50 | [[50, 1-12-2021]]\n2nd  | -20 | [[30, 1-12-2021]]\n2nd  | +20 | [[30, 1-12-2021], [20, 2-12-2021]]\n```\n\n----------------------------------------\n\nTITLE: Illustrating FIFO Outward Transaction Consuming Multiple Slots (Plain Text)\nDESCRIPTION: This example demonstrates an outward transaction where the quantity required (-60) exceeds the quantity in the first slot (50). The first slot is fully consumed and removed, and the remaining required quantity (10) is deducted from the next available slot.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n----------------------\nDate | Qty | Queue\n----------------------\n1st  | +50 | [[50, 1-12-2021]]\n2nd  | +20 | [[50, 1-12-2021], [20, 2-12-2021]]\n2nd  | -60 | [[10, 2-12-2021]]\n```\n\n----------------------------------------\n\nTITLE: Illustrating FIFO Outward Transaction with Insufficient Balance (Negative Stock) (Plain Text)\nDESCRIPTION: This example shows how the system handles an outward transaction when the total stock is insufficient, which is only possible if 'Allow Negative Stock' is enabled. The available stock is consumed, and a negative balance slot is created to represent the shortfall.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n----------------------\nDate | Qty | Queue\n----------------------\n1st  | +50 | [[50, 1-12-2021]]\n2nd  | -60 | [[-10, 1-12-2021]]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Stock Inward After Negative Balance (Plain Text)\nDESCRIPTION: This example demonstrates how incoming stock interacts with a negative balance slot. Instead of creating new slots, the inward quantity is used to offset the negative balance until it becomes zero or positive. Only then are new slots added for further incoming stock.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nEg:\n----------------------\nDate | Qty | Queue\n----------------------\n1st  | +50 | [[50, 1-12-2021]]\n2nd  | -60 | [[-10, 1-12-2021]]\n3rd  | +5  | [[-5, 3-12-2021]]\n4th  | +10 | [[5, 4-12-2021]]\n4th  | +20 | [[5, 4-12-2021], [20, 4-12-2021]]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Transfer Qty Bucket in Repack (Same Item/Warehouse) (Plain Text)\nDESCRIPTION: This example shows the use of a 'Transfer Qty Bucket' during a Repack transaction involving the same item and warehouse. Stock consumed (-50) is temporarily held in the bucket and then re-added (+50) to the FIFO queue, preserving the original date of the consumed stock to maintain FIFO accuracy.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nEg:\n-------------------------------------------------------------------------------------\nDate | Qty   | Voucher |             FIFO Queue           \t   | Transfer Qty Buckets\n-------------------------------------------------------------------------------------\n1st  | +500  |  PR     | [[500, 1-12-2021]]   \t\t\t   |\n2nd  | -50   |  Repack | [[450, 1-12-2021]]   \t\t\t   | [[50, 1-12-2021]]\n2nd  | +50   |  Repack | [[450, 1-12-2021], [50, 1-12-2021]]   | []\n```\n\n----------------------------------------\n\nTITLE: Illustrating Transfer Qty Bucket with Split Consumption in Repack (Plain Text)\nDESCRIPTION: This example demonstrates a Repack scenario with multiple consumption rows (-50, -50) before the final inward row (+100). Each consumption adds a corresponding entry to the 'Transfer Qty Bucket'. When stock is added back, these buckets are consumed and re-added to the FIFO queue with their original dates.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/stock/report/stock_ageing/stock_ageing_fifo_logic.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nEg:\n-------------------------------------------------------------------------------------\nDate | Qty   | Voucher |             FIFO Queue           \t   | Transfer Qty Buckets\n-------------------------------------------------------------------------------------\n1st  | +500  |  PR     | [[500, 1-12-2021]]   \t\t\t   |\n2nd  | -50   |  Repack | [[450, 1-12-2021]]   \t\t\t   | [[50, 1-12-2021]]\n2nd  | -50   |  Repack | [[400, 1-12-2021]]   \t\t\t   | [[50, 1-12-2021],\n-\t | \t\t | \t\t   | \t\t\t\t\t   |[50, 1-12-2021]]\n2nd  | +100  |  Repack | [[400, 1-12-2021], [50, 1-12-2021],   | []\n-\t | \t\t | \t\t   | [50, 1-12-2021]]\t\t\t   |\n```\n\n----------------------------------------\n\nTITLE: Setting Exchange Gain/Loss Posting Date in Accounts Settings - Python\nDESCRIPTION: This code sets the 'exchange_gain_loss_posting_date' field of the single 'Accounts Settings' document to 'Payment' using the Frappe ORM. Prerequisites include a running Frappe environment and access to the relevant Accounts settings singleton. The operation only updates the configuration and does not return output; it is commonly used as part of a migration or patch.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.db.set_single_value(\"Accounts Settings\", \"exchange_gain_loss_posting_date\", \"Payment\")\n```\n\n----------------------------------------\n\nTITLE: Setting System Settings in Frappe\nDESCRIPTION: This code snippet sets the application name in 'System Settings' to 'ERPNext' using the Frappe set_value method. It requires 'System Settings' accessibility and aims to update existing configurations. The operation modifies application configurations to reflect 'ERPNext' as the app name.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.db.set_value('System Settings', None, 'app_name', 'ERPNext')\n```\n\n----------------------------------------\n\nTITLE: Setting Single Value in Frappe Database - Python\nDESCRIPTION: This snippet sets the value of the 'project_update_frequency' field in the 'Buying Settings' single document to 'Each Transaction' using Frappe's ORM. This operation requires that the Frappe framework and its database context are available at runtime. It expects valid document and field names as parameters and does not return a value, but directly modifies the persisted system settings.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.db.set_single_value(\"Buying Settings\", \"project_update_frequency\", \"Each Transaction\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Date Format via Frappe DB - Python\nDESCRIPTION: This snippet sets the system-wide default for 'date_format' by retrieving its current value from the 'System Settings' single document, again using Frappe's ORM API. Dependencies include initialized Frappe runtime and accessible settings documents. The snippet reads a value from one config and applies it globally, expecting all relevant settings to exist in the database beforehand.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.db.set_default(\"date_format\", frappe.db.get_single_value(\"System Settings\", \"date_format\"))\n```\n\n----------------------------------------\n\nTITLE: Reloading ERPNext Integration Doctypes\nDESCRIPTION: This snippet reloads specified DocTypes in the 'erpnext_integrations' module using Frappe's reload_doc function. It is used to refresh the DocType definitions for 'TaxJar Settings' and 'Product Tax Category'. This requires access to the Frappe framework and intended to ensure the latest schema is applied.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.reload_doc(\"erpnext_integrations\", \"doctype\", \"TaxJar Settings\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.reload_doc(\"erpnext_integrations\", \"doctype\", \"Product Tax Category\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Report Documents in Frappe\nDESCRIPTION: This snippet demonstrates renaming a report from 'TDS Payable Monthly' to 'Tax Withholding Details' using Frappe's rename_doc method. With 'force' set to true, this process disregards standard checks, ensuring the rename succeeds regardless of regular constraints. Dependencies include Frappe and proper DocType access.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.rename_doc(\"Report\", \"TDS Payable Monthly\", \"Tax Withholding Details\", force=True)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Project Code of Conduct\nDESCRIPTION: The complete code of conduct document written in Markdown format, defining community standards, responsibilities, and enforcement procedures for the ERPNext project.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@frappe.io. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Deleting Various DocTypes in Frappe\nDESCRIPTION: This snippet deletes several DocTypes related to 'Cash Flow Mapping' using Frappe's delete_doc method with 'ignore_missing' set to true, ensuring the operation does not fail if a DocType doesn't exist. Requires appropriate access permissions in Frappe.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc('DocType', 'Cash Flow Mapping Template Details', ignore_missing=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc('DocType', 'Cash Flow Mapping', ignore_missing=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc('DocType', 'Cash Flow Mapper', ignore_missing=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc('DocType', 'Cash Flow Mapping Template', ignore_missing=True)\n```\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc('DocType', 'Cash Flow Mapping Accounts', ignore_missing=True)\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents Using Frappe\nDESCRIPTION: This snippet executes the deletion of a specified report document titled 'Quoted Item Comparison' from the ERPNext database using the Frappe framework. It requires access to the 'Report' DocType. The input is the document type and name to be deleted, and the output is the removal of the specified document.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc(\"Report\", \"Quoted Item Comparison\")\n```\n\n----------------------------------------\n\nTITLE: Delete Document If Exists Using Frappe\nDESCRIPTION: Deletes a workspace document named 'ERPNext Integrations Settings' if it exists using Frappe's delete_doc_if_exists function. This is useful for cleanup tasks. It accepts the document type and name, and there will be no change if the document does not exist. Requires relevant Frappe utilities.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/erpnext/patches.txt#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nexecute:frappe.delete_doc_if_exists('Workspace', 'ERPNext Integrations Settings')\n```\n\n----------------------------------------\n\nTITLE: HTML Table of ERPNext Sponsors and Features\nDESCRIPTION: This HTML snippet defines a table structure to display a list of sponsors for the ERPNext project and the specific features they funded. Each row contains the sponsor's name (often linked) and a description of the sponsored feature, along with a link to the relevant GitHub issue or pull request. It uses basic HTML table tags (`<table>`, `<tbody>`, `<tr>`, `<td>`) and inline styles for width.\nSOURCE: https://github.com/frappe/erpnext/blob/develop/sponsors.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"width: 100%\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"http://www.mcleans.net.au\">McLean Images</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tCredit period setting options\n\t\t\t\tfor Customer <a href=\"https://github.com/frappe/erpnext/issues/3451\">#3451</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"http://www.strellagroup.com\">Strella Consulting Sdn Bhd</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tSales / Purchase Return Enhancement <a href=\"https://github.com/frappe/erpnext/issues/3582\">#3582</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\tPT. Ridho Sribumi Sejahtera\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tAdditional Costs in Stock Entry <a href=\"https://github.com/frappe/erpnext/issues/3613\">#3613</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"http://www.rigpl.com\">Rohit Industries</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tMandrill Integration <a href=\"https://github.com/frappe/erpnext/issues/3546\">#3546</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"http://www.gps.gt\">Startrack</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tDelivery to Target Warehouse <a href=\"https://github.com/frappe/erpnext/issues/3970\">#3546</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"https://www.believerschurch.com/\">Believer's Church</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tLeave Allocation based on Arbitrary Dates <a href=\"https://github.com/frappe/erpnext/issues/1938\">#1938</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"http://agtech.com.sq\">AG Technologies, Singapore</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tBulk edit via export-import in Bank Reconciliation <a href=\"https://github.com/frappe/erpnext/issues/1938\">#4356</a>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 30%\">\n\t\t\t\t<a href=\"https://www.sapconinstruments.com/\">Sapcon Instruments Pvt Ltd</a>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tLevel wise BOM Cost Updation and Performance Enhancement <a href=\"https://github.com/frappe/erpnext/pull/31072\">#31072</a>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```"
  }
]