[
  {
    "owner": "forus-labs",
    "repo": "forui",
    "content": "TITLE: Implementing Checkbox Form with Validation in Flutter\nDESCRIPTION: A complete example of a form with multiple checkbox options using FSelectGroup. Includes form validation to ensure at least one option is selected, and demonstrates proper controller management in a stateful widget.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select-group/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nenum Language { dart, java, rust, python }\n\nclass CheckboxForm extends StatefulWidget {\n  const CheckboxForm({super.key});\n\n  @override\n  State<CheckboxForm> createState() => CheckboxFormState();\n}\n\nclass CheckboxFormState extends State<CheckboxForm> {\n  final _formKey = GlobalKey<FormState>();\n  final controller = FSelectGroupController<Language>();\n\n  @override\n  Widget build(BuildContext context) => Form(\n        key: _formKey,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            FSelectGroup(\n              controller: controller,\n              label: const Text('Favorite Languages'),\n              description: const Text('Your favorite language.'),\n              validator: (values) => values?.isEmpty ?? true ? 'Please select at least one language.' : null,\n              children: [\n                FCheckbox.grouped(\n                  value: Language.dart,\n                  label: const Text('Dart'),\n                ),\n                FCheckbox.grouped(\n                  value: Language.java,\n                  label: const Text('Java'),\n                ),\n                FCheckbox.grouped(\n                  value: Language.rust,\n                  label: const Text('Rust'),\n                ),\n                FCheckbox.grouped(\n                  value: Language.python,\n                  label: const Text('Python'),\n                ),\n              ],\n            ),\n            const SizedBox(height: 20),\n            FButton(\n              label: const Text('Submit'),\n              onPress: () {\n                if (!_formKey.currentState!.validate()) {\n                  // Handle errors here.\n                  return;\n                }\n\n                _formKey.currentState!.save();\n                // Do something.\n              },\n            ),\n          ],\n        ),\n      );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Login Form with Validation in Flutter\nDESCRIPTION: Creates a complete login form using FTextField components with form validation. Implements email and password fields with custom validation logic and form submission handling.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass LoginForm extends StatefulWidget {\n  const LoginForm({super.key});\n\n  @override\n  State<LoginForm> createState() => _LoginFormState();\n}\n\nclass _LoginFormState extends State<LoginForm> {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n  final TextEditingController _emailController = TextEditingController();\n  final TextEditingController _passwordController = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) => Form(\n        key: _formKey,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            FTextField.email(\n              controller: _emailController,\n              hint: 'janedoe@foruslabs.com',\n              autovalidateMode: AutovalidateMode.onUserInteraction,\n              validator: (value) => (value?.contains('@') ?? false) ? null : 'Please enter a valid email.',\n            ),\n            const SizedBox(height: 10),\n            FTextField.password(\n              controller: _passwordController,\n              autovalidateMode: AutovalidateMode.onUserInteraction,\n              validator: (value) => 8 <= (value?.length ?? 0) ? null : 'Password must be at least 8 characters long.',\n            ),\n            const SizedBox(height: 20),\n            FButton(\n              child: const Text('Login'),\n              onPress: () {\n                if (!_formKey.currentState!.validate()) {\n                  return; // Form is invalid.\n                }\n\n                // Form is valid, do something.\n              },\n            ),\n          ],\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FTimeField with Advanced Options\nDESCRIPTION: Complete configuration example of FTimeField with controller, styling, validation, and event handlers.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-field/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFTimeField(\n  controller: FTimeFieldController(\n    vsync: this,\n    initialTime: FTime(12, 30),\n    validator: (time) => time != null && time < const FTime(14, 30) ? 'Time must be in the future' : null,\n  ),\n  style: FTimeFieldStyle(...),\n  textAlign: TextAlign.start,\n  textAlignVertical: TextAlignVertical.center,\n  autofocus: false,\n  expands: false,\n  onEditingComplete: () => print('Editing complete'),\n  onSubmit: (time) => print('Time submitted: $time'),\n  mouseCursor: SystemMouseCursors.text,\n  canRequestFocus: true,\n  builder: (context, styles, child) => child!,\n  prefixBuilder: (context, styles, child) => Icon(FIcons.clock2),\n  suffixBuilder: null,\n  label: Text('Select Time'),\n  description: Text('Choose a time'),\n  enabled: true,\n  onSaved: (time) => print('Time saved: $time'),\n  autovalidateMode: AutovalidateMode.onUnfocus,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Sheet with Different Entry Points in Flutter\nDESCRIPTION: A widget that demonstrates how to create modal sheets that enter from different sides of the screen (left, top, right, bottom). Each button shows a sheet with a form that contains account fields.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/sheet/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ModalSheet extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    mainAxisSize: MainAxisSize.min,\n    children: [\n      FButton(\n        label: const Text('Left'),\n        onPress: () => showFSheet(\n          context: context,\n          side: Layout.ltr,\n          builder: (context) => const Form(side: Layout.ltr),\n        ),\n      ),\n      const SizedBox(height: 5),\n      FButton(\n        label: const Text('Top'),\n        onPress: () => showFSheet(\n          context: context,\n          side: Layout.ttb,\n          builder: (context) => const Form(side: Layout.ttb),\n        ),\n      ),\n      const SizedBox(height: 5),\n      FButton(\n        label: const Text('Right'),\n        onPress: () => showFSheet(\n          context: context,\n          side: Layout.rtl,\n          builder: (context) => const Form(side: Layout.rtl),\n        ),\n      ),\n      const SizedBox(height: 5),\n      FButton(\n        label: const Text('Bottom'),\n        onPress: () => showFSheet(\n          context: context,\n          side: Layout.btt,\n          builder: (context) => const Form(side: Layout.btt),\n        ),\n      ),\n    ],\n  );\n}\n\nclass Form extends StatelessWidget {\n  final Layout side;\n\n  const Form({required this.side, super.key});\n\n  @override\n  Widget build(BuildContext context) => Container(\n        height: double.infinity,\n        width: double.infinity,\n        decoration: BoxDecoration(\n          color: context.theme.colors.background,\n          border: side.vertical\n              ? Border.symmetric(horizontal: BorderSide(color: context.theme.colors.border))\n              : Border.symmetric(vertical: BorderSide(color: context.theme.colors.border)),\n        ),\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 8.0),\n          child: Center(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  'Account',\n                  style: context.theme.typography.xl2.copyWith(\n                    fontWeight: FontWeight.w600,\n                    color: context.theme.colors.foreground,\n                    height: 1.5,\n                  ),\n                ),\n                Text(\n                  'Make changes to your account here. Click save when you are done.',\n                  style: context.theme.typography.sm.copyWith(\n                    color: context.theme.colors.mutedForeground,\n                  ),\n                ),\n                const SizedBox(height: 8),\n                SizedBox(\n                  width: 450,\n                  child: Column(\n                    children: [\n                      const FTextField(\n                        label: Text('Name'),\n                        hint: 'John Renalo',\n                      ),\n                      const SizedBox(height: 10),\n                      const FTextField(\n                        label: Text('Email'),\n                        hint: 'john@doe.com',\n                      ),\n                      const SizedBox(height: 16),\n                      FButton(\n                        label: const Text('Save'),\n                        onPress: () => Navigator.of(context).pop(),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Application with Custom Theme\nDESCRIPTION: Complete example of implementing a Flutter application with custom Forui theme configuration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'theme/theme.dart';\n\nvoid main() {\n  runApp(const Application());\n}\n\nclass Application extends StatelessWidget {\n  const Application({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // Assign the generated theme to `theme`.\n    final theme = zincLight;\n\n    return MaterialApp(\n      localizationsDelegates: FLocalizations.localizationsDelegates,\n      supportedLocales: FLocalizations.supportedLocales,\n      builder: (_, child) => FTheme(data: theme, child: child!),\n      theme: theme.toApproximateMaterialTheme(),\n      // You can replace FScaffold with Material's Scaffold.\n      home: const FScaffold(\n        // TODO: replace with your widget.\n        child: Example(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete FDateField Constructor Implementation\nDESCRIPTION: A comprehensive example showing all available parameters for the standard FDateField constructor, including controller configuration, styling options, event handlers, and display properties.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFDateField(\n  controller: FDateFieldController(\n    vsync: this,\n    initialDate: DateTime(2024, 1, 1),\n    validator: (date) => date?.isBefore(DateTime.now()) ?? false ? 'Date must be in the future' : null,\n  ),\n  style: FDateFieldStyle(...),\n  textAlign: TextAlign.start,\n  textAlignVertical: TextAlignVertical.center,\n  autofocus: false,\n  expands: false,\n  onEditingComplete: () => print('Editing complete'),\n  onSubmit: (date) => print('Date submitted: $date'),\n  mouseCursor: SystemMouseCursors.text,\n  canRequestFocus: true,\n  baselineInputYear: 2000,\n  builder: (context, styles, child) => child!,\n  prefixBuilder: (context, styles, child) => Icon(Icons.calendar_today),\n  suffixBuilder: null,\n  clearable: true,\n  calendar: FDateFieldCalendarProperties(),\n  label: Text('Select Date'),\n  description: Text('Choose a date from the calendar or input field'),\n  enabled: true,\n  onSaved: (date) => print('Date saved: $date'),\n  autovalidateMode: AutovalidateMode.onUnfocus,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Text Field with Email Input Type\nDESCRIPTION: Shows a comprehensive implementation of FTextField with common configuration options including clearable functionality, keyboard type, and text capitalization settings.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFTextField(\n  controller: _controller, // TextEditingController\n  clearable: (value) => value.text.isNotEmpty,\n  enabled: true,\n  label: const Text('Email'),\n  hint: 'john@doe.com',\n  description: const Text('Enter your email associated with your Forui account.'),\n  keyboardType: TextInputType.emailAddress,\n  textCapitalization: TextCapitalization.none,\n  maxLines: 1,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Scaffold UI with Navigation in Dart\nDESCRIPTION: This snippet demonstrates a comprehensive implementation of the FScaffold widget with multiple screens accessible through bottom navigation. It defines headers and content for different sections including Home, Categories, Search, and Settings, with a stateful implementation to handle navigation state.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/scaffold/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal headers = [\n  const FHeader(title: Text('Home')),\n  const FHeader(title: Text('Categories')),\n  const FHeader(title: Text('Search')),\n  FHeader(\n    title: const Text('Settings'),\n    actions: [\n      FHeaderAction(\n        icon: FIcons.ellipsis,\n        onPress: () {},\n      ),\n    ],\n  ),\n];\n\nfinal contents = [\n  const Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: [Text('Home Placeholder')],\n  ),\n  const Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: [Text('Categories Placeholder')],\n  ),\n  const Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: [Text('Search Placeholder')],\n  ),\n  Column(\n    children: [\n      const SizedBox(height: 5),\n      FCard(\n        title: const Text('Account'),\n        subtitle: const Text('Make changes to your account here. Click save when you are done.'),\n        child: Column(\n          children: [\n            const FTextField(\n              label: Text('Name'),\n              hint: 'John Renalo',\n            ),\n            const SizedBox(height: 10),\n            const FTextField(\n              label: Text('Email'),\n              hint: 'john@doe.com',\n            ),\n            const SizedBox(height: 16),\n            FButton(\n              label: const Text('Save'),\n              onPress: () {},\n            ),\n          ],\n        ),\n      ),\n    ],\n  ),\n];\n\nclass _Application extends StatefulWidget {\n  const _Application({super.key});\n\n  @override\n  State<_Application> createState() => _ApplicationState();\n}\n\nclass _ApplicationState extends State<_Application> {\n  int index = 3;\n\n  @override\n  Widget build(BuildContext context) => FScaffold(\n        header: headers[index],\n        content: contents[index],\n        footer: FBottomNavigationBar(\n          index: index,\n          onChange: (index) => setState(() => this.index = index),\n          items: [\n            FBottomNavigationBarItem(\n              icon: FIcons.home,\n              label: 'Home',\n            ),\n            FBottomNavigationBarItem(\n              icon: FIcons.layoutGrid,\n              label: 'Categories',\n            ),\n            FBottomNavigationBarItem(\n              icon: FIcons.search,\n              label: 'Search',\n            ),\n            FBottomNavigationBarItem(\n              icon: FIcons.settings,\n              label: 'Settings',\n            ),\n          ],\n        ),\n      );\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with Date Fields in Flutter using ForUI\nDESCRIPTION: A complete implementation of a form with date field components that includes custom validation for start and end dates. The code demonstrates controller initialization, validation logic, and form submission handling using ForUI's FDateField component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass FormDateFieldPage extends StatefulWidget {\n  @override\n  State<FormDateFieldPage> createState() => _FormDateFieldPageState();\n}\n\nclass _FormDateFieldPageState extends State<FormDateFieldPage> with TickerProviderStateMixin {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n  late final FDateFieldController _startDateController;\n  late final FDateFieldController _endDateController;\n\n  @override\n  void initState() {\n    super.initState();\n    _startDateController = FDateFieldController(\n      vsync: this,\n      validator: _validateStartDate,\n    );\n    _endDateController = FDateFieldController(\n      vsync: this,\n      validator: _validateEndDate,\n    );\n  }\n\n  String? _validateStartDate(DateTime? date) {\n    if (date == null) {\n      return 'Please select a start date';\n    }\n    if (date.isBefore(DateTime.now())) {\n      return 'Start date must be in the future';\n    }\n    return null;\n  }\n\n  String? _validateEndDate(DateTime? date) {\n    if (date == null) {\n      return 'Please select an end date';\n    }\n    if (_startDateController.value != null && date.isBefore(_startDateController.value!)) {\n      return 'End date must be after start date';\n    }\n    return null;\n  }\n\n  @override\n  Widget build(BuildContext context) => Padding(\n    padding: const EdgeInsets.all(30.0),\n    child: Form(\n      key: _formKey,\n      child: Column(\n        children: [\n          FDateField(\n            controller: _startDateController,\n            label: const Text('Start Date'),\n            description: const Text('Select a start date'),\n            autovalidateMode: AutovalidateMode.disabled,\n          ),\n          const SizedBox(height: 20),\n          FDateField(\n            controller: _endDateController,\n            label: const Text('End Date'),\n            description: const Text('Select an end date'),\n            autovalidateMode: AutovalidateMode.disabled,\n          ),\n          const SizedBox(height: 25),\n          FButton(\n            label: const Text('Submit'),\n            onPress: () {\n              if (_formKey.currentState!.validate()) {\n                // Form is valid, process the dates\n              }\n            },\n          ),\n        ],\n      ),\n    ),\n  );\n\n  @override\n  void dispose() {\n    _startDateController.dispose();\n    _endDateController.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ForUI Select with Form Validation in Flutter\nDESCRIPTION: Demonstrates a complete implementation of FSelect within a form with validation. This example shows how to use controllers, validation functions, and form submission with the FSelect component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass FormSelectPage extends StatefulWidget {\n  FormSelectPage({@queryParam super.key, super.alignment = Alignment.topCenter});\n\n  @override\n  State<FormSelectPage> createState() => _FormSelectPageState();\n}\n\nclass _FormSelectPageState extends State<FormSelectPage> with SingleTickerProviderStateMixin {\n  static const _departments = ['Engineering', 'Marketing', 'Sales', 'Human Resources', 'Finance'];\n\n  final _formKey = GlobalKey<FormState>();\n  late final _departmentController = FSelectController<String>(vsync: this);\n\n  @override\n  Widget build(BuildContext context) => Padding(\n    padding: const EdgeInsets.all(30.0),\n    child: Form(\n      key: _formKey,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          FSelect<String>(\n            controller: _departmentController,\n            label: const Text('Department'),\n            description: const Text('Choose your dream department'),\n            hint: 'Select a department',\n            validator: _validateDepartment,\n            children: [for (final department in _departments) FSelectItem.text(department)],\n          ),\n          const SizedBox(height: 25),\n          FButton(\n            child: const Text('Submit'),\n            onPress: () {\n              if (_formKey.currentState!.validate()) {\n                // Form is valid, do something with department.e\n              }\n            },\n          ),\n        ],\n      ),\n    ),\n  );\n\n  String? _validateDepartment(String? department) {\n    if (department == null) {\n      return 'Please select a department';\n    }\n    return null;\n  }\n\n  @override\n  void dispose() {\n    _departmentController.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bottom Navigation Bar in Flutter using ForUI\nDESCRIPTION: This snippet demonstrates how to create a stateful widget with a bottom navigation bar using ForUI. It shows the setup of the FBottomNavigationBar with multiple FBottomNavigationBarItem elements, including icons and labels.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/bottom-navigation-bar/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Application extends StatefulWidget {\n  const Application({super.key});\n\n  @override\n  State<Application> createState() => _ApplicationState();\n}\n\nclass _ApplicationState extends State<Application> {\n  int index = 1;\n\n  @override\n  Widget build(BuildContext context) => FBottomNavigationBar(\n        index: index,\n        onChange: (index) => setState(() => this.index = index),\n        children: [\n          FBottomNavigationBarItem(\n            icon: Icon(FIcons.home),\n            label: const Text('Home'),\n          ),\n          FBottomNavigationBarItem(\n            icon: Icon(FIcons.layoutGrid),\n            label: const Text('Browse'),\n          ),\n          FBottomNavigationBarItem(\n            icon: Icon(FIcons.radio),\n            label: const Text('Radio'),\n          ),\n          FBottomNavigationBarItem(\n            icon: Icon(FIcons.libraryBig),\n            label: const Text('Library'),\n          ),\n          FBottomNavigationBarItem(\n            icon: Icon(FIcons.search),\n            label: const Text('Search'),\n          ),\n        ],\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Widget with Account and Password Sections in Dart\nDESCRIPTION: This snippet demonstrates how to create a Tabs widget with two sections: Account and Password. Each tab contains a card with form fields and a save button. The Tabs widget is part of the ForUI library.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/tabs/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFTabs(\n  tabs: [\n    FTabEntry(\n      label: const Text('Account'),\n      content: FCard(\n        title: const Text('Account'),\n        subtitle: const Text('Make changes to your account here. Click save when you are done.'),\n        child: Column(\n          children: [\n            const FTextField(\n              label: Text('Name'),\n              hint: 'John Renalo',\n            ),\n            const SizedBox(height: 10),\n            const FTextField(\n              label: Text('Email'),\n              hint: 'john@doe.com',\n            ),\n            const SizedBox(height: 16),\n            FButton(\n              label: const Text('Save'),\n              onPress: () {},\n            ),\n          ],\n        ),\n      ),\n    ),\n    FTabEntry(\n      label: const Text('Password'),\n      content: FCard(\n        title: const Text('Password'),\n        subtitle: const Text('Change your password here. After saving, you will be logged out.'),\n        child: Column(\n          children: [\n            const FTextField(label: Text('Current password')),\n            const SizedBox(height: 10),\n            const FTextField(label: Text('New password')),\n            const SizedBox(height: 16),\n            FButton(\n              label: const Text('Save'),\n              onPress: () {},\n            ),\n          ],\n        ),\n      ),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FScaffold Usage Example in Dart\nDESCRIPTION: A simple example showing how to use the FScaffold widget with its primary components. This includes a header with actions, content with a card element, and a bottom navigation bar, along with optional parameters for content padding and bottom inset resizing.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/scaffold/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFScaffold(\n  header: FHeader(\n    title: const Text('Settings'),\n    actions: [\n      FHeaderAction(\n        icon: Icon(FIcons.ellipsis),\n        onPress: () {},\n      ),\n    ],\n  ),\n  content: Column(\n    children: [\n      FCard(\n        title: const Text('Notification'),\n        subtitle: const Text('You have 3 unread messages.'),\n        child: FButton(label: const Text('Read messages'), onPress: () {}),\n      ),\n    ],\n  ),\n  footer: FBottomNavigationBar(items: const []),\n  contentPad: true,\n  resizeToAvoidBottomInset: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider with Advanced Options in Flutter\nDESCRIPTION: Demonstrates a complex slider configuration with right-to-left layout, custom tooltip, tap interaction, selection constraints, and marker points at 0%, 50%, and 100%.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  layout: FLayout.rtl,\n  tooltipBuilder: (style, value) => Text('${value.toStringAsFixed(2)}%'),\n  controller: FContinuousSliderController(\n    allowedInteraction: FSliderInteraction.tap,\n    selection: FSliderSelection(max: 0.75, extent: (min: 0, max: 0.8)),\n  ),\n  marks: const [\n    FSliderMark(value: 0, label: Text('0%')),\n    FSliderMark(value: 0.5, label: Text('50%')),\n    FSliderMark(value: 1, label: Text('100%')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Text Field Widget in Flutter\nDESCRIPTION: Creates a basic text field with a controller, label, hint, and description. The implementation includes proper lifecycle management with controller disposal.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass DefaultTextField extends StatefulWidget {\n  const DefaultTextField({super.key});\n\n  @override\n  State<DefaultTextField> createState() => _DefaultTextFieldState();\n}\n\nclass _DefaultTextFieldState extends State<DefaultTextField> {\n  final TextEditingController _controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) => FTextField(\n    controller: _controller,\n    label: const Text('Username'),\n    hint: 'JaneDoe',\n    description: const Text('Please enter your username.'),\n    maxLines: 1,\n  );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Asynchronous Select with Custom Loading State in Dart\nDESCRIPTION: An asynchronous searchable select with a custom loading state that displays a 'Here be dragons...' message while fetching results, demonstrating how to enhance user experience during data loading.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass AsyncLoadingSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>.search(\n    hint: 'Select a fruit',\n    filter: (query) async {\n      await Future.delayed(const Duration(seconds: 1));\n      return query.isEmpty ? fruits : fruits.where((fruit) => fruit.toLowerCase().startsWith(query.toLowerCase()));\n    },\n    searchLoadingBuilder: (context, style, _) => Padding(\n      padding: const EdgeInsets.all(8.0),\n      child: Text('Here be dragons...', style: style.textFieldStyle.enabledStyle.contentTextStyle),\n    ),\n    contentBuilder: (context, data) => [for (final fruit in data.values) FSelectItem.text(fruit)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forui Theme in Flutter App\nDESCRIPTION: Example of integrating Forui into a Flutter application by setting up the FTheme widget with MaterialApp. Shows how to configure the theme and basic app structure.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nimport 'package:forui/forui.dart';\n\nvoid main() {\n  runApp(const Application());\n}\n\nclass Application extends StatelessWidget {\n  const Application({super.key});\n\n  Widget build(BuildContext context) => MaterialApp(\n    builder: (context, child) => FTheme(\n      data: FThemes.zinc.light,\n      child: child!,\n    ),\n    home: const FScaffold(...)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Button Form with Validation in Flutter\nDESCRIPTION: A complete example of a form with mutually exclusive radio button options using FSelectGroup. Uses a specialized radio controller and demonstrates validation to ensure a selection is made before form submission.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select-group/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nenum Notification { all, direct, nothing }\n\nclass RadioForm extends StatefulWidget {\n  const RadioForm({super.key});\n\n  @override\n  State<RadioForm> createState() => RadioFormState();\n}\n\nclass RadioFormState extends State<RadioForm> {\n  final _formKey = GlobalKey<FormState>();\n  final controller = FSelectGroupController<Notification>.radio();\n\n  @override\n  Widget build(BuildContext context) => Form(\n        key: _formKey,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            FSelectGroup(\n              controller: controller,\n              label: const Text('Notifications'),\n              description: const Text('Select the notifications.'),\n              validator: (values) => values?.isEmpty ?? true ? 'Please select a value.' : null,\n              children: [\n                FRadio.grouped(\n                  value: Notification.all,\n                  label: const Text('All new messages'),\n                ),\n                FRadio.grouped(\n                  value: Notification.direct,\n                  label: const Text('Direct messages and mentions'),\n                ),\n                FRadio.grouped(\n                  value: Notification.nothing,\n                  label: const Text('Nothing'),\n                ),\n              ],\n            ),\n            const SizedBox(height: 20),\n            FButton(\n              label: const Text('Save'),\n              onPress: () {\n                if (!_formKey.currentState!.validate()) {\n                  // Handle errors here.\n                  return;\n                }\n\n                _formKey.currentState!.save();\n                // Do something.\n              },\n            ),\n          ],\n        ),\n      );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Sheets with KeepAliveOffstage in ForUI (Dart)\nDESCRIPTION: This snippet demonstrates how to create persistent sheets using KeepAliveOffstage in ForUI. It includes a main Sheets widget that manages multiple sheet controllers and a Form widget for the sheet content. The implementation allows for sheets to be opened from different sides of the screen.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/persistent-sheet/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Sheets extends StatefulWidget {\n  @override\n  State<Sheets> createState() => _State();\n}\n\nclass _State extends State<Sheets> {\n  final Map<Layout, FSheetController> _controllers = {};\n\n  @override\n  Widget build(BuildContext context) {\n    VoidCallback onPress(Layout side) => () {\n          for (final MapEntry(:key, :value) in _controllers.entries) {\n            if (key != side && value.shown) {\n              return;\n            }\n          }\n\n          var controller = _controllers[side];\n          if (controller == null) {\n            controller = _controllers[side] ??= showFPersistentSheet(\n              context: context,\n              side: Layout.ltr,\n              keepAliveOffstage: true,\n              builder: (context, controller) => Form(side: side, controller: controller),\n            );\n          } else {\n            controller.toggle();\n          }\n        };\n\n    return FScaffold( // This can be replaced with FSheets\n      content: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          FButton(\n            label: const Text('Left'),\n            onPress: onPress(Layout.ltr),\n          ),\n          const SizedBox(height: 5),\n          FButton(\n            label: const Text('Top'),\n            onPress: onPress(Layout.ttb),\n          ),\n          const SizedBox(height: 5),\n          FButton(\n            label: const Text('Right'),\n            onPress: onPress(Layout.rtl),\n          ),\n          const SizedBox(height: 5),\n          FButton(\n            label: const Text('Bottom'),\n            onPress: onPress(Layout.btt),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass Form extends StatelessWidget {\n  final Layout side;\n  final FSheetController controller;\n\n  const Form({required this.side, required this.controller, super.key});\n\n  @override\n  Widget build(BuildContext context) => Container(\n        height: double.infinity,\n        width: double.infinity,\n        decoration: BoxDecoration(\n          color: context.theme.colors.background,\n          border: side.vertical\n              ? Border.symmetric(horizontal: BorderSide(color: context.theme.colors.border))\n              : Border.symmetric(vertical: BorderSide(color: context.theme.colors.border)),\n        ),\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 8.0),\n          child: Center(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  'Account',\n                  style: context.theme.typography.xl2.copyWith(\n                    fontWeight: FontWeight.w600,\n                    color: context.theme.colors.foreground,\n                    height: 1.5,\n                  ),\n                ),\n                Text(\n                  'Make changes to your account here. Click save when you are done.',\n                  style: context.theme.typography.sm.copyWith(\n                    color: context.theme.colors.mutedForeground,\n                  ),\n                ),\n                const SizedBox(height: 8),\n                SizedBox(\n                  width: 450,\n                  child: Column(\n                    children: [\n                      const FTextField(\n                        label: Text('Name'),\n                        hint: 'John Renalo',\n                      ),\n                      const SizedBox(height: 10),\n                      const FTextField(\n                        label: Text('Email'),\n                        hint: 'john@doe.com',\n                      ),\n                      const SizedBox(height: 16),\n                      FButton(\n                        label: const Text('Save'),\n                        onPress: () => Navigator.of(context).pop(),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      );\n\n  @override\n  void dispose() {\n    for (final controller in _controllers.values) {\n      controller.dispose();\n    }\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Pagination with PageView in Flutter\nDESCRIPTION: A comprehensive example showing how to integrate FPagination with a PageView to create a synchronized page navigation system.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/pagination/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass PageViewExample extends StatefulWidget {\n  const PageViewExample({super.key});\n\n  @override\n  State<PageViewExample> createState() => _PageViewExampleState();\n}\n\nclass _PageViewExampleState extends State<PageViewExample>{\n  int pages = 10;\n  PageController controller = PageController();\n  FPaginationController paginationController = FPaginationController(pages: pages);\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    final value = PageStorage.maybeOf(context)?.readState(context) ?? 0;\n    paginationController.page = value;\n  }\n\n  void _handlePageChange() {\n    if (!controller.hasClients) {\n      return;\n    }\n    final page = paginationController.page;\n    final old = controller.page?.round();\n    if (old case final old when old != page) {\n      if (page == old! + 1 || page == old - 1) {\n        controller.animateToPage(page, duration: const Duration(milliseconds: 300), curve: Curves.easeInOut);\n      } else {\n        controller.jumpToPage(page);\n\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n  final style = context.theme.colors;\n  return Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: [\n      Padding(\n        padding: const EdgeInsets.only(bottom: 10),\n        child: SizedBox(\n          height: 300,\n          width: 300,\n          child: NotificationListener(\n            onNotification: (notification) {\n              if (notification is ScrollEndNotification) {\n                if (controller.hasClients) {\n                  paginationController.page = controller.page!.round();\n                  return true;\n                }\n              }\n              return false;\n            },\n            child: PageView.builder(\n              itemCount: pages,\n              controller: controller,\n              itemBuilder:(context, index) => ColoredBox(\n                color: index.isEven ? style.hover(style.primary) : style.mutedForeground,\n                child: Center(\n                  child: DefaultTextStyle(\n                    style: TextStyle(fontSize: 45, color: style.primaryForeground),\n                    child: Text('Page ${index + 1}'),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n      FPagination(controller: paginationController, onPageChange: _handlePageChange,),\n    ],\n  );\n}\n\n  @override\n  void dispose() {\n    paginationController.dispose();\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Tile Group in Flutter\nDESCRIPTION: A basic implementation of the FSelectTileGroup widget with three selectable sidebar options. It uses an enum for values and includes icons for each option.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nenum Sidebar { recents, home, applications }\n\nFSelectTileGroup<Sidebar>(\n  controller: FSelectTileGroupController(values: {Sidebar.recents}),\n  label: const Text('Sidebar'),\n  description: const Text('These will be shown in the sidebar.'),\n  children: [\n    FSelectTile(\n      title: const Text('Recents'),\n      suffixIcon: Icon(FIcons.timer),\n      value: Sidebar.recents,\n    ),\n    FSelectTile(\n      title: const Text('Home'),\n      suffixIcon: Icon(FIcons.house),\n      value: Sidebar.home,\n    ),\n    FSelectTile(\n      title: const Text('Applications'),\n      suffixIcon: Icon(FIcons.appWindowMac),\n      value: Sidebar.applications,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Time Field Picker Implementation\nDESCRIPTION: Implementation of FTimeField.picker with advanced configuration options for time selection via picker interface.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-field/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFTimeField.picker(\n  controller: FTimeFieldController(\n    vsync: this,\n    initialTime: FTime(12, 30),\n    validator: (time) => time != null && time < const FTime(14, 30) ? 'Time must be in the future' : null,\n  ),\n  format: DateFormat.jms(),\n  textAlign: TextAlign.start,\n  textAlignVertical: TextAlignVertical.center,\n  expands: false,\n  mouseCursor: SystemMouseCursors.text,\n  canRequestFocus: true,\n  hint: 'Select a time',\n  hideOnTapOutside: FHidePopoverRegion.none,\n  hourInterval: 1,\n  minuteInterval: 1,\n  anchor: Alignment.topLeft,\n  inputAnchor: Alignment.bottomLeft,\n  directionPadding: false,\n  label: Text('Picker Time'),\n  description: Text('Select a time from the calendar'),\n  builder: (context, styles, child) => child!,\n  prefixBuilder: (context, styles, child) => Icon(Icons.calendar_today),\n  suffixBuilder: null,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating SelectMenuTile Form Component in Flutter/Dart\nDESCRIPTION: Implements a form with a SelectMenuTile component for selecting notification preferences. Features include form validation, radio selection controller, custom icons, and dynamic text updates based on selection. Uses Flutter's Form widget with validation and submission handling.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nenum Notification { all, direct, nothing }\n\nclass _SelectMenuTileForm extends StatefulWidget {\n  const _SelectMenuTileForm({super.key});\n\n  @override\n  State<_SelectMenuTileForm> createState() => _SelectMenuTileFormState();\n}\n\nclass _SelectMenuTileFormState extends State<_SelectMenuTileForm> {\n  final _formKey = GlobalKey<FormState>();\n  final controller = FSelectMenuTileController.radio();\n\n  @override\n  Widget build(BuildContext context) => Form(\n        key: _formKey,\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            FSelectMenuTile(\n              selectController: controller,\n              autoHide: true,\n              validator: (value) => value == null ? 'Select an item' : null,\n              prefixIcon: Icon(FIcons.bell),\n              title: const Text('Notifications'),\n              details: ListenableBuilder(\n                listenable: controller,\n                builder: (context, _) => Text(\n                  switch (controller.value.firstOrNull) {\n                    Notification.all => 'All',\n                    Notification.direct => 'Direct Messages',\n                    null || Notification.nothing => 'None',\n                  },\n                ),\n              ),\n              menu: [\n                FSelectTile(title: const Text('All'), value: Notification.all),\n                FSelectTile(title: const Text('Direct Messages'), value: Notification.direct),\n                FSelectTile(title: const Text('None'), value: Notification.nothing),\n              ],\n            ),\n            const SizedBox(height: 20),\n            FButton(\n              label: const Text('Save'),\n              onPress: () {\n                if (!_formKey.currentState!.validate()) {\n                  // Handle errors here.\n                  return;\n                }\n\n                _formKey.currentState!.save();\n                // Do something.\n              },\n            ),\n          ],\n        ),\n      );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Picker with Controller in Flutter\nDESCRIPTION: Example showing a fully configured picker with controller, custom styling, and multiple wheels. Includes focus handling and item extent configuration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/picker/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst FPicker(\n  controller: FPickerController(),\n  style: style,\n  children: [\n    const FPickerWheel(\n      flex: 2,\n      loop: true,\n      itemExtent: 20,\n      autofocus: true,\n      focusNode: FocusNode(),\n      onFocusChange: (focused) {},\n      children: [\n        Text('1'),\n        Text('2'),\n      ],\n    ),\n    const FPickerWheel(\n      flex: 2,\n      itemExtent: 20,\n      autofocus: true,\n      focusNode: FocusNode(),\n      onFocusChange: (focused) {},\n      builder: (context, index) => Text('$1'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Scrollable Sheet in Flutter Modal\nDESCRIPTION: Implementation of a modal sheet with a DraggableScrollableSheet that supports mouse and touch scrolling. Shows how to create a scrollable list of tiles within a bottom sheet.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/sheet/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  label: const Text('Click me'),\n  onPress: () => showFSheet(\n    context: context,\n    side: Layout.btt,\n    mainAxisMaxRatio: null,\n    builder: (context) => DraggableScrollableSheet(\n      expand: false,\n      builder: (context, controller) => ScrollConfiguration(\n        // This is required to enable dragging on desktop.\n        // See https://github.com/flutter/flutter/issues/101903 for more information.\n        behavior: ScrollConfiguration.of(context).copyWith(dragDevices: {\n          PointerDeviceKind.touch,\n          PointerDeviceKind.mouse,\n          PointerDeviceKind.trackpad,\n        }),\n        child: FTileGroup.builder(\n          count: 25,\n          controller: controller,\n          tileBuilder: (context, index) => FTile(title: Text('Tile $index')),\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time of Day Resizable Widget in Dart\nDESCRIPTION: This code demonstrates a vertical resizable widget with three sections representing different times of day (Morning, Afternoon, Evening). Each section displays an icon, label, and time range calculated from its position percentage.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/resizable/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass TimeOfDay extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => DecoratedBox(\n        decoration: BoxDecoration(\n          border: Border.all(color: context.theme.colors.border),\n          borderRadius: BorderRadius.circular(8),\n        ),\n        child: FResizable(\n          axis: Axis.vertical,\n          crossAxisExtent: 300,\n          children: [\n            FResizableRegion(\n              initialExtent: 250,\n              minExtent: 100,\n              builder: (_, data, __) => Label(data: data, icon: FIcons.sunrise, label: 'Morning'),\n            ),\n            FResizableRegion(\n              initialExtent: 100,\n              minExtent: 100,\n              builder: (_, data, __) => Label(data: data, icon: FIcons.sun, label: 'Afternoon'),\n            ),\n            FResizableRegion(\n              initialExtent: 250,\n              minExtent: 100,\n              builder: (_, data, __) => Label(data: data, icon: FIcons.sunset, label: 'Evening'),\n            ),\n          ],\n        ),\n      );\n}\n\nclass Label extends StatelessWidget {\n  static final DateFormat format = DateFormat.jm(); // Requires package:intl\n\n  final FResizableRegionData data;\n  final IconData icon;\n  final String label;\n\n  const Label({required this.data, required this.icon, required this.label, super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final FThemeData(:colors, :typography) = context.theme;\n    final start = DateTime.fromMillisecondsSinceEpoch(\n      (data.offsetPercentage.min * Duration.millisecondsPerDay).round(),\n      isUtc: true,\n    );\n\n    final end = DateTime.fromMillisecondsSinceEpoch(\n      (data.offsetPercentage.max * Duration.millisecondsPerDay).round(),\n      isUtc: true,\n    );\n\n    return Align(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Row(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Icon(icon, size: 15, color: colors.foreground),\n              const SizedBox(width: 3),\n              Text(label, style: typography.sm.copyWith(color: colors.foreground)),\n            ],\n          ),\n          const SizedBox(height: 5),\n          Text(\n            '${format.format(start)} - ${format.format(end)}',\n            style: typography.sm.copyWith(color: colors.foreground),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating FCheckbox in a Flutter Form\nDESCRIPTION: A comprehensive example of integrating the FCheckbox widget within a Form for validation. This demonstrates form handling with email, password fields, and checkbox for terms agreement.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/checkbox/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass RegisterForm extends StatefulWidget {\n  const RegisterForm({super.key});\n\n  @override\n  State<RegisterForm> createState() => _RegisterFormState();\n}\n\nclass _RegisterFormState extends State<RegisterForm> {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n\n  @override\n  Widget build(BuildContext context) => Form(\n        key: _formKey,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            FTextField.email(\n              hint: 'janedoe@foruslabs.com',\n              validator: (value) => (value?.contains('@') ?? false) ? null : 'Please enter a valid email.',\n            ),\n            const SizedBox(height: 12),\n            FTextField.password(\n              validator: (value) => 8 <= (value?.length ?? 0) ? null : 'Password must be at least 8 characters long.',\n            ),\n            const SizedBox(height: 15),\n            FormField(\n              initialValue: false,\n              onSaved: (value) {\n                // Save values somewhere.\n              },\n              validator: (value) => (value ?? false) ? null : 'Please accept the terms and conditions.',\n              builder: (state) => FCheckbox(\n                label: const Text('Accept terms and conditions'),\n                description: const Text('You agree to our terms and conditions.'),\n                error: state.errorText != null ? Text(state.errorText!) : null,\n                value: state.value ?? false,\n                onChange: (value) => state.didChange(value),\n              ),\n            ),\n            const SizedBox(height: 20),\n            FButton(\n              label: const Text('Register'),\n              onPress: () {\n                if (!_formKey.currentState!.validate()) {\n                  // Handle errors here.\n                  return;\n                }\n\n                _formKey.currentState!.save();\n                // Do something.\n              },\n            ),\n          ],\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with FSlider Component in Dart\nDESCRIPTION: Implements a form with a brightness slider using ForUI's FSlider component. The example includes a slider with custom marks, labels, and descriptions, along with form validation and submission logic.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass SliderForm extends StatefulWidget {\n  const SliderForm({super.key});\n\n  @override\n  State<SliderForm> createState() => SliderFormState();\n}\n\nclass SliderFormState extends State<SliderForm> {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n\n  @override\n  Widget build(BuildContext context) => Form(\n        key: _formKey,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            FSlider(\n              label: const Text('Brightness'),\n              description: const Text('Adjust the brightness level.'),\n              controller: FContinuousSliderController(selection: FSliderSelection(max: 0.35)),\n              marks: const [\n                FSliderMark(value: 0, label: Text('0%')),\n                FSliderMark(value: 0.25, tick: false),\n                FSliderMark(value: 0.5, label: Text('50%')),\n                FSliderMark(value: 0.75, tick: false),\n                FSliderMark(value: 1, label: Text('100%')),\n              ],\n            ),\n            const SizedBox(height: 20),\n            FButton(\n              child: const Text('Save'),\n              onPress: () {\n                if (!_formKey.currentState!.validate()) {\n                  // Handle errors here.\n                  return;\n                }\n\n                _formKey.currentState!.save();\n                // Do something.\n              },\n            ),\n          ],\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Forui Icons Package\nDESCRIPTION: Command to add only the Forui icons assets package to a Flutter project.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add forui_assets\n```\n\n----------------------------------------\n\nTITLE: Implementing an Asynchronous Searchable Select in Dart\nDESCRIPTION: An asynchronous searchable select that simulates a network delay of 1 second before filtering fruits based on the user's query, demonstrating how to handle remote data fetching.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass AsyncSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>.search(\n    hint: 'Select a fruit',\n    filter: (query) async {\n      await Future.delayed(const Duration(seconds: 1));\n      return query.isEmpty ? fruits : fruits.where((fruit) => fruit.toLowerCase().startsWith(query.toLowerCase()));\n    },\n    contentBuilder: (context, data) => [for (final fruit in data.values) FSelectItem.text(fruit)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Implementation in Dart\nDESCRIPTION: A simple implementation of the FSelect component that displays a dropdown of fruit options. This snippet demonstrates the core functionality of creating a select with basic text items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst fruits = [\n  'Apple',\n  'Banana',\n  'Blueberry',\n  'Grapes',\n  'Lemon',\n  'Mango',\n  'Kiwi',\n  'Orange',\n  'Peach',\n  'Pear',\n  'Pineapple',\n  'Plum',\n  'Raspberry',\n  'Strawberry',\n  'Watermelon',\n];\n\nclass SelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>(\n      hint: 'Select a fruit',\n      children: [for (final fruit in fruits) FSelectItem.text(fruit)],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Selection Slider in Flutter\nDESCRIPTION: Implements a slider that allows selecting a range of values, with minimum and maximum selection points. The selection range is set from 0.25 to 0.75.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController.range(\n    selection: FSliderSelection(min: 0.25, max: 0.75),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Breakpoints in Flutter Widget Building\nDESCRIPTION: Example of how to use Forui's breakpoints to create a responsive layout that switches between mobile, tablet, and desktop widgets based on screen width.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/responsive/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final breakpoints = context.theme.breakpoints; // FBreakpoints\n  final width = MediaQuery.sizeOf(context).width; // double\n\n  return switch (width) {\n    _ when width < breakpoints.sm => MobileWidget(),\n    _ when width < breakpoints.lg => TabletWidget(),\n    _ => DesktopWidget(),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Portal with Form Fields in Dart\nDESCRIPTION: This example demonstrates how to create a portal with a controller that can toggle the visibility of a form-like interface containing dimensions settings. The portal appears above a button when toggled.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/portal/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal controller = OverlayPortalController();\n\nFPortal(\n  controller: controller,\n  portalBuilder: (context) => Padding(\n    padding: const EdgeInsets.all(8.0),\n    child: Container(\n      decoration: BoxDecoration(\n        color: context.theme.colors.background,\n        border: Border.all(color: context.theme.colors.border, width: 1),\n        borderRadius: BorderRadius.circular(4),\n      ),\n      padding: const EdgeInsets.only(left: 20, top: 14, right: 20, bottom: 10),\n      child: SizedBox(\n        width: 288,\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text('Dimensions', style: context.theme.typography.base),\n            const SizedBox(height: 7),\n            Text(\n              'Set the dimensions for the layer.',\n              style: context.theme.typography.sm.copyWith(\n                color: context.theme.colors.mutedForeground,\n                fontWeight: FontWeight.w300,\n              ),\n            ),\n            const SizedBox(height: 15),\n            for (final (label, value) in [\n              ('Width', '100%'),\n              ('Max. Width', '300px'),\n            ]) ...[                  Row(\n                children: [\n                  Expanded(child: Text(label, style: context.theme.typography.sm)),\n                  Expanded(flex: 2, child: FTextField(initialValue: value)),\n                ],\n              ),\n              const SizedBox(height: 7),\n            ],\n          ],\n        ),\n      ),\n    ),\n  ),\n  child: FButton(\n    label: const Text('Portal'),\n    onPress: () => controller.toggle(),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Interactive Linear Progress Example\nDESCRIPTION: Complete example of an interactive linear progress widget with state management and reset functionality.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/progress/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass LinearProgress extends StatefulWidget {\n  @override\n  State<LinearProgress> createState() => _State();\n}\n\nclass _State extends State<LinearProgress> {\n  late Timer timer;\n  double value = 0.2;\n\n  @override\n  void initState() {\n    super.initState();\n    timer = Timer(const Duration(milliseconds: 800), () => setState(() => value = 0.7));\n  }\n\n  @override\n  Widget build(BuildContext context) => Column(\n   children: [\n     FProgress(value: value),\n     FButton(label: const Text('Reset'), onPress: () => setState(() {\n       value = 0.2;\n       timer.cancel();\n       timer = Timer(const Duration(milliseconds: 800), () => setState(() => value = 0.7));\n     })),\n   ],\n );\n\n  @override\n  void dispose() {\n    timer.cancel();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tooltip to a Slider in Flutter\nDESCRIPTION: Implements a slider with a custom tooltip that displays the current value as a hexadecimal number. The tooltipBuilder function handles the conversion and formatting.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  tooltipBuilder: (style, value) {\n    final hex = (value * 100).round().toRadixString(16).padLeft(2, '0');\n    return Text('0x$hex');\n  },\n  controller: FContinuousSliderController(selection: FSliderSelection(max: 0.6)),\n);\n```\n\n----------------------------------------\n\nTITLE: Circular Icon Progress Widget Implementation\nDESCRIPTION: Implementation of a circular progress indicator with icon, showing configuration of style, semantics label, and animation duration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/progress/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFProgress.circularIcon(\n  style: FCircularIconProgressStyle(...),\n  semanticsLabel: 'Label',\n  duration: const Duration(milliseconds: 500),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FSelect with Advanced Options in Dart\nDESCRIPTION: A comprehensive example showing the FSelect component with various configuration options including controllers, formatting, validation, and custom builders for prefix and suffix icons.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFSelect<String>(\n  controller: FSelectController<String>(vysnc: this),\n  label: const Text('Country'),\n  description: const Text('Select your country of residence'),\n  hint: 'Choose a country',\n  format: (value) => value.toUpperCase(),\n  onSaved: (value) => print('Selected country: $value'),\n  style: FSelectStyle.inherit(...),\n  autovalidateMode: AutovalidateMode.onUserInteraction,\n  builder: (context, styles, child) => child!,\n  prefixBuilder: (context, styles, _) => Icon(FIcons.globe),\n  suffixBuilder: (context, styles, _) => Icon(FIcons.arrowDown),\n  popoverConstraints: const BoxConstraints(\n    maxWidth: 300,\n    maxHeight: 400,\n  ),\n  clearable: true,\n  contentScrollHandles: true,\n  children: [\n    FSelectSection(\n      label: const Text('North American Countries'),\n      children: [\n        FSelectItem(\n          value: 'us',\n          child: const Text('United States'),\n        ),\n        FSelectItem(\n          value: 'ca',\n          child: const Text('Canada'),\n        ),\n      ],\n    ),\n    FSelectItem(\n      value: 'jp',\n      child: const Text('Japan'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading in Select Menu Tile with Dart\nDESCRIPTION: This code snippet shows how to implement lazy loading in a Select Menu Tile using the builder pattern. It dynamically generates menu items based on the index, allowing for efficient rendering of large datasets.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass _LazySelectMenuTile extends StatefulWidget {\n  const _SelectMenuTileForm({super.key});\n\n  @override\n  State<_LazySelectMenuTile> createState() => _LazySelectMenuTileState();\n}\n\nclass _LazySelectMenuTileState extends State<_LazySelectMenuTile> {\n  final controller = FSelectMenuTileController(values: {1});\n\n  @override\n  Widget build(BuildContext context) => FSelectMenuTile.builder(\n    selectController: controller,\n    autoHide: true,\n    maxHeight: 200,\n    validator: (value) => value == null ? 'Select an item' : null,\n    prefixIcon: Icon(FIcons.variable),\n    title: const Text('Applicable values'),\n    menuBuilder: (context, index) => FSelectTile(\n      title: Text('Tile $index'),\n      value: index,\n    ),\n  );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Theme Configuration in Flutter\nDESCRIPTION: Example showing how to initialize a basic Forui theme in a Flutter application using FTheme widget with brightness specification.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) => FTheme(\n      data: FThemes.zinc.light, // or FThemes.zinc.dark\n      child: const FScaffold(...),\n    );\n```\n\n----------------------------------------\n\nTITLE: Date Field with Custom Validation\nDESCRIPTION: Example implementation of a date field with custom validation logic that prevents selecting weekend dates. Shows how to create and manage a controller with a validator function.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass ValidatorDateFieldPage extends StatefulWidget {\n  @override\n  State<ValidatorDateFieldPage> createState() => _ValidationDateFieldPageState();\n}\n\nclass _ValidationDateFieldPageState extends State<ValidatorDateFieldPage> with SingleTickerProviderStateMixin {\n  late final FDateFieldController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = FDateFieldController(vsync: this, validator: _validate);\n  }\n\n  String? _validate(DateTime? date) => date?.weekday == 6 || date?.weekday == 7 ? 'Date cannot be a weekend.' : null;\n\n  @override\n  Widget build(BuildContext context) => FDateField(\n        controller: _controller,\n        label: const Text('Appointment Date'),\n      );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete FTooltip Configuration in Flutter\nDESCRIPTION: A comprehensive example showing all customizable properties of the FTooltip widget, including controller integration, hover and long press triggers, positioning anchors, and shift behavior.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/tooltip/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFTooltip(\n  controller: _controller, // FTooltipController\n  hover: true,\n  longPress: true,\n  tipAnchor: Alignment.bottomCenter,\n  childAnchor: Alignment.topCenter,\n  shift: FPortalShift.flip,\n  tipBuilder: (context, style, _) => const Text('Tooltip'),\n  child: const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Slider in Flutter\nDESCRIPTION: Implements a slider with vertical bottom-to-top orientation. Includes label, description, marks at specific intervals, and a custom track length of 350 logical pixels.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  label: const Text('Volume'),\n  description: const Text('Adjust the volume by dragging the slider.'),\n  layout: FLayout.btt,\n  controller: FContinuousSliderController(selection: FSliderSelection(max: 0.35)),\n  trackMainAxisExtent: 350,\n  marks: const [\n    FSliderMark(value: 0, label: Text('0%')),\n    FSliderMark(value: 0.25, tick: false),\n    FSliderMark(value: 0.5, label: Text('50%')),\n    FSliderMark(value: 0.75, tick: false),\n    FSliderMark(value: 1, label: Text('100%')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Searchable Select Component in Dart\nDESCRIPTION: An implementation of FSelect.search that enables users to search for items with custom formatting, filtering, and builders for different states such as empty results, loading, and errors.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFSelect<User>.search(\n  controller: FSelectController<User>(),\n  label: const Text('User'),\n  description: const Text('Search and select a user'),\n  builder: (context, styles, child) => child!,\n  format: (user) => '${user.firstName} ${user.lastName}',\n  hint: 'Search users...',\n  style: FSelectStyle.inherit(...),\n  popoverConstraints: const BoxConstraints(\n    maxWidth: 350,\n    maxHeight: 500,\n  ),\n  clearable: true,\n  autoHide: false,\n  contentScrollHandles: false,\n  contentPhysics: const BouncingScrollPhysics(),\n  emptyBuilder: (context, style, _) => Text('No results'),\n  filter: (query) async {\n    // Fetch users based on search query\n    return fetchUsers(query);\n  },\n  contentBuilder: (context, users) => [\n    for (final user in users)\n      FSelectItem(value: user, child: Text('${user.firstName} ${user.lastName}')),\n  ],\n  searchFieldProperties: FSelectSearchFieldProperties(\n    autofocus: true,\n    hint: 'Type to search...',\n    debounce: const Duration(milliseconds: 300),\n  ),\n  searchLoadingBuilder: (context, style, _) => Text('Loading...'),\n  searchErrorBuilder: (context, error, stackTrace) => Text('Error...'),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Implementation\nDESCRIPTION: Shows a basic dialog implementation with horizontal layout using FDialog widget. The dialog includes a title, body text, and action buttons.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/dialog/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    IntrinsicWidth(\n      child: FButton(\n        label: const Text('Show Dialog'),\n        onPress: () => showAdaptiveDialog(\n          context: context,\n          builder: (context) => FDialog(\n            direction: Axis.horizontal,\n            title: const Text('Are you absolutely sure?'),\n            body: const Text('This action cannot be undone. This will permanently delete your account and remove your data from our servers.'),\n            actions: [\n              FButton(style: FButtonStyle.outline, label: const Text('Cancel'), onPress: () => Navigator.of(context).pop()),\n              FButton(label: const Text('Continue'), onPress: () => Navigator.of(context).pop()),\n            ],\n          ),\n        ),\n      ),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Data in Flutter Components\nDESCRIPTION: Demonstrates how to access various theme properties like colors, typography, and styles from the context in a Flutter widget.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final theme = context.theme; // FThemeData\n  final colors = context.theme.colors; // FColors\n  final typography = context.theme.typography; // FTypography\n  final style = context.theme.style; // FStyle\n\n  return const Placeholder();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Select Tile Group\nDESCRIPTION: A scrollable implementation of FSelectTileGroup with a height constraint. It shows how to limit the visible height of the group while allowing users to scroll through all options.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFSelectTileGroup(\n  selectController: FSelectTileGroupController(values: {Sidebar.recents}),\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  maxHeight: 100,\n  children: [\n    FSelectTile(\n      title: const Text('Recents'),\n      suffixIcon: Icon(FIcons.timer),\n      value: Sidebar.recents,\n    ),\n    FSelectTile(\n      title: const Text('Home'),\n      suffixIcon: Icon(FIcons.house),\n      value: Sidebar.home,\n    ),\n    FSelectTile(\n      title: const Text('Applications'),\n      suffixIcon: Icon(FIcons.appWindowMac),\n      value: Sidebar.applications,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Time Field Form Implementation\nDESCRIPTION: Complex implementation of FTimeField within a form, including validation between start and end times.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-field/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass FormTimeFieldPage extends StatefulWidget {\n  @override\n  State<FormTimeFieldPage> createState() => _FormTimeFieldPageState();\n}\n\nclass _FormTimeFieldPageState extends State<FormTimeFieldPage> with TickerProviderStateMixin {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n  late final FTimeFieldController _startTimeController;\n  late final FTimeFieldController _endTimeController;\n\n  @override\n  void initState() {\n    super.initState();\n    _startTimeController = FTimeFieldController(\n      vsync: this,\n      validator: _validateStartTime,\n    );\n    _endTimeController = FTimeFieldController(\n      vsync: this,\n      validator: _validateEndTime,\n    );\n  }\n\n  String? _validateStartTime(FTime? time) {\n    if (time != null && time < FTime.now()) {\n      return 'Start time must be in the future.';\n    }\n    return null;\n  }\n\n  String? _validateEndTime(FTime? time) {\n    if (_startTimeController.value != null && time < _startTimeController.value!) {\n      return 'End time must be after start time.';\n    }\n    return null;\n  }\n\n  @override\n  Widget build(BuildContext context) => Padding(\n    padding: const EdgeInsets.all(30.0),\n    child: Form(\n      key: _formKey,\n      child: Column(\n        children: [\n          FTimeField(\n            controller: _startTimeController,\n            label: const Text('Start Time'),\n            description: const Text('Select a start time.'),\n            autovalidateMode: AutovalidateMode.disabled,\n          ),\n          const SizedBox(height: 20),\n          FTimeField(\n            controller: _endTimeController,\n            label: const Text('End Time'),\n            description: const Text('Select an end time.'),\n            autovalidateMode: AutovalidateMode.disabled,\n          ),\n          const SizedBox(height: 25),\n          FButton(\n            child: const Text('Submit'),\n            onPress: () {\n              if (_formKey.currentState!.validate()) {\n                // Form is valid, process the dates\n              }\n            },\n          ),\n        ],\n      ),\n    ),\n  );\n\n  @override\n  void dispose() {\n    _startTimeController.dispose();\n    _endTimeController.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Button with Text and Icon in Dart\nDESCRIPTION: Creates a button that contains both an icon and text by utilizing the prefix parameter.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  prefix: Icon(FIcons.mail),\n  child: const Text('Login with Email'),\n  onPress: () {},\n),\n```\n\n----------------------------------------\n\nTITLE: Complete Calendar Configuration in Dart\nDESCRIPTION: A comprehensive implementation of FCalendar showing all available configuration options including custom builders, date constraints, and event callbacks.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/calendar/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFCalendar(\n  controller: FCalendarController.date(\n    initialSelection: DateTime(2024, 9, 13),\n    selectable: (date) => allowedDates.contains(date),\n  ),\n  dayBuilder: (context, data, child) => child!,\n  start: DateTime(2024),\n  end: DateTime(2030),\n  today: DateTime(2024, 7, 14),\n  initialType: FCalendarPickerType.yearMonth,\n  initialMonth: DateTime(2024, 9),\n  onMonthChange: (date) => print(date),\n  onPress: (date) => print(date),\n  onLongPress: (date) => print(date),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FSwitch with Additional Properties\nDESCRIPTION: This example demonstrates how to use FSwitch with additional properties such as description, error message, enabled state, and autofocus. It shows the full range of customization options available for the component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/switch/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFSwitch(\n  label: const Text('Airplane Mode'),\n  description: const Text('Turn on airplane mode to disable all wireless connections.'),\n  error: const Text('Please turn on airplane mode.'),\n  semanticsLabel: 'Airplane Mode',\n  value: true,\n  onChange: (value) {},\n  enabled: true,\n  autofocus: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FCheckbox in Flutter with ForUI\nDESCRIPTION: A basic implementation of the FCheckbox widget with label, description, and value state management. This example demonstrates how to create a checkbox for accepting terms and conditions.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/checkbox/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Page extends StatefulWidget {\n  const Page({super.key});\n\n  @override\n  State<Page> createState() => PageState();\n}\n\nclass PageState extends State<Page> {\n  bool state = false;\n\n  @override\n  Widget build(BuildContext context) => FCheckbox(\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    semanticsLabel: 'Accept terms and conditions',\n    value: state,\n    onChange: (value) => setState(() => state = value),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Avatars with Positioning in Flutter\nDESCRIPTION: This code demonstrates how to create overlapping grouped avatars using a Stack widget with Positioned children. Each avatar has its own network image and text fallback, positioned to create a staggered, overlapping effect.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/avatar/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nStack(\n  children: [\n    FAvatar(\n      image: const NetworkImage('https://example.com/user1.jpg'),\n      fallback: const Text('U1'),\n    ),\n    Positioned(\n      left: 20,\n      child: FAvatar(\n        image: const NetworkImage('https://example.com/user2.jpg'),\n        fallback: const Text('U2'),\n      ),\n    ),\n    Positioned(\n      left: 40,\n      child: FAvatar(\n        image: const NetworkImage('https://example.com/user3.jpg'),\n        fallback: const Text('U3'),\n      ),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Header in Dart using ForUI\nDESCRIPTION: This snippet demonstrates how to create a standard header with a title and action buttons using the FHeader widget from ForUI. It includes two action buttons with icons for an alarm clock and a plus sign.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/header/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFHeader(\n  title: const Text('Edit Alarm'),\n  actions: [\n    FHeaderAction(\n      icon: Icon(FIcons.alarmClock),\n      onPress: () {},\n    ),\n    FHeaderAction(\n      icon: Icon(FIcons.plus),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Hide Functionality in Select Menu Tile\nDESCRIPTION: This code snippet showcases the implementation of the auto-hide feature in a Select Menu Tile. It automatically closes the menu when a selection is made, improving user experience.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nenum Notification { all, direct, nothing }\n\nclass _SelectMenuTile extends StatefulWidget {\n  const _SelectMenuTileForm({super.key});\n\n  @override\n  State<_SelectMenuTile> createState() => _SelectMenuTileState();\n}\n\nclass _SelectMenuTileState extends State<_SelectMenuTile> {\n  final controller = FSelectMenuTileController.radio(Notification.all);\n\n  @override\n  Widget build(BuildContext context) => FSelectMenuTile(\n    selectController: controller,\n    autoHide: true,\n    validator: (value) => value == null ? 'Select an item' : null,\n    prefixIcon: Icon(FIcons.bell),\n    title: const Text('Notifications'),\n    details: ListenableBuilder(\n      listenable: controller,\n      builder: (context, _) => Text(\n        switch (controller.value.firstOrNull) {\n          Notification.all => 'All',\n          Notification.direct => 'Direct Messages',\n          null || Notification.nothing => 'None',\n        },\n      ),\n    ),\n    menu: [\n      FSelectTile(title: const Text('All'), value: Notification.all),\n      FSelectTile(title: const Text('Direct Messages'), value: Notification.direct),\n      FSelectTile(title: const Text('None'), value: Notification.nothing),\n    ],\n  );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Calendar with Advanced Options in Dart\nDESCRIPTION: Demonstrates full configuration options for the FLineCalendar widget including controller setup, alignment, cache extent, custom builder, and date range configuration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/line-calendar/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFLineCalendar(\n  controller: FCalendarController.date(),\n  initialDateAlignment: AlignmentDirectional.center,\n  cacheExtent: 100,\n  builder: (context, data, child) => child!,\n  start: DateTime(1900),\n  end: DateTime(2050),\n  initial: DateTime.now(),\n  today: DateTime.now(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated FTimePicker in Flutter\nDESCRIPTION: Demonstrates an advanced usage of FTimePicker with animation. It includes a button that sets the time to a random value, showcasing the animateTo method of the controller.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-picker/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo extends StatefulWidget {\n  Foo();\n\n  @override\n  State<Foo> createState() => _FooState();\n}\n\nclass _FooState extends State<Foo> {\n  static final _random = Random();\n  late final FTimePickerController _controller = FTimePickerController(initial: FTime.now());\n\n  @override\n  Widget build(BuildContext context) => Column(\n    mainAxisSize: MainAxisSize.min,\n    children: [\n      SizedBox(height: 300, width: 250, child: FTimePicker(controller: _controller)),\n      FButton(\n        child: const Text('Funny button'),\n        onPress: () => _controller.animateTo(FTime(_random.nextInt(24), _random.nextInt(60))),\n      ),\n    ],\n  );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation in Dart\nDESCRIPTION: Creates a basic button with text and a press handler using the FButton widget.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  child: const Text('Button'),\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FPopoverMenu in Dart\nDESCRIPTION: This snippet shows how to configure the FPopoverMenu widget with various properties. It demonstrates setting up the controller, scroll behavior, alignment, and menu items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/popover-menu/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst FPopoverMenu(\n  popoverController: FPopoverController(),\n  scrollController: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  menuAnchor: Alignment.topCenter,\n  childAnchor: Alignment.bottomCenter,\n  directionPadding: false,\n  hideOnTapOutside: FHidePopoverRegion.anywhere,\n  shift: FPortalShift.flip,\n  menu: [\n    FTileGroup(\n      children: [],\n    ),\n  ],\n  child: const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Clearable Select in ForUI with Flutter\nDESCRIPTION: Creates a select dropdown with the ability to clear the selection. The clearable property enables a clear button to appear when a value is selected.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass ClearableSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>(\n    hint: 'Select a fruit',\n    clearable: true, \n    children: [for (final fruit in fruits) FSelectItem.text(fruit)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Components with Different Sizes in Flutter\nDESCRIPTION: This example shows how to create avatars with different sizes (24, 32, and 48 pixels) arranged in a row. Each avatar has a different network image and a fallback text that corresponds to its size (S, M, L).\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/avatar/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    FAvatar(\n      size: 24,\n      image: const NetworkImage('https://example.com/small.jpg'),\n      fallback: const Text('S'),\n    ),\n    const SizedBox(width: 10),\n    FAvatar(\n      size: 32,\n      image: const NetworkImage('https://example.com/medium.jpg'),\n      fallback: const Text('M'),\n    ),\n    const SizedBox(width: 10),\n    FAvatar(\n      size: 48,\n      image: const NetworkImage('https://example.com/large.jpg'),\n      fallback: const Text('L'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Menu in Dart using ForUI\nDESCRIPTION: This snippet demonstrates how to create a Popover Menu widget in a Flutter application using ForUI. It shows the structure of the widget, including the controller setup, menu items, and how to integrate it with FHeader.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/popover-menu/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _PopoverMenu extends StatefulWidget {\n  @override\n  State<_PopoverMenu> createState() => _State();\n}\n\nclass _State extends State<_PopoverMenu> with SingleTickerProviderStateMixin {\n  late FPopoverController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = FPopoverController(vsync: this);\n  }\n\n  @override\n  Widget build(BuildContext context) => FHeader(\n        title: const Text('Edit Notes'),\n        actions: [\n          FPopoverMenu(\n            popoverController: controller,\n            menuAnchor: Alignment.topRight,\n            childAnchor: Alignment.bottomRight,\n            menu: [\n              FTileGroup(\n                children: [\n                  FTile(\n                    prefixIcon: Icon(FIcons.user),\n                    title: const Text('Personalization'),\n                    onPress: () {},\n                  ),\n                  FTile(\n                    prefixIcon: Icon(FIcons.paperclip),\n                    title: const Text('Add attachments'),\n                    onPress: () {},\n                  ),\n                  FTile(\n                    prefixIcon: Icon(FIcons.qrCode),\n                    title: const Text('Scan Document'),\n                    onPress: () {},\n                  ),\n                ],\n              ),\n              FTileGroup(\n                children: [\n                  FTile(\n                    prefixIcon: Icon(FIcons.list),\n                    title: const Text('List View'),\n                    onPress: () {},\n                  ),\n                  FTile(\n                    prefixIcon: Icon(FIcons.layoutGrid),\n                    title: const Text('Grid View'),\n                    onPress: () {},\n                  ),\n                ],\n              ),\n            ],\n            child: FHeaderAction(\n              icon: Icon(FIcons.ellipsis),\n              onPress: controller.toggle,\n            ),\n          ),\n        ],\n      );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested FHeader Widget with Custom Actions in Dart\nDESCRIPTION: This code shows how to use FHeader.nested to create a nested header with custom prefix and suffix actions. It includes a back button, an info button, and a close (x) button, demonstrating various pre-defined and custom actions.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/header/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFHeader.nested(\n  title: const Text('Title'),\n  prefixActions: [\n    FHeaderAction.back(onPress: () {}),\n  ],\n  suffixActions: [\n    FHeaderAction(\n      icon: Icon(FIcons.info),\n      onPress: () {},\n    ),\n    FHeaderAction.x(onPress: () {}),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Creating Card with Image and Text in Dart\nDESCRIPTION: Demonstrates creating a card with a background image, title, and subtitle. The example shows how to use FCard with image decoration and text elements.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/card/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFCard(\n  image: Container(\n    decoration: BoxDecoration(\n      image: DecorationImage(\n        image: AssetImage(path('avatar.png')),\n        fit: BoxFit.cover,\n      ),\n    ),\n    height: 200,\n  ),\n  title: const Text('Gratitude'),\n  subtitle: const Text('Being thankful and showing appreciation for kindness.'),\n);\n```\n\n----------------------------------------\n\nTITLE: Using FPopoverMenu.automatic() in Dart\nDESCRIPTION: This snippet demonstrates the usage of the FPopoverMenu.automatic() constructor. It shows how to set up an automatically positioned popover menu with custom configurations.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/popover-menu/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst FPopoverMenu.automatic(\n  popoverController: FPopoverController(),\n  scrollController: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  menuAnchor: Alignment.topCenter,\n  childAnchor: Alignment.bottomCenter,\n  directionPadding: false,\n  hideOnTapOutside: FHidePopoverRegion.none,\n  shift: FPortalShift.flip,\n  menu: [\n    FTileGroup(\n      children: [],\n    ),\n  ],\n  child: const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Synchronous Searchable Select in Dart\nDESCRIPTION: A synchronous searchable select implementation that filters a list of fruits in real-time based on the user's input query, displaying matching items immediately without network requests.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SyncSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>.search(\n    hint: 'Select a fruit',\n    filter:\n        (query) =>\n            query.isEmpty ? fruits : fruits.where((fruit) => fruit.toLowerCase().startsWith(query.toLowerCase())),\n    contentBuilder: (context, data) => [for (final fruit in data.values) FSelectItem.text(fruit)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading FTileGroup.builder Example in Dart\nDESCRIPTION: Implementation of a lazy-loading tile group that generates tiles on demand. This example creates a list of 200 tiles that are only constructed when they come into view, optimizing performance.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup.builder(\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  maxHeight: 200,\n  count: 200,\n  tileBuilder: (context, index) => FTile(\n    title: Text('Tile $index'),\n    suffixIcon: Icon(FIcons.chevronRight),\n    onPress: () {},\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Complete FCheckbox Configuration in Flutter\nDESCRIPTION: A comprehensive example showing all available configuration options for the FCheckbox widget including label, description, error message, semantics, value state, and event handlers.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/checkbox/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFCheckbox(\n  label: const Text('Accept terms and conditions'),\n  description: const Text('You agree to our terms and conditions.'),\n  error: const Text('Please accept the terms and conditions.'),\n  semanticsLabel: 'Accept terms and conditions',\n  value: true,\n  onChange: (value) {},\n  enabled: true,\n  autofocus: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-select Behaviour Accordion in Dart\nDESCRIPTION: This snippet shows how to create an Accordion widget with multi-select behaviour, allowing multiple items to be expanded simultaneously. It uses the default FAccordionController and includes three accordion items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/accordion/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    FAccordion(\n      controller: FAccordionController(),\n      children: [\n        FAccordionItem(\n          title: const Text('Is it accessible?'),\n          child: const Text('Yes. It follows WAI-ARIA design patterns.'),\n        ),\n        FAccordionItem(\n          initiallyExpanded: true,\n          title: const Text('Is it Styled?'),\n          child: const Text('Yes. It includes default styles matching other components.'),\n        ),\n        FAccordionItem(\n          title: const Text('Is it Animated?'),\n          child: const Text('Yes. Animations are enabled by default but can be disabled.'),\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Implementation in Dart\nDESCRIPTION: Creates a basic alert with a title and subtitle to display information to the user.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/alert/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFAlert(\n  title: const Text('Heads Up!'),\n  subtitle: const Text('You can add components to your app using the cli.'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Header with Back Button in Dart using ForUI\nDESCRIPTION: This code snippet shows how to implement a nested header with a back button and additional action buttons using FHeader.nested from ForUI. It includes prefix and suffix actions with various icons.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/header/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFHeader.nested(\n  title: const Text('Appointment'),\n  prefixActions: [\n    FHeaderAction.back(onPress: () {}),\n  ],\n  suffixActions: [\n    FHeaderAction(\n      icon: Icon(FIcons.info),\n      onPress: () {},\n    ),\n    FHeaderAction(\n      icon: Icon(FIcons.plus),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Clearable Text Field with Initial Value\nDESCRIPTION: Creates a text field with a clearable functionality that shows a clear button when text is present. Initializes with a value and provides a callback to determine when the clear button should appear.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ClearableTextField extends StatefulWidget {\n  @override\n  State<ClearableTextField> createState() => ClearableTextFieldState();\n}\n\nclass ClearableTextFieldState extends State<ClearableTextField> {\n  late final TextEditingController _controller = TextEditingController(text: 'MyUsername');\n\n  @override\n  Widget build(BuildContext context) => Padding(\n    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 30),\n    child: FTextField(\n      controller: _controller,\n      label: const Text('Username'),\n      hint: 'JaneDoe',\n      description: const Text('Please enter your username.'),\n      maxLines: 1,\n      clearable: (value) => value.text.isNotEmpty,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Interaction Mode for Slider in Flutter\nDESCRIPTION: Creates a slider that allows sliding anywhere on the track or thumb to select a value. Uses the FSliderInteraction.slide interaction mode with the continuous controller.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(\n    allowedInteraction: FSliderInteraction.slide,\n    selection: FSliderSelection(max: 0.6),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Forui Theme to Material Design Theme\nDESCRIPTION: Demonstrates how to convert a Forui theme to a Material Design theme for interoperability. It uses the toApproximateMaterialTheme() method to create a MaterialApp with a Forui-derived theme.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:forui/forui.dart';\n\n@override\nWidget build(BuildContext context) {\n  final fThemeData = FThemes.zinc.light;\n\n  return MaterialApp(\n    theme: fThemeData.toApproximateMaterialTheme(),\n    home: Scaffold(\n      body: Center(\n        child: FCard(\n          title: 'Mixed Widgets',\n          subtitle: 'Using both Forui and Material widgets together',\n          child: ElevatedButton(\n            onPressed: () {},\n            child: const Text('Material Button'),\n          ),\n        ),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Input Field with Custom Obscuring Character\nDESCRIPTION: Uses the password preset constructor of FTextField to create a secure text entry field with customized obscuring character for password input.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFTextField.password(\n  controller: _controller, // TextEditingController\n  obscuringCharacter: '*',\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FTileGroup Implementation in Dart\nDESCRIPTION: A basic implementation of the FTileGroup widget with settings tiles. The example includes a labeled group with a description and two child tiles with icons and navigation actions.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup(\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  children: [\n    FTile(\n      prefixIcon: Icon(FIcons.user),\n      title: const Text('Personalization'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.wifi),\n      title: const Text('WiFi'),\n      details: const Text('Forus Labs (5G)'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Marking Points in Flutter\nDESCRIPTION: Implements a slider with visual reference marks at specific points. Includes labeled marks at 0% and 100%, with additional marks at 25%, 50%, and 75% positions with varying visibility.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(selection: FSliderSelection(max: 0.35)),\n  marks: const [\n    FSliderMark(value: 0, label: Text('0%')),\n    FSliderMark(value: 0.25, tick: false),\n    FSliderMark(value: 0.5),\n    FSliderMark(value: 0.75, tick: false),\n    FSliderMark(value: 1, label: Text('100%')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiline Text Field in Flutter\nDESCRIPTION: Uses the multiline preset constructor to create a text area with support for multiple lines of text, perfect for comments or longer text input.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFTextField.multiline(\n  controller: _controller, // TextEditingController\n  label: const Text('Leave a review'),\n  maxLines: 4,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Time Field Implementation\nDESCRIPTION: Basic implementation of FTimeField with label and description.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-field/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst FTimeField(\n  label: Text('Appointment Time'),\n  description: Text('Select a time for your appointment.'),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard FHeader Widget in Dart\nDESCRIPTION: This snippet demonstrates the basic usage of the FHeader widget from ForUI. It creates a header with a title and two action buttons, showcasing how to add custom icons and onPress handlers.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/header/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFHeader(\n  title: const Text('Title'),\n  actions: [\n    FHeaderAction(\n      icon: Icon(FIcons.alarmClock),\n      onPress: () {},\n    ),\n    FHeaderAction(\n      icon: Icon(FIcons.plus),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Complete FTile Configuration in Dart\nDESCRIPTION: A comprehensive example showing all available parameters for the FTile widget including icons, text elements, semantics, and interaction handlers.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFTile(\n  prefixIcon: Icon(FIcons.globe),\n  title: const Text('Title'),\n  subtitle: const Text('subtitle'),\n  details: const Text('details'),\n  suffixIcon: Icon(FIcons.chevronRight),\n  semanticsLabel: 'Label',\n  enabled: true,\n  onPress: () {},\n  onLongPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Group with Checkboxes in Flutter\nDESCRIPTION: A basic implementation of the FSelectGroup widget with checkboxes for selecting sidebar options. Uses an enum to define the possible selection values and FSelectGroupController to manage the selection state.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select-group/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nenum Sidebar { recents, home, applications }\n\nFSelectGroup<Sidebar>(\n  controller: FSelectGroupController(values: {Sidebar.recents}),\n  label: const Text('Sidebar'),\n  description: const Text('These will be shown in the sidebar.'),\n  children: [\n    FCheckbox.grouped(\n      value: Sidebar.recents,\n      label: const Text('Recents'),\n    ),\n    FCheckbox.grouped(\n      value: Sidebar.home,\n      label: const Text('Home'),\n    ),\n    FCheckbox.grouped(\n      value: Sidebar.applications,\n      label: const Text('Applications'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FBottomNavigationBar in ForUI\nDESCRIPTION: This snippet shows the basic usage of FBottomNavigationBar widget. It demonstrates how to set the initial index, handle index changes, and add FBottomNavigationBarItem with icons and labels.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/bottom-navigation-bar/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFBottomNavigationBar(\n    index: 0,\n    onChange: (index) => {},\n    children: [\n      FBottomNavigationBarItem(\n        icon: Icon(FIcons.home),\n        label: const Text('Home'),\n      ),\n    ],\n  )\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FTabs Widget in Dart\nDESCRIPTION: This snippet shows the basic usage of the FTabs widget. It creates a tabs widget with two entries, sets an initial index, and includes an onPress callback. The content is represented by Placeholder widgets.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/tabs/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFTabs(\n  initialIndex: 1,\n  tabs: const [\n    FTabEntry(label: Text('Account'), content: Placeholder()),\n    FTabEntry(label: Text('Password'), content: Placeholder()),\n  ],\n  onPress: (index) {},\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Line Calendar in Dart\nDESCRIPTION: Creates a simple line calendar with a date controller and initial date selection set to yesterday.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/line-calendar/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFLineCalendar(\n  controller: FCalendarController.date(\n    initialSelection: DateTime.now().subtract(const Duration(days: 1)),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectTileGroup with Full Divider in Flutter\nDESCRIPTION: Creates a SelectTileGroup widget with full dividers between tiles, implementing a sidebar navigation menu. Uses an enum for selection values and includes icons for each tile option.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nenum Sidebar { recents, home, applications }\n\nFSelectTileGroup<Sidebar>(\n  selectController: FSelectTileGroupController(values: {Sidebar.recents}),\n  divider: FTileDivider.full,\n  label: const Text('Sidebar'),\n  description: const Text('These will be shown in the sidebar.'),\n  children: [\n    FSelectTile(\n      title: const Text('Recents'),\n      suffixIcon: Icon(FIcons.timer),\n      value: Sidebar.recents,\n    ),\n    FSelectTile(\n      title: const Text('Home'),\n      suffixIcon: Icon(FIcons.house),\n      value: Sidebar.home,\n    ),\n    FSelectTile(\n      title: const Text('Applications'),\n      suffixIcon: Icon(FIcons.appWindowMac),\n      value: Sidebar.applications,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Formatting in ForUI Select with Flutter\nDESCRIPTION: Demonstrates how to use custom formatting in an FSelect component. The format callback is used to display a formatted string representation of complex objects (users with first and last names).\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass FormatSelectPage extends StatelessWidget {\n  static const users = [\n    (firstName: 'Bob', lastName: 'Ross'),\n    (firstName: 'John', lastName: 'Doe'),\n    (firstName: 'Mary', lastName: 'Jane'),\n    (firstName: 'Peter', lastName: 'Parker'),\n  ];\n\n  @override\n  Widget build(BuildContext context) => FSelect<({String firstName, String lastName})>(\n    hint: 'Select a user',\n    format: (user) => '${user.firstName} ${user.lastName}',\n    children: [for (final user in users) FSelectItem(value: user, child: Text(user.firstName))],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Accordion with Maximum Expanded Items in Dart\nDESCRIPTION: This snippet demonstrates how to create an Accordion widget with a maximum of 2 expanded items. It includes three accordion items with different titles and content.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/accordion/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    FAccordion(\n      controller: FAccordionController(max: 2),\n      children: [\n        FAccordionItem(\n          title: const Text('Is it accessible?'),\n          child: const Text('Yes. It follows WAI-ARIA design patterns.'),\n        ),\n        FAccordionItem(\n          initiallyExpanded: true,\n          title: const Text('Is it Styled?'),\n          child: const Text('Yes. It includes default styles matching other components.'),\n        ),\n        FAccordionItem(\n          title: const Text('Is it Animated?'),\n          child: const Text('Yes. Animations are enabled by default but can be disabled.'),\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: FTileGroup.builder Constructor for Lazy Loading in Dart\nDESCRIPTION: The builder constructor for FTileGroup that supports on-demand tile generation. This approach is efficient for large lists as it only builds tiles as they are needed.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup.builder(\n  controller: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  semanticsLabel: 'Settings',\n  divider: FTileDivider.indented,\n  tileBuilder: (context, index) => index < 10 ? FTile(title: Text('Tile $index')) : null,\n  count: 100,\n);\n```\n\n----------------------------------------\n\nTITLE: Calendar with Unselectable Dates in Dart\nDESCRIPTION: Implementation of FCalendar demonstrating how to make specific dates unselectable using the selectable callback function in the controller.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/calendar/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFCalendar(\n  controller: FCalendarController.dates(\n    initialSelections: {DateTime(2024, 7, 17), DateTime(2024, 7, 20)},\n    selectable: (date) => !{DateTime(2024, 7, 18), DateTime(2024, 7, 19)}.contains(date),\n  ),\n  start: DateTime(2000),\n  today: DateTime(2024, 7, 15),\n  end: DateTime(2030),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FResizable Implementation with Controller\nDESCRIPTION: A basic implementation of the FResizable widget with a cascade controller that reports resize updates and events. This snippet shows the fundamental structure with a single resizable region.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/resizable/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFResizable(\n  controller: FResizableController.cascade(\n    onResizeUpdate: (regions) => print(regions),\n    onResizeEnd: (regions) => print(regions),\n  ),\n  axis: Axis.vertical,\n  divider: FResizableDivider.dividerWithThumb,\n  crossAxisExtent: 400,\n  children: [\n    FResizableRegion(\n      initialExtent: 200,\n      minExtent: 100,\n      builder: (context, data, child) => child!,\n      child: const Placeholder(),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Date Field Implementation in ForUI\nDESCRIPTION: Basic implementation of the FDateField widget that shows a date picker with label and description.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst FDateField(\n  label: Text('Appointment Date'),\n  description: Text('Select a date for your appointment'),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Regions in Flutter without a Divider\nDESCRIPTION: This code demonstrates how to create a resizable widget with two regions (sidebar and content) in Flutter using FResizable. It's configured without a visible divider using FResizableDivider.none, and allows horizontal resizing with configurable minimum extents.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/resizable/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) => DecoratedBox(\n  decoration: BoxDecoration(\n    border: Border.all(color: context.theme.colors.border),\n    borderRadius: BorderRadius.circular(8),\n  ),\n  child: FResizable(\n    axis: Axis.horizontal,\n    divider: FResizableDivider.none,\n    crossAxisExtent: 300,\n    children: [\n      FResizableRegion(\n        initialExtent: 100,\n        minExtent: 100,\n        builder: (context, data, _) => Align(\n            child: Text('Sidebar', style: context.theme.typography.sm),\n          ),\n      ),\n      FResizableRegion(\n        initialExtent: 300,\n        minExtent: 100,\n        builder: (context, data, _) => Align(\n          child: Text('Content', style: context.theme.typography.sm),\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in Flutter\nDESCRIPTION: Creates a basic slider with a predefined selection maximum value of 0.6. Uses the FContinuousSliderController to manage the slider's state.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(\n    selection: FSliderSelection(max: 0.6),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FSwitch in Flutter\nDESCRIPTION: This snippet shows how to implement a basic FSwitch component with a label and state management. It demonstrates the usage of key properties like label, semanticsLabel, value, and onChange.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/switch/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Page extends StatefulWidget {\n  const Page({super.key});\n\n  @override\n  State<Page> createState() => PageState();\n}\n\nclass PageState extends State<Page> {\n  bool state = false;\n\n  @override\n  Widget build(BuildContext context) => FSwitch(\n    label: const Text('Airplane Mode'),\n    semanticsLabel: 'Airplane Mode',\n    value: state,\n    onChange: (value) => setState(() => state = value),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Implementation in Dart\nDESCRIPTION: A simple implementation of the FCalendar widget using a date controller. The calendar spans from 2000 to 2030 and has a selected date initially set.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/calendar/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFCalendar(\n  controller: FCalendarController.date(initialSelection: selected),\n  start: DateTime(2000),\n  end: DateTime(2030),\n);\n```\n\n----------------------------------------\n\nTITLE: Outline Style Button in Dart\nDESCRIPTION: Creates a button with an outline style using the FButtonStyle.outline property.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  child: const Text('Button'),\n  style: FButtonStyle.outline,\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Calendar-Only Date Field Implementation\nDESCRIPTION: Implementation of FDateField.calendar constructor that provides a calendar-focused date picker with all available parameters including date range constraints and calendar display options.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFDateField.calendar(\n  controller: FDateFieldController(\n    vsync: this,\n    initialDate: DateTime(2024, 1, 1),\n  ),\n  format: DateFormat('d MMM y'),\n  textAlign: TextAlign.start,\n  textAlignVertical: TextAlignVertical.center,\n  expands: false,\n  mouseCursor: SystemMouseCursors.text,\n  canRequestFocus: true,\n  clearable: true,\n  hint: 'Select a date',\n  start: DateTime(2024),\n  end: DateTime(2025),\n  today: DateTime.now(),\n  initialType: FCalendarPickerType.yearMonth,\n  autoHide: true,\n  anchor: Alignment.topLeft,\n  inputAnchor: Alignment.bottomLeft,\n  hideOnTapOutside: FHidePopoverRegion.none,\n  directionPadding: false,\n  label: Text('Calendar Date'),\n  description: Text('Select a date from the calendar'),\n  builder: (context, styles, child) => child!,\n  prefixBuilder: (context, styles, child) => Icon(Icons.calendar_today),\n    suffixBuilder: null,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring showFSheet with Options in Flutter\nDESCRIPTION: Example showing how to use the showFSheet function with various configuration options including side, navigators, size constraints, and interaction behaviors.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/sheet/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nshowFSheet(\n  context: context,\n  side: Layout.ltr,\n  useRootNavigator: true,\n  useSafeArea: false,\n  mainAxisMaxRatio: null,\n  constraints: const BoxConstraints(maxWidth: 450, maxHeight: 450),\n  barrierDismissible: true,\n  draggable: true,\n  builder: (context) => const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Usage with Profile Picture in Flutter\nDESCRIPTION: A simple implementation of the FAvatar component showing a user's profile picture with initials as a fallback. This is the most common use case for the avatar component, providing graceful degradation when images aren't available.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/avatar/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFAvatar(\n  image: const NetworkImage('https://example.com/profile.jpg'),\n  fallback: const Text('JD'),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Avatar Row with Images and Fallbacks in Flutter\nDESCRIPTION: This code demonstrates a row of three avatar components: one with a valid network image, one with an invalid image showing a text fallback, and one with an invalid image without a fallback. The FAvatar component handles image loading and fallback display automatically.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/avatar/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    // With valid image\n    FAvatar(\n      image: const NetworkImage('https://raw.githubusercontent.com/forus-labs/forui/main/samples/assets/avatar.png'),\n      fallback: const Text('MN'),\n    ),\n    const SizedBox(width: 10),\n\n    // With invalid image and fallback\n    FAvatar(\n      image: const NetworkImage(''),\n      fallback: const Text('MN'),\n    ),\n    const SizedBox(width: 10),\n\n    // With invalid image without fallback\n    FAvatar(image: const NetworkImage('')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Discrete Slider in Flutter\nDESCRIPTION: Creates a slider with discrete values using FDiscreteSliderController. The slider includes marking points at specific intervals, with a maximum selection value of 0.25.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FDiscreteSliderController(selection: FSliderSelection(max: 0.25)),\n  marks: const [\n    FSliderMark(value: 0, label: Text('0%')),\n    FSliderMark(value: 0.25, tick: false),\n    FSliderMark(value: 0.5),\n    FSliderMark(value: 0.75, tick: false),\n    FSliderMark(value: 1, label: Text('100%')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Controller Lifecycle in didUpdateWidget Method - Dart\nDESCRIPTION: Shows the proper implementation of the didUpdateWidget lifecycle method for stateful widgets with controllers. Handles controller replacement when a new controller is passed, with cleanup of old controller resources.\nSOURCE: https://github.com/forus-labs/forui/blob/main/KNOWLEDGE_BASE.md#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nif (widget.controller != old.controller) {\n  if (old.controller == null) {\n    _controller.dispose();\n  } else {\n    // TODO: remove listeners\n  }\n  _controller = widget.controller ?? newController();\n  // TODO: add listeners\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FTimePicker with Options in Flutter\nDESCRIPTION: Shows how to create an FTimePicker with various configuration options such as style, 24-hour format, and interval settings for hours and minutes.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-picker/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst FTimePicker(\n  controller: FTimePickerController(),\n  style: style,\n  hour24: true,\n  hourInterval: 1,\n  minuteInterval: 1,\n);\n```\n\n----------------------------------------\n\nTITLE: Complete FLabel Configuration with Error State in Dart\nDESCRIPTION: Shows a complete FLabel implementation with label, description, error message, error state, and a placeholder child. This example demonstrates all the available configuration options.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/label/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFLabel(\n    axis: Axis.horizontal,\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    error: const Text('Please accept the terms and conditions.'),\n    states: { WidgetState.error },\n    child: const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Sheet with ForUI in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a persistent sheet widget using ForUI library. It includes a main Sheets widget that manages multiple sheet controllers and a Form widget that represents the content of each sheet. The example showcases how to toggle sheets from different sides of the screen.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/persistent-sheet/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Sheets extends StatefulWidget {\n  @override\n  State<Sheets> createState() => _State();\n}\n\nclass _State extends State<Sheets> {\n  final Map<Layout, FSheetController> _controllers = {};\n\n  @override\n  Widget build(BuildContext context) {\n    VoidCallback onPress(Layout side) => () {\n          for (final MapEntry(:key, :value) in _controllers.entries) {\n            if (key != side && value.shown) {\n              return;\n            }\n          }\n\n          var controller = _controllers[side];\n          if (controller == null) {\n            controller = _controllers[side] ??= showFPersistentSheet(\n              context: context,\n              side: Layout.ltr,\n              builder: (context, controller) => Form(side: side, controller: controller),\n            );\n          } else {\n            controller.toggle();\n          }\n        };\n\n    return FScaffold( // This can be replaced with FSheets\n      content: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          FButton(\n            label: const Text('Left'),\n            onPress: onPress(Layout.ltr),\n          ),\n          const SizedBox(height: 5),\n          FButton(\n            label: const Text('Top'),\n            onPress: onPress(Layout.ttb),\n          ),\n          const SizedBox(height: 5),\n          FButton(\n            label: const Text('Right'),\n            onPress: onPress(Layout.rtl),\n          ),\n          const SizedBox(height: 5),\n          FButton(\n            label: const Text('Bottom'),\n            onPress: onPress(Layout.btt),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass Form extends StatelessWidget {\n  final Layout side;\n  final FSheetController controller;\n\n  const Form({required this.side, required this.controller, super.key});\n\n  @override\n  Widget build(BuildContext context) => Container(\n        height: double.infinity,\n        width: double.infinity,\n        decoration: BoxDecoration(\n          color: context.theme.colors.background,\n          border: side.vertical\n              ? Border.symmetric(horizontal: BorderSide(color: context.theme.colors.border))\n              : Border.symmetric(vertical: BorderSide(color: context.theme.colors.border)),\n        ),\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 8.0),\n          child: Center(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  'Account',\n                  style: context.theme.typography.xl2.copyWith(\n                    fontWeight: FontWeight.w600,\n                    color: context.theme.colors.foreground,\n                    height: 1.5,\n                  ),\n                ),\n                Text(\n                  'Make changes to your account here. Click save when you are done.',\n                  style: context.theme.typography.sm.copyWith(\n                    color: context.theme.colors.mutedForeground,\n                  ),\n                ),\n                const SizedBox(height: 8),\n                SizedBox(\n                  width: 450,\n                  child: Column(\n                    children: [\n                      const FTextField(\n                        label: Text('Name'),\n                        hint: 'John Renalo',\n                      ),\n                      const SizedBox(height: 10),\n                      const FTextField(\n                        label: Text('Email'),\n                        hint: 'john@doe.com',\n                      ),\n                      const SizedBox(height: 16),\n                      FButton(\n                        label: const Text('Save'),\n                        onPress: () => Navigator.of(context).pop(),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      );\n\n  @override\n  void dispose() {\n    for (final controller in _controllers.values) {\n      controller.dispose();\n    }\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FSelectGroup Usage Pattern with Configuration Options\nDESCRIPTION: Shows the general structure and available configuration options for the FSelectGroup widget. Demonstrates how to use both checkbox and radio button options with event handlers for selection changes.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select-group/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFSelectGroup<Value>(\n  controller: FSelectGroupController(), // or FSelectGroupController.radio()\n  label: const Text('Sidebar'),\n  description: const Text('Select the items you want to display in the sidebar.'),\n  onChange: (all) => print(all),\n  onSelect: (selection) => print(selection),\n  children: [\n    FCheckbox.grouped(\n      value: Value.checkbox,\n      label: const Text('Checkbox'),\n    ),\n    // or\n    FRadio.grouped(\n      value: Value.radio,\n      label: const Text('Radio'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Wheels Picker in Flutter\nDESCRIPTION: Example of a picker with multiple wheels for selecting month and day, with customizable flex values for wheel sizing.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/picker/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSizedBox(\n  width: 200,\n  child: FPicker(\n    children: [\n      const FPickerWheel(\n        flex: 3,\n        loop: true,\n        children: [\n          Text('January'),\n          Text('February'),\n          Text('March'),\n          Text('April'),\n          Text('May'),\n          Text('June'),\n          Text('July'),\n          Text('August'),\n          Text('September'),\n          Text('October'),\n          Text('November'),\n          Text('December'),\n        ],\n      ),\n      FPickerWheel.builder(\n        flex: 2,\n        builder: (context, index) => Text('${(index % 31) + 1}'),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Styled Badges in Flutter\nDESCRIPTION: This snippet demonstrates custom badge styling using the FBadge.raw constructor with a custom Container for more control over padding, decoration, and text styling.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/badge/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFBadge.raw(\n  builder: (context, style) => Container(\n    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n    decoration: style.decoration,\n    child: Text('Custom', style: style.contentStyle.labelTextStyle),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Tile Group with Suffix Icons\nDESCRIPTION: Implementation of FSelectTileGroup with suffix-positioned selection indicators. It demonstrates how to create a radio-style selection group with custom icon placement for a different visual appearance.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFSelectTileGroup(\n  selectController: FSelectTileGroupController.radio(),\n  label: const Text('Settings'),\n  children: [\n    FSelectTile.suffix(\n      prefixIcon: Icon(FIcons.list),\n      title: const Text('List View'),\n      value: 'List',\n    ),\n    FSelectTile.suffix(\n      prefixIcon: Icon(FIcons.layoutGrid),\n      title: const Text('Grid View'),\n      value: 'Grid',\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating FSwitch in a Flutter Form\nDESCRIPTION: This comprehensive example shows how to integrate FSwitch components within a form. It demonstrates creating a notification preferences form with multiple switches, form validation, and submission handling.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/switch/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass NotificationForm extends StatefulWidget {\n  const NotificationForm({super.key});\n\n  @override\n  State<NotificationForm> createState() => _NotificationFormState();\n}\n\nclass _NotificationFormState extends State<NotificationForm> {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n\n  @override\n  Widget build(BuildContext context) {\n    final theme = context.theme;\n    return Form(\n      key: _formKey,\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text(\n            'Email Notifications',\n            style: theme.typography.xl2.copyWith(\n              fontWeight: FontWeight.w600,\n              color: theme.colors.foreground,\n              height: 1.5,\n            ),\n          ),\n          const SizedBox(height: 15),\n          FCard.raw(\n            child: Padding(\n              padding: const EdgeInsets.fromLTRB(16, 12, 16, 16),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Flexible(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          'Marketing Emails',\n                          style: theme.typography.base.copyWith(\n                            fontWeight: FontWeight.w500,\n                            color: theme.colors.foreground,\n                            height: 1.5,\n                          ),\n                        ),\n                        Text(\n                          'Receive emails about new products, features, and more.',\n                          style: theme.typography.sm.copyWith(color: theme.colors.mutedForeground),\n                        ),\n                      ],\n                    ),\n                  ),\n                  FormField(\n                    initialValue: false,\n                    onSaved: (value) {\n                      // Save the marketing email preference\n                    },\n                    validator: (value) => null, // No validation required for this field\n                    builder: (state) => FSwitch(\n                      value: state.value ?? false,\n                      onChange: (value) => state.didChange(value),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n          const SizedBox(height: 12),\n          FCard.raw(\n            child: Padding(\n              padding: const EdgeInsets.fromLTRB(16, 12, 16, 16),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Flexible(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          'Security Emails',\n                          style: theme.typography.base.copyWith(\n                            fontWeight: FontWeight.w500,\n                            color: theme.colors.foreground,\n                            height: 1.5,\n                          ),\n                        ),\n                        Text(\n                          'Receive emails about your account security.',\n                          style: theme.typography.sm.copyWith(color: theme.colors.mutedForeground),\n                        ),\n                      ],\n                    ),\n                  ),\n                  FormField(\n                    initialValue: true,\n                    onSaved: (value) {\n                      // Save the security email preference\n                    },\n                    validator: (value) => null, // No validation required for this field\n                    builder: (state) => FSwitch(\n                      value: state.value ?? false,\n                      onChange: (value) => state.didChange(value),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n          const SizedBox(height: 30),\n          FButton(\n            child: const Text('Submit'),\n            onPress: () {\n              if (!_formKey.currentState!.validate()) {\n                // Handle form validation errors\n                return;\n              }\n\n              _formKey.currentState!.save();\n              // Process the form submission\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation in Flutter\nDESCRIPTION: A simple implementation of the FPagination widget with a controller that manages 10 pages.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/pagination/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFPagination(controller: FPaginationController(pages: 10));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Radio Form with Select Tile Group\nDESCRIPTION: A complete implementation of a form with radio (single-selection) behavior. It shows form validation, form submission handling, and proper state management for single-selection scenarios.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nenum Notification { all, direct, nothing }\n\nclass RadioForm extends StatefulWidget {\n  const RadioForm();\n\n  @override\n  State<RadioForm> createState() => RadioFormState();\n}\n\nclass RadioFormState extends State<RadioForm> {\n  final _formKey = GlobalKey<FormState>();\n  final controller = FSelectTileGroupController<Notification>.radio();\n\n  @override\n  Widget build(BuildContext context) => Form(\n    key: _formKey,\n    child: Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        FSelectTileGroup(\n          selectController: controller,\n          label: const Text('Notifications'),\n          description: const Text('Select the notifications.'),\n          validator: (values) => values?.isEmpty ?? true ? 'Please select a value.' : null,\n          children: [\n            FSelectTile(\n              title: const Text('All new messages'),\n              value: Notification.all,\n            ),\n            FSelectTile(\n              title: const Text('Direct messages and mentions'),\n              value: Notification.direct,\n            ),\n            FSelectTile(\n              title: const Text('Nothing'),\n              value: Notification.nothing,\n            ),\n          ],\n        ),\n        const SizedBox(height: 20),\n        FButton(\n          label: const Text('Save'),\n          onPress: () {\n            if (!_formKey.currentState!.validate()) {\n              // Handle errors here.\n              return;\n            }\n\n            _formKey.currentState!.save();\n            // Do something.\n          },\n        ),\n      ],\n    ),\n  );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout Dialog\nDESCRIPTION: Shows a dialog implementation with vertical layout, recommended for mobile devices. The actions are stacked vertically.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/dialog/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    IntrinsicWidth(\n      child: FButton(\n        label: const Text('Show Dialog'),\n        onPress: () => showAdaptiveDialog(\n          context: context,\n          builder: (context) => FDialog(\n            direction: Axis.vertical,\n            title: const Text('Are you absolutely sure?'),\n            body: const Text('This action cannot be undone. This will permanently delete your account and remove your data from our servers.'),\n            actions: [\n              FButton(label: const Text('Continue'), onPress: () => Navigator.of(context).pop()),\n              FButton(style: FButtonStyle.outline, label: const Text('Cancel'), onPress: () => Navigator.of(context).pop()),\n            ],\n          ),\n        ),\n      ),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Clearable Date Field Implementation\nDESCRIPTION: Example implementation of a date field with the clearable property set to true, allowing users to clear the input. Includes a complete StatefulWidget implementation with controller management.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass ClearableDateField extends StatefulWidget {\n  @override\n  State<ClearableDateField> createState() => _State();\n}\n\nclass _State extends State<ClearableDateField> with SingleTickerProviderStateMixin {\n  late final FDateFieldController _controller = FDateFieldController(vsync: this, initialDate: DateTime.now());\n\n  @override\n  Widget build(BuildContext context) => Padding(\n    padding: const EdgeInsets.only(top: 30),\n    child: FDateField(\n      controller: _controller,\n      label: const Text('Appointment Date'),\n      description: const Text('Select a date for your appointment'),\n      clearable: true,\n    ),\n  );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Value Form with Select Tile Group\nDESCRIPTION: A complete implementation of a form with multi-value selection capabilities. It demonstrates form validation, state management, and handling multiple selections with proper lifecycle management.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nenum Language { dart, java, rust, python }\n\nclass MultiValueForm extends StatefulWidget {\n  const MultiValueForm();\n\n  @override\n  State<MultiValueForm> createState() => MultiValueFormState();\n}\n\nclass MultiValueFormState extends State<MultiValueForm> {\n  final _formKey = GlobalKey<FormState>();\n  final controller = FSelectTileGroupController<Language>();\n\n  @override\n  Widget build(BuildContext context) => Form(\n    key: _formKey,\n    child: Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        FSelectTileGroup(\n          selectController: controller,\n          label: const Text('Favorite Languages'),\n          description: const Text('Your favorite language.'),\n          validator: (values) => values?.isEmpty ?? true ? 'Please select at least one language.' : null,\n          children: [\n            FSelectTile(\n              title: const Text('Dart'),\n              value: Language.dart,\n            ),\n            FSelectTile(\n              title: const Text('Java'),\n              value: Language.java,\n            ),\n            FSelectTile(\n              title: const Text('Rust'),\n              value: Language.rust,\n            ),\n            FSelectTile(\n              title: const Text('Python'),\n              value: Language.python,\n            ),\n          ],\n        ),\n      ],\n    ),\n  );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Cascading Resizable Widget in Dart\nDESCRIPTION: This example shows how to create a resizable widget without cascading effects by using a standard FResizableController. Each section can be resized independently without affecting other sections.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/resizable/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass TimeOfDay extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => DecoratedBox(\n        decoration: BoxDecoration(\n          border: Border.all(color: context.theme.colors.border),\n          borderRadius: BorderRadius.circular(8),\n        ),\n        child: FResizable(\n          axis: Axis.vertical,\n          controller: FResizableController(),\n          crossAxisExtent: 300,\n          children: [\n            FResizableRegion(\n              initialExtent: 200,\n              minExtent: 100,\n              builder: (_, data, __) => Label(data: data, icon: FIcons.sunrise, label: 'Morning'),\n            ),\n            FResizableRegion(\n              initialExtent: 200,\n              minExtent: 100,\n              builder: (_, data, __) => Label(data: data, icon: FIcons.sun, label: 'Afternoon'),\n            ),\n            FResizableRegion(\n              initialExtent: 200,\n              minExtent: 100,\n              builder: (_, data, __) => Label(data: data, icon: FIcons.sunset, label: 'Evening'),\n            ),\n          ],\n        ),\n      );\n}\n\nclass Label extends StatelessWidget {\n  static final DateFormat format = DateFormat.jm(); // Requires package:intl\n\n  final FResizableRegionData data;\n  final SvgAsset icon;\n  final String label;\n\n  const Label({required this.data, required this.icon, required this.label, super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final FThemeData(:colors, :typography) = context.theme;\n    final start = DateTime.fromMillisecondsSinceEpoch(\n      (data.offsetPercentage.min * Duration.millisecondsPerDay).round(),\n      isUtc: true,\n    );\n\n    final end = DateTime.fromMillisecondsSinceEpoch(\n      (data.offsetPercentage.max * Duration.millisecondsPerDay).round(),\n      isUtc: true,\n    );\n\n    return Align(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Row(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              icon(height: 15, colorFilter: ColorFilter.mode(colors.foreground, BlendMode.srcIn)),\n              const SizedBox(width: 3),\n              Text(label, style: typography.sm.copyWith(color: colors.foreground)),\n            ],\n          ),\n          const SizedBox(height: 5),\n          Text(\n            '${format.format(start)} - ${format.format(end)}',\n            style: typography.sm.copyWith(color: colors.foreground),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Error State in Flutter\nDESCRIPTION: Displays a slider with an error message indicating that the volume is too high. Includes standard label and description for volume adjustment.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  label: const Text('Volume'),\n  description: const Text('Adjust the volume by dragging the slider.'),\n  forceErrorText: 'Volume is too high.',\n  controller: FContinuousSliderController(selection: FSliderSelection(max: 0.6)),\n);\n```\n\n----------------------------------------\n\nTITLE: Raw Card Implementation in Dart\nDESCRIPTION: Demonstrates the usage of FCard.raw constructor for creating a minimal card with just a child widget. This variant provides a simpler implementation without title and subtitle.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/card/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFCard.raw(\n  child: const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Asynchronous Select with Custom Error Handling in Dart\nDESCRIPTION: An asynchronous searchable select that demonstrates error handling by deliberately throwing an error and displaying a custom error icon, showing how to gracefully handle failures in data fetching.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass AsyncErrorSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>.search(\n    hint: 'Select a fruit',\n    filter: (query) async {\n      await Future.delayed(const Duration(seconds: 1));\n      throw StateError('Error loading data');\n    },\n    contentBuilder: (context, data) => [for (final fruit in data.values) FSelectItem.text(fruit)],\n    searchErrorBuilder: (context, error, trace) {\n      final style = context.theme.selectStyle.iconStyle;\n      return Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Icon(FIcons.messageCircleX, size: style.size, color: style.color),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FTile Implementation in Dart\nDESCRIPTION: A basic implementation of the FTile widget with essential parameters including prefixIcon, title, and suffixIcon with an onPress callback.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFTile(\n  prefixIcon: Icon(FIcons.user),\n  title: const Text('Personalization'),\n  suffixIcon: Icon(FIcons.chevronRight),\n  onPress: () { },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component in Flutter ForUI\nDESCRIPTION: This code snippet demonstrates how to use the FDivider component in a Flutter application to separate content both horizontally and vertically. It shows a layout with a header, descriptive text, and a navigation row that uses dividers between links.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/divider/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal theme = context.theme;\nfinal colors = theme.colors;\nfinal typography = theme.typography;\n\nPadding(\n  padding: const EdgeInsets.all(16),\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [\n      Text(\n        'Flutter Forui',\n        style: typography.xl2.copyWith(\n          color: colors.foreground,\n          fontWeight: FontWeight.w600,\n        ),\n      ),\n      Text(\n        'An open-source widget library.',\n        style: typography.sm.copyWith(color: colors.mutedForeground),\n      ),\n      const FDivider(),\n      SizedBox(\n        height: 30,\n        child: Row(\n          children: [\n            Text(\n              'Blog',\n              style: typography.sm.copyWith(color: colors.foreground),\n            ),\n            const FDivider(axis : Axis.vertical),\n            Text(\n              'Docs',\n              style: typography.sm.copyWith(color: colors.foreground),\n            ),\n            const FDivider(axis : Axis.vertical),\n            Text(\n              'Source',\n              style: typography.sm.copyWith(color: colors.foreground),\n            ),\n          ],\n        ),\n      ),\n    ],\n  ),\n );\n```\n\n----------------------------------------\n\nTITLE: Using FSelectMenuTile.builder for Dynamic Menu Generation in Dart\nDESCRIPTION: This snippet demonstrates how to use the FSelectMenuTile.builder constructor to create a dynamic menu with a custom builder function. It allows for lazy loading of menu items based on an index.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFSelectMenuTile<Value>.builder(\n  selectController: FSelectMenuTileController(), // or FSelectMenuTileController.radio()\n  menuAnchor: Alignment.bottomLeft,\n  tileAnchor: Alignment.bottomLeft,\n  shift: FPortalFollowerShift.flip,\n  hideOnTapOutside: true,\n  directionPadding: true,\n  autoHide: false,\n  scrollController: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  divider: FTileDivider.indented,\n  label: const Text('Sidebar'),\n  description: const Text('Select the items you want to display in the sidebar.'),\n  errorBuilder: (context, error) => Text(error),\n  prefixIcon: Icon(FIcons.bell),\n  title: Text('Notifications'),\n  subtitle: Text('subtitle'),\n  details: Text('All'),\n  suffixIcon: Icon(FIcons.chevronsUpDown),\n  menuBuilder: (context, index) => index < 10 ? FSelectTile(\n    label: Text('Tile $index'),\n    value: Value.something,\n  ) : null,\n  count: 100,\n  onChange: (all) => print(all),\n  onSelect: (selection) => print(selection),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Behaviour Accordion in Dart\nDESCRIPTION: This snippet demonstrates how to create an Accordion widget with radio behaviour, where only one item can be expanded at a time. It uses FAccordionController.radio() and includes three accordion items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/accordion/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    FAccordion(\n      controller: FAccordionController.radio(),\n      children: [\n        FAccordionItem(\n          title: const Text('Is it accessible?'),\n          child: const Text('Yes. It follows WAI-ARIA design patterns.'),\n        ),\n        FAccordionItem(\n          initiallyExpanded: true,\n          title: const Text('Is it Styled?'),\n          child: const Text('Yes. It includes default styles matching other components.'),\n        ),\n        FAccordionItem(\n          title: const Text('Is it Animated?'),\n          child: const Text('Yes. Animations are enabled by default but can be disabled.'),\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Disabled Slider in Flutter\nDESCRIPTION: Creates a volume slider that is disabled, preventing user interaction. Includes label and description text with a maximum selection value of 0.6.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  label: const Text('Volume'),\n  description: const Text('Adjust the volume by dragging the slider.'),\n  controller: FContinuousSliderController(\n    selection: FSliderSelection(max: 0.6),\n  ),\n  enabled: false,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FPagination with Custom Settings\nDESCRIPTION: Example of configuring FPagination with custom parameters including page count, initial page, edge visibility, sibling count, and a page change callback.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/pagination/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFPagination(\n  controller: FPaginationController(\n    pages: 20,\n    initialPage: 4,\n    showEdges: false,\n    siblings: 2,\n    onPageChanged: () {},\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FFocusedOutline in Flutter\nDESCRIPTION: Example of using the FFocusedOutline widget to create a focused container with text. The widget wraps a Container with custom styling and applies a focus outline when the focused parameter is true.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/focused-outline/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFFocusedOutline(\n  focused: true,\n  child: Container(\n    decoration: BoxDecoration(\n      color: context.theme.colors.primary,\n      borderRadius: BorderRadius.circular(8),\n    ),\n    padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 12),\n    child: Text(\n      'Focused',\n      style: context.theme.typography.base.copyWith(\n        color: context.theme.colors.primaryForeground,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FRadio Component\nDESCRIPTION: Example implementation of the FRadio component with all available properties including label, description, error message, semantics label, value, change handler, enabled state, and autofocus.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/radio/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFRadio(\n  label: const Text('Default'),\n  description: const Text('The description of the default option.'),\n  error: const Text('Please select the default option.'),\n  semanticsLabel: 'Default',\n  value: true,\n  onChange: (value) {},\n  enabled: true,\n  autofocus: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Implementation in Dart\nDESCRIPTION: Demonstrates the basic implementation of a breadcrumb navigation component with regular items, collapsed items with dropdown menus, and the current page indicator.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/breadcrumb/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFBreadcrumb(\n  children: [\n    FBreadcrumbItem(onPress: () {}, child: const Text('Forui')),\n    FBreadcrumbItem.collapsed(\n      menu: [\n        FTileGroup(\n          children: [\n            FTile(\n              title: const Text('Documentation'),\n              onPress: () {},\n            ),\n            FTile(\n              title: const Text('Themes'),\n              onPress: () {},\n            ),\n          ],\n        ),\n      ],\n    ),\n    FBreadcrumbItem(onPress: () {}, child: const Text('Layout')),\n    FBreadcrumbItem(current: true, child: const Text('Widgets')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in Flutter with ForUI\nDESCRIPTION: A simple implementation of the FTooltip widget that displays 'Add to library' text when the button is long-pressed or hovered. The tooltip is shown with default positioning.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/tooltip/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFTooltip(\n  tipBuilder: (context, style, _) => const Text('Add to library'),\n  child: IntrinsicWidth(\n    child: FButton(\n      style: FButtonStyle.outline,\n      onPress: () {},\n      label: Text('Long press/Hover'),\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Updating FPopover Traversal Edge Behavior in Dart\nDESCRIPTION: Adds traversal edge behavior to FPopover and related widgets, and changes focus node types for improved functionality.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Add `FPopover.traversalEdgeBehavior`.\n* Add `traversalEdgeBehavior` to `FBreadcrumbItem.collapsed`.\n* Add `traversalEdgeBehavior` to `FPopoverMenu`.\n* Add `traversalEdgeBehavior` to `FSelectMenuTile`.\n* **Breaking** Change `FPopover.focusNode` from `FocusNode` to `FocusScopeNode`.\n* **Breaking** Change `focusNode` from `FocusNode` to `FocusScopeNode` in `FBreadcrumbItem.collapsed`.\n* **Breaking** Change `focusNode` from `FocusNode` to `FocusScopeNode` in `FPopoverMenu`.\n* **Breaking** Change `focusNode` from `FocusNode` to `FocusScopeNode` in `FSelectMenuTile`.\n```\n\n----------------------------------------\n\nTITLE: Basic FCard Usage with Button in Dart\nDESCRIPTION: Shows how to create a basic card with title, subtitle, and an interactive button child component. This example demonstrates the standard FCard constructor usage.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/card/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFCard(\n  title: const Text('Notification'),\n  subtitle: const Text('You have 3 unread messages.'),\n  child: FButton(child: const Text('Read messages'), onPress: () {}),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Resizable Layout in Dart\nDESCRIPTION: This example demonstrates creating a horizontal resizable layout with two sections (Sidebar and Content). Each section has specific initial and minimum extents for controlling the layout proportions.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/resizable/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) => DecoratedBox(\n  decoration: BoxDecoration(\n    border: Border.all(color: context.theme.colors.border),\n    borderRadius: BorderRadius.circular(8),\n  ),\n  child: FResizable(\n    axis: Axis.horizontal,\n    crossAxisExtent: 300,\n    children: [\n      FResizableRegion(\n        initialExtent: 100,\n        minExtent: 100,\n        builder: (context, data, _) => Align(\n            child: Text('Sidebar', style: context.theme.typography.sm),\n          ),\n      ),\n      FResizableRegion(\n        initialExtent: 300,\n        minExtent: 100,\n        builder: (context, data, _) => Align(\n          child: Text('Content', style: context.theme.typography.sm),\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Header with X Icon in Dart using ForUI\nDESCRIPTION: This snippet shows how to create a nested header with multiple prefix actions and an X icon as a suffix action. It demonstrates the use of disabled actions and the FHeaderAction.x constructor for the close button.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/header/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFHeader.nested(\n  title: const Text('Climate'),\n  prefixActions: [\n    FHeaderAction(\n      icon: Icon(FIcons.thermometer),\n      onPress: () {},\n    ),\n    FHeaderAction(\n      icon: Icon(FIcons.wind),\n      onPress: null,\n    ),\n  ],\n  suffixActions: [\n    FHeaderAction.x(onPress: () {}),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slider with Selection Boundaries in Flutter\nDESCRIPTION: Creates a slider with constraints on the selection range. The current selection is set to 0.6, but it can only move within the boundaries defined by extent from 0.25 to 0.75.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(\n    selection: FSliderSelection(\n      max: 0.6,\n      extent: (min: 0.25, max: 0.75),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Input-Only Date Field Implementation\nDESCRIPTION: Implementation of FDateField.input constructor focusing on text input functionality for date selection. Note that the example actually shows the calendar constructor again, which appears to be a documentation error.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFDateField.calendar(\n  controller: FDateFieldController(\n    vsync: this,\n    initialDate: DateTime(2024, 1, 1),\n  ),\n  format: DateFormat('d MMM y'),\n  textAlign: TextAlign.start,\n  textAlignVertical: TextAlignVertical.center,\n  expands: false,\n  mouseCursor: SystemMouseCursors.text,\n  canRequestFocus: true,\n  clearable: true,\n  hint: 'Select a date',\n  start: DateTime(2024),\n  end: DateTime(2025),\n  today: DateTime.now(),\n  initialType: FCalendarPickerType.yearMonth,\n  autoHide: true,\n  anchor: Alignment.topLeft,\n  inputAnchor: Alignment.bottomLeft,\n  hideOnTapOutside: FHidePopoverRegion.none,\n  directionPadding: false,\n  label: Text('Calendar Date'),\n  description: Text('Select a date from the calendar'),\n  builder: (context, styles, child) => child!,\n  prefixBuilder: (context, styles, child) => Icon(Icons.calendar_today),\n  suffixBuilder: null,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Horizontal Label Implementation in Dart\nDESCRIPTION: Creates a horizontal FLabel with a label, description, and a decorated box as a child. This example demonstrates the horizontal orientation of the label component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/label/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFLabel(\n    axis: Axis.horizontal,\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    child: const DecoratedBox(\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.all(Radius.circular(5)),\n        color: Colors.grey,\n      ),\n      child: SizedBox(width: 16, height: 16),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FTimePicker Usage in Flutter\nDESCRIPTION: Demonstrates the basic implementation of the FTimePicker widget within a stateful widget. It shows how to initialize the controller and dispose of it properly.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-picker/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo extends StatefulWidget {\n  Foo();\n\n  @override\n  State<Foo> createState() => _FooState();\n}\n\nclass _FooState extends State<Foo> {\n  late final FTimePickerController _controller = FTimePickerController(initial: FTime.now());\n\n  @override\n  Widget build(BuildContext context) => FTimePicker(controller: _controller);\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectTileGroup without Dividers in Flutter\nDESCRIPTION: Creates a SelectTileGroup widget without dividers between tiles, implementing a sidebar navigation menu. Uses the same enum structure and icon setup as the full divider version.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nenum Sidebar { recents, home, applications }\n\nFSelectTileGroup<Sidebar>(\n  selectController: FSelectTileGroupController(values: {Sidebar.recents}),\n  label: const Text('Sidebar'),\n  description: const Text('These will be shown in the sidebar.'),\n  children: [\n    FSelectTile(\n      title: const Text('Recents'),\n      suffixIcon: Icon(FIcons.timer),\n      value: Sidebar.recents,\n    ),\n    FSelectTile(\n      title: const Text('Home'),\n      suffixIcon: Icon(FIcons.house),\n      value: Sidebar.home,\n    ),\n    FSelectTile(\n      title: const Text('Applications'),\n      suffixIcon: Icon(FIcons.appWindowMac),\n      value: Sidebar.applications,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Variants in Flutter\nDESCRIPTION: This snippet demonstrates different badge style variants including primary, secondary, outline, and destructive styles arranged in a column layout.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/badge/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  children: [\n    FBadge(\n      child: const Text('Primary'),\n      style: FBadgeStyle.primary,\n    ),\n    const SizedBox(height: 8),\n    FBadge(\n      child: const Text('Secondary'),\n      style: FBadgeStyle.secondary,\n    ),\n    const SizedBox(height: 8),\n    FBadge(\n      child: const Text('Outline'),\n      style: FBadgeStyle.outline,\n    ),\n    const SizedBox(height: 8),\n    FBadge(\n      child: const Text('Destructive'),\n      style: FBadgeStyle.destructive,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Single Date Selection Calendar in Dart\nDESCRIPTION: Implementation of FCalendar configured for single date selection mode. Uses the basic date controller without initial selection.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/calendar/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFCalendar(\n  controller: FCalendarController.date(),\n  start: DateTime(2000),\n  end: DateTime(2030),\n);\n```\n\n----------------------------------------\n\nTITLE: 24-Hour Time Field Example\nDESCRIPTION: Implementation of FTimeField with 24-hour time format enabled.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-field/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst FTimeField(\n  hour24: true,\n  label: Text('Appointment Time'),\n  description: Text('Select a time for your appointment.'),\n);\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Picker in Flutter\nDESCRIPTION: Implementation of a picker using lazy loading through a builder pattern, dynamically generating items as needed.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/picker/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst FPicker(\n  children: [\n    FPickerWheel.builder(\n      builder: (context, index) => Text('$index'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Using Email Preset for Text Field in Flutter\nDESCRIPTION: Utilizes the email preset constructor of FTextField to quickly create an email input field with appropriate keyboard settings and initial value.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFTextField.email(\n  initialValue: 'jane@doe.com',\n  controller: _controller, // TextEditingController\n);\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection Calendar in Dart\nDESCRIPTION: Implementation of FCalendar configured for date range selection with an initial range. Uses the range controller to specify start and end dates.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/calendar/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFCalendar(\n  controller: FCalendarController.range(\n    initialSelection: (DateTime(2024, 7, 17), DateTime(2024, 7, 20)),\n  ),\n  start: DateTime(2000),\n  today: DateTime(2024, 7, 15),\n  end: DateTime(2030),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing FTappable Animation in Dart\nDESCRIPTION: This snippet shows how to customize the scale animation of FTappable. It includes examples of default bounce animation, no animation, and a custom tween for scaling effect.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/tappable/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Default animation.\nFTappableStyle(animationTween: FTappableAnimations.bounce);\n\n// No animation.\nFTappableStyle(animationTween: FTappableAnimations.none);\n\n// Custom tween.\nFTappableStyle(animationTween: Tween(begin: 1.0, end: 0.97));\n```\n\n----------------------------------------\n\nTITLE: Time Field with Custom Validation\nDESCRIPTION: Example of FTimeField implementation with custom validation logic.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-field/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass ValidatorTimeFieldPage extends StatefulWidget {\n  @override\n  State<ValidatorTimeFieldPage> createState() => _ValidationTimeFieldPageState();\n}\n\nclass _ValidationTimeFieldPageState extends State<ValidatorTimeFieldPage> with SingleTickerProviderStateMixin {\n  late final FTimeFieldController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = FTimeFieldController(vsync: this, validator: _validate);\n  }\n\n  String? _validate(FTime? time) => time == FTime(12) ? 'Time cannot be noon.' : null;\n\n  @override\n  Widget build(BuildContext context) => FTimeField(\n        controller: _controller,\n        label: const Text('Appointment Time'),\n      );\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alert with Custom Icon in Dart\nDESCRIPTION: Implements an alert with a custom icon, title, and subtitle to enhance visual communication.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/alert/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFAlert(\n  icon: Icon(FIcons.badgeAlert),\n  title: const Text('Heads Up!'),\n  subtitle: const Text('You can add components to your app using the cli.'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Builder-based Select Tile Group\nDESCRIPTION: Implementation of FSelectTileGroup.builder for efficient rendering of a large number of selectable tiles. It uses a builder pattern to generate tiles on demand with specified count and custom tile creation logic.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFSelectTileGroup<Value>.builder(\n  groupController: FSelectTileGroupController(), // or FSelectTileGroupController.radio()\n  scrollController: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  semanticsLabel: 'Settings',\n  divider: FTileDivider.indented,\n  onChange: (all) => print(all),\n  onSelect: (selection) => print(selection),\n  tileBuilder: (context, index) => index < 10 ? FSelectTile(\n    title: Text('Tile $index'),\n    value: Value.something,\n  ) : null,\n  count: 100,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Menu Tile in Dart\nDESCRIPTION: This snippet demonstrates the basic implementation of a Select Menu Tile widget with radio-style selection for notification settings. It includes a controller, validation, and dynamic details based on the selected value.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nenum Notification { all, direct, nothing }\n\nclass _SelectMenuTile extends StatefulWidget {\n  const _SelectMenuTileForm({super.key});\n\n  @override\n  State<_SelectMenuTile> createState() => _SelectMenuTileState();\n}\n\nclass _SelectMenuTileState extends State<_SelectMenuTile> {\n  final controller = FSelectMenuTileController.radio(value: Notification.all);\n\n  @override\n  Widget build(BuildContext context) => FSelectMenuTile(\n    selectController: controller,\n    autoHide: true,\n    validator: (value) => value == null ? 'Select an item' : null,\n    prefixIcon: Icon(FIcons.bell),\n    title: const Text('Notifications'),\n    details: ListenableBuilder(\n      listenable: controller,\n      builder: (context, _) => Text(\n        switch (controller.value.firstOrNull) {\n          Notification.all => 'All',\n          Notification.direct => 'Direct Messages',\n          null || Notification.nothing => 'None',\n        },\n      ),\n    ),\n    menu: [\n      FSelectTile(title: const Text('All'), value: Notification.all),\n      FSelectTile(title: const Text('Direct Messages'), value: Notification.direct),\n      FSelectTile(title: const Text('None'), value: Notification.nothing),\n    ],\n  );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Persistent Sheet with ForUI in Flutter\nDESCRIPTION: This code snippet demonstrates how to use the showFPersistentSheet function to display a persistent sheet in a Flutter application. It includes various configuration options such as side, root navigator usage, safe area, constraints, and draggability.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/persistent-sheet/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nshowFPersistentSheet(\n  context: context,\n  side: Layout.ltr,\n  useRootNavigator: true,\n  useSafeArea: false,\n  keepAliveOffstage: true,\n  mainAxisMaxRatio: null,\n  constraints: const BoxConstraints(maxWidth: 450, maxHeight: 450),\n  draggable: true,\n  builder: (context) => const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FPortal Implementation in Dart\nDESCRIPTION: This snippet shows the basic usage of the FPortal widget with essential parameters including controller, shift behavior, anchors, and builders. It demonstrates how to create a simple portal that positions text content relative to a child widget.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/portal/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFPortal(\n  controller: OverlayPortalController(),\n  shift: FPortalShift.flip,\n  portalAnchor: Alignment.topCenter,\n  portalBuilder: (context) => const Text('portal'),\n  childAnchor: Alignment.bottomCenter,\n  child: const Text('child'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Styles\nDESCRIPTION: Command to generate styles in the project, defaulting to lib/theme directory. Includes options for help, creating all styles, force overwrite, and custom output location.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui style create [styles]\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui style create [styles]\n-h, --help      Print this usage information.\n-a, --all       Create all styles.\n-f, --force     Overwrite existing files if they exist.\n-o, --output    The output directory or file, relative to the project directory.\n                (defaults to \"lib/theme\")\n```\n\n----------------------------------------\n\nTITLE: Destructive Alert Style in Dart\nDESCRIPTION: Creates an alert with destructive styling to indicate warnings or critical information to users. The destructive style is highlighted in the code.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/alert/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFAlert(\n  title: const Text('Heads Up!'),\n  subtitle: const Text('You can add components to your app using the cli.'),\n  style: FAlertStyle.destructive,\n);\n```\n\n----------------------------------------\n\nTITLE: Looping Picker Implementation in Flutter\nDESCRIPTION: Example of a picker with looping enabled, allowing continuous scrolling through month options.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/picker/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst FPicker(\n  children: [\n    FPickerWheel(\n      loop: true,\n      children: [\n        Text('January'),\n        Text('February'),\n        Text('March'),\n        Text('April'),\n        Text('May'),\n        Text('June'),\n        Text('July'),\n        Text('August'),\n        Text('September'),\n        Text('October'),\n        Text('November'),\n        Text('December'),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sectioned Select Component in Dart\nDESCRIPTION: An example of FSelect with sections that organizes timezone options into geographic regions, making it easier for users to navigate through a long list of options.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SectionSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>(\n    hint: 'Select a timezone',\n    popoverConstraints: const BoxConstraints(maxWidth: 400, maxHeight: 300),\n    children: [\n      FSelectSection(\n        label: const Text('North America'),\n        children: [\n          FSelectItem.text('Eastern Standard Time (EST)'),\n          FSelectItem.text('Central Standard Time (CST)'),\n          FSelectItem.text('Mountain Standard Time (MST)'),\n          FSelectItem.text('Pacific Standard Time (PST)'),\n          FSelectItem.text('Alaska Standard Time (AKST)'),\n          FSelectItem.text('Hawaii Standard Time (HST)'),\n        ],\n      ),\n      FSelectSection(\n        label: const Text('South America'),\n        children: [\n          FSelectItem.text('Argentina Time (ART)'),\n          FSelectItem.text('Bolivia Time (BOT)'),\n          FSelectItem.text('Brasilia Time (BRT)'),\n          FSelectItem.text('Chile Standard Time (CLT)'),\n        ],\n      ),\n      FSelectSection(\n        label: const Text('Europe & Africa'),\n        children: [\n          FSelectItem.text('Greenwich Mean Time (GMT)'),\n          FSelectItem.text('Central European Time (CET)'),\n          FSelectItem.text('Eastern European Time (EET)'),\n          FSelectItem.text('Western European Summer Time (WEST)'),\n          FSelectItem.text('Central Africa Time (CAT)'),\n          FSelectItem.text('Eastern Africa Time (EAT)'),\n        ],\n      ),\n      FSelectSection(\n        label: const Text('Asia'),\n        children: [\n          FSelectItem.text('Moscow Time (MSK)'),\n          FSelectItem.text('India Standard Time (IST)'),\n          FSelectItem.text('China Standard Time (CST)'),\n          FSelectItem.text('Japan Standard Time (JST)'),\n          FSelectItem.text('Korea Standard Time (KST)'),\n          FSelectItem.text('Indonesia Standard Time (IST)'),\n        ],\n      ),\n      FSelectSection(\n        label: const Text('Australia & Pacific'),\n        children: [\n          FSelectItem.text('Australian Western Standard Time (AWST)'),\n          FSelectItem.text('Australian Central Standard Time (ACST)'),\n          FSelectItem.text('Australian Eastern Standard Time (AEST)'),\n          FSelectItem.text('New Zealand Standard Time (NZST)'),\n          FSelectItem.text('Fiji Time (FJT)'),\n        ],\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Labelled Slider in Flutter\nDESCRIPTION: Implements a slider with a label and description text. The label shows 'Volume' and the description explains the slider's purpose for adjusting volume.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  label: const Text('Volume'),\n  description: const Text('Adjust the volume by dragging the slider.'),\n  controller: FContinuousSliderController(selection: FSliderSelection(max: 0.6)),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled FSwitch in Flutter\nDESCRIPTION: This snippet demonstrates how to create a disabled FSwitch component. It uses the 'enabled' property set to false to disable user interaction with the switch.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/switch/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Page extends StatefulWidget {\n  const Page({super.key});\n\n  @override\n  State<Page> createState() => PageState();\n}\n\nclass PageState extends State<Page> {\n  bool state = false;\n\n  @override\n  Widget build(BuildContext context) => FSwitch(\n    label: const Text('Airplane Mode'),\n    semanticsLabel: 'Airplane Mode',\n    value: state,\n    onChange: (value) => setState(() => state = value),\n    enabled: false,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FTappable Widget in Dart\nDESCRIPTION: This snippet demonstrates how to create a basic FTappable widget with hover effects and custom styling. It uses a Container with dynamic background color based on hover state.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/tappable/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFTappable(\n  builder: (context, data, child) => Container(\n    decoration: BoxDecoration(\n      color: data.hovered ? context.theme.colors.secondary : context.theme.colors.background,\n      borderRadius: BorderRadius.circular(8),\n      border: Border.all(\n        color: context.theme.colors.border,\n      )\n    ),\n    padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 12),\n    child: child!,\n  ),\n  child: const Text('Tappable'),\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Icons in Pagination\nDESCRIPTION: Example showing how to replace the default navigation icons with custom icons in the pagination component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/pagination/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFPagination(\n  controller: FPaginationController(\n    pages: 10,\n    initialPage: 4,\n  ),\n  next: Padding(\n    padding: style.itemPadding,\n    child: ConstrainedBox(\n      constraints: style.contentConstraints,\n      child: FButton.icon(\n        style: FButtonStyle.ghost,\n        onPress: controller.next,\n        child: FIconStyleData(\n          style: style.iconStyle,\n          child: Icon(FIcons.bird),\n        ),\n      ),\n    ),\n  ),\n  previous: Padding(\n    padding: style.itemPadding,\n    child: ConstrainedBox(\n      constraints: style.contentConstraints,\n      child: FButton.icon(\n        style: FButtonStyle.ghost,\n        onPress: controller.previous,\n        child: FIconStyleData(\n          style: style.iconStyle,\n          child: Icon(FIcons.anchor),\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using FSelectTileGroup with Complete Parameters\nDESCRIPTION: Comprehensive implementation of FSelectTileGroup showing all available parameters including controllers, scrolling behavior, and event handlers. It demonstrates how to handle selection changes and customize appearance.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFSelectTileGroup<Value>(\n  groupController: FSelectTileGroupController(), // or FSelectTileGroupController.radio()\n  scrollController: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  label: const Text('Sidebar'),\n  description: const Text('Select the items you want to display in the sidebar.'),\n  divider: FTileDivider.indented,\n  onChange: (all) => print(all),\n  onSelect: (selection) => print(selection),\n  items: [\n    FSelectTile(\n      label: const Text('1'),\n      value: Value.something,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Long Press Only Tooltip Configuration in Flutter\nDESCRIPTION: This example shows how to configure the FTooltip to appear only on long press and disable the hover trigger. This is useful for touch-focused interfaces where hover interactions aren't relevant.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/tooltip/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFTooltip(\n  hover: false,\n  longPress: true,\n  tipBuilder: (context, style, _) => const Text('Add to library'),\n  child: IntrinsicWidth(\n    child: FButton(\n      style: FButtonStyle.outline,\n      onPress: () {},\n      label: Text('Long press'),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Input-Only Date Field Example\nDESCRIPTION: Basic example implementation of the input-focused date field with label and description.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFDateField.input(\n  label: Text('Appointment Date'),\n  description: Text('Select a date for your appointment'),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Forui Hooks Dependencies\nDESCRIPTION: Command line instructions for installing the required flutter_hooks and forui_hooks packages using Flutter's package manager.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui_hooks/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add flutter_hooks\nflutter pub add forui_hooks\n```\n\n----------------------------------------\n\nTITLE: Implementing FCheckbox with Error State in Flutter\nDESCRIPTION: An example showing how to display an error message with a checkbox. This is useful for form validation to indicate when checkbox requirements are not met.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/checkbox/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Page extends StatefulWidget {\n  const Page({super.key});\n\n  @override\n  State<Page> createState() => PageState();\n}\n\nclass PageState extends State<Page> {\n  bool state = false;\n\n  @override\n  Widget build(BuildContext context) => FCheckbox(\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    error: const Text('Please accept the terms and conditions.'),\n    semanticsLabel: 'Accept terms and conditions',\n    value: state,\n    onChange: (value) => setState(() => state = value),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FCheckbox Without Labels in Flutter\nDESCRIPTION: A minimal implementation of FCheckbox without labels or descriptions. This shows how to create a simple checkbox with just the toggle functionality.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/checkbox/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Page extends StatefulWidget {\n  const Page({super.key});\n\n  @override\n  State<Page> createState() => PageState();\n}\n\nclass PageState extends State<Page> {\n  bool state = false;\n\n  @override\n  Widget build(BuildContext context) => FCheckbox(\n    value: state,\n    onChange: (value) {\n      setState(() => state = value);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adaptive Dialog Constructor\nDESCRIPTION: Shows the adaptive constructor usage of FDialog which automatically adjusts based on platform.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/dialog/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFDialog.adaptive(\n  title: const Text('Are you absolutely sure?'),\n  body: const Text('This action cannot be undone. This will permanently delete your account and remove your data from our servers.'),\n  actions: [\n    FButton(style: FButtonStyle.outline, label: const Text('Cancel'), onPress: () => Navigator.of(context).pop()),\n    FButton(label: const Text('Continue'), onPress: () => Navigator.of(context).pop()),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Widget with No Thumb Divider in Dart\nDESCRIPTION: This example shows how to configure a resizable widget with a simple divider without a thumb. It creates a horizontal layout with sidebar and content areas using the FResizableDivider.divider option.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/resizable/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) => DecoratedBox(\n  decoration: BoxDecoration(\n    border: Border.all(color: context.theme.colors.border),\n    borderRadius: BorderRadius.circular(8),\n  ),\n  child: FResizable(\n    axis: Axis.horizontal,\n    divider: FResizableDivider.divider,\n    crossAxisExtent: 300,\n    children: [\n      FResizableRegion(\n        initialExtent: 100,\n        minExtent: 100,\n        builder: (context, data, _) => Align(\n            child: Text('Sidebar', style: context.theme.typography.sm),\n          ),\n      ),\n      FResizableRegion(\n        initialExtent: 300,\n        minExtent: 100,\n        builder: (context, data, _) => Align(\n          child: Text('Content', style: context.theme.typography.sm),\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Forui Hooks in a Flutter Widget\nDESCRIPTION: Example of using Forui hooks in a Flutter widget. It demonstrates how to use useFAccordionController hook within a HookWidget to create an FAccordion with multiple items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/hooks/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\nimport 'package:flutter_hooks/flutter_hooks.dart';\n\nimport 'package:forui/forui.dart';\nimport 'package:forui_hooks/forui_hooks.dart';\n\nclass Example extends HookWidget {\n  @override\n  Widget build(BuildContext context) {\n    final controller = useFAccordionController();\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        FAccordion(\n          controller: controller,\n          items: [\n            FAccordionItem(\n              title: const Text('Is it accessible?'),\n              child: const Text('Yes. It adheres to the WAI-ARIA design pattern.'),\n            ),\n            FAccordionItem(\n              initiallyExpanded: true,\n              title: const Text('Is it Styled?'),\n              child: const Text(\"Yes. It comes with default styles that matches the other components' aesthetics\"),\n            ),\n            FAccordionItem(\n              title: const Text('Is it Animated?'),\n              child: const Text('Yes. It is animated by default, but you can disable it if you prefer'),\n            ),\n          ],\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enabled Text Field in Flutter\nDESCRIPTION: Demonstrates the standard enabled state of a text field with basic properties like controller, label, hint, and description.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/text-field/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFTextField(\n  controller: _controller, // TextEditingController\n  label: const Text('Username'),\n  hint: 'JaneDoe',\n  description: const Text('Please enter your username.'),\n  maxLines: 1,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Basic Overview in Flutter\nDESCRIPTION: This snippet shows a basic implementation of the FBadge component in a Row layout with two badge variants: a default badge displaying 'New' and a secondary style badge displaying '3'.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/badge/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    FBadge(child: const Text('New')),\n    const SizedBox(width: 8),\n    FBadge(\n      child: const Text('3'),\n      style: FBadgeStyle.secondary,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FTappable Widget with Full Options in Dart\nDESCRIPTION: This snippet shows the FTappable constructor with all available options, including style, semantics, focus handling, and custom durations for hover effects.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/tappable/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst FTappable(\n  style: FTappableStyle(),\n  semanticsLabel: 'Label',\n  semanticSelected: false,\n  excludeSemantics: false,\n  this.autofocus: false,\n  focusNode: FocusNode(),\n  onFocusChange: (focused) {},\n  touchHoverEnterDuration: const Duration(milliseconds: 200),\n  touchHoverExitDuration: Duration.zero,\n  behavior: HitTestBehavior.translucent,\n  onPress: () {},\n  onLongPress: () {},\n  builder: (context, state, child) => child!,\n  child: const Text('Tappable'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FTimePicker with Custom Intervals in Flutter\nDESCRIPTION: Shows how to create an FTimePicker with custom hour and minute intervals, allowing for more granular time selection.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-picker/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo extends StatefulWidget {\n  Foo();\n\n  @override\n  State<Foo> createState() => _FooState();\n}\n\nclass _FooState extends State<Foo> {\n  late final FTimePickerController _controller = FTimePickerController(initial: FTime.now());\n\n  @override\n  Widget build(BuildContext context) => FTimePicker(controller: _controller, hourInterval: 2, minuteInterval: 5);\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scrollable Select Menu Tile in Dart\nDESCRIPTION: This snippet demonstrates how to create a scrollable Select Menu Tile with a maximum height. It's useful for displaying a large number of options within a constrained space.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nenum Notification { all, direct, limitedTime, timeSensitive, selectedApps, nothing }\n\nclass _ScrollableSelectMenuTile extends StatefulWidget {\n  const _ScrollableSelectMenuTile({super.key});\n\n  @override\n  State<_ScrollableSelectMenuTile> createState() => _ScrollableSelectMenuTileState();\n}\n\nclass _ScrollableSelectMenuTileState extends State<_ScrollableSelectMenuTile> {\n  final controller = FSelectMenuTileController.radio(Notification.all);\n\n  @override\n  Widget build(BuildContext context) => FSelectMenuTile(\n    selectController: controller,\n    autoHide: true,\n    maxHeight: 200,\n    validator: (value) => value == null ? 'Select an item' : null,\n    prefixIcon: Icon(FIcons.bell),\n    title: const Text('Notifications'),\n    details: ListenableBuilder(\n      listenable: controller,\n      builder: (context, _) => Text(\n        switch (controller.value.firstOrNull) {\n          Notification.all => 'All',\n          Notification.direct => 'Direct Messages',\n          Notification.limitedTime => 'Limited Time',\n          Notification.SelectedApps => 'Selected Apps',\n          Notification.timeSensitive => 'Time Sensitive',\n          null || Notification.nothing => 'None',\n        },\n      ),\n    ),\n    menu: [\n      FSelectTile(title: const Text('All'), value: Notification.all),\n      FSelectTile(title: const Text('Direct Messages'), value: Notification.direct),\n      FSelectTile(title: const Text('Limited Time'), value: Notification.limitedTime),\n      FSelectTile(title: const Text('Selected Apps'), value: Notification.SelectedApps),\n      FSelectTile(title: const Text('Time Sensitive'), value: Notification.timeSensitive),\n      FSelectTile(title: const Text('None'), value: Notification.nothing),\n    ],\n  );\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ForUI Development Server with pnpm\nDESCRIPTION: Command to start the development server for the ForUI project using pnpm, which allows for local testing and development.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Overriding Individual Widget Styles in Forui\nDESCRIPTION: Demonstrates how to override styles for a specific widget instance using the copyWith method. This example shows customizing the FCard widget's border radius.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final theme = context.theme;\n\n  return FCard(\n    title: 'Notification',\n    subtitle: 'You have 3 new messages',\n    style: theme.cardStyle.copyWith(\n      decoration: theme.cardStyle.decoration.copyWith(\n        borderRadius: BorderRadius.zero, // Remove border radius.\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Forui Styles to Widgets in Dart\nDESCRIPTION: Shows how to apply Forui styles to a widget, including border, border radius, and colors. It demonstrates accessing and using the FStyle class properties.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final colors = context.theme.colors;\n  final style = context.theme.style;\n\n  return DecoratedBox(\n    decoration: BoxDecoration(\n      border: Border.all(\n        color: colors.border,\n        width: style.borderWidth,\n      ),\n      borderRadius: style.borderRadius,\n      color: colors.primary,\n    ),\n    child: const Placeholder(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Avatar Constructor Examples in Flutter\nDESCRIPTION: These examples demonstrate using the FAvatar.raw constructor for complete customization of avatar content. It shows three different implementations: with an icon, with text, and with a custom container widget.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/avatar/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Raw constructor with icon\nFAvatar.raw(\n  child: Icon(FIcons.baby, color: theme.colors.mutedForeground),\n);\n\n// Raw constructor with text\nFAvatar.raw(child: const Text('MN'));\n\n// Raw constructor with custom widget\nFAvatar.raw(\n  child: Container(\n    decoration: BoxDecoration(\n      color: theme.colors.primary,\n      shape: BoxShape.circle,\n    ),\n    child: const Icon(FIcons.star, color: Colors.white),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Picker Implementation in Flutter\nDESCRIPTION: Basic implementation of a picker widget with a single wheel showing month names. Demonstrates the fundamental structure of FPicker with a single FPickerWheel.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/picker/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst FPicker(\n  children: [\n    FPickerWheel(\n      children: [\n        Text('January'),\n        Text('February'),\n        Text('March'),\n        Text('April'),\n        Text('May'),\n        Text('June'),\n        Text('July'),\n        Text('August'),\n        Text('September'),\n        Text('October'),\n        Text('November'),\n        Text('December'),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Linear Progress Widget\nDESCRIPTION: Example showing how to configure a linear progress widget with custom style, semantics label, progress value, and animation duration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/progress/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFProgress(\n  style: FLinearProgressStyle(...),\n  semanticsLabel: 'Label',\n  value: 0.6,\n  duration: const Duration(milliseconds: 500),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FLocalizations Delegate in Flutter App\nDESCRIPTION: This snippet demonstrates how to add the FLocalizations.delegate to your Flutter application. It shows the manual approach of adding the delegate to the localizationsDelegates list and configuring supportedLocales in a MaterialApp.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/localization/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) => MaterialApp(\n  localizationsDelegates: [\n    FLocalizations.delegate, // Add this line\n  ],\n  supportedLocales: [\n    // Add locales supported by your application here.\n  ],\n  builder: (context, child) => FTheme(\n    data: FThemes.zinc.light,\n    child: child!,\n  ),\n  home: const FScaffold(...),\n);\n```\n\n----------------------------------------\n\nTITLE: Vertical Label Orientation in Dart\nDESCRIPTION: Creates a vertical FLabel with an email label, description, and a decorated box as a child. This example shows how to use the vertical orientation for the label component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/label/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFLabel(\n    axis: Axis.vertical,\n    label: const Text('Email'),\n    description: const Text('Enter your email address.'),\n    child: const DecoratedBox(\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.all(Radius.circular(5)),\n        color: Colors.grey,\n      ),\n      child: SizedBox(width: 250, height: 30),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Usage Example in Dart\nDESCRIPTION: Shows the usage of the FBreadcrumb component with multiple items including a collapsed menu item for handling hierarchical navigation with limited space.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/breadcrumb/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFBreadcrumb(\n  children: [\n    FBreadcrumbItem(onPress: () {}, child: const Text('Forui')),\n    FBreadcrumbItem.collapsed(\n      menu: [\n        FTileGroup(\n          children: [\n            FTile(\n              title: const Text('Documentation'),\n              onPress: () {},\n            ),\n            FTile(\n              title: const Text('Themes'),\n              onPress: () {},\n            ),\n          ],\n        ),\n      ],\n    ),\n    FBreadcrumbItem(onPress: () {}, child: const Text('Themes')),\n    FBreadcrumbItem(current: true, child: const Text('Widgets')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tap and Slide Thumb Interaction Mode for Slider in Flutter\nDESCRIPTION: Implements a slider that allows both tapping anywhere on the track and sliding the thumb to select a value. Uses the FSliderInteraction.tapAndSlideThumb mode.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(\n    allowedInteraction: FSliderInteraction.tapAndSlideThumb,\n    selection: FSliderSelection(max: 0.6),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Font Family in Forui Theme\nDESCRIPTION: Demonstrates how to set a custom font family and scale font sizes in the Forui theme. It uses the copyWith and scale methods to modify the typography settings.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) =>\n    FTheme(\n      data: FThemeData(\n        colors: FThemes.zinc.light.colors,\n        typography: FThemes.zinc.light.typography.copyWith(\n          defaultFontFamily: 'Roboto',\n        ).scale(sizeScalar: 0.8),\n      ),\n      child: const FScaffold(...),\n    );\n```\n\n----------------------------------------\n\nTITLE: Using Auto-generated Localization Delegates and Locales\nDESCRIPTION: This snippet shows how to use the auto-generated localizationsDelegates and supportedLocales lists provided by the FLocalizations class. This approach is useful when your application doesn't have other localization messages beyond what Forui provides.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/localization/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) => MaterialApp(\n  localizationsDelegates: FLocalizations.localizationsDelegates,\n  supportedLocales: FLocalizations.supportedLocales,\n  builder: (context, child) => FTheme(\n    data: FThemes.zinc.light,\n    child: child!,\n  ),\n  home: const FScaffold(...),\n);\n```\n\n----------------------------------------\n\nTITLE: Disabled State Label in Dart\nDESCRIPTION: Creates a horizontal FLabel in a disabled state with label, description, and a decorated box child. This example demonstrates how to create and style a disabled label.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/label/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFLabel(\n    axis: Axis.horizontal,\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    states: { WidgetState.disabled },\n    child: const DecoratedBox(\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.all(Radius.circular(5)),\n        color: Colors.grey,\n      ),\n      child: SizedBox(width: 16, height: 16),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Tile Groups with FTileGroup.merge in Dart\nDESCRIPTION: Demonstrates merging multiple tile groups into a single visual group. This example combines a regular FTileGroup with a FSelectTileGroup to create sections within a unified settings interface.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup.merge(\n  label: const Text('Settings'),\n  children: [\n    FTileGroup(\n      children: [\n        FTile(\n          prefixIcon: Icon(FIcons.user),\n          title: const Text('Personalization'),\n          suffixIcon: Icon(FIcons.chevronRight),\n          onPress: () {},\n        ),\n        FTile(\n          prefixIcon: Icon(FIcons.wifi),\n          title: const Text('WiFi'),\n          details: const Text('Forus Labs (5G)'),\n          suffixIcon: Icon(FIcons.chevronRight),\n          onPress: () {},\n        ),\n      ],\n    ),\n    FSelectTileGroup<String>(\n      controller: FRadioSelectGroupController(value: 'List')),\n      children: [\n        FSelectTile(\n          title: const Text('List View'),\n          value: 'List',\n        ),\n        FSelectTile(\n          title: const Text('Grid View'),\n          value: 'Grid',\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Thumb Interaction Mode for Slider in Flutter\nDESCRIPTION: Implements a slider that only allows sliding the thumb to select a value, restricting interaction to the thumb component. Uses FSliderInteraction.slideThumb mode.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(\n    allowedInteraction: FSliderInteraction.slideThumb,\n    selection: FSliderSelection(max: 0.6),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Destructive Style Button in Dart\nDESCRIPTION: Creates a destructive (warning/delete) styled button using the FButtonStyle.destructive property.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  child: const Text('Button'),\n  style: FButtonStyle.destructive,\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Dates Selection Calendar in Dart\nDESCRIPTION: Implementation of FCalendar configured for multiple date selection with initial selections. This example shows how to preselect multiple dates using a Set.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/calendar/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFCalendar(\n  controller: FCalendarController.dates(\n    initialSelections: {DateTime(2024, 7, 17), DateTime(2024, 7, 20)},\n  ),\n  start: DateTime(2000),\n  today: DateTime(2024, 7, 15),\n  end: DateTime(2030),\n);\n```\n\n----------------------------------------\n\nTITLE: FTile with Subtitle Implementation in Dart\nDESCRIPTION: Example showing an FTile with a subtitle parameter, providing additional descriptive information below the main title.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFTile(\n  prefixIcon: Icon(FIcons.bell),\n  title: const Text('Notifications'),\n  subtitle: const Text('Banners, Sounds, Badges'),\n  suffixIcon: Icon(FIcons.chevronRight),\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Persistent Sheets with DraggableScrollableSheet in ForUI (Dart)\nDESCRIPTION: This snippet shows how to create a draggable persistent sheet using DraggableScrollableSheet in ForUI. It includes a DraggableSheets widget that manages a single sheet controller and uses DraggableScrollableSheet for the sheet content. The implementation allows for a draggable bottom sheet with customizable content.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/persistent-sheet/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass DraggableSheets extends StatefulWidget {\n  @override\n  State<DraggableSheets> createState() => _State();\n}\n\nclass _State extends State<DraggableSheets> {\n  FSheetController? controller;\n\n  @override\n  Widget build(BuildContext context) => FScaffold(\n        content: FButton(\n          label: const Text('Click me'),\n          onPress: () {\n            if (controller != null) {\n              controller!.toggle();\n              return;\n            }\n\n            controller = showFPersistentSheet(\n              context: context,\n              side: Layout.btt,\n              mainAxisMaxRatio: null,\n              builder: (context, _) => DraggableScrollableSheet(\n                expand: false,\n                builder: (context, controller) => ScrollConfiguration(\n                  // This is required to enable dragging on desktop.\n                  // See https://github.com/flutter/flutter/issues/101903 for more information.\n                  behavior: ScrollConfiguration.of(context).copyWith(\n                    dragDevices: {\n                      PointerDeviceKind.touch,\n                      PointerDeviceKind.mouse,\n                      PointerDeviceKind.trackpad,\n                    },\n                  ),\n                  child: FTileGroup.builder(\n                    count: 25,\n                    controller: controller,\n                    tileBuilder: (context, index) => FTile(title: Text('Tile $index')),\n                  ),\n                ),\n              ),\n            );\n          },\n        ),\n      );\n\n  @override\n  void dispose() {\n    controller?.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sibling Pages in Pagination\nDESCRIPTION: Example showing how to configure the number of sibling pages displayed around the current page in the pagination component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/pagination/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFPagination(\n  controller: FPaginationController(\n    pages: 20,\n    initialPage: 9,\n    siblings: 2,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Error State Label in Dart\nDESCRIPTION: Creates a horizontal FLabel in an error state with label, description, error message, and a decorated box child. This example shows how to display validation errors with the label component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/label/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFLabel(\n    axis: Axis.horizontal,\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    error: const Text('Please accept the terms.'),\n    states: { WidgetState.error },\n    child: const DecoratedBox(\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.all(Radius.circular(5)),\n        color: Colors.grey,\n      ),\n      child: SizedBox(width: 16, height: 16),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Scrollable FTileGroup Example in Dart\nDESCRIPTION: Demonstrates a scrollable tile group with a maximum height constraint. When the content exceeds the specified height, the group becomes scrollable, allowing users to access all tiles.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup(\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  maxHeight: 200,\n  children: [\n    FTile(\n      prefixIcon: Icon(FIcons.user),\n      title: const Text('Personalization'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.mail),\n      title: const Text('Mail'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.wifi),\n      title: const Text('WiFi'),\n      details: const Text('Forus Labs (5G)'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.alarmClock),\n      title: const Text('Alarm Clock'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.qrCode),\n      title: const Text('QR code'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: FTile with Details Implementation in Dart\nDESCRIPTION: Example of an FTile with a details parameter that displays additional information, typically used for showing current status or selection.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFTile(\n  prefixIcon: Icon(FIcons.wifi),\n  title: const Text('WiFi'),\n  details: const Text('Forus Labs (5G)'),\n  suffixIcon: Icon(FIcons.chevronRight),\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Horizontal Alignment Configuration for FTooltip\nDESCRIPTION: An example demonstrating how to customize the horizontal alignment of a tooltip relative to its target widget. It uses tipAnchor and childAnchor properties to position the tooltip to the left of the button.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/tooltip/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFTooltip(\n  tipAnchor: Alignment.topLeft,\n  childAnchor: Alignment.topRight,\n  tipBuilder: (context, style, _) => const Text('Add to library'),\n  child: IntrinsicWidth(\n    child: FButton(\n      style: FButtonStyle.outline,\n      onPress: () {},\n      label: Text('Long press/Hover'),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Button with Loading Indicator in Dart\nDESCRIPTION: Creates a button with a circular progress indicator, typically used for loading states. The onPress is set to null to disable interaction during loading.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  prefix: const FProgress.circularIcon(),\n  child: const Text('Please wait'),\n  onPress: null,\n),\n```\n\n----------------------------------------\n\nTITLE: Custom Fallback Avatar with Icon in Flutter\nDESCRIPTION: This example shows how to customize the fallback content of an avatar with an icon instead of text. It uses the FIcons.user icon with a muted foreground color when the image fails to load.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/avatar/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFAvatar(\n  image: const NetworkImage('https://example.com/profile.jpg'),\n  fallback: Icon(FIcons.user, color: context.theme.colors.mutedForeground),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Breakpoints in Forui\nDESCRIPTION: Shows how to extend the FBreakpoints class to add custom breakpoint values that can be used alongside the predefined ones.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/responsive/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nextension CustomBreakpoints on FBreakpoints {\n  double get custom => 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic FBadge Constructor in Flutter\nDESCRIPTION: This snippet demonstrates the basic usage of the FBadge component with a text child displaying 'Badge'.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/badge/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFBadge(child: const Text('Badge'));\n```\n\n----------------------------------------\n\nTITLE: Picker with Separators in Flutter\nDESCRIPTION: Implementation of a time picker with separators between wheels, showing hours, minutes, and AM/PM selection.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/picker/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSizedBox(\n  width: 200,\n  child: FPicker(\n    children: [\n      FPickerWheel.builder(\n        builder: (context, index) => Text((index % 12).toString().padLeft(2, '0')),\n      ),\n      const Text(':'),\n      FPickerWheel.builder(\n        builder: (context, index) => Text((index % 60).toString().padLeft(2, '0')),\n      ),\n      const FPickerWheel(\n        children: [\n          Text('AM'),\n          Text('PM'),\n        ],\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Custom Divider in Dart\nDESCRIPTION: Demonstrates how to customize the divider between breadcrumb items by replacing the default divider with a rotated slash icon, enhancing the visual presentation of the navigation path.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/breadcrumb/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFBreadcrumb(\n  divider: Transform.rotate(\n    angle: -60,\n    child: Icon(\n      FIcons.slash,\n      size: 14,\n    ),\n  ),\n  children: [\n    FBreadcrumbItem(onPress: () {}, child: const Text('Forui')),\n    FBreadcrumbItem.collapsed(\n      menu: [\n        FTileGroup(\n          children: [\n            FTile(\n              title: const Text('Documentation'),\n              onPress: () {},\n            ),\n            FTile(\n              title: const Text('Themes'),\n              onPress: () {},\n            ),\n          ],\n        ),\n      ],\n    ),\n    FBreadcrumbItem(onPress: () {}, child: const Text('Themes')),\n    FBreadcrumbItem(current: true, child: const Text('Widgets')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Using Forui Icons in Dart\nDESCRIPTION: Dart code demonstrating how to import and use Forui icons in a Flutter widget. It shows creating basic and customized icon widgets using the FIcons class from forui_assets.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/icon-library/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\nimport 'package:forui/forui.dart';\n\n// alternatively; if you've only installed forui_assets.\nimport 'package:forui_assets/forui_assets.dart';\n\nfinal dogIconWidget = Icon(FIcons.dog);\n\n// White cat icon with a size of 24x24.\nfinal catIconWidget = Icon(\n  FIcons.cat,\n  size: 24,\n  color: Color(0xFFFFFFFF),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Breakpoints for Responsive Design\nDESCRIPTION: Example of using both custom and predefined breakpoints to create a responsive layout with an additional super-small screen size category.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/responsive/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final breakpoints = context.theme.breakpoints; // FBreakpoints\n  final width = MediaQuery.sizeOf(context).width; // double\n\n  return switch (width) {\n    _ when width < breakpoints.custom => SuperSmallWidget(),\n    _ when width < breakpoints.sm => MobileWidget(),\n    _ when width < breakpoints.lg => TabletWidget(),\n    _ => DesktopWidget(),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using FBadge.raw Constructor with Custom Builder in Flutter\nDESCRIPTION: This snippet shows how to use the FBadge.raw constructor with a builder function for more customized badge rendering.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/badge/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFBadge.raw(builder: (context, style) => Text('Badge'));\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy-Loading Scrollable Tile Group\nDESCRIPTION: Implementation of FSelectTileGroup with lazy loading capabilities using the builder constructor. It efficiently handles a large number of items (200) by generating tiles only when needed.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-tile-group/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFSelectTileGroup.builder(\n  selectController: FSelectTileGroupController(values: {1}),\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  maxHeight: 200,\n  count: 200,\n  tileBuilder: (context, index) => FTile(\n    title: Text('Tile $index'),\n    suffixIcon: Icon(FIcons.chevronRight),\n    onPress: () {},\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: FTileGroup Constructor with Full Parameters in Dart\nDESCRIPTION: The complete constructor for FTileGroup showing all available parameters. Includes scroll control options, maximum height, scroll physics, labels, and divider type specification.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup(\n  controller: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  label: const Text('Settings'),\n  description: const Text('Personalize your experience'),\n  semanticsLabel: 'Settings',\n  divider: FTileDivider.indented,\n  children: [],\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Widget Implementation\nDESCRIPTION: Basic implementation of the FProgress widget without any configuration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/progress/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst FProgress();\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Counters in Flutter\nDESCRIPTION: This snippet shows how to use badges as counters with numeric values displayed in primary and secondary styles.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/badge/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    FBadge(\n      child: const Text('3'),\n      style: FBadgeStyle.primary,\n    ),\n    const SizedBox(width: 8),\n    FBadge(\n      child: const Text('99+'),\n      style: FBadgeStyle.secondary,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Styles with State Management\nDESCRIPTION: Example of implementing button styles with different state combinations using FWidgetStateMap.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFButtonStyle _buttonStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n  required Color color,\n  required Color foregroundColor,\n}) => FButtonStyle(\n  decoration: FWidgetStateMap({\n    WidgetState.disabled & (WidgetState.hovered | WidgetState.pressed): BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.hover(colors.disable(color)),\n    ),\n    WidgetState.disabled: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.disable(color),\n    ),\n    WidgetState.hovered | WidgetState.pressed: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.hover(color),\n    ),\n    WidgetState.any: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: color,\n    ),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Forui Typography in Dart\nDESCRIPTION: Shows how to customize typography in Forui, including applying colors, font weights, and styles. It demonstrates the use of the copyWith method for text style customization.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final colors = context.theme.colors;\n  final typography = context.theme.typography;\n\n  return Text(\n    'Hello World!',\n    style: typography.xs.copyWith(\n      color: colors.primaryForeground,\n      fontWeight: FontWeight.bold,\n      fontStyle: FontStyle.italic,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Icon-Only Button in Dart\nDESCRIPTION: Creates a button that contains only an icon using the FButton.icon constructor.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFButton.icon(\n  child: Icon(FIcons.chevronRight),\n  onPress: () {},\n),\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Widget Documentation in MDX\nDESCRIPTION: Example of documenting a widget using MDX with interactive previews. Shows how to use the Tabs and Widget components to display both live preview and code examples with configurable parameters.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={['Preview', 'Code']}>\n  <Tabs.Tab>\n    <Widget \n      name='button'\n      variant='text'\n      query={{style: 'secondary'}}\n      height={500}\n    />\n  </Tabs.Tab>\n  <Tabs.Tab>\n    ```dart {3}\n    FButton(\n      label: const Text('Button'),\n      style: FButtonStyle.secondary,\n      onPress: () {},\n    );\n    ```\n  </Tabs.Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing 24-Hour Clock FTimePicker in Flutter\nDESCRIPTION: Demonstrates how to set up the FTimePicker with a 24-hour clock format by setting the hour24 parameter to true.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/time-picker/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo extends StatefulWidget {\n  Foo();\n\n  @override\n  State<Foo> createState() => _FooState();\n}\n\nclass _FooState extends State<Foo> {\n  late final FTimePickerController _controller = FTimePickerController(initial: FTime.now());\n\n  @override\n  Widget build(BuildContext context) => FTimePicker(controller: _controller, hour24: true);\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Button Implementation in Dart\nDESCRIPTION: Creates a button using the FButton.raw constructor, which provides more control over the button's appearance.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFButton.raw(\n  child: const Text('Button'),\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Forui Colors and Typography in Dart\nDESCRIPTION: Demonstrates how to use Forui colors and typography in a Flutter widget. It shows accessing theme data from the context and applying colors and text styles.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final colors = context.theme.colors;\n  final typography = context.theme.typography;\n\n  return ColoredBox(\n    color: colors.primary,\n    child: Text(\n      'Hello World!',\n      style: typography.xs.copyWith(\n          color: colors.primaryForeground\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FTileGroup with Full Divider Style in Dart\nDESCRIPTION: Shows how to customize the tile group with full-width dividers between tiles. The FTileDivider.full option creates dividers that extend across the entire width of the group.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup(\n  label: const Text('Settings'),\n  divider: FTileDivider.full,\n  children: [\n    FTile(\n      prefixIcon: Icon(FIcons.user),\n      title: const Text('Personalization'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.wifi),\n      title: const Text('WiFi'),\n      details: const Text('Forus Labs (5G)'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js and UI Components\nDESCRIPTION: Initial imports for Next.js Image component and custom Accordion UI components\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\n```\n\n----------------------------------------\n\nTITLE: Creating Static FTappable Widget in Dart\nDESCRIPTION: This snippet demonstrates the use of FTappable.static constructor, which creates a variant without animations. It's similar to using FTappableAnimations.none.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/foundation/tappable/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst FTappable.static(\n  style: FTappableStyle(),\n  semanticsLabel: 'Label',\n  semanticSelected: false,\n  excludeSemantics: false,\n  this.autofocus: false,\n  focusNode: FocusNode(),\n  onFocusChange: (focused) {},\n  touchHoverEnterDuration: const Duration(milliseconds: 200),\n  touchHoverExitDuration: Duration.zero,\n  behavior: HitTestBehavior.translucent,\n  onPress: () {},\n  onLongPress: () {},\n  builder: (context, state, child) => child!,\n  child: const Text('Tappable'),\n);\n```\n\n----------------------------------------\n\nTITLE: Secondary Style Button in Dart\nDESCRIPTION: Creates a button with the secondary style using the FButtonStyle.secondary property.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  child: const Text('Button'),\n  style: FButtonStyle.secondary,\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tap Interaction Mode for Slider in Flutter\nDESCRIPTION: Creates a slider that responds to taps anywhere on the track to select a value. Uses the FSliderInteraction.tap interaction mode with a maximum selection value of 0.6.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/slider/page.mdx#2025-04-19_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFSlider(\n  controller: FContinuousSliderController(\n    allowedInteraction: FSliderInteraction.tap,\n    selection: FSliderSelection(max: 0.6),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Standard FDialog Constructor\nDESCRIPTION: Demonstrates the standard constructor usage of FDialog with horizontal layout configuration.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/dialog/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFDialog(\n  direction: Axis.horizontal,\n  title: const Text('Are you absolutely sure?'),\n  body: const Text('This action cannot be undone. This will permanently delete your account and remove your data from our servers.'),\n  actions: [\n    FButton(style: FButtonStyle.outline, label: const Text('Cancel'), onPress: () => Navigator.of(context).pop()),\n    FButton(label: const Text('Continue'), onPress: () => Navigator.of(context).pop()),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Forui App Structure\nDESCRIPTION: Command to generate a basic Forui application structure in an existing Flutter project.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui init\n```\n\n----------------------------------------\n\nTITLE: FTileGroup.merge Constructor for Combining Groups in Dart\nDESCRIPTION: The merge constructor for FTileGroup that allows combining multiple tile groups into a single visual group. Useful for creating sections within a larger group structure.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup.merge(\ncontroller: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  label: const Text('Settings'),\n  semanticsLabel: 'Settings',\n  divider: FTileDivider.indented,\n  children: [],\n);\n```\n\n----------------------------------------\n\nTITLE: Proper Controller Disposal in dispose Method - Dart\nDESCRIPTION: Demonstrates the correct implementation of the dispose method for stateful widgets with controllers. Only disposes the controller if it was created internally rather than passed in from outside.\nSOURCE: https://github.com/forus-labs/forui/blob/main/KNOWLEDGE_BASE.md#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nif (widget.controller == null) {\n  _controller.dispose();\n} else {\n  // TODO: remove listeners\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Usage with Minimum and Maximum Expanded Items in Dart\nDESCRIPTION: This snippet shows the basic usage of the FAccordion widget with a controller that sets a minimum of 1 and a maximum of 2 expanded items. It includes a single accordion item as an example.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/data/accordion/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFAccordion(\n  controller: FAccordionController(min: 1, max: 2), // or FAccordionController.radio()\n  children: [\n    FAccordionItem(\n      title: const Text('Is it accessible?'),\n      child: const Text('Yes. It follows WAI-ARIA design patterns.'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Ghost Style Button in Dart\nDESCRIPTION: Creates a ghost style button using the FButtonStyle.ghost property, offering a minimal visual appearance.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/button/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFButton(\n  child: const Text('Button'),\n  style: FButtonStyle.ghost,\n  onPress: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Forui Project\nDESCRIPTION: Command to create forui.yaml and main.dart files in the project directory. Includes options for help and force overwriting existing files.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui init\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui init\n-h, --help     Print this usage information.\n-f, --force    Overwrite existing files if they exist.\n```\n\n----------------------------------------\n\nTITLE: Calendar-Only Date Field Example\nDESCRIPTION: Basic example implementation of the calendar-focused date field with label and description.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/date-field/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst FDateField.calendar(\n  label: Text('Appointment Date'),\n  description: Text('Select a date for your appointment'),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding FSelect Widget and Controller in Dart\nDESCRIPTION: Introduces the new FSelect widget for displaying a searchable list of options, along with its associated controller.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Add `FSelect`.\n* Add `FSelectController`.\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Handles to ForUI Select with Flutter\nDESCRIPTION: Shows how to enable scroll handles for the dropdown content in an FSelect component. The contentScrollHandles property adds scroll handles to simplify navigation when there are many items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/select/page.mdx#2025-04-19_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass ScrollHandlesSelectPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) => FSelect<String>(\n    hint: 'Select a fruit',\n    contentScrollHandles: true,\n    children: [for (final fruit in fruits) FSelectItem.text(fruit)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Themes\nDESCRIPTION: Command to generate a theme in the project, defaulting to lib/theme/theme.dart. Includes options for help, force overwrite, and custom output location.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui theme create [theme]\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui theme create [theme]\n-h, --help      Print this usage information.\n-f, --force     Overwrite existing files if they exist.\n-o, --output    The output directory or file, relative to the project directory.\n                (defaults to \"lib/theme/theme.dart\")\n```\n\n----------------------------------------\n\nTITLE: Untappable FTile Implementation in Dart\nDESCRIPTION: Example of an FTile without tap functionality by omitting the onPress callback, creating a non-interactive informational tile.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFTile(\n  prefixIcon: Icon(FIcons.user),\n  title: const Text('Personalization'),\n  suffixIcon: Icon(FIcons.chevronRight),\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing FSelectGroupController with FMultiValueNotifier in Dart\nDESCRIPTION: Introduces FMultiValueNotifier to replace FSelectGroupController, allowing usage across non-select group widgets, and adds new callback options.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* Add `FMultiValueNotifier`.\n* Add `FSelectTileGroupController` typedef.\n* Add `FSelectMenuTileController` typedef.\n* Add `FSelectGroup.onChange`.\n* Add `FSelectGroup.onSelect`.\n* Add `FSelectTileGroup.onChange`.\n* Add `FSelectTileGroup.onSelect`.\n* Add `FSelectMenuTile.onChange`.\n* Add `FSelectMenuTile.onSelect`.\n* **Breaking** Replace `FSelectGroupController` with a typedef of `FMultiValueNotifier`.\n* **Breaking** Remove `FMultiSelectGroupController` - use `FSelectGroupController(...)` instead.\n* **Breaking** Remove `FRadioSelectGroupController` - use `FSelectGroupController.radio(...)` instead.\n* **Breaking** Rename `FSelectTileGroup.groupController` to `FSelectTileGroup.selectController`.\n* **Breaking** Rename `FSelectMenuTile.groupController` to `FSelectMenuTile.selectController`.\n* **Breaking** Rename `FSelectMenuTile.menuTileBuilder` to `FSelectMenuTile.menuBuilder`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled FCheckbox in Flutter\nDESCRIPTION: An example showing how to create a disabled checkbox that cannot be interacted with. This is useful for displaying read-only checkbox states in a form or UI.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/checkbox/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Page extends StatefulWidget {\n  const Page({super.key});\n\n  @override\n  State<Page> createState() => PageState();\n}\n\nclass PageState extends State<Page> {\n  bool state =  true;\n\n  @override\n  Widget build(BuildContext context) => FCheckbox(\n    label: const Text('Accept terms and conditions'),\n    description: const Text('You agree to our terms and conditions.'),\n    semanticsLabel: 'Accept terms and conditions',\n    value: state,\n    onChange: (value) => setState(() => state = value),\n    enabled: false,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conservative Configuration Knob Exposure Pattern in Dart\nDESCRIPTION: Example of how to handle configuration options in widgets, favoring private fields until there's sufficient demand for customization to avoid breaking changes later.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo extends StatelessWidget {\n  final int _someKnobWeDontKnowIfUsefulToUsers = 42;\n  \n  const Foo() {}\n  \n  @override\n  void build(BuildContext context) {\n    return Placeholder();\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo extends StatelessWidget {\n  final int someKnobWeDontKnowIfUsefulToUsers = 42;\n  \n  const Foo(this.someKnobWeDontKnowIfUsefulToUsers) {}\n  \n  @override\n  void build(BuildContext context) {\n    return Placeholder();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Styles\nDESCRIPTION: Command to list all available styles in the project. Includes help option.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui style ls\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui style ls\n-h, --help    Print this usage information.\n```\n\n----------------------------------------\n\nTITLE: Disabled FTile Implementation in Dart\nDESCRIPTION: Creating a disabled FTile by setting the enabled parameter to false, which visually indicates the tile cannot be interacted with.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFTile(\n  enabled: false,\n  prefixIcon: Icon(FIcons.user),\n  title: const Text('Personalization'),\n  suffixIcon: Icon(FIcons.chevronRight),\n  onPress: () { },\n);\n```\n\n----------------------------------------\n\nTITLE: Raw Dialog Constructor\nDESCRIPTION: Demonstrates the raw constructor usage of FDialog for custom content.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/overlay/dialog/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFDialog.raw(\n  child: const Placeholder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FSelectMenuTile with Various Options in Dart\nDESCRIPTION: This code snippet shows the FSelectMenuTile widget with a wide range of configuration options, including menu anchoring, scrolling behavior, and custom builders for error and detail displays.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/select-menu-tile/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFSelectMenuTile<Value>(\n  selectController: FSelectMenuTileController(), // or FSelectMenuTileController.radio()\n  menuAnchor: Alignment.bottomLeft,\n  tileAnchor: Alignment.bottomLeft,\n  shift: FPortalFollowerShift.flip,\n  hideOnTapOutside: FHidePopoverRegion.excludeTarget,\n  directionPadding: true,\n  autoHide: false,\n  scrollController: ScrollController(),\n  cacheExtent: 100,\n  maxHeight: 200,\n  dragStartBehavior: DragStartBehavior.start,\n  physics: const ClampingScrollPhysics(),\n  divider: FTileDivider.indented,\n  label: const Text('Sidebar'),\n  description: const Text('Select the items you want to display in the sidebar.'),\n  errorBuilder: (context, error) => Text(error),\n  prefixIcon: Icon(FIcons.bell),\n  title: Text('Notifications'),\n  subtitle: Text('subtitle'),\n  details: Text('All'),\n  suffixIcon: Icon(FIcons.chevronsUpDown),\n  onChange: (all) => print(all),\n  onSelect: (selection) => print(selection),\n  menu: [\n    FSelectTile(\n      title: const Text('1'),\n      value: Value.something,\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Forui Hooks Dependencies in Flutter\nDESCRIPTION: Command to add flutter_hooks and forui_hooks packages to a Flutter project using pub.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/hooks/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add flutter_hooks\nflutter pub add forui_hooks\n```\n\n----------------------------------------\n\nTITLE: Installing Forui Package with Flutter\nDESCRIPTION: Command to add the Forui package to a Flutter project using pub package manager.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add forui\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Data with Button Styles\nDESCRIPTION: Example of a theme configuration file including button styles and color schemes.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'button_styles.dart';\n\nFThemeData get zincLight {\n  const colors = FColors(\n    brightness: Brightness.light,\n    background: Color(0xFFFFFFFF),\n    foreground: Color(0xFF09090B),\n    ...\n  );\n\n  final typography = _typography(colors: colors);\n  final style = _style(colors: colors, typography: typography);\n\n  return FThemeData(\n    colors: colors,\n    typography: typography,\n    style: style,\n    buttonStyles: buttonStyles(colors: colors, typography, typography, style: style),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FTileGroup with No Dividers in Dart\nDESCRIPTION: Demonstrates how to remove dividers between tiles in a group. Using FTileDivider.none creates a continuous appearance without visual separations between individual tiles.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/tile/tile-group/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFTileGroup(\n  label: const Text('Settings'),\n  divider: FTileDivider.none,\n  children: [\n    FTile(\n      prefixIcon: Icon(FIcons.user),\n      title: const Text('Personalization'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n    FTile(\n      prefixIcon: Icon(FIcons.wifi),\n      title: const Text('WiFi'),\n      details: const Text('Forus Labs (5G)'),\n      suffixIcon: Icon(FIcons.chevronRight),\n      onPress: () {},\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Button Sample Widget in Flutter\nDESCRIPTION: Implementation of a sample button widget page using auto_route for navigation. Extends Sample class to provide theme-aware widget previews with configurable parameters through URL query parameters.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nimport 'package:auto_route/auto_route.dart';\nimport 'package:forui/forui.dart';\nimport 'package:forui/src/widgets/button/button.dart';\n\nimport 'package:forui_samples/sample.dart';\n\nfinal variants = {\n  for (final value in Variant.values) value.name: value,\n};\n\n@RoutePage()\nclass ButtonTextPage extends Sample { \n  final Variant variant;\n  final String label;\n\n  ButtonTextPage({\n    @queryParam super.theme,\n    @queryParam String style = 'primary',\n    @queryParam this.label = 'Button',\n  }) : variant = variants[style] ?? Variant.primary;\n\n  @override\n  Widget sample(BuildContext context) => IntrinsicWidth(\n        child: FButton(\n          label: Text(label),\n          style: variant,\n          onPress: () {},\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm for ForUI Project\nDESCRIPTION: Command to install all project dependencies using pnpm package manager, which is required before running the project.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Code Snippets\nDESCRIPTION: Command to generate code snippets in the project, defaulting to the lib directory. Includes options for help, force overwrite, and custom output location.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui snippet create [snippets]\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui snippet create [snippets]\n-h, --help      Print this usage information.\n-f, --force     Overwrite existing files if they exist.\n-o, --output    The output directory or file, relative to the project directory.\n                (defaults to \"lib\")\n```\n\n----------------------------------------\n\nTITLE: Listing Available Themes\nDESCRIPTION: Command to list all available themes in the project. Includes help option.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui theme ls\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui theme ls\n-h, --help    Print this usage information.\n```\n\n----------------------------------------\n\nTITLE: Basic Vertical Divider Implementation\nDESCRIPTION: A simple example of using the FDivider component with a vertical orientation. The axis parameter is set to Axis.vertical to create a vertical divider for separating content horizontally.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/layout/divider/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst FDivider(axis : Axis.vertical);\n```\n\n----------------------------------------\n\nTITLE: Generating Theme Files Using Forui CLI\nDESCRIPTION: CLI commands for generating theme-related files in a Forui project.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui init\ndart run forui theme create zinc\ndart run forui style create button\n```\n\n----------------------------------------\n\nTITLE: Configuring Golden Test Threshold in Flutter\nDESCRIPTION: Example of how to configure the threshold for golden tests in Forui. This allows adjusting the tolerance for pixel differences between test runs due to platform-specific rendering variations.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport '../../flutter_test_config.dart'; // Adjust path based on the location of the `test/flutter_test_config.dart`. \n\nconst _kGoldenTestsThreshold = 7 / 100; // Adjust the threshold as necessary, i.e. 7%.\n\nFuture<void> testExecutable(FutureOr<void> Function() testMain) async {\n  await configureGoldenTests(_kGoldenTestsThreshold);\n  await testMain();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Circular Icon Progress Example\nDESCRIPTION: Simple implementation of a circular progress indicator with icon.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/feedback/progress/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst FProgress.circularIcon();\n```\n\n----------------------------------------\n\nTITLE: Implementing Forui Hooks in Flutter Widget\nDESCRIPTION: Example implementation of a Flutter HookWidget using Forui hooks to create an accordion component. Demonstrates proper import usage, hook initialization, and accordion configuration with multiple items.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui_hooks/README.md#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\nimport 'package:flutter_hooks/flutter_hooks.dart';\n\nimport 'package:forui/forui.dart';\nimport 'package:forui_hooks/forui_hooks.dart';\n\nclass Example extends HookWidget {\n  @override\n  Widget build(BuildContext context) {\n    final controller = useFAccordionController();\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        FAccordion(\n          controller: controller,\n          items: [\n            FAccordionItem(\n              title: const Text('Is it accessible?'),\n              child: const Text('Yes. It adheres to the WAI-ARIA design pattern.'),\n            ),\n            FAccordionItem(\n              initiallyExpanded: true,\n              title: const Text('Is it Styled?'),\n              child: const Text(\"Yes. It comes with default styles that matches the other components' aesthetics\"),\n            ),\n            FAccordionItem(\n              title: const Text('Is it Animated?'),\n              child: const Text('Yes. It is animated by default, but you can disable it if you prefer'),\n            ),\n          ],\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Callback Naming Convention in Dart\nDESCRIPTION: Example of preferred present tense naming for callbacks in Forui, avoiding past tense for consistency.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal VoidCallback onPress;\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal VoidCallback onPressed;\n```\n\n----------------------------------------\n\nTITLE: Installing Forui Assets via Flutter CLI\nDESCRIPTION: Command to add the Forui Assets package to a Flutter project using the Flutter CLI. This step is unnecessary if the forui package is already installed.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/icon-library/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add forui_assets\n```\n\n----------------------------------------\n\nTITLE: Manipulating FWidgetStateMap Properties in Forui\nDESCRIPTION: Shows how to override FWidgetStateMap properties for different widget states. It demonstrates using replaceAllWhere, replaceFirstWhere, and replaceLastWhere methods to customize button styles.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  final style = context.theme.buttonStyles.primary;\n\n  return Column(\n    children: [\n      FButton(\n        style: style.copyWith(\n          // Override the decoration for the constraints that are hovered.\n          decoration: style.decoration.replaceAllWhere({WidgetState.hovered}, BoxDecoration()),\n        ),\n        onPress: () {},\n        child: const Text('Button'),\n      ),\n      FButton(\n        style: style.copyWith(\n          // Override the decoration for the first constraint that is hovered.\n          decoration: style.decoration.replaceFirstWhere({WidgetState.hovered}, BoxDecoration()),\n        ),\n        onPress: () {},\n        child: const Text('Button'),\n      ),\n      FButton(\n        style: style.copyWith(\n          // Override the decoration for the last constraint that is hovered.\n          decoration: style.decoration.replaceLastWhere({WidgetState.hovered}, BoxDecoration()),\n        ),\n        onPress: () {},\n        child: const Text('Button'),\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FProgress Widget in Dart\nDESCRIPTION: Enhances FProgress to support indeterminate progress and introduces changes to progress styles.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Add `FProgress.circularIcon`.\n* **Breaking** Change `FProgressStyle` to `FLinearProgressStyle`.\n* **Breaking** Remove `FButtonSpinner` - use `FProgress.circularIcon(...)` instead.\n```\n\n----------------------------------------\n\nTITLE: Hiding Edge Navigation Buttons in Pagination\nDESCRIPTION: Example demonstrating how to hide the first and last page navigation buttons in the pagination component.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/navigation/pagination/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFPagination(\n  controller: FPaginationController(\n    pages: 8,\n    showEdges: false,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Flutter Localizations\nDESCRIPTION: Command for generating Flutter localization files using gen-l10n tool.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflutter gen-l10n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Forui Theme Data Structure with Mermaid\nDESCRIPTION: A class diagram showing the relationships between FThemeData, FColors, FTypography, FStyle, and FCardStyle classes in the Forui theme system.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/themes/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Forui Theme Data\n---\nclassDiagram\nclass FThemeData {\n    +FThemeData(...)\n}\n\nclass FColors {\n    +FColors(...)\n}\n\nclass FTypography {\n    +FTypography(...)\n    +FThemeData.inherit(colors)\n}\n\nclass FStyle {\n    +FStyle(...)\n}\n\nclass FCardStyle {\n    +FCardStyle(...)\n    +FCardStyle.inherit(colors, typography, style)\n}\nnote for FCardStyle \"Each Forui widget has a corresponding class.\\nWe use FCardStyle here as an example.\"\n\nFThemeData --> FColors\nFThemeData --> FTypography\nFThemeData --> FStyle\nFThemeData --> FCardStyle\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows project configuration with CMake\nDESCRIPTION: Complete CMake configuration file for building a Flutter application on Windows. It defines project settings, build configurations, compiler flags, and installation rules for bundling the application with its required assets and libraries.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/example/windows/CMakeLists.txt#2025-04-19_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Importing ForUI Radio Dependencies\nDESCRIPTION: Import statements for the required components including Callout, Tabs, Widget, and LinkBadge components.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/form/radio/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Callout, Tabs} from 'nextra/components';\nimport { Widget } from '@/components/demo/widget.tsx';\nimport LinkBadge from '@/components/ui/link-badge/link-badge.tsx';\nimport LinkBadgeGroup from '@/components/ui/link-badge/link-badge-group.tsx';\n```\n\n----------------------------------------\n\nTITLE: Setting up installation rules for Flutter Windows application\nDESCRIPTION: Installation rules for copying the Flutter executable, libraries, and assets to the correct locations. Ensures all required components are properly bundled for the Windows application to run.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/example/windows/CMakeLists.txt#2025-04-19_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running build_runner for Forui Project Setup\nDESCRIPTION: Command to generate necessary files for the Forui project using build_runner. This should be run before starting work on a PR to ensure all required generated files are available.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart run build_runner build --delete-conflicting-outputs\n```\n\n----------------------------------------\n\nTITLE: Updating FTappable Widget in Dart\nDESCRIPTION: Enhances FTappable to support animations by default and splits the hovered state into hovered and pressed states.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* Add `FTappableStyle`.\n* Add `FAccordionStyle.tappableStyle`.\n* Add `FBottomNavigationBarStyle.tappableStyle`.\n* Add `FBreadcrumbStyle.tappableStyle`.\n* Add `FButtonStyle.tappableStyle`.\n* Add `FCalendarDayPickerStyle.tappableStyle`.\n* Add `FCalendarEntryStyle.tappableStyle`.\n* Add `FCalendarHeaderStyle.tappableStyle`.\n* Add `FHeaderActionStyle.tappableStyle`.\n* Add `FLineCalendarStyle.tappableStyle`.\n* Add `FPaginationStyle.tappableStyle`.\n* Add `FTileStyle.tappableStyle`.\n\n* Add `FTappable.statesController`.\n* Add `FTappableStyle.cursor`.\n* **Breaking** Rename `FTappable` to `FTappable.static`.\n* **Breaking** Rename `FTappable.animated` to `FTappable`.\n* **Breaking** Split `FTappableData.hovered` into `FTappableData.hovered` and `FTappableData.pressed`.\n```\n\n----------------------------------------\n\nTITLE: Widget Style Implementation Pattern in Forui\nDESCRIPTION: Example of how to structure widget styles in Forui, including required mixins, constructors, and utility methods. Styles should include Diagnosticable and generated functions with standard patterns.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\npart 'foo.style.dart'; // --- (1)\n\nclass FooStyle with Diagnosticable, _$FooStyleFunctions { // ---- (2) (3)\n  \n  final Color color;\n  \n  FooStyle({required this.color});\n  \n  FooStyle.inherit({FFont font, FColorScheme scheme}): color = scheme.primary; // ---- (4)\n  \n  FooStyle copyWith({Color? color}) => FooStyle( // ---- (5)\n    color: color ?? this.color, \n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Blue Screen Golden Test Implementation in Dart\nDESCRIPTION: Example of a blue screen test for verifying that custom themes are applied correctly in Forui widgets. These tests use a special blue theme to ensure theme inheritance works properly.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('blue screen', (tester) async {\n  await tester.pumpWidget(\n    TestScaffold.blue( // (1) Always use the TestScaffold.blue(...) constructor.\n      child: FSelectGroup(\n        style: TestScaffold.blueScreen.selectGroupStyle, // (2) Always use the TestScaffold.blueScreen theme.\n        children: [\n          FSelectGroupItem.checkbox(value: 1),\n        ],\n      ),\n    ),\n  );\n\n  // (3) Always use expectBlueScreen.\n  await expectBlueScreen(find.byType(TestScaffold));\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Flutter Localizations Factory\nDESCRIPTION: Code modification to provide default localizations when none are found in the current context.\nSOURCE: https://github.com/forus-labs/forui/blob/main/CONTRIBUTING.md#2025-04-19_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nstatic FLocalizations of(BuildContext context) {\n  return Localizations.of<FLocalizations>(context, FLocalizations) ?? DefaultLocalizations();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining standard compilation settings for CMake targets\nDESCRIPTION: A function that applies standardized compiler settings to CMake targets. It configures C++17 support, warning levels, exception handling, and debug macros.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/example/windows/CMakeLists.txt#2025-04-19_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment in CMake\nDESCRIPTION: This CMake script configures the build environment for a Flutter Windows application. It sets up the Flutter library, defines wrapper libraries for plugins and the app, and establishes the build process dependencies.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/example/windows/flutter/CMakeLists.txt#2025-04-19_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Header with Logo Link\nDESCRIPTION: HTML markup for creating a centered header with a clickable logo image that links to the Forui website.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://forui.dev\">\n  <h1 align=\"center\">\n    <img width=\"400\" alt=\"Forui\" src=\"https://raw.githubusercontent.com/forus-labs/forui/main/docs/public/light_logo.png\">\n  </h1>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Status Badge Links\nDESCRIPTION: HTML markup for displaying project status badges with links to GitHub Actions, pub.dev, GitHub stars, commit activity and Discord.\nSOURCE: https://github.com/forus-labs/forui/blob/main/forui/README.md#2025-04-19_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://github.com/forus-labs/forui/actions/workflows/forui_build.yaml\"><img alt=\"GitHub Actions Workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/forus-labs/forui/forui_build.yaml?branch=main&style=flat&logo=github&label=main\"></a>\n  <a href=\"https://pub.dev/packages/forui\"><img alt=\"Pub Version\" src=\"https://img.shields.io/pub/v/forui?style=flat&logo=dart&label=pub.dev&color=00589B\"></a>\n  <a href=\"https://github.com/forus-labs/forui\"><img alt=\"GitHub Repo stars\" src=\"https://img.shields.io/github/stars/forus-labs/forui?style=flat&logo=github&color=8957e5&link=https%3A%2F%2Fgithub.com%2Fforus-labs%2Fforui\"></a>\n  <a href=\"https://github.com/forus-labs/forui\"><img alt=\"GitHub commit activity\" src=\"https://img.shields.io/github/commit-activity/m/forus-labs/forui?style=flat&logo=github\"></a>\n  <a href=\"https://discord.gg/jrw3qHksjE\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/1268920771062009886?logo=discord&logoColor=fff&label=discord&color=%237289da\"></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Metadata\nDESCRIPTION: Exports metadata configuration for the page title\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = {\n  title: 'Forui - Minimalistic Flutter UI Library',\n};\n```\n\n----------------------------------------\n\nTITLE: Quick Links Card Implementation\nDESCRIPTION: Imports and implementation of navigation cards using Nextra components and Lucide icons\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cards } from 'nextra/components';\nimport { Sparkles, MessagesSquare, FolderGit2 } from 'lucide-react';\n\n<Cards>\n  <Cards.Card icon={<Sparkles />} title=\"Get Started\" href=\"/docs\" />\n  <Cards.Card icon={<MessagesSquare />} title=\"Discussion\" href=\"https://github.com/forus-labs/forui/discussions\" />\n  <Cards.Card icon={<FolderGit2 />} title=\"Source\" href=\"https://github.com/forus-labs/forui\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Snippets\nDESCRIPTION: Command to list all available snippets in the project. Includes help option.\nSOURCE: https://github.com/forus-labs/forui/blob/main/docs/app/docs/cli/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart run forui snippet ls\n```\n\nLANGUAGE: shell\nCODE:\n```\nUsage: forui snippet ls\n-h, --help    Print this usage information.\n```"
  }
]