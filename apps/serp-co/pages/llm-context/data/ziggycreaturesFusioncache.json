[
  {
    "owner": "ziggycreatures",
    "repo": "fusioncache",
    "content": "TITLE: Basic Cache Usage\nDESCRIPTION: Basic example of using FusionCache to get or set a cached product with a 30-second duration\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\ncache.GetOrSet<Product>(\n\t$\"product:{id}\",\n\t_ => GetProductFromDb(id),\n\tTimeSpan.FromSeconds(30)\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Redis Distributed Cache with FusionCache\nDESCRIPTION: Demonstrates complete FusionCache configuration with Redis as a distributed cache and Newtonsoft.Json for serialization. This setup enables caching coordination across multiple application nodes.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30),\n\n        FactorySoftTimeout = TimeSpan.FromMilliseconds(100),\n        FactoryHardTimeout = TimeSpan.FromMilliseconds(1500)\n    })\n    // ADD JSON.NET BASED SERIALIZATION FOR FUSION CACHE\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    // ADD REDIS DISTRIBUTED CACHE SUPPORT\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Distributed Cache Options in C#\nDESCRIPTION: Configures FusionCache with circuit breaker and timeouts for distributed cache operations. This setup helps minimize impact on the service if the distributed cache is slow or down by setting appropriate timeouts and enabling background operations.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithOptions(options => {\n        // DISTRIBUTED CACHE CIRCUIT-BREAKER\n        options.DistributedCacheCircuitBreakerDuration = TimeSpan.FromSeconds(2);\n    })\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30),\n\n        FactorySoftTimeout = TimeSpan.FromMilliseconds(100),\n        FactoryHardTimeout = TimeSpan.FromMilliseconds(1500),\n\n        // DISTRIBUTED CACHE OPTIONS\n        DistributedCacheSoftTimeout = TimeSpan.FromSeconds(1),\n        DistributedCacheHardTimeout = TimeSpan.FromSeconds(2),\n        AllowBackgroundDistributedCacheOperations = true\n    })\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Setup\nDESCRIPTION: Adding FusionCache to the dependency injection container\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache();\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Caching with Dynamic Duration in FusionCache (C#)\nDESCRIPTION: This example shows how to implement adaptive caching by adjusting the cache duration based on the product's last update time. It uses the factory signature that accepts both a context object and cancellation token, allowing in-flight option modifications.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/AdaptiveCaching.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\n// WITH ADAPTIVE CACHING: THE DURATION DEPENDS ON THE OBJECT BEING CACHED\nvar product = cache.GetOrSet<Product>(\n    $\"product:{id}\",\n    (ctx, ct) => {\n        var product = GetProductFromDb(id, ct);\n\n        if (product is null) {\n            // CACHE null FOR 5 minutes\n            ctx.Options.Duration = TimeSpan.FromMinutes(5);\n        } else if (product.LastUpdatedAt > DateTime.UtcNow.AddDays(-1)) {\n            // CACHE PRODUCTS UPDATED IN THE LAST DAY FOR 1 MIN\n            ctx.Options.Duration = TimeSpan.FromMinutes(1);\n        } else if (product.LastUpdatedAt > DateTime.UtcNow.AddDays(-10)) {\n            // CACHE PRODUCTS UPDATED IN THE LAST 10 DAYS FOR 10 MIN\n            ctx.Options.Duration = TimeSpan.FromMinutes(10);\n        } else {\n            // CACHE ANY OLDER PRODUCT FOR 30 MIN\n            ctx.Options.Duration = TimeSpan.FromMinutes(30);\n        }\n\n        return product;\n    },\n    options => options.SetDuration(TimeSpan.FromMinutes(1)) // DEFAULT: 1 MIN\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product from Cache Using Factory in C#\nDESCRIPTION: Demonstrates how to use FusionCache's GetOrSet method with a factory function to retrieve a product from the cache or database. The example sets a cache duration of 1 minute for the product entry.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/AGentleIntroduction.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\nvar product = cache.GetOrSet<Product>(\n    $\"product:{id}\",\n    _ => GetProductFromDb(id), // THIS IS THE FACTORY\n    options => options.SetDuration(TimeSpan.FromMinutes(1))\n);\n```\n\n----------------------------------------\n\nTITLE: Using Fail-Safe with Result Pattern in FusionCache\nDESCRIPTION: This example shows how to use the fail-safe mechanism with a Result Pattern approach, avoiding exceptions by using the Fail method on the factory execution context. It sets a custom duration and enables fail-safe.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/FailSafe.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar productResult = await cache.GetOrSetAsync<Result<Product>>(\n\t$\"product:{id}\",\n\tasync (ctx, ct) =>\n\t{\n\t\tvar productResult = GetProductFromDb(id);\n\n\t\tif (productResult.IsSuccess == false)\n\t\t{\n\t\t\treturn ctx.Fail(productResult.Error);\n\t\t}\n\n\t\treturn productResult;\n\t},\n\topt => opt.SetDuration(duration).SetFailSafe(true)\n);\n```\n\n----------------------------------------\n\nTITLE: Combined Caching Strategy\nDESCRIPTION: Demonstrates a comprehensive caching strategy combining duration, fail-safe, factory timeouts, and eager refresh for optimal performance and reliability.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/EagerRefresh.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(10))\n        .SetFailSafe(true)\n        .SetFactoryTimeouts(TimeSpan.FromMilliseconds(100))\n        .SetEagerRefresh(0.9f)\n);\n```\n\n----------------------------------------\n\nTITLE: GetOrSet Pattern in FusionCache with C#\nDESCRIPTION: Multiple examples of using the GetOrSet method for cached values, including factory methods, explicit durations, and fail-safe configurations.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CoreMethods.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// THIS WILL GET FOO FROM THE CACHE OR, IF NOT THERE, SET THE VALUE 123 AND RETURN IT\nvar foo = cache.GetOrSet<int>(\"foo\", 123);\n\n// THIS WILL GET FOO FROM THE CACHE OR CALL THE FACTORY, THEN SET THE VALUE OBTAINED AND RETURN IT\nvar foo = cache.GetOrSet<int>(\n    \"foo\",\n    _ => GetFooFromDb()\n);\n\n// AS ABOVE, BUT WITH AN EXPLICIT DURATION OF 1 MIN\nvar foo = cache.GetOrSet<int>(\n    \"foo\",\n    _ => GetFooFromDb()\n    TimeSpan.FromMinutes(1)\n);\n\n// OR\nvar foo = cache.GetOrSet<int>(\n    \"foo\",\n    _ => GetFooFromDb()\n    options => options.SetDuration(TimeSpan.FromMinutes(1))\n);\n\n// AS ABOVE, BUT IF BAD STUFF HAPPENS, WILL USE EXPIRED (STALE) DATA INSTEAD OF THROWING AN EXCEPTION\n// ALSO:\n// 1) STALE DATA WILL BE USED FOR 30 SEC AT A TIME, FOR A MAXIMUM OF 1 HOUR\n// 2) IF THERE IS NO STALE DATA TO USE, AN EXCEPTION WILL BE THROWN NONETHELESS\nvar foo = cache.GetOrSet<int>(\n    \"foo\",\n    _ => GetFooFromDb()\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(1))\n        .SetFailSafe(true, TimeSpan.FromHours(1), TimeSpan.FromSeconds(30))\n);\n\n// AS ABOVE, BUT IF THERE IS NO STALE DATA, A DEFAULT VALUE WILL BE SET (FOR 30 SEC, ETC...) ADN RETURNED\nvar foo = cache.GetOrSet<int>(\n    \"foo\",\n    _ => GetFooFromDb()\n    42\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(1))\n        .SetFailSafe(true, TimeSpan.FromHours(1), TimeSpan.FromSeconds(30))\n);\n\n// OR, IF YOUR DefaultEntryOptions ALREADY HAVE FAIL-SAFE ENABLED AND THE\n// RIGHT OPTIONS, YOU CAN JUST DO THIS\nvar foo = cache.GetOrSet<int>(\"foo\", _ => GetFooFromDb(), 42);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-Based Conditional Logging in FusionCache (C#)\nDESCRIPTION: This snippet shows how to combine event handling with logging to implement conditional logging based on cache key patterns. It demonstrates subscribing to FailSafeActivate events and logging specific events with custom log levels based on key contents.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// DECLARE A METHOD/LOCAL FUNCTION TO HANDLE THE EVENTS\nvoid OnFailSafeActivate(object? sender, FusionCacheEntryEventArgs e)\n{\n    // CHECK FOR THE CACHE KEY\n    if(e.Key.Contains(\"foo\")) {\n        // LOG SOMETHING WITH WARNING LEVEL\n        logger.LogWarning(\"Fail-safe activation for {Key}\", e.Key);\n    }\n}\n\n// CREATE A LOGGER (AS SEEN ABOVE)\nvar logger = [...] ;\n\n// SETUP THE OPTIONS\nvar options = new FusionCacheOptions() {\n    // SET THE FAIL-SAFE ACTIVATION LOG LEVEL TO SOMETHING VERY LOW\n    FailSafeActivationLogLevel = LogLevel.Trace\n};\n\n// CREATE THE CACHE WITH THE SPECIFIED OPTIONS\nvar cache = new FusionCache(options);\n\n// LISTEN FOR FAIL-SAFE ACTIVATION EVENTS\ncache.Events.FailSafeActivate += OnFailSafeActivate;\n\n// DO YOUR THINGS...\n\n// FINALLY, REMEMBER TO UNSUBSCRIBE FROM THE EVENTS TO AVOID MEMORY LEAKS!\ncache.Events.FailSafeActivate -= OnFailSafeActivate;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail-Safe in FusionCache with C#\nDESCRIPTION: This snippet demonstrates how to enable and configure the fail-safe mechanism when setting a cache entry using FusionCache. It sets a 5-minute expiration, with a 2-hour fail-safe max duration and 1-minute throttle duration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/FailSafe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(5))\n        .SetFailSafe(true, TimeSpan.FromHours(2), TimeSpan.FromMinutes(1))\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FusionCache DI Registration\nDESCRIPTION: Simple registration of FusionCache in the dependency injection container.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache();\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Custom Logging Levels in .NET\nDESCRIPTION: This code demonstrates how to set up FusionCache with customized logging levels to reduce log volume while maintaining visibility into critical errors. It configures log levels for different error types along with cache timeout settings, serialization, and distributed cache integration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithOptions(options => {\n        options.DistributedCacheCircuitBreakerDuration = TimeSpan.FromSeconds(2);\n\n        // CUSTOM LOG LEVELS\n        options.FailSafeActivationLogLevel = LogLevel.Debug;\n        options.SerializationErrorsLogLevel = LogLevel.Warning;\n        options.DistributedCacheSyntheticTimeoutsLogLevel = LogLevel.Debug;\n        options.DistributedCacheErrorsLogLevel = LogLevel.Error;\n        options.FactorySyntheticTimeoutsLogLevel = LogLevel.Debug;\n        options.FactoryErrorsLogLevel = LogLevel.Error;\n    })\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30),\n\n        FactorySoftTimeout = TimeSpan.FromMilliseconds(100),\n        FactoryHardTimeout = TimeSpan.FromMilliseconds(1500),\n\n        DistributedCacheSoftTimeout = TimeSpan.FromSeconds(1),\n        DistributedCacheHardTimeout = TimeSpan.FromSeconds(2),\n        AllowBackgroundDistributedCacheOperations = true,\n\n        JitterMaxDuration = TimeSpan.FromSeconds(2)\n    })\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n    .WithBackplane(\n        new RedisBackplane(new RedisBackplaneOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Configuring Logging in FusionCache (C#)\nDESCRIPTION: A complete example showing how to set up logging configuration with customized log levels for FusionCache. It demonstrates setting a global minimum log level and specific levels for different types of cache events.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddLogging(b => b\n    // GLOBAL MIN LEVEL: Warning\n    .SetMinimumLevel(LogLevel.Warning)\n);\n\nservices.AddFusionCache()\n    .WithOptions(options =>\n    {\n        // FACTORY SYNTHETIC TIMEOUTS: Debug (SO THEY WILL BE IGNORED)\n        options.FactorySyntheticTimeoutsLogLevel = LogLevel.Debug;\n        // ANY OTHER FACTORY ERRORS: Error (SO THEY WILL -NOT- BE IGNORED)\n        options.FactoryErrorsLogLevel = LogLevel.Error;\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Dependency Injection\nDESCRIPTION: C# code example demonstrating how to set up FusionCache using dependency injection with Redis as the distributed cache and Newtonsoft Json.NET as the serializer.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CacheLevels.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Factory Pattern in C#\nDESCRIPTION: Demonstrates how to use FusionCache's GetOrSet method to implement a factory pattern for retrieving product data with cache stampede protection. The example shows setting a cache key with a factory function and 1-minute duration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CacheStampede.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\nvar product = cache.GetOrSet<Product>(\n    $\"product:{id}\",\n    _ => GetProductFromDb(id), // THIS IS THE FACTORY\n    options => options.SetDuration(TimeSpan.FromMinutes(1))\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Values in FusionCache with C#\nDESCRIPTION: Examples of using the Set method to store values in FusionCache with default options or specific duration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CoreMethods.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// DEFAULT OPTIONS\ncache.Set(\"foo\", 42);\n\n// SPECIFIC DURATION\ncache.Set(\"foo\", 42, TimeSpan.FromSeconds(30));\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Conditional GET with FusionCache in C#\nDESCRIPTION: Example showing how to implement conditional refresh using HTTP ETag headers with FusionCache. The code demonstrates checking for stale values, handling HTTP 304 Not Modified responses, and updating cache with new values and ETags.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/ConditionalRefresh.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar product = await cache.GetOrSetAsync<Product>(\n\t$\"product:{id}\",\n\tasync (ctx, ct) =>\n\t{\n\t\tusing var req = new HttpRequestMessage(HttpMethod.Get, $\"/api/product/{id}\");\n\n\t\tif (ctx.HasETag && ctx.HasStaleValue)\n\t\t{\n\t\t\t// ETAG + STALE VALUE -> TRY WITH A CONDITIONAL GET\n\t\t\treq.Headers.Add(\"If-None-Match\", ctx.ETag);\n\t\t}\n\n\t\tusing var resp = await client.SendAsync(req, ct);\n\n\t\tif (resp.StatusCode == HttpStatusCode.NotModified)\n\t\t{\n\t\t\t// NOT MODIFIED -> RETURN STALE VALUE\n\t\t\treturn ctx.NotModified();\n\t\t}\n\n\t\tresp.EnsureSuccessStatusCode();\n\n\t\t// NORMAL RESPONSE: SAVE ETAG + RETURN VALUE\n\t\treturn ctx.Modified(\n\t\t\tawait resp.Content.ReadFromJsonAsync<Product>(),\n\t\t\tresp.Headers.ETag?.ToString()\n\t\t);\n\t},\n\topt => opt.SetDuration(duration).SetFailSafe(true)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Soft Timeout with Fail-Safe in FusionCache\nDESCRIPTION: Enhanced FusionCache implementation that enables fail-safe mode and sets a 100ms soft timeout. This allows FusionCache to temporarily return an expired cached value if the factory takes too long, while completing the operation in the background.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Timeouts.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(2))\n        // ENABLE FAIL-SAFE\n        .SetFailSafe(true)\n        // SET A 100 MS SOFT TIMEOUT\n        .SetFactoryTimeouts(TimeSpan.FromMilliseconds(100))\n);\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache with Dependency Injection (v0.20.0+)\nDESCRIPTION: Demonstrates the new way to register FusionCache with dependency injection from version 0.20.0 onwards. The TryWithAutoSetup() method is added to maintain the previous auto-magic behavior.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Update_v0_20_0.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache().TryWithAutoSetup();\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Clone with FusionCache\nDESCRIPTION: This example demonstrates how to use FusionCache's Auto-Clone feature. It shows the setup with a serializer and illustrates how cloned objects remain isolated when modified while direct references affect the cached value.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/AutoClone.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// SETUP\n\nvar cache = new FusionCache(new FusionCacheOptions());\ncache.SetupSerializer(new FusionCacheSystemTextJsonSerializer());\n\n// USAGE\n\ncache.Set(\"foo\", new Person { Name: \"John\" });\n\n// RETURNS A CLONE OF THE CACHED INSTANCE\nvar person1 = cache.GetOrDefault<Person>(\"foo\", options => options.SetAutoClone(true));\nConsole.WriteLine($\"person1: {person1.Name}\");\nConsole.WriteLine();\n\n// RETURNS A CLONE OF THE CACHED INSTANCE: CHANGES APPLIED ONLY THE CLONE, CACHED INSTANCE REMAINS UNCHANGED\nvar person2 = cache.GetOrDefault<Person>(\"foo\", options => options.SetAutoClone(true));\nperson2.Name = \"Jane\";\nConsole.WriteLine($\"person1: {person1.Name}\");\nConsole.WriteLine($\"person2: {person2.Name}\");\nConsole.WriteLine();\n\n// RETURNS DIRECT REFERENCE TO THE CACHED INSTANCE: CHANGES APPLIED TO THE CACHED INSTANCE ITSELF\nvar person3 = cache.GetOrDefault<Person>(\"foo\");\nperson3.Name = \"Jim\";\nConsole.WriteLine($\"person1: {person1.Name}\");\nConsole.WriteLine($\"person2: {person2.Name}\");\nConsole.WriteLine($\"person3: {person3.Name}\");\nConsole.WriteLine();\n\n// RETURNS DIRECT REFERENCE TO THE CACHED INSTANCE: THE INSTANCE IS THE SAME AS BEFORE\n// CHANGES APPLIED TO BOTH person3 AND person4 AS THEY POINT TO THE SAME CACHED INSTANCE\nvar person4 = cache.GetOrDefault<Person>(\"foo\");\nperson4.Name = \"Joe\";\n\nConsole.WriteLine($\"person1: {person1.Name}\");\nConsole.WriteLine($\"person2: {person2.Name}\");\nConsole.WriteLine($\"person3: {person3.Name}\");\nConsole.WriteLine($\"person4: {person4.Name}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Registered Backplane in C#\nDESCRIPTION: This snippet demonstrates registering a Redis backplane separately and then instructing FusionCache to use the registered backplane component. This approach uses the DI container's registered components.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCacheStackExchangeRedisBackplane(opt =>\n{\n    opt.Configuration = \"CONNECTION_STRING_HERE\";\n});\n\nservices.AddFusionCache()\n    .WithRegisteredBackplane()\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Redis Backplane using Dependency Injection\nDESCRIPTION: C# code snippet showing how to configure FusionCache with Redis as both a distributed cache and backplane using the Dependency Injection approach. It uses the Builder pattern to set up the serializer, distributed cache, and backplane.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Backplane.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions { Configuration = \"CONNECTION STRING\" })\n    )\n    .WithBackplane(\n        new RedisBackplane(new RedisBackplaneOptions { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Global Default Options Configuration\nDESCRIPTION: Setting up global default options for all cache operations including fail-safe and timeouts\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar cache = new FusionCache(new FusionCacheOptions() {\n\tDefaultEntryOptions = new FusionCacheEntryOptions()\n\t\t.SetDuration(TimeSpan.FromMinutes(2))\n\t\t.SetPriority(CacheItemPriority.High)\n\t\t.SetFailSafe(true, TimeSpan.FromHours(2))\n\t\t.SetFactoryTimeouts(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(2))\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail-Safe with Fluent API in C#\nDESCRIPTION: Shows how to enable fail-safe caching per call using FusionCache's fluent API. This code configures fail-safe behavior with a 2-hour maximum duration and 30-second throttle duration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar product = _cache.GetOrSet<Product>(\n    $\"product:{id}\",\n    _ => GetProductFromDb(id),\n    options => options.SetFailSafe(true, TimeSpan.FromHours(2), TimeSpan.FromSeconds(30))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Backplane Notifications in FusionCache with C#\nDESCRIPTION: This code demonstrates how to configure FusionCache to skip automatic backplane notifications by default and selectively enable them only for specific operations where cache state has truly changed. This approach is useful when implementing a memory cache with backplane but without a distributed cache.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Backplane.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// INITIAL SETUP: SKIP AUTOMATIC NOTIFICATIONS\ncache.DefaultEntryOptions.SkipBackplaneNotifications = true;\n\n// [...]\n\n// LATER ON, SUPPOSE WE JUST SAVED THE PRODUCT IN THE DATABASE, SO WE NEED TO UPDATE THE CACHE\ncache.Set(\n    $\"product:{product.Id}\",\n    product,\n    options => options.SetDuration(TimeSpan.FromMinutes(5)).SetSkipBackplaneNotifications(false)\n);\n\n// LATER ON, SUPPOSE WE JUST REMOVED THE PRODUCT FROM THE DATABASE, SO WE NEED TO REMOVE IT FROM THE CACHE TOO\ncache.Remove(\n    $\"product:{product.Id}\",\n    options => options.SetSkipBackplaneNotifications(false)\n);\n```\n\n----------------------------------------\n\nTITLE: GetOrDefault Usage in FusionCache with C#\nDESCRIPTION: Examples of using GetOrDefault method to retrieve cached values or fallback to defaults without modifying the cache state.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CoreMethods.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// THIS WILL GET BACK 42\nfoo = cache.GetOrDefault(\"foo\", 42);\n\n// IF WE IMMEDIATELY CALL THIS, WE WILL GET BACK 21\nfoo = cache.GetOrDefault(\"foo\", 21);\n\n// THIS WILL GET BACK 0, WHICH IS THE DEFAULT VALUE FOR THE TYPE int\nfoo = cache.GetOrDefault<int>(\"foo\");\n\n// ALSO USEFUL FOR USER PREFERENCES: WE CAN USE A DEFAULT VALUE WITHOUT SETTING ONE\nvar enableUnicorns = cache.GetOrDefault<bool>(\"flags.unicorns\", false);\n\n// AND SINCE false IS THE DEFAULT VALUE FOR THE TYPE bool WE CAN SIMPLY DO THIS\nvar enableUnicorns = cache.GetOrDefault<bool>(\"flags.unicorns\");\n```\n\n----------------------------------------\n\nTITLE: Adding Factory Timeouts to FusionCache Configuration\nDESCRIPTION: Shows how to configure factory timeouts in FusionCache to handle latency spikes. This setup includes both soft timeouts (100ms) for operations with fallback values and hard timeouts (1.5s) as a safety mechanism.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30),\n\n        // FACTORY TIMEOUTS\n        FactorySoftTimeout = TimeSpan.FromMilliseconds(100),\n        FactoryHardTimeout = TimeSpan.FromMilliseconds(1500)\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache as a Keyed Service in C#\nDESCRIPTION: This snippet shows how to register a named FusionCache instance as a keyed service, making it available through both the IFusionCacheProvider and the keyed services mechanism in .NET 8.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache(\"MyCache\")\n    .AsKeyedServiceByCacheName();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Caches with Different Settings\nDESCRIPTION: Example of configuring the default cache and multiple named caches with different settings including expiration times, serializers, and distributed cache connections.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// DEFAULT CACHE\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(10);\n    })\n;\n\n// PRODUCTS CACHE\nservices.AddFusionCache(\"Products\")\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(20);\n    })\n    .WithSerializer(new FusionCacheSystemTextJsonSerializer())\n    .WithDistributedCache(new RedisCache(new RedisCacheOptions {\n        Configuration = \"PRODUCTS_CACHE_CONNECTION\"\n    }))\n;\n\n// CUSTOMERS CACHE\nservices.AddFusionCache(\"Customers\")\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(30);\n    })\n    .WithSerializer(new FusionCacheSystemTextJsonSerializer())\n    .WithDistributedCache(new RedisCache(new RedisCacheOptions {\n        Configuration = \"CUSTOMERS_CACHE_CONNECTION\"\n    }))\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with SqliteCache as Distributed Cache\nDESCRIPTION: This snippet demonstrates how to directly configure FusionCache with a SqliteCache implementation as the distributed cache. It requires the NeoSmart.Caching.Sqlite package and specifies a cache path for the SQLite database file.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DiskCache.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new SqliteCache(new SqliteCacheOptions { CachePath = \"CACHE PATH\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Caches with Shared Registered Components\nDESCRIPTION: Shows how to register common components once in the DI container and reuse them across multiple caches using WithRegistered methods. This approach simplifies configuration when caches share components.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// COMPONENTS\nservices.AddFusionCacheSystemTextJsonSerializer();\nservices.AddStackExchangeRedisCache(opt => opt.Configuration = \"REDIS_CONNECTION\");\nservices.AddFusionCacheStackExchangeRedisBackplane(opt => opt.Configuration = \"REDIS_CONNECTION\");\n\n// DEFAULT CACHE\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(10);\n    })\n;\n\n// PRODUCTS CACHE\nservices.AddFusionCache(\"Products\")\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(20);\n    })\n    .WithCacheKeyPrefix()\n    .WithRegisteredSerializer()\n    .WithRegisteredDistributedCache()\n    .WithRegisteredBackplane()\n;\n\n// CUSTOMERS CACHE\nservices.AddFusionCache(\"Customers\")\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(30);\n    })\n    .WithCacheKeyPrefix()\n    .WithRegisteredSerializer()\n    .WithRegisteredDistributedCache()\n    .WithRegisteredBackplane()\n;\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Refresh\nDESCRIPTION: Shows how to implement eager refresh with a 90% threshold to trigger background refresh before cache expiration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/EagerRefresh.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(10))\n        .SetFailSafe(true)\n        // EAGER REFRESH\n        .SetEagerRefresh(0.9f)\n);\n```\n\n----------------------------------------\n\nTITLE: Registering SqliteCache as IDistributedCache with FusionCache\nDESCRIPTION: This snippet shows how to register SqliteCache as the application's IDistributedCache implementation, then configuring FusionCache to use this registered instance. This approach allows for more flexibility if you need to switch cache implementations later.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DiskCache.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// REGISTER SQLITE AS THE IDistributedCache IMPL\nservices.AddSqliteCache(options => {\n    options.CachePath = \"CACHE PATH\";\n});\n\nservices.AddFusionCache()\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    // USE THE REGISTERED IDistributedCache IMPL\n    .WithRegisteredDistributedCache()\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Fail-Safe Options in FusionCache\nDESCRIPTION: Demonstrates how to register FusionCache with default fail-safe options using dependency injection. This configuration applies fail-safe settings to all cache operations by default.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        // FAIL-SAFE OPTIONS\n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30)\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Caching with Fixed Duration in FusionCache (C#)\nDESCRIPTION: This example demonstrates caching a product with a fixed duration of 1 minute, regardless of the product's properties. It uses the simpler factory signature that only accepts a cancellation token.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/AdaptiveCaching.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\n// WITHOUT ADAPTIVE CACHING: THE DURATION IS FIXED TO 1 MIN\nvar product = cache.GetOrSet<Product>(\n    $\"product:{id}\",\n    ct => GetProductFromDb(id, ct),\n    options => options.SetDuration(TimeSpan.FromMinutes(1)) // FIXED: 1 MIN\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Named Caches in Controller\nDESCRIPTION: Shows how to access multiple named caches simultaneously in a controller by using IFusionCacheProvider to retrieve different cache instances by name.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IFusionCache _productsCache;\n    private readonly IFusionCache _customersCache;\n\n    public MyController(IFusionCacheProvider cacheProvider)\n    {\n        _productsCache = cacheProvider.GetCache(\"Products\");\n        _customersCache = cacheProvider.GetCache(\"Customers\");\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for FusionCache with Dependency Injection\nDESCRIPTION: Example of setting up OpenTelemetry traces and metrics for FusionCache using dependency injection. This approach registers both tracing and metrics services with console exporters in the service collection.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/OpenTelemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOpenTelemetry()\n  // SETUP TRACES\n  .WithTracing(tracing => tracing\n    .AddFusionCacheInstrumentation()\n    .AddConsoleExporter()\n  )\n  // SETUP METRICS\n  .WithMetrics(metrics => metrics\n    .AddFusionCacheInstrumentation()\n    .AddConsoleExporter()\n  );\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring FusionCache with Redis\nDESCRIPTION: C# code example showing how to manually instantiate and configure FusionCache with Redis as a distributed cache and Newtonsoft Json.NET as the serializer.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CacheLevels.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// INSTANTIATE A REDIS DISTRIBUTED CACHE\nvar redis = new RedisCache(new RedisCacheOptions() { Configuration = \"CONNECTION STRING\" });\n\n// INSTANTIATE THE FUSION CACHE SERIALIZER\nvar serializer = new FusionCacheNewtonsoftJsonSerializer();\n\n// INSTANTIATE FUSION CACHE\nvar cache = new FusionCache(new FusionCacheOptions());\n\n// SETUP THE DISTRIBUTED 2ND LEVEL\ncache.SetupDistributedCache(redis, serializer);\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple FusionCache Plugins with Dependency Injection\nDESCRIPTION: Shows how to register multiple plugins with the DI container and configure FusionCache to use all of them.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IFusionCachePlugin, MyFirstPlugin>();\nservices.AddTransient<IFusionCachePlugin, MySecondPlugin>();\n\nservices.AddFusionCache()\n  .WithAllRegisteredPlugins()\n;\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Backplane for FusionCache in C#\nDESCRIPTION: Adds a Redis backplane to FusionCache configuration to synchronize cache data across nodes. The backplane ensures that when data changes in one node, all other nodes will receive eviction notifications to maintain cache consistency.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithOptions(options => {\n        options.DistributedCacheCircuitBreakerDuration = TimeSpan.FromSeconds(2);\n    })\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30),\n\n        FactorySoftTimeout = TimeSpan.FromMilliseconds(100),\n        FactoryHardTimeout = TimeSpan.FromMilliseconds(1500),\n\n        DistributedCacheSoftTimeout = TimeSpan.FromSeconds(1),\n        DistributedCacheHardTimeout = TimeSpan.FromSeconds(2),\n        AllowBackgroundDistributedCacheOperations = true,\n\n        JitterMaxDuration = TimeSpan.FromSeconds(2)\n    })\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n    // ADD THE FUSION CACHE BACKPLANE FOR REDIS\n    .WithBackplane(\n        new RedisBackplane(new RedisBackplaneOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Advanced Cache Usage with Options\nDESCRIPTION: Advanced example using FusionCache with multiple options including priority, fail-safe, and timeouts\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ncache.GetOrSet<Product>(\n\t$\"product:{id}\",\n\t_ => GetProductFromDb(id),\n\t// THIS IS WHERE THE MAGIC HAPPENS\n\toptions => options\n\t\t.SetDuration(TimeSpan.FromSeconds(30))\n\t\t.SetPriority(CacheItemPriority.High)\n\t\t.SetFailSafe(true, TimeSpan.FromHours(2))\n\t\t.SetFactoryTimeouts(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(2))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Entry Options in FusionCache\nDESCRIPTION: Shows how to set up default entry options when configuring a FusionCache instance. These options will be used as defaults for all cache operations when specific options aren't provided.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Options.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new FusionCacheOptions() {\n    DefaultEntryOptions = new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30)\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Redis Backplane Manually\nDESCRIPTION: C# code snippet demonstrating how to manually set up FusionCache with Redis as both a distributed cache and backplane. It includes instantiating FusionCache, configuring Redis, setting up the distributed cache, and configuring the backplane.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Backplane.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// INSTANTIATE FUSION CACHE\nvar cache = new FusionCache(new FusionCacheOptions());\n\n// INSTANTIATE A REDIS DISTRIBUTED CACHE (IDistributedCache)\nvar redis = new RedisCache(new RedisCacheOptions() {\n    Configuration = \"CONNECTION STRING\"\n});\n\n// INSTANTIATE THE FUSION CACHE SERIALIZER\nvar serializer = new FusionCacheNewtonsoftJsonSerializer();\n\n// SETUP THE DISTRIBUTED 2ND LEVEL\ncache.SetupDistributedCache(redis, serializer);\n\n// CREATE THE BACKPLANE\nvar backplane = new RedisBackplane(new RedisBackplaneOptions() {\n    Configuration = \"CONNECTION STRING\"\n});\n\n// SETUP THE BACKPLANE\ncache.SetupBackplane(backplane);\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache Plugins with Dependency Injection\nDESCRIPTION: Demonstrates how to register plugins using dependency injection by adding the plugin as a service and then configuring FusionCache to use all registered plugins.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IFusionCachePlugin, MyPlugin>();\n\nservices.AddFusionCache()\n  .WithAllRegisteredPlugins()\n;\n```\n\n----------------------------------------\n\nTITLE: Combined FusionCache Configuration\nDESCRIPTION: Example of combining multiple configuration options using the fluent interface.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithOptions(opt =>\n    {\n        opt.AutoRecoveryMaxItems = 123;\n    })\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(30);\n        opt.FactorySoftTimeout = TimeSpan.FromMilliseconds(100);\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry with FusionCache in .NET\nDESCRIPTION: Code example showing how to integrate OpenTelemetry with FusionCache to enable comprehensive observability through traces and metrics. This setup allows for monitoring cache performance and behavior in production environments through compatible tools like Jaeger or Prometheus.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOpenTelemetry()\n  // SETUP TRACES\n  .WithTracing(tracing => tracing\n    .AddFusionCacheInstrumentation()\n    .AddConsoleExporter() // OR ANY ANOTHER EXPORTER\n  )\n  // SETUP METRICS\n  .WithMetrics(metrics => metrics\n    .AddFusionCacheInstrumentation()\n    .AddConsoleExporter() // OR ANY ANOTHER EXPORTER\n  );\n```\n\n----------------------------------------\n\nTITLE: Using HybridCache in a Service via Dependency Injection\nDESCRIPTION: Demonstrates how to use Microsoft's HybridCache abstraction in a service class with dependency injection. The example shows the GetOrCreateAsync method for retrieving cached data with a factory method fallback.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/MicrosoftHybridCache.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomeService(HybridCache cache)\n{\n    private HybridCache _cache = cache;\n\n    public async Task<string> GetSomeInfoAsync(string name, int id, CancellationToken token = default)\n    {\n        return await _cache.GetOrCreateAsync(\n            $\"{name}-{id}\", // Unique key to the cache entry\n            async cancel => await GetDataFromTheSourceAsync(name, id, cancel),\n            cancellationToken: token\n        );\n    }\n\n    public async Task<string> GetDataFromTheSourceAsync(string name, int id, CancellationToken token)\n    {\n        string someInfo = $\"someinfo-{name}-{id}\";\n        return someInfo;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Builder Pattern (v0.20.0+)\nDESCRIPTION: Demonstrates how to configure FusionCache using the new builder pattern introduced in version 0.20.0. This example shows how to set up auto-magic behavior, configure options, and set default entry options.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Update_v0_20_0.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .TryWithAutoSetup()\n    .WithOptions(opt =>\n    {\n        opt.AutoRecoveryMaxItems = 123;\n    })\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(30);\n        opt.FactorySoftTimeout = TimeSpan.FromMilliseconds(100);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Backplane Factory in C#\nDESCRIPTION: This example shows how to add FusionCache to services using a factory function for the backplane. The factory allows dynamic configuration retrieval from the service provider.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithBackplane(serviceProvider => new RedisBackplane(new RedisBackplaneOptions\n    {\n        Configuration = serviceProvider.GetService<MyConfigStuff>().RedisConfig\n    }))\n;\n```\n\n----------------------------------------\n\nTITLE: Using Expire Method in FusionCache with C#\nDESCRIPTION: Example demonstrating how to expire a cache entry while still allowing it to be used as a fallback value with fail-safe enabled.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CoreMethods.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncache.Set(\"foo\", 42, opt => opt.SetDuration(TimeSpan.FromSeconds(10)).SetFailSafe(true));\n\ncache.Expire(\"foo\", opt => opt.SetFailSafe(true));\n\n// THIS WILL GET BACK 0, WHICH IS THE DEFAULT VALUE FOR THE TYPE int\nfoo = cache.GetOrDefault<int>(\"foo\");\n\n// THIS WILL GET BACK 42\nfoo = cache.GetOrDefault<int>(\"foo\", opt => opt.SetFailSafe(true));\n```\n\n----------------------------------------\n\nTITLE: Using Default Cache with IFusionCache in Controller\nDESCRIPTION: Example of using the default FusionCache instance in a controller by injecting IFusionCache directly. This demonstrates how to cache product data with a specific key pattern and expiration time.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IFusionCache _cache;\n\n    public MyController(IFusionCache cache)\n    {\n        _cache = cache;\n    }\n\n    [Route(\"product/{id:int}\")]\n    public IActionResult Product(int id)\n    {\n        var product = _cache.GetOrSet<Product>(\n            $\"product:{id}\",\n            _ => GetProductFromDb(id),\n            TimeSpan.FromSeconds(30)\n        );\n\n        return View(product);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Entries with Tags in C#\nDESCRIPTION: Shows how to associate multiple tags with cache entries when calling Set. This example demonstrates adding different tag combinations to three cache entries.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Tagging.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncache.Set<int>(\"foo\", 1, tags: [\"tag-1\", \"tag-2\"]);\ncache.Set<int>(\"bar\", 2, tags: [\"tag-2\", \"tag-3\"]);\ncache.GetOrSet<int>(\"baz\", _ => 3, tags: [\"tag-1\", \"tag-3\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Direct Backplane Instance in C#\nDESCRIPTION: This snippet demonstrates how to add a FusionCache instance to the service collection using a direct instance of RedisBackplane. It explicitly provides the backplane configuration with a connection string.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithBackplane(new RedisBackplane(new RedisBackplaneOptions\n    {\n        Configuration = \"CONNECTION_STRING_HERE\"\n    }))\n;\n```\n\n----------------------------------------\n\nTITLE: Simplified FusionCache Product Retrieval\nDESCRIPTION: Simplified controller action using FusionCache with default duration settings.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar product = _cache.GetOrSet<Product>(\n    $\"product:{id}\",\n    _ => GetProductFromDb(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels for Factory Calls in FusionCache (C#)\nDESCRIPTION: This snippet demonstrates how to configure specific log levels for different factory events in FusionCache. It shows how to set synthetic timeouts to Debug level to reduce noise while keeping other factory errors at a higher Error level.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\noptions.FactorySyntheticTimeoutsLogLevel = LogLevel.Debug;\noptions.FactoryErrorsLogLevel = LogLevel.Error;\n```\n\n----------------------------------------\n\nTITLE: FusionCache Product Retrieval Action\nDESCRIPTION: Controller action implementation using FusionCache with specified cache duration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet(\"product/{id}\")]\npublic ActionResult<Product> GetProduct(int id)\n{\n    var product = _cache.GetOrSet<Product>(\n        $\"product:{id}\",\n        _ => GetProductFromDb(id),\n        options => options.SetDuration(TimeSpan.FromMinutes(1))\n    );\n\n    if (product is null)\n        return NotFound();\n\n    return product;\n}\n```\n\n----------------------------------------\n\nTITLE: Caching with Factory Soft Timeout\nDESCRIPTION: Implements caching with a 100ms soft timeout to prevent blocking during refresh operations while maintaining fail-safe functionality.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/EagerRefresh.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(10))\n        .SetFailSafe(true)\n        // SOFT TIMEOUT\n        .SetFactoryTimeouts(TimeSpan.FromMilliseconds(100))\n);\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache as a Keyed HybridCache Service\nDESCRIPTION: Demonstrates how to register FusionCache as a keyed HybridCache service. This enables support for multiple named caches through Microsoft's Keyed Services feature.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/MicrosoftHybridCache.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .AsKeyedHybridCache(\"Foo\");\n```\n\n----------------------------------------\n\nTITLE: Advanced DI Configuration\nDESCRIPTION: Configuring FusionCache with default entry options using dependency injection\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n\t.WithDefaultEntryOptions(new FusionCacheEntryOptions {\n\t\tDuration = TimeSpan.FromMinutes(2),\n\t\tPriority = CacheItemPriority.Low\n\t})\n;\n```\n\n----------------------------------------\n\nTITLE: Resolving FusionCache Using FromKeyedServices in C#\nDESCRIPTION: This snippet shows how to resolve a named FusionCache instance using the FromKeyedServices attribute in a minimal API endpoint. This provides a declarative approach to injecting the correct cache instance.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/foo\", ([FromKeyedServices(\"MyCache\")] IFusionCache) => {\n    cache.Set(\"cache-key\", 42);\n});\n```\n\n----------------------------------------\n\nTITLE: Adaptive Caching with Dynamic Tags in C#\nDESCRIPTION: Shows how to dynamically assign tags to cache entries during the execution of the factory delegate in a GetOrSet operation. This approach allows determining tags at runtime based on data properties.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Tagging.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncache.GetOrSet<int>(\n    \"baz\",\n    (ctx, _) =>\n    {\n        ctx.Tags = [\"tag-1\", \"tag-3\"]; // SET TAGS HERE DYNAMICALLY\n        return 3;\n    });\n```\n\n----------------------------------------\n\nTITLE: Removing Cache Entries in FusionCache with C#\nDESCRIPTION: Examples of using the Remove method to completely delete entries from the cache.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CoreMethods.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncache.Set(\"foo\", 42);\n\n// THIS WILL REMOVE THE CACHE ENTRY FOR \"foo\"\ncache.Remove(\"foo\");\n\n// THIS WILL DO NOTHING\ncache.Remove(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Registering Named Caches in FusionCache\nDESCRIPTION: Demonstrates how to register multiple named caches in FusionCache instead of using the default cache. Each cache can have its own configuration and is identified by a unique name.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache(\"Products\");\nservices.AddFusionCache(\"Customers\");\n```\n\n----------------------------------------\n\nTITLE: Installing FusionCache with Redis and Newtonsoft Json.NET\nDESCRIPTION: PowerShell commands to install the required NuGet packages for using FusionCache with Redis as a distributed cache and Newtonsoft Json.NET as the serializer.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CacheLevels.md#2025-04-22_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPM> Install-Package ZiggyCreatures.FusionCache\nPM> Install-Package ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson\nPM> Install-Package Microsoft.Extensions.Caching.StackExchangeRedis\n```\n\n----------------------------------------\n\nTITLE: Adding Jittering to FusionCache Configuration in C#\nDESCRIPTION: Enhances FusionCache configuration with jittering to reduce the probability of cache entries expiring simultaneously on different nodes. This adds random variation to each entry's expiration time by setting JitterMaxDuration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithOptions(options => {\n        options.DistributedCacheCircuitBreakerDuration = TimeSpan.FromSeconds(2);\n    })\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        Duration = TimeSpan.FromMinutes(1),\n        \n        IsFailSafeEnabled = true,\n        FailSafeMaxDuration = TimeSpan.FromHours(2),\n        FailSafeThrottleDuration = TimeSpan.FromSeconds(30),\n\n        FactorySoftTimeout = TimeSpan.FromMilliseconds(100),\n        FactoryHardTimeout = TimeSpan.FromMilliseconds(1500),\n\n        DistributedCacheSoftTimeout = TimeSpan.FromSeconds(1),\n        DistributedCacheHardTimeout = TimeSpan.FromSeconds(2),\n        AllowBackgroundDistributedCacheOperations = true,\n\n        // JITTERING\n        JitterMaxDuration = TimeSpan.FromSeconds(2)\n    })\n    .WithSerializer(\n        new FusionCacheNewtonsoftJsonSerializer()\n    )\n    .WithDistributedCache(\n        new RedisCache(new RedisCacheOptions() { Configuration = \"CONNECTION STRING\" })\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Resolving FusionCache Using IFusionCacheProvider in C#\nDESCRIPTION: This example demonstrates how to resolve a named FusionCache instance using the IFusionCacheProvider interface in a minimal API endpoint. This approach allows programmatic selection of the cache.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/foo\", (IFusionCacheProvider cacheProvider) => {\n    var cache = cacheProvider.GetCache(\"MyCache\");\n    cache.Set(\"cache-key\", 42);\n});\n```\n\n----------------------------------------\n\nTITLE: FusionCache Service Configuration\nDESCRIPTION: Configuration code to add FusionCache services alongside MemoryCache in the ASP.NET Core dependency injection container.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMemoryCache();\n    services.AddFusionCache();\n}\n```\n\n----------------------------------------\n\nTITLE: Using IFusionCache Directly in a Service\nDESCRIPTION: Shows how to inject and use the native IFusionCache interface in a service class. This demonstrates that both HybridCache abstraction and direct FusionCache usage can coexist in the same application.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/MicrosoftHybridCache.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomeService2(IFusionCache cache)\n{\n    private IFusionCache _cache = cache;\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Options with Lambda in FusionCache\nDESCRIPTION: Shows how to use a lambda expression to modify the default options for a specific cache operation. This approach duplicates the default options and then applies the changes specified in the lambda.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Options.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncache.Set<int>(\n    \"foo\",\n    42,\n    // THIS DUPLICATES THE DEFAULT OPTIONS, SET A DIFFERENT DURATION AND ENABLES FAIL-SAFE\n    options => options.SetDuration(TimeSpan.FromMinutes(2)).SetFailSafe(true)\n);\n```\n\n----------------------------------------\n\nTITLE: FusionCache Options Configuration\nDESCRIPTION: Configuring cache-wide options using the builder pattern.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithOptions(opt =>\n    {\n        opt.AutoRecoveryMaxItems = 123;\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: TryGet Pattern in FusionCache with C#\nDESCRIPTION: Examples of using the TryGet method to check for and retrieve cache values using the MaybeValue<T> return type.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CoreMethods.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar maybeFoo = cache.TryGet<int>(\"foo\");\n\nif (maybeFoo.HasValue) {\n    // SUCCESS: THE VALUE WAS THERE\n\n    // GET THE VALUE\n    var result = maybeFoo.Value;\n} else {\n    // FAIL: THE VALUE WAS NOT THERE\n}\n\n// DOING THIS WITHOUT CHECKING MAY THROW AN InvalidOperationException IF THE VALUE WAS NOT THERE\nvar result = maybeFoo.Value;\n\n// THIS WILL GET THE VALUE, IF IT WAS THERE, OR THE SPECIFIED DEFAULT VALUE OTHERWISE\nvar result = maybeFoo.GetValueOrDefault(42);\n\n// THIS WILL GET THE VALUE, IF IT WAS THERE, OR THE DEFAULT VALUE OF int OTHERWISE\nvar result = maybeFoo.GetValueOrDefault();\n\n// YOU CAN ALSO USE AN IMPLICIT CONVERSION BETWEEN MaybeValue<T> AND T\n// BUT REMEMBER, IF NO VALUE IS THERE IT THROWS AN InvalidOperationException\nint result = maybeFoo;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Cache Miss Events in FusionCache using C#\nDESCRIPTION: Demonstrates how to subscribe to cache miss events in FusionCache. When a cache miss occurs, the handler function will be called with the cache key available in the event args.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Events.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// SUBSCRIBE TO CACHE MISS EVENTS\ncache.Events.Miss += (s, e) => {\n    // REACT TO THE EVENT HERE, WITH THE RELATED CACHE KEY AVAILABLE VIA e.Key\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Options in Adaptive Caching Factory Context\nDESCRIPTION: Demonstrates how to modify cache entry options within an adaptive caching factory context by directly changing properties on the context's Options object.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Options.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// INSIDE THE FACTORY\nctx.Options.Duration = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing FusionCache Email Plugin Service Extensions\nDESCRIPTION: Provides dependency injection extensions for registering the email plugin with IServiceCollection. Includes options configuration and plugin registration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing ZiggyCreatures.Caching.Fusion;\nusing ZiggyCreatures.Caching.Fusion.Plugins;\nusing ZiggyCreatures.Caching.Fusion.Plugins.MyAwesomePlugins;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n  public static class FailSafeEMailPluginServiceCollectionExtensions\n  {\n    public static IServiceCollection AddFusionCacheFailSafeEMailPlugin(this IServiceCollection services, Action<FusionCacheOptions>? setupOptionsAction = null)\n    {\n      if (services is null)\n        throw new ArgumentNullException(nameof(services));\n\n      // ENSURE THE OPTIONS SYSTEM IS AVAILABLE\n      services.AddOptions();\n\n      // OPTIONAL CUSTOM CONFIGURATION OF OPTIONS\n      if (setupOptionsAction is object)\n        services.Configure(setupOptionsAction);\n\n      //REGISTER THE SERVICE\n      services.AddSingleton<IFusionCachePlugin, FailSafeEMailPlugin>();\n\n      return services;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Cache Entries by Tag in C#\nDESCRIPTION: Demonstrates how to invalidate multiple cache entries at once by removing all entries associated with a specific tag. This example removes all entries with the tag-1 tag.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Tagging.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncache.RemoveByTag(\"tag-1\");\n```\n\n----------------------------------------\n\nTITLE: Using Named Cache with IFusionCacheProvider in Controller\nDESCRIPTION: Example of accessing a specific named cache using IFusionCacheProvider. This approach allows selecting which cache to use by name when multiple caches are registered.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IFusionCache _cache;\n\n    public MyController(IFusionCacheProvider cacheProvider)\n    {\n        _cache = cacheProvider.GetCache(\"Products\");\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: FusionCache Default Entry Options\nDESCRIPTION: Setting default entry options for cache items including duration and timeout settings.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(opt =>\n    {\n        opt.Duration = TimeSpan.FromSeconds(30);\n        opt.FactorySoftTimeout = TimeSpan.FromMilliseconds(100);\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache Entries in FusionCache with C#\nDESCRIPTION: This example demonstrates how to use the Clear() method in FusionCache to remove all cache entries, regardless of their tags. After clearing the cache, previously set entries will no longer be available.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Clear.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncache.Set(\"foo\", 1);\ncache.Set(\"bar\", 2, tags: [\"tag-1\", \"tag-2\"]);\ncache.Set(\"baz\", 3);\n\n// CLEAR\ncache.Clear();\n\n// HERE maybeFoo.HasValue IS false\nvar maybeFoo = cache.TryGet<int>(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Creating FusionCache Instance in C#\nDESCRIPTION: Demonstrates how to create a new FusionCache instance using the direct instantiation approach with configuration options.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/src/ZiggyCreatures.FusionCache/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cache = new FusionCache(new FusionCacheOptions());\n```\n\n----------------------------------------\n\nTITLE: Directly Adding a Plugin Instance with Dependency Injection\nDESCRIPTION: Shows how to directly add a plugin instance when configuring FusionCache through the builder pattern in dependency injection.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n  .WithPlugin(new MyPlugin(...))\n;\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache as HybridCache in ASP.NET Core\nDESCRIPTION: Shows how to register FusionCache as a HybridCache implementation in the service collection. The 'AsHybridCache()' extension method allows FusionCache to be used as Microsoft's HybridCache abstraction.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/MicrosoftHybridCache.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n  .AsHybridCache(); // MAGIC\n```\n\n----------------------------------------\n\nTITLE: Managing Event Subscription Lifecycle in FusionCache using C#\nDESCRIPTION: Shows how to properly subscribe to and unsubscribe from FusionCache events by declaring an event handler variable that can be referenced later for unsubscription when no longer needed.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Events.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// DECLARE THE EVENT HANDLER AS A VARIABLE YOU CAN REFERE TO\nEventHandler<FusionCacheEntryEventArgs> onMiss = (s, e) => {\n    // REACT TO THE EVENT HERE, WITH THE RELATED CACHE KEY AVAILABLE VIA e.Key\n};\n\n// SUBSCRIBE TO CACHE MISS EVENTS\ncache.Events.Miss += onMiss;\n\n// [...]\n// LATER ON, WHEN EVERYTHING IS DONE\n// [...]\n\n// UNSUBSCRIBE FROM CACHE MISS EVENTS\ncache.Events.Miss -= onMiss;\n```\n\n----------------------------------------\n\nTITLE: Enhancing Plugin to Support Configuration Options\nDESCRIPTION: Updates the plugin implementation to use the Options pattern for configuration. This version accepts IOptions<FailSafeEMailPluginOptions> in the constructor and uses the settings for email configuration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FailSafeEMailPlugin\n  : IFusionCachePlugin\n{\n\n  private FailSafeEMailPluginOptions _options;\n\n  public FailSafeEMailPlugin(IOptions<FailSafeEMailPluginOptions> optionsAccessor)\n  {\n    // GET THE OPTIONS\n    _options = optionsAccessor.Value;\n  }\n\n  public void Start(IFusionCache cache)\n  {\n    // ADD THE HANDLER\n    cache.Events.FailSafeActivate += OnFailSafeActivate;\n  }\n\n  public void Stop(IFusionCache cache)\n  {\n    // REMOVE THE HANDLER\n    cache.Events.FailSafeActivate -= OnFailSafeActivate;\n  }\n\n  private void OnFailSafeActivate(object sender, FusionCacheEntryEventArgs e)\n  {\n    // PREPARE THE MAIL MESSAGE\n    var email = new MimeMessage();\n    email.From.Add(MailboxAddress.Parse(_options.FromAddress));\n    email.To.Add(MailboxAddress.Parse(_options.ToAddress));\n    email.Subject = \"Fail-safe has been activated\";\n    email.Body = new TextPart(TextFormat.Plain)\n    {\n      Text = $\"A fail-safe activation has occurred at {DateTimeOffset.UtcNow:O} UTC for the cache key {e.Key}\"\n    };\n\n    // SEND IT\n    using (var smtp = new SmtpClient())\n    {\n      smtp.Connect(_options.SmtpHost, _options.SmtpPort, SecureSocketOptions.StartTls);\n      smtp.Authenticate(_options.SmtpUsername, _options.SmtpPassword);\n      smtp.Send(email);\n      smtp.Disconnect(true);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Keyed HybridCache Service\nDESCRIPTION: Shows how to inject a keyed HybridCache service using the FromKeyedServices attribute. This allows working with multiple named caches in the same application.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/MicrosoftHybridCache.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomeService([FromKeyedServices(\"Foo\")] HybridCache cache) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: FusionCache Controller Implementation\nDESCRIPTION: Example of using FusionCache in an MVC controller through dependency injection to cache product data.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/DependencyInjection.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IFusionCache _cache;\n\n    // THE cache PARAM WILL BE AUTOMATICALLY POPULATED BY THE DI FRAMEWORK\n    public MyController(IFusionCache cache)\n    {\n        _cache = cache;\n    }\n\n    [Route(\"product/{id:int}\")]\n    public IActionResult Product(int id)\n    {\n        var product = _cache.GetOrSet<Product>(\n            $\"product:{id}\",\n            _ => GetProductFromDb(id),\n            TimeSpan.FromSeconds(30)\n        );\n\n        return View(product);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting Options in Adaptive Caching Factory Context\nDESCRIPTION: Shows how to completely replace the cache entry options within an adaptive caching factory context by assigning a new FusionCacheEntryOptions instance.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Options.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// INSIDE THE FACTORY\nctx.Options = new FusionCacheEntryOptions() {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with Logging via Dependency Injection\nDESCRIPTION: Sets up logging with console sink in a dependency injection container and adds FusionCache service, which will automatically receive the configured logger.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddLogging(b => b\n    // MIN LOG LEVEL (GLOBAL)\n    .SetMinimumLevel(LogLevel.Warning)\n    // SIMPLE CONSOLE SINK + SCOPES\n    .AddSimpleConsole(options => options.IncludeScopes = true)\n);\n\n// THE LOGGER WILL BE AUTOMATICALLY PROVIDED\nservices.AddFusionCache();\n```\n\n----------------------------------------\n\nTITLE: FusionCache Default Options Configuration\nDESCRIPTION: Configuration code to set default cache duration for FusionCache entries.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache()\n    .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n        // CACHE DURATION\n        Duration = TimeSpan.FromMinutes(1)\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Accessing Default and Named Caches Together (Method 2)\nDESCRIPTION: Alternative approach to access both the default cache and a named cache using only IFusionCacheProvider. This method uses GetDefaultCache() to retrieve the default cache instance.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IFusionCache _defaultCache;\n    private readonly IFusionCache _productsCache;\n\n    public MyController(IFusionCacheProvider cacheProvider)\n    {\n        _defaultCache = cacheProvider.GetDefaultCache();\n        _productsCache = cacheProvider.GetCache(\"Products\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FusionCache Instance with Logger\nDESCRIPTION: Creates a logger instance from a factory and passes it to the FusionCache constructor to enable logging capabilities for cache operations.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// CREATE THE SPECIFIC LOGGER\nvar logger = factory.CreateLogger<FusionCache>();\n\n// SPECIFY THE LOGGER WHEN CREATING THE CACHE\nvar cache = new FusionCache(new FusionCacheOptions(), logger: logger);\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache Plugin with Custom Options\nDESCRIPTION: Demonstrates creating a custom extension method for plugin registration with options configuration, following .NET conventions for plugin setup.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMyFusionCachePlugin(options => {\n  options.Whatever = 42;\n});\n\nservices.AddFusionCache()\n  .WithAllRegisteredPlugins()\n;\n```\n\n----------------------------------------\n\nTITLE: Basic FusionCache Initialization\nDESCRIPTION: Creating a new FusionCache instance with default options\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar cache = new FusionCache(new FusionCacheOptions());\n```\n\n----------------------------------------\n\nTITLE: Accessing Default and Named Caches Together (Method 1)\nDESCRIPTION: Demonstrates how to access both the default cache and a named cache in the same controller by injecting both IFusionCache and IFusionCacheProvider.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/NamedCaches.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IFusionCache _defaultCache;\n    private readonly IFusionCache _productsCache;\n\n    public MyController(IFusionCache defaultCache, IFusionCacheProvider cacheProvider)\n    {\n        _defaultCache = defaultCache;\n        _productsCache = cacheProvider.GetCache(\"Products\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache with Dependency Injection (Pre-v0.20.0)\nDESCRIPTION: Shows how FusionCache was registered with dependency injection before version 0.20.0. This method implicitly set up all registered and compatible components.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Update_v0_20_0.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache();\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Factory with Console Sink for FusionCache\nDESCRIPTION: Creates a LoggerFactory instance with a console sink, configuring a global minimum log level of Warning and enabling log scopes for improved log readability.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// CREATE THE LOGGER FACTORY\nvar factory = LoggerFactory.Create(b => b\n    // MIN LOG LEVEL (GLOBAL)\n    .SetMinimumLevel(LogLevel.Warning)\n    // SIMPLE CONSOLE SINK + SCOPES\n    .AddSimpleConsole(options => options.IncludeScopes = true)\n);\n```\n\n----------------------------------------\n\nTITLE: Controller with FusionCache Implementation\nDESCRIPTION: Controller implementation using IFusionCache for improved caching with automatic factory coordination.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private IFusionCache _cache;\n\n    public MyController(IFusionCache cache)\n    {\n        _cache = cache;\n    }\n\n    // [...]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for FusionCache without Dependency Injection\nDESCRIPTION: Example of setting up OpenTelemetry traces and metrics for FusionCache without using dependency injection. This code configures both tracer and meter providers with console exporters.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/OpenTelemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// SETUP TRACES\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n  .AddFusionCacheInstrumentation()\n  .AddConsoleExporter()\n  .Build();\n\n// SETUP METRICS\nusing var meterProvider = Sdk.CreateMeterProviderBuilder()\n  .AddFusionCacheInstrumentation()\n  .AddConsoleExporter()\n  .Build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending Functionality for Fail-Safe Events\nDESCRIPTION: Adds the email sending logic to the plugin's event handler using MailKit and MimeKit. This code prepares an email message with fail-safe activation details and sends it via SMTP.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnFailSafeActivate(object sender, FusionCacheEntryEventArgs e)\n{\n  // PREPARE THE MAIL MESSAGE\n  var email = new MimeMessage();\n  email.From.Add(MailboxAddress.Parse(\"[FROM_ADDRESS]\"));\n  email.To.Add(MailboxAddress.Parse(\"[TO_ADDRESS]\"));\n  email.Subject = \"Fail-safe has been activated\";\n  email.Body = new TextPart(TextFormat.Plain)\n  {\n    Text = $\"A fail-safe activation has occurred at {DateTimeOffset.UtcNow:O} UTC for the cache key {e.Key}\"\n  };\n\n  // SEND IT\n  using (var smtp = new SmtpClient())\n  {\n    smtp.Connect(\"smtp.ethereal.email\", 587, SecureSocketOptions.StartTls);\n    smtp.Authenticate(\"[USERNAME]\", \"[PASSWORD]\");\n    smtp.Send(email);\n    smtp.Disconnect(true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Implementation with Duration and Fail-Safe\nDESCRIPTION: Demonstrates basic caching with a 10-minute duration and fail-safe enabled for product data retrieval.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/EagerRefresh.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        // DURATION\n        .SetDuration(TimeSpan.FromMinutes(10))\n        // FAIL-SAFE\n        .SetFailSafe(true)\n);\n```\n\n----------------------------------------\n\nTITLE: Basic FusionCache GetOrSet Operation without Timeouts\nDESCRIPTION: A simple example of using FusionCache to retrieve a product from the database with a 2-minute cache duration. This example does not implement any timeout handling.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Timeouts.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nproduct = cache.GetOrSet<Product>(\n    \"product:123\",\n    _ => GetProductFromDb(123),\n    options => options\n        .SetDuration(TimeSpan.FromMinutes(2))\n);\n```\n\n----------------------------------------\n\nTITLE: Controller with MemoryCache Implementation\nDESCRIPTION: Controller implementation using IMemoryCache for caching product data with a 1-minute expiration.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private IMemoryCache _cache;\n\n    public MyController(IMemoryCache cache)\n    {\n        _cache = cache;\n    }\n\n    // [...]\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Documentation Structure\nDESCRIPTION: A markdown document that provides the structure and navigation for FusionCache's documentation, including links to detailed sections and feature descriptions.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 📕 Documentation\n\nSometimes topics can be explained a little bit more, and the following docs can help you with that.\n\n## [**🦄 A Gentle Introduction**](AGentleIntroduction.md)\n\nMake yourself comfortable with FusionCache.\n\n## [**👩‍🏫 Step By Step**](StepByStep.md)\n\nA complete step by step example of why a cache is useful, why FusionCache could be even more so, how to apply most of the options available and what results you can expect to obtain.\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache Options (Pre-v0.20.0)\nDESCRIPTION: Shows how to configure FusionCache options before version 0.20.0. This method implicitly set up all registered components along with the specified options.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Update_v0_20_0.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache(opt =>\n{\n    opt.AutoRecoveryMaxItems = 123;\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing L1 + L2 + Backplane Caching Flow in FusionCache\nDESCRIPTION: This diagram shows the simplified flow for L1 and L2 caching with backplane synchronization in FusionCache. It includes steps for checking both L1 and L2, executing the factory function if needed, saving to both levels, and sending backplane notifications.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Diagrams.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    START[GetOrSet] -->\n    \n    CHECK_L1{✅ Value in L1?}\n    CHECK_L1 -->|&nbsp;Yes&nbsp;| RETURN\n    CHECK_L1 -->|&nbsp;No&nbsp;| CHECK_L2\n\n    CHECK_L2{✅ Value in L2?}\n    CHECK_L2 -->|&nbsp;Yes&nbsp;| SAVE_L1\n    CHECK_L2 -->|&nbsp;No&nbsp;| FACTORY\n\n    SAVE_L1[💾 Save to L1]\n    SAVE_L1 --> RETURN\n\n    FACTORY[⚡ Execute factory]\n    FACTORY --> FACTORY_SAVE_L1\n\n    FACTORY_SAVE_L1[💾 Save to L1]\n    FACTORY_SAVE_L1 --> SAVE_L2\n    \n    SAVE_L2[💾 Save to L2]\n    SAVE_L2 --> SEND_BACKPLANE\n    \n    SEND_BACKPLANE[📢 Send backplane notification]\n    SEND_BACKPLANE --> RETURN\n\n    RETURN[Return value]\n```\n\n----------------------------------------\n\nTITLE: Using Default Cache Options in FusionCache\nDESCRIPTION: Demonstrates how to use the default cache options defined in FusionCacheOptions.DefaultEntryOptions without specifying any options explicitly in the method call.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Options.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// THIS USES THE DEFAULT OPTIONS\ncache.Set<int>(\"foo\", 42);\n```\n\n----------------------------------------\n\nTITLE: MemoryCache Product Retrieval Action\nDESCRIPTION: Controller action implementation using MemoryCache to cache product data with a 1-minute absolute expiration time.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet(\"product/{id}\")]\npublic ActionResult<Product> GetProduct(int id)\n{\n    var product = _cache.GetOrCreate<Product>(\n        $\"product:{id}\",\n        entry => {\n            entry.SetAbsoluteExpiration(TimeSpan.FromMinutes(1));\n            return GetProductFromDb(id);\n        }\n    );\n\n    if (product is null)\n        return NotFound();\n\n    return product;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Options Class for Email Plugin Configuration\nDESCRIPTION: Defines a configuration class following the Options pattern for the email plugin. This class implements IOptions<T> and contains properties for all email and SMTP configuration settings.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FailSafeEMailPluginOptions\n  : IOptions<FailSafeEMailPluginOptions>\n{\n  public string? FromAddress { get; set; }\n  public string? ToAddress { get; set; }\n  public string? SmtpHost { get; set; }\n  public int SmtpPort { get; set; } = 25;\n  public string? SmtpUsername { get; set; }\n  public string? SmtpPassword { get; set; }\n\n  FailSafeEMailPluginOptions IOptions<FailSafeEMailPluginOptions>.Value\n  {\n    get { return this; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Plugin with Options Using DI\nDESCRIPTION: Shows how to register the plugin with dependency injection while configuring the plugin options. This uses the custom extension method to provide a clean configuration experience.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCacheFailSafeEMailPlugin(options =>\n{\n  options.FromAddress = \"sender@example.org\";\n  options.ToAddress = \"target@example.org\";\n  options.SmtpHost = \"smtp.ethereal.email\";\n  options.SmtpPort = 587;\n  options.SmtpUsername = \"[USERNAME]\";\n  options.SmtpPassword = \"[PASSWORD]\";\n});\n```\n\n----------------------------------------\n\nTITLE: Adding FusionCache Plugins Without Dependency Injection\nDESCRIPTION: Demonstrates manual plugin management without dependency injection by creating plugin instances and adding them directly to a FusionCache instance.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar firstPlugin = new MyFirstPlugin();\nvar secondPlugin = new MySecondPlugin();\n\nvar cache = new FusionCache(new FusionCacheOptions());\n\ncache.AddPlugin(firstPlugin);\ncache.AddPlugin(secondPlugin);\n```\n\n----------------------------------------\n\nTITLE: Serilog Configuration in appsettings.json\nDESCRIPTION: JSON configuration for Serilog with override settings for different namespaces, showing how to adjust logging levels for FusionCache specifically.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Serilog\": {\n        \"MinimumLevel\": {\n            \"Default\": \"Warning\",\n            \"Override\": {\n                \"MyCompany\": \"Information\",\n                \"ZiggyCreatures.Caching.Fusion\": \"Debug\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a FusionCache Plugin with Dependency Injection\nDESCRIPTION: Shows how to register the plugin with dependency injection in the application's service collection. This approach uses the AddFusionCache() method with WithAllRegisteredPlugins() to discover and register all plugins.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<IFusionCachePlugin, FailSafeEMailPlugin>();\n\nservices.AddFusionCache()\n  .WithAllRegisteredPlugins()\n;\n```\n\n----------------------------------------\n\nTITLE: Visualizing L1-only Caching Flow with Stampede Protection in FusionCache\nDESCRIPTION: This diagram illustrates the L1 caching flow in FusionCache with cache stampede protection. It shows the double-checked locking mechanism used to prevent multiple simultaneous updates for the same key.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Diagrams.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    START[GetOrSet] -->\n    \n    CHECK_L1{✅ Value in L1?}\n    CHECK_L1 -->|&nbsp;Yes&nbsp;| RETURN\n    CHECK_L1 -->|&nbsp;No&nbsp;| STAMPEDE_LOCK_ACQUIRE\n\n    STAMPEDE_LOCK_ACQUIRE[🔒 Acquire stampede lock]\n    STAMPEDE_LOCK_ACQUIRE --> CHECK_L1_2\n    \n    CHECK_L1_2{✅ Value in L1?}\n    CHECK_L1_2 -->|&nbsp;Yes&nbsp;| STAMPEDE_LOCK_RELEASE\n    CHECK_L1_2 -->|&nbsp;No&nbsp;| FACTORY\n\n    FACTORY[⚡ Execute factory]\n    FACTORY --> SAVE_L1\n\n    SAVE_L1[💾 Save to L1]\n    SAVE_L1 --> STAMPEDE_LOCK_RELEASE\n    \n    STAMPEDE_LOCK_RELEASE[🔓 Release stampede lock]\n    STAMPEDE_LOCK_RELEASE --> RETURN\n    \n    RETURN[Return value]\n```\n\n----------------------------------------\n\nTITLE: Database Product Retrieval Method\nDESCRIPTION: Example method showing the database retrieval operation that will be cached\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nProduct GetProductFromDb(int id) {\n\t// DATABASE CALL HERE\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionCache with In-Memory Cache for Testing\nDESCRIPTION: C# code example showing how to configure FusionCache with an in-memory distributed cache for early detection of serialization issues during development.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/CacheLevels.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddFusionCache()\n  .WithDefaultEntryOptions(new FusionCacheEntryOptions {\n    SkipMemoryCacheRead = true,\n  })\n  .WithDistributedCache(\n    new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()))\n  )\n  .WithSerializer(\n    new FusionCacheNewtonsoftJsonSerializer() // OR ANOTHER ONE OF YOUR CHOOSING\n  );\n```\n\n----------------------------------------\n\nTITLE: Loading Product from Database in C#\nDESCRIPTION: A simple method that loads a product from the database. This represents the data access function that would be optimized through caching.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/src/ZiggyCreatures.FusionCache/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nProduct GetProductFromDb(int id) {\n\t// DATABASE CALL HERE\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Logging Configuration in appsettings.json\nDESCRIPTION: JSON configuration for native .NET logging with different minimum log levels for specific namespaces, including a Debug level for FusionCache components.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Logging\": {\n        \"LogLevel\": {\n            \"Default\": \"Warning\",\n            \"MyCompany\": \"Information\",\n            \"ZiggyCreatures.Caching.Fusion\": \"Debug\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Methods for DI Registration\nDESCRIPTION: Implements extension methods for IServiceCollection to provide a clean, strongly-typed way to register and configure the plugin. This follows Microsoft's best practices for DI extension methods.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing ZiggyCreatures.Caching.Fusion;\nusing ZiggyCreatures.Caching.Fusion.Plugins;\nusing ZiggyCreatures.Caching.Fusion.Plugins.MyAwesomePlugins;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n  public static class FailSafeEMailPluginServiceCollectionExtensions\n  {\n    public static IServiceCollection AddFusionCacheFailSafeEMailPlugin(this IServiceCollection services, Action<FusionCacheOptions>? setupOptionsAction = null)\n    {\n      if (services is null)\n        throw new ArgumentNullException(nameof(services));\n\n      // ENSURE THE OPTIONS SYSTEM IS AVAILABLE\n      services.AddOptions();\n\n      // OPTIONAL CUSTOM CONFIGURATION OF OPTIONS\n      if (setupOptionsAction is object)\n        services.Configure(setupOptionsAction);\n\n      //REGISTER THE SERVICE\n      services.AddSingleton<IFusionCachePlugin, FailSafeEMailPlugin>();\n\n      return services;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FusionCache Instance without Logging\nDESCRIPTION: Demonstrates creating a FusionCache instance without specifying a logger, which effectively disables logging for all cache operations.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Logging.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// NO LOGGER SPECIFIED == NO LOGGING\nvar cache = new FusionCache(new FusionCacheOptions());\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FusionCache Plugin Structure for Email Notifications\nDESCRIPTION: Creates the basic structure of a FusionCache plugin that subscribes to fail-safe activation events. This implements IFusionCachePlugin with Start and Stop methods to register and unregister event handlers.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing ZiggyCreatures.Caching.Fusion.Events;\n\nnamespace ZiggyCreatures.Caching.Fusion.Plugins.MyAwesomePlugins\n{\n  public class FailSafeEMailPlugin\n    : IFusionCachePlugin\n  {\n\n    public void Start(IFusionCache cache)\n    {\n      // ADD THE HANDLER\n      cache.Events.FailSafeActivate += OnFailSafeActivate;\n    }\n\n    public void Stop(IFusionCache cache)\n    {\n      // REMOVE THE HANDLER\n      cache.Events.FailSafeActivate -= OnFailSafeActivate;\n    }\n\n    private void OnFailSafeActivate(object sender, FusionCacheEntryEventArgs e)\n    {\n      // DO SOMETHING HERE...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FusionCache Package Installation\nDESCRIPTION: NuGet package manager command to install the FusionCache package.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package ZiggyCreatures.FusionCache\n```\n\n----------------------------------------\n\nTITLE: Registering a FusionCache Plugin Manually Without DI\nDESCRIPTION: Demonstrates manual plugin registration without dependency injection. This approach creates the plugin instance directly and adds it to the FusionCache instance using the AddPlugin method.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar myPlugin = new FailSafeEMailPlugin();\n\nvar cache = new FusionCache(new FusionCacheOptions());\n\ncache.AddPlugin(myPlugin);\n```\n\n----------------------------------------\n\nTITLE: Implementing FusionCache Email Plugin Options Class\nDESCRIPTION: Defines configuration options for the email plugin including SMTP settings and email addresses. Implements IOptions<T> interface for dependency injection support.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Microsoft.Extensions.Options;\n\nnamespace ZiggyCreatures.Caching.Fusion.Plugins.MyAwesomePlugins\n{\n  public class FailSafeEMailPluginOptions\n    : IOptions<FailSafeEMailPluginOptions>\n  {\n    public string? FromAddress { get; set; }\n    public string? ToAddress { get; set; }\n    public string? SmtpHost { get; set; }\n    public int SmtpPort { get; set; } = 25;\n    public string? SmtpUsername { get; set; }\n    public string? SmtpPassword { get; set; }\n\n    FailSafeEMailPluginOptions IOptions<FailSafeEMailPluginOptions>.Value\n    {\n      get { return this; }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Action Without Caching\nDESCRIPTION: Initial implementation of the product controller action that directly calls the database without any caching mechanism.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet(\"product/{id}\")]\npublic ActionResult<Product> GetProduct(int id)\n{\n    var product = GetProductFromDb(id);\n\n    if (product is null)\n        return NotFound();\n\n    return product;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plugin Manually Without DI\nDESCRIPTION: Demonstrates how to configure and register the plugin without dependency injection. This approach directly creates the plugin with options and adds it to the cache instance.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar myPlugin = new FailSafeEMailPlugin(new FailSafeEMailPluginOptions()\n{\n  FromAddress = \"sender@example.org\",\n  ToAddress = \"target@example.org\",\n  SmtpHost = \"smtp.ethereal.email\",\n  SmtpPort = 587,\n  SmtpUsername = \"[USERNAME]\",\n  SmtpPassword = \"[PASSWORD]\"\n});\n\nvar cache = new FusionCache(new FusionCacheOptions());\n\ncache.AddPlugin(myPlugin);\n```\n\n----------------------------------------\n\nTITLE: Implementing Core FusionCache Email Plugin Logic\nDESCRIPTION: Core plugin implementation that handles fail-safe activation events by sending email notifications using MailKit. Includes event subscription management and email sending logic.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/PluginSample.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MailKit.Net.Smtp;\nusing MailKit.Security;\nusing Microsoft.Extensions.Options;\nusing MimeKit;\nusing MimeKit.Text;\nusing ZiggyCreatures.Caching.Fusion.Events;\n\nnamespace ZiggyCreatures.Caching.Fusion.Plugins.MyAwesomePlugins\n{\n  public class FailSafeEMailPlugin\n    : IFusionCachePlugin\n  {\n\n    private FailSafeEMailPluginOptions _options;\n\n    public FailSafeEMailPlugin(IOptions<FailSafeEMailPluginOptions> optionsAccessor)\n    {\n      // GET THE OPTIONS\n      _options = optionsAccessor.Value;\n    }\n\n    public void Start(IFusionCache cache)\n    {\n      // ADD THE HANDLER\n      cache.Events.FailSafeActivate += OnFailSafeActivate;\n    }\n\n    public void Stop(IFusionCache cache)\n    {\n      // REMOVE THE HANDLER\n      cache.Events.FailSafeActivate -= OnFailSafeActivate;\n    }\n\n    private void OnFailSafeActivate(object sender, FusionCacheEntryEventArgs e)\n    {\n      // PREPARE THE MAIL MESSAGE\n      var email = new MimeMessage();\n      email.From.Add(MailboxAddress.Parse(_options.FromAddress));\n      email.To.Add(MailboxAddress.Parse(_options.ToAddress));\n      email.Subject = \"Fail-safe has been activated\";\n      email.Body = new TextPart(TextFormat.Plain)\n      {\n        Text = $\"A fail-safe activation has occurred at {DateTimeOffset.UtcNow:O} UTC for the cache key {e.Key}\"\n      };\n\n      // SEND IT\n      using (var smtp = new SmtpClient())\n      {\n        smtp.Connect(_options.SmtpHost, _options.SmtpPort, SecureSocketOptions.StartTls);\n        smtp.Authenticate(_options.SmtpUsername, _options.SmtpPassword);\n        smtp.Send(email);\n        smtp.Disconnect(true);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MemoryCache Service Configuration\nDESCRIPTION: Configuration code to add MemoryCache services to the ASP.NET Core dependency injection container.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMemoryCache();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FusionCache OpenTelemetry Package via PowerShell\nDESCRIPTION: Command to install the FusionCache OpenTelemetry NuGet package using the Package Manager Console.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/OpenTelemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPM> Install-Package ZiggyCreatures.FusionCache.OpenTelemetry\n```\n\n----------------------------------------\n\nTITLE: Advanced FusionCache Configuration\nDESCRIPTION: Setting up FusionCache with default entry options including duration and priority\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar cache = new FusionCache(new FusionCacheOptions() {\n\tDefaultEntryOptions = new FusionCacheEntryOptions {\n\t\tDuration = TimeSpan.FromMinutes(2),\n\t\tPriority = CacheItemPriority.Low\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Comprehensive Caching Flow in FusionCache\nDESCRIPTION: This complex diagram illustrates the full flow of FusionCache including L1, L2, backplane, eager refresh, and soft timeout features. It shows the intricate steps involved in cache operations, background processes, and fail-safe mechanisms.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Diagrams.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    START[GetOrSet] -->\n    \n    CHECK_L1{✅ Value in L1?}\n    CHECK_L1 -->|&nbsp;Yes&nbsp;| EAGER_MAYBE\n    CHECK_L1 -->|&nbsp;No&nbsp;| STAMPEDE_LOCK_ACQUIRE\n\n    EAGER_MAYBE{✅ Eager refresh?}\n    EAGER_MAYBE -->|&nbsp;Yes&nbsp;| EAGER_STAMPEDE_LOCK_ACQUIRE\n    EAGER_MAYBE -->|&nbsp;No&nbsp;| RETURN\n\n    EAGER_STAMPEDE_LOCK_ACQUIRE[🔒 Acquire stampede lock]\n    EAGER_STAMPEDE_LOCK_ACQUIRE --> EAGER_FACTORY\n    EAGER_STAMPEDE_LOCK_ACQUIRE --> RETURN\n\n    EAGER_FACTORY[⚡ Execute background factory]\n    EAGER_FACTORY --> EAGER_NEW_VALUE_FACTORY\n\n    EAGER_NEW_VALUE_FACTORY[🆕 New value from factory]\n    EAGER_NEW_VALUE_FACTORY --> EAGER_SAVE_L1\n\n    EAGER_SAVE_L1[💾 Save to L1]\n    EAGER_SAVE_L1 --> EAGER_STAMPEDE_LOCK_RELEASE\n    \n    EAGER_STAMPEDE_LOCK_RELEASE[🔓 Release stampede lock]\n    EAGER_STAMPEDE_LOCK_RELEASE --> EAGER_SAVE_L2\n\n    EAGER_SAVE_L2[💾 Save to L2]\n    EAGER_SAVE_L2 --> EAGER_SEND_BACKPLANE\n\n    EAGER_SEND_BACKPLANE[📢 Send backplane notification]\n\n    STAMPEDE_LOCK_ACQUIRE[🔒 Acquire stampede lock]\n    STAMPEDE_LOCK_ACQUIRE --> CHECK_L1_2\n    \n    CHECK_L1_2{✅ Value in L1?}\n    CHECK_L1_2 -->|&nbsp;Yes&nbsp;| STAMPEDE_LOCK_RELEASE\n    CHECK_L1_2 -->|&nbsp;No&nbsp;| CHECK_L2\n\n    CHECK_L2{✅ Value in L2?}\n    CHECK_L2 -->|&nbsp;Yes&nbsp;| SAVE_L1\n    CHECK_L2 -->|&nbsp;No&nbsp;| FACTORY\n\n    FACTORY[⚡ Execute factory]\n    FACTORY --> MAYBE_TIMEOUT\n\n    MAYBE_TIMEOUT{🕑 Timeout?}\n    MAYBE_TIMEOUT -->|&nbsp;No&nbsp;| NEW_VALUE_FACTORY\n    MAYBE_TIMEOUT -->|&nbsp;Yes&nbsp;| FAILSAFE\n\n    FAILSAFE[💣 Activate fail-safe]\n    FAILSAFE --> NEW_VALUE_FAILSAFE\n    FAILSAFE --> TIMEOUT_FACTORY\n\n    TIMEOUT_FACTORY[⚡ Complete background factory]\n    TIMEOUT_FACTORY --> TIMEOUT_NEW_VALUE_FACTORY\n\n    TIMEOUT_NEW_VALUE_FACTORY[🆕 New value from factory]\n    TIMEOUT_NEW_VALUE_FACTORY --> TIMEOUT_SAVE_L1\n\n    TIMEOUT_SAVE_L1[💾 Save to L1]\n    TIMEOUT_SAVE_L1 --> TIMEOUT_SAVE_L2\n    \n    TIMEOUT_SAVE_L2[💾 Save to L2]\n    TIMEOUT_SAVE_L2 --> TIMEOUT_SEND_BACKPLANE\n\n    TIMEOUT_SEND_BACKPLANE[📢 Send backplane notification]\n\n    NEW_VALUE_FACTORY[🆕 New value from factory]\n    NEW_VALUE_FACTORY --> SAVE_L1\n\n    NEW_VALUE_FAILSAFE[🆕 New value from fail-safe]\n    NEW_VALUE_FAILSAFE --> SAVE_L1\n\n    SAVE_L1[💾 Save to L1]\n    SAVE_L1 --> STAMPEDE_LOCK_RELEASE\n    \n    STAMPEDE_LOCK_RELEASE[🔓 Release stampede lock]\n    STAMPEDE_LOCK_RELEASE --> MAYBE_NEW_VALUE\n\n    MAYBE_NEW_VALUE{✅ New value?}\n    MAYBE_NEW_VALUE -->|&nbsp;No&nbsp;| RETURN\n    MAYBE_NEW_VALUE -->|&nbsp;Yes&nbsp;| SAVE_L2\n\n    SAVE_L2[💾 Save to L2]\n    SAVE_L2 --> SEND_BACKPLANE\n\n    SEND_BACKPLANE[📢 Send backplane notification]\n    SEND_BACKPLANE --> RETURN\n\n    RETURN[Return value]\n```\n\n----------------------------------------\n\nTITLE: Initial Database Product Retrieval Method\nDESCRIPTION: Basic method signature for retrieving a product from the database without any caching implementation.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/StepByStep.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic Product GetProductFromDb(int id) {\n    // YOUR DATABASE CALL HERE\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FusionCache and Redis Packages with NuGet\nDESCRIPTION: PowerShell commands to install the necessary NuGet packages for FusionCache, including core, serialization, distributed cache, and backplane components.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Backplane.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# CORE PACKAGE\nPM> Install-Package ZiggyCreatures.FusionCache\n\n# SERIALIZER\nPM> Install-Package ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson\n\n# DISTRIBUTED CACHE\nPM> Install-Package Microsoft.Extensions.Caching.StackExchangeRedis\n\n# BACKPLANE\nPM> Install-Package ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis\n```\n\n----------------------------------------\n\nTITLE: Simplified Cache Usage with Default Options\nDESCRIPTION: Using FusionCache with inherited default options, only overriding the duration\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\ncache.GetOrSet<Product>(\n\t$\"product:{id}\",\n\t_ => GetProductFromDb(id),\n\toptions => options.SetDuration(TimeSpan.FromSeconds(30))\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Configuration Properties in C#\nDESCRIPTION: Property name changes from Backplane-specific to general Auto-Recovery configuration. Old properties are marked obsolete but remain functional through adapters.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Update_v0_24_0.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Old property names (now obsolete)\nEnableBackplaneAutoRecovery\nBackplaneAutoRecoveryMaxItems\n\n// New property names\nEnableAutoRecovery\nAutoRecoveryMaxItems\n```\n\n----------------------------------------\n\nTITLE: Visualizing L1-only Caching Flow in FusionCache\nDESCRIPTION: This diagram illustrates the simplified flow for L1 (memory level) caching in FusionCache. It shows the basic steps of checking L1, executing the factory function if needed, and saving to L1.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Diagrams.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    START[GetOrSet] -->\n    \n    CHECK_L1{✅ Value in L1?}\n    CHECK_L1 -->|&nbsp;Yes&nbsp;| RETURN\n    CHECK_L1 -->|&nbsp;No&nbsp;| FACTORY\n\n    FACTORY[⚡ Execute factory]\n    FACTORY --> SAVE_L1\n\n    SAVE_L1[💾 Save to L1]\n    SAVE_L1 --> RETURN\n    \n    RETURN[Return value]\n```\n\n----------------------------------------\n\nTITLE: Old AddFusionCache Method Signature\nDESCRIPTION: Displays the signature of the old AddFusionCache extension method, which is now marked as obsolete. This method had optional parameters for various configurations.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Update_v0_20_0.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddFusionCache(this IServiceCollection services, Action<FusionCacheOptions>? setupOptionsAction = null, bool useDistributedCacheIfAvailable = true, bool ignoreMemoryDistributedCache = true, Action<IServiceProvider, IFusionCache>? setupCacheAction = null);\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Note to Library Authors\nDESCRIPTION: A markdown table containing a note to other library authors about the comparison's objectivity and invitation for corrections.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Comparison.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 📢 A note to other library authors |\n| :--- |\n| Even though I tried my best to be fair and objective, I'm sure you may have different opinions about each topic or I may have just used your library in the wrong way or maybe a newer version came out with new features. <br/> <br/> If that is the case please [**open an issue**](https://github.com/ZiggyCreatures/FusionCache/issues/new/choose) or send a pr and I will make the necessary changes. |\n```\n\n----------------------------------------\n\nTITLE: Installing FusionCache via NuGet\nDESCRIPTION: Command to install the FusionCache NuGet package using Package Manager\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package ZiggyCreatures.FusionCache\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache with Background Operations in FusionCache\nDESCRIPTION: Example showing how to configure Redis as a distributed cache with FusionCache and enable background operations. This demonstrates a potential race condition when directly accessing the distributed cache after setting a value with background operations enabled.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/docs/Timeouts.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// INSTANTIATE REDIS AS A DISTRIBUTED CACHE\nvar redis = new RedisCache(new RedisCacheOptions() {\n    Configuration = \"CONNECTION STRING\"\n});\n\n// INSTANTIATE THE FUSION CACHE SERIALIZER\nvar serializer = new FusionCacheNewtonsoftJsonSerializer();\n\n// INSTANTIATE FUSION CACHE\nvar cache = new FusionCache(new FusionCacheOptions());\n\n// SETUP THE DISTRIBUTED 2ND LEVEL\ncache.SetupDistributedCache(redis, serializer);\n\n// SET A VALUE IN THE CACHE VIA FUSION CACHE, WITH BACKGROUND DISTRIBUTED OPERATIONS\ncache.Set<string>(\n    \"foo\",\n    \"Sloths, sloths everywhere\",\n    new FusionCacheEntryOptions { AllowBackgroundDistributedCacheOperations = true }\n);\n\n// HERE foo MAY BE NULL, BECAUSE THE DISTRIBUTED CACHE MAY STILL BE SAVING THE VALUE IN THE BACKGROUND\nvar foo = redis.GetString(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Using GetOrSet Pattern with FusionCache in C#\nDESCRIPTION: Demonstrates the core GetOrSet pattern to retrieve a product from cache or load it from the database if not available, then cache it for 30 seconds.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/src/ZiggyCreatures.FusionCache/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 42;\n\ncache.GetOrSet<Product>(\n\t$\"product:{id}\",\n\t_ => GetProductFromDb(id),\n\tTimeSpan.FromSeconds(30)\n);\n```\n\n----------------------------------------\n\nTITLE: Registering FusionCache with Dependency Injection in C#\nDESCRIPTION: Shows how to register FusionCache with the .NET dependency injection container for use throughout an application.\nSOURCE: https://github.com/ziggycreatures/fusioncache/blob/main/src/ZiggyCreatures.FusionCache/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddFusionCache();\n```"
  }
]