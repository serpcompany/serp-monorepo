[
  {
    "owner": "ramda",
    "repo": "ramda.github.io",
    "content": "TITLE: Creating Reusable Ramda Functions\nDESCRIPTION: Defines reusable functions with Haskell-style type signatures for common operations on line items using Ramda's functional utilities.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/SmallFunctions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// descriptions :: [LineItem] -> [String]\nconst descriptions = R.pluck('description');\n\n// lineItemTotals :: [LineItem] -> [Number]\nconst lineItemTotals = R.map(item => item.quantity * item.price);\n\n// invoiceTotal :: [LineItem] -> Number\nconst invoiceTotal = reduce((total, item) => total + item.price * item.quantity, 0)\n\n// inexpensive :: [LineItem] -> [LineItem]\nconst inexpensive = R.filter(item => item.price < 10.00);\n\n// totalItems :: [LineItem] -> Number\nconst totalItems = R.compose(R.reduce(R.add, 0), R.pluck('quantity'));\n\n// warehoustPickList :: [LineItem] -> [{productId, quantity}]\nconst warehousePickList = R.project(['productId', 'quantity'])\n```\n\n----------------------------------------\n\nTITLE: Breaking Down Complex Operations into Simple Functions\nDESCRIPTION: Demonstrates how to decompose complex operations into simpler, more focused functions using Ramda's pipe and other utilities.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/SmallFunctions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// itemTotal :: LineItem -> Number\nconst itemTotal = (item) => item.price * item.quantity;\n\n// lineItemTotals :: [LineItem] -> [Number]\nconst lineItemTotals = R.map(itemTotal);\n\n// invoiceTotal :: [LineItem] -> Number\nconst invoiceTotal = R.pipe(lineItemTotals, R.sum);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Ramda Operations on Line Items\nDESCRIPTION: Shows various Ramda functions like pluck, map, reduce, filter, compose and project operating on the line items array to extract and transform data.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/SmallFunctions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nR.pluck('description')(lineItems);\n//=> [\"Rubik's Cube 3x3x3\", \"Sudoku Book\", \"Sam Lloyd's 15 puzzle\"]\n\nR.map(item => item.quantity * item.price)(lineItems);\n//=> [12.99, 19.50, 16.25]\n\nR.reduce((total, item) => total + item.price * item.quantity, 0)(lineItems);\n//=> 48.74\n\nR.filter(item => item.price < 10.00, lineItems);\n//=> [\n//     {\"description\": \"Sudoku Book\", \"price\": 6.5,\n//        \"productId\": \"134672\", \"quantity\": 3},\n//     {\"description\": \"Sam Lloyd's 15 puzzle\", \"price\": 3.25,\n//        \"productId\": \"162075\", \"quantity\": 5}\n// ]\n\nR.compose(R.reduce(R.add, 0), R.pluck('quantity'))(lineItems);\n//=> 9\n\nR.project(['productId', 'quantity'])(lineItems);\n//=> [\n//    {productId: \"783490\", quantity: 1},\n//    {productId: \"134672\", quantity: 3},\n//    {productId: \"162075\", quantity: 5}\n// ]\n```\n\n----------------------------------------\n\nTITLE: Functional Pipeline Transformation\nDESCRIPTION: Demonstrates Ramda's functional pipeline approach for data transformation.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nR.pipe(\n    R.filter(notSmall), \n    R.map(R.props(['symbol', 'pop'])),\n    R.fromPairs)(states) //=> {\"CT\": 3574097, \"MA\": 6547629}\n```\n\n----------------------------------------\n\nTITLE: Ramda Object Association\nDESCRIPTION: Shows how Ramda's assoc creates new objects instead of mutating existing ones.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar barney = {name: \"Barney\", age: 27}\nvar fred = {name: \"Fred\", age: 29}\nbarney.bestFriend = fred;\nfred.bestFriend = barney;\n\nvar fred2 = R.assoc('age', 30, fred);\n\nfred2.age; //=> 30\nfred.age; //> 29\nfred2.bestFriend === barney; //=> true\n```\n\n----------------------------------------\n\nTITLE: Array Reverse Comparison\nDESCRIPTION: Compares native JavaScript array reverse (mutating) with Ramda's immutable reverse.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar a1 = [1, 2, 3];\nvar b1 = a1.reverse(); //=> [3, 2, 1]\na1; //=> [3, 2, 1]\n\nvar a2 = [1, 2, 3];\nvar b2 = R.reverse(a2); //=> [3, 2, 1]\na2; //=> [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Immutable Reduce with Assoc\nDESCRIPTION: Shows the preferred immutable approach using Ramda's assoc in reduce.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nR.reduce((accum, state) => notSmall(state) ? \n                           R.assoc(state.symbol, state.pop, accum) : \n                           accum,\n{}, states);  //=> {\"CT\": 3574097, \"MA\": 6547629}\n```\n\n----------------------------------------\n\nTITLE: Ramda Array Append\nDESCRIPTION: Demonstrates Ramda's immutable array append operation.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar numbers = [8, 6, 7, 5, 3, 0];\nvar jenny = R.append(9, numbers);\nnumbers; //=> [8, 6, 7, 5, 3, 0]\njenny; //=> [8, 6, 7, 5, 3, 0, 9]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Referentially Transparent JavaScript Function\nDESCRIPTION: This code snippet demonstrates a function that is not referentially transparent because it depends on and modifies a global variable. The incrBy function returns different values when called with the same parameters and has side effects by updating the global counter variable.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/ReferentialTransparency.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar counter = 0;\nvar incrBy = function(n) {\n  counter = counter + n;\n  return counter;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Ramda in Node.js\nDESCRIPTION: Shows how to require the full Ramda library in Node.js\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar R = require('ramda');\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Ramda Functions\nDESCRIPTION: Demonstrates how to import a single function from Ramda's source\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = require('ramda/src/map');\n```\n\n----------------------------------------\n\nTITLE: Installing Ramda via NPM\nDESCRIPTION: Command to install Ramda using Node Package Manager (npm)\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ramda\n```\n\n----------------------------------------\n\nTITLE: Building Custom Ramda Bundle\nDESCRIPTION: Command to create a custom build of Ramda including only specific functions\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build -- src/compose.js src/reduce.js src/filter.js > dist/ramda.custom.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Line Items Data Structure in JavaScript\nDESCRIPTION: Defines a sample array of line item objects representing products with properties like productId, description, price and quantity.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/SmallFunctions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineItems = [\n  {\n    productId: \"783490\",\n    description: \"Rubik's Cube, 3x3x3\",\n    price: 12.99,\n    quantity: 1\n  },\n  {\n    productId: \"134672\",\n    description: \"Sudoku Book\",\n    price: 6.50,\n    quantity: 3\n  },\n  {\n    productId: \"162075\",\n    description: \"Sam Lloyd's 15 puzzle\",\n    price: 3.25,\n    quantity: 5\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Function References in Markdown\nDESCRIPTION: Lists three Ramda functions that transform objects in different ways - mapObj for mapping over object values, project for extracting properties, and evolve for transforming properties.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/04-objects/Transforming.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO: `mapObj`, `project`, `evolve`\n```\n\n----------------------------------------\n\nTITLE: Ramda Property Access\nDESCRIPTION: Demonstrates Ramda's immutable property access using R.prop.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar getName = R.prop('name');\ngetName(person); //=> \"Fred\"\n// or \nR.prop('name', person); //=> \"Fred\"\n```\n\n----------------------------------------\n\nTITLE: Traditional JavaScript Mutator Pattern\nDESCRIPTION: Example showing traditional JavaScript getter/setter pattern that mutates data directly.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nperson.setName('Fred');\nperson.getName(); //=> \"Fred\"\n```\n\n----------------------------------------\n\nTITLE: Direct Property Mutation\nDESCRIPTION: Example of direct property access and mutation in JavaScript.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nperson.name = 'Fred';\nperson.name; //=> \"Fred\"\n```\n\n----------------------------------------\n\nTITLE: Mutable Reduce Example\nDESCRIPTION: Shows how Ramda allows but doesn't encourage mutable operations in reduce.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/01-intro/Immutability.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = [\n    {symbol: 'CT', name: 'Connecticut', pop: 3574097},\n    {symbol: 'ME', name: 'Maine', pop: 1328361},\n    {symbol: 'MA', name: 'Massachusetts', pop: 6547629},\n    {symbol: 'NH', name: 'New Hampshire', pop: 1316470},\n    {symbol: 'RI', name: 'Rhode Island', pop: 1052567},\n    {symbol: 'VT', name: 'Vermont', pop: 623741},\n];\n\nvar notSmall = (state) => state.pop >= 2000000;\n\nR.reduce((accum, state) => {\n    if (notSmall(state)) {\n        accum[state.symbol] = state.pop;\n    }\n    return accum;\n}, {}, states); //=> {\"CT\": 3574097, \"MA\": 6547629}\n```\n\n----------------------------------------\n\nTITLE: Including Ramda via Script Tag\nDESCRIPTION: HTML script tag for including the full Ramda library in a browser\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/yourCopyOf/ramda.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Minified Ramda via Script Tag\nDESCRIPTION: HTML script tag for including the minified version of Ramda in a browser\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/yourCopyOf/ramda.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Ramda via CDNJS\nDESCRIPTION: HTML script tag for including Ramda from CDNJS CDN\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/ramda/0.16.0/ramda.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Ramda via jsDelivr\nDESCRIPTION: Various HTML script tags for including Ramda from jsDelivr CDN with different version options\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/manual/README.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/ramda/0.16.0/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/ramda/0.16/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/ramda/latest/ramda.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Node Version from .nvmrc\nDESCRIPTION: Commands to install and use the Node.js version specified in the .nvmrc file using nvm (Node Version Manager).\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnvm install && nvm use\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Server\nDESCRIPTION: Command to start a local HTTP server to serve the documentation site on the default port 8080.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building Ramda Documentation\nDESCRIPTION: Make command to rebuild the documentation HTML page. This generates the docs/index.html file with JSDoc documentation.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake docs/index.html\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ramda Docs\nDESCRIPTION: Command to install all required dependencies for the Ramda documentation site using npm.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Server on Custom Port\nDESCRIPTION: Command to start the local HTTP server on a custom port (8081) when the default port is unavailable.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- -p 8081\n```\n\n----------------------------------------\n\nTITLE: Building Ramda Site Stylesheets\nDESCRIPTION: Make command to rebuild the main CSS stylesheet from Less source files. This compiles the Bootstrap-based styles into style.css.\nSOURCE: https://github.com/ramda/ramda.github.io/blob/master/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake style.css\n```"
  }
]