[
  {
    "owner": "rojo-rbx",
    "repo": "rojo.space",
    "content": "TITLE: Configuring a Complex Rojo Project for a Roblox Game\nDESCRIPTION: This example demonstrates a more complex Rojo project configuration for a Roblox game. It includes multiple services, custom properties, and file paths for different parts of the game structure.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/project-format.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Sisyphus Simulator\",\n  \"globIgnorePaths\": [\"**/*.spec.lua\"],\n  \"tree\": {\n    \"$className\": \"DataModel\",\n\n    \"HttpService\": {\n      \"$className\": \"HttpService\",\n      \"$properties\": {\n        \"HttpEnabled\": true\n      }\n    },\n\n    \"ReplicatedStorage\": {\n      \"$className\": \"ReplicatedStorage\",\n      \"$path\": \"src/ReplicatedStorage\"\n    },\n\n    \"StarterPlayer\": {\n      \"$className\": \"StarterPlayer\",\n\n      \"StarterPlayerScripts\": {\n        \"$className\": \"StarterPlayerScripts\",\n        \"$path\": \"src/StarterPlayerScripts\"\n      }\n    },\n\n    \"Workspace\": {\n      \"$className\": \"Workspace\",\n      \"$properties\": {\n        \"Gravity\": 67.3\n      },\n\n      \"Terrain\": {\n        \"$path\": \"Terrain.rbxm\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Simple Rojo Project for Bundling Source Files\nDESCRIPTION: This example shows a basic Rojo project configuration that bundles everything in the 'src' directory. It's suitable for creating a plugin or model.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/project-format.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"AwesomeLibrary\",\n  \"tree\": {\n    \"$path\": \"src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Rojo Project Structure in JSON\nDESCRIPTION: Demonstrates a simple Rojo project configuration that bundles everything in the 'src' directory, suitable for creating a plugin or model.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/project-format.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"AwesomeLibrary\",\n  \"tree\": {\n    \"$path\": \"src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Rojo Project Structure for a Roblox Game\nDESCRIPTION: Illustrates a more complex Rojo project configuration for a game called 'Sisyphus Simulator', including multiple services, custom properties, and file paths.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/project-format.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Sisyphus Simulator\",\n  \"globIgnorePaths\": [\"**/*.spec.lua\"],\n  \"tree\": {\n    \"$className\": \"DataModel\",\n\n    \"HttpService\": {\n      \"$className\": \"HttpService\",\n      \"$properties\": {\n        \"HttpEnabled\": true\n      }\n    },\n\n    \"ReplicatedStorage\": {\n      \"$className\": \"ReplicatedStorage\",\n      \"$path\": \"src/ReplicatedStorage\"\n    },\n\n    \"StarterPlayer\": {\n      \"$className\": \"StarterPlayer\",\n\n      \"StarterPlayerScripts\": {\n        \"$className\": \"StarterPlayerScripts\",\n        \"$path\": \"src/StarterPlayerScripts\"\n      }\n    },\n\n    \"Workspace\": {\n      \"$className\": \"Workspace\",\n      \"$properties\": {\n        \"Gravity\": 67.3\n      },\n\n      \"Terrain\": {\n        \"$path\": \"Terrain.rbxm\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Instance Properties in JSON for Rojo\nDESCRIPTION: This snippet demonstrates how to define basic instance properties using implicit property values in a Rojo project file. It shows how to set various property types like Vector3, Color3, boolean, and enum values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/project-format.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"MyPart\": {\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Size\": [3, 5, 3],\n        \"Color\": [0.5, 0, 0.5],\n        \"Anchored\": true,\n        \"Material\": \"Granite\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Rojo Live Sync Server with CLI\nDESCRIPTION: Launches the Rojo server that enables real-time synchronization between your project files and Roblox Studio. The server listens on a local port and provides a web interface for monitoring the sync status.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/getting-started/new-game.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrojo serve\n```\n\n----------------------------------------\n\nTITLE: Complex Rojo Project Configuration for Game Development\nDESCRIPTION: This snippet demonstrates a more complex Rojo project configuration for a game called 'Sisyphus Simulator'. It includes multiple services, custom properties, and file paths for different parts of the game structure.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/project-format.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Sisyphus Simulator\",\n  \"globIgnorePaths\": [\"**/*.spec.lua\"],\n  \"tree\": {\n    \"$className\": \"DataModel\",\n\n    \"HttpService\": {\n      \"$className\": \"HttpService\",\n      \"$properties\": {\n        \"HttpEnabled\": true\n      }\n    },\n\n    \"ReplicatedStorage\": {\n      \"$className\": \"ReplicatedStorage\",\n      \"$path\": \"src/ReplicatedStorage\"\n    },\n\n    \"StarterPlayer\": {\n      \"$className\": \"StarterPlayer\",\n\n      \"StarterPlayerScripts\": {\n        \"$className\": \"StarterPlayerScripts\",\n        \"$path\": \"src/StarterPlayerScripts\"\n      }\n    },\n\n    \"Workspace\": {\n      \"$className\": \"Workspace\",\n      \"$properties\": {\n        \"Gravity\": 67.3\n      },\n\n      \"Terrain\": {\n        \"$path\": \"Terrain.rbxm\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Roblox Place File with Rojo CLI\nDESCRIPTION: Generates a Roblox place file (.rbxlx) from a Rojo project. This command compiles your project files into a single Roblox place file that can be opened directly in Roblox Studio.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/getting-started/new-game.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrojo build -o build.rbxlx\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Model in Rojo\nDESCRIPTION: Example of a JSON model file that describes a Folder containing a Part and a RemoteEvent. This file would be named 'My Cool Model.model.json' and demonstrates how to define simple models in Rojo.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/sync-details.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ClassName\": \"Folder\",\n  \"Children\": [\n    {\n      \"Name\": \"RootPart\",\n      \"ClassName\": \"Part\",\n      \"Properties\": {\n        \"Size\": {\n          \"Type\": \"Vector3\",\n          \"Value\": [4, 4, 4]\n        }\n      }\n    },\n    {\n      \"Name\": \"SendMoney\",\n      \"ClassName\": \"RemoteEvent\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rojo with Foreman Configuration\nDESCRIPTION: Foreman configuration to install Rojo 6 from the stable release channel. This is added to the tools section of foreman.toml.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/getting-started/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nrojo = { source = \"rojo-rbx/rojo\", version = \"0.5\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Properties in JSON for Rojo Project\nDESCRIPTION: This snippet demonstrates how to define instance properties using implicit syntax in a Rojo project file. It shows how to set various property types like Vector3, Color3, boolean, and enum values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/project-format.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"MyPart\": {\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Size\": [3, 5, 3],\n        \"Color\": [0.5, 0, 0.5],\n        \"Anchored\": true,\n        \"Material\": \"Granite\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rojo Installation with Foreman\nDESCRIPTION: Configuration entry for installing Rojo using Foreman toolchain manager. Specifies the source and version in foreman.toml file.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nrojo = { source = \"rojo-rbx/rojo\", version = \"6\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Instance Properties in JSON for Rojo\nDESCRIPTION: This snippet shows how to use explicit property syntax in a Rojo project file. It's useful for exotic property types or recently added Roblox properties. Each property is defined with a Type and Value field.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/project-format.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"MyPart\": {\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Size\": {\n            \"Type\": \"Vector3\",\n            \"Value\": [3, 5, 3]\n        },\n        \"Color\": {\n            \"Type\": \"Color3\",\n            \"Value\": [0.5, 0, 0.5]\n        },\n        \"Anchored\": {\n            \"Type\": \"Bool\",\n            \"Value\": true\n        },\n        \"Material\": {\n            \"Type\": \"Enum\",\n            \"Value\": 832\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes in Rojo Project Files\nDESCRIPTION: Demonstrates how to specify the Attributes property for an instance in a Rojo project file. It shows both implicit and explicit formats for defining attributes with various value types.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"Attributes\": {\n\t\t\t\"Foo\": {\"Bool\": true},\n\t\t\t\"Bar\": {\"Vector3\": [1.0, 2.0, 3.0]},\n\t\t},\n\t\t\"AttributesSerialized\": {\n\t\t\t\"Attributes\": {\n\t\t\t\t\"Foo\": {\"Bool\": true},\n\t\t\t\t\"Bar\": {\"Vector3\": [1.0, 2.0, 3.0]},\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Instance Properties in JSON for Rojo Project\nDESCRIPTION: This snippet shows how to use explicit syntax for defining instance properties in a Rojo project file. It's useful for exotic property types or recently added Roblox properties that Rojo might not recognize automatically.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/project-format.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"MyPart\": {\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Size\": {\n            \"Type\": \"Vector3\",\n            \"Value\": [3, 5, 3]\n        },\n        \"Color\": {\n            \"Type\": \"Color3\",\n            \"Value\": [0.5, 0, 0.5]\n        },\n        \"Anchored\": {\n            \"Type\": \"Bool\",\n            \"Value\": true\n        },\n        \"Material\": {\n            \"Type\": \"Enum\",\n            \"Value\": 832\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Vector3 Properties in Rojo Configuration\nDESCRIPTION: Shows how to define Vector3 properties in Rojo using both implicit and explicit syntax. Vector3 requires X, Y, and Z float components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [-300.0, 0.0, 1500.0],\n\t\t\"ExplicitExample\": {\"Vector3\": [-300.0, 0.0, 1500.0]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Model Definition\nDESCRIPTION: Example of defining a Roblox model structure using JSON format\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/sync-details.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ClassName\": \"Folder\",\n  \"Children\": [\n    {\n      \"Name\": \"RootPart\",\n      \"ClassName\": \"Part\",\n      \"Properties\": {\n        \"Size\": [4, 4, 4]\n      }\n    },\n    {\n      \"Name\": \"SendMoney\",\n      \"ClassName\": \"RemoteEvent\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Vector2 Properties in Rojo Configuration\nDESCRIPTION: Shows how to define Vector2 properties in Rojo using both implicit and explicit syntax. Vector2 requires X and Y float components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [-50.0, 50.0],\n\t\t\"ExplicitExample\": {\"Vector2\": [-50.0, 50.0]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Color3 Properties in Rojo Project Files\nDESCRIPTION: Shows both implicit and explicit ways to specify Color3 properties in a Rojo project file using a list of R, G, and B components as floats in the range [0, 1].\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [\n\t\t\t0.6392156862745098,\n\t\t\t0.6352941176470588,\n\t\t\t0.6470588235294118\n\t\t],\n\t\t\"ExplicitExample\": {\n\t\t\t\"Color3\": [\n\t\t\t\t0.6392156862745098,\n\t\t\t\t0.6352941176470588,\n\t\t\t\t0.6470588235294118\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Vector3int16 Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define Vector3int16 properties in Rojo using both implicit and explicit syntax. Vector3int16 requires X, Y, and Z integer components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [60, 37, -450],\n\t\t\"ExplicitExample\": {\"Vector3int16\": [60, 37, -450]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Implicit Instance Property Value in Rojo\nDESCRIPTION: Shows how to set an implicit property value for the 'Anchored' property of a 'Part' instance in a Rojo project file.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/project-format.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Anchored\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Vector2int16 Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define Vector2int16 properties in Rojo using both implicit and explicit syntax. Vector2int16 requires X and Y integer components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [-300, 300],\n\t\t\"ExplicitExample\": {\"Vector2int16\": [-300, 300]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Property Syntax in Rojo 7\nDESCRIPTION: Illustrates the updated explicit property syntax in Rojo 7, which simplifies the format by combining Type and Value fields and introduces structured formats for complex types like CFrame.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"cool-skateboard\",\n\t\"tree\": {\n\t\t\"$className\": \"Part\",\n\t\t\"$properties\": {\n\t\t\t\"Material\": {\n\t\t\t\t\"Enum\": 512\n\t\t\t},\n\t\t\t\"Size\": {\n\t\t\t\t\"Vector3\": [2, 0.5, 6]\n\t\t\t},\n\t\t\t\"Color\": {\n\t\t\t\t\"Color3\": [1, 0, 0]\n\t\t\t},\n\t\t\t\"CFrame\": {\n\t\t\t\t\"CFrame\": {\n\t\t\t\t\t\"position\": [0, 10, 0],\n\t\t\t\t\t\"orientation\": [\n\t\t\t\t\t\t1, 0, 0,\n\t\t\t\t\t\t0, 1, 0,\n\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying CFrame Properties in Rojo Project Files\nDESCRIPTION: Illustrates both implicit and explicit ways to define CFrame properties in a Rojo project file, using either a flat list of components or an object with position and orientation fields.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [\n\t\t\t1.0, 2.0, 3.0,\n\t\t\t4.0, 5.0, 6.0,\n\t\t\t7.0, 8.0, 9.0,\n\t\t\t10.0, 11.0, 12.0\n\t\t],\n\t\t\"ExplicitExample\": {\n\t\t\t\"CFrame\": {\n\t\t\t\t\"position\": [1.0, 2.0, 3.0],\n\t\t\t\t\"orientation\": [\n\t\t\t\t\t[4.0, 5.0, 6.0],\n\t\t\t\t\t[7.0, 8.0, 9.0],\n\t\t\t\t\t[10.0, 11.0, 12.0]\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Model Definition Example in Rojo\nDESCRIPTION: Example of a .model.json file that describes a Folder containing a Part and RemoteEvent, demonstrating Rojo's JSON model format.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ClassName\": \"Folder\",\n  \"Children\": [\n    {\n      \"Name\": \"RootPart\",\n      \"ClassName\": \"Part\",\n      \"Properties\": {\n        \"Size\": {\n          \"Type\": \"Vector3\",\n          \"Value\": [4, 4, 4]\n        }\n      }\n    },\n    {\n      \"Name\": \"SendMoney\",\n      \"ClassName\": \"RemoteEvent\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying UDim Properties in Rojo Configuration\nDESCRIPTION: Shows how to define UDim properties in Rojo using explicit syntax only. UDim requires Scale (float) and Offset (integer) components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\"UDim\": [1.0, 32]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Font Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define Font properties in Rojo using both implicit and explicit syntax. Font properties require family, weight, and style fields as strings.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": {\n\t\t\t\"family\": \"rbxasset://fonts/families/LegacyArial.json\",\n\t\t\t\"weight\": \"Regular\",\n\t\t\t\"style\": \"Normal\"\n\t\t},\n\t\t\"ExplicitExample\": {\n\t\t\t\"Font\": {\n\t\t\t\t\"family\": \"rbxasset://fonts/families/LegacyArial.json\",\n\t\t\t\t\"weight\": \"Regular\",\n\t\t\t\t\"style\": \"Normal\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying NumberSequence Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define NumberSequence properties in Rojo using explicit syntax only. NumberSequence requires an array of keypoints, each with time, value, and envelope fields.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"NumberSequence\": {\n\t\t\t\t\"keypoints\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"time\": 0.0,\n\t\t\t\t\t\t\"value\": 5.0,\n\t\t\t\t\t\t\"envelope\": 2.0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"time\": 1.0,\n\t\t\t\t\t\t\"value\": 22.0,\n\t\t\t\t\t\t\"envelope\": 0.0\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying MaterialColors Properties in Rojo Configuration\nDESCRIPTION: Shows how to define MaterialColors properties in Rojo using both implicit and explicit syntax. MaterialColors are specified as an object mapping Material enum items to RGB color arrays.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": {\n\t\t\t\"Grass\": [10, 20, 30],\n\t\t\t\"Asphalt\": [40, 50, 60],\n\t\t\t\"LeafyGrass\": [255, 155, 55]\n\t\t},\n\t\t\"ExplicitExample\": {\n\t\t\t\"MaterialColors\": {\n\t\t\t\t\"Grass\": [10, 20, 30],\n\t\t\t\t\"Asphalt\": [40, 50, 60],\n\t\t\t\t\"LeafyGrass\": [255, 155, 55]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ColorSequence in Rojo Project Files\nDESCRIPTION: Illustrates how to explicitly specify a ColorSequence property in a Rojo project file using an object with keypoints, each containing time and color information.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"ColorSequence\": {\n\t\t\t\t\"keypoints\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"time\": 0.0,\n\t\t\t\t\t\t\"color\": [1.0, 1.0, 0.5]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"time\": 1.0,\n\t\t\t\t\t\t\"color\": [0.0, 0.0, 0.0]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying UDim2 Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define UDim2 properties in Rojo using explicit syntax only. UDim2 requires X and Y UDim components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\"UDim2\": [[-1.0, 100], [1.0, -100]]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Ray Properties with Object Format in Rojo Configuration\nDESCRIPTION: Shows how to define Ray properties in Rojo using explicit syntax with an object containing origin and direction Vector3 fields.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"Ray\": {\n\t\t\t\t\"origin\": [1.0, 2.0, 3.0],\n\t\t\t\t\"direction\": [4.0, 5.0, 6.0]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Rect Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define Rect properties in Rojo using explicit syntax. Rect properties require Min and Max Vector2 components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"Rect\": [\n\t\t\t\t[0.0, 5.0],\n\t\t\t\t[10.0, 15.0]\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Ray Properties with Array Format in Rojo Configuration\nDESCRIPTION: Shows how to define Ray properties in Rojo using explicit syntax with an array of Origin and Direction Vector3 components.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"Ray\": [\n\t\t\t\t[1.0, 2.0, 3.0],\n\t\t\t\t[4.0, 5.0, 6.0]\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying ProtectedString Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define ProtectedString properties in Rojo using both implicit and explicit syntax. ProtectedString properties use string values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": \"print('Hello world!')\",\n\t\t\"ExplicitExample\": {\"ProtectedString\": \"print('Hello world!')\"}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom PhysicalProperties in Rojo Configuration\nDESCRIPTION: Shows how to define custom PhysicalProperties in Rojo using explicit syntax with density, friction, elasticity, and weight parameters.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"PhysicalProperties\": {\n\t\t\t\t\"density\": 0.5,\n\t\t\t\t\"friction\": 1.0,\n\t\t\t\t\"elasticity\": 0.0,\n\t\t\t\t\"frictionWeight\": 50.0,\n\t\t\t\t\"elasticityWeight\": 25.0\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying PhysicalProperties as Default in Rojo Configuration\nDESCRIPTION: Shows one way to define PhysicalProperties in Rojo using explicit syntax with the 'Default' constant string.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\"PhysicalProperties\": \"Default\"}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrickColor in Rojo Project Files\nDESCRIPTION: Shows how to explicitly specify a BrickColor property in a Rojo project file using an integer representing the BrickColor number.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\"BrickColor\": 194}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying NumberRange Properties in Rojo Configuration\nDESCRIPTION: Shows how to define NumberRange properties in Rojo using explicit syntax only. NumberRange is specified as an array with Min and Max float values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\"NumberRange\": [-36.0, 94.0]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Color3uint8 in Rojo Project Files\nDESCRIPTION: Demonstrates how to explicitly define a Color3uint8 property in a Rojo project file using a list of R, G, and B components as integers in the range [0, 255].\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\n\t\t\t\"Color3uint8\": [163, 162, 165]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Float64 Properties in Rojo Project Files\nDESCRIPTION: Demonstrates both implicit and explicit ways to define Float64 properties in a Rojo project file using numeric values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": 15123.0,\n\t\t\"ExplicitExample\": {\"Float64\": 15123.0}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Bool Properties in Rojo Project Files\nDESCRIPTION: Demonstrates both implicit and explicit ways to define Bool properties in a Rojo project file using boolean values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": true,\n\t\t\"ExplicitExample\": {\"Bool\": false}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Faces in Rojo Project Files\nDESCRIPTION: Shows how to explicitly define the Faces property in a Rojo project file using a list of strings representing different face directions.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample1\": {\"Faces\": [\"Right\", \"Top\", \"Back\", \"Left\", \"Bottom\", \"Front\"]},\n\t\t\"ExplicitExample2\": {\"Faces\": [\"Right\", \"Top\", \"Front\"]},\n\t\t\"ExplicitExample3\": {\"Faces\": []}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying String Properties in Rojo Configuration\nDESCRIPTION: Shows how to define String properties in Rojo using both implicit and explicit syntax. String properties use string values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": \"Hello, world!\",\n\t\t\"ExplicitExample\": {\"String\": \"Hello, world!\"}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Properties in Rojo Project Files\nDESCRIPTION: Shows both implicit and explicit ways to define Content properties in a Rojo project file using string values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": \"rbxassetid://12345\",\n\t\t\"ExplicitExample\": {\"Content\": \"rbxassetid://12345\"}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Float32 Properties in Rojo Project Files\nDESCRIPTION: Illustrates both implicit and explicit ways to specify Float32 properties in a Rojo project file using numeric values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": 15.0,\n\t\t\"ExplicitExample\": {\"Float32\": 15.0}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Axes in Rojo Project Files\nDESCRIPTION: Shows how to explicitly define the Axes property in a Rojo project file. The Axes type is represented as a list of strings, each being either \"X\", \"Y\", or \"Z\".\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample1\": {\"Axes\": [\"X\", \"Y\", \"Z\"]},\n\t\t\"ExplicitExample2\": {\"Axes\": [\"X\", \"Z\"]},\n\t\t\"ExplicitExample3\": {\"Axes\": []}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Int32 Properties in Rojo Configuration\nDESCRIPTION: Shows how to define Int32 properties in Rojo using both implicit and explicit syntax. Int32 properties use integer values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": 6014,\n\t\t\"ExplicitExample\": {\"Int32\": 6014}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Tool with Meta Files in Rojo\nDESCRIPTION: Example of an init.meta.json file used to change a directory into a Tool instance and set its Grip property.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/sync-details.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"className\": \"Tool\",\n  \"properties\": {\n    \"Grip\": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Int64 Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define Int64 properties in Rojo using both implicit and explicit syntax. Int64 properties use integer values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": 23491023,\n\t\t\"ExplicitExample\": {\"Int64\": 23491023}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rojo Metadata with Meta Files\nDESCRIPTION: Example of a meta file (hello.meta.json) used to set Rojo-specific properties like ignoreUnknownInstances on filesystem-defined instances.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/sync-details.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreUnknownInstances\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Properties in Rojo Project Files\nDESCRIPTION: Demonstrates both implicit (using enum item name) and explicit (using enum item value) ways to specify Enum properties in a Rojo project file.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$className\": \"SurfaceLight\",\n\t\"$properties\": {\n\t\t\"Face\": \"Front\"\n\t}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$className\": \"SurfaceLight\",\n\t\"$properties\": {\n\t\t\"Face\": {\n\t\t\t\"Enum\": 5\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Meta File Configuration\nDESCRIPTION: Meta file example showing how to configure a Tool instance with custom properties\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/sync-details.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"className\": \"Tool\",\n  \"properties\": {\n    \"Grip\": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Tags Properties in Rojo Configuration\nDESCRIPTION: Demonstrates how to define Tags properties in Rojo using both implicit and explicit syntax. Tags are specified as an array of strings.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ImplicitExample\": [\"foo\", \"con'fusion?!\", \"bar\"],\n\t\t\"ExplicitExample\": {\"Tags\": [\"foo\", \"con'fusion?!\", \"bar\"]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Meta File for Instance Properties\nDESCRIPTION: Example of using meta files to set instance properties like Disabled on scripts\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/sync-details.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"Disabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BinaryString in Rojo Project Files\nDESCRIPTION: Illustrates how to explicitly specify a BinaryString property in a Rojo project file. The value is represented as a base64-encoded string.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/properties.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$properties\": {\n\t\t\"ExplicitExample\": {\"BinaryString\": \"SGVsbG8sIHdvcmxkIQ==\"}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example CSV Localization Table\nDESCRIPTION: Sample CSV format for defining localization strings that can be imported into Roblox\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/sync-details.md#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nKey,Source,Context,Example,es\nAck,Ack!,,An exclamation of despair,¡Ay!\n```\n\n----------------------------------------\n\nTITLE: Implicit Property Syntax in Rojo 6/7\nDESCRIPTION: Demonstrates the implicit syntax for defining properties in Rojo project files, which remains unchanged between versions 6 and 7. Shows how to define a Part with basic properties like Material, Size, Color, and CFrame.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"cool-skateboard\",\n\t\"tree\": {\n\t\t\"$className\": \"Part\",\n\t\t\"$properties\": {\n\t\t\t\"Material\": \"Wood\",\n\t\t\t\"Size\": [2, 0.5, 6],\n\t\t\t\"Color\": [1, 0, 0],\n\t\t\t\"CFrame\": [\n\t\t\t\t0, 10, 0,\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Meta File for Converting Folder to Tool in Rojo\nDESCRIPTION: Example of an init.meta.json file that changes a folder's class to Tool and sets its Grip property, demonstrating class transformation.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"className\": \"Tool\",\n  \"properties\": {\n    \"Grip\": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Property Syntax in Rojo 6\nDESCRIPTION: Shows the explicit property syntax used in Rojo 6, which uses Type and Value fields for each property. This format is more verbose and was used for special cases like custom enum values.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"cool-skateboard\",\n\t\"tree\": {\n\t\t\"$className\": \"Part\",\n\t\t\"$properties\": {\n\t\t\t\"Material\": {\n\t\t\t\t\"Type\": \"Enum\",\n\t\t\t\t\"Value\": 512\n\t\t\t},\n\t\t\t\"Size\": {\n\t\t\t\t\"Type\": \"Vector3\",\n\t\t\t\t\"Value\": [2, 0.5, 6]\n\t\t\t},\n\t\t\t\"Color\": {\n\t\t\t\t\"Type\": \"Color3\",\n\t\t\t\t\"Value\": [1, 0, 0]\n\t\t\t},\n\t\t\t\"CFrame\": {\n\t\t\t\t\"Type\": \"CFrame\", \n\t\t\t\t\"Value\": [\n\t\t\t\t\t0, 10, 0,\n\t\t\t\t\t1, 0, 0,\n\t\t\t\t\t0, 1, 0,\n\t\t\t\t\t0, 0, 1\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Meta File for Disabling Scripts in Rojo\nDESCRIPTION: Example of a meta file that sets a Script instance's Disabled property to true, showing how to configure instance properties.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"Disabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Property Type with Explicit Value in Rojo\nDESCRIPTION: Shows how to override the default property type by explicitly specifying a different type for the 'Anchored' property of a 'Part' instance.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/project-format.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Anchored\": {\n        \t\"String\": \"Hello, world!\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Meta File for Ignoring Unknown Instances in Rojo\nDESCRIPTION: Example of a meta file that configures Rojo to ignore unknown instances when live-syncing, useful for mixed environments.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreUnknownInstances\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Instance Property Value in Rojo\nDESCRIPTION: Demonstrates how to explicitly specify a property value type for the 'Anchored' property of a 'Part' instance in a Rojo project file.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/project-format.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$className\": \"Part\",\n    \"$properties\": {\n        \"Anchored\": {\n        \t\"Bool\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Instance Structure from JSON Model\nDESCRIPTION: Diagram showing how Rojo transforms the JSON model definition into Roblox instances.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  parent(\"My Cool Model (Folder)\")\n  part(\"RootPart (Part)\")\n  remote(\"SendMoney (RemoteEvent)\")\n\n  parent --> part\n  parent --> remote\n```\n\n----------------------------------------\n\nTITLE: Creating a CSV Localization Table in Rojo\nDESCRIPTION: Example of a CSV file that Rojo transforms into a LocalizationTable instance. The file follows Roblox's format for importing and exporting localization information.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/sync-details.md#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nKey,Source,Context,Example,es\nAck,Ack!,,An exclamation of despair,¡Ay!\n```\n\n----------------------------------------\n\nTITLE: Example CSV Localization Table for Rojo\nDESCRIPTION: Sample CSV format for a localization table that Rojo converts into a LocalizationTable instance in Roblox.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nKey,Source,Context,Example,es\nAck,Ack!,,An exclamation of despair,¡Ay!\n```\n\n----------------------------------------\n\nTITLE: Disabling Scripts with Meta Files in Rojo\nDESCRIPTION: Example of a meta file (foo.meta.json) used to set properties on Script instances, such as setting the Disabled property to true.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/sync-details.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"Disabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Roblox Instance Structure from init Scripts\nDESCRIPTION: Diagram showing how Rojo transforms the folder structure with init scripts into Roblox instances.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  my_model(\"My Model (Script)\")\n  foo(\"Foo (Script)\")\n\n  my_model --> foo\n```\n\n----------------------------------------\n\nTITLE: JSON Module Example\nDESCRIPTION: Example of JSON data that gets converted to a Lua ModuleScript return table\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/sync-details.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hello\": \"world!\",\n  \"bool\": true,\n  \"array\": [1, 2, 3],\n  \"object\": {\n    \"key 1\": 1337,\n    \"key 2\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example for init Scripts in Rojo\nDESCRIPTION: Example showing how init scripts transform their parent folders in Rojo's filesystem-to-Roblox conversion.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/sync-details.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  my_model(My Model/)\n  init(init.server.lua)\n  foo(foo.lua)\n\n  my_model --> init\n  my_model --> foo\n```\n\n----------------------------------------\n\nTITLE: Generated Lua Module\nDESCRIPTION: The resulting Lua code generated from the JSON module example\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/sync-details.md#2025-04-22_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nreturn {\n\tHello = \"world!\",\n\tarray = {1, 2, 3},\n\tbool = true,\n\tobject = {\n\t\t[\"key 1\"] = 1337,\n\t\t[\"key 2\"] = {},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Rojo Project to Roblox.com via CLI\nDESCRIPTION: Publishes the Rojo project to an existing Roblox.com game using the CLI command. Requires place ID and security cookie.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/new-game.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrojo upload --asset_id [PLACE ID] --cookie \"[SECURITY COOKIE]\"\n```\n\n----------------------------------------\n\nTITLE: Simple Rojo Project Configuration for Bundling Source Directory\nDESCRIPTION: This snippet shows a basic Rojo project configuration that bundles everything in the 'src' directory. It's suitable for creating a plugin or model.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/project-format.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"AwesomeLibrary\",\n  \"tree\": {\n    \"$path\": \"src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Rojo Live Sync Server via CLI\nDESCRIPTION: Initiates the Rojo live sync server to allow real-time synchronization with Roblox Studio.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/new-game.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrojo serve\n```\n\n----------------------------------------\n\nTITLE: Building Production Version of Rojo Website\nDESCRIPTION: Command to generate a static production build of the website. This creates optimized static content in the 'build' directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Building Roblox Place File with Rojo CLI\nDESCRIPTION: Generates a Roblox place file (.rbxl) from the Rojo project using the CLI command.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/new-game.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrojo build -o build.rbxl\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Rojo Alternatives Content in JSX\nDESCRIPTION: This code snippet imports content from an external Markdown file and renders it within the page. It uses JSX syntax to include the content component.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/rojo-alternatives.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from \"@site/docs/rojo-alternatives.md\";\n\n<Content />\n```\n\n----------------------------------------\n\nTITLE: Initializing Rojo Project via CLI\nDESCRIPTION: Creates a new Rojo project folder with necessary files using the CLI command.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/new-game.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrojo init my-new-game\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with React iframe in Markdown\nDESCRIPTION: This snippet shows how to embed a YouTube video using an iframe element with React JSX syntax within a Markdown document. It sets specific styling, dimensions, and security attributes for the embedded video.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/docs/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n\tstyle={{margin: \"0 auto\", maxWidth: \"100%\"}}\n\twidth=\"560\"\n\theight=\"315\"\n\tsrc=\"https://www.youtube-nocookie.com/embed/czlvzEyhaBc\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\tallowFullScreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Uploading Place to Roblox.com with Rojo CLI\nDESCRIPTION: Automatically publishes a built Rojo project to Roblox.com. Requires a place ID and authentication cookie with write access to the game. On Windows with Roblox Studio installed, the cookie parameter is optional.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/getting-started/new-game.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrojo upload --asset_id [PLACE ID] --cookie \"[SECURITY COOKIE]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Rojo Project with CLI\nDESCRIPTION: Creates a new Rojo project folder containing all necessary files to get started with Roblox game development. The command creates a directory with the specified name and populates it with the default Rojo project structure.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/getting-started/new-game.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrojo init my-new-game\n```\n\n----------------------------------------\n\nTITLE: Installing Rojo Plugin via CLI\nDESCRIPTION: Command to install or upgrade the Rojo plugin using the Rojo CLI.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrojo plugin install\n```\n\n----------------------------------------\n\nTITLE: Installing Rojo via Cargo\nDESCRIPTION: Command to install Rojo version 6 using Rust's package manager Cargo.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/getting-started/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo install rojo --version ^6\n```\n\n----------------------------------------\n\nTITLE: Installing Rojo via Cargo\nDESCRIPTION: Command to install Rojo 0.5 using Rust's package manager Cargo. This will compile Rojo from source and install it on the system.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/getting-started/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo install rojo --version ^0.5\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Rojo Management Types\nDESCRIPTION: Structured documentation explaining the differences between fully and partially managed Rojo implementations, including pros and cons for each approach.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/full-vs-partial.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: /reference/full-vs-partial/\ntitle: Fully vs Partially Managed Rojo\n---\n\nRojo is designed to be adopted incrementally. How much of your project Rojo manages is up to you!\n\nThere are two primary categories of ways to use Rojo: *Fully Managed*, where everything is managed by Rojo, and *Partially Managed*, where Rojo only manages a slice of your project.\n\n## Fully Managed\nIn a fully managed game project, Rojo controls every instance. A fully managed Rojo project can be built from scratch using `rojo build`.\n\nFully managed projects are most practical for libraries, plugins, and simple games.\n\nRojo's goal is to make it practical and easy for _every_ project to be fully managed, but we're not quite there yet!\n\n### Pros\n* Fully reproducible builds from scratch\n* Everything checked into version control\n\n### Cons\n* Without two-way sync, models have to be saved manually\n    * This can be done with the 'Save to File...' menu in Roblox Studio\n    * This will be solved by Two-Way Sync ([issue #164](https://github.com/LPGhatguy/rojo/issues/164))\n* Rojo can't manage everything yet\n    * Refs are currently broken ([issue #142](https://github.com/LPGhatguy/rojo/issues/142))\n\n## Partially Managed\nIn a partially managed project, Rojo only handles a slice of the game. This could be as small as a couple scripts, or as large as everything except `Workspace`!\n\nThe rest of the place's content can be versioned using Team Create or checked into source control.\n\nPartially managed projects are most practical for complicated games, or games that are migrating to use Rojo.\n\n### Pros\n* Easier to adopt gradually\n* Integrates with Team Create\n\n### Cons\n* Not everything is in version control, which makes merges tougher\n* Rojo can't live-sync instances like Terrain, MeshPart, or CSG operations yet\n    * Will be fixed with plugin escalation ([issue #169](https://github.com/LPGhatguy/rojo/issues/169))\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Documentation\nDESCRIPTION: HTML iframe code for embedding a YouTube video about Rojo from RDC 2019, with responsive styling and security parameters.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v6/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tstyle={{margin: \"0 auto\", maxWidth: \"100%\"}}\n\twidth=\"560\"\n\theight=\"315\"\n\tsrc=\"https://www.youtube-nocookie.com/embed/czlvzEyhaBc\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\tallowFullScreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markdown Content in React for Documentation\nDESCRIPTION: This snippet shows how to import content from an external markdown file and render it as a React component. It's a common pattern in documentation sites built with frameworks like Docusaurus.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from \"@site/docs/intro.md\";\n\n<Content />\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Help Content in Docusaurus MDX\nDESCRIPTION: This code imports content from a help documentation file and renders it within the current page using JSX syntax. It demonstrates how Docusaurus can modularize content across files.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/versioned_docs/version-v0.5/help.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from \"@site/docs/help.mdx\";\n\n<Content />\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Rojo Website\nDESCRIPTION: Command to launch a local development server that provides live reloading. This starts a local instance of the site and opens a browser window automatically.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Rojo Website\nDESCRIPTION: Command to install all required npm dependencies for the Rojo website. This is the first step before starting development or building the site.\nSOURCE: https://github.com/rojo-rbx/rojo.space/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```"
  }
]