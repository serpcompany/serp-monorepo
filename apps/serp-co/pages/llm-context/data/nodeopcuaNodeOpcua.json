[
  {
    "owner": "node-opcua",
    "repo": "node-opcua",
    "content": "TITLE: Creating and Initializing an OPC UA Server using node-opcua in JavaScript\nDESCRIPTION: This snippet shows how to import the node-opcua SDK modules and instantiate an OPCUAServer object with specific options such as port and resource path. It also includes server build information setup and demonstrates asynchronous initialization of the server, preparing it for further configuration. Dependencies include the node-opcua package and Node.js runtime. The snippet establishes a foundation for creating and running an OPC UA server.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { OPCUAServer, Variant, DataType, StatusCodes} = require(\"node-opcua\");\n\n// Let's create an instance of OPCUAServer\nconst server = new OPCUAServer({\n    port: 4334, // the port of the listening socket of the server\n    resourcePath: \"/UA/MyLittleServer\", // this path will be added to the endpoint resource name\n    buildInfo : {\n        productName: \"MySampleServer1\",\n        buildNumber: \"7658\",\n        buildDate: new Date(2014,5,2)\n    }\n});\n\n(async ()=>{\n    await server.initialize();\n    console.log(\"initialized\");\n    // post initialization steps here\n    // start the server can be called later\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing a complete OPC UA server with methods in JavaScript\nDESCRIPTION: A full implementation of an OPC UA server that exposes a method. This snippet includes the main program structure with error handling using async/await.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_method.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { \n    OPCUAServer,\n    DataType,\n    Variant,VariantArrayType,\n    StatusCodes,\n    makeAccessLevelFlag \n} = require(\"node-opcua\");\n\n(async () => {\n\n    try {\n        const server = new OPCUAServer({\n    port: 4334 // the port of the listening socket of the server\n});\n\n\nawait server.initialize();\n\nconst addressSpace = server.engine.addressSpace;\nconst namespace = addressSpace.getOwnNamespace();\n\nconst myDevice = namespace.addObject({\n    organizedBy: addressSpace.rootFolder.objects,\n    browseName: \"MyDevice\"\n});\n\nconst method = namespace.addMethod(myDevice,{\n\n    browseName: \"Bark\",\n\n    inputArguments:  [\n        {\n            name:\"nbBarks\",\n            description: { text: \"specifies the number of time I should bark\" },\n            dataType: DataType.UInt32        \n        },{\n            name:\"volume\",\n            description: { text: \"specifies the sound volume [0 = quiet ,100 = loud]\" },\n            dataType: DataType.UInt32\n        }\n     ],\n\n    outputArguments: [{\n         name:\"Barks\",\n         description:{ text: \"the generated barks\" },\n         dataType: DataType.String ,\n         valueRank: 1\n    }]\n});\n\n// optionally, we can adjust userAccessLevel attribute \nmethod.outputArguments.userAccessLevel = makeAccessLevelFlag(\"CurrentRead\");\nmethod.inputArguments.userAccessLevel = makeAccessLevelFlag(\"CurrentRead\");\n\nmethod.bindMethod((inputArguments,context,callback) => {\n\n    const nbBarks = inputArguments[0].value;\n    const volume =  inputArguments[1].value;\n\n    console.log(\"Hello World ! I will bark \",nbBarks,\" times\");\n    console.log(\"the requested volume is \",volume,\"\");\n    const sound_volume = Array(volume).join(\"!\");\n\n    const barks = [];\n    for(let i=0; i < nbBarks; i++){\n        barks.push(\"Whaff\" + sound_volume);\n    }\n\n    const callMethodResult = {\n        statusCode: StatusCodes.Good,\n        outputArguments: [{\n                dataType: DataType.String,\n                arrayType: VariantArrayType.Array,\n                value :barks\n        }]\n    };\n    callback(null,callMethodResult);\n});\n\nawait server.start();\nconst endpointUrl = server.getEndpointUrl();\nconsole.log(\" the primary server endpoint url is \", endpointUrl );\n\nconsole.log(\"Server is now listening ... ( press CTRL+C to stop)\");\nawait new Promise((resolve) => process.once(\"SIGINT\", resolve));\nawait server.shutdown();\nconsole.log(\"Server has shut down\");\n    }\n    catch(err) {\n        console.log(err);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Node-OPCUA Client\nDESCRIPTION: Imports necessary classes and constants from the 'node-opcua' library, such as OPCUAClient, AttributeIds, and resolveNodeId, as well as the 'async' library for flow control. This makes these components available for use in the client script.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { OPCUAClient, makeBrowsePath, AttributeIds, resolveNodeId, TimestampsToReturn} = require(\"node-opcua\");\nconst async = require(\"async\");\n```\n\n----------------------------------------\n\nTITLE: Starting the OPC UA Server and Retrieving Endpoint URL in JavaScript\nDESCRIPTION: This snippet explains how to start the OPC UA server asynchronously, enabling it to listen for client connections, and how to obtain and log the primary server endpoint URL. The start method accepts a callback triggered on server start completion. The endpoint URL is retrieved from the server's endpoints array and endpointDescriptions method, providing clients with the necessary connection information. This requires a fully initialized server instance.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.start(function() {\n    console.log(\"Server is now listening ... ( press CTRL+C to stop)\");\n    console.log(\"port \", server.endpoints[0].port);\n    // display endpoint url\n    const endpointUrl = server.endpoints[0].endpointDescriptions()[0].endpointUrl;\n    console.log(\" the primary server endpoint url is \", endpointUrl );\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Starting the OPC UA Server - Node.js JavaScript\nDESCRIPTION: Creates and starts an OPC UA Server instance with configuration for product, build, and port using node-opcua. Initializes server, constructs address space, and begins listening for client connections. Outputs server endpoint information to the console. Requires address space constructor and properly initialized OPCUAServer.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new OPCUAServer({\n    port: 4334, // the port of the listening socket of the servery\n    buildInfo: {\n        productName: \"WeatherStation\",\n        buildNumber: \"7658\",\n        buildDate: new Date(2019, 6, 14)\n    }\n});\n\nawait server.initialize();\n\nconstruct_my_address_space(server);\n\nawait server.start();\n\nconsole.log(\"Server is now listening ... ( press CTRL+C to stop)\");\nconsole.log(\"port \", server.endpoints[0].port);\nconst endpointUrl = server.endpoints[0].endpointDescriptions()[0].endpointUrl;\nconsole.log(\" the primary server endpoint url is \", endpointUrl);\n```\n\n----------------------------------------\n\nTITLE: Browsing Root Folder (TypeScript)\nDESCRIPTION: Browses the 'RootFolder' node on the OPC UA server to discover its organized child nodes. It filters results to include Objects and Variables, specified reference types, and retrieves their BrowseName, DisplayName, NodeClass, and TypeDefinition.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst browseResult = await session.browse({ \n  nodeId: \"RootFolder\",\n  referenceTypeId: \"Organizes\",\n  includeSubtypes: true,\n  nodeClassMask: NodeClassMask.Object | NodeClassMask.Variable,\n  browseDirection: BrowseDirection.Forward,\n  resultMask: ResultMask.BrowseName | ResultMask.DisplayName | ResultMask.NodeClass | ResultMask.TypeDefinition\n});\n\nconsole.log(\"references of RootFolder :\");\nfor (const reference of browseResult.references) {\n  console.log(\"   -> \", reference.browseName.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting OPC UA Server - node-opcua - JavaScript\nDESCRIPTION: Demonstrates creating an `OPCUAServer` instance with specific port and resource path configurations. It shows how to initialize the server, load nodesets, call a function to build the address space, and finally start the server, printing connection details.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server_with_a_historizing_variable.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Let's create an instance of OPCUAServer\nconst server = new OPCUAServer({\n    port: 26543, // the port of the listening socket of the server\n    resourcePath: \"/UA/MyLittleServer\", // this path will be added to the endpoint resource name\n    nodeset_filename: [nodesets.standard]\n});\n\nawait server.initialize();\nconsole.log(\"certificateFile = \", server.certificateFile);\nconsole.log(\"privateKeyFile  = \", server.privateKeyFile);\nconsole.log(\"rejected folder = \", server.serverCertificateManager.rejectedFolder);\nconsole.log(\"trusted  folder = \", server.serverCertificateManager.trustedFolder);\n\nconstruct_address_space(server);\n\nawait server.start();\nconsole.log(\"Server is now listening ... ( press CTRL+C to stop)\");\nconst endpointUrl = server.getEndpointUrl();\nconsole.log(\" the primary server endpoint url is \", endpointUrl);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Objects and Variables to OPC UA Server Namespace in JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the server's address space by adding a custom object 'MyDevice' under the default Objects folder and populating it with variables. It includes adding a read-only variable with a getter function that updates every 500ms, a read-write variable with a custom nodeId and getter/setter functions, and a variable exposing free memory percentage using a utility function. Dependencies include access to the server instance after initialization and the 'os' module for memory statistics. The snippet shows how to create variable nodes with automatic and manual nodeId assignment and customize data update intervals.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst addressSpace = server.engine.addressSpace;\nconst namespace = addressSpace.getOwnNamespace();\n\n// add a new object into the objects folder\nconst device = namespace.addObject({\n    organizedBy: addressSpace.rootFolder.objects,\n    browseName: \"MyDevice\"\n});\n\n// add a read-only variable that changes every 500 ms\nlet variable1 = 1;\nsetInterval(() => {  variable1 += 1; }, 500);\nnamespace.addVariable({\n    componentOf: device,\n    browseName: \"MyVariable1\",\n    dataType: \"Double\",\n    value: {\n        get: () => new Variant({dataType: DataType.Double, value: variable1})\n    }\n});\n\n// add a read-write variable with custom NodeId\nlet variable2 = 10.0;\nnamespace.addVariable({\n    componentOf: device,\n    nodeId: \"ns=1;b=1020FFAA\",\n    browseName: \"MyVariable2\",\n    dataType: \"Double\",\n    minimumSamplingInterval: 1234,\n    value: {\n        get: () => new Variant({dataType: DataType.Double, value: variable2}),\n        set: (variant) => {\n            variable2 = parseFloat(variant.value);\n            return StatusCodes.Good;\n        }\n    }\n});\n\n// function to calculate free memory percentage\nconst os = require(\"os\");\nfunction available_memory() {\n    const percentageMemUsed = os.freemem() / os.totalmem() * 100.0;\n    return percentageMemUsed;\n}\n\n// add a variable exposing free memory\nnamespace.addVariable({\n    componentOf: device,\n    nodeId: \"s=free_memory\",\n    browseName: \"FreeMemory\",\n    dataType: \"Double\",\n    value: {\n        get: () => new Variant({dataType: DataType.Double, value: available_memory()})\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring OPC UA Server Script - node-opcua - JavaScript\nDESCRIPTION: Imports core modules (`OPCUAServer`, `nodesets`, `standardUnits`) from `node-opcua` and outlines the basic structure for initializing, starting the server, and constructing the address space. It defines the main function calls involved in the server lifecycle.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server_with_a_historizing_variable.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\nconst { OPCUAServer, nodesets, standardUnits} = require(\"node-opcua\");\n\nfunction construct_address_space(server) {\n  const addressSpace = server.engine.addressSpace;\n  const namespace = addressSpace.getOwnNamespace();\n  _\"create the vessel object\"\n  _\"create historizing variable\"\n  _\"adding historical configuration\"\n  _\"simulating data\"\n}\n\n(async () => {\n\n    try {\n        _\"creating and starting the server\"\n    } catch(err) {\n        console.log(\"Error = \", err);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Finding NodeId by Browse Path (TypeScript)\nDESCRIPTION: Translates a hierarchical browse path from the 'RootFolder' to a specific node ('/Objects/Server.ServerStatus.BuildInfo.ProductName') into its corresponding NodeId using `session.translateBrowsePath`. This is useful when the NodeId is unknown but the path is known.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst browsePath = makeBrowsePath(\n  \"RootFolder\",\n  \"/Objects/Server.ServerStatus.BuildInfo.ProductName\"\n);\n\nconst result = await session.translateBrowsePath(browsePath);\nconst productNameNodeId = result.targets[0].targetId;\nconsole.log(\" Product Name nodeId = \", productNameNodeId.toString());\n```\n\n----------------------------------------\n\nTITLE: Reading Variable Value Using Session Read (Another Example) (TypeScript)\nDESCRIPTION: Reads the 'Value' attribute of another variable node ('ns=1;s=free_memory') using the `session.read` method. This demonstrates reading a different node, showing how to specify the target `nodeId` and `attributeId`.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataValue2 = await session.read({\n  nodeId: \"ns=1;s=free_memory\",\n  attributeId: AttributeIds.Value\n});\nconsole.log(\" value = \", dataValue2.toString());\n```\n\n----------------------------------------\n\nTITLE: Initializing Server and AddressSpace using node-opcua in JavaScript\nDESCRIPTION: This snippet sets up the OPC UA server instance, initializes it, and constructs the address space. It defines a new custom object named 'MyDevice' within the server's namespace. The code requires 'node-opcua' and expects default configuration for the network port and address space. The server listens on port 4334 and outputs its status to the console upon startup.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_da_variables.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst server = new OPCUAServer({\n    port: 4334 // the port of the listening socket of the server\n});\n\n\nawait server.initialize();\n\nconst addressSpace = server.engine.addressSpace;\n\nconst namespace = addressSpace.getOwnNamespace();\n\nconst myDevice = namespace.addObject({\n    organizedBy: addressSpace.rootFolder.objects,\n    browseName: \"MyDevice\"\n});\n\n_\"adding a DA Variable\"\n\n\nawait server.start();\nconsole.log(\"Server is now listening ... ( press CTRL+C to stop)\");\n```\n\n----------------------------------------\n\nTITLE: Finding NodeId from Browse Path using TranslateBrowsePath\nDESCRIPTION: Translates a symbolic browse path ('/Objects/Server.ServerStatus.BuildInfo.ProductName') into a direct NodeId. This is useful when the exact NodeId of a node is unknown but its path relative to a known node (like RootFolder or Objects) is available.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst browsePath = [\n  makeBrowsePath(\n    \"RootFolder\",\n    \"/Objects/Server.ServerStatus.BuildInfo.ProductName\"\n  )\n];\n\nlet productNameNodeId;\nthe_session.translateBrowsePath(browsePath, function(err, results) {\n  if (!err) {\n    console.log(results[0].toString());\n    productNameNodeId = results[0].targets[0].targetId;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Variable Value Using Session Read (TypeScript)\nDESCRIPTION: Reads the 'Value' attribute of a specific variable node ('ns=3;s=Scalar_Simulation_String') using the `session.read` method. It constructs a `ReadValueId` object specifying the target node and the attribute to read.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst maxAge = 0;\nconst nodeToRead = {\n  nodeId: \"ns=3;s=Scalar_Simulation_String\",\n  attributeId: AttributeIds.Value\n};\nconst dataValue = await session.read(nodeToRead, maxAge);\nconsole.log(\" value \", dataValue.toString());\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription for Monitoring Data Changes\nDESCRIPTION: Creates an OPC UA subscription on the server session. Subscriptions allow the client to receive data change notifications from the server instead of continuously polling. Configuration options like publishing interval and lifetime are specified.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst subscriptionOptions = {\n  maxNotificationsPerPublish: 1000,\n  publishingEnabled: true,\n  requestedLifetimeCount: 100,\n  requestedMaxKeepAliveCount: 10,\n  requestedPublishingInterval: 1000\n};\nthe_session.createSubscription2(subscriptionOptions, (err, subscription) => {\n  if (err) {\n    return callback(err);\n  }\n\n  the_subscription = subscription;\n\n  the_subscription\n    .on(\"started\", () => {\n      console.log(\n        \"subscription started for 2 seconds - subscriptionId=\",\n        the_subscription.subscriptionId\n      );\n    })\n    .on(\"keepalive\", function() {\n      console.log(\"subscription keepalive\");\n    })\n    .on(\"terminated\", function() {\n      console.log(\"terminated\");\n    });\n  callback();\n});\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Client (TypeScript)\nDESCRIPTION: Asynchronously disconnects the OPC UA client instance from the endpoint. Awaits the disconnection process to complete and logs a confirmation message indicating the client operation is done.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnect();\nconsole.log(\"done !\");\n```\n\n----------------------------------------\n\nTITLE: Writing Data to File with ClientFile - Javascript\nDESCRIPTION: This snippet demonstrates writing data to the OPC UA file node using the 'write()' method. Data must be provided as a Node.js Buffer, and writing occurs at the current position. This method requires the file to be opened in a writable mode.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataToWrite = Buffer.from(\"Some data\");\n\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\nawait clientFile.write(dataToWrite);\n```\n\n----------------------------------------\n\nTITLE: Reading Data from File with ClientFile - Javascript\nDESCRIPTION: This snippet shows how to read a specified number of bytes from the OPC UA file node using the 'read()' method. Reading starts from the current position. This method requires the file to be opened in a readable mode and returns a Buffer.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\n\n// read 200 bytes from position 32\nawait clientFile.setPosition([0,32]);\nconst data: Buffer = await clientFile.read(200);\n```\n\n----------------------------------------\n\nTITLE: Binding implementation to an OPC UA method in JavaScript\nDESCRIPTION: Implementing the functionality of an OPC UA method by binding a JavaScript function to it. This snippet demonstrates how to process input arguments and return output values.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_method.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmethod.bindMethod((inputArguments,context,callback) => {\n\n    const nbBarks = inputArguments[0].value;\n    const volume =  inputArguments[1].value;\n\n    console.log(\"Hello World ! I will bark \",nbBarks,\" times\");\n    console.log(\"the requested volume is \",volume,\"\");\n    const sound_volume = Array(volume).join(\"!\");\n\n    const barks = [];\n    for(let i=0; i < nbBarks; i++){\n        barks.push(\"Whaff\" + sound_volume);\n    }\n\n    const callMethodResult = {\n        statusCode: StatusCodes.Good,\n        outputArguments: [{\n                dataType: DataType.String,\n                arrayType: VariantArrayType.Array,\n                value :barks\n        }]\n    };\n    callback(null,callMethodResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Session on OPC UA Server\nDESCRIPTION: Creates a secure session with the connected OPC UA server. A session is required to perform most OPC UA operations like browsing, reading, writing, and subscribing. The created session object is stored in 'the_session' variable for later use.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.createSession(function(err, session) {\n  if (err) {\n    return callback(err);\n  }\n  the_session = session;\n  callback();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Analog DA Variable to AddressSpace using node-opcua in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and add an analog Data Access (DA) variable representing a temperature sensor to the server's address space. The analog item is configured with engineering and instrument ranges, engineering units, value precision, and a getter that supplies a dynamic value using the Variant and DataType constructs. It depends on the prior definition of 'myDevice', 'namespace', 'standardUnits', 'DataType', and 'Variant' from 'node-opcua'. The value is programmatically supplied and updates via the 'fakeValue' variable.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_da_variables.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet fakeValue = 1.0;\n\nconst analogItem = namespace.addAnalogDataItem({\n\n    componentOf: myDevice,\n\n    browseName: \"TemperatureSensor\",\n\n    definition: \"(tempA -25) + tempB\",\n    valuePrecision: 0.5,\n    engineeringUnitsRange: { low: 100 , high: 200},\n    instrumentRange: { low: -100 , high: +200},\n    engineeringUnits: standardUnits.degree_celsius,\n    dataType: \"Double\",\n    value: { get: ()=> new Variant({dataType: DataType.Double , value: fakeValue}) }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Node-OPCUA Client to Server\nDESCRIPTION: Initiates a connection from the OPC UA client to the specified endpoint URL. This is the first step in establishing communication with the server. The callback is invoked upon success or failure, passing an error object if the connection fails.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclient.connect(endpointUrl, function(err) {\n  if (err) {\n    console.log(\" cannot connect to endpoint :\", endpointUrl);\n  } else {\n    console.log(\"connected !\");\n  }\n  callback(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating OPC UA Session (TypeScript)\nDESCRIPTION: Asynchronously creates a session with the connected OPC UA server. A session is required to perform operations like browsing, reading, writing, and subscribing. Logs a confirmation upon session creation.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await client.createSession();\nconsole.log(\"session created !\");\n```\n\n----------------------------------------\n\nTITLE: Defining an OPC UA method with input and output arguments in JavaScript\nDESCRIPTION: Creating a method on an OPC UA device object with input and output arguments. This snippet shows how to define the method's signature including parameter types and descriptions.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_method.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst method = namespace.addMethod(myDevice,{\n\n    browseName: \"Bark\",\n\n    inputArguments:  [\n        {\n            name:\"nbBarks\",\n            description: { text: \"specifies the number of time I should bark\" },\n            dataType: DataType.UInt32        \n        },{\n            name:\"volume\",\n            description: { text: \"specifies the sound volume [0 = quiet ,100 = loud]\" },\n            dataType: DataType.UInt32\n        }\n     ],\n\n    outputArguments: [{\n         name:\"Barks\",\n         description:{ text: \"the generated barks\" },\n         dataType: DataType.String ,\n         valueRank: 1\n    }]\n});\n\n// optionally, we can adjust userAccessLevel attribute \nmethod.outputArguments.userAccessLevel = makeAccessLevelFlag(\"CurrentRead\");\nmethod.inputArguments.userAccessLevel = makeAccessLevelFlag(\"CurrentRead\");\n```\n\n----------------------------------------\n\nTITLE: Closing OPC UA Session (TypeScript)\nDESCRIPTION: Asynchronously closes the active OPC UA session with the server. It's important to close sessions when no longer needed to free up resources on both client and server.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait session.close();\n```\n\n----------------------------------------\n\nTITLE: Stopping OPC UA Subscription\nDESCRIPTION: Terminates the active OPC UA subscription. This stops the server from sending further data change notifications for this subscription and releases associated resources.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nthe_subscription.terminate(callback);\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceType Interface for OPC UA Using TypeScript\nDESCRIPTION: This TypeScript interface UADevice_Base details the standard properties and organizational folders that constitute the OPC UA DeviceType object. It defines mandatory properties such as manufacturer name, model, hardware and software revisions, device manual URL, and revision counters, all typed as UAProperties with specific OPC UA DataTypes. Optional properties and folders handle device health enumeration and collections of device-related images or documentation. The interface extends UAComponent_Base to integrate with OPC UA component hierarchy. This requires dependencies from node-opcua-address-space-base, node-opcua-variant, node-opcua-data-model, and other node-opcua packages. The purpose is to provide a strongly-typed model for device representation in OPC UA servers and clients.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-di.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ----- this file has been automatically generated - do not edit\nimport { UAProperty } from \"node-opcua-address-space-base\"\nimport { DataType, VariantOptions } from \"node-opcua-variant\"\nimport { LocalizedText, QualifiedName } from \"node-opcua-data-model\"\nimport { Int32, UAString } from \"node-opcua-basic-types\"\nimport { DTArgument } from \"node-opcua-nodeset-ua/dist/dt_argument\"\nimport { UABaseDataVariable } from \"node-opcua-nodeset-ua/dist/ua_base_data_variable\"\nimport { UAFolder } from \"node-opcua-nodeset-ua/dist/ua_folder\"\nimport { EnumDeviceHealth } from \"./enum_device_health\"\nimport { UAComponent, UAComponent_Base } from \"./ua_component\"\n/**\n * Defines the basic information components for all\n * configurable elements in a device topology\n *\n * |                |                                                            |\n * |----------------|------------------------------------------------------------|\n * |namespace       |http://opcfoundation.org/UA/DI/                             |\n * |nodeClass       |ObjectType                                                  |\n * |typedDefinition |DeviceType i=1002                                           |\n * |isAbstract      |true                                                        |\n */\nexport interface UADevice_Base extends UAComponent_Base {\n    /**\n     * manufacturer\n     * Name of the company that manufactured the device\n     */\n    manufacturer: UAProperty<LocalizedText, DataType.LocalizedText>;\n    manufacturerUri?: UAProperty<UAString, DataType.String>;\n    /**\n     * model\n     * Model name of the device\n     */\n    model: UAProperty<LocalizedText, DataType.LocalizedText>;\n    /**\n     * hardwareRevision\n     * Revision level of the hardware of the device\n     */\n    hardwareRevision: UAProperty<UAString, DataType.String>;\n    /**\n     * softwareRevision\n     * Revision level of the software/firmware of the\n     * device\n     */\n    softwareRevision: UAProperty<UAString, DataType.String>;\n    /**\n     * deviceRevision\n     * Overall revision level of the device\n     */\n    deviceRevision: UAProperty<UAString, DataType.String>;\n    productCode?: UAProperty<UAString, DataType.String>;\n    /**\n     * deviceManual\n     * Address (pathname in the file system or a URL |\n     * Web address) of user manual for the device\n     */\n    deviceManual: UAProperty<UAString, DataType.String>;\n    deviceClass?: UAProperty<UAString, DataType.String>;\n    /**\n     * serialNumber\n     * Identifier that uniquely identifies, within a\n     * manufacturer, a device instance\n     */\n    serialNumber: UAProperty<UAString, DataType.String>;\n    productInstanceUri?: UAProperty<UAString, DataType.String>;\n    /**\n     * revisionCounter\n     * An incremental counter indicating the number of\n     * times the static data within the Device has been\n     * modified\n     */\n    revisionCounter: UAProperty<Int32, DataType.Int32>;\n   // PlaceHolder for $cPIdentifier$\n    deviceHealth?: UABaseDataVariable<EnumDeviceHealth, DataType.Int32>;\n    deviceHealthAlarms?: UAFolder;\n    /**\n     * deviceTypeImage\n     * Organizes pictures of the device.\n     */\n    deviceTypeImage?: UAFolder;\n    /**\n     * documentation\n     * Organizes documents for the device.\n     */\n    documentation?: UAFolder;\n    /**\n     * protocolSupport\n     * Protocol-specific files for the device.\n     */\n    protocolSupport?: UAFolder;\n    /**\n     * imageSet\n     * Organizes images that are used within UIElements.\n     */\n    imageSet?: UAFolder;\n}\nexport interface UADevice extends Omit<UAComponent, \"manufacturer\"|\"manufacturerUri\"|\"model\"|\"hardwareRevision\"|\"softwareRevision\"|\"deviceRevision\"|\"productCode\"|\"deviceManual\"|\"deviceClass\"|\"serialNumber\"|\"productInstanceUri\"|\"revisionCounter\">, UADevice_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Variable Value Attribute using Read Function (Alternative Callback Style)\nDESCRIPTION: Another example demonstrating how to read the 'Value' attribute of the 'ns=1;s=free_memory' node using the generic 'read' function, but employing a slightly different callback syntax (arrow function). It achieves the same result as the previous snippet.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthe_session.read({nodeId: \"ns=1;s=free_memory\", attributeId: AttributeIds.Value}, (err, dataValue) => {\n  if (!err) {\n    console.log(\" free mem % = \", dataValue.toString());\n  }\n  callback(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Secure Channel Close Event in Node-OPCUA Client (JavaScript)\nDESCRIPTION: This snippet demonstrates how to handle the 'close' event on a secure channel within the OPC UA client implementation. When the channel closes, the code logs the event, destroys the secure channel, and conditionally initiates reconnection or emits a final close event depending on whether the closure was expected and if reconnection is enabled. It requires the Node-OPCUA framework, event emitters, and assumes the presence of methods like _destroy_secure_channel and _repairConnection. The 'err' parameter is used to distinguish normal and error-induced closes.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-client/notes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsecureChannel.on(\"close\", (err?: Error | null) => {\n    debugLog(chalk.yellow.bold(\" ClientBaseImpl emitting close\"), err?.message);\n    this._destroy_secure_channel();\n    if (!err || !this.reconnectOnFailure) {\n        // this is a normal close operation initiated by us\n        this.emit(\"close\", err); // client cannot be used any more\n    } else {\n        if (this.reconnectOnFailure && this._internalState !== \"reconnecting\") {\n            this.emit(\"connection_lost\", err?.message); \n            this._repairConnection();\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Read/Write Position - Javascript\nDESCRIPTION: This snippet demonstrates how to set the current position within an opened file for subsequent read or write operations using the 'setPosition()' method. The position is provided as a UInt64 value (array [High, Low] for compatibility). This method throws an exception if the file is not open.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst clientFile = new ClientFile(session, fileNodeId);\n\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\n\nawait client.setPosition([0,32]);\n```\n\n----------------------------------------\n\nTITLE: Closing an Opened File - Javascript\nDESCRIPTION: This snippet shows how to close a previously opened OPC UA file node using the 'close()' method. It is important to close the file when operations are complete to release resources.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\n\n// ... do some reading or writing\n\n// don't forget to close the file when done\nawait clientFile.close();\n```\n\n----------------------------------------\n\nTITLE: Closing OPC UA Session\nDESCRIPTION: Terminates the active OPC UA session with the server. This releases resources on both the client and server sides associated with the session. It's typically one of the final steps before disconnecting the client.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nthe_session.close(function(err) {\n  if (err) {\n    console.log(\"closing session failed ?\");\n  }\n  callback();\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating a TemperatureSensorType Object in OPC UA with JavaScript\nDESCRIPTION: Demonstrates the instantiation of an OPC UA Object instance of type TemperatureSensorType under the RootFolder in the address space. The instance is named MyTemperatureSensor. This code assumes the presence of a populated addressSpace object with the TemperatureSensorType defined. The snippet shows practical usage of type instantiation in OPC UA object modeling.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_new_object_type.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst parentFolder = addressSpace.findNode(\"RootFolder\");\n\nconst temperatureSensor = temperatureSensorType.instantiate({\n    organizedBy: addressSpace.rootFolder.objects,\n    browseName: \"MyTemperatureSensor\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Object Node in Address Space - node-opcua - JavaScript\nDESCRIPTION: Adds a new object node named \"Vessel\" to the OPC UA address space within the server's own namespace. It specifies that the object should be organized under the standard \"Objects\" folder.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server_with_a_historizing_variable.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst vessel = namespace.addObject({\n    browseName: \"Vessel\",\n    organizedBy: addressSpace.rootFolder.objects\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Server - Shell\nDESCRIPTION: This shell command starts the weather server using Node.js. It assumes that the `weather.js` file contains the server implementation and dependencies. It provides a means for testing the variables constructed previously.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode weather.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Historical Data Collection - node-opcua - JavaScript\nDESCRIPTION: Calls `installHistoricalDataNode` on the \"Pressure\" variable to enable historical data collection. This function handles the setup by instantiating the necessary history configuration objects, setting the historizing flag, and starting a small online data storage.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server_with_a_historizing_variable.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddressSpace.installHistoricalDataNode(vesselPressure);\n```\n\n----------------------------------------\n\nTITLE: Implementing Call Service Support in node-opcua (TypeScript/JavaScript)\nDESCRIPTION: This snippet describes the addition of call service capabilities in node-opcua, enabling the server and client to invoke methods dynamically via engine.addMethod and supporting method call requests. It requires dependencies related to OPC UA method invocation and is essential for extending server functionalities with custom methods.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#25 add Call service support on client and server\n- #25 add engine.addMethod so that new method can be added to the address space\n```\n\n----------------------------------------\n\nTITLE: Importing Node-OPCUA Modules (TypeScript)\nDESCRIPTION: Imports necessary classes, enums, and types from the 'node-opcua-client' library required for creating and interacting with an OPC UA client, session, subscription, and monitored items.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AttributeIds,\n  BrowseDirection,\n  ClientMonitoredItem,\n  ClientSubscription,\n  DataValue,\n  makeBrowsePath,\n  MessageSecurityMode,\n  MonitoringParametersOptions,\n  NodeClassMask,\n  OPCUAClient,\n  ReadValueIdOptions,\n  ResultMask,\n  SecurityPolicy,\n  TimestampsToReturn,\n} from \"node-opcua-client\";\n```\n\n----------------------------------------\n\nTITLE: Extracting DataValue for City Weather - JavaScript\nDESCRIPTION: This JavaScript function, `extract_value`, extracts weather data for a given city and property. It retrieves data from `city_data_map` and returns a Variant object containing the data. If the city data is unavailable, it returns a `StatusCodes.BadDataUnavailable` status code. This function relies on the `StatusCodes`, `Variant` and `DataType` objects from the `node-opcua` library.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction extract_value(dataType, city_name, property) {\n    const city = city_data_map[city_name];\n    if (!city) {\n        return StatusCodes.BadDataUnavailable;\n    }\n\n    const value = city[property];\n    return new Variant({ dataType, value: value });\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating OPC UA Client (TypeScript)\nDESCRIPTION: Creates an instance of the OPCUAClient, configuring it with application name, connection strategy, security settings (set to None for insecure connection), and the target endpoint URL. The endpoint URL is constructed dynamically using the hostname and a predefined port/path.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = OPCUAClient.create({\n  applicationName: \"MyClient\",\n  connectionStrategy: connectionStrategy,\n  securityMode: MessageSecurityMode.None,\n  securityPolicy: SecurityPolicy.None,\n  endpointMustExist: false\n});\n//const endpointUrl = \"opc.tcp://opcuademo.sterfive.com:26543\";\nconst endpointUrl = \"opc.tcp://\" + require(\"os\").hostname() + \":4334/UA/MyLittleServer\";\n```\n\n----------------------------------------\n\nTITLE: Executing the Node.js Client Script\nDESCRIPTION: Runs the Node.js script containing the OPC UA client implementation using the 'node' command. This command executes the code defined in the 'sample_client_with_callback.js' file, initiating the client's connection and operations.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ node sample_client_with_callback\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Node-OPCUA Client\nDESCRIPTION: Creates a new instance of the OPCUAClient. The 'endpointMustExist: false' option is used to relax the requirement that the provided endpointUrl hostname must exactly match the one exposed by the server, allowing connections using IP addresses or aliases.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = OPCUAClient.create({\n    endpointMustExist: false\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Monitored Item to Subscription\nDESCRIPTION: Configures a specific variable ('ns=1;s=free_memory') to be monitored within the active subscription. Monitoring parameters like sampling interval and queue size are set. An event listener is added to the monitored item to handle and log data change notifications.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// install monitored item\nconst itemToMonitor = {\n  nodeId: resolveNodeId(\"ns=1;s=free_memory\"),\n  attributeId: AttributeIds.Value\n};\nconst monitoringParamaters = {\n  samplingInterval: 100,\n  discardOldest: true,\n  queueSize: 10\n};\n\nthe_subscription.monitor(\n  itemToMonitor,\n  monitoringParamaters,\n  TimestampsToReturn.Both,\n  (err, monitoredItem) => {\n    monitoredItem.on(\"changed\", function(dataValue) {\n      console.log(\n        \"monitored item changed:  % free mem = \",\n        dataValue.value.value\n      );\n    });\n    callback();\n  }\n);\nconsole.log(\"-------------------------------------\");\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Opening/Closing ClientFile - Javascript\nDESCRIPTION: This snippet demonstrates creating a 'ClientFile' object using an existing OPC UA session and the NodeId of the file node, then opening it with a specified mode and closing it afterwards. It requires a connected client session.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ClientFile,OpenFileMode } from \"node-opcua-file-transfer\";\n\n// \nconst fileNodeId = \"ns=1;s=MyFile\";\n\n// let's create a client file object from the session and nodeId\nconst clientFile = new ClientFile(session, fileNodeId);\n\n// let's open the file\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\n\n// ... do some reading or writing\n\n// don't forget to close the file when done\nawait clientFile.close();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting OPC UA Server with node-opcua in Node.js\nDESCRIPTION: This snippet sets up an OPC UA server using the node-opcua library, configuring server details, build information, and address space. It defines a post-initialization function to create a folder for devices, and dynamically adds sensor objects and variables representing temperature data. The server continuously updates sensor values at regular intervals and starts listening for client connections, enabling real-time data monitoring.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/monitoring_home_temperature_with_a_raspberry.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction start_server() {\n\n  const server = new opcua.OPCUAServer({\n    port: 1234\n  });\n\n  server.buildInfo.productName = \"Rapsberry 1-Wire OPCUA Server\";\n\n  function post_initialize() {\n    const addressSpace = server.engine.addressSpace;\n    const namespace = addressSpace.getOwnNamespace();\n    const devices = namespace.addFolder(\"ObjectsFolder\", {\n      browseName: \"Devices\"\n    });\n\n    sensors.forEach((sensor) => install_sensor(sensor));\n  }\n\n  let value1 = -10.0;\n  function install_sensor(sensor) {\n    const addressSpace = server.engine.addressSpace;\n    const namespace = addressSpace.getOwnNamespace();\n    const sensorName = \"TemperatureSensor\";\n\n    const devices = addressSpace.rootFolder.objects.devices;\n\n    const uaSensor = namespace.addObject({\n      organizedBy: devices,\n      browseName: sensorName\n    });\n\n    setInterval(() => {\n      read_sensor(sensor, (err, result) => {\n        value1 = result.value;\n        console.log(\"result=\", result, \" v=\", value1);\n      });\n    }, 1000);\n\n    namespace.addVariable({\n      propertyOf: uaSensor,\n      nodeId: \"ns=1;s=Temperature\",\n      browseName: \"temperature\",\n      dataType: \"Double\",\n      value: {\n        get: () => {\n          return new opcua.Variant({\n            dataType: opcua.DataType.Double,\n            value: value1\n          });\n        }\n      }\n    });\n  }\n\n  server.initialize(post_initialize);\n\n  server.start(() => {\n    console.log(\"Server is now listening ... ( press CTRL+C to stop)\");\n    console.log(\"port \", server.endpoints[0].port);\n    const endpointUrl = server.endpoints[0].endpointDescriptions()[0]\n      .endpointUrl;\n    console.log(\" the primary server endpoint url is \", endpointUrl);\n  });\n}\n\n// Usage: call start_server() to initiate the OPC UA server.\n```\n\n----------------------------------------\n\nTITLE: Defining Main Asynchronous Function (TypeScript)\nDESCRIPTION: Defines the main asynchronous function `main` which encapsulates the sequence of OPC UA client operations. It includes try-catch block for error handling and calls various asynchronous functions representing the client's lifecycle steps.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  try {\n    // step 1 : connect to\n    _\"Connection\"\n\n    // step 2 : createSession\n    _\"create session\"\n\n    // step 3 : browse\n    _\"browsing the root folder\"\n\n    // step 4 : read a variable with readVariableValue\n    _\"read a variable with readVariableValue\"\n\n    // step 4' : read a variable with read\n    _\"read a variable with read\"\n\n    // step 5: install a subscription and install a monitored item for 10 seconds\n    _\"install a subscription\"\n\n    // step 6: finding the nodeId of a node by Browse name\n    _\"finding the nodeId of a node by Browse name\"\n\n    // close session\n    _\"closing session\"\n\n    // disconnecting\n    _\"disconnecting\"\n  } catch(err) {\n    console.log(\"An error has occurred : \",err);\n  }\n}\nmain();\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strategy (TypeScript)\nDESCRIPTION: Defines a connection strategy for the OPC UA client, specifying parameters like the initial delay before the first retry and the maximum number of retries attempts.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectionStrategy = {\n  initialDelay: 1000,\n  maxRetry: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Operation Sequence with Async.series\nDESCRIPTION: Sets up the main control flow for the client's lifecycle using 'async.series'. This function executes a collection of asynchronous tasks (represented by callback functions) in series, ensuring that each operation completes before the next one starts. It includes placeholders for connection, session management, browsing, reading, and subscription tasks.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet the_session, the_subscription;\n\nasync.series([\n\n    // step 1 : connect to\n    function(callback)  {\n        _\"Connection\"\n    },\n\n    // step 2 : createSession\n    function(callback) {\n        _\"create session\"\n    },\n\n    // step 3 : browse\n    function(callback) {\n       _\"browsing the root folder\"\n    },\n\n    // step 4 : read a variable with readVariableValue\n    function(callback) {\n       _\"read a variable with readVariableValue\"\n    },\n\n    // step 4' : read a variable with read\n    function(callback) {\n       _\"read a variable with read\"\n    },\n\n    // step 5: install a subscription and install a monitored item for 10 seconds\n    function(callback) {\n       _\"install a subscription\"\n    },\n    function(callback) {\n       _\"add some monitored items\"\n    },\n    function(callback) {\n        // wait a little bit : 10 seconds\n        setTimeout(()=>callback(), 10*1000);\n    },\n    // terminate session\n    function(callback) {\n        _\"stopping subscription\";\n    },\n    // close session\n    function(callback) {\n        _\"closing session\"\n    }\n\n],\nfunction(err) {\n    if (err) {\n        console.log(\" failure \",err);\n    } else {\n        console.log(\"done!\");\n    }\n    client.disconnect(function(){});\n}) ;\n```\n\n----------------------------------------\n\nTITLE: Exposing Local File as OPC UA File Node - Typescript\nDESCRIPTION: This snippet demonstrates setting up an OPC UA server, creating a local file, instantiating a 'FileType' node in the address space, and binding it to the local file using 'installFileType'. It requires 'node-opcua' and 'node-opcua-file-transfer'.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new OPCUAServer({\n\n});\n\nawait server.initialize();\n\n\n// let say we want to create a access to this file:\nconst my_data_filename = \"/data/someFile.txt\";\nawait promisify(fs.writeFile)(my_data_filename, \"some content\", \"utf8\");\n\n\n// now add a file object in the address Space\nconst addressSpace = server.engine.addressSpace;\n\n// retrieve the FileType UAObjectType\nconst fileType = addressSpace.findObjectType(\"FileType\")!;\n\n// create a instance of FileType \nconst myFile = fileType.instantiate({\n    nodeId: \"s=MyFile\",\n    browseName: \"MyFile\",\n    organizedBy: addressSpace.rootFolder.objects\n}) as UAFile;\n\n// now bind the opcuaFile object with our file\ninstallFileType(opcuaFile, { \n    filename: my_data_filename\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the OPC UA Server Endpoint URL\nDESCRIPTION: Specifies the network address and endpoint of the target OPC UA server. This string is used by the client to initiate a connection. It includes the protocol (opc.tcp), hostname, port, and endpoint path.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// const endpointUrl = \"opc.tcp://<hostname>:4334/UA/MyLittleServer\";\nconst endpointUrl = \"opc.tcp://\" + require(\"os\").hostname() + \":4334/UA/MyLittleServer\";\n```\n\n----------------------------------------\n\nTITLE: Constructing City Weather Variables - JavaScript\nDESCRIPTION: This JavaScript code constructs read-only OPC-UA variables for city weather data, including temperature, humidity, pressure, and weather. It uses the `namespace.addVariable` function to create each variable, specifying its `nodeId`, `browseName`, `dataType`, and a `get` function that uses `extract_value` to retrieve the current value. The `cityNode` from the `node-opcua` library acts as the parent node for these weather data variables.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnamespace.addVariable({\n    componentOf: cityNode,\n    browseName: \"Temperature\",\n    nodeId: `s=${city_name}-Temperature`,\n    dataType: \"Double\",\n    minimumSamplingInterval: 100,\n    value: {\n        get: function () {\n            return extract_value(DataType.Double, city_name, \"temperature\");\n        }\n    }\n});\nnamespace.addVariable({\n    componentOf: cityNode,\n    nodeId: `s=${city_name}-Humidity`,\n    browseName: \"Humidity\",\n    dataType: \"Double\",\n    minimumSamplingInterval: 100,\n    value: {\n        get: function () {\n            return extract_value(DataType.Double, city_name, \"humidity\");\n        }\n    }\n});\nnamespace.addVariable({\n    componentOf: cityNode,\n    nodeId: `s=${city_name}-Pressure`,\n    browseName: \"Pressure\",\n    dataType: \"Double\",\n    minimumSamplingInterval: 100,\n    value: {\n        get: function () {\n            return extract_value(DataType.Double, city_name, \"pressure\");\n        }\n    }\n});\nnamespace.addVariable({\n    componentOf: cityNode,\n    nodeId: `s=${city_name}-Weather`,\n    browseName: \"Weather\",\n    dataType: \"String\",\n    minimumSamplingInterval: 100,\n    value: {\n        get: function () {\n            return extract_value(DataType.String, city_name, \"weather\");\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Weather Data for Multiple Cities in a Round-Robin Fashion - Node.js JavaScript\nDESCRIPTION: Maintains a list of cities and a city_data_map object to store weather data for each. Establishes an infinite round-robin iterator to balance REST API calls, periodically querying the next city and updating its data. Requires getCityWeather and extractUsefulData, an array of city names, and uses setInterval for scheduling.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cities = [\n    'London', 'Paris','New York','Moscow','Ho chi min','Benjing','Reykjavik' ,'Nouakchott','Ushuaia' ,'Longyearbyen'];\n\n_\"get city weather\"\n\nconst city_data_map = { };\n\n// a infinite round-robin iterator over the city array\nconst next_city  = ((arr) => {\n   let counter = arr.length;\n   return function() {\n      counter += 1;\n      if (counter>=arr.length) {\n        counter = 0;\n      }\n      return arr[counter];\n   };\n})(cities);\n\nasync function update_city_data(city) {\n\n    try {\n        const data  = await getCityWeather(city);\n        city_data_map[city] = extractUsefulData(data);\n    }\n    catch(err) {\n        console.log(\"error city\",city , err);\n        return ;\n    }\n}\n\n// make a API call every 10 seconds\nconst interval = 10 * 1000;\nsetInterval(async () => {\n     const city = next_city();\n     console.log(\"updating city =\",city);\n     await update_city_data(city);\n}, interval);\n```\n\n----------------------------------------\n\nTITLE: Constructing the OPC UA Server Address Space for Cities - Node.js JavaScript\nDESCRIPTION: Declares the construct_my_address_space function, which builds the OPC UA address space containing a folder for each city under a main 'Cities' folder. Utilizes node-opcua methods to navigate and augment the server's address space. Assumes supporting data structures and routines for city value creation are present.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction construct_my_address_space(server) {\n    // declare some folders\n    const addressSpace = server.engine.addressSpace;\n    const namespace = addressSpace.getOwnNamespace();\n    const objectsFolder = addressSpace.rootFolder.objects;\n\n    const citiesNode  = namespace.addFolder(objectsFolder,{ browseName: \"Cities\"});\n\n    for (let city_name of cities) {\n        // declare the city node\n        const cityNode = namespace.addFolder(citiesNode,{ browseName: city_name });\n        _\"construct city weather variables\"\n    }\n}\n_\"extracting a DataValue\"\n```\n\n----------------------------------------\n\nTITLE: Reading Weather Data Periodically - Node.js JavaScript\nDESCRIPTION: Demonstrates periodic data collection using setInterval, calling extractUsefulData on the asynchronous response from getCityWeather for London each minute. Requires that getCityWeather and extractUsefulData be asynchronously available and globally scoped. Intended to keep most recent weather data in a variable.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet london_data = {};\nsetInterval(function() {\n   london_data = extractUsefulData(await getCityWeather(\"London\"));\n}, 60*1000);\n```\n\n----------------------------------------\n\nTITLE: Creating AnalogDataItem Node - node-opcua - JavaScript\nDESCRIPTION: Adds an AnalogDataItem node named \"Pressure\" to the OPC UA address space, associating it with the previously created \"Vessel\" object. It configures engineering units as 'bar' and sets the value range from 0 to 10.0.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server_with_a_historizing_variable.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vesselPressure = namespace.addAnalogDataItem({\n    browseName: \"Pressure\",\n    engineeringUnitsRange: {\n        low: 0,\n        high: 10.0\n    },\n    engineeringUnits: standardUnits.bar,\n    componentOf: vessel\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Useful Weather Data - Node.js JavaScript\nDESCRIPTION: Implements data extraction functions: unixEpoqToDate converts Unix epoch timestamps to JavaScript Date objects, while extractUsefulData reformats the API response into an application-specific schema containing city, time, temperature, humidity, pressure, and weather description. Requires input objects matching the OpenWeatherMap API result structure.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction unixEpoqToDate(unixDate) {\n    const d = new Date(0);\n    d.setUTCSeconds(unixDate);\n    return d;\n}\n\nfunction extractUsefulData(data) {\n    return {\n        city: data.city,\n        date: new Date(),\n        observation_time: unixEpoqToDate(data.dt),\n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        pressure: data.main.pressure,\n        weather: data.weather[0].main\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Variable Value Changes - node-opcua - JavaScript\nDESCRIPTION: Uses `setInterval` to periodically update the value of the \"Pressure\" variable with a simulated reading. The value is calculated using a simple mathematical formula and set using `setValueFromSource` to trigger historical data recording.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server_with_a_historizing_variable.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// simulate pressure change\nlet t = 0;\nsetInterval(function () {\n    let value = (Math.sin(t / 50) * 0.7 + Math.random() * 0.2) * 5.0 + 5.0;\n    vesselPressure.setValueFromSource({ dataType: \"Double\", value: value });\n    t = t + 1;\n}, 200);\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Representation of Binary Data\nDESCRIPTION: This snippet displays binary data in hexadecimal format, commonly used for analyzing low-level data structures, network packets, or file contents. Each line typically shows the offset (address) followed by hexadecimal byte values and sometimes an ASCII representation. This specific dump is from the node-opcua project and likely pertains to OPC UA protocol data.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-client/test/fixtures/activateSessionRequest1.txt#_snippet_0\n\nLANGUAGE: Hex\nCODE:\n```\n0000   4d 53 47 46 99 04 00 00 a2 74\n0040   11 22 01 00 00 00 35 00 00 00 03 00 00 00 01 00\n0050   d3 01 02 00 00 f4 2e 68 21 5c 35 20 d1 6f 94 d4\n0060   01 45 42 0f 00 00 00 00 00 ff ff ff ff 10 27 00\n0070   00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00\n0080   01 00 00 00 02 00 00 00 65 6e 01 00 47 01 01 03\n0090   03 00 00 04 00 00 00 58 35 30 39 f7 02 00 00 30\n00a0   82 02 f3 30 82 01 db a0 03 02 01 02 02 09 00 d5\n00b0   56 d2 f4 e9 04 86 5a 30 0d 06 09 2a 86 48 86 f7\n00c0   0d 01 01 0b 05 00 30 10 31 0e 30 0c 06 03 55 04\n00d0   03 0c 05 75 73 65 72 31 30 1e 17 0d 31 38 31 32\n00e0   31 35 31 30 35 34 30 36 5a 17 0d 31 39 31 32 31\n00f0   35 31 30 35 34 30 36 5a 30 10 31 0e 30 0c 06 03\n0100   55 04 03 0c 05 75 73 65 72 31 30 82 01 22 30 0d\n0110   06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01\n0120   0f 00 30 82 01 0a 02 82 01 01 00 e0 05 ef 12 64\n0130   90 b0 cc a0 df a3 f6 b1 71 a1 d1 e0 a3 22 05 12\n0140   11 89 d5 34 41 fc 77 20 99 37 1b 3e 13 3c ef 95\n0150   97 7b b2 17 68 9c c9 18 d9 20 8f 68 96 b2 a9 53\n0160   da 11 f9 77 70 27 d5 10 39 3b 15 54 13 65 4a 48\n0170   b1 27 19 61 61 c0 81 19 47 b9 e0 85 75 d9 36 e2\n0180   06 14 d7 9c 9e ec 97 1e 91 c4 18 3e e0 71 57 43\n0190   41 45 96 ad 26 ff 52 f1 e1 a4 a5 07 8b 49 18 a9\n01a0   6c 2c 31 48 dc 84 aa 14 84 66 04 1b e4 ba ff 3d\n01b0   8a f2 a2 63 72 63 89 e6 93 a2 3d 06 7b c0 1e 6b\n01c0   ff 5a e0 f3 78 6b 34 38 01 e1 0b 25 24 db 9f e7\n01d0   9f d1 3e 13 a6 58 f2 3a f2 2e af 9b 6a 63 e1 3c\n01e0   7f 29 82 da c6 c6 95 58 c5 fa db f0 36 25 89 9e\n01f0   f5 5a ba b7 b5 cd 92 66 a4 71 ca a1 ed a5 13 6d\n0200   ff a2 0a 70 86 84 41 0b dd 1e 0c 61 93 52 c9 bf\n0210   82 85 4a c6 fa e6 5c 18 1e 08 6e 12 94 72 c3 86\n0220   c8 07 da f3 71 07 61 11 6a 01 c5 02 03 01 00 01\n0230   a3 50 30 4e 30 1d 06 03 55 1d 0e 04 16 04 14 2e\n0240   d7 34 12 16 38 39 c8 92 7e a8 8c f1 df f0 7f dd\n0250   57 70 44 30 1f 06 03 55 1d 23 04 18 30 16 80 14\n0260   2e d7 34 12 16 38 39 c8 92 7e a8 8c f1 df f0 7f\n0270   dd 57 70 44 30 0c 06 03 55 1d 13 04 05 30 03 01\n0280   01 ff 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05\n0290   00 03 82 01 01 00 a0 55 06 d2 e0 b5 fe bb 18 2f\n02a0   66 35 f5 c7 4e e3 7f 7e ae e2 db 69 96 5c 46 f8\n02b0   9d 82 aa f1 eb 6b 3b a9 27 c9 58 26 e1 20 6b 8c\n02c0   21 05 62 b4 13 1c c0 9e 05 dc 09 2a cf f7 62 13\n02d0   08 49 ac 8a 12 a1 09 b1 f2 21 8a 2c c7 0b a1 8f\n02e0   f3 ed d0 8e b8 6f d1 f8 55 fa f9 43 aa 59 91 7a\n02f0   2d af ef c9 86 ad e5 8a 9b d6 f1 9b b2 54 49 50\n0300   3c d5 04 57 eb 53 e3 b9 a5 13 85 e9 c7 26 fb 69\n0310   03 64 c3 f7 80 59 ce 1c f5 e6 44 b9 be 53 7c 97\n0320   9e 21 c2 20 7e 88 0d b0 60 0b c6 a2 08 9f c0 ec\n0330   57 92 6e b0 8e da 84 9f 0d 18 a8 0d a2 79 32 87\n0340   23 f7 ce 65 f6 14 cb eb a1 ca 62 cf 58 51 5e df\n0350   43 32 98 90 98 61 c8 2a 69 60 8f 4f e0 b3 4c 79\n0360   7e e9 8f a6 89 d9 f9 15 a2 5f 56 e1 f0 91 8f 68\n0370   bd ed e7 c2 cd c4 07 5a 98 ab 1f 95 a6 06 f7 0d\n0380   09 07 d7 bc cb 8a d9 5a 25 eb 5d b9 46 1b db 50\n0390   c8 25 aa bc 5e d0 31 00 00 00 68 74 74 70 3a 2f\n03a0   2f 77 77 77 2e 77 33 2e 6f 72 67 2f 32 30 30 31\n03b0   2f 30 34 2f 78 6d 6c 64 73 69 67 2d 6d 6f 72 65\n03c0   23 72 73 61 2d 73 68 61 32 35 36 00 01 00 00 4b\n03d0   9c df 2f 8f 17 40 07 0e e1 6b c0 53 41 b8 06 81\n03e0   dc f4 8b 5a d5 62 55 21 fe 19 cc 58 a5 25 17 a3\n03f0   2b 6a 94 a8 a0 2c bc cb 29 35 29 4e d4 e0 10 e0\n0400   06 0d 7a 45 c0 1c 3b 8a 12 87 5e 27 30 49 7d 5d\n0410   cb 1d 9f 93 0b cc 70 23 83 ff 10 f9 89 29 57 5c\n0420   86 41 91 32 64 72 63 c9 e1 0c e8 3f 0a f7 8f 70\n0430   15 c1 26 f3 66 1c 0f 6f 33 f4 9b e6 f5 d6 1d 64\n0440   b5 c7 1d f4 8d 04 00 ff 1f 3f 84 24 8f 78 5e 65\n0450   cb 0d d0 2f c4 30 e6 0f 95 1d 1e e4 e6 f6 d7 59\n0460   b3 50 5d f2 1e 00 f9 4e a2 57 f3 d8 bf 8b 85 8f\n0470   71 03 83 10 2f dd 64 f7 2e 60 76 85 a5 27 a9 06\n0480   90 22 91 d9 cf 5c 08 25 4c dc 49 1e b8 46 fe 83\n0490   29 42 7e 23 57 22 1c 9a de 64 7a 2d e0 2a fb 95\n04a0   94 ac 93 ae 48 68 6b a2 2d 0f e9 0c 6e a7 4b 6f\n04b0   b3 a4 a3 ef bd 74 59 fb f0 19 24 cd 4c 80 93 d6\n04c0   9a df 8d 6b 16 9c a3 ed 88 63 3e 1f 31 f1 4d\n```\n\n----------------------------------------\n\nTITLE: Creating an OPC UA server instance in JavaScript\nDESCRIPTION: Setting up an OPC UA server instance, initializing it, and creating the address space. This snippet shows the core server setup without the method implementation.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_method.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new OPCUAServer({\n    port: 4334 // the port of the listening socket of the server\n});\n\n\nawait server.initialize();\n\nconst addressSpace = server.engine.addressSpace;\nconst namespace = addressSpace.getOwnNamespace();\n\nconst myDevice = namespace.addObject({\n    organizedBy: addressSpace.rootFolder.objects,\n    browseName: \"MyDevice\"\n});\n\n// method definition would go here\n// method binding would go here\n\nawait server.start();\nconst endpointUrl = server.getEndpointUrl();\nconsole.log(\" the primary server endpoint url is \", endpointUrl );\n\nconsole.log(\"Server is now listening ... ( press CTRL+C to stop)\");\nawait new Promise((resolve) => process.once(\"SIGINT\", resolve));\nawait server.shutdown();\nconsole.log(\"Server has shut down\");\n```\n\n----------------------------------------\n\nTITLE: Creating the Server using node-opcua in JavaScript\nDESCRIPTION: This snippet initializes the OPC UA server by importing required components from the 'node-opcua' package and sets up an asynchronous application entry point. The main logic is wrapped in a try-catch block to handle errors during server startup. Dependencies include the 'node-opcua' npm package. No user parameters are required; execution is completely programmatic.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_da_variables.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { OPCUAServer, standardUnits, DataType, Variant } = require(\"node-opcua\");\n(async () => {\n    try {\n        _\"inner\"\n    }\n    catch(err){\n        console.log(err);\n        process.exit(1);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: OPC UA NodeSet XML Representation of TemperatureSensorType and Temperature Variable\nDESCRIPTION: Provides the XML representation of the OPC UA NodeSet including the TemperatureSensorType ObjectType and the Temperature Variable of type Double. This XML defines node attributes such as NodeId, BrowseName, ModellingRule, and References detailing the relationship between the object type and its variables. The XML is used for importing/exporting UA information models and conforms to the OPC Foundation UA standards.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_new_object_type.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<UANodeSet xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n           Version=\"1.02\" LastModified=\"2013-03-06T05:36:44.0862658Z\"\n           xmlns=\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\">\n  <Aliases>\n    <Alias Alias=\"HasSubtype\">i=45</Alias>\n    <Alias Alias=\"HasTypeDefinition\">i=40</Alias>\n    <Alias Alias=\"Organizes\">i=35</Alias>\n    <Alias Alias=\"HasProperty\">i=46</Alias>\n    <Alias Alias=\"undefined\">i=12</Alias>\n    <Alias Alias=\"HasModellingRule\">i=37</Alias>\n    <Alias Alias=\"HasComponent\">i=47</Alias>\n    <Alias Alias=\"HasEncoding\">i=38</Alias>\n    <Alias Alias=\"HasDescription\">i=39</Alias>\n  </Aliases>\n  <UAVariable NodeId=\"ns=1;i=1001\" BrowseName=\"Temperature\" DataType=\"Double\">\n    <DisplayName>Temperature</DisplayName>\n    <Description>the temperature value of the sensor in Celsius &lt;°C&gt;</Description>\n    <References>\n      <Reference ReferenceType=\"HasTypeDefinition\">ns=0;i=63</Reference>\n      <Reference ReferenceType=\"HasComponent\" IsForward=\"false\">ns=1;i=1000</Reference>\n      <Reference ReferenceType=\"HasModellingRule\">ns=0;i=78</Reference>\n    </References>\n  </UAVariable>\n  <UAObjectType NodeId=\"ns=1;i=1000\" BrowseName=\"TemperatureSensorType\" IsAbstract=\"false\">\n    <DisplayName>TemperatureSensorType</DisplayName>\n    <References>\n      <Reference ReferenceType=\"HasSubtype\" IsForward=\"false\">ns=0;i=58</Reference>\n    </References>\n  </UAObjectType>\n</UANodeSet>\n```\n\n----------------------------------------\n\nTITLE: Handling Client Connection Backoff Events\nDESCRIPTION: Registers an event listener for the 'backoff' event on the client instance. This event fires when the client fails to connect and is about to retry, providing feedback on connection attempts, including the retry count and next delay.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(\"backoff\", (retry, delay) =>\n  console.log(\n    \"still trying to connect to \",\n    endpointUrl,\n    \": retry =\",\n    retry,\n    \"next attempt in \",\n    delay / 1000,\n    \"seconds\"\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Browsing Root Folder of OPC UA Server\nDESCRIPTION: Browses the 'RootFolder' node on the server to discover its direct children. The results, containing references to child nodes with their browse names and NodeIds, are printed to the console. This helps in understanding the server's address space structure.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthe_session.browse(\"RootFolder\", function(err, browseResult) {\n  if (!err) {\n    console.log(\"Browsing rootfolder: \");\n    for (let reference of browseResult.references) {\n      console.log(reference.browseName.toString(), reference.nodeId.toString());\n    }\n  }\n  callback(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Timeout Utility Function (JavaScript)\nDESCRIPTION: A utility function that returns a Promise that resolves after a specified number of milliseconds. This is used to introduce delays in the asynchronous execution flow, for example, to keep a subscription active for a certain duration.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function timeout(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Variable Value Attribute using Read Function\nDESCRIPTION: Reads the 'Value' attribute of a specific node ('ns=1;s=free_memory') using the generic 'read' function. It constructs a 'nodeToRead' object specifying the target nodeId and the desired AttributeId. The retrieved data value is printed.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxAge = 0;\nconst nodeToRead = {\n  nodeId: \"ns=1;s=free_memory\",\n  attributeId: AttributeIds.Value\n};\n\nthe_session.read(nodeToRead, maxAge, function(err, dataValue) {\n  if (!err) {\n    console.log(\" free mem % = \", dataValue.toString());\n  }\n  callback(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying City Weather and Handling the Result - Node.js JavaScript\nDESCRIPTION: Demonstrates usage of an asynchronous getCityWeather function, which fetches weather data for a specified city and logs relevant outputs. Expects getCityWeather to return a structured weather data object, including properties like 'main.temp' and 'main.pressure'. Handles both success and error cases using try/catch in an async IIFE.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_\"get city weather\"\nconst city = \"London\";\n\n(async () => {\n\n    try  {\n        const data = await getCityWeather(city);\n        console.log(\"data = data\",data);\n        console.log(\" city =\",city);\n        console.log(\" time =\",data.dt); // unix epoc ( nb of second since 1/1/1970\n        console.log(\" temperature =\",    data.main.temp);\n        console.log(\" pressure    =\",    data.main.pressure);\n    }\n    catch(err) {\n        console.log(\"Error = \", err);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing the Weather OPC UA Server - Node.js JavaScript\nDESCRIPTION: Sets up the basic skeleton of an OPC UA Server using node-opcua, populating the address space and handling the asynchronous server start sequence inside an IIFE. The required modules OPCUAServer, DataType, StatusCodes, Variant are imported from node-opcua. Assumes that supporting functions (address space construction) and weather data routines are defined elsewhere.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nError.stackTraceLimit = Infinity;\n_\"making a round robin read\"\n\nconst { OPCUAServer, DataType, StatusCodes, Variant } = require(\"node-opcua\");\n\n\n_\"construct the address space\"\n\n(async () => {\n\n    try {\n      _\"server instantiation\"\n    }\n    catch(err) {\n       console.log(\"Error = \",err);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Final Analyser Device Interface - TypeScript\nDESCRIPTION: This interface defines the complete OPC UA Analyser Device type. It extends the base device type (UADevice) by omitting properties that are redefined or specialized in the analyser-specific base interface (UAAnalyserDevice_Base), such as parameterSet, methodSet, and identification, and then merging with UAAnalyserDevice_Base.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice extends Omit<UADevice, \"parameterSet\"|\"methodSet\"|\"identification\">, UAAnalyserDevice_Base {\n```\n\n----------------------------------------\n\nTITLE: Fetching City Weather from OpenWeatherMap - Node.js JavaScript\nDESCRIPTION: Defines the getCityWeather asynchronous function, which queries the OpenWeatherMap REST API for city-specific weather data using fetch. It sends a GET request with provided API key and host, parses the JSON response, logs the result, and returns it. Requires network access, fetch API, and a valid API key.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_\"accessing the openweathermap API key\"\n\nasync function getCityWeather(city) {\n\n    const url =  `https://open-weather13.p.rapidapi.com/city/${city}`;\n    const options = {\n    \tmethod: 'GET',\n    \theaders: {\n    \t\t'X-RapidAPI-Key': key,\n    \t\t'X-RapidAPI-Host': 'open-weather13.p.rapidapi.com'\n    \t}\n    };\n\n    try {\n    \tconst response = await fetch(url, options);\n    \tconst result = await response.json();\n    \tconsole.log(result);\n        return result;\n    } catch (error) {\n    \tconsole.error(error);\n        throw error;\n    }\n\n}\n\n_\"extract useful data\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Node.js Project and Installing node-opcua via Shell Commands\nDESCRIPTION: These shell commands initialize a new Node.js project folder called 'myserver', create a package.json file, and install the 'node-opcua' package as a dependency. This setup is necessary before creating the OPC UA server script and ensures the required libraries are available. Node.js and npm must be installed prior to running these commands.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir myserver\n$ cd myserver\n$ npm init                      # create a package.json\n$ npm install node-opcua --save # add the node-opcua\n```\n\n----------------------------------------\n\nTITLE: Connecting Client to Endpoint (TypeScript)\nDESCRIPTION: Asynchronously connects the OPC UA client instance to the specified endpoint URL. Awaits the connection to be established before proceeding and logs a confirmation message.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connect(endpointUrl);\nconsole.log(\"connected !\");\n```\n\n----------------------------------------\n\nTITLE: Defining UASessionSecurityDiagnostics Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `UASessionSecurityDiagnostics_Base` and `UASessionSecurityDiagnostics` interfaces. `UASessionSecurityDiagnostics_Base` extends `UABaseDataVariable_Base` and includes properties related to session security diagnostics.  The `UASessionSecurityDiagnostics` interface extends `UABaseDataVariable` and `UASessionSecurityDiagnostics_Base`, providing the complete interface.  It depends on types like `DataType`, `NodeId`, and custom types like `DTSessionSecurityDiagnostics` and `EnumMessageSecurityMode`.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-ua_UASessionSecurityDiagnostics.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { DataType, VariantOptions } from \"node-opcua-variant\"\nimport { NodeId } from \"node-opcua-nodeid\"\nimport { UAString } from \"node-opcua-basic-types\"\nimport { DTSessionSecurityDiagnostics } from \"./dt_session_security_diagnostics\"\nimport { EnumMessageSecurityMode } from \"./enum_message_security_mode\"\nimport { UABaseDataVariable, UABaseDataVariable_Base } from \"./ua_base_data_variable\"\n/**\n * |                |                                                            |\n * |----------------|------------------------------------------------------------|\n * |namespace       |http://opcfoundation.org/UA/                                |\n * |nodeClass       |VariableType                                                |\n * |typedDefinition |SessionSecurityDiagnosticsType i=2244                       |\n * |dataType        |ExtensionObject                                             |\n * |dataType Name   |DTSessionSecurityDiagnostics i=868                          |\n * |value rank      |-1                                                          |\n * |isAbstract      |false                                                       |\n */\nexport interface UASessionSecurityDiagnostics_Base<T extends DTSessionSecurityDiagnostics>  extends UABaseDataVariable_Base<T, DataType.ExtensionObject> {\n    sessionId: UABaseDataVariable<NodeId, DataType.NodeId>;\n    clientUserIdOfSession: UABaseDataVariable<UAString, DataType.String>;\n    clientUserIdHistory: UABaseDataVariable<UAString[], DataType.String>;\n    authenticationMechanism: UABaseDataVariable<UAString, DataType.String>;\n    encoding: UABaseDataVariable<UAString, DataType.String>;\n    transportProtocol: UABaseDataVariable<UAString, DataType.String>;\n    securityMode: UABaseDataVariable<EnumMessageSecurityMode, DataType.Int32>;\n    securityPolicyUri: UABaseDataVariable<UAString, DataType.String>;\n    clientCertificate: UABaseDataVariable<Buffer, DataType.ByteString>;\n}\nexport interface UASessionSecurityDiagnostics<T extends DTSessionSecurityDiagnostics> extends UABaseDataVariable<T, DataType.ExtensionObject>, UASessionSecurityDiagnostics_Base<T> {\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Read/Write Position Example (Code shows Setting) - Javascript\nDESCRIPTION: The heading indicates getting the position, but the code example shows setting the position using 'setPosition()'. The 'getPosition()' method (not shown in code) would return the current read/write position as a UInt64. This operation requires the file to be opened.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst clientFile = new ClientFile(session, fileNodeId);\n\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\n\nawait client.setPosition(32);\n```\n\n----------------------------------------\n\nTITLE: Accessing API Key from Local File - Node.js JavaScript\nDESCRIPTION: Reads the OpenWeatherMap API key from a local file using Node.js's fs module. The snippet assumes the API key is stored as plain text in 'openweathermap.key' in the project root. Returns contents as a Buffer by default; convert to string if necessary. Requires the 'fs' module.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst key = fs.readFileSync(\"openweathermap.key\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Weather Station Project - Shell Script\nDESCRIPTION: These shell commands create a new project directory, initialize a Node.js package, and install the node-opcua dependency. They are run in the terminal and ensure a valid Node.js environment with required dependencies for developing an OPC UA server.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_a_weather_station.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir myweatherstation\ncd myweatherstation\nnpm init\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install node-opcua --save\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client Project (Shell)\nDESCRIPTION: Commands to initialize a Node.js project, create a directory for the client code, navigate into it, initialize npm, and install the node-opcua-client package as a project dependency.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir sample_client_ts\ncd sample_client_ts\nnpm init                      # creates a package.json\nnpm install node-opcua-client --save\n```\n\n----------------------------------------\n\nTITLE: Examining OPC UA Binary Message Hexadecimal Dump\nDESCRIPTION: A complete hexadecimal dump of an OPC UA message containing certificate data, server information, security policies, and endpoint configurations. The dump shows memory addresses and corresponding hexadecimal values representing binary content.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-client/test/fixtures/createSessionResponse2.txt#_snippet_0\n\nLANGUAGE: hexdump\nCODE:\n```\n0000   4d 53 47 46 9b 0a 00 00 0a 00 00 00 01 00 00 00\n0010   b5 03 00 00 02 00 00 00 01 00 d0 01 c0 2b ff b0\n0020   a3 94 d4 01 41 42 0f 00 00 00 00 00 00 ff ff ff\n0030   ff 00 00 00 04 01 00 bf 6c 5f a8 80 5b e5 49 b1\n0040   ee ea 98 58 88 48 d0 02 00 00 b5 40 0b b3 00 00\n0050   00 00 80 4f 32 41 20 00 00 00 07 1a 3f 19 c9 04\n0060   82 8c db fe 65 6f 67 3f 38 9d 62 3e 1f b8 40 3f\n0070   21 50 21 eb 28 8d 43 eb a3 21 e9 03 00 00 30 82\n0080   03 e5 30 82 02 cd a0 03 02 01 02 02 06 01 67 b3\n0090   08 40 c8 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b\n00a0   05 00 30 51 31 19 30 17 06 03 55 04 03 0c 10 53\n00b0   69 6d 75 6c 61 74 69 6f 6e 53 65 72 76 65 72 31\n00c0   13 30 11 06 03 55 04 0a 0c 0a 50 72 6f 73 79 73\n00d0   20 4f 50 43 31 1f 30 1d 06 0a 09 92 26 89 93 f2\n00e0   2c 64 01 19 16 0f 44 45 53 4b 54 4f 50 2d 53 36\n00f0   44 49 34 48 56 30 1e 17 0d 31 38 31 32 31 35 31\n0100   37 30 32 30 31 5a 17 0d 32 38 31 32 31 32 31 38\n0110   30 32 30 31 5a 30 51 31 19 30 17 06 03 55 04 03\n0120   0c 10 53 69 6d 75 6c 61 74 69 6f 6e 53 65 72 76\n0130   65 72 31 13 30 11 06 03 55 04 0a 0c 0a 50 72 6f\n0140   73 79 73 20 4f 50 43 31 1f 30 1d 06 0a 09 92 26\n0150   89 93 f2 2c 64 01 19 16 0f 44 45 53 4b 54 4f 50\n0160   2d 53 36 44 49 34 48 56 30 82 01 22 30 0d 06 09\n0170   2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00\n0180   30 82 01 0a 02 82 01 01 00 92 e3 cd ae 72 52 e4\n0190   83 b2 19 61 f5 95 60 92 cf d1 ee d2 b6 1d 62 b1\n01a0   67 64 92 74 66 f8 4c 91 64 9d 67 7f ae f1 39 2b\n01b0   ae 41 c5 35 45 39 dd 80 48 5a 95 8c e1 a6 52 f0\n01c0   81 89 53 59 fc f0 3b 12 00 25 9d e3 ae a5 88 a3\n01d0   6c e6 7f d3 e4 2a 59 24 af 04 a0 6b a4 96 18 f7\n01e0   b9 e2 af 30 bd 4d 6f 14 3a 9d c8 88 43 6f 7f 16\n01f0   c1 4d 10 5c 46 2b 52 cb 3a 6c 8e 4f dd 66 74 bc\n0200   60 14 84 99 1c 43 68 f3 8e 5b 34 da f9 39 b4 b1\n0210   70 ef d2 9d 07 1c 8a 85 36 0a ef 92 d0 75 d0 b2\n0220   91 2d bc 0e 3b 4c f6 97 8b e3 98 38 32 f9 9a 0b\n0230   db 0f e6 17 fa bb 96 1d f6 b3 d1 3f 40 34 8e bd\n0240   c3 73 18 c5 3b 23 d9 b0 9c 37 81 4f 44 20 bf 9b\n0250   d1 cd 06 59 43 22 17 67 17 ef f0 bf fe 17 5e c4\n0260   7c ef 09 5f 1d 37 06 ff f8 b9 e1 98 29 5d cf 23\n0270   85 ff 28 2b 27 3c 82 5c a7 a6 eb 5a 2a 12 76 13\n0280   4b 8a 0e 6f bc e1 b4 da 69 02 03 01 00 01 a3 81\n0290   c2 30 81 bf 30 1f 06 03 55 1d 23 04 18 30 16 80\n02a0   14 3b b7 56 0d dd 8c 38 6a 2c 08 5c 04 5f 95 09\n02b0   be c1 29 3e ed 30 1d 06 03 55 1d 0e 04 16 04 14\n02c0   3b b7 56 0d dd 8c 38 6a 2c 08 5c 04 5f 95 09 be\n02d0   c1 29 3e ed 30 09 06 03 55 1d 13 04 02 30 00 30\n02e0   0b 06 03 55 1d 0f 04 04 03 02 02 f4 30 1d 06 03\n02f0   55 1d 25 04 16 30 14 06 08 2b 06 01 05 05 07 03\n0300   01 06 08 2b 06 01 05 05 07 03 02 30 46 06 03 55\n0310   1d 11 04 3f 30 3d 86 2a 75 72 6e 3a 44 45 53 4b\n0320   54 4f 50 2d 53 36 44 49 34 48 56 3a 4f 50 43 55\n0330   41 3a 53 69 6d 75 6c 61 74 69 6f 6e 53 65 72 76\n0340   65 72 82 0f 44 45 53 4b 54 4f 50 2d 53 36 44 49\n0350   34 48 56 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b\n0360   05 00 03 82 01 01 00 17 80 7f 97 50 40 29 d1 e1\n0370   a3 08 72 79 6c c1 10 4e 7b 2a 19 c1 89 89 89 cb\n0380   6d 1c 2a 84 34 1c 41 54 ee ee e4 a3 ca e3 a6 3e\n0390   40 b0 ab 10 0d 56 f6 da fe 13 3a fd 9c c1 b8 4c\n03a0   80 0b db 1b d8 82 17 2b 9d 6c a9 49 75 49 68 c3\n03b0   38 bc 2d aa ae 0b f5 e6 a2 89 40 7c 77 90 e0 c5\n03c0   41 2f 22 5b 78 1a 45 53 32 71 8d 8d e7 58 0b ce\n03d0   af 12 11 70 b7 d0 90 ed 49 2a 7f 12 e4 d1 4d 6a\n03e0   5d 26 fc fa 06 d6 26 c9 25 9b 5a 3b 22 ee 04 4d\n03f0   6d 02 26 0a f0 76 70 41 36 29 e0 32 db 9b f8 a4\n0400   51 1e 30 0b 3b 08 49 a5 d5 70 6f 6d a4 2d 30 12\n0410   81 15 c4 40 1d bf 7c 8f cf f5 c8 25 92 1b f4 17\n0420   29 0e 2d 48 f9 72 37 77 dd 38 6f 28 93 34 30 36\n0430   24 19 fc c6 cf 54 ac a4 5c da 0c fa 6a a7 cf bd\n0440   20 54 3e c1 40 2c e6 78 5e 01 06 aa cb 9a 6a f6\n0450   0c 95 5b 45 a0 a3 a7 a5 8e 54 6b d5 aa 1a eb ef\n0460   65 93 fa c9 ab bf d4 01 00 00 00 36 00 00 00 6f\n0470   70 63 2e 74 63 70 3a 2f 2f 44 45 53 4b 54 4f 50\n0480   2d 53 36 44 49 34 48 56 3a 35 33 35 33 30 2f 4f\n0490   50 43 55 41 2f 53 69 6d 75 6c 61 74 69 6f 6e 53\n04a0   65 72 76 65 72 2a 00 00 00 75 72 6e 3a 44 45 53\n04b0   4b 54 4f 50 2d 53 36 44 49 34 48 56 3a 4f 50 43\n04c0   55 41 3a 53 69 6d 75 6c 61 74 69 6f 6e 53 65 72\n04d0   76 65 72 28 00 00 00 75 72 6e 3a 70 72 6f 73 79\n04e0   73 6f 70 63 2e 63 6f 6d 3a 4f 50 43 55 41 3a 53\n04f0   69 6d 75 6c 61 74 69 6f 6e 53 65 72 76 65 72 03\n0500   00 00 00 00 10 00 00 00 53 69 6d 75 6c 61 74 69\n0510   6f 6e 53 65 72 76 65 72 00 00 00 00 ff ff ff ff\n0520   ff ff ff ff 01 00 00 00 36 00 00 00 6f 70 63 2e\n0530   74 63 70 3a 2f 2f 44 45 53 4b 54 4f 50 2d 53 36\n0540   44 49 34 48 56 3a 35 33 35 33 30 2f 4f 50 43 55\n0550   41 2f 53 69 6d 75 6c 61 74 69 6f 6e 53 65 72 76\n0560   65 72 e9 03 00 00 30 82 03 e5 30 82 02 cd a0 03\n0570   02 01 02 02 06 01 67 b3 08 40 c8 30 0d 06 09 2a\n0580   86 48 86 f7 0d 01 01 0b 05 00 30 51 31 19 30 17\n0590   06 03 55 04 03 0c 10 53 69 6d 75 6c 61 74 69 6f\n05a0   6e 53 65 72 76 65 72 31 13 30 11 06 03 55 04 0a\n05b0   0c 0a 50 72 6f 73 79 73 20 4f 50 43 31 1f 30 1d\n05c0   06 0a 09 92 26 89 93 f2 2c 64 01 19 16 0f 44 45\n05d0   53 4b 54 4f 50 2d 53 36 44 49 34 48 56 30 1e 17\n05e0   0d 31 38 31 32 31 35 31 37 30 32 30 31 5a 17 0d\n05f0   32 38 31 32 31 32 31 38 30 32 30 31 5a 30 51 31\n0600   19 30 17 06 03 55 04 03 0c 10 53 69 6d 75 6c 61\n0610   74 69 6f 6e 53 65 72 76 65 72 31 13 30 11 06 03\n0620   55 04 0a 0c 0a 50 72 6f 73 79 73 20 4f 50 43 31\n0630   1f 30 1d 06 0a 09 92 26 89 93 f2 2c 64 01 19 16\n0640   0f 44 45 53 4b 54 4f 50 2d 53 36 44 49 34 48 56\n0650   30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01\n0660   01 05 00 03 82 01 0f 00 30 82 01 0a 02 82 01 01\n0670   00 92 e3 cd ae 72 52 e4 83 b2 19 61 f5 95 60 92\n0680   cf d1 ee d2 b6 1d 62 b1 67 64 92 74 66 f8 4c 91\n0690   64 9d 67 7f ae f1 39 2b ae 41 c5 35 45 39 dd 80\n06a0   48 5a 95 8c e1 a6 52 f0 81 89 53 59 fc f0 3b 12\n06b0   00 25 9d e3 ae a5 88 a3 6c e6 7f d3 e4 2a 59 24\n06c0   af 04 a0 6b a4 96 18 f7 b9 e2 af 30 bd 4d 6f 14\n06d0   3a 9d c8 88 43 6f 7f 16 c1 4d 10 5c 46 2b 52 cb\n06e0   3a 6c 8e 4f dd 66 74 bc 60 14 84 99 1c 43 68 f3\n06f0   8e 5b 34 da f9 39 b4 b1 70 ef d2 9d 07 1c 8a 85\n0700   36 0a ef 92 d0 75 d0 b2 91 2d bc 0e 3b 4c f6 97\n0710   8b e3 98 38 32 f9 9a 0b db 0f e6 17 fa bb 96 1d\n0720   f6 b3 d1 3f 40 34 8e bd c3 73 18 c5 3b 23 d9 b0\n0730   9c 37 81 4f 44 20 bf 9b d1 cd 06 59 43 22 17 67\n0740   17 ef f0 bf fe 17 5e c4 7c ef 09 5f 1d 37 06 ff\n0750   f8 b9 e1 98 29 5d cf 23 85 ff 28 2b 27 3c 82 5c\n0760   a7 a6 eb 5a 2a 12 76 13 4b 8a 0e 6f bc e1 b4 da\n0770   69 02 03 01 00 01 a3 81 c2 30 81 bf 30 1f 06 03\n0780   55 1d 23 04 18 30 16 80 14 3b b7 56 0d dd 8c 38\n0790   6a 2c 08 5c 04 5f 95 09 be c1 29 3e ed 30 1d 06\n07a0   03 55 1d 0e 04 16 04 14 3b b7 56 0d dd 8c 38 6a\n07b0   2c 08 5c 04 5f 95 09 be c1 29 3e ed 30 09 06 03\n07c0   55 1d 13 04 02 30 00 30 0b 06 03 55 1d 0f 04 04\n07d0   03 02 02 f4 30 1d 06 03 55 1d 25 04 16 30 14 06\n07e0   08 2b 06 01 05 05 07 03 01 06 08 2b 06 01 05 05\n07f0   07 03 02 30 46 06 03 55 1d 11 04 3f 30 3d 86 2a\n0800   75 72 6e 3a 44 45 53 4b 54 4f 50 2d 53 36 44 49\n0810   34 48 56 3a 4f 50 43 55 41 3a 53 69 6d 75 6c 61\n0820   74 69 6f 6e 53 65 72 76 65 72 82 0f 44 45 53 4b\n0830   54 4f 50 2d 53 36 44 49 34 48 56 30 0d 06 09 2a\n0840   86 48 86 f7 0d 01 01 0b 05 00 03 82 01 01 00 17\n0850   80 7f 97 50 40 29 d1 e1 a3 08 72 79 6c c1 10 4e\n0860   7b 2a 19 c1 89 89 89 cb 6d 1c 2a 84 34 1c 41 54\n0870   ee ee e4 a3 ca e3 a6 3e 40 b0 ab 10 0d 56 f6 da\n0880   fe 13 3a fd 9c c1 b8 4c 80 0b db 1b d8 82 17 2b\n0890   9d 6c a9 49 75 49 68 c3 38 bc 2d aa ae 0b f5 e6\n08a0   a2 89 40 7c 77 90 e0 c5 41 2f 22 5b 78 1a 45 53\n08b0   32 71 8d 8d e7 58 0b ce af 12 11 70 b7 d0 90 ed\n08c0   49 2a 7f 12 e4 d1 4d 6a 5d 26 fc fa 06 d6 26 c9\n08d0   25 9b 5a 3b 22 ee 04 4d 6d 02 26 0a f0 76 70 41\n08e0   36 29 e0 32 db 9b f8 a4 51 1e 30 0b 3b 08 49 a5\n08f0   d5 70 6f 6d a4 2d 30 12 81 15 c4 40 1d bf 7c 8f\n0900   cf f5 c8 25 92 1b f4 17 29 0e 2d 48 f9 72 37 77\n0910   dd 38 6f 28 93 34 30 36 24 19 fc c6 cf 54 ac a4\n0920   5c da 0c fa 6a a7 cf bd 20 54 3e c1 40 2c e6 78\n0930   5e 01 06 aa cb 9a 6a f6 0c 95 5b 45 a0 a3 a7 a5\n0940   8e 54 6b d5 aa 1a eb ef 65 93 fa c9 ab bf d4 01\n0950   00 00 00 2f 00 00 00 68 74 74 70 3a 2f 2f 6f 70\n0960   63 66 6f 75 6e 64 61 74 69 6f 6e 2e 6f 72 67 2f\n0970   55 41 2f 53 65 63 75 72 69 74 79 50 6f 6c 69 63\n0980   79 23 4e 6f 6e 65 02 00 00 00 14 00 00 00 63 65\n0990   72 74 69 66 69 63 61 74 65 5f 62 61 73 69 63 32\n09a0   35 36 02 00 00 00 ff ff ff ff ff ff ff ff 33 00\n09b0   00 00 68 74 74 70 3a 2f 2f 6f 70 63 66 6f 75 6e\n09c0   64 61 74 69 6f 6e 2e 6f 72 67 2f 55 41 2f 53 65\n09d0   63 75 72 69 74 79 50 6f 6c 69 63 79 23 42 61 73\n09e0   69 63 32 35 36 14 00 00 00 63 65 72 74 69 66 69\n09f0   63 61 74 65 5f 62 61 73 69 63 31 32 38 02 00 00\n0a00   00 ff ff ff ff ff ff ff ff 38 00 00 00 68 74 74\n0a10   70 3a 2f 2f 6f 70 63 66 6f 75 6e 64 61 74 69 6f\n0a20   6e 2e 6f 72 67 2f 55 41 2f 53 65 63 75 72 69 74\n0a30   79 50 6f 6c 69 63 79 23 42 61 73 69 63 31 32 38\n0a40   52 73 61 31 35 41 00 00 00 68 74 74 70 3a 2f 2f\n0a50   6f 70 63 66 6f 75 6e 64 61 74 69 6f 6e 2e 6f 72\n0a60   67 2f 55 41 2d 50 72 6f 66 69 6c 65 2f 54 72 61\n0a70   6e 73 70 6f 72 74 2f 75 61 74 63 70 2d 75 61 73\n0a80   63 2d 75 61 62 69 6e 61 72 79 00 00 00 00 00 ff\n0a90   ff ff ff ff ff ff ff 00 00 00 00\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node.js Project with Node-OPCUA and Async\nDESCRIPTION: Initializes a new Node.js project and installs the necessary dependencies: 'node-opcua' for OPC UA client functionality and 'async' for managing asynchronous operations using callbacks. This prepares the environment to run the client script.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_callback.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir sample_client\n$ cd sample_client\n$ npm init                      # creates a package.json\n$ npm install node-opcua --save\n$ npm install async --save\n```\n\n----------------------------------------\n\nTITLE: Setting up Node-OPCUA Development Environment using Git and PNPM\nDESCRIPTION: This sequence of shell commands guides a contributor on setting up the development environment for the node-opcua project. It involves cloning the repository using Git, navigating into the project directory, globally installing PNPM (a package manager), installing project dependencies using PNPM, recursively installing dependencies for workspace packages, and finally building the project. Requires Git and Node.js/npm to be pre-installed.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git://github.com/node-opcua/node-opcua.git\n$ cd node-opcua\n$ npm install -g pnpm \n$ pnpm install\n$ pnpm recursive install\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Managing OPC UA Server Certificates using node-opcua-client (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the node-opcua-client library to programmatically manage certificates on an OPC UA server. It covers establishing a secure connection with username/password authentication, requesting a certificate signing request (CSR), updating the server's certificate with a signed one (simulating a CA process), and applying the changes using the ClientPushCertificateManagement facility.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-server-configuration/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OPCUAClient, NodeId } from \"node-opcua-client\";\nimport { node-opcua-server-configuration } from \"node-opcua-server-configuration\";\n\nconst client = OPCUAClient.create({\n    securityMode: MessageSecurityMode.SignAndEncrypt,\n    securityPolicy: SecurityPolicy.Basic256Sha256,\n});\nawait client.withSessionAsync({\n   endpointUrl: \"opc.tcp://localhost:4840\",\n   userIdentityToken: {\n        type: UserTokenType.UserName,\n        userName: \"admin\",\n        password: process.env.ADMIN_PASSWORD\n   }\n}, async session() {\n\n    const pushCertificateSession = new ClientPushCertificateManagement(session);\n  \n    // get a certificate signing request from the OPCUA server\n    const response = await pm.createSigningRequest(\n        \"DefaultApplicationGroup\", NodeId.nullNodeId, \"CN=MyApplication\");\n\n  \n    // call your own CA to sign the certificate\n    const certificateFull = await produceCertificate(response.certificateSigningRequest);\n\n    // now update the certificate of the server\n    const response2 = await pushCertificateSession.updateCertificate(\n        \"DefaultApplicationGroup\",\n         NodeId.nullNodeId,\n         certificate,\n         issuerCertificates\n    );\n    // apply the new certificate\n    await pushCertificateSession.applyChanges();\n\n});\n```\n\n----------------------------------------\n\nTITLE: Installing node-opcua Local Discovery Server via npm (Shell)\nDESCRIPTION: Installs the node-opcua Local Discovery Server globally using npm and verifies the installation by checking the version. Requires Node.js and npm installed on the system. Expects command-line execution in a Linux, macOS, or WSL terminal. Produces a globally available 'lds' command. Outputs the installed LDS version on success.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -g node-opcua-local-discovery-server\n$ lds --version\n```\n\n----------------------------------------\n\nTITLE: Running Demo Client from Source\nDESCRIPTION: These commands clone the node-opcua repository, navigate into it, install pnpm globally, and then use pnpm to install dependencies recursively, build the project, and runs the demo client. pnpm is used as the package manager.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n $ git clone https://github.com/node-opcua/node-opcua.git\n     $ cd node-opcua\n     $ npm install -g pnpm \n     $ pnpm recursive install\n     $ pnpm build\n     $ node packages/node-opcua-samples/bin/simple_client.js -e \"opc.tcp://opcserver.mAutomation.net:4841\" -n=\"ns=1;s=EVR2.system.RTC_SEC\"\n```\n\n----------------------------------------\n\nTITLE: Installing node-opcua File Transfer Packages - Bash\nDESCRIPTION: This snippet shows the commands required to install the core node-opcua library and the node-opcua-file-transfer extension package using npm.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install node-opcua\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install node-opcua-file-transfer\n```\n\n----------------------------------------\n\nTITLE: Installing Node-OPCUA from Source\nDESCRIPTION: These commands clone the node-opcua repository, navigate into it, install pnpm globally, and then use pnpm to install dependencies recursively and build the project. pnpm is used as the package manager.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n $ git clone https://github.com/node-opcua/node-opcua.git\n     $ cd node-opcua\n     $ npm install -g pnpm \n     $ pnpm recursive install\n     $ pnpm build\n     $ node packages/node-opcua-samples/bin/simple_server\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Server File Exposure - Javascript\nDESCRIPTION: This snippet imports the necessary classes and functions from 'node-opcua' and 'node-opcua-file-transfer' to set up an OPC UA server and expose a file.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OPCUAServer, UAFile } from \"node-opcua\";\nimport { installFileType } from \"node-opcua-file-transfer\";\n```\n\n----------------------------------------\n\nTITLE: Running Simple Client with Endpoint URL\nDESCRIPTION: This snippet shows how to run the `simple_client` executable, passing only the endpoint URL as an argument. It connects to a specific OPC UA server. It assumes the `simple_client` executable is located in the `node_modules/.bin` directory.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./node_modules/.bin/simple_client  -e \"opc.tcp://opcuademo.sterfive.com:26543\" \n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Client File Access - Javascript\nDESCRIPTION: This snippet imports the core 'OPCUAClient' from 'node-opcua' and the 'ClientFile' class from 'node-opcua-file-transfer' required for client-side file operations.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OPCUAClient } from \"node-opcua\";\nimport { ClientFile } from \"node-opcua-file-transfer\";\n\nconst client = OPCUAClient.create({});\n\nawait client.connect();\nconst session = await client.createSession();\n```\n\n----------------------------------------\n\nTITLE: Starting the OPC UA server from command line\nDESCRIPTION: A simple command line instruction to start the OPC UA server script that was created with the methods.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/server_with_method.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ node server_with_method.js\n```\n\n----------------------------------------\n\nTITLE: Opening File with Specific Mode - Javascript\nDESCRIPTION: This snippet demonstrates opening the OPC UA file node for operations (read/write) using the 'open()' method and specifying the desired access mode from the 'OpenFileMode' enumeration. The file must be opened before reading or writing.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = OpenFileMode.ReadWriteAppend;\nawait clientFile.open(mode);\n```\n\n----------------------------------------\n\nTITLE: Executing the OPC UA Server Script using Node.js Shell Command\nDESCRIPTION: Once the server script (e.g., sample_server.js) is written and saved, this shell command runs the server using the Node.js runtime. It expects the current directory to contain the server script and that node-opcua is installed. This starts the server and allows clients to connect at the specified endpoint.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_server.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ node sample_server.js\n```\n\n----------------------------------------\n\nTITLE: Getting File Size with ClientFile - Javascript\nDESCRIPTION: This snippet shows how to retrieve the current size of the OPC UA file node using the 'size()' method of the 'ClientFile' object. The file does not need to be opened to get its size.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-file-transfer/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst clientFile = new ClientFile(session, fileNodeId);\n\nconst size = await clientFile.size();\nconsole.log(\"the current file size is : \",size,\" bytes);\n```\n\n----------------------------------------\n\nTITLE: Running Client Script (Shell)\nDESCRIPTION: Command to execute the TypeScript client script using the `ts-node` runner, which compiles and runs TypeScript files directly.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nts-node sample_client_ts.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying LDS Help with Docker (Shell)\nDESCRIPTION: Displays supported options and help message for the LDS Docker image. Requires Docker to be installed and accessible. Command runs the 'sterfive/lds:latest' image with the '--help' argument, showing available CLI parameters and flags for configuration.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#  docker run sterfive/lds:latest --help\n```\n\n----------------------------------------\n\nTITLE: Running node-opcua LDS Docker Container in Background (Linux Shell)\nDESCRIPTION: Starts the LDS container in detached mode, mapping TCP port 4840 and mounting persistent configuration storage. Sets the hostname from the Linux system's fully qualified domain name. Requires Docker, with /temp/lds-config existing on the host for certificate configuration. Command leaves the container running in the background.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -d -p 4840:4840 -v /temp/lds-config:/root/.config -e HOSTNAME=`hostname --fqdn` sterfive/lds:latest\n```\n\n----------------------------------------\n\nTITLE: Running node-opcua LDS Docker Container in Background (Windows CMD)\nDESCRIPTION: Starts the LDS container in detached mode on Windows, mapping port 4840 and mounting configuration from a local directory. Sets the HOSTNAME environment variable to the Windows computer name. Requires Docker for Windows and the specified local directory to exist. Runs in background and stores certificates in a persistent folder.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/README.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n$ docker run -d -p 4840:4840 -v C:\\temp\\lds-config:/root/.config -e HOSTNAME=%COMPUTERNAME% sterfive/lds:latest\n```\n\n----------------------------------------\n\nTITLE: Reading Temperature Data from Sensors with node-w1bus\nDESCRIPTION: This code defines functions to read individual sensor values asynchronously and gather data from all detected sensors. The read_sensor function requests current temperature data, handling success and error cases, while read_all_sensors orchestrates multiple sensor reads, ensuring all data is collected before proceeding. This pattern facilitates real-time monitoring of sensor readings.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/monitoring_home_temperature_with_a_raspberry.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction read_sensor(sensor, callback) {\n  bus\n    .getValueFrom(sensor)\n    .then(function(res) {\n      callback(null, res.result);\n    })\n    .catch(callback);\n}\n\nfunction read_all_sensors(done) {\n  let i = 0;\n  sensors.forEach(sensor => {\n    console.log(sensor);\n    read_sensor(sensor, (err, value) => {\n      i += 1;\n      if (i === sensors.length) {\n        done(err);\n      }\n    });\n  });\n}\n\n// Usage example:\n// read_all_sensors((err, values) => { console.log(values); });\n```\n\n----------------------------------------\n\nTITLE: Checking LDS Certificate with OpenSSL (Shell)\nDESCRIPTION: Inspects the contents of the LDS server certificate PEM file using openssl. The command reads and decodes a certificate at the specified path, outputting human-readable details to verify certificate correctness and metadata. Requires openssl installed and accessible, and the certificate file must exist at the provided path.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -in c:\\sterfive_config\\node-opcua-local-discovery-server-nodejs\\pki\\local_discovery_server_certificate.pem -text\n```\n\n----------------------------------------\n\nTITLE: Listing Local Docker Images (Shell)\nDESCRIPTION: Displays a list of all Docker images currently available on the local machine. This command is useful for verifying that the image was built correctly and for identifying its name or ID before tagging.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/NOTES.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker images list\n```\n\n----------------------------------------\n\nTITLE: Improving Usability and Configuration Options (TypeScript/JavaScript)\nDESCRIPTION: This snippet introduces options for passing serverInfo and buildInfo, flexible variable type definitions, exposing vendor-specific variables, and using FQDN for endpoint URNs. Additionally, it sets timeout hints appropriately. These updates make server configuration more adaptable and compliant with best practices.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n- #48  provides a way to pass specify serverInfo and buildInfo as options to OPCUAServer\n- #50 add flexible ways to specify typeDefinition and dataType in engine.addressSpace.addVariable\n- expose transactionCount Variables on VendorServerInfo\n- expose bytesWritten and bytesRead Variables on VendorServerInfo\n- use fully qualified domain name (fqdn), whenever possible, to build default endpoint urn instead of hostname only.\n- #40, set timeoutHint to non zero value to cope with servers that wrongly assume that timeoutHint =0 is 0s ( instead of 'no timeout' as per spec)\n```\n\n----------------------------------------\n\nTITLE: Running node-opcua Local Discovery Server Using NPX (Shell)\nDESCRIPTION: Runs the latest node-opcua Local Discovery Server binary using npx and displays the online help. Requires Node.js and npx on the system; no global installation is required. Expects execution in a compatible shell environment. Prints help documentation to the console as output.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$npx node-opcua-local-discovery-server --help\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image via npm Script (Shell)\nDESCRIPTION: Executes a predefined npm script named 'docker-build'. This script should contain the actual Docker build command (e.g., `docker build -t lds .`). It builds the project's Docker image based on the Dockerfile.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/NOTES.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run docker-build\n```\n\n----------------------------------------\n\nTITLE: Tagging Local Docker Image (Shell)\nDESCRIPTION: Creates a new tag for a local Docker image. The tag specifies the target repository and image name on Docker Hub (or another registry). This maps the locally built 'lds' image to 'sterfive/lds' with the '1.0' version tag.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/NOTES.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker tag lds  sterfive/lds:1.0\n```\n\n----------------------------------------\n\nTITLE: Defining OPC UA TemperatureSensorType Object and Variables in JavaScript\nDESCRIPTION: Defines a new OPC UA ObjectType called TemperatureSensorType using JavaScript. It adds a mandatory Double variable named Temperature to this object type within the OPC UA server address space. The snippet requires a pre-existing addressSpace object and OPC UA DataType definitions. It highlights how to extend base types and add essential components to model an OPC UA sensor device.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/create_new_object_type.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst namespace = addressSpace.getOwnNamespace();\n\nconst temperatureSensorTypeParams = {\n    browseName: \"TemperatureSensorType\",\n};\n\nconst temperatureSensorType = namespace.addObjectType(temperatureSensorTypeParams);\n\nnamespace.addVariable({\n    componentOf:    temperatureSensorType,\n    browseName:     \"Temperature\",\n    description:    \"The temperature value measured by the sensor\",\n    dataType:       \"Double\",\n    modellingRule:  \"Mandatory\",\n    value: { dataType: DataType.Double, value: 19.5 }\n});\n```\n\n----------------------------------------\n\nTITLE: Logging in to Docker Hub (Shell)\nDESCRIPTION: Authenticates the Docker client with Docker Hub. This step is necessary before pushing images to a private or public repository on Docker Hub. Replace placeholders with your actual username and email.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/NOTES.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker login --username=_your_hub_username --email=youremail@company.com\n```\n\n----------------------------------------\n\nTITLE: Defining Base Analyser Device Interface - TypeScript\nDESCRIPTION: This interface defines the core structure ('_Base') for the OPC UA Analyser DeviceType, inheriting from UADevice_Base. It aggregates interfaces for the parameterSet, methodSet, identification, configuration, status, factory settings, and state machine components, providing a comprehensive definition of the analyser device structure.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice_Base extends UADevice_Base {\n    /**\n     * parameterSet\n     * Flat list of Parameters\n     */\n    parameterSet?: UAAnalyserDevice_parameterSet;\n    /**\n     * methodSet\n     * Flat list of Methods\n     */\n    methodSet: UAAnalyserDevice_methodSet;\n    /**\n     * identification\n     * Used to organize parameters for identification of\n     * this TopologyElement\n     */\n    identification: UAAnalyserDevice_identification;\n    configuration: UAAnalyserDevice_configuration;\n    status: UAAnalyserDevice_status;\n    factorySettings: UAFunctionalGroup;\n    analyserStateMachine: UAAnalyserDeviceStateMachine;\n   // PlaceHolder for $ChannelIdentifier$\n   // PlaceHolder for $AccessorySlotIdentifier$\n}\n```\n\n----------------------------------------\n\nTITLE: Sensor Discovery Using node-w1bus in Node.js\nDESCRIPTION: This snippet initializes the 1-Wire bus, searches for all connected temperature sensors, and stores their identifiers. It uses the node-w1bus library for hardware communication and handles asynchronous operations with promises and callbacks. This setup is essential for dynamically detecting sensors before data acquisition.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/monitoring_home_temperature_with_a_raspberry.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst w1bus = require(\"node-w1bus\");\n\nconst bus = w1bus.create();\n\nlet sensors = [];\n\nfunction find_sensors(done) {\n  bus\n    .listAllSensors()\n    .then(data => {\n      sensors = data.ids;\n      done();\n    })\n    .catch(function(err) {\n      console.log(\"error\", err);\n    });\n}\n\n// Usage example:\n// find_sensors(() => { console.log(sensors); });\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting an OPCUA Model with node-opcua-modeler in TypeScript\nDESCRIPTION: This code demonstrates the complete workflow of creating and exporting an OPCUA model using node-opcua-modeler. It imports necessary components, defines namespace and version information, specifies required nodeset files, implements a model creation function, and exports the resulting model to an XML file.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-modeler/readme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    AddressSpace,\n    buildModel,\n    nodesets\n} from \"node-opcua-modeler\";\nimport fs from \"fs\";\n\n// the namespaceUri\nconst namespaceUri = \"http://acme.com/Boiler/V0\";\nconst version= \"1.0.0\";\n\n// the nodeset file required by your model\nconst xmlFiles: string[] = [\n    nodesets.standard,\n    nodesets.di\n];\n    \nasync function createModel(addressSpace: AddressSpace): Promise<void> {\n    // create your model here !\n}\n\n(async () => {\n    try {\n        const { markdown, xmlModel, symbols } = await buildModel({\n            namespaceUri,\n            version,\n            xmlFiles,\n            createModel\n        });\n        // save model to a file\n        const nodesetFiename = \"./MyModel.NodeSet2.xml\";\n        await fs.promises.writeFile(nodesetFiename, xmlModel, \"utf-8\");\n\n    } catch (err) {\n        console.log(\"Error\", err);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Monitoring and Behavior Fixes (TypeScript/JavaScript)\nDESCRIPTION: This snippet details enhancements to the subscription service, including implementing SetMonitoringMode requests, adjusting RepublishResponse behavior, ensuring monitored item timers are correctly managed, and adding the GetMonitoredItems method. These improvements facilitate reliable subscription management and monitor item lifecycle within the server.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- implement SetMonitoringMode Request/Response\n- fixes RepublishResponse behavior on server\n- make sure monitoredItem timer func is not called if timer has been shutdown\n- #25 implement GetMonitoredItems method on Server Object\n```\n\n----------------------------------------\n\nTITLE: Defining Analyser Device Identification Interface - TypeScript\nDESCRIPTION: This interface specifies the structure for the 'identification' functional group within an OPC UA Analyser Device. It contains properties essential for identifying the device, such as the manufacturer name, model name, and serial number, providing standard fields for asset management.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice_identification extends UAFunctionalGroup { // Object\n      /**\n       * manufacturer\n       * Name of the company that manufactured the device\n       */\n      manufacturer: UAProperty<LocalizedText, DataType.LocalizedText>;\n      /**\n       * model\n       * Model name of the device\n       */\n      model: UAProperty<LocalizedText, DataType.LocalizedText>;\n      /**\n       * serialNumber\n       * Identifier that uniquely identifies, within a\n       * manufacturer, a device instance\n       */\n      serialNumber: UAProperty<UAString, DataType.String>;\n}\n```\n\n----------------------------------------\n\nTITLE: Advancing Data Access and Standard Units (TypeScript/JavaScript)\nDESCRIPTION: This part initiates DataAccess implementation, adds standard measurement units within EUInformation, and introduces axis information and the addAnalogDataItem function for DA node creation. These features facilitate standardized data representation and enhanced data modeling in the OPC UA address space.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n- start implementation of DataAccess (Part 8)\n- add some standard units for EUInformation\n- AxisInformation\n- add addAnalogDataItem to create DA node in address space\n```\n\n----------------------------------------\n\nTITLE: Enhancing Session Management and Timeout Handling (TypeScript/JavaScript)\nDESCRIPTION: This code introduces restrictions on the number of concurrent sessions and automates session discarding after inactivity timeout (sessionTimeout). These features improve server scalability and ensure stale sessions are efficiently terminated, requiring dependencies related to session control and timeout configuration.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- add ability to restrict number of concurrent sessions on server.\n- make sure running sessions are automatically discarded after the timeout period has been reached without any activity from the client. (sessionTimeout)\n```\n\n----------------------------------------\n\nTITLE: Running Simple Client with Endpoint and Node ID\nDESCRIPTION: This snippet demonstrates how to run the `simple_client` executable, passing an endpoint URL and a node ID as arguments. It assumes the `simple_client` executable is located in the `node_modules/.bin` directory. The endpoint specifies the OPC UA server to connect to, and the node ID specifies the variable to read.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./node_modules/.bin/simple_client  -e \"opc.tcp://opcserver.mAutomation.net:4841\" -n=\"ns=1;s=EVR2.system.RTC_SEC\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node-OPCUA Samples Package using NPM\nDESCRIPTION: This snippet shows how to install the node-opcua-samples package using npm. It creates a new directory, navigates to it, initializes npm, installs the package with `--unsafe-perms`, and then executes the `simple_server` script from within the `node_modules/.bin` directory.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ mkdir myserver\n$ cd myserver\n$ npm init\n$ npm install node-opcua-samples --unsafe-perms\n$ ./node_modules/.bin/simple_server\n```\n\n----------------------------------------\n\nTITLE: Installing Node-OPCUA Package using NPM\nDESCRIPTION: This snippet provides instructions for installing the node-opcua package as a node module using npm. It creates a new directory, navigates into it, initializes the npm project, and then installs the node-opcua package with the --unsafe-perms flag.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ mkdir mytest\n$ cd mytest\n$ npm init \n$ npm install node-opcua --unsafe-perms\n$ # Create your first app.js file!\n```\n\n----------------------------------------\n\nTITLE: Setting Up Subscription and Monitored Item (TypeScript)\nDESCRIPTION: Creates a subscription on the session, configures its parameters (publishing interval, lifetime, etc.), and attaches event listeners. It then creates a monitored item for the 'Value' attribute of the 'ns=1;s=free_memory' node, configures its monitoring parameters, and attaches a 'changed' event listener to log value updates. The code waits for 10 seconds before terminating the subscription.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/documentation/creating_a_client_typescript.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = ClientSubscription.create(session, {\n  requestedPublishingInterval: 1000,\n  requestedLifetimeCount: 100,\n  requestedMaxKeepAliveCount: 10,\n  maxNotificationsPerPublish: 100,\n  publishingEnabled: true,\n  priority: 10\n});\n\nsubscription\n  .on(\"started\", function() {\n    console.log(\n      \"subscription started for 2 seconds - subscriptionId=\",\n      subscription.subscriptionId\n    );\n  })\n  .on(\"keepalive\", function() {\n    console.log(\"keepalive\");\n  })\n  .on(\"terminated\", function() {\n    console.log(\"terminated\");\n  });\n\n// install monitored item\n\nconst itemToMonitor: ReadValueIdOptions = {\n  nodeId: \"ns=1;s=free_memory\",\n  attributeId: AttributeIds.Value\n};\nconst parameters: MonitoringParametersOptions = {\n  samplingInterval: 100,\n  discardOldest: true,\n  queueSize: 10\n};\n\nconst monitoredItem = ClientMonitoredItem.create(\n  subscription,\n  itemToMonitor,\n  parameters,\n  TimestampsToReturn.Both\n);\n\nmonitoredItem.on(\"changed\", (dataValue: DataValue) => {\n  console.log(\" value has changed : \", dataValue.value.toString());\n});\n\nawait timeout(10000);\n\nconsole.log(\"now terminating subscription\");\nawait subscription.terminate();\n```\n\n----------------------------------------\n\nTITLE: Defining Analyser Device Configuration Interface - TypeScript\nDESCRIPTION: This interface defines the 'configuration' functional group for an OPC UA Analyser Device. Currently, it includes an optional 'configData' property of type UAFile, allowing the representation of large configuration data sets associated with the analyser.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice_configuration extends UAFunctionalGroup { // Object\n      /**\n       * configData\n       * Optional analyser device large configuration\n       */\n      configData?: UAFile;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixes for Security and Compatibility (TypeScript/JavaScript)\nDESCRIPTION: This snippet addresses various issues such as secure connection security fixes, translation of browse paths, GUID formatting, Int64 encoding, and handling message chunking. It ensures secure, reliable, and compatible server operations across different scenarios.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n- fix various issues with secure connection\n- fix issue in TranslateBrowsePath\n- #42 GUID : permit lower case letters in GUID strings\n- fix high low inversion in Int64 encoding\n- #36 handle HEL messages received by server that are received in small chunks\n- #36 handle samplingInterval === -1 in CreateMonitoredItem Request\n```\n\n----------------------------------------\n\nTITLE: Version 0.40: Support for Security and Timeout Enhancements (TypeScript/JavaScript)\nDESCRIPTION: This snippet details the addition of support for Sign and Encrypt, endpoint specification, handling missing result masks, source timestamp handling, sampling interval clamping, and configurable server channel layer timeout, significantly enhancing security, configurability, and robustness of the server.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n- #17 add support for Sign and Encrypt\n- #17 add ability for server to specify which endpoint to expose\n- #20 fix nodecrawler missing resultMask\n- #21 Add the ability to handle a specific source timestamp on variable\n- #23 clamp monitored item samplingInterval\n- #24 ServerSecureChannelLayer timeout between message was too short and is now be configurable\n```\n\n----------------------------------------\n\nTITLE: Extending Read Service with Asynchronous Capabilities (TypeScript/JavaScript)\nDESCRIPTION: This snippet adds support for asynchronous read and write operations on the server; implementing #34 and #35. It enhances server responsiveness by allowing non-blocking read/write requests, essential for handling high concurrency and maintaining scalability.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/RELEASE_NOTES.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n#34, #35 Add asynchronous value read/write capability on server side\n```\n\n----------------------------------------\n\nTITLE: Defining Analyser Device Status Interface - TypeScript\nDESCRIPTION: This interface specifies the structure for the 'status' functional group of an OPC UA Analyser Device. It currently includes the 'diagnosticStatus' property, which provides the general health status of the analyser as a UADataItem.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice_status extends UAFunctionalGroup { // Object\n      /**\n       * diagnosticStatus\n       * General health status of the analyser\n       */\n      diagnosticStatus: UADataItem<EnumDeviceHealth, DataType.Int32>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UAChromatographDevice Interface in TypeScript for OPC UA ADI\nDESCRIPTION: Defines the TypeScript interface for a ChromatographDeviceType (nodeId=1013) in the OPC UA ADI namespace. The interface extends UAAnalyserDevice, which provides the base functionality for analyzer devices in an OPC UA system. This is an automatically generated type definition.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/ChromatographDeviceType.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * |                |                                                            |\n * |----------------|------------------------------------------------------------|  \n * |namespace       |http://opcfoundation.org/UA/ADI/                            |\n * |nodeClass       |ObjectType                                                  |\n * |typedDefinition |ChromatographDeviceType i=1013                              |\n * |isAbstract      |false                                                       |\n */\nexport type UAChromatographDevice_Base = UAAnalyserDevice_Base;\nexport interface UAChromatographDevice extends UAAnalyserDevice, UAChromatographDevice_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Analyser Device Parameter Set Interface - TypeScript\nDESCRIPTION: This interface defines the structure for the 'parameterSet' object of an OPC UA Analyser Device. It includes properties representing diagnostic status and an optional configuration file, typically used to group parameters related to the analyser's operational state and configuration.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice_parameterSet extends UAObject { // Object\n      /**\n       * diagnosticStatus\n       * General health status of the analyser\n       */\n      diagnosticStatus: UADataItem<EnumDeviceHealth, DataType.Int32>;\n      /**\n       * configData\n       * Optional analyser device large configuration\n       */\n      configData?: UAFile;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Analyser Device Method Set Interface - TypeScript\nDESCRIPTION: This interface outlines the methods available for an OPC UA Analyser Device, grouped within the 'methodSet' object. It includes methods for managing configuration data (get, set, digest) and controlling the operational state of analyser channels (reset, start, stop, abort) and the device itself (gotoOperating, gotoMaintenance).\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-convert-nodeset-to-javascript/test/references/node-opcua-adi_UAAnalyserDevice.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UAAnalyserDevice_methodSet extends UAObject { // Object\n      getConfiguration: UAMethod;\n      setConfiguration: UAMethod;\n      getConfigDataDigest: UAMethod;\n      compareConfigDataDigest: UAMethod;\n      resetAllChannels: UAMethod;\n      startAllChannels: UAMethod;\n      stopAllChannels: UAMethod;\n      abortAllChannels: UAMethod;\n      gotoOperating: UAMethod;\n      gotoMaintenance: UAMethod;\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Docker Hub (Shell)\nDESCRIPTION: Uploads the tagged Docker image ('sterfive/lds:1.0') to the specified repository on Docker Hub. This makes the image available for others to pull or for deployment. Requires prior successful login via `docker login`.\nSOURCE: https://github.com/node-opcua/node-opcua/blob/master/packages/node-opcua-local-discovery-server/NOTES.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker push sterfive/lds:1.0\n```"
  }
]