[
  {
    "owner": "nginxproxymanager",
    "repo": "nginx-proxy-manager",
    "content": "TITLE: Configuring Docker Compose for Nginx Proxy Manager\nDESCRIPTION: This code snippet shows the minimal docker-compose.yml configuration required to run Nginx Proxy Manager. It exposes the necessary ports and sets up volume mounts for persistent data storage.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/guide/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for Nginx Proxy Manager with SQLite\nDESCRIPTION: Docker Compose configuration for running Nginx Proxy Manager with the default SQLite database. This configuration exposes the necessary ports and sets up volumes for data persistence.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/setup/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      # These ports are in format <host-port>:<container-port>\n      - '80:80' # Public HTTP Port\n      - '443:443' # Public HTTPS Port\n      - '81:81' # Admin Web Port\n      # Add any other Stream port you want to expose\n      # - '21:21' # FTP\n\n    environment:\n      # Uncomment this if you want to change the location of\n      # the SQLite DB file within the container\n      # DB_SQLITE_FILE: \"/data/database.sqlite\"\n\n      # Uncomment this if IPv6 is not enabled on your host\n      # DISABLE_IPV6: 'true'\n\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Nginx Proxy Manager\nDESCRIPTION: This YAML snippet defines a Docker Compose configuration for running Nginx Proxy Manager. It specifies the image, port mappings, and volume mounts for persistent data storage.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/README.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: 'docker.io/jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n```\n\n----------------------------------------\n\nTITLE: Starting the Nginx Proxy Manager Container\nDESCRIPTION: This snippet demonstrates how to start the Nginx Proxy Manager container using either the traditional docker-compose command or the newer docker compose plugin. This brings up the container in detached mode.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/guide/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n\n# If using docker-compose-plugin\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Nginx Proxy Manager with Docker Compose\nDESCRIPTION: These Bash commands demonstrate how to start the Nginx Proxy Manager stack using Docker Compose. It includes options for both traditional docker-compose and the newer docker compose plugin.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n\n# If using docker-compose-plugin\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Startup Command\nDESCRIPTION: Command to start the Nginx Proxy Manager containers in detached mode using Docker Compose.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/setup/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nginx Proxy Manager with Docker Compose\nDESCRIPTION: These commands pull the latest Nginx Proxy Manager image and recreate the containers. The process automatically updates databases and other requirements without manual intervention.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/upgrading/index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with PostgreSQL Database\nDESCRIPTION: Docker Compose configuration for running Nginx Proxy Manager with a PostgreSQL database. This setup includes both the application and PostgreSQL database containers with proper environment variable configuration.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/setup/index.md#2025-04-19_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      # These ports are in format <host-port>:<container-port>\n      - '80:80' # Public HTTP Port\n      - '443:443' # Public HTTPS Port\n      - '81:81' # Admin Web Port\n      # Add any other Stream port you want to expose\n      # - '21:21' # FTP\n    environment:\n      # Postgres parameters:\n      DB_POSTGRES_HOST: 'db'\n      DB_POSTGRES_PORT: '5432'\n      DB_POSTGRES_USER: 'npm'\n      DB_POSTGRES_PASSWORD: 'npmpass'\n      DB_POSTGRES_NAME: 'npm'\n      # Uncomment this if IPv6 is not enabled on your host\n      # DISABLE_IPV6: 'true'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n    depends_on:\n      - db\n\n  db:\n    image: postgres:latest\n    environment:\n      POSTGRES_USER: 'npm'\n      POSTGRES_PASSWORD: 'npmpass'\n      POSTGRES_DB: 'npm'\n    volumes:\n      - ./postgres:/var/lib/postgresql/data\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with MariaDB Database\nDESCRIPTION: Docker Compose configuration for running Nginx Proxy Manager with a MariaDB database instead of SQLite. This setup includes both the application and database containers with proper linking.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/setup/index.md#2025-04-19_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      # These ports are in format <host-port>:<container-port>\n      - '80:80' # Public HTTP Port\n      - '443:443' # Public HTTPS Port\n      - '81:81' # Admin Web Port\n      # Add any other Stream port you want to expose\n      # - '21:21' # FTP\n    environment:\n      # Mysql/Maria connection parameters:\n      DB_MYSQL_HOST: \"db\"\n      DB_MYSQL_PORT: 3306\n      DB_MYSQL_USER: \"npm\"\n      DB_MYSQL_PASSWORD: \"npm\"\n      DB_MYSQL_NAME: \"npm\"\n      # Uncomment this if IPv6 is not enabled on your host\n      # DISABLE_IPV6: 'true'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n    depends_on:\n      - db\n\n  db:\n    image: 'jc21/mariadb-aria:latest'\n    restart: unless-stopped\n    environment:\n      MYSQL_ROOT_PASSWORD: 'npm'\n      MYSQL_DATABASE: 'npm'\n      MYSQL_USER: 'npm'\n      MYSQL_PASSWORD: 'npm'\n      MARIADB_AUTO_UPGRADE: '1'\n    volumes:\n      - ./mysql:/var/lib/mysql\n```\n\n----------------------------------------\n\nTITLE: Using Docker Secrets for Sensitive Information\nDESCRIPTION: Complete docker-compose.yml example using Docker secrets to handle sensitive credentials. This approach prevents passwords from being stored or passed in plaintext in environment variables.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  # Secrets are single-line text files where the sole content is the secret\n  # Paths in this example assume that secrets are kept in local folder called \".secrets\"\n  DB_ROOT_PWD:\n    file: .secrets/db_root_pwd.txt\n  MYSQL_PWD:\n    file: .secrets/mysql_pwd.txt\n\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    restart: unless-stopped\n    ports:\n      # Public HTTP Port:\n      - '80:80'\n      # Public HTTPS Port:\n      - '443:443'\n      # Admin Web Port:\n      - '81:81'\n    environment:\n      # These are the settings to access your db\n      DB_MYSQL_HOST: \"db\"\n      DB_MYSQL_PORT: 3306\n      DB_MYSQL_USER: \"npm\"\n      # DB_MYSQL_PASSWORD: \"npm\"  # use secret instead\n      DB_MYSQL_PASSWORD__FILE: /run/secrets/MYSQL_PWD\n      DB_MYSQL_NAME: \"npm\"\n      # If you would rather use Sqlite, remove all DB_MYSQL_* lines above\n      # Uncomment this if IPv6 is not enabled on your host\n      # DISABLE_IPV6: 'true'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n    secrets:\n      - MYSQL_PWD\n    depends_on:\n      - db\n\n  db:\n    image: jc21/mariadb-aria\n    restart: unless-stopped\n    environment:\n      # MYSQL_ROOT_PASSWORD: \"npm\"  # use secret instead\n      MYSQL_ROOT_PASSWORD__FILE: /run/secrets/DB_ROOT_PWD\n      MYSQL_DATABASE: \"npm\"\n      MYSQL_USER: \"npm\"\n      # MYSQL_PASSWORD: \"npm\"  # use secret instead\n      MYSQL_PASSWORD__FILE: /run/secrets/MYSQL_PWD\n      MARIADB_AUTO_UPGRADE: '1'\n    volumes:\n      - ./mysql:/var/lib/mysql\n    secrets:\n      - DB_ROOT_PWD\n      - MYSQL_PWD\n```\n\n----------------------------------------\n\nTITLE: Portainer Service Configuration with External Network\nDESCRIPTION: Example docker-compose.yml configuration for Portainer service using an external network. This setup allows Nginx Proxy Manager to communicate with Portainer without exposing ports outside the network.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\n  portainer:\n    image: portainer/portainer\n    privileged: true\n    volumes:\n      - './data:/data'\n      - '/var/run/docker.sock:/var/run/docker.sock'\n    restart: unless-stopped\n\nnetworks:\n  default:\n    external: true\n    name: scoobydoo\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Healthcheck for Nginx Proxy Manager\nDESCRIPTION: Configuration to add Docker healthcheck to Nginx Proxy Manager in docker-compose.yml. This enables Docker to monitor the container's health status and restart if necessary.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [\"CMD\", \"/usr/bin/check-health\"]\n  interval: 10s\n  timeout: 3s\n```\n\n----------------------------------------\n\nTITLE: Configuring User/Group Permissions in Docker Compose\nDESCRIPTION: Configuration example to run Nginx Proxy Manager services as a non-root user/group by setting PUID and PGID environment variables. This changes the ownership of data and letsencrypt folders at startup.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    environment:\n      PUID: 1000\n      PGID: 1000\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring External Network in Docker Compose\nDESCRIPTION: Configuration to use an external Docker network in docker-compose.yml file. This allows services to communicate without exposing ports to the host's interfaces.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  default:\n    external: true\n    name: scoobydoo\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network for Secure Service Communication\nDESCRIPTION: Command to create a custom Docker network for secure communication between services running on the same Docker host.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create scoobydoo\n```\n\n----------------------------------------\n\nTITLE: Disabling IPv6 in Nginx Proxy Manager\nDESCRIPTION: Docker environment variable configuration to disable IPv6 in Nginx Proxy Manager. This is useful for Docker hosts where IPv6 is not enabled to prevent 'Address family not supported by protocol' errors.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    environment:\n      DISABLE_IPV6: 'true'\n```\n\n----------------------------------------\n\nTITLE: Certbot DNS Plugin Configuration JSON Structure\nDESCRIPTION: Defines the JSON structure for configuring Certbot DNS plugins. Each plugin entry includes display name, package information, version requirements, dependencies, credential templates, and the full plugin name used in Certbot command line.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/global/README.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cloudflare\": {\n    \"display_name\": \"Name displayed to the user\",\n    \"package_name\": \"Package name in PyPi repo\",\n    \"version_requirement\": \"Optional package version requirements (e.g. ==1.3 or >=1.2,<2.0, see https://www.python.org/dev/peps/pep-0440/#version-specifiers)\",\n    \"dependencies\": \"Additional dependencies, space separated (as you would pass it to pip install)\",\n    \"credentials\": \"Template of the credentials file\",\n    \"full_plugin_name\": \"The full plugin name as used in the commandline with certbot, e.g. 'dns-njalla'\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling geoip2 Module in Custom Nginx Configuration\nDESCRIPTION: Custom Nginx configuration snippet to enable the geoip2 module. This should be placed in the /data/nginx/custom/root_top.conf file to load the necessary modules.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nload_module /usr/lib/nginx/modules/ngx_http_geoip2_module.so;\nload_module /usr/lib/nginx/modules/ngx_stream_geoip2_module.so;\n```\n\n----------------------------------------\n\nTITLE: Customizing logrotate Settings with Volume Mount\nDESCRIPTION: Docker volume mount configuration to customize logrotate settings for Nginx Proxy Manager. This allows changing the default rotation schedule and retention policies for access and error logs.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  volumes:\n    ...\n    - ./logrotate.custom:/etc/logrotate.d/nginx-proxy-manager\n```\n\n----------------------------------------\n\nTITLE: Configuring X-FRAME-OPTIONS Header\nDESCRIPTION: Environment variable configuration to customize the X-FRAME-OPTIONS HTTP header value in Nginx Proxy Manager. The default value is 'deny' if not specified.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/advanced-config/index.md#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  environment:\n    X_FRAME_OPTIONS: \"sameorigin\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Locally for Nginx Proxy Manager\nDESCRIPTION: Commands to install dependencies and run Cypress tests for the Nginx Proxy Manager project. These commands should be executed in the test directory of the project.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/test/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd nginxproxymanager/test\nyarn install\nyarn run cypress\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that permits all web crawlers to access all paths. The asterisk wildcard allows any user-agent, and empty Disallow directive means no paths are restricted.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/public/robots.txt#2025-04-19_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page for Nginx Proxy Manager\nDESCRIPTION: This YAML configuration sets up the home page for Nginx Proxy Manager using VitePress. It defines the layout, hero section with project name, tagline, logo, and action buttons. It also lists six key features of the project.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"Nginx Proxy Manager\"\n  tagline: Expose your services easily and securely\n  image:\n    src: /logo.svg\n    alt: NPM Logo\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /guide/\n    - theme: alt\n      text: GitHub\n      link: https://github.com/NginxProxyManager/nginx-proxy-manager\n\nfeatures:\n  - title: Get Connected\n    details: Expose web services on your network &middot; Free SSL with Let's Encrypt  &middot; Designed with security in mind  &middot; Perfect for home networks\n  - title: Proxy Hosts\n    details: Expose your private network Web services and get connected anywhere.\n  - title: Beautiful UI\n    details: Based on Tabler, the interface is a pleasure to use. Configuring a server has never been so fun.\n  - title: Free SSL\n    details: Built in Let's Encrypt support allows you to secure your Web services at no cost to you. The certificates even renew themselves!\n  - title: Docker FTW\n    details: Built as a Docker Image, Nginx Proxy Manager only requires a database.\n  - title: Multiple Users\n    details: Configure other users to either view or manage their own hosts. Full access permissions are available.\n```\n\n----------------------------------------\n\nTITLE: Creating a Screenshot Gallery with HTML in Nginx Proxy Manager Documentation\nDESCRIPTION: HTML code that creates a responsive gallery of screenshots showing various features of Nginx Proxy Manager. The gallery includes images of the login page, dashboard, proxy hosts, redirection hosts, certificates, and other management interfaces with proper linking and styling.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/docs/src/screenshots/index.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"inline-img\">\n\t<a href=\"/screenshots/login.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/login.png\" alt=\"Login\" title=\"Login\" width=\"200\"/></a>\n\t<a href=\"/screenshots/dashboard.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/dashboard.png\" alt=\"Dashboard\" title=\"Dashboard\" width=\"200\"/></a>\n\t<a href=\"/screenshots/proxy-hosts.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/proxy-hosts.png\" alt=\"Proxy Hosts\" title=\"Proxy Hosts\" width=\"200\"/></a>\n\t<a href=\"/screenshots/proxy-hosts-add.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/proxy-hosts-add.png\" alt=\"Add Proxy Host\" title=\"Add Proxy Host\" width=\"200\"/></a>\n\t<a href=\"/screenshots/redirection-hosts.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/redirection-hosts.png\" alt=\"Redirection Hosts\" title=\"Redirection Hosts\" width=\"200\"/></a>\n\t<a href=\"/screenshots/dead-hosts.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/dead-hosts.png\" alt=\"404 Hosts\" title=\"404 Hosts\" width=\"200\"/></a>\n\t<a href=\"/screenshots/permissions.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/permissions.png\" alt=\"User Permissions\" title=\"User Permissions\" width=\"200\"/></a>\n\t<a href=\"/screenshots/certificates.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/certificates.png\" alt=\"Certificates\" title=\"Certificates\" width=\"200\"/></a>\n\t<a href=\"/screenshots/audit-log.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/audit-log.png\" alt=\"Audit Log\" title=\"Audit Log\" width=\"200\"/></a>\n\t<a href=\"/screenshots/custom-settings.png\" target=\"_blank\"><img class=\"no-medium-zoom zooming\" src=\"/screenshots/custom-settings.png\" alt=\"Custom Settings\" title=\"Custom Settings\" width=\"200\"/></a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in VS Code for JavaScript and HTML\nDESCRIPTION: VS Code workspace settings to enable ESLint auto-fix on save for JavaScript files and validate HTML files. These settings extend ESLint functionality beyond its default JavaScript-only scope.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/test/README.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"eslint.autoFixOnSave\": true,\n\"eslint.validate\": [\n\t{ \"language\": \"javascript\", \"autoFix\": true },\n\t\"html\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Formatting for JavaScript and TypeScript\nDESCRIPTION: VS Code workspace settings to prevent double formatting when using ESLint auto-fix and editor.formatOnSave together. These settings disable formatOnSave specifically for JavaScript and TypeScript files.\nSOURCE: https://github.com/nginxproxymanager/nginx-proxy-manager/blob/develop/test/README.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnSave\": true,\n\"[javascript]\": {\n\t\"editor.formatOnSave\": false,\n},\n\"[javascriptreact]\": {\n\t\"editor.formatOnSave\": false,\n},\n\"[typescript]\": {\n\t\"editor.formatOnSave\": false,\n},\n\"[typescriptreact]\": {\n\t\"editor.formatOnSave\": false,\n},\n```"
  }
]