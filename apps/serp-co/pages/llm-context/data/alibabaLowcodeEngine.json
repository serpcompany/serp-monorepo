[
  {
    "owner": "alibaba",
    "repo": "lowcode-engine",
    "content": "TITLE: Server-Side Code Generation with Low-Code Engine (JavaScript)\nDESCRIPTION: This snippet shows how to use the code generator in a Node.js environment. It covers importing the generator, creating a project builder, generating code from a schema, and publishing the generated code to disk or as a zip file.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/README.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport CodeGenerator from '@alilc/lowcode-code-generator';\n\nconst projectBuilder = CodeGenerator.solutions.icejs();\n\nconst project = await projectBuilder.generateProject(\n  schema, // schema created by low-code arrangement\n);\n\n// Write to disk\nawait CodeGenerator.publishers.disk().publish({\n  project, // project generated in the previous step\n  outputPath: '/path/to/your/output/dir', // output directory\n  projectSlug: 'your-project-slug', // project identifier\n});\n\n// Write to zip package\nawait CodeGenerator.publishers.zip().publish({\n  project, // project generated in the previous step\n  outputPath: '/path/to/your/output/dir', // output directory\n  projectSlug: 'your-project-slug', // project identifier -- corresponds to generating your-project-slug.zip file\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Code Generation with Node.js\nDESCRIPTION: Demonstrates how to use the code generator in a Node.js environment. This example shows the process of importing the generator, creating a project builder for the Ice.js solution, generating code from a schema, and publishing the output to disk or as a zip file.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/codeGeneration.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport CodeGenerator from '@alilc/lowcode-code-generator';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst projectBuilder = CodeGenerator.solutions.icejs();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst project = await projectBuilder.generateProject(\n  schema, // 编排搭建出来的 schema\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// 写入磁盘\nawait CodeGenerator.publishers.disk().publish({\n  project, // 上一步生成的 project\n  outputPath: '/path/to/your/output/dir', // 输出目录\n  projectSlug: 'your-project-slug', // 项目标识\n});\n\n// 写入到 zip 包\nawait CodeGenerator.publishers.zip().publish({\n  project, // 上一步生成的 project\n  outputPath: '/path/to/your/output/dir', // 输出目录\n  projectSlug: 'your-project-slug', // 项目标识 -- 对应生成 your-project-slug.zip 文件\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Widget Plugin in JavaScript\nDESCRIPTION: This example demonstrates how to add a Widget type plugin to the top area of the Low-Code Engine. It shows configuration for a logo widget, including content and positioning properties.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/pluginWidget.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skeleton } from '@alilc/lowcode-engine';\n// 注册 logo 面板\nskeleton.add({\n  area: 'topArea',\n  type: 'Widget',\n  name: 'logo',\n  content: Logo, // Widget 组件实例\n  contentProps: { // Widget 插件 props\n    logo:\n    \"https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png\",\n    href: \"/\",\n  },\n  props: {\n    align: 'left',\n    width: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Resource List Change Event Handler - TypeScript\nDESCRIPTION: Event subscription function for resource list data change events. Returns a disposable object for event cleanup.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nonResourceListChange(fn: (resourceList: IPublicResourceList): void): (): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Basic React Renderer Implementation with Schema\nDESCRIPTION: A simple example demonstrating how to use the LowCode React Renderer with a basic schema and component mapping.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/renderer.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactRenderer from '@alilc/lowcode-react-renderer';\nimport ReactDOM from 'react-dom';\nimport { Button } from '@alifd/next';\n\nconst schema = {\n  componentName: 'Page',\n  props: {},\n  children: [\n    {\n      componentName: 'Button',\n      props: {\n        type: 'primary',\n        style: {\n          color: '#2077ff'\n        },\n      },\n      children: '确定',\n    },\n  ],\n};\n\nconst components = {\n  Button,\n};\n\nReactDOM.render((\n  <ReactRenderer\n    schema={schema}\n    components={components}\n  />\n), document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: 自定义AltStringSetter组件实现 (React)\nDESCRIPTION: 这段代码展示了如何创建一个自定义的AltStringSetter组件。它使用React和Alifd Next组件库实现了一个输入框，并处理了值的变化和默认值的设置。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/settings.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { Input } from \"@alifd/next\";\n\nimport \"./index.scss\";\ninterface AltStringSetterProps {\n  // 当前值\n  value: string;\n  // 默认值\n  defaultValue: string;\n  // setter 唯一输出\n  onChange: (val: string) => void;\n  // AltStringSetter 特殊配置\n  placeholder: string;\n}\nexport default class AltStringSetter extends React.PureComponent<AltStringSetterProps> {\n  componentDidMount() {\n    const { onChange, value, defaultValue } = this.props;\n    if (value == undefined && defaultValue) {\n      onChange(defaultValue);\n    }\n  }\n\n  // 声明 Setter 的 title\n \tstatic displayName = 'AltStringSetter';\n\n  render() {\n    const { onChange, value, placeholder } = this.props;\n    return (\n      <Input\n        value={value}\n        placeholder={placeholder || \"\"}\n        onChange={(val: any) => onChange(val)}\n      ></Input>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Low-Code Engine with TypeScript\nDESCRIPTION: Defines the init function signature for initializing the Low-Code Engine. It takes an optional container element and configuration options as parameters.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/init.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction init(container?: Element, options?: IPublicTypeEngineOptions): void\n```\n\n----------------------------------------\n\nTITLE: Integrating Asset Package in LowCode Engine Project\nDESCRIPTION: This TypeScript code demonstrates how to dynamically load and set assets in a LowCode Engine project using a plugin. It fetches the asset package from a remote URL and registers it with the material system.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/material.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material, plugins } from '@alilc/lowcode-engine';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\n// 动态加载 assets\nplugins.register((ctx: IPublicModelPluginContext) => {\n  return {\n    name: 'ext-assets',\n    async init() {\n      try {\n        // 将下述链接替换为您的物料即可。无论是通过 utils 从物料中心引入，还是通过其他途径如直接引入物料描述\n        const res = await window.fetch('https://fusion.alicdn.com/assets/default@0.1.95/assets.json');\n        const assets = await res.text();\n        material.setAssets(assets);\n      } catch (err) {\n        console.error(err);\n      }\n    },\n  }\n}).catch(err => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Clearing Property Value in SettingTopEntry\nDESCRIPTION: This method clears the value of a specified property name. It takes a string or number as the property name to be cleared.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/setting-top-entry.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * 清除指定 propName 的值\n  * @param propName\n  */\nclearPropValue(propName: string | number): void;\n```\n\n----------------------------------------\n\nTITLE: Complete Preview Implementation with Dynamic Asset Loading\nDESCRIPTION: Full example of a preview component that loads dynamic assets and renders the schema with the ReactRenderer.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/renderer.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport React, { useState } from 'react';\nimport { Loading } from '@alifd/next';\nimport { buildComponents, assetBundle, AssetLevel, AssetLoader } from '@alilc/lowcode-utils';\nimport ReactRenderer from '@alilc/lowcode-react-renderer';\nimport { injectComponents } from '@alilc/lowcode-plugin-inject';\n\nconst SamplePreview = () => {\n  const [data, setData] = useState({});\n\n  async function init() {\n    // 渲染前置处理，初始化项目 schema 和资产包为渲染模块所需的 schema prop 和 components prop\n    const packages = JSON.parse(window.localStorage.getItem('packages') || '');\n    const projectSchema = JSON.parse(window.localStorage.getItem('projectSchema') || '');\n    const { componentsMap: componentsMapArray, componentsTree } = projectSchema;\n    const componentsMap: any = {};\n    componentsMapArray.forEach((component: any) => {\n      componentsMap[component.componentName] = component;\n    });\n    const schema = componentsTree[0];\n\n    const libraryMap = {};\n    const libraryAsset = [];\n    packages.forEach(({ package: _package, library, urls, renderUrls }) => {\n      libraryMap[_package] = library;\n      if (renderUrls) {\n        libraryAsset.push(renderUrls);\n      } else if (urls) {\n        libraryAsset.push(urls);\n      }\n    });\n\n    const vendors = [assetBundle(libraryAsset, AssetLevel.Library)];\n\n    const assetLoader = new AssetLoader();\n    await assetLoader.load(libraryAsset);\n    const components = await injectComponents(buildComponents(libraryMap, componentsMap));\n\n    setData({\n      schema,\n      components,\n    });\n  }\n\n  const { schema, components } = data;\n\n  if (!schema || !components) {\n    init();\n    return <Loading fullScreen />;\n  }\n\n  return (\n    <div className=\"lowcode-plugin-sample-preview\">\n      <ReactRenderer\n        className=\"lowcode-plugin-sample-preview-content\"\n        schema={schema}\n        components={components}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<SamplePreview />, document.getElementById('ice-container'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AltStringSetter in React\nDESCRIPTION: Implementation of a custom AltStringSetter component in React, including props interface and basic functionality.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Input } from \"@alifd/next\";\nimport \"./index.scss\";\n\ninterface AltStringSetterProps {\n  // 当前值\n  value: string;\n  // 默认值\n  defaultValue: string;\n  // setter 唯一输出\n  onChange: (val: string) => void;\n  // AltStringSetter 特殊配置\n  placeholder: string;\n}\n\nexport default class AltStringSetter extends React.PureComponent<AltStringSetterProps> {\n  // 声明 Setter 的 title\n \tstatic displayName = 'AltStringSetter';\n\n  componentDidMount() {\n    const { onChange, value, defaultValue } = this.props;\n    if (value == undefined && defaultValue) {\n      onChange(defaultValue);\n    }\n  }\n\n  render() {\n    const { onChange, value, placeholder } = this.props;\n    return (\n      <Input\n        value={value}\n        placeholder={placeholder || \"\"}\n        onChange={(val: any) => onChange(val)}\n      ></Input>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippet with Default reloadDataSource\nDESCRIPTION: This code shows how to add the default reloadDataSource configuration to a material snippet, ensuring the property is set when the material is initially added to a page. It defines a ProField component with necessary props.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq012.md#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nconst snippets: Snippet[] = [\n  {\n    title: 'Field',\n    screenshot: '',\n    schema: {\n      componentName: 'ProField',\n      props: {\n        type: 'textarea',\n        value: '我是测试',\n        getReloadDataSource: {\n          \"type\": \"JSFunction\",\n          \"value\": \"function(){ return this.reloadDataSource; }\"\n        }\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing LowCodeEngine with Custom Components\nDESCRIPTION: TypeScript example demonstrating how to initialize the LowCodeEngine and add custom components like a logo to the top area of the editor. This shows the basic pattern for extending the engine UI.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  area: 'topArea',\n  type: 'Widget',\n  name: 'logo',\n  content: YourFantasticLogo,\n  contentProps: {\n    logo:\n      'https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png',\n    href: '/',\n  },\n  props: {\n    align: 'left',\n    width: 100,\n  },\n});\n\ninit(document.getElementById('lce'));\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Panel Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a custom panel plugin for the Low-Code Engine. It shows the basic structure of a plugin, including initialization and destruction hooks, and how to add a new panel to the engine's skeleton.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/pluginWidget.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugins } from '@alilc/lowcode-engine';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\nconst pluginA = (ctx: IPublicModelPluginContext, options: any) => {\n\treturn {\n    init() {\n      console.log(options.key);\n      // 往引擎增加面板\n      ctx.skeleton.add({\n        // area 配置见下方说明\n        area: 'leftArea',\n        // type 配置见下方说明\n        type: 'PanelDock',\n        content: <div>demo</div>,\n      });\n      ctx.logger.log('打个日志');\n    },\n    destroy() {\n      console.log('我被销毁了~');\n    },\n  };\n};\n\npluginA.pluginName = 'pluginA';\n\nplugins.register(pluginA, { key: 'test' });\n```\n\n----------------------------------------\n\nTITLE: Basic Low-Code Engine Initialization with TypeScript\nDESCRIPTION: Demonstrates how to initialize the Low-Code Engine with a specific container element and disable the condition feature.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/init.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@alilc/lowcode-engine';\n\ninit(document.getElementById('engine'), {\n  enableCondition: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Full Source Code Example\nDESCRIPTION: Examples showing the relationship between the full source code in the editing panel and its compiled representation in the schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Full source code example\n// (image reference only, no actual code snippet provided)\n```\n\n----------------------------------------\n\nTITLE: Defining Code Chunk Interface in TypeScript\nDESCRIPTION: TypeScript interface describing the structure of a code chunk, which is the smallest unit of generated code. It includes properties for chunk type, file type, name, content, and linking information.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/generator.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICodeChunk {\n  type: ChunkType;        // 处理类型 ast | string | json\n  fileType: string;       // 文件类型 js | css | ts ...\n  name: string;           // 代码块名称，与 linkAfter 相关\n  subModule?: string;     // 模块内文件名，默认是 index\n  content: ChunkContent;  // 代码块内容，数据格式与 type 相关\n  linkAfter: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration with Component Panel Example\nDESCRIPTION: Demonstrates registering a plugin that adds a component panel to the left area of the interface.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/plugins.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugins } from '@alilc/lowcode-engine';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\nconst builtinPluginRegistry = (ctx: IPublicModelPluginContext) => {\n  return {\n    async init() {\n      const { skeleton } = ctx;\n\n      // 注册组件面板\n      const componentsPane = skeleton.add({\n        area: 'leftArea',\n        type: 'PanelDock',\n        name: 'componentsPane',\n        content: ComponentsPane,\n        contentProps: {},\n        props: {\n          align: 'top',\n          icon: 'zujianku',\n          description: '组件库',\n        },\n      });\n      componentsPane?.disable?.();\n      project.onSimulatorRendererReady(() => {\n        componentsPane?.enable?.();\n      })\n    },\n  };\n}\nbuiltinPluginRegistry.pluginName = 'builtinPluginRegistry';\nawait plugins.register(builtinPluginRegistry);\n```\n\n----------------------------------------\n\nTITLE: Starting Rax Development Server\nDESCRIPTION: Runs the Rax application in development mode with hot-reloading at http://localhost:3333\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo03/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Package Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface definition for the asset package used in LowCode Engine. It includes version, packages, components, and component sorting information.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/material.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Assets {\n  version: string; // 资产包协议版本号\n  packages?: Array<Package>; // 大包列表，external 与 package 的概念相似，融合在一起\n  components: Array<ComponentDescription> | Array<RemoteComponentDescription>; // 所有组件的描述协议列表\n  sort: ComponentSort; // 新增字段，用于描述组件面板中的 tab 和 category\n}\n\nexport interface ComponentSort {\n  groupList?: String[]; // 用于描述组件面板的 tab 项及其排序，例如：[\"精选组件\", \"原子组件\"]\n  categoryList?: String[]; // 组件面板中同一个 tab 下的不同区间用 category 区分，category 的排序依照 categoryList 顺序排列；\n}\n\nexport interface RemoteComponentDescription {\n  exportName: string; // 组件描述导出名字，可以通过 window[exportName] 获取到组件描述的 Object 内容；\n  url: string; // 组件描述的资源链接；\n  package: { // 组件 (库) 的 npm 信息；\n    npm: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Setter in TypeScript and React\nDESCRIPTION: This code snippet shows the implementation of a custom setter called AltStringSetter. It extends React.PureComponent and provides an input field for string values.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\";\nimport { Input } from \"@alifd/next\";\n\nimport \"./index.scss\";\ninterface AltStringSetterProps {\n  // 当前值\n  value: string;\n  // 默认值\n  initialValue: string;\n  // setter 唯一输出\n  onChange: (val: string) => void;\n  // AltStringSetter 特殊配置\n  placeholder: string;\n}\nexport default class AltStringSetter extends React.PureComponent<AltStringSetterProps> {\n  componentDidMount() {\n    const { onChange, value, defaultValue } = this.props;\n    if (value == undefined && defaultValue) {\n      onChange(defaultValue);\n    }\n  }\n\n  // 声明 Setter 的 title\n \tstatic displayName = 'AltStringSetter';\n\n  render() {\n    const { onChange, value, placeholder } = this.props;\n    return (\n      <Input\n        value={value}\n        placeholder={placeholder || \"\"}\n        onChange={(val: any) => onChange(val)}\n      ></Input>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Bash commands for cloning and setting up local development environment for LowCodeEngine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README-zh_CN.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:alibaba/lowcode-engine.git\n$ cd lowcode-engine\n$ npm install\n$ npm run setup\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Schema and Packages for Preview\nDESCRIPTION: Shows how to retrieve the previously stored schema and packages for rendering a preview.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/renderer.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst packages = JSON.parse(window.localStorage.getItem('packages') || '');\nconst projectSchema = JSON.parse(window.localStorage.getItem('projectSchema') || '');\nconst { componentsMap: componentsMapArray, componentsTree } = projectSchema;\n```\n\n----------------------------------------\n\nTITLE: Registering Asset Package in LowCode Engine\nDESCRIPTION: This snippet demonstrates how to register an asset package in the LowCode Engine. It shows both a standard method and a debug-friendly method using the inject plugin.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/material.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n// 以任何方式引入 assets\nmaterial.setAssets(assets);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\nimport Inject, { injectAssets } from '@alilc/lowcode-plugin-inject';\nawait material.setAssets(await injectAssets(assets));\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Assets in Low-Code Engine\nDESCRIPTION: This example shows how to dynamically load assets using a plugin in the Low-Code Engine. It fetches the assets JSON from a URL and sets it using the material API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material, plugins } from '@alilc/lowcode-engine';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\n// 动态加载 assets\nplugins.register((ctx: IPublicModelPluginContext) => {\n  return {\n    name: 'ext-assets',\n    async init() {\n      try {\n        // 将下述链接替换为您的物料描述地址即可。\n        const res = await window.fetch('https://fusion.alicdn.com/assets/default@0.1.95/assets.json');\n        const assets = await res.text();\n        material.setAssets(assets);\n      } catch (err) {\n        console.error(err);\n      };\n    },\n  };\n}).catch(err => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source Interfaces for Runtime Rendering in TypeScript\nDESCRIPTION: Defines interfaces for data source configurations used in runtime rendering scenarios. It includes definitions for DataSource and DataSourceConfig objects.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DataSource {\n    list: DataSourceConfig[];\n    dataHandler?: JSFunction;\n}\n\nexport interface DataSourceConfig {\n    id: string;\n    isInit: boolean | JSExpression;\n    type: string;\n    requestHandler?: JSFunction;\n    dataHandler?: JSFunction;\n    options?: {\n        uri: string | JSExpression;\n        params?: JSONObject | JSExpression;\n        method?: string | JSExpression;\n        isCors?: boolean | JSExpression;\n        timeout?: number | JSExpression;\n        headers?: JSONObject | JSExpression;\n        [option: string]: CompositeValue;\n    };\n    [otherKey: string]: CompositeValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current History State in TypeScript\nDESCRIPTION: Method to get the current state of history. It returns a number representing the state, indicating if it's modifiable, redoable, or undoable.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取 state，判断当前是否为「可回退」、「可前进」的状态\n * get flags in number which indicat current change state\n *\n *  |    1     |     1    |    1     |\n *  | -------- | -------- | -------- |\n *  | modified | redoable | undoable |\n * eg:\n *  7 means : modified && redoable && undoable\n *  5 means : modified && undoable\n */\ngetState(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining a Block Container Structure with Data Source in JSON\nDESCRIPTION: A complete example of a Block container definition with props, children, state, CSS, lifecycle methods, custom methods, data source configuration, and conditional rendering.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Block\",\n  \"fileName\": \"block-1\",\n  \"props\": {\n    \"className\": \"luna-page\",\n    \"style\": {\n      \"background\": \"#dd2727\"\n    }\n  },\n  \"children\": [{\n    \"componentName\": \"Button\",\n    \"props\": {\n      \"text\": {\n        \"type\": \"JSExpression\",\n        \"value\": \"this.state.btnText\"\n      }\n    }\n  }],\n  \"state\": {\n    \"btnText\": \"submit\"\n  },\n  \"css\": \"body {font-size: 12px;}\",\n  \"lifeCycles\": {\n    \"componentDidMount\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function() {\\        console.log('did mount');\\      }\"\n    },\n    \"componentWillUnmount\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function() {\\        console.log('will unmount');\\      }\"\n    }\n  },\n  \"methods\": {\n    \"testFunc\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function() {\\        console.log('test func');\\      }\"\n    }\n  },\n  \"dataSource\": {\n    \"list\": [{\n      \"id\": \"list\",\n      \"isInit\": true,\n      \"type\": \"fetch/mtop/jsonp\",\n      \"options\": {\n        \"uri\": \"\",\n        \"params\": {},\n        \"method\": \"GET\",\n        \"isCors\": true,\n        \"timeout\": 5000,\n        \"headers\": {}\n      },\n      \"dataHandler\": {\n        \"type\": \"JSFunction\",\n        \"value\": \"function(data, err) {}\"\n      }\n    }],\n    \"dataHandler\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(dataMap) { }\"\n    }\n  },\n  \"condition\": {\n    \"type\": \"JSExpression\",\n    \"value\": \"!!this.state.isShow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Command in TypeScript\nDESCRIPTION: This method registers a new command and its handler function. It takes an IPublicTypeCommand object as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/command.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 注册一个新的命令及其处理程序。\n * @param command {IPublicTypeCommand} - 要注册的命令。\n */\nregisterCommand(command: IPublicTypeCommand): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties Schema\nDESCRIPTION: Example showing how to define component property definitions including name, type and default values\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"propDefinitions\": [{\n    \"name\": \"title\",\n    \"propType\": \"string\",\n    \"defaultValue\": \"Default Title\"\n  }, {\n    \"name\": \"onClick\",\n    \"propType\": \"func\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Child Node in TypeScript\nDESCRIPTION: This method replaces a specified child node with new data.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 替换指定子节点\n * replace a child node with data provided\n * @param node 待替换的子节点\n * @param data 用作替换的节点对象或者节点描述\n * @returns\n */\nreplaceChild(node: IPublicModelNode, data: any): IPublicModelNode | null;\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Setter Properties in JSON\nDESCRIPTION: Example of configuring advanced properties for a NumberSetter, including units and conditions, in the asset.json file.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"configure\": {\n  \"component\": {\n    \"isContainer\": true,\n    \"nestingRule\": {\n      \"parentWhitelist\": [\n        \"NextP\"\n      ]\n    }\n  },\n  \"props\": [\n    {\n      \"name\": \"width\",\n      \"title\": \"宽度\",\n      \"initialValue\": \"auto\",\n      \"defaultValue\": \"auto\",\n      \"condition\": {\n        \"type\": \"JSFunction\",\n        \"value\": \"() => false\"\n      },\n      \"setter\": {\n        \"componentName\": \"NumberSetter\",\n        \"props\": {\n          \"units\": [\n            {\n              \"type\": \"px\",\n              \"list\": true\n            },\n            {\n              \"type\": \"%\",\n              \"list\": true\n            }\n          ]\n        }\n      }\n    }\n  ],\n  \"supports\": {\n    \"style\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Mapping Structure in JSON\nDESCRIPTION: JSON example showing the structure for mapping component names to public domain components, including package information, version, destructuring settings, and export configurations.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentsMap\": [{\n    \"componentName\": \"Button\",\n    \"package\": \"@alifd/next\",\n    \"version\": \"1.0.0\",\n    \"destructuring\": true\n  }, {\n    \"componentName\": \"MySelect\",\n    \"package\": \"@alifd/next\",\n    \"version\": \"1.0.0\",\n    \"destructuring\": true,\n    \"exportName\": \"Select\"\n  }, {\n    \"componentName\": \"ButtonGroup\",\n    \"package\": \"@alifd/next\",\n    \"version\": \"1.0.0\",\n    \"destructuring\": true,\n    \"exportName\": \"Button\",\n    \"subName\": \"Group\"\n  }, {\n    \"componentName\": \"RadioGroup\",\n    \"package\": \"@alifd/next\",\n    \"version\": \"1.0.0\",\n    \"destructuring\": true,\n    \"exportName\": \"Radio\",\n    \"subName\": \"Group\"\n  }, {\n    \"componentName\": \"CustomCard\",\n    \"package\": \"@ali/custom-card\",\n    \"version\": \"1.0.0\"\n  }, {\n    \"componentName\": \"CustomInput\",\n    \"package\": \"@ali/custom\",\n    \"version\": \"1.0.0\",\n    \"main\": \"/lib/input\",\n    \"destructuring\": true,\n    \"exportName\": \"Input\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a PanelDock to Left Area in Low Code Engine\nDESCRIPTION: Code demonstrating how to add a panel with PanelDock type to the left area of the editor with configurable properties like icon, title, and panel dimensions.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skeleton } from \"@alilc/lowcode-engine\";\n\nskeleton.add({\n  area: \"leftArea\", // 插件区域\n  type: \"PanelDock\", // 插件类型，弹出面板\n  name: \"sourceEditor\",\n  content: SourceEditor, // 插件组件实例\n  props: {\n    align: \"left\",\n    icon: \"wenjian\",\n    title: '标题', // 图标下方展示的标题\n    description: \"JS 面板\",\n  },\n  panelProps: {\n    floatable: true, // 是否可浮动\n    height: 300,\n    hideTitleBar: false,\n    maxHeight: 800,\n    maxWidth: 1200,\n    title: \"JS 面板\",\n    width: 600,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Panel to the Bottom Area in LowCode Engine\nDESCRIPTION: This example shows how to add a panel to the bottom area of the interface using the skeleton API and how to show it using the showPanel method.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  name: 'bottomAreaPanelName',\n  area: 'bottomArea',\n  type: 'Panel',\n  content: () => 'demoText',\n});\n\n\nskeleton.showPanel('bottomAreaPanelName');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions\nDESCRIPTION: TypeScript interfaces defining the configuration schema for components including props, support features, component settings and advanced options.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConfigureProp {\n  type?: 'field' | 'group';\n  name: string | number;\n  title?: TitleContent;\n  setter?: SetterType | DynamicSetter;\n  items?: ConfigureProp[];\n  extraProps?: ExtraProps;\n}\n\nexport interface ConfigureSupport {\n  events?: ConfigureSupportEvent[];\n  className?: boolean;\n  style?: boolean;\n  lifecycles?: any[];\n  loop?: boolean;\n  condition?: boolean;\n}\n\nexport interface ConfigureComponent {\n  isContainer?: boolean;\n  isModal?: boolean;\n  isNullNode?: boolean;\n  descriptor?: string;\n  nestingRule?: NestingRule;\n  isMinimalRenderUnit?: boolean;\n  rootSelector?: string;\n  disableBehaviors?: string[] | string;\n  actions?: ComponentAction[];\n}\n\nexport interface Advanced {\n  context?: { [contextInfoName: string]: any };\n  view?: ComponentType<any>;\n  transducers?: any;\n  filters?: FilterItem[];\n  autoruns?: AutorunItem[];\n  callbacks?: Callbacks;\n  initialChildren?: NodeData[] | ((target: IPublicModelSettingField) => NodeData[]);\n  isAbsoluteLayoutContainer?: boolean;\n  hideSelectTools?: boolean;\n  getResizingHandlers?: (\n    currentNode: any,\n  ) => (\n    | Array<{\n      type: 'N' | 'W' | 'S' | 'E' | 'NW' | 'NE' | 'SE' | 'SW';\n      content?: ReactElement;\n      propTarget?: string;\n      appearOn?: 'mouse-enter' | 'mouse-hover' | 'selected' | 'always';\n    }>\n    | ReactElement[]\n  );\n  liveTextEditing?: LiveTextEditingConfig[];\n}\n\nexport interface Configure {\n  props?: ConfigureProp[];\n  component?: ConfigureComponent;\n  supports?: ConfigureSupport;\n  advanced?: Advanced;\n}\n\nexport interface Snippet {\n  title?: string;\n  screenshot?: string;\n  label?: string;\n  schema?: NodeSchema;\n}\n\nexport interface ComponentDescription {\n  componentName: string;\n  title: string;\n  description?: string;\n  docUrl: string;\n  screenshot: string;\n  icon?: string;\n  tags?: string[];\n  keywords?: string[];\n  devMode?: 'proCode' | 'lowCode';\n  npm: Npm;\n  props: Prop[];\n  configure: Configure;\n  snippets: Snippet[];\n  group: string;\n  category: string;\n  priority: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic PropTypes for React Components with Examples\nDESCRIPTION: Example showing how to define basic property types (string, number, array) in both component source code and property description format in LowCode Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// 组件源码\nexport default class FusionForm extends PureComponent {\n  static displayName = 'FusionForm';\n  static propTypes = {\n    name: PropTypes.string,\n    age: PropTypes.number,\n    friends: PropTypes.array,\n  };\n  render(){\n    return ...;\n  }\n}\n\n// 组件属性描述\n{\n  props: [{\n    name: 'name',\n    propType: {\n      type: 'string',\n      isRequired: true,\n    },\n    description: '这是用于描述姓名',\n    defaultValue: '张三',\n  }, {\n    name: 'age',\n    propType: 'number',\n    description: '这是用于描述年龄',\n    defaultValue: 18,\n  }, {\n    name: 'friends',\n    propType: 'array',\n    description: '这是用于描述好友列表',\n    defaultValue: [ '李四', '王五', '赵六' ],\n  }],\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Component Metadata in Low-Code Engine\nDESCRIPTION: This method retrieves the metadata for a specific component by its name. It returns an IPublicModelComponentMeta object or null if not found.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取指定名称的物料元数据\n * get component meta by component name\n * @param componentName\n * @returns\n */\ngetComponentMeta(componentName: string): IPublicModelComponentMeta | null;\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from Selection in TypeScript\nDESCRIPTION: This method removes a specified node from the selection without deleting the component. It takes a node id as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 移除选中的指定节点\n* remove node from selection with node id\n* @param id\n*/\nremove(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Axios-based Fetch Handler for LowCode Engine\nDESCRIPTION: This snippet shows how to implement a custom data source handler using Axios instead of the default universal-request. It follows the same pattern as the default handler but uses the Axios library for HTTP requests.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/datasource.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\nexport function createAxiosFetchHandler(config?: Record<string, unknown>) {\n  return async function(options: RuntimeOptionsConfig) {\n    const requestConfig: RequestOptions = {\n      ...options,\n      url: options.uri,\n      method: options.method as RequestOptions['method'],\n      data: options.params,\n      headers: options.headers,\n      ...config,\n    };\n    const response = await axios(requestConfig);\n    return response;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Schema in DocumentModel (TypeScript)\nDESCRIPTION: Method to import a schema into the document model, which populates the document with the structure defined in the schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 导入 schema\n * import schema data\n * @param schema\n */\nimportSchema(schema: IPublicTypeRootSchema): void;\n```\n\n----------------------------------------\n\nTITLE: Complete Material Configuration with Custom Setter\nDESCRIPTION: This is a complete JSON configuration for a material (Message component) that includes the use of the custom AltStringSetter for the 'type' property.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Message\",\n  \"title\": \"Message\",\n  \"props\": [\n    {\n      \"name\": \"title\",\n      \"propType\": \"string\",\n      \"description\": \"标题\",\n      \"defaultValue\": \"标题\"\n    },\n    {\n      \"name\": \"type\",\n      \"propType\": {\n        \"type\": \"oneOf\",\n        \"value\": [\n          \"success\",\n          \"warning\",\n          \"error\",\n          \"notice\",\n          \"help\",\n          \"loading\"\n        ]\n      },\n      \"description\": \"反馈类型\",\n      \"defaultValue\": \"success\"\n    }\n  ],\n  \"configure\": {\n    \"props\": {\n      \"isExtends\": true,\n      \"override\": [\n        {\n          \"name\": \"type\",\n          \"setter\": \"AltStringSetter\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding reloadDataSource Configuration in the Panel\nDESCRIPTION: This code adds a condition property set to false, which prevents the reloadDataSource configuration from being displayed in the configuration panel.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq012.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncondition: () => false,\n```\n\n----------------------------------------\n\nTITLE: Rendering a Table with LowCode React Renderer\nDESCRIPTION: This code demonstrates how to set up and render a table component using Alibaba's LowCode React Renderer. It imports the necessary schema, components, utilities, and constants, then creates a Demo component that renders the table within a ReactRenderer component.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/react-renderer/demo/table.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactRenderer from '@alilc/lowcode-react-renderer';\nimport schema from './schemas/table';\nimport components from './config/components/index';\nimport utils from './config/utils';\nimport constants from './config/constants';\n\nclass Demo extends PureComponent {\n  static displayName = 'renderer-demo';\n  render() {\n    return (\n      <div className=\"demo\">\n        <ReactRenderer\n          key={schema.fileName}\n          schema={schema}\n          components={components}\n          appHelper={{\n            utils,\n            constants\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render((\n  <Demo />\n), mountNode);\n```\n\n----------------------------------------\n\nTITLE: Registering Code Generation Plugin in LowCode Engine\nDESCRIPTION: Shows how to register the code generation plugin with the LowCode Engine. The plugin adds a 'Generate Code' button to the designer interface for in-browser code generation. An optional configuration parameter can be passed to disable the automatic code generation button.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/codeGeneration.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugins } from '@alilc/lowcode-engine';\nimport CodeGenPlugin from '@alilc/lowcode-plugin-code-generator';\n\n// 在你的初始化函数中：\nawait plugins.register(CodeGenPlugin);\n\n// 如果您不希望自动加上出码按钮，则可以这样注册\nawait plugins.register(CodeGenPlugin, { disableCodeGenActionBtn: true });\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Logger Instance in TypeScript\nDESCRIPTION: Demonstrates how to import the Logger class, create a new logger instance with specific configuration, and use it to log a message.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/logger.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from '@alilc/lowcode-utils';\nconst logger = new Logger({ level: 'warn', bizName: 'myPlugin:moduleA' });\nlogger.log('Awesome Low-Code Engine');\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Map in Low-Code Engine\nDESCRIPTION: This snippet shows how to get the map of components using the material API. It returns an object mapping component keys to their NPM info or component type.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * 获取组件 map 结构\n  * get map of components\n  */\nget componentsMap(): { [key: string]: IPublicTypeNpmInfo | ComponentType<any> | object } ;\n```\n\n----------------------------------------\n\nTITLE: Defining EditorView Interface in TypeScript\nDESCRIPTION: This code snippet defines the IPublicModelEditorView interface which extends IPublicModelPluginContext. The interface represents the window editing view in the lowcode-engine project.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/editor-view.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IPublicModelPluginContext } from \"./plugin-context\";\n\nexport interface IPublicModelEditorView extends IPublicModelPluginContext {};\n\n```\n\n----------------------------------------\n\nTITLE: Material Component Configuration Example\nDESCRIPTION: Sample configuration for registering a component package in LowCode Engine. This shows how to properly set up the components field with correct URLs and export names.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"components\": [{\n  \"exportName\": \"AlilcLowcodeMaterialsMeta\",\n  \"npm\": {\n    \"package\": \"@alilc/lowcode-materials\"\n  },\n  \"url\": \"https://alifd.alicdn.com/npm/@alilc/lowcode-materials@1.0.7/build/lowcode/meta.js\",\n  \"urls\": {\n    \"default\": \"https://alifd.alicdn.com/npm/@alilc/lowcode-materials@1.0.7/build/lowcode/meta.js\",\n    \"design\": \"https://alifd.alicdn.com/npm/@alilc/lowcode-materials@1.0.7/build/lowcode/meta.design.js\"\n  }\n}]\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema from DocumentModel (TypeScript)\nDESCRIPTION: Method to export the current document structure as a schema. The stage parameter determines the transformation stage of the export process.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 导出 schema\n * export schema\n * @param stage\n * @returns\n */\nexportSchema(stage: IPublicEnumTransformStage): IPublicTypeRootSchema | undefined;\n```\n\n----------------------------------------\n\nTITLE: Loading Incremental Assets in Low-Code Engine\nDESCRIPTION: This method loads incremental assets and merges them with existing assets. It takes an IPublicTypeAssetsJson object as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 加载增量的「资产包」结构，该增量包会与原有的合并\n * load Assets incrementally, and will merge this with exiting assets\n * @param incrementalAssets\n * @returns\n */\nloadIncrementalAssets(incrementalAssets: IPublicTypeAssetsJson): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Getting Modal Nodes in TypeScript\nDESCRIPTION: This method retrieves all modal nodes. It returns an array of IPublicModelNode objects.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/modal-nodes-manager.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取模态节点（们）\n * get modal nodes\n */\ngetModalNodes(): IPublicModelNode[];\n```\n\n----------------------------------------\n\nTITLE: Importing Data Source Engine in TypeScript\nDESCRIPTION: Shows how to import the interpret and runtime versions of the data source engine. This is used to create engines for rendering or code generation scenarios.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInterpret, createRuntime } from '@alilc/lowcode-datasource-engine';\n```\n\n----------------------------------------\n\nTITLE: Inserting Node in DocumentModel (TypeScript)\nDESCRIPTION: Method to insert a node into the document structure. The node can be inserted at a specific position within a parent node, with an option to create a copy of the node.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 插入节点\n * insert a node\n */\ninsertNode(\n  parent: IPublicModelNode,\n  thing: IPublicModelNode,\n  at?: number | null | undefined,\n  copy?: boolean | undefined\n): IPublicModelNode | null;\n```\n\n----------------------------------------\n\nTITLE: Exporting Node Schema in TypeScript\nDESCRIPTION: This method exports the node data as a schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 导出节点数据\n * export schema from this node\n * @param stage\n * @param options\n */\nexportSchema(stage: IPublicEnumTransformStage, options?: any): IPublicTypeNodeSchema;\n```\n\n----------------------------------------\n\nTITLE: Getting All Component Metadata Example\nDESCRIPTION: This example shows how to retrieve a map of all registered component metadata using the material API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.getComponentMetasMap();\n```\n\n----------------------------------------\n\nTITLE: Configuring LowCode Engine Using Config API\nDESCRIPTION: Shows how to modify engine configuration using the config API after initialization\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/configOptions.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from '@alilc/lowcode-engine';\n\nconfig.set('enableCondition', false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex PropTypes with Composite Types in React Components\nDESCRIPTION: Example demonstrating how to implement complex property types like oneOf, oneOfType, arrayOf, and shape in both component source code and the corresponding LowCode Engine property descriptions.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// 组件源码\nexport default class FusionForm extends PureComponent {\n  static displayName = 'FusionForm';\n  static propTypes = {\n    title: PropTypes.oneOf(['News', 'Photos']),\n    message: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.instanceOf(Message),\n    ]),\n    size: PropTypes.arrayOf(PropTypes.number),\n    bodyStyle: PropTypes.shape({\n      color: PropTypes.string,\n      fontSize: PropTypes.number,\n    }),\n    extraContext: function (props, propName, componentName) {\n      if (!/matchme/.test(props[propName])) {\n        return new Error(\n          'Invalid prop `' + propName + '` supplied to' +\n          ' `' + componentName + '`. Validation failed.'\n        );\n      }\n    },\n  };\n  render() {\n    return ...;\n  }\n}\n\n// 组件属性描述\n{\n  props: [{\n    name: 'title',\n    propType: {\n      type: 'oneOf',\n      value: ['News', 'Photos'],\n    },\n    description: '这是用于描述标题',\n    defaultValue: '标题一',\n  }, {\n    name: 'message',\n    propType: {\n      type: 'oneOfType',\n      value: ['string', 'number', {\n        type: 'array',\n        isRequired: true,\n      }],\n    },\n    description: '这是用于描述消息内容',\n    defaultValue: 'xxx',\n  }, {\n    name: 'size',\n    propType: {\n      type: 'arrayOf',\n      value: 'number',\n    },\n    description: '这是用于描述大小列表',\n    defaultValue: [1, 2, 3],\n  }], {\n    name: 'bodyStyle',\n    propType: {\n      type: 'shape',\n      value: [{\n        name: 'color',\n        propType: 'string',\n      }, {\n        name: 'fontSize',\n        propType: {\n          type: 'number',\n          isRequied: true,\n        }\n      }],\n    },\n    description: '这是用于描述主体样式',\n    defaultValue: [1, 2, 3],\n  }],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sensor Area in TypeScript\nDESCRIPTION: Defines the 'addSensor' method to add a sensor area for drag and drop operations.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 添加投放感应区\n * add sensor area\n */\naddSensor(sensor: any): void;\n```\n\n----------------------------------------\n\nTITLE: Removing Current Node in TypeScript\nDESCRIPTION: This method removes the current node instance.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 删除当前节点实例\n * remove current node\n */\nremove(): void;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Node After in TypeScript\nDESCRIPTION: This method inserts a node after the specified position.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 在指定位置之后插入一个节点\n * insert a node after this node\n * @param node\n * @param ref\n * @param useMutator\n */\ninsertAfter(\n    node: IPublicModelNode,\n    ref?: IPublicModelNode | undefined,\n    useMutator?: boolean,\n  ): void;\n```\n\n----------------------------------------\n\nTITLE: Adding a Logo Widget to the Top Area in LowCode Engine\nDESCRIPTION: This example demonstrates how to register a logo widget in the top area of the interface using the skeleton API. It includes custom props like logo URL and link href.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// 注册 logo 面板\nskeleton.add({\n  area: 'topArea',\n  type: 'Widget',\n  name: 'logo',\n  content: Logo,\n  contentProps: {\n    logo: 'https://img.alicdn.com/imgextra/i4/O1CN013w2bmQ25WAIha4Hx9_!!6000000007533-55-tps-137-26.svg',\n    href: 'https://lowcode-engine.cn',\n  },\n  props: {\n    align: 'left',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Sensor Area in TypeScript\nDESCRIPTION: Defines the 'removeSensor' method to remove a sensor area for drag and drop operations.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 移除投放感应\n * remove sensor area\n */\nremoveSensor(sensor: any): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Simulator Host Configuration Values in TypeScript\nDESCRIPTION: Method to set various rendering variables for the canvas, such as canvas size and locale. This allows configuration of the simulator environment.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/simulatorHost.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置若干用于画布渲染的变量，比如画布大小、locale 等。\n * set config for simulator host, eg. device locale and so on.\n * @param key\n * @param value\n */\nset(key: string, value: any): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Default Icons for IconSetter in JavaScript\nDESCRIPTION: This code snippet defines an array of default icon names that can be used with the IconSetter component. It includes a wide range of commonly used icons such as 'smile', 'success', 'warning', and various directional arrows.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/appendix/setterDetails/icon.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  'smile',\n  'cry',\n  'success',\n  'warning',\n  'prompt',\n  'error',\n  'help',\n  'clock',\n  'success-filling',\n  'delete-filling',\n  'favorites-filling',\n  'add',\n  'minus',\n  'arrow-up',\n  'arrow-down',\n  'arrow-left',\n  'arrow-right',\n  'arrow-double-left',\n  'arrow-double-right',\n  'switch',\n  'sorting',\n  'descending',\n  'ascending',\n  'select',\n  'semi-select',\n  'loading',\n  'search',\n  'close',\n  'ellipsis',\n  'picture',\n  'calendar',\n  'ashbin',\n  'upload',\n  'download',\n  'set',\n  'edit',\n  'refresh',\n  'filter',\n  'attachment',\n  'account',\n  'email',\n  'atm',\n  'copy',\n  'exit',\n  'eye',\n  'eye-close',\n  'toggle-left',\n  'toggle-right',\n  'lock',\n  'unlock',\n  'chart-pie',\n  'chart-bar',\n  'form',\n  'detail',\n  'list',\n  'dashboard',\n]\n```\n\n----------------------------------------\n\nTITLE: Adding and Managing Widgets and Panels in LowCode Engine\nDESCRIPTION: This example demonstrates how to add widgets and panels to different areas of the interface, control their visibility, and manage their enabled state using the skeleton API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n\tname: 'logo',\n  area: 'topArea',\n  type: 'Widget',\n  contentProps: {},\n  content: LogoContent,\n});\n\nskeleton.add({\n  name: 'sourceEditor',\n  type: 'PanelDock',\n  area: 'leftArea',\n  props: {\n    align: 'top',\n    icon: 'wenjian',\n    description: 'JS 面板',\n  },\n  panelProps: {\n    floatable: true,\n    height: 300,\n    help: undefined,\n    hideTitleBar: false,\n    maxHeight: 800,\n    maxWidth: 1200,\n    title: 'JS 面板',\n    width: 600,\n  },\n  content: SourceEditor,\n});\n\n// 显隐 panel\nskeleton.showPanel('sourceEditor');\nskeleton.hidePanel('sourceEditor');\n\n\n// 创建一个浮动的 widget\nskeleton.add({\n  name: 'floatingWidget',\n  type: 'Widget',\n  area: 'mainArea',\n  props: {},\n  content: React.createElement('div', {}, 'haha'),\n  contentProps: {\n    style: {\n      position: 'fixed',\n      top: '200px',\n      bottom: 0,\n      width: 'calc(100% - 46px)',\n      'background-color': 'lightblue'\n    }\n  }\n});\n\n// 显隐 widget\nskeleton.showWidget('floatingWidget');\nskeleton.hideWidget('floatingWidget');\n\n// 控制 widget 的可点击态\nskeleton.enableWidget('sourceEditor');\nskeleton.disableWidget('sourceEditor');\n```\n\n----------------------------------------\n\nTITLE: Node Mount Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a node is mounted to the document. This event occurs after the node has been fully attached to the document structure.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 document 新增节点事件，此时节点已经挂载到 document 上\n * set callback for event on node is mounted to canvas\n */\nonMountNode(fn: (payload: { node: IPublicModelNode }) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Creating Scroller Controller in TypeScript\nDESCRIPTION: This method creates a Scroller controller that provides basic scrolling capabilities to a view. It takes a scrollable object as input and returns a scroller model, allowing scrolling to specific coordinates using the scrollTo method.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/canvas.md#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建一个滚动控制器 Scroller，赋予一个视图滚动的基本能力，\n * a Scroller is a controller that gives a view (IPublicTypeScrollable) the ability scrolling\n * to some cordination by api scrollTo.\n *\n * when a scroller is inited, will need to pass is a scrollable, which has a scrollTarget.\n * and when scrollTo(options: { left?: number; top?: number }) is called, scroller will\n * move scrollTarget`s top-left corner to (options.left, options.top) that passed in.\n * @since v1.1.0\n */\ncreateScroller(scrollable: IPublicTypeScrollable): IPublicModelScroller;\n```\n\n----------------------------------------\n\nTITLE: Extending Low-Code Engine with Custom Utils in TypeScript\nDESCRIPTION: Illustrates how to initialize the Low-Code Engine with custom utility functions added to the appHelper. This allows the use of third-party tool extensions within the engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/init.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@alilc/lowcode-engine';\n\ninit({\n  device: 'mobile',\n  appHelper: {\n    utils: {\n      xxx: () => {console.log('123')},\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema Using Save Stage in Alibaba Low-Code Engine\nDESCRIPTION: This TypeScript code demonstrates how to export the project schema using the Save transformation stage. This ensures that the schema is exported after the propsReducer has removed the 'hidden' property.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq013.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransformStage } from '@alilc/lowcode-types';\n\nconst schema = project.exportSchema(TransformStage.Save)\n```\n\n----------------------------------------\n\nTITLE: Node Children Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a node's children structure changes. The callback receives options related to the change.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nonChangeNodeChildren(fn: (info?: IPublicTypeOnChangeOptions) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Adding Component Action in Low-Code Engine\nDESCRIPTION: This method adds an extension action to the designer's auxiliary layer. It takes an IPublicTypeComponentAction object as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 在设计器辅助层增加一个扩展 action\n * add an action button in canvas context menu area\n * @param action\n */\naddBuiltinComponentAction(action: IPublicTypeComponentAction): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Node in DocumentModel (TypeScript)\nDESCRIPTION: Method to create a new node in the document model based on the provided data. Returns the created node or null if creation fails.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 创建一个节点\n * create a node\n * @param data\n * @returns\n */\ncreateNode(data: any): IPublicModelNode | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing propsReducer to Remove Hidden Attribute in Alibaba Low-Code Engine\nDESCRIPTION: This TypeScript code creates a propsReducer that removes the 'hidden' property from props during the Save transformation stage. It's used to ensure Modal components render correctly in preview.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq013.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { project } from '@alilc/lowcode-engine';\nimport { IPublicEnumTransformStage } from '@alilc/lowcode-types';\n\nexport const deleteHiddenTransducer = (ctx: any) => {\n  return {\n    name: 'deleteHiddenTransducer',\n    async init() {\n      project.addPropsTransducer((props: any): any => {\n        delete props.hidden;\n        return props;\n      }, IPublicEnumTransformStage.Save);\n    },\n  };\n}\n\ndeleteHiddenTransducer.pluginName = 'deleteHiddenTransducer';\n```\n\n----------------------------------------\n\nTITLE: Schema Import Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a new schema is imported into the document. The callback receives the imported schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * import schema event\n * @param fn\n * @since v1.0.15\n */\nonImportSchema(fn: (schema: IPublicTypeRootSchema) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource List - TypeScript\nDESCRIPTION: Getter for accessing the resource list data in the current designer. Returns an IPublicModelResource object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget resourceList(): IPublicModelResource;\n```\n\n----------------------------------------\n\nTITLE: Node Removal Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a node is removed from the document. The callback receives the node instance being removed.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 document 删除节点事件\n * set callback for event on node is removed\n */\nonRemoveNode(fn: (node: IPublicModelNode) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Material with Edit Mode Support in LowCode Engine\nDESCRIPTION: JSON configuration for setting up a component material (@alifd/pro-layout) with separate URLs for runtime and edit mode rendering. This enables the component to have different behaviors in the design interface.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/canvas.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    {\n      \"package\": \"@alifd/pro-layout\",\n      \"version\": \"1.0.1-beta.6\",\n      \"library\": \"AlifdProLayout\",\n      \"urls\": [\n        \"https://alifd.alicdn.com/npm/@alifd/pro-layout@1.0.1-beta.6/dist/AlifdProLayout.js\",\n        \"https://alifd.alicdn.com/npm/@alifd/pro-layout@1.0.1-beta.6/dist/AlifdProLayout.css\"\n      ],\n      \"editUrls\": [\n        \"https://alifd.alicdn.com/npm/@alifd/pro-layout@1.0.1-beta.6/build/lowcode/view.js\",\n        \"https://alifd.alicdn.com/npm/@alifd/pro-layout@1.0.1-beta.6/build/lowcode/view.css\"\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Description in TypeScript\nDESCRIPTION: These snippets demonstrate how to configure material descriptions, including hiding a prop and setting display styles for properties.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/material.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'dataSource',\n  condition: () => false,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'dataSource',\n  display: 'accordion' | 'inline' | 'block' | 'plain' | 'popup' | 'entry', // 常用的是 inline(默认), block、entry\n}\n```\n\n----------------------------------------\n\nTITLE: Drop Location Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when the drop location changes in the document. The callback receives the document model instance.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置 DropLocation 变化的回调\n * triggered when drop location changed\n * @param fn\n * @since v1.1.0\n */\nonDropLocationChanged(fn: (doc: IPublicModelDocumentModel) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Action Performance Check Method - TypeScript\nDESCRIPTION: Method to validate if a specific action can be performed on the current node. Takes an action name as parameter and returns a boolean. Introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 是否可执行某 action\n * check if current node can perform certain aciton with actionName\n * @param actionName action 名字\n * @since v1.1.0\n */\ncanPerformAction(actionName: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Code Generation Solution\nDESCRIPTION: Shows how to create a custom code generation solution using the scaffolding tool. This command generates a template with example plugins that can be customized to create a personalized code generation approach that can be published as an NPM package.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/codeGeneration.md#2025-04-07_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx @alilc/lowcode-code-generator init-solution <your-solution-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Support Options in LowCode Engine\nDESCRIPTION: JSON configuration for specifying which features are supported by a component in the LowCode Engine editor, including events, looping, conditional rendering, and styling capabilities.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configure\": {\n    // 支持的事件枚举\n    \"supports\": {\n      // 支持事件列表\n      \"events\": [\"onClick\", \"onChange\"],\n      // 支持循环设置\n      \"loop\": true,\n      // 支持条件设置\n      \"condition\": true,\n      // 支持样式设置\n      \"style\": true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Forward in History using TypeScript\nDESCRIPTION: Method to move forward in the history. It doesn't take any arguments and moves the history one step forward.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 历史记录前进\n * go forward in history\n */\nforward(): void;\n```\n\n----------------------------------------\n\nTITLE: Modifying Component Action in Low-Code Engine\nDESCRIPTION: This method modifies an existing action in the designer's auxiliary layer. It takes the action name and a handler function as parameters.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 修改已有的设计器辅助层的指定 action\n * modify a builtin action button in canvas context menu area\n * @param actionName\n * @param handle\n */\nmodifyBuiltinComponentAction(\n    actionName: string,\n    handle: (action: IPublicTypeComponentAction) => void,\n  ): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Hover Change Callback in TypeScript\nDESCRIPTION: Method to set a callback function that will be called when the hovering object changes. Introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/detecting.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * hover 节点变化事件\n * set callback which will be called when hovering object changed.\n * @since v1.1.0\n */\nonDetectingChange(fn: (node: IPublicModelNode | null) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Material Description in JavaScript\nDESCRIPTION: This code snippet shows how to dynamically load a remote material description file and inject it into the global scope for use in the LowCode Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/material.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst src = 'https://alifd.alicdn.com/npm/@alifd/pro-layout@1.0.1-beta.5/build/lowcode/meta.js';\nconst script = document.createElement('script');\nscript.src = src;\ndocument.head.appendChild(script);\n```\n\n----------------------------------------\n\nTITLE: Monitoring State Changes in History using TypeScript\nDESCRIPTION: Method to monitor state changes in history. It takes a callback function as an argument and returns a disposable object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 监听 state 变更事件\n * monitor on stateChange event\n * @param func\n */\nonChangeState(func: () => any): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: RGL Information Getter - TypeScript\nDESCRIPTION: Method to retrieve grid layout related information including container status, emptiness, and RGL-specific properties.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取磁贴相关信息\n */\ngetRGL(): {\n  isContainerNode: boolean;\n  isEmptyNode: boolean;\n  isRGLContainerNode: boolean;\n  isRGLNode: boolean;\n  isRGL: boolean;\n  rglNode: IPublicModelNode | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Callback Schema Example\nDESCRIPTION: JSON schema example showing how event callbacks are represented in the low-code schema with JSFunction.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Filter\",\n  \"id\": \"node_ockzmj0cl11w\",\n  \"props\": {\n    \"__events\": {\n      \"eventDataList\": [\n        {\n          \"type\": \"componentEvent\",\n          \"name\": \"onSearch\",\n          \"relatedEventName\": \"closeDialog\"\n        }\n      ]\n    },\n    \"onSearch\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(){this.onSearch.apply(this,Array.prototype.slice.call(arguments).concat([])) }\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Data from a Defined Data Source in JavaScript\nDESCRIPTION: Demonstrates how to load data from a data source named 'userList' that has been defined in the data source panel. The code includes proper promise handling with success and error callbacks.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/appendix/api.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 请求 userList（userList 在数据源面板中定义）\n\nthis.dataSourceMap['userList'].load({\n\tdata: {}\n}).then(res => {})\n  .catch(error => {});\n```\n\n----------------------------------------\n\nTITLE: Defining onChangeAssets Method in TypeScript\nDESCRIPTION: This snippet defines the onChangeAssets method, which takes a callback function as an argument and returns an IPublicTypeDisposable. The method is used to add a callback for asset change events.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 监听 assets 变化的事件\n * add callback for assets changed event\n * @param fn\n */\nonChangeAssets(fn: () => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Setting Node Visibility to Visible in TypeScript\nDESCRIPTION: This method sets a specific modal node as visible. It takes an IPublicModelNode as a parameter and doesn't return anything.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/modal-nodes-manager.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置指定节点为可见态\n * set specific model node as visible\n * @param node IPublicModelNode\n */\nsetVisible(node: IPublicModelNode): void;\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu Option Example\nDESCRIPTION: This example demonstrates how to add a context menu option with nested items and a separator to the designer.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IPublicEnumContextMenuType } from '@alilc/lowcode-types';\n\nmaterial.addContextMenuOption({\n  name: 'parentItem',\n  title: 'Parent Item',\n  condition: (nodes) => true,\n  items: [\n    {\n      name: 'childItem1',\n      title: 'Child Item 1',\n      action: (nodes) => console.log('Child Item 1 clicked', nodes),\n      condition: (nodes) => true\n    },\n    // 分割线\n    {\n      type: IPublicEnumContextMenuType.SEPARATOR\n      name: 'separator.1'\n    }\n    // 更多子菜单项...\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Window Change Event Handler - TypeScript\nDESCRIPTION: Event subscription function for window addition/removal events. Returns a disposable object for event cleanup.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onChangeWindows(fn: () => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Material Description\nDESCRIPTION: This example demonstrates how to update the description of a specific material (Button component) using the loadIncrementalAssets method.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\nmaterial.loadIncrementalAssets({\n  version: '',\n  components: [\n      {\n          \"componentName\": 'Button',\n          \"props\": [{ name: 'new', title: 'new', propType: 'string' }]\n      }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Slots on a Node in TypeScript\nDESCRIPTION: This method checks if the current node has any mounted slot nodes.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 是否有挂载插槽节点\n * check if current node has slots\n */\nhasSlots(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking for Rendering Conditions on a Node in TypeScript\nDESCRIPTION: This method checks if the current node has any rendering conditions set.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 是否设定了渲染条件\n * check if current node has condition value set\n */\nhasCondition(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Node Property Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a node's properties change. The callback receives information about the property changes.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nonChangeNodeProp(fn: (info: IPublicTypePropChangeOptions) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Removing Advanced Tab Example\nDESCRIPTION: This example shows how to register a metadata transducer that removes the advanced tab from component configurations.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\nimport { IPublicTypeFieldConfig } from '@alilc/lowcode-types';\n\nmaterial.registerMetadataTransducer((transducer) => {\n  const combined: IPublicTypeFieldConfig[] = [];\n\n  transducer.configure.combined?.forEach(d => {\n    if (d.name !== '#advanced') {\n      combined.push(d);\n    }\n  });\n\n  return {\n    ...transducer,\n    configure: {\n      ...transducer.configure,\n      combined,\n    }\n  };\n}, 111, 'parse-func');\n```\n\n----------------------------------------\n\nTITLE: Selecting Current Node in TypeScript\nDESCRIPTION: This method selects the current node instance.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 选中当前节点实例\n * select current node\n */\nselect(): void;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Context Menu Layout in Low-Code Engine\nDESCRIPTION: This method adjusts the layout of context menu items. It takes a function that receives and returns an array of IPublicTypeContextMenuItem objects.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 调整右键菜单项布局\n * @param actions\n */\nadjustContextMenuLayout(fn: (actions: IPublicTypeContextMenuItem[]) => IPublicTypeContextMenuItem[]): void;\n```\n\n----------------------------------------\n\nTITLE: Importing Dragon Interface in TypeScript\nDESCRIPTION: Shows how to import the IPublicModelDragon interface from the LowCode Engine types package.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IPublicModelDragon } from '@alilc/lowcode-types';\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Component Action Example\nDESCRIPTION: This example demonstrates how to remove a custom component action from the designer's auxiliary layer using its name.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.removeBuiltinComponentAction('myIconName');\n```\n\n----------------------------------------\n\nTITLE: Merging Children in TypeScript\nDESCRIPTION: This method performs add, remove, and sort operations on the node's children. Available since v1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 执行新增、删除、排序等操作\n * excute remove/add/sort operations on node`s children\n *\n * @since v1.1.0\n */\nmergeChildren(\n  remover: (node: IPublicModelNode, idx: number) => boolean,\n  adder: (children: IPublicModelNode[]) => any,\n  sorter: (firstNode: IPublicModelNode, secondNode: IPublicModelNode) => number\n): any;\n```\n\n----------------------------------------\n\nTITLE: Loading LowCodeEngine via AliCloud CDN\nDESCRIPTION: HTML script URLs for loading LowCodeEngine core and React simulator renderer from AliCloud CDN. This is one of the recommended methods to include the engine in your project.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: Boolean Comparison Expression in LowCode Engine\nDESCRIPTION: Demonstrates boolean comparison between state variables using JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSExpression\",\n  \"value\": \"this.state.num > this.state.num2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Component Metadata Map in Low-Code Engine\nDESCRIPTION: This method refreshes the componentMetasMap and can trigger the rebuilding of components in the simulator. It was introduced in version 1.1.7.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nrefreshComponentMetasMap(): void;\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility Getter - TypeScript\nDESCRIPTION: Method to get the ConditionalVisible value of the current node. Returns a boolean or undefined. Introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取该节点的 ConditionalVisible 值\n * check if current node ConditionalVisible\n * @since v1.1.0\n */\nisConditionalVisible(): boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Getting a Property Value in TypeScript\nDESCRIPTION: This method retrieves the value of a property model instance for the specified path.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 获取指定 path 的属性模型实例值\n * get prop value by path\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n */\ngetPropValue(path: string): any;\n```\n\n----------------------------------------\n\nTITLE: Moving Backward in History using TypeScript\nDESCRIPTION: Method to move backward in the history. It doesn't take any arguments and moves the history one step back.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 历史记录后退\n * go backward in history\n */\nback(): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Resource List - TypeScript\nDESCRIPTION: Method for setting the designer resource list data in the workspace. Takes a resource list as parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetResourceList(resourceList: IPublicResourceList) {}\n```\n\n----------------------------------------\n\nTITLE: Registering Save Event in Window Model (TypeScript)\nDESCRIPTION: This event is triggered when the window's content is saved. It returns a disposable object for event management.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/window.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonSave(fn: () => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: DOM Node Getter - TypeScript\nDESCRIPTION: Method to retrieve the DOM node corresponding to the current node instance.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取节点实例对应的 dom 节点\n */\ngetDOMNode(): HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Getting an Extra Property Model Instance in TypeScript\nDESCRIPTION: This method retrieves an extra property model instance for the specified path. Extra properties are not mounted under 'props' but are at the same level as 'props' during export.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 获取指定 path 的属性模型实例，\n *  注：导出时，不同于普通属性，该属性并不挂载在 props 之下，而是与 props 同级\n *\n * get extra prop by path, an extra prop means a prop not exists in the `props`\n * but as siblint of the `props`\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n * @param createIfNone 当没有属性的时候，是否创建一个属性\n */\ngetExtraProp(path: string, createIfNone?: boolean): IPublicModelProp | null;\n```\n\n----------------------------------------\n\nTITLE: Plugin Version Compatibility Configuration\nDESCRIPTION: Example of setting engine version compatibility requirements for a plugin.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/plugins.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugins } from '@alilc/lowcode-engine';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\nconst BuiltinPluginRegistry = (ctx: IPublicModelPluginContext) => {\n  return {\n    async init() {\n      ...\n    },\n  };\n}\nBuiltinPluginRegistry.pluginName = 'BuiltinPluginRegistry';\nBuiltinPluginRegistry.meta = {\n  engines: {\n    lowcodeEngine: '^1.0.0', // 插件需要配合 ^1.0.0 的引擎才可运行\n  },\n}\nawait plugins.register(BuiltinPluginRegistry);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Window Model in Workspace - TypeScript\nDESCRIPTION: Getter for accessing the current designer window model in the workspace. Returns an IPublicModelWindow object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget window(): IPublicModelWindow\n```\n\n----------------------------------------\n\nTITLE: Getting Prop by Path in TypeScript\nDESCRIPTION: Method to retrieve a property model instance by specifying a path. The path can be in formats like 'a', 'a.b', or 'a.0'.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/props.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取指定 path 的属性模型实例\n * get prop by path\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n */\ngetProp(path: string): IPublicModelProp | null;\n```\n\n----------------------------------------\n\nTITLE: Getting an Extra Property Value in TypeScript\nDESCRIPTION: This method retrieves the value of an extra property model instance for the specified path. Extra properties are not mounted under 'props' but are at the same level as 'props' during export.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 获取指定 path 的属性模型实例，\n *  注：导出时，不同于普通属性，该属性并不挂载在 props 之下，而是与 props 同级\n *\n * get extra prop value by path, an extra prop means a prop not exists in the `props`\n * but as siblint of the `props`\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n * @returns\n */\ngetExtraPropValue(path: string): any;\n```\n\n----------------------------------------\n\nTITLE: Building Rax Materials Basic App for Production\nDESCRIPTION: Creates a production-ready build of the app and outputs it to the 'build' folder.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo02/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Windows - TypeScript\nDESCRIPTION: Getter for accessing all editor windows in the current designer. Returns an array of IPublicModelWindow objects.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget window(): IPublicModelWindow[]\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Nodes in TypeScript\nDESCRIPTION: This method selects multiple specified nodes, overriding the current selection. It takes an array of node ids as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 批量选中指定节点们\n* select node with ids, this will override current selection\n*\n* @param ids\n*/\nselectAll(ids: string[]): void;\n```\n\n----------------------------------------\n\nTITLE: Setting an Extra Property Value in TypeScript\nDESCRIPTION: This method sets the value of an extra property model instance for the specified path.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 设置指定 path 的属性模型实例值\n * set value for extra prop with path\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n * @param value 值\n */\nsetExtraPropValue(path: string, value: IPublicTypeCompositeValue): void;\n```\n\n----------------------------------------\n\nTITLE: Browser-Based Code Generation with Low-Code Engine (JavaScript)\nDESCRIPTION: This snippet demonstrates how to perform code generation in the browser using Web Workers. It covers importing the generator, initializing it, generating code from a schema, and downloading the result as a zip file.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/README.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as CodeGenerator from '@alilc/lowcode-code-generator/standalone-loader';\n\n// Optional: Initialize the code generator in advance\nawait CodeGenerator.init();\n\nconst project = await CodeGenerator.generateCode({\n  solution: 'icejs', // code generation solution (currently built-in icejs and rax)\n  schema, // schema created by low-code arrangement\n});\n\nconsole.log(project); // code generation result\n\n// Write to zip package\nawait CodeGenerator.publishers.zip().publish({\n  project, // project generated in the previous step\n  projectSlug: 'your-project-slug', // project identifier -- corresponds to downloading your-project-slug.zip file\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when the hover (detecting) state changes in the document. The callback receives the node that is now being detected.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 document 的 hover 变更事件\n *\n * set callback for event on detecting changed\n */\nonChangeDetecting(fn: (node: IPublicModelNode) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Saving Current State in History using TypeScript\nDESCRIPTION: Method to save the current state as a record in history. It doesn't take any arguments and creates a new history point.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 保存当前状态\n * do save current change as a record in history\n */\nsavePoint(): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Assets from NPM Package\nDESCRIPTION: This example demonstrates how to set assets directly from an NPM package in a project using the Low-Code Engine's material API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\nimport assets from '@alilc/mc-assets-<siteId>/assets.json';\n\nmaterial.setAssets(assets);\n```\n\n----------------------------------------\n\nTITLE: Getting Component Metadata Example\nDESCRIPTION: This example demonstrates how to retrieve the metadata for the 'Input' component using the material API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.getComponentMeta('Input');\n```\n\n----------------------------------------\n\nTITLE: Checking Prop Existence in TypeScript\nDESCRIPTION: Method to check if the Props model contains a specific property. This method was introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/props.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 props 是否包含某 prop\n * check if the specified key is existing or not.\n * @param key\n * @since v1.1.0\n */\nhas(key: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Node Addition Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a new node is added to the document. The callback receives the newly created node instance.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 document 新增节点事件\n * set callback for event on node is created for a document\n */\nonAddNode(fn: (node: IPublicModelNode) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Loading Incremental Assets Example\nDESCRIPTION: This example shows how to load incremental assets and merge them with existing assets using the material API in the Low-Code Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\nimport assets1 from '@alilc/mc-assets-<siteId>/assets.json';\nimport assets2 from '@alilc/mc-assets-<siteId>/assets.json';\n\nmaterial.setAssets(assets1);\nmaterial.loadIncrementalAssets(assets2);\n```\n\n----------------------------------------\n\nTITLE: Getting All Component Metadata in Low-Code Engine\nDESCRIPTION: This method retrieves a map of all registered component metadata. It returns a Map object with component names as keys and IPublicModelComponentMeta objects as values.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n   * 获取所有已注册的物料元数据\n   * get map of all component metas\n   * @returns\n   */\n  getComponentMetasMap(): Map<string, IPublicModelComponentMeta>;\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Methods in TypeScript\nDESCRIPTION: Defines the logger methods available in the API, including debug, info, warn, error, and log. Each method accepts any number of arguments of any type.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/logger.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * debug info\n */\ndebug(...args: any | any[]): void;\n\n/**\n * normal info output\n */\ninfo(...args: any | any[]): void;\n\n/**\n * warning info output\n */\nwarn(...args: any | any[]): void;\n\n/**\n * error info output\n */\nerror(...args: any | any[]): void;\n\n/**\n * log info output\n */\nlog(...args: any | any[]): void;\n```\n\n----------------------------------------\n\nTITLE: Selection Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when the selection changes in the document. The callback receives an array of node IDs that are currently selected.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 document 的选中变更事件\n * set callback for event on selection changed\n */\nonChangeSelection(fn: (ids: string[]) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Component Action Example\nDESCRIPTION: This example shows how to add a custom component action to the designer's auxiliary layer and bind an event to it.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.addBuiltinComponentAction({\n  name: 'myIconName',\n  content: {\n      icon: () => 'x',\n      title: 'hover title',\n      action(node) {\n          console.log('myIconName 扩展位被点击');\n      }\n  },\n  important: true,\n  condition: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Registered Metadata Transducers in Low-Code Engine\nDESCRIPTION: This method retrieves all registered metadata transducer functions. It returns an array of IPublicTypeMetadataTransducer objects.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取所有物料元数据管道函数\n * get all registered metadata transducers\n * @returns {IPublicTypeMetadataTransducer[]}\n */\ngetRegisteredMetadataTransducers(): IPublicTypeMetadataTransducer[];\n```\n\n----------------------------------------\n\nTITLE: Basic Hotkey Binding Example in TypeScript\nDESCRIPTION: Simple example showing how to bind the Command+S keyboard shortcut to a callback function that prevents the default browser behavior and executes custom logic.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/hotkey.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhotkey.bind('command+s', (e) => {\n  e.preventDefault();\n  // command+s 快捷键按下时需要执行的逻辑\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Node in DocumentModel (TypeScript)\nDESCRIPTION: Method to remove a node from the document model. The node can be specified either by its ID or by passing the node instance directly.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 移除指定节点/节点id\n * remove a node by node instance or nodeId\n * @param idOrNode\n */\nremoveNode(idOrNode: string | IPublicModelNode): void;\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu Option in Low-Code Engine\nDESCRIPTION: This method adds a context menu option to the designer. It takes an IPublicTypeContextMenuAction object as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 添加右键菜单项\n * @param action\n */\naddContextMenuOption(action: IPublicTypeContextMenuAction): void;\n```\n\n----------------------------------------\n\nTITLE: Using onChangeAssets Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the onChangeAssets method from the material module of the Lowcode Engine. It sets up a callback function that logs a message when assets change.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.onChangeAssets(() => {\n  console.log('asset changed');\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Hotkeys in TypeScript\nDESCRIPTION: Example demonstrating how to bind multiple keyboard shortcuts (Command+S and Command+C) to the same callback function using an array of key combinations.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/hotkey.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhotkey.bind(['command+s', 'command+c'], (e) => {\n  e.preventDefault();\n  // command+s 或者 command+c 快捷键按下时需要执行的逻辑\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting a Node Before in TypeScript\nDESCRIPTION: This method inserts a node before the specified position.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 在指定位置之前插入一个节点\n * insert a node befor current node\n * @param node\n * @param ref\n * @param useMutator\n */\ninsertBefore(\n    node: IPublicModelNode,\n    ref?: IPublicModelNode | undefined,\n    useMutator?: boolean,\n  ): void;\n```\n\n----------------------------------------\n\nTITLE: Complete reloadDataSource Configuration with Hidden Property\nDESCRIPTION: This code provides a complete configuration example for a reloadDataSource property that will not be displayed in the configuration panel due to the condition property being set to false.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq012.md#2025-04-07_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  title: {\n    label: {\n      type: 'i18n',\n      'en-US': 'reloadDataSource',\n      'zh-CN': 'reloadDataSource',\n    },\n  },\n  name: 'reloadDataSource',\n  setter: 'StringSetter',\n  condition: () => false,\n  initialValue: () => (\n    {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(){ return this.reloadDataSource; }\"\n    }\n  ),\n},\n```\n\n----------------------------------------\n\nTITLE: Removing Context Menu Option in Low-Code Engine\nDESCRIPTION: This method removes a specific context menu option from the designer. It takes the name of the option as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 删除特定右键菜单项\n * @param name\n */\nremoveContextMenuOption(name: string): void;\n```\n\n----------------------------------------\n\nTITLE: Binding Drag Event in TypeScript\nDESCRIPTION: Defines the 'onDrag' method for binding a callback function to be called during dragging. Returns a function to unbind the event.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 绑定 drag 事件\n * bind a callback function which will be called on dragging\n * @param func\n * @returns\n */\nonDrag(func: (e: IPublicModelLocateEvent) => any): () => void;\n```\n\n----------------------------------------\n\nTITLE: Examples of Setting Canvas Size in Simulator Host\nDESCRIPTION: Demonstrates three different ways to customize the canvas size in the simulator: using built-in device types, setting a custom CSS class, or directly configuring the canvas and viewport styles.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/simulatorHost.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 直接使用内置设备类型\nproject.simulatorHost.set('device', 'mobile' / 'iphonex' / 'iphone6' / 'default');\n// 定制 canvas 的样式类\nproject.simulatorHost.set('deviceClassName', 'my-canvas-class');\n// 最灵活的方式，直接设置 canvas / viewport 的样式（canvas 是外框，viewport 是内框，可以在 canvas 设置手机 / 平板背景图）\nproject.simulatorHost.set('deviceStyle', { canvas: { width: '300px', backgroundColor: 'red' }, viewport: { width: '280px' } });\n```\n\n----------------------------------------\n\nTITLE: Importing Node Schema in TypeScript\nDESCRIPTION: This method imports node data from a schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 导入节点数据\n * import node schema\n * @param data\n */\nimportSchema(data: IPublicTypeNodeSchema): void;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Context Menu Layout Example\nDESCRIPTION: This example shows how to adjust the context menu layout by adding separators after specific items.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nmaterial.adjustContextMenuLayout((actions: IPublicTypeContextMenuAction) => {\n  const names = ['a', 'b'];\n  const newActions = [];\n  actions.forEach(d => {\n    newActions.push(d);\n    if (names.include(d.name)) {\n      newActions.push({ type: 'separator' })\n    }\n  });\n  return newActions\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Monitoring Area in TypeScript\nDESCRIPTION: Defines the 'from' method to set a drag monitoring area and a custom drag transformation function.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置拖拽监听的区域 shell，以及自定义拖拽转换函数 boost\n* set a html element as shell to dragon as monitoring target, and\n* set boost function which is used to transform a MouseEvent to type\n* IPublicTypeDragNodeDataObject.\n * @param shell 拖拽监听的区域\n * @param boost 拖拽转换函数\n */\nfrom(shell: Element, boost: (e: MouseEvent) => IPublicTypeDragNodeDataObject | null): any;\n```\n\n----------------------------------------\n\nTITLE: Registering a Panel Config Transducer in Low Code Engine\nDESCRIPTION: Example demonstrating how to register a configuration transducer that modifies panel configurations, specifically updating the width of PanelDock components.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IPublicModelPluginContext, IPublicTypeSkeletonConfig } from '@alilc/lowcode-types';\n\nfunction updatePanelWidth(config: IPublicTypeSkeletonConfig) {\n  if (config.type === 'PanelDock') {\n    return {\n      ...config,\n      panelProps: {\n        ...(config.panelProps || {}),\n        width: 240,\n      },\n    }\n  }\n\n  return config;\n}\n\nconst controlPanelWidthPlugin = (ctx: IPublicModelPluginContext) => {\n  const { skeleton } = ctx;\n  (skeleton as any).registerConfigTransducer?.(updatePanelWidth, 1, 'update-panel-width');\n\n  return {\n    init() {},\n  };\n};\n\ncontrolPanelWidthPlugin.pluginName = 'controlPanelWidthPlugin';\ncontrolPanelWidthPlugin.meta = {\n  dependencies: [],\n  engines: {\n    lowcodeEngine: '^1.2.3', // 插件需要配合 ^1.0.0 的引擎才可运行\n  },\n};\n\nexport default controlPanelWidthPlugin;\n```\n\n----------------------------------------\n\nTITLE: Getting a Property Model Instance in TypeScript\nDESCRIPTION: This method retrieves a property model instance for the specified path. It supports various path formats and can optionally create a new property if none exists.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 获取指定 path 的属性模型实例\n * get prop by path\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n */\ngetProp(path: string, createIfNone: boolean): IPublicModelProp | null;\n```\n\n----------------------------------------\n\nTITLE: Registering Metadata Transducer in Low-Code Engine\nDESCRIPTION: This method registers a metadata transducer function that processes component metadata during initialization. It takes a transducer function, an optional level, and an optional ID as parameters.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 注册物料元数据管道函数，在物料信息初始化时执行。\n * register transducer to process component meta, which will be\n * excuted during component meta`s initialization\n * @param transducer\n * @param level\n * @param id\n */\nregisterMetadataTransducer(\n  transducer: IPublicTypeMetadataTransducer,\n  level?: number,\n  id?: string | undefined\n): void;\n```\n\n----------------------------------------\n\nTITLE: Hiding Modal Nodes in TypeScript\nDESCRIPTION: This method hides all modal nodes. It doesn't take any parameters and doesn't return anything.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/modal-nodes-manager.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 隐藏模态节点（们）\n * hide modal nodes\n */\nhideModalNodes(): void;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Setter in Low-Code Engine\nDESCRIPTION: Code snippet for registering a custom setter (AltStringSetter) in the Low-Code Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport AltStringSetter from './AltStringSetter';\nconst registerSetter = window.AliLowCodeEngine.setters.registerSetter;\nregisterSetter('AltStringSetter', AltStringSetter);\n```\n\n----------------------------------------\n\nTITLE: Setting Hover State in TypeScript\nDESCRIPTION: This method sets the hover state for the current node.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 设置悬停态\n * set hover value for current node\n * @param flag\n */\nhover(flag: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Registering Metadata Transducer Example\nDESCRIPTION: This example demonstrates how to register a metadata transducer that adds an advanced configuration panel to every component, including a render condition setting.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine'\n\nfunction addonCombine(metadata: TransformedComponentMetadata) {\n  const { componentName, configure = {} } = metadata;\n  const advanceGroup = [];\n  const combined: FieldConfig[] = [];\n\n  advanceGroup.push({\n    name: getConvertedExtraKey('condition'),\n    title: { type: 'i18n', 'zh-CN': '是否渲染', 'en-US': 'Condition' },\n    defaultValue: true,\n    setter: [\n      {\n        componentName: 'BoolSetter',\n      },\n      {\n        componentName: 'VariableSetter',\n      },\n    ],\n    extraProps: {\n      display: 'block',\n    },\n  });\n\n  combined.push({\n    name: '#advanced',\n    title: { type: 'i18n', 'zh-CN': '高级', 'en-US': 'Advanced' },\n    items: advanceGroup,\n  });\n\n  return {\n    ...metadata,\n    configure: {\n      ...configure,\n      combined,\n    },\n  };\n}\n\nmaterial.registerMetadataTransducer(addonCombine, 1, 'parse-func');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Visibility to Invisible in TypeScript\nDESCRIPTION: This method sets a specific modal node as invisible. It takes an IPublicModelNode as a parameter and doesn't return anything.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/modal-nodes-manager.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置指定节点为不可见态\n * set specific model node as invisible\n * @param node IPublicModelNode\n */\nsetInvisible(node: IPublicModelNode): void;\n```\n\n----------------------------------------\n\nTITLE: Adding a Widget to Top Area in Low Code Engine\nDESCRIPTION: Code showing how to register a logo panel as a Widget type in the top area of the editor with custom props for appearance and functionality.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skeleton } from \"@alilc/lowcode-engine\";\n// 注册 logo 面板\nskeleton.add({\n  area: \"topArea\",\n  type: \"Widget\",\n  name: \"logo\",\n  content: Logo,  // Widget 组件实例\n  contentProps: { // Widget 插件 props\n    logo:\n    \"https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png\",\n    href: \"/\",\n  },\n  props: {\n    align: \"left\",\n    width: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Lock State in TypeScript\nDESCRIPTION: This method sets the lock state for the current node. Available since v1.0.16.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 设置节点锁定状态\n * set lock value for current node\n * @param flag\n * @since v1.0.16\n */\nlock(flag?: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Getting Registered Metadata Transducers Example\nDESCRIPTION: This example demonstrates how to retrieve all registered metadata transducer functions using the material API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine'\n\nmaterial.getRegisteredMetadataTransducers();\n```\n\n----------------------------------------\n\nTITLE: Selecting a Node in TypeScript\nDESCRIPTION: This method selects a specified node, overriding the current selection. It takes a node id as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 选中指定节点（覆盖方式）\n* select node with id, this will override current selection\n* @param id\n*/\nselect(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Initiating Drag Object in TypeScript\nDESCRIPTION: Defines the 'boost' method to initiate a drag object for dragging.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 发射拖拽对象\n * boost your dragObject for dragging(flying)\n *\n * @param dragObject 拖拽对象\n * @param boostEvent 拖拽初始时事件\n */\nboost(dragObject: IPublicTypeDragObject, boostEvent: MouseEvent | DragEvent, fromRglNode?: IPublicModelNode): void;\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility Setter - TypeScript\nDESCRIPTION: Method to set the ConditionalVisible value of the current node to true. Introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置该节点的 ConditionalVisible 为 true\n * make this node as conditionalVisible === true\n * @since v1.1.0\n */\nsetConditionalVisible(): void;\n```\n\n----------------------------------------\n\nTITLE: Custom Device Styling for Phone Simulator\nDESCRIPTION: CSS styling configuration for customizing the phone device simulator view in the canvas\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/configOptions.md#2025-04-07_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.lc-simulator-device-phone {\n  top: 16px;\n  bottom: 16px;\n  left: 50%;\n  width: 375px;\n  transform: translateX(-50%);\n  margin: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Simulator Host Configuration Values in TypeScript\nDESCRIPTION: Method to retrieve configuration values that have been set in the simulator, such as canvas size and locale settings.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/simulatorHost.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取模拟器中设置的变量，比如画布大小、locale 等。\n * set config value by key\n * @param key\n * @returns\n */\nget(key: string): any;\n```\n\n----------------------------------------\n\nTITLE: Getting Top-level Selected Nodes in TypeScript\nDESCRIPTION: This method returns an array of top-level selected nodes, excluding nested child nodes. It has an optional parameter to include the root node.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 获取选区的顶层节点\n* get seleted top nodes\n* for example:\n*  getNodes() returns [A, subA, B], then\n*  getTopNodes() will return [A, B], subA will be removed\n* @since v1.0.16\n*/\ngetTopNodes(includeRoot?: boolean): IPublicModelNode[];\n```\n\n----------------------------------------\n\nTITLE: Theme Variable Usage Example\nDESCRIPTION: SCSS example showing how to use theme variables in custom components\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* 如果需要引入主题变量引入此段 */\n@import '~@alifd/next/variables.scss';\n\n/* 组件自身样式 */\n.custom-component {\n  color: $color-brand1-1;\n}\n```\n\n----------------------------------------\n\nTITLE: Node Contains Check Method - TypeScript\nDESCRIPTION: Method to check if the current node contains another node as a child. Introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前节点是否包含某子节点\n * check if current node contains another node as a child\n * @param node\n * @since v1.1.0\n */\ncontains(node: IPublicModelNode): boolean;\n```\n\n----------------------------------------\n\nTITLE: Executing a Command in TypeScript\nDESCRIPTION: This method executes a command based on its name and provided arguments. It ensures that the arguments match the command's definition.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/command.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 根据名称和提供的参数执行命令。\n * @param name {string} - 要执行的命令的名称。\n * @param args {IPublicTypeCommandHandlerArgs} - 命令的参数。\n */\nexecuteCommand(name: string, args?: IPublicTypeCommandHandlerArgs): void;\n```\n\n----------------------------------------\n\nTITLE: Opening Editor Window - TypeScript\nDESCRIPTION: Methods for opening a view window in the workspace. Both a deprecated version and a newer version are provided, with different parameter requirements.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 打开视图窗口\n * @deprecated\n */\nopenEditorWindow(resourceName: string, id: string, extra: Object, viewName?: string, sleep?: boolean): Promise<void>;\n\n/** 打开视图窗口 */\nopenEditorWindow(resource: Resource, sleep?: boolean): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Registering Command Error Callback in TypeScript\nDESCRIPTION: This method registers a callback function for errors that occur during command execution. It takes a function with name and error parameters.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/command.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 为命令执行过程中的错误注册一个回调函数。\n * @param callback {(name: string, error: Error) => void} - 错误处理的回调函数。\n */\nonCommandError(callback: (name: string, error: Error) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cursor Changes in History using TypeScript\nDESCRIPTION: Method to monitor cursor position changes in history. It takes a callback function as an argument and returns a disposable object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 监听历史记录游标位置变更事件\n * monitor on cursorChange event\n * @param func\n */\nonChangeCursor(func: () => any): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Batch Executing Commands in TypeScript\nDESCRIPTION: This method executes multiple commands in batch, redraws after all commands are executed, and records only once in the history.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/command.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 批量执行命令，随后进行重绘，历史记录中只记录一次。\n * @param commands {Array} - 命令对象的数组，包含名称和可选参数。\n */\nbatchExecuteCommand(commands: { name: string; args?: IPublicTypeCommandHandlerArgs }[]): void;\n```\n\n----------------------------------------\n\nTITLE: Removing Editor Window by ID - TypeScript\nDESCRIPTION: Method for removing a window by its view ID from the workspace.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nremoveEditorWindowById(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Advanced Component Configuration in JavaScript\nDESCRIPTION: Example demonstrating advanced component configuration including callbacks and resize handlers.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  configure: {\n    advanced: {\n      callbacks: {\n        onNodeAdd: (dragment, currentNode) => {\n\n        }\n      },\n      getResizingHandlers: () => {\n        return [ 'E' ];\n      },\n      initials: [\n        {\n          name: 'linkType',\n          initial: () => 'link'\n        },\n      ]\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating History in TypeScript\nDESCRIPTION: Method to navigate to a specific point in history. It takes a cursor number as an argument and moves the history to that position.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 历史记录跳转到指定位置\n * go to a specific history\n * @param cursor\n */\ngo(cursor: number): void;\n```\n\n----------------------------------------\n\nTITLE: Listing Commands in TypeScript\nDESCRIPTION: This method lists all registered commands, returning an array of IPublicTypeListCommand objects.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/command.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 列出所有已注册的命令。\n * @returns {IPublicTypeListCommand[]} - 已注册命令的数组。\n */\nlistCommands(): IPublicTypeListCommand[];\n```\n\n----------------------------------------\n\nTITLE: Active Window Change Event Handler - TypeScript\nDESCRIPTION: Event subscription function for active window change events. Returns a disposable object for event cleanup.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onChangeActiveWindow(fn: () => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Function Call Expression in LowCode Engine\nDESCRIPTION: Shows how to call a function with state variables using JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSExpression\",\n  \"value\": \"getNum(this.state.num, this.state.num2)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Window Content in Window Model (TypeScript)\nDESCRIPTION: This method saves the current window's content by calling the save hook of the corresponding resource for the current window.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/window.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction save(): Promise(void)\n```\n\n----------------------------------------\n\nTITLE: Validating Node Schema in TypeScript\nDESCRIPTION: Function to check if data is a valid NodeSchema structure. It takes any data as input and returns a boolean indicating validity.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * 是否为合法的 schema 结构\n  * check if data is valid NodeSchema\n  *\n  * @param {*} data\n  * @returns {boolean}\n  */\nisNodeSchema(data: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Prepending Event Listeners in TypeScript\nDESCRIPTION: Method for adding an event listener that will execute before other callback functions for the same event. Returns a disposable object for listener management.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/event.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 监听事件，会在其他回调函数之前执行\n * @param event 事件名称\n * @param listener 事件回调\n */\nprependListener(event: string, listener: (...args: any[]) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Modifying Built-in Remove Action Example\nDESCRIPTION: This example shows how to modify the built-in remove action to add logging before and after its execution.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.modifyBuiltinComponentAction('remove', (action) => {\n  const originAction = action.content.action;\n  action.content.action = (node) => {\n  \tconsole.log('before reomve!');\n    originAction(node);\n    console.log('after remove!');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Schema in Window Model (TypeScript)\nDESCRIPTION: This method imports a schema into the current window, calling the import hook of the corresponding resource for the current window.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/window.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction importSchema(schema: IPublicTypeNodeSchema): void\n```\n\n----------------------------------------\n\nTITLE: Checking Form Event Type in TypeScript\nDESCRIPTION: Function to determine if an event is a form event. It takes a KeyboardEvent or MouseEvent as input and returns a boolean.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 是否为表单事件类型\n * check if e is a form event\n * @param {(KeyboardEvent | MouseEvent)} e\n * @returns {boolean}\n */\nisFormEvent(e: KeyboardEvent | MouseEvent): boolean;\n```\n\n----------------------------------------\n\nTITLE: Triggering Events in TypeScript\nDESCRIPTION: Method to emit an event with optional parameters. This triggers all registered listeners for the specified event with the provided arguments.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/event.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 触发事件\n * emit a message for a event\n * @param event 事件名称\n * @param args 事件参数\n * @returns\n */\nemit(event: string, ...args: any[]): void;\n```\n\n----------------------------------------\n\nTITLE: 物料资源配置使用自定义设置器 (JSON)\nDESCRIPTION: 这段JSON配置展示了如何在物料资源配置文件中使用自定义的设置器。它为Message组件的type属性指定了使用AltStringSetter。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/settings.md#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Message\",\n  \"title\": \"Message\",\n  \"docUrl\": \"\",\n  \"screenshot\": \"\",\n  \"npm\": {\n    \"package\": \"@alifd/next\",\n    \"version\": \"1.19.18\",\n    \"exportName\": \"Message\",\n    \"main\": \"src/index.js\",\n    \"destructuring\": true,\n    \"subName\": \"\"\n  },\n  \"props\": [\n    {\n      \"name\": \"title\",\n      \"propType\": \"string\",\n      \"description\": \"标题\",\n      \"defaultValue\": \"标题\"\n    },\n    {\n      \"name\": \"type\",\n      \"propType\": {\n        \"type\": \"oneOf\",\n        \"value\": [\n          \"success\",\n          \"warning\",\n          \"error\",\n          \"notice\",\n          \"help\",\n          \"loading\"\n        ]\n      },\n      \"description\": \"反馈类型\",\n      \"defaultValue\": \"success\"\n    }\n\n  ],\n\n  \"configure\": {\n    \"props\": {\n      \"isExtends\": true,\n      \"override\": [\n        {\n          \"name\": \"type\",\n          \"setter\": \"AltStringSetter\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Visible Modal Node in TypeScript\nDESCRIPTION: This method retrieves the currently visible modal node. It returns either an IPublicModelNode object or null if no modal node is visible.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/modal-nodes-manager.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取当前可见的模态节点\n * get current visible modal node\n */\ngetVisibleModalNode(): IPublicModelNode | null;\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions for Performance Optimization in TypeScript\nDESCRIPTION: Function to execute operations in a transaction for performance optimization. It takes a function to execute and a transition type as inputs.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 批处理事务，用于优化特定场景的性能\n * excute something in a transaction for performence\n *\n * @param {() => void} fn\n * @param {IPublicEnumTransitionType} type\n * @since v1.0.16\n */\nexecuteTransaction(fn: () => void, type: IPublicEnumTransitionType): void;\n```\n\n----------------------------------------\n\nTITLE: Event Triggering in Setter Component B\nDESCRIPTION: Example of triggering events from one Setter component to communicate with other components. Shows how to emit an event with specific parameters for inter-component communication.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/event.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { event } from '@alilc/lowcode-engine';\n\nclass SetterB extends React.Component {\n  bindFunction = () => {\n    const { field, value } = this.props;\n    // 这里展示的和插件进行通信，事件规则是插件名 + 方法\n    event.emit('eventBindDialog.openDialog', field.name, this.emitEventName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Atomic Component Example in JSX\nDESCRIPTION: Demonstrates how atomic components like Input handle property passing and DOM rendering\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Input id=\"my-input\" aria-label=\"this is input\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<span class=\"next-input next-medium\">\n  <input id=\"my-input\"  aria-label=\"this is input\" height=\"100%\" autocomplete=\"off\" value=\"\">\n</span>\n```\n\n----------------------------------------\n\nTITLE: Resource Type Definition in TypeScript\nDESCRIPTION: Type reference for the IPublicModelResource interface that defines the structure of resources in LowCode Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/resource.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@types [IPublicModelResource](https://github.com/alibaba/lowcode-engine/blob/main/packages/types/src/shell/model/resource.ts)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Focus Node Selector\nDESCRIPTION: TypeScript type definition for the focusNodeSelector configuration option that specifies the root component\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/configOptions.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfocusNodeSelector?: (rootNode: IPublicModelNode) => Node;\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Functionality with Hotkeys in Lowcode Engine Plugin\nDESCRIPTION: Complete example showing how to create a plugin that binds the Command+S shortcut to a save function. The plugin is registered with the Lowcode Engine plugin system and executes the save operation when the shortcut is triggered.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/hotkey.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  hotkey,\n} from '@alilc/lowcode-engine';\n\nfunction saveSchema(schema) {\n  // 保存 schema 相关操作\n}\n\nconst saveSampleHotKey = (ctx: IPublicModelPluginContext) => {\n  return {\n    name: 'saveSample',\n    async init() {\n      hotkey.bind('command+s', (e) => {\n        e.preventDefault();\n        saveSchema();\n      });\n    },\n  };\n}\n\nsaveSampleHotKey.pluginName = 'saveSampleHotKey';\nplugins.register(saveSampleHotKey);\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive JSON Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a recursive JSON type in TypeScript, which allows for nested JSON structures. The module handles such circular definitions by simplifying them to 'object' type in the generated schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/materialParser.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Json {\n  [x: string]: string | number | boolean | Json | JsonArray;\n}\ntype JsonArray = Array<string | number | boolean | Json | JsonArray>;\n```\n\n----------------------------------------\n\nTITLE: Setting NPM Information in ComponentMeta\nDESCRIPTION: This method sets the npm information for the component. It takes an IPublicTypeNpmInfo object as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/component-meta.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置 npm 信息\n * set method for npm inforamtion\n * @param npm\n */\nsetNpm(npm: IPublicTypeNpmInfo): void;\n```\n\n----------------------------------------\n\nTITLE: Binding Hotkeys Method Signature in TypeScript\nDESCRIPTION: API signature for the bind method which allows attaching callback functions to keyboard shortcuts. It accepts single or multiple key combinations and returns a disposable object for cleanup.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/hotkey.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 绑定快捷键\n * bind hotkey/hotkeys,\n * @param combos 快捷键，格式如：['command + s'] 、['ctrl + shift + s'] 等\n * @param callback 回调函数\n * @param action\n * @returns\n */\nbind(\n    combos: string[] | string,\n    callback: IPublicTypeHotkeyCallback,\n    action?: string,\n  ): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Triggering Component Build and Canvas Rerender in TypeScript\nDESCRIPTION: Method to trigger component construction and refresh the rendering canvas, causing the simulator to update its display.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/simulatorHost.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 触发组件构建，并刷新渲染画布\n * make simulator render again\n */\nrerender(): void;\n```\n\n----------------------------------------\n\nTITLE: Canceling Event Listeners in TypeScript\nDESCRIPTION: Method to remove a specific event listener from an event. Requires both the event name and the listener function reference to properly remove the listener.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/event.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 取消监听事件\n * cancel a monitor from a event\n * @param event 事件名称\n * @param listener 事件回调\n */\noff(event: string, listener: (...args: any[]) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Checking Nesting Down in ComponentMeta\nDESCRIPTION: This method checks if target node(s) can be placed in the current node. It takes the current node and target node(s) as parameters and returns a boolean.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/component-meta.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 检测目标节点是否可被放置在父节点中\n * check if the target node(s) could be placed in current node\n * @param my 当前节点\n * @param parent 父节点\n */\ncheckNestingDown(\n    my: IPublicModelNode | IPublicTypeNodeData,\n    target: IPublicTypeNodeSchema | IPublicModelNode | IPublicTypeNodeSchema[],\n  ): boolean;\n```\n\n----------------------------------------\n\nTITLE: Changing View Type in Window Model (TypeScript)\nDESCRIPTION: This method changes the current window's view type to the specified view name.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/window.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction changeViewType(viewName: string): void\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Specific Node in Simulator Host\nDESCRIPTION: Method to scroll the simulator view to focus on a specific node. This functionality was introduced in version 1.1.0 of the API.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/simulatorHost.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 滚动到指定节点\n * scroll to specific node\n * @param node\n * @since v1.1.0\n */\nscrollToNode(node: IPublicModelNode): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Up LowCodeEngine Development Environment\nDESCRIPTION: Bash commands for cloning the LowCodeEngine repository, installing dependencies, and starting the development server.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README-zh_CN.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:alibaba/lowcode-engine.git\n$ cd lowcode-engine\n$ npm install\n$ npm run setup\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Getting Component Metadata from ComponentMeta\nDESCRIPTION: This method retrieves the component metadata. It returns an IPublicTypeTransformedComponentMetadata object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/component-meta.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取元数据\n * get component metadata\n */\ngetMetadata(): IPublicTypeTransformedComponentMetadata;\n```\n\n----------------------------------------\n\nTITLE: Getting Node by ID in DocumentModel (TypeScript)\nDESCRIPTION: Method to retrieve a Node instance by its unique identifier from the document model. Returns null if no node with the given ID exists.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 根据 nodeId 返回 Node 实例\n * get node by nodeId\n * @param nodeId\n * @returns\n */\ngetNodeById(nodeId: string): IPublicModelNode | null;\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema from Designer Project\nDESCRIPTION: Demonstrates how to export the current schema configuration from the LowCode Engine project.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/renderer.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material, project } from '@alilc/lowcode-engine';\n\nconst schema = project.exportSchema();\n```\n\n----------------------------------------\n\nTITLE: Clearing All Hover States in TypeScript\nDESCRIPTION: Method to clear all hover states from the canvas.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/detecting.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 清空 hover 态\n * clear all hover state\n */\nleave(): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value in SettingTopEntry\nDESCRIPTION: This method sets the value of a specified property name. It takes a string or number as the property name and any value to be set.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/setting-top-entry.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * 设置指定 propName 的值\n  * @param propName\n  * @param value\n  */\nsetPropValue(propName: string | number, value: any): void;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Widget Hide Events in LowCode Engine\nDESCRIPTION: This code defines a method for listening to widget hide events in the LowCode Engine skeleton. It accepts a listener callback that executes when a widget is hidden, providing the panel name and panel reference as parameters.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 监听 Widget 隐藏事件\n * set callback for widget hidden event\n * @param listener\n * @returns\n */\nonHideWidget(listener: (paneName?: string, panel?: IPublicModelSkeletonItem) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Internationalization Example with React Renderer\nDESCRIPTION: Demonstrates how to implement internationalization (i18n) in the React Renderer using locale and messages props.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/renderer.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Demo extends PureComponent {\n  static displayName = 'renderer-demo';\n  render() {\n    return (\n      <div className=\"demo\">\n        <ReactRenderer\n          key={schema.fileName}\n          schema={schema}\n          components={components}\n          appHelper={{\n            utils,\n            constants\n          }}\n          locale=\"zh-CN\"\n          messages={{\n            \"hello\": \"你好\",\n            \"china\": \"中国\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering View Type Change Event in Window Model (TypeScript)\nDESCRIPTION: This event is triggered when the window's view type changes. It returns a disposable object for event management.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/window.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonChangeViewType(fn: (viewName: string) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Binding Dragend Event in TypeScript\nDESCRIPTION: Defines the 'onDragend' method for binding a callback function to be called when dragging ends. Returns a function to unbind the event.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 绑定 dragend 事件\n * bind a callback function which will be called on dragging end\n * @param func\n * @returns\n */\nonDragend(func: (o: { dragObject: IPublicModelDragObject; copy?: boolean }) => any): () => void;\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace Skeleton - TypeScript\nDESCRIPTION: Getter for accessing application-level panel management in the workspace. Returns an IPublicApiSkeleton object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget skeleton(): IPublicApiSkeleton\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Data Source Interfaces for Code Generation in TypeScript\nDESCRIPTION: Defines interfaces for runtime data source configurations used in code generation scenarios. It includes definitions for RuntimeDataSource, RuntimeDataSourceConfig, and RuntimeOptions.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IRuntimeDataSourceEngineFactory {\n    create(dataSource: RuntimeDataSource, context: Omit<IRuntimeContext, 'dataSourceMap' | 'reloadDataSource'>, extraConfig?: {\n        requestHandlersMap: RequestHandlersMap;\n        [key: string]: any;\n    }): IDataSourceEngine;\n}\n\nexport interface RuntimeOptionsConfig {\n    uri: string;\n    params?: Record<string, unknown>;\n    method?: string;\n    isCors?: boolean;\n    timeout?: number;\n    headers?: Record<string, unknown>;\n    shouldFetch?: () => boolean;\n    [option: string]: unknown;\n}\nexport declare type RuntimeOptions = () => RuntimeOptionsConfig;\n\nexport interface RuntimeDataSourceConfig {\n    id: string;\n    isInit: boolean;\n    type: string;\n    requestHandler?: () => {};\n    dataHandler: (data: unknown, err?: Error) => {};\n    options?: RuntimeOptions;\n    [otherKey: string]: unknown;\n}\n\nexport interface RuntimeDataSource {\n    list: RuntimeDataSourceConfig[];\n    dataHandler?: (dataMap: DataSourceMap) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Events with on Method in TypeScript\nDESCRIPTION: Method for adding an event listener to monitor specified events. Returns a disposable object that can be used to remove the listener.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/event.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 监听事件\n * add monitor to a event\n * @param event 事件名称\n * @param listener 事件回调\n */\non(event: string, listener: (...args: any[]) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Checking Drag Status in TypeScript\nDESCRIPTION: Defines a getter for the 'dragging' property, which returns a boolean indicating whether dragging is in progress.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * is dragging or not\n */\nget dragging(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Registering Resource Type - TypeScript\nDESCRIPTION: Method for registering a resource type in the workspace. Takes a resource type model as parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/** 注册资源 */\nregisterResourceType(resourceTypeModel: IPublicTypeResourceType): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Context Interface in TypeScript\nDESCRIPTION: Defines the interface for the runtime context used in the data source engine. It includes state management, custom methods, and data source-related functionalities.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IRuntimeContext<TState extends object = Record<string, unknown>> {\n    readonly state: TState;\n    setState(state: Partial<TState>): void;\n    [customMethod: string]: any;\n    dataSourceMap: Record<string, IRuntimeDataSource>;\n    reloadDataSource(): Promise<void>;\n    readonly page: IRuntimeContext & {\n        readonly props: Record<string, unknown>;\n    };\n    readonly component: IRuntimeContext & {\n        readonly props: Record<string, unknown>;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Nodes in TypeScript\nDESCRIPTION: This method sets modal nodes and triggers internal events. It doesn't take any parameters and doesn't return anything.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/modal-nodes-manager.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置模态节点，触发内部事件\n * set modal nodes, trigger internal events\n */\nsetNodes(): void;\n```\n\n----------------------------------------\n\nTITLE: Binding Dragstart Event in TypeScript\nDESCRIPTION: Defines the 'onDragstart' method for binding a callback function to be called when dragging starts. Returns a function to unbind the event.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/dragon.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 绑定 dragstart 事件\n * bind a callback function which will be called on dragging start\n * @param func\n * @returns\n */\nonDragstart(func: (e: IPublicModelLocateEvent) => any): () => void;\n```\n\n----------------------------------------\n\nTITLE: Custom Functions in Source Panel\nDESCRIPTION: Examples showing the relationship between custom functions written in the source panel and their representation in the schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Source code panel example for custom functions\n// (image reference only, no actual code snippet provided)\n```\n\n----------------------------------------\n\nTITLE: Defining Request Handler Types in TypeScript\nDESCRIPTION: Defines types for request handlers used in the data source engine. It includes RequestHandler and RequestHandlersMap types.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type RequestHandler<T = unknown> = (ds: RuntimeDataSourceConfig, context: IRuntimeContext) => Promise<RequestResult<T>>;\nexport declare type RequestHandlersMap = Record<string, RequestHandler>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Low-Code Engine for Mobile Device with TypeScript\nDESCRIPTION: Shows how to initialize the Low-Code Engine with the device set to mobile, which opens the mobile canvas by default.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/init.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@alilc/lowcode-engine';\n\ninit({\n  device: 'mobile',\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Node Hover in TypeScript\nDESCRIPTION: Method to capture hover on a specified node by its ID.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/detecting.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * hover 指定节点\n * capture node with nodeId\n * @param id 节点 id\n */\ncapture(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Schema Example\nDESCRIPTION: JSON schema example showing how conditional rendering is represented in the low-code schema with JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Filter\",\n  \"id\": \"node_ockzmj0cl11w\",\n  \"condition\": {\n    \"type\": \"JSExpression\",\n    \"value\": \"this.state.text\",\n    \"mock\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Example in JavaScript\nDESCRIPTION: Example showing how to configure component properties including container settings, modal behavior, nesting rules and root selector.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  configure: {\n    component: {\n      isContainer: true,\n      isModal: false,\n      descriptor: 'title',\n      nestingRule: {\n        childWhitelist: ['SelectOption'],\n        parentWhitelist: ['Select', 'Table'],\n      },\n      rootSelector: '.next-dialog',\n      disableBehaviors: ['copy', 'remove'],\n      actions: {\n        name: 'copy',\n        content: '＋',\n        items: [],\n        condition: 'always',\n        important: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ProvideViewPluginContext in LowCode Engine\nDESCRIPTION: Shows how to import the ProvideViewPluginContext utility from the LowCode Engine utils package.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq024.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProvideViewPluginContext } from '@alilc/lowcode-utils';\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Nodes in TypeScript\nDESCRIPTION: This method returns an array of selected node instances.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 获取选中的节点实例\n* get selected nodes\n*/\ngetNodes(): IPublicModelNode[];\n```\n\n----------------------------------------\n\nTITLE: 修改同级属性值 (JavaScript)\nDESCRIPTION: 这段代码演示了如何在设置器中修改同级的其他属性值。它使用了field对象的方法来获取和设置属性值。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/settings.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbindFunction = () => {\n    const { field, value } = this.props;\n    const propsField = field.parent;\n\t\t// 获取同级其他属性 showJump 的值\n    const otherValue = propsField.getPropValue('showJump');\n    // set 同级其他属性 showJump 的值\n    propsField.setPropValue('showJump', false);\n}\n```\n\n----------------------------------------\n\nTITLE: Component Structure Description Schema\nDESCRIPTION: Comprehensive example of a component structure definition including props, conditions, loops and children\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Button\",\n  \"props\": {\n    \"className\": \"btn\",\n    \"style\": {\n      \"width\": 100,\n      \"height\": 20\n    },\n    \"text\": \"submit\",\n    \"onClick\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(e) {\\        console.log('btn click')\\      }\"\n    }\n  },\n  \"condition\": {\n    \"type\": \"JSExpression\",\n    \"value\": \"!!this.state.isshow\"\n  },\n  \"loop\": [],\n  \"loopArgs\": [\"item\", \"index\"],\n  \"children\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Setter in TypeScript\nDESCRIPTION: This method registers a new setter. It can accept either a single setter with its type, or an object containing multiple setters with their types as keys.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 注册一个 setter\n * register a setter\n * @param typeOrMaps\n * @param setter\n * @returns\n */\nregisterSetter(\n  typeOrMaps: string | { [key: string]: IPublicTypeCustomView | IPublicTypeRegisteredSetter },\n  setter?: IPublicTypeCustomView | IPublicTypeRegisteredSetter | undefined\n): void;\n```\n\n----------------------------------------\n\nTITLE: Clearing Node Selection in TypeScript\nDESCRIPTION: This method clears all selected nodes without deleting the components.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 清除所有选中节点\n* clear current selection\n*/\nclear(): void;\n```\n\n----------------------------------------\n\nTITLE: Adding a PanelDock Plugin in JavaScript\nDESCRIPTION: This snippet shows how to add a PanelDock type plugin to the left area of the Low-Code Engine. It includes configuration for the panel icon, content, and properties like floatability and dimensions.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/pluginWidget.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  area: 'leftArea', // 插件区域\n  type: 'PanelDock', // 插件类型，弹出面板\n  name: 'sourceEditor',\n  content: SourceEditor, // 插件组件实例\n  props: {\n    align: \"left\",\n    icon: \"wenjian\",\n    description: \"JS 面板\",\n  },\n  panelProps: {\n    floatable: true, // 是否可浮动\n    height: 300,\n    hideTitleBar: false,\n    maxHeight: 800,\n    maxWidth: 1200,\n    title: \"JS 面板\",\n    width: 600,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Numeric Calculation Expression in LowCode Engine\nDESCRIPTION: Demonstrates numeric calculation between two state variables using JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSExpression\",\n  \"value\": \"this.state.num - this.state.num2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including @alifd/next in Asset Package for Low-Code Engine\nDESCRIPTION: This code snippet shows the configuration for including the Fusion component library (@alifd/next) in the asset package. It specifies the package name, version, CSS and JS URLs, and the library name.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq016.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"title\": \"fusion 组件库\",\n  \"package\": \"@alifd/next\",\n  \"version\": \"1.23.0\",\n  \"urls\": [\n    \"https://g.alicdn.com/code/lib/alifd__next/1.23.18/next.min.css\",\n    \"https://g.alicdn.com/code/lib/alifd__next/1.23.18/next-with-locales.min.js\"\n  ],\n  \"library\": \"Next\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node Selection in TypeScript\nDESCRIPTION: This method checks if a specific node is selected. It takes a node id as a parameter and returns a boolean.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 判断是否选中了指定节点\n* check if node with specific id is selected\n* @param id\n*/\nhas(id: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Adding a Dock Plugin in JavaScript\nDESCRIPTION: This snippet illustrates how to add a Dock type plugin to the left area of the Low-Code Engine. It includes configuration for an icon-based dock that can open external links or show widgets on click.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/pluginWidget.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  area: 'leftArea',\n  type: 'Dock',\n  name: 'opener',\n  props: {\n    icon: Icon, // Icon 组件实例\n    align: 'bottom',\n    onClick: function () {\n      // 打开外部链接\n      window.open('https://lowcode-engine.cn');\n      // 显示 widget\n      skeleton.showWidget('xxx');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: I18n Type Definition in LowCode Engine\nDESCRIPTION: TypeScript type definition for internationalization structure.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Ti18n = {\n  type: 'i18n';\n  key: string; // i18n 结构中字段的 key 标识符\n  params?: Record<string, JSDataType | JSExpression>; // 模版型 i18n 文案的入参，JSDataType 指代传统 JS 值类型\n}\n```\n\n----------------------------------------\n\nTITLE: Low-code Component Schema Example\nDESCRIPTION: JSON schema example for defining a low-code business component\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n  \"componentsMap\": [{ }],\n  \"componentsTree\": [{\n    \"componentName\": \"Component\",\n    \"fileName\": \"SearchComp\",\n    \"props\": {},\n    \"css\": \"body {font-size: 12px;}\",\n    \"state\": {\n      \"name\": \"lucy\"\n    },\n    \"static\": {},\n    \"defaultProps\": {\n      \"name\": \"xxx\"\n    },\n    \"children\": [{\n      \"componentName\": \"Div\",\n      \"props\": {\n        \"className\": \"className1\"\n      },\n      \"children\": [{\n        \"componentName\": \"Button\",\n        \"props\": {\n          \"text\": \"点击弹出我的姓名\",\n          \"onClick\": {\n            \"type\": \"JSFunction\",\n            \"value\": \"function(e){\\\\alert(this.state.name)\\\\}\"\n          }\n        }\n      }]\n    }]\n  }],\n  \"i18n\": { }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LowCode Engine with Options\nDESCRIPTION: Demonstrates how to initialize the LowCode Engine with custom configuration options using the init API\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/configOptions.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@alilc/lowcode-engine';\n\ninit(document.getElementById('engine'), {\n  enableCondition: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter for Component Property in JSON\nDESCRIPTION: Example of configuring a setter for a component's 'type' property in the material resource configuration file.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Message\",\n  \"title\": \"Message\",\n  \"configure\": {\n    \"props\": [\n      {\n        \"name\": \"type\",\n        \"setter\": \"InputSetter\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple I18n Usage Example in LowCode Engine\nDESCRIPTION: Basic example of using i18n type in components.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"i18n\",\n  \"key\": \"i18n-jwg27yo4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with NPM\nDESCRIPTION: Command to create a production build of the application, which generates optimized assets in the build folder.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo11-utils-name-alias/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Assets in Low-Code Engine\nDESCRIPTION: This method sets the assets structure for the Low-Code Engine. It takes an IPublicTypeAssetsJson object as a parameter and does not return anything.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置「资产包」结构\n * set data for Assets\n * @returns void\n */\nsetAssets(assets: IPublicTypeAssetsJson): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source Engine Factory Interface in TypeScript\nDESCRIPTION: Defines the interface for creating a data source engine. It includes methods for creating an engine instance with data source configurations, context, and extra configurations like request handlers.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IDataSourceEngineFactory {\n    create(dataSource: DataSource, context: Omit<IRuntimeContext, 'dataSourceMap' | 'reloadDataSource'>, extraConfig?: {\n        requestHandlersMap: RequestHandlersMap;\n        [key: string]: any;\n    }): IDataSourceEngine;\n}\n```\n\n----------------------------------------\n\nTITLE: I18n Button Component Example in LowCode Engine\nDESCRIPTION: Example of using i18n in a button component.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Button\",\n  \"props\": {\n    \"text\": {\n      \"type\": \"i18n\",\n      \"key\": \"i18n-jwg27yo4\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Rax App for Production\nDESCRIPTION: Builds the Rax app for production, creating optimized files in the 'build' folder ready for deployment.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo01/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Creating Internationalization Tools in TypeScript\nDESCRIPTION: Function to create internationalization (i18n) tools. It takes a string or object instance and returns an object with methods for handling translations and locale.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * i18n 相关工具\n * i18n tools\n *\n * @param {(string | object)} instance\n * @returns {{\n *     intlNode(id: string, params?: object): ReactNode;\n *     intl(id: string, params?: object): string;\n *     getLocale(): string;\n *     setLocale(locale: string): void;\n *   }}\n * @since v1.0.17\n */\ncreateIntl(instance: string | object): {\n  intlNode(id: string, params?: object): ReactNode;\n  intl(id: string, params?: object): string;\n  getLocale(): string;\n  setLocale(locale: string): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source Engine Interface in TypeScript\nDESCRIPTION: Defines the interface for the data source engine, including methods for accessing data sources and reloading them.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/datasourceEngine.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IDataSourceEngine {\n    dataSourceMap: Record<string, IRuntimeDataSource>;\n    reloadDataSource(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: setState Usage Examples in LowCode Engine\nDESCRIPTION: Examples demonstrating proper usage of setState for state updates.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nthis.setState(newState, () => {\n  // 在这里更新已经生效了\n  // 可以通过 this.state 拿到更新后的状态\n  console.log(this.state);\n});\n\n// ⚠注意：这里拿到的并不是更新后的状态，这里还是之前的状态\nconsole.log(this.state);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.setState((prevState) => ({ count: prevState.count + 1 }));\n```\n\n----------------------------------------\n\nTITLE: Loading LowCodeEngine via JSDelivr CDN\nDESCRIPTION: HTML script URLs for loading LowCodeEngine core and React simulator renderer from JSDelivr CDN, another popular option for loading npm packages directly in the browser.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nhttps://cdn.jsdelivr.net/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://cdn.jsdelivr.net/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: Accessing Workbench Component in TypeScript\nDESCRIPTION: Getter function to retrieve the Workbench Component for the editor framework view.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 编辑器框架 View\n * get Workbench Component\n */\nget Workbench(): Component;\n```\n\n----------------------------------------\n\nTITLE: Implementing Prop Linking in Lowcode Engine (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement prop linking in the Lowcode Engine. It shows two examples: setting other prop values based on the current prop's value, and setting the current prop's value based on other props.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/metaSpec.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 根据当前 prop 的值动态设置其它 prop 的值\n{\n  name: 'labelAlign',\n  // ...\n  extraProps: {\n    setValue: (target, value) => {\n      if (value === 'inset') {\n        target.getProps().setPropValue('labelCol', null);\n        target.getProps().setPropValue('wrapperCol', null);\n      } else if (value === 'left') {\n         target.getProps().setPropValue('labelCol', { fixedSpan: 4 });\n         target.getProps().setPropValue('wrapperCol', null);\n      }\n      return target.getProps().setPropValue('labelAlign', value);\n    },\n  },\n}\n// 根据其它 prop 的值来设置当前 prop 的值\n{\n  name: 'status',\n  // ...\n  extraProps: {\n    getValue: (target) => {\n      const isPreview = target.getProps().getPropValue('isPreview');\n      return isPreview ? 'readonly' : 'editable';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Initialization in Source Panel\nDESCRIPTION: Examples showing the relationship between code written in the source panel and its representation in the schema. This snippet shows state initialization.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Source code panel example for state initialization\n// (image reference only, no actual code snippet provided)\n```\n\n----------------------------------------\n\nTITLE: Internationalized Component Implementation\nDESCRIPTION: Example of a React component with internationalization support using locale props\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport zhCN from './locale/zh-CN.js';            // 引入默认语言\nexport default class BizHello extends Component {\n  static componentName = 'BizHello';\n\n  static propTypes = {\n    locale: PropTypes.object,                     // 增加 locale，用于配置文案\n  };\n\n  static defaultProps = {\n    locale: zhCN,\n  };\n\n  render() {\n    const { locale } = this.props;\n    return (\n      <div>{locale.hello}</div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Schema by ID in TypeScript\nDESCRIPTION: Function to find a node with a specific ID within a larger schema structure. It takes a schema and a node ID as inputs and returns the matching NodeSchema or undefined.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 从 schema 结构中查找指定 id 节点\n * get node schema from a larger schema with node id\n * @param {IPublicTypeNodeSchema} schema\n * @param {string} nodeId\n * @returns {(IPublicTypeNodeSchema | undefined)}\n */\ngetNodeSchemaById(\n    schema: IPublicTypeNodeSchema,\n    nodeId: string,\n  ): IPublicTypeNodeSchema | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Parameters for Click Events in JSON\nDESCRIPTION: This snippet demonstrates how to define extension parameters that include row data (record) and index to make them accessible in button click handlers.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq003.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  record: this.record,\n  index: this.index\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Methods in Source Panel\nDESCRIPTION: Examples showing the relationship between lifecycle methods written in the source panel and their representation in the schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Source code panel example for lifecycle methods\n// (image reference only, no actual code snippet provided)\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Command in TypeScript\nDESCRIPTION: This method unregisters an existing command. It takes the name of the command to be unregistered as a string parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/command.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 注销一个已存在的命令。\n * @param name {string} - 要注销的命令的名称。\n */\nunregisterCommand(name: string): void;\n```\n\n----------------------------------------\n\nTITLE: Internationalization Implementation Example in JSON\nDESCRIPTION: Shows implementation of i18n features including language switching and parameterized translations\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentsTree\": [{\n    \"componentName\": \"Page\",\n    \"fileName\": \"Page1\",\n    \"props\": {},\n    \"children\": [{\n      \"componentName\": \"Div\",\n      \"props\": {},\n      \"children\": [{\n        \"componentName\": \"Button\",\n        \"props\": {\n          \"children\": {\n            \"type\": \"JSExpression\",\n            \"value\": \"this.i18n('i18n-hello')\"\n          },\n          \"onClick\": {\n            \"type\": \"JSFunction\",\n            \"value\": \"function () { this.setLocale('en-US'); }\"\n          }\n        }\n      }, {\n        \"componentName\": \"Button\",\n        \"props\": {\n          \"children\": {\n            \"type\": \"JSExpression\",\n            \"value\": \"this.i18n('i18n-chicken', { count: this.state.count })\"\n          }\n        }\n      }]\n    }]\n  }],\n  \"i18n\": {\n    \"zh-CN\": {\n      \"i18n-hello\": \"你好\",\n      \"i18n-chicken\": \"我有{count}只鸡\"\n    },\n    \"en-US\": {\n      \"i18n-hello\": \"Hello\",\n      \"i18n-chicken\": \"I have {count} chicken\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Render Unit in Component JSON\nDESCRIPTION: This JSON snippet shows how to configure a Table component as a minimal render unit in the Alibaba Low-Code Engine. The 'isMinimalRenderUnit' property is set to true in the component's configuration.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq004.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"componentName\": \"Table\",\n    \"title\": \"表格\",\n    \"category\": \"数据展示\",\n    \"props\": [],\n    \"configure\": {\n        \"supports\": {\n        },\n        \"props\": [],\n        \"component\": {\n            // 添加如下配置\n            \"isMinimalRenderUnit\": true\n        },\n        \"combined\": []\n    },\n    \"snippets\": [],\n    \"npm\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Supported Lifecycle Methods\nDESCRIPTION: List of supported React lifecycle methods that can be used in the low-code engine, as defined in the Alibaba Admin Frontend Building Protocol Specification.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  componentDidMount(): void;\n  constructor(props: Record<string, any>, context: any);\n  render(): void;\n  componentDidUpdate(prevProps: Record<string, any>, prevState: Record<string, any>, snapshot: Record<string, any>): void;\n  componentWillUnmount(): void;\n  componentDidCatch(error: Error, info: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Property Object in SettingTopEntry\nDESCRIPTION: This method retrieves a child property object based on the provided property name. It returns an IPublicModelSettingField object or null if not found.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/setting-top-entry.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * 获取子级属性对象\n  * @param propName\n  * @returns\n  */\nget(propName: string | number): IPublicModelSettingField | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Return-ReactNode with JSSlot in JSON\nDESCRIPTION: Example showing a TableColumn with a cell property that returns ReactNode content. The JSSlot type includes parameters that can be accessed within child components using 'this[paramName]'.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"TabelColumn\",\n  \"props\": {\n    \"cell\": {\n      \"type\": \"JSSlot\",\n      \"params\": [\"value\", \"index\", \"record\"],\n      \"value\": [{\n        \"componentName\": \"Input\",\n        \"props\": {}\n      }]\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Renderer Components in Console\nDESCRIPTION: Command to verify if components are properly registered with the renderer. This helps in diagnosing component registration issues.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nAliLowCodeEngine.project.simulator.renderer.components\n```\n\n----------------------------------------\n\nTITLE: Variable Binding Schema Example\nDESCRIPTION: JSON schema example showing how variable binding is represented in the low-code schema with JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"NextBlockCell\",\n  \"id\": \"node_ockzmje8tf5\",\n  \"props\": {\n    \"bodyPadding\": {\n      \"type\": \"JSExpression\",\n      \"value\": \"this.state.text\",\n      \"mock\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Loop Data on a Node in TypeScript\nDESCRIPTION: This method checks if loop data has been set for the current node.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 是否设定了循环数据\n * check if loop is set for this node\n */\nhasLoop(): boolean;\n```\n\n----------------------------------------\n\nTITLE: I18n Content Example in LowCode Engine\nDESCRIPTION: Example of i18n content structure with multiple languages.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i18n\": {\n    \"zh-CN\": {\n      \"i18n-jwg27yo4\": \"你好\",\n      \"i18n-jwg27yo3\": \"{name}博士\"\n    },\n    \"en-US\": {\n      \"i18n-jwg27yo4\": \"Hello\",\n      \"i18n-jwg27yo3\": \"Doctor {name}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Material Package Configuration\nDESCRIPTION: Sample JSON configuration for a material package showing package details, URLs for rendering and editing, and advanced configuration options.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"package\": \"@yingzhi8/lowcode-public-package\",\n  \"version\": \"0.1.2\",\n  \"library\": \"BizComps\",\n  \"urls\": [\n    \"https://unpkg.com/@yingzhi8/lowcode-public-package@0.1.2/build/lowcode/render/default/view.js\",\n    \"https://unpkg.com/@yingzhi8/lowcode-public-package@0.1.2/build/lowcode/render/default/view.css\"\n  ],\n  \"editUrls\": [\n    \"https://unpkg.com/@yingzhi8/lowcode-public-package@0.1.2/build/lowcode/view.js\",\n    \"https://unpkg.com/@yingzhi8/lowcode-public-package@0.1.2/build/lowcode/view.css\"\n  ],\n  \"advancedUrls\": {\n    \"default\": [\n      \"https://unpkg.com/@yingzhi8/lowcode-public-package@0.1.2/build/lowcode/render/default/view.js\",\n      \"https://unpkg.com/@yingzhi8/lowcode-public-package@0.1.2/build/lowcode/render/default/view.css\"\n    ]\n  },\n  \"advancedEditUrls\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Loop Rendering Schema Example\nDESCRIPTION: JSON schema example showing how loop rendering is represented in the low-code schema with JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Filter\",\n  \"id\": \"node_ockzmj0cl11w\",\n  \"loop\": {\n    \"type\": \"JSExpression\",\n    \"value\": \"this.state.text\",\n    \"mock\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Code Generator Solution Path for ICE.js in Low-Code Engine\nDESCRIPTION: This snippet shows the file path to the ICE.js solution in the code generator module. This file contains plugins that would need to be replaced with Vue framework equivalents when customizing for Vue code generation.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq018.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/src/solutions/icejs.ts\n```\n\n----------------------------------------\n\nTITLE: I18n Template Usage Example in LowCode Engine\nDESCRIPTION: Example of using i18n with template parameters.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"i18n\",\n  \"key\": \"i18n-jwg27yo3\",\n  \"params\": {\n    \"name\": \"Strange\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring reloadDataSource Property in Material Schema\nDESCRIPTION: This code defines a configuration object for adding a reloadDataSource property to a material. It sets up a string setter with an initial value function that returns the reloadDataSource method from the component instance.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq012.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  title: {\n    label: {\n      type: 'i18n',\n      'en-US': 'reloadDataSource',\n      'zh-CN': 'reloadDataSource',\n    },\n  },\n  name: 'reloadDataSource',\n  setter: 'StringSetter',\n  initialValue: () => (\n    {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(){ return this.reloadDataSource; }\"\n    }\n  ),\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Fetch Handler in JavaScript for LowCode Engine\nDESCRIPTION: This code demonstrates how to create a fetch handler for the data source engine using universal-request. It accepts configuration options and returns a handler function that processes runtime options and makes HTTP requests.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/datasource.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeOptionsConfig } from '@alilc/lowcode-datasource-types';\n\nimport request from 'universal-request';\nimport { RequestOptions, AsObject } from 'universal-request/lib/types';\n\nexport function createFetchHandler(config?: Record<string, unknown>) {\n  return async function(options: RuntimeOptionsConfig) {\n    const requestConfig: RequestOptions = {\n      ...options,\n      url: options.uri,\n      method: options.method as RequestOptions['method'],\n      data: options.params as AsObject,\n      headers: options.headers as AsObject,\n      ...config,\n    };\n    const response = await request(requestConfig);\n    return response;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Extra Key for Props in TypeScript\nDESCRIPTION: Function to convert props key. It takes a string key as input and returns the converted string.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetConvertedExtraKey(key: string): string\n```\n\n----------------------------------------\n\nTITLE: Router Navigation Example in JSON\nDESCRIPTION: Demonstrates router navigation implementation using button click to navigate to home page\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentsTree\": [{\n    \"componentName\": \"Page\",\n    \"fileName\": \"Page1\",\n    \"props\": {},\n    \"children\": [{\n      \"componentName\": \"Div\",\n      \"props\": {},\n      \"children\": [{\n        \"componentName\": \"Button\",\n        \"props\": {\n          \"text\": \"跳转到首页\",\n          \"onClick\": {\n            \"type\": \"JSFunction\",\n            \"value\": \"function () { this.router.push('/home'); }\"\n          }\n        }\n      }]\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling reloadDataSource Method in a Material Component\nDESCRIPTION: This code demonstrates how to access the reloadDataSource method within a material component by calling the getReloadDataSource function from the component props.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq012.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nconst reloadDataSource = props.getReloadDataSource()\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Handlers with React Renderer in TSX\nDESCRIPTION: This code shows how to integrate a custom data source handler with the React renderer component. It assigns the custom Axios fetch handler to the 'fetch' key in the requestHandlersMap within the appHelper object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/datasource.md#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { memo } from 'react';\nimport ReactRenderer from '@alilc/lowcode-react-renderer';\n\nconst SamplePreview = memo(() => {\n  return (\n    <ReactRenderer\n      className=\"lowcode-plugin-sample-preview-content\"\n      schema={schema}\n      components={components}\n      appHelper={{\n        requestHandlersMap: {\n          fetch: createAxiosFetchHandler()\n        }\n      }}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Prop Value by Path in TypeScript\nDESCRIPTION: Method to set the value of a property model instance by specifying a path. The path can be in formats like 'a', 'a.b', or 'a.0'.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/props.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置指定 path 的属性模型实例值\n * set value of prop by path\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n * @param value 值\n */\nsetPropValue(path: string, value: IPublicTypeCompositeValue): void;\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Expression in LowCode Engine\nDESCRIPTION: Demonstrates string concatenation with state variables using JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSExpression\",\n  \"value\": \"this.state.num + '万'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Page Component's childWhitelist Configuration in LowCode Engine\nDESCRIPTION: This snippet shows how to access the childWhitelist configuration of a Page component in Alibaba LowCode Engine. The childWhitelist determines which components can be dragged as children of the Page component.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq022.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAliLowCodeEngine.material.getComponentMeta('Page').getMetadata().configure.component.nestingRule.childWhitelist\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Source Engine in Design Mode with LowCode Engine\nDESCRIPTION: This snippet demonstrates how to initialize the LowCode Engine with a custom data source handler. It shows the configuration of the engine's initialization, including enabling the data source engine by providing the requestHandlersMap with a custom Axios handler.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/datasource.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, plugins } from '@alilc/lowcode-engine';\nimport { RequestHandlersMap } from '@alilc/lowcode-datasource-types';\n\nconst preference = new Map();\n\n(async function main() {\n  await plugins.register(scenarioSwitcher);\n  await registerPlugins();\n\n  init(document.getElementById('lce-container')!, {\n    // designMode: 'live',\n    // locale: 'zh-CN',\n    enableCondition: true,\n    enableCanvasLock: true,\n    // 默认绑定变量\n    supportVariableGlobally: true,\n    // simulatorUrl 在当 engine-core.js 同一个父路径下时是不需要配置的！！！\n    // 这里因为用的是 alifd cdn，在不同 npm 包，engine-core.js 和 react-simulator-renderer.js 是不同路径\n    simulatorUrl: [\n      'https://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@latest/dist/css/react-simulator-renderer.css',\n      'https://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@latest/dist/js/react-simulator-renderer.js'\n    ],\n    requestHandlersMap: {\n      fetch: createAxiosFetchHandler()\n    }\n  }, preference);\n})();\n```\n\n----------------------------------------\n\nTITLE: 注册自定义设置器 (JavaScript)\nDESCRIPTION: 这段代码展示了如何在低代码引擎中注册自定义的设置器。它使用了低代码引擎的setters模块来注册AltStringSetter。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/settings.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport AltStringSetter from './AltStringSetter';\nimport { setters } from '@alilc/lowcode-engine';\nsetters.registerSetter({\n\tAltStringSetter: {\n\t\tcomponent: AltStringSetter,\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Internationalization Language Definitions\nDESCRIPTION: Example language definition files for Chinese, English and Japanese locales\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// zh-CN.js\nexport default {\n  hello: '你好，世界'\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// en-US.js\nexport default {\n  hello: 'hello world'\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ja-JP.js\nexport default {\n  hello: 'こんにちは、世界'\n};\n```\n\n----------------------------------------\n\nTITLE: React Component Definition with Plugin Context\nDESCRIPTION: Demonstrates how to create a React component that utilizes the plugin context from ProvideViewPluginContext.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq024.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyComponent = (props) => {\n  const { pluginContext } = props;\n  // 组件逻辑\n  return <div>/* 组件内容 */</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: 触发设置器间通信事件 (JavaScript)\nDESCRIPTION: 这段代码展示了如何在一个设置器中触发事件，以与其他设置器或插件进行通信。它使用了低代码引擎的event模块来发出事件。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/settings.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event } from '@ali/lowcode-engine';\n\nbindFunction = () => {\n  const { field, value } = this.props;\n  // 这里展示的和插件进行通信，事件规则是插件名 + 方法\n  event.emit('eventBindDialog.openDialog', field.name, this.emitEventName);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Component with Lifecycle Methods and Event Handlers in JSON\nDESCRIPTION: Example of a Block component with state, lifecycle methods, custom methods, and child components. The Button child includes an event handler function for the onClick event.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Block\",\n  \"fileName\": \"block1\",\n  \"props\": {},\n  \"state\": {\n    \"name\": \"lucy\"\n  },\n  \"lifeCycles\": {\n    \"componentDidMount\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function() {\\        console.log('did mount');\\      }\"\n    },\n    \"componentWillUnmount\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function() {\\        console.log('will unmount');\\      }\"\n    }\n  },\n  \"methods\": {\n    \"getNum\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function() {\\        console.log('名称是：' + this.state.name)\\      }\"\n    }\n  },\n  \"children\": [{\n    \"componentName\": \"Button\",\n    \"props\": {\n      \"text\": \"按钮\",\n      \"onClick\": {\n        \"type\": \"JSFunction\",\n        \"value\": \"function(e) {\\          console.log(e.target.innerText);\\        }\"\n      }\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Integration Example\nDESCRIPTION: Implementation showing how to integrate with ConfigProvider for global locale replacement\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ConfigProvider } from '@alifd/next';\nimport zhCN from './locale/zh-CN.js';            // 引入默认语言\nclass BizHello extends Component {\n  static propTypes = {\n    locale: PropTypes.object,                     // 增加 locale，用于配置文案\n  };\n\n  static defaultProps = {\n    locale: zhCN,\n  };\n\n  render() {\n    const { locale } = this.props;\n    return (\n      <div>{locale.hello}</div>\n    );\n  }\n}\nexport default ConfigProvider.config(BizHello, {\n  componentName: 'BizHello'                       // 指定组件名称，默认取组件的 displayName\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Context with View Window Rerendering\nDESCRIPTION: Example of using ProvideViewPluginContext with key prop for proper view switching and rerendering.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq024.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nProvideViewPluginContext(props => {\n  return (\n    <DataPoolPane\n      {...props}\n      key={props.pluginContext?.editorWindow?.id}\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RadioGroupSetter Options in Markdown\nDESCRIPTION: This code snippet shows the configuration options for the RadioGroupSetter component in a markdown table format. It includes the property names and their descriptions.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/appendix/setterDetails/radioGroup.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性名 | 说明 |\n| --- | --- |\n| defaultValue | 默认值 |\n| options | 传入的数据源，**参数格式**: [{img: 'url', value: 'text', label/title: 'text'}, ...] \\| [ 'text', 'text', ...] |\n```\n\n----------------------------------------\n\nTITLE: Translating Text with Internationalization in TypeScript\nDESCRIPTION: Function to translate text using internationalization. It takes I18nData or a string as input, along with optional parameters, and returns the translated string.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/common.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * i18n 转换方法\n */\nintl(data: IPublicTypeI18nData | string, params?: object): string;\n```\n\n----------------------------------------\n\nTITLE: Emitting Event in Setter for Communication\nDESCRIPTION: Example of emitting an event in a setter to communicate with other setters or plugins.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event } from '@alilc/lowcode-engine';\n\nbindFunction = () => {\n  const { field, value } = this.props;\n  // 这里展示的和插件进行通信，事件规则是插件名 + 方法\n  event.emit('eventBindDialog.openDialog', field.name, this.emitEventName);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Registration in Workspace Mode\nDESCRIPTION: Demonstrates how to check if a plugin is registered in workspace mode using isPluginRegisteredInWorkspace method.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq024.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (ctx.isPluginRegisteredInWorkspace('pluginName')) {\n    console.log('插件已在 Workspace 模式下注册。');\n} else {\n    console.log('插件未在 Workspace 模式下注册。');\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Child Props in React Parent Component\nDESCRIPTION: This snippet demonstrates how a parent component might need to modify the props of its children, which requires rendering from the parent component. This scenario necessitates configuring the component as a 'minimal render unit'.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq004.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nReact.Children.forEach(children, (child: React.ReactElement) => {\n  // 子元素的参数只有 behavior，且 behavior 为 'READONLY';\n\tconst newChild = React.cloneElement(child, {\n  \tbehavior: 'READONLY'\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Event Registration in Setter Component A\nDESCRIPTION: Implementation of event registration in a Setter component. Uses the field.id to create unique event names and properly manages event lifecycle with componentDidMount and componentWillUnmount.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/event.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { event } from '@alilc/lowcode-engine';\n\nconst SETTER_NAME = 'SetterA';\n\nclass SetterA extends React.Component {\n  componentDidMount() {\n    // 这里由于面板上会有多个 setter，使用 field.id 来标记 setter 名\n    this.emitEventName = `${SETTER_NAME}-${this.props.field.id}`;\n    event.on(`common:${this.emitEventName}.bindEvent`, this.bindEvent)\n  }\n\n  bindEvent = (eventName) => {\n    // do someting\n  }\n\n  componentWillUnmount() {\n  \t// setter 是以实例为单位的，每个 setter 注销的时候需要把事件也注销掉，避免事件池过多\n    event.off(`common:${this.emitEventName}.bindEvent`, this.bindEvent)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Modifying Data Source Values in JavaScript\nDESCRIPTION: Illustrates how to manually update values in a data source. First retrieves the current 'user' value from the state, then uses setState to modify it with a new empty object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/appendix/api.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 获取数据源面板中定义的值\nconst { user } = this.state;\n\n// 修改 state 值\nthis.setState({\n\tuser: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Registration Level\nDESCRIPTION: Shows how to verify plugin registration level using ctx.registerLevel comparison.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq024.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (ctx.registerLevel !== IPublicEnumPluginRegisterLevel.Workspace) {\n    console.log('插件未在 Workspace 模式下注册。');\n} else {\n    console.log('插件已在 Workspace 模式下注册。');\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Simulator Rerender\nDESCRIPTION: Command to trigger a manual rerender of the simulator, which can sometimes resolve component rendering issues.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nAliLowCodeEngine.project.simulator.rerender()\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with NPM\nDESCRIPTION: Command to create a production build of the application which will be output to the build folder.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo04/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Inspecting Selected Component Schema\nDESCRIPTION: Command to examine the export schema of the currently selected component, useful for verifying if the componentName matches what's registered.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nAliLowCodeEngine.project.currentDocument.selection.getNodes()[0].exportSchema('render')\n```\n\n----------------------------------------\n\nTITLE: Command Line Quick Start for Code Generation\nDESCRIPTION: Shows how to quickly test the code generation functionality using the command line interface. This command takes a schema JSON file as input and generates code using the Ice.js 3 solution template to a specified output directory.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/codeGeneration.md#2025-04-07_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx @alilc/lowcode-code-generator -i example-schema.json -o generated -s icejs3\n```\n\n----------------------------------------\n\nTITLE: Verifying Library Global Variable Access\nDESCRIPTION: Command to check if the library global variable is correctly accessible in the simulator content window, which is essential for component resolution.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nAliLowCodeEngine.project.simulator.contentWindow.${library}\n```\n\n----------------------------------------\n\nTITLE: Global Variable Reference in JavaScript\nDESCRIPTION: Example showing how to reference global variables through the window object in the code panel. This specifically demonstrates accessing the Next.Message component from Fusion Next to display a success message.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/code.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.Next.Message.success('成功')\n```\n\n----------------------------------------\n\nTITLE: Setting Up LowCodeEngine for Local Development\nDESCRIPTION: Bash commands for cloning the LowCodeEngine repository and setting up the local development environment. These steps prepare the engine for debugging and contributing to the project.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:alibaba/lowcode-engine.git\n$ cd lowcode-engine\n$ npm install\n$ npm run setup\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Component List from Designer\nDESCRIPTION: Shows how to get the component package list from the LowCode Engine designer interface for rendering.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/runtime/renderer.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material, project } from '@alilc/lowcode-engine';\nconst packages = material.getAssets().packages\n```\n\n----------------------------------------\n\nTITLE: Configuring Externals for LowCodeEngine\nDESCRIPTION: JSON configuration for setting up externals in the engineering configuration. This maps the LowCodeEngine modules to global variables.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"externals\": {\n    \"@alilc/lowcode-engine\": \"var window.AliLowCodeEngine\",\n    \"@alilc/lowcode-engine-ext\": \"var window.AliLowCodeEngineExt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Selection Change Callback in TypeScript\nDESCRIPTION: This method registers a callback function that will be called when the selection changes. It takes a function as a parameter and returns a disposable object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 注册 selection 变化事件回调\n* set callback which will be called when selection is changed\n* @since v1.1.0\n*/\nonSelectionChange(fn: (ids: string[]) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Loading LowCodeEngine via UNPKG CDN\nDESCRIPTION: HTML script URLs for loading LowCodeEngine core and React simulator renderer from UNPKG CDN, a popular option for loading npm packages directly in the browser.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nhttps://unpkg.com/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://unpkg.com/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Package References in Low-Code Engine\nDESCRIPTION: JSON configuration snippet defining package dependencies for a Low-Code Engine asset. It includes configuration for a serverless UI component and React Color library with their respective URLs, versions, and export settings.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/assets-spec.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n              \"https://g.alicdn.com/legao-comp/serverless3/1.1.0/env-staging-d224466e-0614-497d-8cd5-e4036dc50b70/main.js\"\n          ]\n      },\n      \"id\":\"UiPaaSServerless3-view\",\n      \"type\":\"procode\",\n      \"version\":\"1.0.0\"\n    },\n    {\n      \"package\":\"react-color\",\n      \"library\":\"ReactColor\",\n      \"id\":\"react-color\",\n      \"type\":\"procode\",\n      \"version\":\"2.19.3\",\n      \"async\":true,\n      \"exportMode\":\"functionCall\",\n      \"exportSourceId\":\"UiPaaSServerless3-view\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LowCodeEngine NPM Package\nDESCRIPTION: Command to install the LowCodeEngine package via npm. Note that this is only for TypeScript definitions as the engine only supports CDN usage.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README-zh_CN.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alilc/lowcode-engine --save-dev\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Custom Plugin Transducer\nDESCRIPTION: TypeScript type definition for the plugin processing middleware that enables plugin debugging capabilities\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/configOptions.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncustomPluginTransducer: async (originPlugin: IPublicTypePlugin, ctx: IPublicModelPluginContext, options): IPublicTypePlugin;\n```\n\n----------------------------------------\n\nTITLE: CDN Links for LowCodeEngine Core and React Simulator Renderer\nDESCRIPTION: HTML script tags for including LowCodeEngine core and React simulator renderer from various CDN providers.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README.md#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Definition for Container Components in JSON\nDESCRIPTION: JSON example showing how to define CSS styles for container components, which will be generated as independent style files.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"css\": \"body {font-size: 12px;} .table { width: 100px; }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Scaffold Lite Service\nDESCRIPTION: Commands for installing dependencies and starting the local development server. After running npm start, the application will be accessible at http://localhost:3333.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/react-module/demo1/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安装依赖\n$ npm install\n\n# 启动服务\n$ npm start  # visit http://localhost:3333\n```\n\n----------------------------------------\n\nTITLE: Checking for Unsaved Changes in History using TypeScript\nDESCRIPTION: Method to check if there are any unsaved changes in the history. It returns a boolean indicating whether there are unsaved changes.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/history.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前是否是「保存点」，即是否有状态变更但未保存\n * check if there is unsaved change for history\n */\nisSavePoint(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing LowCodeEngine via npm\nDESCRIPTION: Command to install the LowCodeEngine package using npm. This is used to provide code hinting capabilities and typings.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alilc/lowcode-engine --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining React Component Lifecycles in JSON Schema\nDESCRIPTION: Example of how to define React component lifecycle methods in the low-code engine schema format. Shows componentDidMount and componentWillUnmount implementations.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentDidMount\": {\n    \"type\": \"JSFunction\",\n    \"value\": \"function() {\\      console.log('did mount');\\    }\"\n  },\n  \"componentWillUnmount\": {\n    \"type\": \"JSFunction\",\n    \"value\": \"function() {\\      console.log('will unmount');\\    }\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Rax Application for Production\nDESCRIPTION: This command builds the app for production, optimizing it for performance and placing the output in the 'build' folder. The resulting files are ready for deployment to a web server.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo05/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Inspecting Material Component Map in Console\nDESCRIPTION: Command to check if material configuration is correctly loaded by examining the componentsMap object in the console.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq009.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nAliLowCodeEngine.material.componentsMap\n```\n\n----------------------------------------\n\nTITLE: CDN URLs for LowCodeEngine Core and React Simulator Renderer\nDESCRIPTION: HTML script tags showing various CDN options for loading LowCodeEngine core and React simulator renderer. Includes alifd, uipaas, unpkg, and jsdelivr CDN options.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README-zh_CN.md#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\nLANGUAGE: html\nCODE:\n```\nhttps://uipaas-assets.com/prod/npm/@alilc/lowcode-engine/1.0.18/dist/js/engine-core.js\n\nhttps://uipaas-assets.com/prod/npm/@alilc/lowcode-react-simulator-renderer/1.0.18/dist/js/react-simulator-renderer.js\n```\n\nLANGUAGE: html\nCODE:\n```\nhttps://unpkg.com/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://unpkg.com/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\nLANGUAGE: html\nCODE:\n```\nhttps://cdn.jsdelivr.net/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://cdn.jsdelivr.net/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: Defining a Block Container with Custom Request Handler in JSON\nDESCRIPTION: Example showing a Block container with a custom data source request handler, demonstrating how to implement alternative data fetching mechanisms beyond standard HTTP requests.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Block\",\n  \"fileName\": \"block-1\",\n  \"props\": {\n    \"className\": \"luna-page\",\n    \"style\": {\n      \"background\": \"#dd2727\"\n    }\n  },\n  ...\n  \"dataSource\": {\n    \"list\": [{\n      \"id\": \"list\",\n      \"isInit\": true,\n      \"type\": \"custom\",\n      \"requestHandler\": {\n        \"type\": \"JSFunction\",\n        \"value\": \"this.utils.hsfHandler\"\n      },\n      \"options\": {\n        \"uri\": \"hsf://xxx\",\n        \"param1\": \"a\",\n        \"param2\": \"b\",\n        ...\n      },\n      \"dataHandler\": {\n        \"type\": \"JSFunction\",\n        \"value\": \"function(data, err) { }\"\n      }\n    }],\n    \"dataHandler\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(dataMap) { }\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Rax application for production\nDESCRIPTION: Command to build the app for production deployment, which generates optimized assets in the build folder.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo06-jsslot/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener in Setter\nDESCRIPTION: Example of registering an event listener in a setter component for inter-setter communication.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event } from '@alilc/lowcode-engine';\n\ncomponentDidMount() {\n\t\t// 这里由于面板上会有多个 setter，这里我用 field.id 来标记 setter 名\n    this.emitEventName = `${SETTER_NAME}-${this.props.field.id}`;\n    event.on(`${this.emitEventName}.bindEvent`, this.bindEvent);\n}\n\nbindEvent = (eventName) => {\n  // do someting\n}\n\ncomponentWillUnmount() {\n  // setter 是以实例为单位的，每个 setter 注销的时候需要把事件也注销掉，避免事件池过多\n  event.off(`${this.emitEventName}.bindEvent`, this.bindEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Externals for LowCodeEngine\nDESCRIPTION: JSON configuration for webpack externals to properly load LowCodeEngine and its extensions from the global window object when using CDN.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README-zh_CN.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"externals\": {\n    \"@alilc/lowcode-engine\": \"var window.AliLowCodeEngine\",\n    \"@alilc/lowcode-engine-ext\": \"var window.AliLowCodeEngineExt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactNode Property with JSSlot in JSON\nDESCRIPTION: Example of defining a Card component with a complex title property using JSSlot to represent a ReactNode containing multiple child components (Icon and Text).\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Card\",\n  \"props\": {\n    \"title\": {\n      \"type\": \"JSSlot\",\n      \"value\": [{\n        \"componentName\": \"Icon\",\n        \"props\": {}\n      },{\n        \"componentName\": \"Text\",\n        \"props\": {}\n      }]\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with npm\nDESCRIPTION: Command to create a production-ready build of the application. The compiled assets will be placed in the build folder.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo07-newline-in-props/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Opening Editor Window by ID - TypeScript\nDESCRIPTION: Method for opening a window by its view ID in the workspace.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nopenEditorWindowById(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Global Plugin Definition with Skeleton Configuration\nDESCRIPTION: Shows how to define a global plugin that adds a panel dock with plugin context support.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq024.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalPlugin = (ctx) => {\n  const { skeleton } = ctx;\n\n  skeleton.add({\n    type: 'PanelDock',\n    name: 'datapool',\n    content: ProvideViewPluginContext((props) => {\n      // 组件内容\n      return (\n        <MyComponent {...props} />\n      )\n    }),\n    // 其他配置\n    contentProps: {\n      // 需要提供 pluginContext 作为参数\n      pluginContext: ctx,\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Template String Expression in LowCode Engine\nDESCRIPTION: Shows string template usage with state variables using JSExpression.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSExpression\",\n  \"value\": \"`${this.state.num}万`\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Nesting Up in ComponentMeta\nDESCRIPTION: This method checks if the current node can be placed in a parent node. It takes the current node and parent node as parameters and returns a boolean.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/component-meta.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 检测当前对应节点是否可被放置在父节点中\n * check if the current node could be placed in parent node\n * @param my 当前节点\n * @param parent 父节点\n */\ncheckNestingUp(my: IPublicModelNode | IPublicTypeNodeData, parent: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Replacing Current Node in TypeScript\nDESCRIPTION: This method replaces the current node with a new node schema.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 将当前节点替换成指定节点描述\n * replace current node with a new node schema\n * @param schema\n */\nreplaceWith(schema: IPublicTypeNodeSchema): any;\n```\n\n----------------------------------------\n\nTITLE: 执行低代码构建命令\nDESCRIPTION: 使用npm运行lowcode:build命令来构建低代码项目。这将生成view.js文件，可用于editUrls配置。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/faq/faq011.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nnpm run lowcode:build\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview in HTML\nDESCRIPTION: Defines the recommended application directory structure aligned with standard source build-scripts, showing the organization of low-code metadata, components, pages, and configurations\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n├── META/                          # 低代码元数据信息，用于多分支冲突解决、数据回滚等功能\n├── public/                        # 静态文件，构建时会 copy 到 build/ 目录\n│   ├── index.html                 # 应用入口 HTML\n│   └── favicon.png                # Favicon\n├── src/\n│   ├── components/                # 应用内的低代码业务组件\n│   │   └── guide-component/\n│   │       ├── index.js           # 组件入口\n│   │       ├── components.js      # 组件依赖的其他组件\n│   │       ├── schema.js          # schema 描述\n│   │       └── index.scss         # css 样式\n│   ├── pages/                     # 页面\n│   │   └── home/                  # Home 页面\n│   │       ├── index.js           # 页面入口\n│   │       └── index.scss         # css 样式\n│   ├── layouts/\n│   │   └── basic-layout/          # layout 组件名称\n│   │       ├── index.js           # layout 入口\n│   │       ├── components.js      # layout 组件依赖的其他组件\n│   │       ├── schema.js          # layout schema 描述\n│   │       └── index.scss         # layout css 样式\n│   ├── config/                    # 配置信息\n│   │   ├── components.js          # 应用上下文所有组件\n│   │   ├── routes.js              # 页面路由列表\n│   │   └── app.js                 # 应用配置文件\n│   ├── utils/                     # 工具库\n│   │   └── index.js               # 应用第三方扩展函数\n│   ├── locales/                   # [可选] 国际化资源\n│   │   ├── en-US\n│   │   └── zh-CN\n│   ├── global.scss                # 全局样式\n│   └── index.jsx                  # 应用入口脚本，依赖 config/routes.js 的路由配置动态生成路由；\n├── webpack.config.js              # 项目工程配置，包含插件配置及自定义 webpack 配置等\n├── README.md\n├── package.json\n├── .editorconfig\n├── .eslintignore\n├── .eslintrc.js\n├── .gitignore\n├── .stylelintignore\n└── .stylelintrc.js\n```\n\n----------------------------------------\n\nTITLE: Refreshing Metadata in ComponentMeta\nDESCRIPTION: This method refreshes the metadata, triggering a re-parse and refresh of the metadata.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/component-meta.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 刷新元数据，会触发元数据的重新解析和刷新\n * refresh metadata\n */\nrefreshMetadata(): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies for LowCodeEngine\nDESCRIPTION: JSON configuration example for webpack or similar bundlers to treat LowCodeEngine packages as external dependencies. This allows the engine to be loaded from global window variables instead of being bundled.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"externals\": {\n    \"@alilc/lowcode-engine\": \"var window.AliLowCodeEngine\",\n    \"@alilc/lowcode-engine-ext\": \"var window.AliLowCodeEngineExt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Naming Example in TypeScript\nDESCRIPTION: Demonstrates the correct way to name files in the project using lowercase with hyphens.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/participate/code-specification.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget-custom-data.ts\n```\n\n----------------------------------------\n\nTITLE: 执行测试用例命令\nDESCRIPTION: 展示如何执行特定的测试用例，通过在命令中指定测试名称来筛选只运行特定的测试。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/CONTRIBUTING.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -t 'demo2-utils-name-alias'\n```\n\n----------------------------------------\n\nTITLE: Checking Nesting Capability in DocumentModel (TypeScript)\nDESCRIPTION: Method to check if a drag object can be dropped into a target node. This validates whether the nesting relationship is allowed based on the component definitions.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 检查拖拽放置的目标节点是否可以放置该拖拽对象\n * check if dragOjbect can be put in this dragTarget\n * @param dropTarget 拖拽放置的目标节点\n * @param dragObject 拖拽的对象\n * @returns boolean 是否可以放置\n * @since v1.0.16\n */\ncheckNesting(\n  dropTarget: IPublicModelNode,\n  dragObject: IPublicTypeDragNodeObject | IPublicTypeDragNodeDataObject\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll Target in TypeScript\nDESCRIPTION: This method creates a ScrollTarget that works in conjunction with the Scroller. It takes an HTMLDivElement as input and returns a scroll target model, which is used to define the scrollable area for the Scroller.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/canvas.md#2025-04-07_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建一个 ScrollTarget，与 Scroller 一起发挥作用，详见 createScroller 中的描述\n * this works with Scroller, refer to createScroller`s description\n * @since v1.1.0\n */\ncreateScrollTarget(shell: HTMLDivElement): IPublicModelScrollTarget;\n```\n\n----------------------------------------\n\nTITLE: 设置器和插件之间的事件通信 (JavaScript)\nDESCRIPTION: 这段代码演示了如何在设置器中注册和触发事件，以实现设置器和插件之间的通信。它使用了低代码引擎提供的event模块来处理事件。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/panels/settings.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event } from '@ali/lowcode-engine';\n\ncomponentDidMount() {\n\t\t// 这里由于面板上会有多个 setter，这里我用 field.id 来标记 setter 名\n    this.emitEventName = `${SETTER_NAME}-${this.props.field.id}`;\n    event.on(`${this.emitEventName}.bindEvent`, this.bindEvent)\n}\n\nbindEvent = (eventName) => {\n  // do someting\n}\n\ncomponentWillUnmount() {\n  // setter 是以实例为单位的，每个 setter 注销的时候需要把事件也注销掉，避免事件池过多\n  event.off(`${this.emitEventName}.bindEvent`, this.bindEvent)\n}\n```\n\n----------------------------------------\n\nTITLE: 执行特定测试文件命令\nDESCRIPTION: 展示如何执行某个特定的测试文件而不是整个测试套件，通过指定测试文件的路径来实现。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/CONTRIBUTING.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx jest tests/plugins/common/requireUtils.test.ts\n```\n\n----------------------------------------\n\nTITLE: Detecting Node Status in DocumentModel (TypeScript)\nDESCRIPTION: Method to check if a node is currently in a detection (hover) state. Helps determine if the node is being interacted with by the user.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 判断是否当前节点处于被探测状态\n * check is node being detected\n * @param node\n * @since v1.1.0\n */\nisDetectingNode(node: IPublicModelNode): boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assets Example\nDESCRIPTION: This example demonstrates how to get the current assets using the material API in the Low-Code Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/material.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { material } from '@alilc/lowcode-engine';\n\nmaterial.getAssets();\n```\n\n----------------------------------------\n\nTITLE: 更新测试快照命令\nDESCRIPTION: 展示如何更新特定测试用例的预期输出快照，适用于当测试用例的预期输出有意变更时。\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/CONTRIBUTING.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test:update-snapshots -t 'demo2-utils-name-alias'\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies and Scripts for Alibaba Low-Code Engine in JSON\nDESCRIPTION: This snippet defines the project configuration, including dependencies, scripts, and build settings for a project generated by lowcode-code-generator and lowcode-solution-icejs3. It specifies various npm scripts for development, building, and linting.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/icejs3-app/demo3/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"@alilc/lowcode-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Low-Code Engine 低代码搭建引擎 Demo 项目\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:alibaba/lowcode-demo.git\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"npm run start:ali-lowcode-engine\",\n    \"start-proxy\": \"npm run start:ali-lowcode-engine-proxy\",\n    \"start:ali-lowcode-engine\": \"rimraf node_modules/@alilc && npm run tsInit && ice-scripts dev --config build.json\",\n    \"start:ali-lowcode-engine-proxy\": \"rimraf node_modules/@alilc && npm run tsInit && ice-scripts dev --config build-proxy.json\",\n    \"build:ali-lowcode-engine\": \"rimraf node_modules/@alilc && npm run tsInit && ice-scripts build --config build.json\",\n    \"tsInit\": \"node scripts/tsAlilcLoCodeEngineInit.js\",\n    \"prettier\": \"prettier -c --write \"**/*\"\",\n    \"eslint\": \"eslint --cache --ext .js,.jsx ./\",\n    \"stylelint\": \"stylelint \"**/*.{css,scss,less}\"\"\n  },\n  \"dependencies\": {\n    \"@alifd/next\": \"^1.25.27\",\n    \"@alilc/lowcode-datasource-fetch-handler\": \"^1.0.1\",\n    \"@alilc/lowcode-plugin-code-editor\": \"^1.0.3\",\n    \"@alilc/lowcode-plugin-datasource-pane\": \"^1.0.9\",\n    \"@alilc/lowcode-plugin-inject\": \"^1.1.1\",\n    \"@alilc/lowcode-plugin-manual\": \"^1.0.4\",\n    \"@alilc/lowcode-plugin-schema\": \"^1.0.2\",\n    \"@alilc/lowcode-plugin-simulator-iframe\": \"^1.0.2\",\n    \"@alilc/lowcode-plugin-undo-redo\": \"^1.0.0\",\n    \"@alilc/lowcode-plugin-zh-en\": \"^1.0.0\",\n    \"@alilc/lowcode-react-renderer\": \"^1.1.1\",\n    \"@alilc/lowcode-utils\": \"1.1.7\",\n    \"react\": \"^16.14.0\",\n    \"react-dom\": \"^16.14.0\"\n  },\n  \"devDependencies\": {\n    \"@alib/build-scripts\": \"^0.1.32\",\n    \"@alifd/build-plugin-lowcode\": \"^0.4.2\",\n    \"@types/react\": \"^16.14.24\",\n    \"@types/react-dom\": \"^16.9.14\",\n    \"@iceworks/spec\": \"^1.0.0\",\n    \"@types/node\": \"^14.17.32\",\n    \"build-plugin-fusion\": \"^0.1.22\",\n    \"build-plugin-moment-locales\": \"^0.1.0\",\n    \"eslint\": \"^7.30.0\",\n    \"husky\": \"^7.0.4\",\n    \"ice.js\": \"^2.0.0\",\n    \"prettier\": \"^2.3.2\",\n    \"rimraf\": \"^3.0.2\",\n    \"stylelint\": \"^13.7.2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run prettier && npm run eslint && npm run stylelint\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Prop in TypeScript\nDESCRIPTION: Method to add a new property to the Props model with a given value and optional key. This method was introduced in version 1.1.0.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/props.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 添加一个 prop\n * add a key with given value\n * @param value\n * @param key\n * @since v1.1.0\n */\nadd(value: IPublicTypeCompositeValue, key?: string | number | undefined): any;\n```\n\n----------------------------------------\n\nTITLE: Installing LowCodeEngine via npm\nDESCRIPTION: Command to install the LowCodeEngine package using npm. Note that this is primarily for providing TypeScript definitions and code completion, as the engine itself is designed to be used via CDN.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README-zh_CN.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alilc/lowcode-engine --save-dev\n```\n\n----------------------------------------\n\nTITLE: Fixing React JSX Loop Data Handling in Code Generator\nDESCRIPTION: Fix that resolves an issue where the __$evalArray function was not correctly included when generating code for loop data in React JSX output.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/CHANGELOG.md#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\neb4cc693f5dbcae54546c569eb8fa331d074e062\n```\n\n----------------------------------------\n\nTITLE: Building Rax Application for Production\nDESCRIPTION: Builds and bundles the Rax application for production deployment into the build folder\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo03/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting Property Value in SettingTopEntry\nDESCRIPTION: This method retrieves the value of a specified property name. It takes a string or number as the property name and returns the corresponding value.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/setting-top-entry.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * 获取指定 propName 的值\n  * @param propName\n  * @returns\n  */\ngetPropValue(propName: string | number): any;\n```\n\n----------------------------------------\n\nTITLE: Focus Node Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when the focused node changes. The callback receives the document model and the newly focused node.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 设置聚焦节点变化的回调\n * triggered focused node is set mannually from plugin\n * @param fn\n * @since v1.1.0\n */\nonFocusNodeChanged(\n  fn: (doc: IPublicModelDocumentModel, focusNode: IPublicModelNode) => void,\n): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Linking Git Commit in Markdown\nDESCRIPTION: This snippet demonstrates how to link a Git commit hash to its corresponding commit page on GitHub using Markdown syntax.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/CHANGELOG.md#2025-04-07_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n([a7d436a](https://github.com/alibaba/lowcode-engine/commit/a7d436a0525a0ce0c7229710077111f283b452f4))\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with NPM\nDESCRIPTION: Command to run the application in development mode on port 3333 with hot reload functionality.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo04/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Rectangle Information in TypeScript\nDESCRIPTION: This method returns the size and position information of a node as a DOMRect object or null.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 返回节点的尺寸、位置信息\n * get rect information for this node\n */\ngetRect(): DOMRect | null;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Source Values in JavaScript\nDESCRIPTION: Shows how to access data source values that are stored in the component's state. This example extracts the 'userList' value from the state object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/demoUsage/appendix/api.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { userList } = this.state;\n```\n\n----------------------------------------\n\nTITLE: Initializing LowCodeEngine with Custom Logo\nDESCRIPTION: TypeScript example showing how to initialize LowCodeEngine and add a custom logo widget to the top area of the interface.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README-zh_CN.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  area: 'topArea',\n  type: 'Widget',\n  name: 'logo',\n  content: YourFantasticLogo,\n  contentProps: {\n    logo:\n      'https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png',\n    href: '/',\n  },\n  props: {\n    align: 'left',\n    width: 100,\n  },\n});\n\ninit(document.getElementById('lce'));\n```\n\n----------------------------------------\n\nTITLE: Registering Code Generation Plugin in Low-Code Editor (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register the code generation plugin in a Low-Code Engine project. It shows both default registration and registration with disabled code generation button.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/README.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugins } from '@alilc/lowcode-engine';\nimport CodeGenPlugin from '@alilc/lowcode-plugin-code-generator';\n\n// In your initialization function:\nawait plugins.register(CodeGenPlugin);\n\n// If you don't want to automatically add the code generation button, you can register like this\nawait plugins.register(CodeGenPlugin, { disableCodeGenActionBtn: true });\n```\n\n----------------------------------------\n\nTITLE: Creating Document Location Object in TypeScript\nDESCRIPTION: This method creates a document insertion location object that describes the position of a node to be inserted in the document. It takes location data as input and returns a drop location model.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/canvas.md#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 创建一个文档插入位置对象，该对象用来描述一个即将插入的节点在文档中的位置\n * create a drop location for document, drop location describes a location in document\n * @since v1.1.0\n */\ncreateLocation(locationData: IPublicTypeLocationData): IPublicModelDropLocation;\n```\n\n----------------------------------------\n\nTITLE: Numeric Variable Expression in LowCode Engine\nDESCRIPTION: Shows how to return a numeric value using JSExpression by accessing state variables.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSExpression\",\n  \"value\": \"this.state.num\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: Command to run the app in development mode. It starts a local server at port 3333 that reloads when code changes are made.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo07-newline-in-props/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Initializing LowCodeEngine with Custom Logo\nDESCRIPTION: TypeScript example demonstrating how to initialize LowCodeEngine and add a custom logo widget to the top area of the editor.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README-zh_CN.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  area: 'topArea',\n  type: 'Widget',\n  name: 'logo',\n  content: YourFantasticLogo,\n  contentProps: {\n    logo:\n      'https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png',\n    href: '/',\n  },\n  props: {\n    align: 'left',\n    width: 100,\n  },\n});\n\ninit(document.getElementById('lce'));\n```\n\n----------------------------------------\n\nTITLE: Plugin Metadata Package Configuration\nDESCRIPTION: Shows how to configure plugin metadata in package.json and its transformation to TypeScript code.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/plugins.md#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"@alilc/lowcode-plugin-debug\",\n  \"lcMeta\": {\n    \"pluginName\": \"debug\",\n    \"meta\": {\n      \"engines\": {\n        \"lowcodeEgnine\": \"^1.0.0\"\n      },\n      \"preferenceDeclaration\": { ... }\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst debug = (ctx: IPublicModelPluginContext, options: any) => {\n\treturn {};\n}\n\ndebug.pluginName = 'debug';\ndebug.meta = {\n  engines: {\n    lowcodeEgnine: '^1.51.0',\n\t},\n  preferenceDeclaration: { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Component Block Structure Example in LowCode Engine\nDESCRIPTION: Complete example showing component block structure with state, methods and child components.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Block\",\n  \"fileName\": \"block1\",\n  \"props\": {},\n  \"state\": {\n    \"num\": 8,\n    \"num2\": 5\n  },\n  \"methods\": {\n    \"getNum\": {\n      \"type\": \"JSFunction\",\n      \"value\": \"function(a, b){\\        return a + b;\\      }\"\n    }\n  },\n  \"children\": [{\n    \"componentName\": \"Button\",\n    \"props\": {\n      \"text\": {\n        \"type\": \"JSExpression\",\n        \"value\": \"this.getNum(this.state.num, this.state.num2) + '万'\"\n      }\n    },\n    \"condition\": {\n      \"type\": \"JSExpression\",\n      \"value\": \"this.state.num > this.state.num2\"\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Rax Materials Basic App for Production\nDESCRIPTION: Builds the app for production, creating optimized files in the 'build' folder ready for deployment.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo13-datasource-prop/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Initializing LowCodeEngine with Custom Logo\nDESCRIPTION: TypeScript code snippet demonstrating how to initialize LowCodeEngine and add a custom logo widget to the top area of the interface.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, skeleton } from '@alilc/lowcode-engine';\n\nskeleton.add({\n  area: 'topArea',\n  type: 'Widget',\n  name: 'logo',\n  content: YourFantasticLogo,\n  contentProps: {\n    logo:\n      'https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png',\n    href: '/',\n  },\n  props: {\n    align: 'left',\n    width: 100,\n  },\n});\n\ninit(document.getElementById('lce'));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Setter by Type in TypeScript\nDESCRIPTION: This method retrieves a registered setter by its type. It returns an IPublicTypeRegisteredSetter object or null if not found.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取指定 setter\n * get setter by type\n * @param type\n * @returns\n */\ngetSetter(type: string): IPublicTypeRegisteredSetter | null;\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview for Scaffold Lite\nDESCRIPTION: Detailed breakdown of the project's directory structure including build output, source code organization, configuration files, and more. This helps developers understand where different components should be placed.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/react-module/demo1/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n├── build/                         # 构建产物\n├── mock/                          # 本地模拟数据\n│   ├── index.[j,t]s\n├── public/\n│   ├── index.html                 # 应用入口 HTML\n│   └── favicon.png                # Favicon\n├── src/                           # 源码路径\n│   ├── components/                # 自定义业务组件\n│   │   └── Guide/\n│   │       ├── index.[j,t]sx\n│   │       ├── index.module.scss\n│   ├── layouts/                   # 布局组件\n│   │   └── BasicLayout/\n│   │       ├── index.[j,t]sx\n│   │       └── index.module.scss\n│   ├── pages/                     # 页面\n│   │   └── Home/                  # home 页面，约定路由转成小写\n│   │       ├── components/        # 页面级自定义业务组件\n│   │       ├── models.[j,t]sx     # 页面级数据状态\n│   │       ├── index.[j,t]sx      # 页面入口\n│   │       └── index.module.scss  # 页面样式文件\n│   ├── configs/                   # [可选] 配置文件\n│   │   └── menu.[j,t]s            # [可选] 菜单配置\n│   ├── models/                    # [可选] 应用级数据状态\n│   │   └── user.[j,t]s\n│   ├── utils/                     # [可选] 工具库\n│   ├── global.scss                # 全局样式\n│   ├── routes.[j,t]s              # 路由配置\n│   └── app.[j,t]s[x]              # 应用入口脚本\n├── build.json                     # 工程配置\n├── README.md\n├── package.json\n├── .editorconfig\n├── .eslintignore\n├── .eslintrc.[j,t]s\n├── .gitignore\n├── .stylelintignore\n├── .stylelintrc.[j,t]s\n├── .gitignore\n└── [j,t]sconfig.json\n```\n\n----------------------------------------\n\nTITLE: Starting the development server for Rax application\nDESCRIPTION: Command to run the app in development mode, which starts a local server at port 3333 and enables hot-reloading for development.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo06-jsslot/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup for LowCodeEngine\nDESCRIPTION: Bash commands for cloning the LowCodeEngine repository, installing dependencies, and starting the local development environment.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/engine/README.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:alibaba/lowcode-engine.git\n$ cd lowcode-engine\n$ npm install\n$ npm run setup\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Registering Official Setters in TypeScript\nDESCRIPTION: This example demonstrates how to register official built-in setters and plugins into the designer. It uses the setters and skeleton APIs from the Low-Code Engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setters, skeleton } from '@alilc/lowcode-engine';\nimport { setterMap, pluginMap } from '@alilc/lowcode-engine-ext';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\nconst SetterRegistry = (ctx: IPublicModelPluginContext) => {\n  return {\n    name: 'ext-setters-registry',\n    async init() {\n      // 注册 setterMap\n      setters.registerSetter(setterMap);\n      // 注册插件\n      // 注册事件绑定面板\n      skeleton.add({\n        area: 'centerArea',\n        type: 'Widget',\n        content: pluginMap.EventBindDialog,\n        name: 'eventBindDialog',\n        props: {},\n      });\n\n      // 注册变量绑定面板\n      skeleton.add({\n        area: 'centerArea',\n        type: 'Widget',\n        content: pluginMap.VariableBindDialog,\n        name: 'variableBindDialog',\n        props: {},\n      });\n    },\n  };\n}\n\nSetterRegistry.pluginName = 'SetterRegistry';\nawait plugins.register(SetterRegistry);\n```\n\n----------------------------------------\n\nTITLE: Plugin Preference Configuration\nDESCRIPTION: Demonstrates how to define and use plugin preferences and configuration options.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/plugins.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugins } from '@alilc/lowcode-engine';\nimport { IPublicModelPluginContext } from '@alilc/lowcode-types';\n\nconst BuiltinPluginRegistry = (ctx: IPublicModelPluginContext, options: any) => {\n  return {\n    async init() {\n      // 直接传值方式：\n      //   通过 register(xxx, options) 传入\n      //   通过 options 取出\n\n      // 引擎初始化时也可以设置某插件的全局配置项：\n      //   通过 engine.init(..., preference) 传入\n      //   通过 ctx.preference.getValue() 取出\n    },\n  };\n}\nBuiltinPluginRegistry.pluginName = 'BuiltinPluginRegistry';\nBuiltinPluginRegistry.meta = {\n  preferenceDeclaration: {\n    title: 'pluginA 的参数定义',\n    properties: [\n      {\n        key: 'key1',\n        type: 'string',\n        description: 'this is description for key1',\n      },\n      {\n        key: 'key2',\n        type: 'boolean',\n        description: 'this is description for key2',\n      },\n      {\n        key: 'key3',\n        type: 'number',\n        description: 'this is description for key3',\n      },\n      {\n        key: 'key4',\n        type: 'string',\n        description: 'this is description for key4',\n      },\n    ],\n  },\n}\n\nawait plugins.register(BuiltinPluginRegistry, { key1: 'abc', key5: 'willNotPassToPlugin' });\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Rax Materials Basic App\nDESCRIPTION: Runs the app in development mode, allowing you to view it at http://localhost:3333. The page will automatically reload when you make edits.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo02/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### `npm run start`\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Plugin Command Module\nDESCRIPTION: Basic example showing how to require and use the @alilc/plugin-command module. This is currently a placeholder implementation with TODO markers.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/packages/plugin-command/README.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pluginCommand = require('@alilc/plugin-command');\n\n// TODO: DEMONSTRATE API\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Setter in TypeScript\nDESCRIPTION: This snippet demonstrates how to register the custom AltStringSetter with the Low-Code Engine's setter registry.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AltStringSetter from './AltStringSetter';\nimport { setters } from '@alilc/lowcode-engine';\nconst { registerSetter } = setters;\nregisterSetter('AltStringSetter', AltStringSetter);\n```\n\n----------------------------------------\n\nTITLE: Adding a Node to Selection in TypeScript\nDESCRIPTION: This method adds a specified node to the selection incrementally. It takes a node id as a parameter.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/selection.md#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* 选中指定节点（增量方式）\n* add node with specific id to selection\n* @param id\n*/\nadd(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Rax Application\nDESCRIPTION: This command runs the app in development mode, allowing for live reloading of changes. It starts a local server at http://localhost:3333 where the application can be viewed in a web browser.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo05/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run start`\n```\n\n----------------------------------------\n\nTITLE: Webpack External Configuration for LowCodeEngine\nDESCRIPTION: JSON configuration showing how to set up externals in webpack for LowCodeEngine to use window-scoped variables.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README-zh_CN.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"externals\": {\n    \"@alilc/lowcode-engine\": \"var window.AliLowCodeEngine\",\n    \"@alilc/lowcode-engine-ext\": \"var window.AliLowCodeEngineExt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Setter in Material Configuration\nDESCRIPTION: This JSON configuration shows how to use the custom AltStringSetter in a material's property configuration.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"props\": {\n    \"isExtends\": true,\n    \"override\": [\n      {\n        \"name\": \"type\",\n        \"setter\": \"AltStringSetter\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components Based on Mapping Configuration in JavaScript\nDESCRIPTION: JavaScript example demonstrating how components are imported based on the component mapping configuration, showing various import patterns including destructuring, aliasing, and subcomponent access.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/lowcode-spec.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 使用解构方式，destructuring is true.\nimport { Button } from '@alifd/next';\n\n// 使用解构方式，且 exportName 和 componentName 不同\nimport { Select as MySelect } from '@alifd/next';\n\n// 使用解构方式，并导出其子组件\nimport { Button } from '@alifd/next';\nconst ButtonGroup = Button.Group;\n\nimport { Radio } from '@alifd/next';\nconst RadioGroup = Radio.Group;\n\n// 不使用解构方式进行导出\nimport CustomCard from '@ali/custom-card';\n\n// 使用特定路径进行导出\nimport { Input as CustomInput } from '@ali/custom/lib/input';\n```\n\n----------------------------------------\n\nTITLE: Starting Rax App in Development Mode\nDESCRIPTION: Runs the Rax app in development mode, allowing for live reloading of edits. The app will be accessible at http://localhost:3333 in the browser.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo01/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run start`\n```\n\n----------------------------------------\n\nTITLE: CDN Import Options for LowCodeEngine\nDESCRIPTION: HTML CDN links for importing LowCodeEngine core and simulator renderer from various CDN providers.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README-zh_CN.md#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js\n\nhttps://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: Adding a Dock Type Component to Left Area in Low Code Engine\nDESCRIPTION: Code example for adding a Dock type component to the left area that can trigger actions like opening external links or showing widgets when clicked.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/skeleton.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skeleton } from \"@alilc/lowcode-engine\";\n\nskeleton.add({\n  area: \"leftArea\",\n  type: \"Dock\",\n  name: \"opener\",\n  props: {\n    icon: Icon, // Icon 组件实例\n    align: \"bottom\",\n    onClick: function () {\n      // 打开外部链接\n      window.open('https://lowcode-engine.cn');\n      // 显示 widget\n      skeleton.showWidget('xxx');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace Plugins - TypeScript\nDESCRIPTION: Getter for accessing application-level plugin registrations in the workspace. Returns an IPublicApiPlugins object.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/workspace.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget plugins(): IPublicApiPlugins\n```\n\n----------------------------------------\n\nTITLE: Starting Rax App in Development Mode\nDESCRIPTION: Runs the Rax application in development mode, which allows for live reloading of edits. The app will be accessible at http://localhost:3333.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo12-refs/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run start`\n```\n\n----------------------------------------\n\nTITLE: Installing LowCodeEngine via NPM\nDESCRIPTION: Command for installing the LowCodeEngine package via NPM. The package primarily provides code hinting capabilities and type definitions as the actual engine is loaded via CDN.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alilc/lowcode-engine --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring LowCode Development Environment\nDESCRIPTION: This snippet shows how to configure the LowCode development environment using build-scripts and the LowCode plugin in a project's build configuration file.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/material.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  alias: {\n    '@': './src',\n  },\n  plugins: [\n    [\n      \"@alifd/build-plugin-lowcode\",\n      {\n        engineScope: '@alilc',\n      }\n    ]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Registered Setters in TypeScript\nDESCRIPTION: This method returns a Map of all registered setters, with the setter type as the key and an object containing the setter and its type as the value.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/setters.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 获取已注册的所有 settersMap\n * get map of all registered setters\n * @returns\n */\ngetSettersMap(): Map<string, IPublicTypeRegisteredSetter & {\n  type: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Building Rax App for Production\nDESCRIPTION: Builds the Rax application for production, creating optimized files in the 'build' folder ready for deployment.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo12-refs/expected/demo-project/README.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Loading LowCodeEngine via UIPass CDN\nDESCRIPTION: HTML script URLs for loading LowCodeEngine core and React simulator renderer from UIPass CDN, providing an alternative CDN option for including the engine.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/README.md#2025-04-07_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nhttps://uipaas-assets.com/prod/npm/@alilc/lowcode-engine/1.0.18/dist/js/engine-core.js\n\nhttps://uipaas-assets.com/prod/npm/@alilc/lowcode-react-simulator-renderer/1.0.18/dist/js/react-simulator-renderer.js\n```\n\n----------------------------------------\n\nTITLE: Modifying Other Props in Setter\nDESCRIPTION: Example of modifying other properties of the same component within a setter using the field prop.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbindFunction = () => {\n    const { field, value } = this.props;\n    const propsField = field.parent;\n\t\t// 获取同级其他属性 showJump 的值\n    const otherValue = propsField.getPropValue('showJump');\n    // set 同级其他属性 showJump 的值\n    propsField.setPropValue('showJump', false);\n}\n```\n\n----------------------------------------\n\nTITLE: Node Visibility Change Event in DocumentModel (TypeScript)\nDESCRIPTION: Event subscription method for when a node's visibility changes. The callback receives the node instance and its new visibility state.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/document-model.md#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 当前 document 的节点显隐状态变更事件\n * set callback for event on visibility changed for certain node\n * @param fn\n */\nonChangeNodeVisible(fn: (node: IPublicModelNode, visible: boolean) => void): IPublicTypeDisposable;\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with NPM\nDESCRIPTION: Command to run the application in development mode, which starts a local server at http://localhost:3333 with hot reload functionality.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo11-utils-name-alias/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Component Library Publishing Commands\nDESCRIPTION: Commands for publishing components to TNPM and syncing to material center\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tnpm publish\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 安装工具\n$ tnpm i iceworks -g\n# 执行同步\n$ iceworks sync\n```\n\n----------------------------------------\n\nTITLE: Using Custom Setter in Material Configuration\nDESCRIPTION: Example of using the custom AltStringSetter in the material resource configuration file for a component's property.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/expand/editor/setter.md#2025-04-07_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentName\": \"Message\",\n  \"title\": \"Message\",\n  \"configure\": {\n    \"props\": [\n      {\n        \"name\": \"type\",\n        \"setter\": \"AltStringSetter\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Property Value in TypeScript\nDESCRIPTION: This method sets the value of a property model instance for the specified path.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/api/model/node.md#2025-04-07_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * 设置指定 path 的属性模型实例值\n * set value for prop with path\n * @param path 属性路径，支持 a / a.b / a.0 等格式\n * @param value 值\n */\nsetPropValue(path: string, value: IPublicTypeCompositeValue): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Project Template and Slot Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure of project templates, slots, and plugin configurations for code generation. These interfaces describe how modules are organized and named within a project.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/guide/design/generator.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 项目模版\nexport interface IProjectTemplate {\n  slots: Record<string, IProjectSlot>;\n}\n\n// 插槽\ninterface IProjectSlot {\n  path: string[];\n  fileName?: string;\n}\n\n// 插槽出码插件配置\ninterface IProjectPlugins {\n  [slotName: string]: BuilderComponentPlugin[];\n}\n```\n\n----------------------------------------\n\nTITLE: Design Export Adaptor Implementation\nDESCRIPTION: Example of implementing a design export adaptor for Sketch plugin integration\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/docs/docs/specs/material-spec.md#2025-04-07_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport BizButton from '@alifd/biz-button';\n\nexport default {\n  name: 'BizButton',\n  editor: () => ({\n    props: [{\n      name: 'level',\n      type: 'enum',\n      options: ['normal', 'primary', 'secondary'],\n    }, {\n      name: 'size',\n      type: 'enum',\n      options: ['large', 'medium', 'small'],\n      default: 'medium',\n    }],\n    data: {\n      default: 'hello',\n    }\n  }),                                           // 内容编辑器\n  adaptor: ({ data, level, size, ...others }) => {\n    return <BizButton type={level} size={size}>{data}</BizButton>;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Rax Materials Basic App in Development Mode\nDESCRIPTION: Runs the app in development mode, allowing for live reloading of edits. The app will be accessible at http://localhost:3333 in the browser.\nSOURCE: https://github.com/alibaba/lowcode-engine/blob/main/modules/code-generator/tests/fixtures/test-cases/rax-app/demo13-datasource-prop/expected/demo-project/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `npm run start`\n```"
  }
]