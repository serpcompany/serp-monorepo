[
  {
    "owner": "guilhermerodz",
    "repo": "input-otp",
    "content": "TITLE: Complete OTP Implementation with Tailwind CSS\nDESCRIPTION: Comprehensive implementation example using Tailwind CSS, @shadcn/ui, and custom styling components including slot rendering and animations.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport { OTPInput, SlotProps } from 'input-otp'\n<OTPInput\n  maxLength={6}\n  containerClassName=\"group flex items-center has-[:disabled]:opacity-30\"\n  render={({ slots }) => (\n    <>\n      <div className=\"flex\">\n        {slots.slice(0, 3).map((slot, idx) => (\n          <Slot key={idx} {...slot} />\n        ))}\n      </div>\n\n      <FakeDash />\n\n      <div className=\"flex\">\n        {slots.slice(3).map((slot, idx) => (\n          <Slot key={idx} {...slot} />\n        ))}\n      </div>\n    </>\n  )}\n/>\n\n// Feel free to copy. Uses @shadcn/ui tailwind colors.\nfunction Slot(props: SlotProps) {\n  return (\n    <div\n      className={cn(\n        'relative w-10 h-14 text-[2rem]',\n        'flex items-center justify-center',\n        'transition-all duration-300',\n        'border-border border-y border-r first:border-l first:rounded-l-md last:rounded-r-md',\n        'group-hover:border-accent-foreground/20 group-focus-within:border-accent-foreground/20',\n        'outline outline-0 outline-accent-foreground/20',\n        { 'outline-4 outline-accent-foreground': props.isActive },\n      )}\n    >\n      <div className=\"group-has-[input[data-input-otp-placeholder-shown]]:opacity-20\">\n        {props.char ?? props.placeholderChar}\n      </div>\n      {props.hasFakeCaret && <FakeCaret />}\n    </div>\n  )\n}\n\n// You can emulate a fake textbox caret!\nfunction FakeCaret() {\n  return (\n    <div className=\"absolute pointer-events-none inset-0 flex items-center justify-center animate-caret-blink\">\n      <div className=\"w-px h-8 bg-white\" />\n    </div>\n  )\n}\n\n// Inspired by Stripe's MFA input.\nfunction FakeDash() {\n  return (\n    <div className=\"flex w-10 justify-center items-center\">\n      <div className=\"w-3 h-1 rounded-full bg-border\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Integration\nDESCRIPTION: Simple example showing how to import and use the OTPInput component in a React form component.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport { OTPInput } from 'input-otp'\n\nfunction MyForm() {\n  return <form>\n   <OTPInput maxLength={6} render={({slots})  => (...)} />\n  </form>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission with OTP Input in React\nDESCRIPTION: Example showing how to handle automatic form submission and button focus when OTP input is completed using refs.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  const formRef = useRef<HTMLFormElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  return (\n    <form ref={formRef}>\n      <OTPInput\n        // ... automatically submit the form\n        onComplete={() => formRef.current?.submit()}\n        // ... or focus the button like as you wish\n        onComplete={() => buttonRef.current?.focus()}\n      />\n\n      <button ref={buttonRef}>Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OTP Input with React Hook Form\nDESCRIPTION: Examples showing two ways to integrate the OTP input with react-hook-form: using register directly or using the Controller component.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { register, handleSubmit } = useForm();\n// Then register it like a text input\n<InputOTP {...register(\"otp\")} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst { control } = useForm();\n// Then control it like a text input\n<Controller\n  name=\"customOTP\"\n  control={control}\n  defaultValue=\"\"\n  render={({ field }) => (\n    <OTPInput\n      {...field}\n      label=\"Custom OTP\"\n    />\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Auto-focusing OTP Input on Page Load\nDESCRIPTION: Implementation showing how to automatically focus the OTP input when the page loads using the autoFocus prop.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <form ref={formRef}>\n      <OTPInput\n        autoFocus\n        // Pro tip: accepts all common HTML input props...\n      />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paste Transformer for OTP Input\nDESCRIPTION: Example showing how to transform pasted content to match input requirements using the pasteTransformer prop.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<OTPInput\n  // Transform the pasted text to parse hyphens but remove hyphens,\n  // so it fits into the input's pattern and max length.\n  pasteTransformer={(pasted) => pasted.replaceAll('-', '')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Manager Blocking for OTP Input\nDESCRIPTION: Configuration example showing how to block specific password manager badges and customize the password manager strategy.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n<OTPInput\n  // First, disable library's built-in strategy\n  // for shifting badges automatically\n- pushPasswordManagerStrategy=\"increase-width\"\n+ pushPasswordManagerStrategy=\"none\"\n  // Then, manually add specifics attributes\n  // your password manager docs\n  // Example: block LastPass\n+ data-lpignore=\"true\" \n  // Example: block 1Password\n+ data-1p-ignore=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Caret Animation\nDESCRIPTION: Tailwind configuration for implementing a blinking caret animation in the OTP input component.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  theme: {\n    extend: {\n      keyframes: {\n        'caret-blink': {\n          '0%,70%,100%': { opacity: '1' },\n          '20%,50%': { opacity: '0' },\n        },\n      },\n      animation: {\n        'caret-blink': 'caret-blink 1.2s ease-out infinite',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Function for Class Name Merging\nDESCRIPTION: Utility function that combines clsx and tailwind-merge for handling class name combinations.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport type { ClassValue } from 'clsx'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OTP Input Package\nDESCRIPTION: Command to install the input-otp package using npm package manager.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install input-otp\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows you to run the project locally for development purposes.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/apps/website/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows you to run the application locally for development purposes.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/apps/test/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Storybook React Project\nDESCRIPTION: Commands to navigate to the project directory and install all required dependencies using yarn package manager.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/apps/storybook/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Navigate to the directory\ncd taskbox/\n\n# Install the dependencies\nyarn\n```\n\n----------------------------------------\n\nTITLE: Cloning the Storybook React Template with degit\nDESCRIPTION: Command to clone the Chromatic's intro-storybook-react-template using degit. This creates a new project directory called 'taskbox' with all necessary template files.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/apps/storybook/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Clone the template\nnpx degit chromaui/intro-storybook-react-template taskbox\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Assets in JSX\nDESCRIPTION: Imports necessary components from Storybook and SVG assets for use in the introduction page.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/apps/storybook/src/stories/Introduction.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\nimport Code from './assets/code-brackets.svg';\nimport Colors from './assets/colors.svg';\nimport Comments from './assets/comments.svg';\nimport Direction from './assets/direction.svg';\nimport Flow from './assets/flow.svg';\nimport Plugin from './assets/plugin.svg';\nimport Repo from './assets/repo.svg';\nimport StackAlt from './assets/stackalt.svg';\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Introduction Page Styles in CSS\nDESCRIPTION: Defines styles for various components of the Storybook introduction page, including responsive layouts and hover effects.\nSOURCE: https://github.com/guilhermerodz/input-otp/blob/master/apps/storybook/src/stories/Introduction.mdx#2025-04-12_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.subheading {\n  --mediumdark: '#999999';\n  font-weight: 700;\n  font-size: 13px;\n  color: #999;\n  letter-spacing: 6px;\n  line-height: 24px;\n  text-transform: uppercase;\n  margin-bottom: 12px;\n  margin-top: 40px;\n}\n\n.link-list {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 1fr;\n  row-gap: 10px;\n}\n\n@media (min-width: 620px) {\n  .link-list {\n    row-gap: 20px;\n    column-gap: 20px;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@media all and (-ms-high-contrast:none) {\n.link-list {\n    display: -ms-grid;\n    -ms-grid-columns: 1fr 1fr;\n    -ms-grid-rows: 1fr 1fr;\n  }\n}\n\n.link-item {\n  display: block;\n  padding: 20px;\n  border: 1px solid #00000010;\n  border-radius: 5px;\n  transition: background 150ms ease-out, border 150ms ease-out, transform 150ms ease-out;\n  color: #333333;\n  display: flex;\n  align-items: flex-start;\n}\n\n.link-item:hover {\n  border-color: #1EA7FD50;\n  transform: translate3d(0, -3px, 0);\n  box-shadow: rgba(0, 0, 0, 0.08) 0 3px 10px 0;\n}\n\n.link-item:active {\n  border-color: #1EA7FD;\n  transform: translate3d(0, 0, 0);\n}\n\n.link-item strong {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 2px;\n}\n\n.link-item img {\n  height: 40px;\n  width: 40px;\n  margin-right: 15px;\n  flex: none;\n}\n\n.link-item span,\n.link-item p {\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #E7FDD8;\n  color: #66BF3C;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper code {\n  font-size: 12px;\n  display: inline-block;\n}\n```"
  }
]