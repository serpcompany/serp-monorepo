[
  {
    "owner": "infinitered",
    "repo": "apisauce",
    "content": "TITLE: Making API Requests with Apisauce\nDESCRIPTION: This code snippet shows various ways to make API requests using Apisauce.  It demonstrates using different HTTP methods such as `get`, `head`, `delete`, `post`, `patch`, `put`, `link`, and `unlink`. It shows examples of how to pass URL parameters, request bodies, and custom headers.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napi.get('/repos/skellock/apisauce/commits')\napi.head('/me')\napi.delete('/users/69')\napi.post('/todos', { note: 'jump around' }, { headers: { 'x-ray': 'machine' } })\napi.patch('/servers/1', { live: false })\napi.put('/servers/1', { live: true })\napi.link('/images/my_dog.jpg', {}, { headers: { Link: '<http://example.com/profiles/joe>; rel=\"tag\"' } })\napi.unlink('/images/my_dog.jpg', {}, { headers: { Link: '<http://example.com/profiles/joe>; rel=\"tag\"' } })\napi.any({ method: 'GET', url: '/product', params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Initializing Apisauce API Client\nDESCRIPTION: This snippet demonstrates how to initialize an Apisauce API client using the `create` function.  It shows how to set the base URL and default headers for all requests made by the client.  The base URL is a required parameter, and headers are optional.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// showLastCommitMessageForThisLibrary.js\nimport { create } from 'apisauce'\n\n// define the api\nconst api = create({\n  baseURL: 'https://api.github.com',\n  headers: { Accept: 'application/vnd.github.v3+json' },\n})\n\n// start making calls\napi\n  .get('/repos/skellock/apisauce/commits')\n  .then(response => response.data[0].commit.message)\n  .then(console.log)\n\n// customizing headers per-request\napi.post('/users', { name: 'steve' }, { headers: { 'x-gigawatts': '1.21' } })\n```\n\n----------------------------------------\n\nTITLE: Creating Apisauce Instance with baseURL\nDESCRIPTION: This code snippet demonstrates creating an Apisauce instance with a base URL. The `baseURL` property specifies the starting point for all API requests.  It can include a sub-path and a port number. This is the only required property when creating the API.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = create({ baseURL: 'https://api.github.com' })\n```\n\n----------------------------------------\n\nTITLE: Creating Apisauce Instance with Headers\nDESCRIPTION: This code shows how to create an Apisauce instance with default headers. The `headers` property is an object containing key-value pairs that represent HTTP request headers. These headers will be included in all requests made with the instance.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = create({\n  baseURL: '...',\n  headers: {\n    'X-API-KEY': '123',\n    'X-MARKS-THE-SPOT': 'yarrrrr',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Apisauce\nDESCRIPTION: This code snippet demonstrates how to use async/await syntax with Apisauce for making API requests.  It simplifies the code and makes it more readable compared to using Promises directly.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = create({ baseURL: '...' })\nconst response = await api.get('/slowest/site/on/the/net')\nconsole.log(response.ok) // yay!\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers Dynamically\nDESCRIPTION: This code snippet demonstrates how to set and update HTTP request headers after the Apisauce instance has been created using `setHeader` and `setHeaders`. These changes persist for the lifetime of the API instance, allowing you to modify headers without changing the call sites.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napi.setHeader('Authorization', 'the new token goes here')\napi.setHeaders({\n  Authorization: 'token',\n  'X-Even-More': 'hawtness',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Request Transform\nDESCRIPTION: This example demonstrates how to add a request transform function to an Apisauce instance using `addRequestTransform`.  Request transforms allow you to modify the request configuration (e.g., headers, URL, data) before the request is sent. The `request` object can be mutated.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napi.addRequestTransform(request => {\n  request.headers['X-Request-Transform'] = 'Changing Stuff!'\n  request.params['page'] = 42\n  delete request.params.secure\n  request.url = request.url.replace(/\\/v1\\//, '/v2/')\n  if (request.data.password && request.data.password === 'password') {\n    request.data.username = `${request.data.username} is secure!`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL Dynamically\nDESCRIPTION: This snippet demonstrates how to change the base URL of an Apisauce instance after it has been created using `setBaseURL`. This is useful for switching between different API environments or endpoints at runtime. `getBaseURL` retrieves the current base URL.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napi.setBaseURL('https://some.other.place.com/api/v100')\nconsole.log(`omg i am now at ${api.getBaseURL()}`)\n```\n\n----------------------------------------\n\nTITLE: Adding Response Transform\nDESCRIPTION: This code demonstrates how to add a response transform function to an Apisauce instance using `addResponseTransform`. Response transforms allow you to modify the response data before it is returned to the caller.  The data property can be changed.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napi.addResponseTransform(response => {\n  const badluck = Math.floor(Math.random() * 10) === 0\n  if (badluck) {\n    // just mutate the data to what you want.\n    response.data.doorsOpen = false\n    response.data.message = 'I cannot let you do that.'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Apisauce Instance with Timeout\nDESCRIPTION: This snippet demonstrates setting a default timeout for all API requests made with the Apisauce instance. The `timeout` property specifies the number of milliseconds to wait for a response before timing out.  It is optional.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = create({ baseURL: '...', timeout: 30000 }) // 30 seconds\n```\n\n----------------------------------------\n\nTITLE: Adding Asynchronous Request Transform with AsyncStorage\nDESCRIPTION: This code shows how to add an asynchronous request transform function that fetches data from AsyncStorage.  It demonstrates how to use async/await to perform asynchronous operations before modifying the request.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napi.addAsyncRequestTransform(request => async () => {\n  await AsyncStorage.load('something')\n})\n```\n\n----------------------------------------\n\nTITLE: Canceling Request\nDESCRIPTION: This code demonstrates how to cancel request using `CancelToken` from `apisauce`. It imports the required dependencies and cancels the ongoing request.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CancelToken } from 'apisauce'\n\nconst source = CancelToken.source()\nconst api = create({ baseURL: 'github.com' })\napi.get('/users', {}, { cancelToken: source.token })\n\n// To cancel request\nsource.cancel()\n```\n\n----------------------------------------\n\nTITLE: Creating Apisauce Instance with Axios Instance\nDESCRIPTION: This example shows how to create an Apisauce instance using an existing Axios instance.  This allows for more customization of the underlying Axios client. You need to import `axios` and create an axios instance and pass it in `axiosInstance` config.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\nimport { create } from 'apisauce'\n\nconst customAxiosInstance = axios.create({ baseURL: 'https://example.com/api/v3' })\n\nconst apisauceInstance = create({ axiosInstance: customAxiosInstance })\n```\n\n----------------------------------------\n\nTITLE: Mocking API Calls with axios-mock-adapter\nDESCRIPTION: This code snippet demonstrates how to use `axios-mock-adapter` to mock API calls made with `apisauce`. It's important to use the `api.axiosInstance` when creating the mock adapter to ensure that the mocking library intercepts the requests made by Apisauce. The example shows how to mock a GET request and return a stubbed response.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nimport apisauce from 'apisauce'\nimport MockAdapter from 'axios-mock-adapter'\n\ntest('mock adapter', async () => {\n  const api = apisauce.create(\"https://api.github.com\")\n- const mock = new MockAdapter(axios)\n+ const mock = new MockAdapter(api.axiosInstance)\n  mock.onGet(\"/repos/skellock/apisauce/commits\").reply(200, {\n    commits: [{ id: 1, sha: \"aef849923444\" }],\n  });\n\n  const response = await api..get('/repos/skellock/apisauce/commits')\n  expect(response.data[0].sha).toEqual\"aef849923444\")\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Asynchronous Response Transform\nDESCRIPTION: This snippet shows how to add an asynchronous response transform function to an Apisauce instance using `addAsyncResponseTransform`. Asynchronous transforms allow you to perform asynchronous operations (like fetching data from local storage) before modifying the response data.  It is an async function that receives the response object.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\napi.addAsyncResponseTransform(async response => {\n  const something = await AsyncStorage.load('something')\n  if (something) {\n    // just mutate the data to what you want.\n    response.data.doorsOpen = false\n    response.data.message = 'I cannot let you do that.'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Asynchronous Request Transform with Timeout\nDESCRIPTION: This code snippet shows how to add an asynchronous request transform function that introduces a delay using `setTimeout`. It demonstrates how to use a Promise to ensure the transform completes before the request is sent.  The request object should be returned wrapped in a resolved promise.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napi.addAsyncRequestTransform(request => {\n  return new Promise(resolve => setTimeout(resolve, 2000))\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Response Monitor\nDESCRIPTION: This code shows how to add a monitor function to an Apisauce instance using `addMonitor`. Monitor functions are called for every API response, allowing you to inspect the response data and metadata. Exceptions within monitor functions are caught to prevent interrupting the request flow.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst naviMonitor = response => console.log('hey!  listen! ', response)\napi.addMonitor(naviMonitor)\n```\n\n----------------------------------------\n\nTITLE: Creating Apisauce Instance with Sub-Path\nDESCRIPTION: This code snippet illustrates creating an Apisauce instance with a base URL that includes a sub-path. The `baseURL` property specifies the starting point for all API requests. Apisauce uses this base URL for making requests to the specified endpoint.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = create({ baseURL: 'https://example.com/api/v3' })\n```\n\n----------------------------------------\n\nTITLE: Adding Exception Monitor\nDESCRIPTION: This code snippet adds a monitor that throws an exception to demonstrate that exceptions within monitor functions are caught by Apisauce. This prevents errors in monitors from disrupting the main request flow.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napi.addMonitor(response => this.kaboom())\n```\n\n----------------------------------------\n\nTITLE: Installing Apisauce Dependencies using Yarn\nDESCRIPTION: This command uses Yarn to install all the necessary dependencies for the Apisauce project, as specified in the `package.json` file. Yarn is a package manager for JavaScript.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Linter and TypeScript Compiler with Yarn\nDESCRIPTION: This command runs both the linter and the TypeScript compiler using Yarn. The linter checks the code for style and potential errors, while the TypeScript compiler compiles the TypeScript code into JavaScript.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn lint && yarn compile\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Yarn\nDESCRIPTION: This command executes the unit tests for the Apisauce project using Yarn. The tests are defined and configured in the project's `package.json` or a dedicated test configuration file.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing from Github Branch with Yarn\nDESCRIPTION: This command installs a package directly from a Git repository using Yarn.  `<git remote url>` should be replaced with the URL of the Git repository containing the desired branch.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn install <git remote url>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Apisauce Repository\nDESCRIPTION: This command is used to clone the forked Apisauce repository from GitHub to the local machine. Replace <YOURGITHUBUSER> with the actual GitHub username.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:<YOURGITHUBUSER>/apisauce.git\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Apisauce\nDESCRIPTION: This command changes the current working directory to the apisauce directory, which is typically the root directory of the cloned Apisauce repository.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd apisauce\n```\n\n----------------------------------------\n\nTITLE: Bypassing Git Hooks with --no-verify\nDESCRIPTION: This is not a code snippet, but an instruction. Adding `--no-verify` to a commit command bypasses the git hooks, such as linting and compilation, that are configured to run before a commit.\nSOURCE: https://github.com/infinitered/apisauce/blob/master/github/CONTRIBUTING.md#_snippet_6\n\n"
  }
]