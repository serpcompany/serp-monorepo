[
  {
    "owner": "idapython",
    "repo": "src",
    "content": "TITLE: Applying Function Prototype to Call Sites in IDAPython\nDESCRIPTION: This script loads a function declaration from a private type library, deserializes the type info, and applies it to the function's call sites. It uses APIs from ida_idaapi, ida_name, ida_typeinf, and idautils.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Producing C Listing for Entire File in IDA Python\nDESCRIPTION: This script automates IDA to perform auto-analysis on a file and produce a .c file containing the decompilation of all functions. It uses ida_auto.auto_wait and ida_hexrays.decompile_many to automate the process.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nida_auto.auto_wait\nida_hexrays.VDRUN_MAYSTOP\nida_hexrays.VDRUN_NEWFILE\nida_hexrays.VDRUN_SILENT\nida_hexrays.decompile_many\nida_loader.PATH_TYPE_IDB\nida_loader.get_path\nida_pro.qexit\n```\n\n----------------------------------------\n\nTITLE: Driving Debugging Session Programmatically in IDA Python\nDESCRIPTION: This snippet demonstrates how to programmatically drive a debugging session in IDA. It starts a debugging session, steps through the first five instructions, and disassembles each instruction after execution.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_dbg\nimport ida_ida\nimport ida_idaapi\nimport ida_lines\n\nclass MyDbgHook(ida_dbg.DBG_Hooks):\n    def __init__(self):\n        ida_dbg.DBG_Hooks.__init__(self)\n        self.steps = 0\n\n    def dbg_step_into(self):\n        print(\"stepped into\")\n        eip = ida_dbg.get_reg_val(\"EIP\")\n        disasm = ida_lines.generate_disasm_line(eip, 0)\n        print(f\"   \\\\--> {ida_lines.tag_remove(disasm)}\")\n        self.steps += 1\n        if self.steps >= 5:\n            ida_dbg.request_exit_process()\n        else:\n            ida_dbg.request_step_over()\n        return 0\n\ndbg = MyDbgHook()\ndbg.hook()\n\nstart = ida_ida.inf_get_start_ip()\nida_dbg.request_run_to(start if start != ida_idaapi.BADADDR else ida_ida.inf_get_min_ea())\nida_dbg.run_requests()\n\nprint(\"All done... Exiting\")\nida_pro.qexit(0)\n```\n\n----------------------------------------\n\nTITLE: Creating Structure by Parsing Definition in IDA Python\nDESCRIPTION: This script demonstrates the usage of the type API in IDA Python to create a structure by parsing its definition. It shows how to use the tinfo_t class to define and manipulate types.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_typeinf\n\ndef main():\n    ti = ida_typeinf.tinfo_t()\n    decl = \"struct my_struct { int x; int y; char c; };\"\n    if ti.get_type_from_c(decl):\n        print(f\"Type info: {ti._print()}\")\n        print(f\"Type name: {ti.dstr()}\")\n        print(f\"Type size: {ti.get_size()} bytes\")\n    else:\n        print(\"Failed to parse type declaration\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating a Segment and Defining Complex Data in IDAPython\nDESCRIPTION: This script shows how to create a data segment, set its type and name for a user shared data region in an ntdll IDB. It loads a data type from a type info library, creates a segment, and applies the type to the segment's base address.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Assigning DOS/PE Header Structures in IDAPython\nDESCRIPTION: This script demonstrates loading a PE64 file in binary mode, importing types from the mssdk64 type library, applying these types at the correct offsets, and rebasing the program based on the ImageBase field of the IMAGE_OPTIONAL_HEADER64.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_68\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Finding Best Fit Member in Variable Sized Structures with IDAPython\nDESCRIPTION: This script provides a way to determine which structure member is most likely referenced by an offset, even for variable sized types. It uses tinfo_t and udt_type_data_t from the ida_typeinf module.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Structure in IDAPython\nDESCRIPTION: This script demonstrates how to create a union structure by building it member by member using the IDA Pro Type API. It utilizes various BTF (Basic Type Flags) and NTF (Named Type Flags) constants.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Executing Code in Debugged Application (Linux) using IDA Python\nDESCRIPTION: This example demonstrates using the ida_idd.Appcall utility to execute code in the process being debugged on Linux. It runs the test program, stops at a specified point, and performs an appcall to execute functions.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_dbg\nimport ida_idd\nimport ida_kernwin\nimport ida_name\nimport ida_typeinf\n\nclass MyDbgHook(ida_dbg.DBG_Hooks):\n    def dbg_bpt(self, tid, ea):\n        print(f\"Break at {ea:#x}\")\n        ref4 = ida_idd.Appcall.proto(\"ref4\", \"int __cdecl ref4(int *);\")\n        ref8 = ida_idd.Appcall.proto(\"ref8\", \"__int64 __cdecl ref8(__int64 *);\")\n        \n        v4 = ida_idd.Appcall.int_(0x12345678)\n        r = ref4(ida_idd.Appcall.byref(v4))\n        print(f\"ref4() returned {r:#x}, v4={v4.value:#x}\")\n        \n        v8 = ida_idd.Appcall.int64(0x1234567887654321)\n        r = ref8(ida_idd.Appcall.byref(v8))\n        print(f\"ref8() returned {r:#x}, v8={v8.value:#x}\")\n        \n        return 0\n\ndbg = MyDbgHook()\ndbg.hook()\n\nea = ida_kernwin.get_screen_ea()\nif ea == ida_idaapi.BADADDR:\n    ida_kernwin.warning(\"Please position the cursor within the function you want to use as the breaking point\")\nelse:\n    ida_dbg.run_to(ea)\n\nprint(\"All done... Unhooking\")\ndbg.unhook()\n```\n\n----------------------------------------\n\nTITLE: Listing Database Function Prototypes in IDAPython\nDESCRIPTION: This script demonstrates how to list a function's return type along with its parameter types and names for all functions in the database. It uses ida_funcs.get_func and idautils.Functions APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Marking Registers as Spoiled by a Function in IDAPython\nDESCRIPTION: This script demonstrates how to indicate that a function spoils registers by modifying the tinfo_t object directly. It uses various APIs from ida_funcs, ida_idp, ida_kernwin, ida_nalt, and ida_typeinf.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Decompiling and Printing Current Function in IDA Python\nDESCRIPTION: This snippet decompiles the function under the cursor in IDA. It uses ida_funcs.get_func to get the current function and ida_hexrays.decompile to perform the decompilation.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nida_funcs.get_func\nida_hexrays.decompile\nida_hexrays.get_hexrays_version\nida_hexrays.init_hexrays_plugin\nida_kernwin.get_screen_ea\nida_lines.tag_remove\n```\n\n----------------------------------------\n\nTITLE: Enumerating File Imports in IDAPython\nDESCRIPTION: Demonstrates how to use the IDA Pro API to enumerate file imports. It shows how to iterate through import modules and their associated imported functions or data.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to list_imports.py\n```\n\n----------------------------------------\n\nTITLE: Dumping Statement Blocks in IDA Python\nDESCRIPTION: This script uses a ida_hexrays.ctree_visitor_t to search for ida_hexrays.cit_block instances and dump them. It demonstrates how to traverse and analyze the control tree in decompiled code.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nida_hexrays.CMAT_BUILT\nida_hexrays.CV_FAST\nida_hexrays.Hexrays_Hooks\nida_hexrays.cit_block\nida_hexrays.ctree_visitor_t\nida_hexrays.init_hexrays_plugin\n```\n\n----------------------------------------\n\nTITLE: Listing Stack Variable Cross-References in IDAPython\nDESCRIPTION: This script shows how to list cross-references for each stack variable in a function. It retrieves the function and frame objects, then builds and prints the stack variable xref list for each frame element.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Interactively Colorizing Pseudocode Lines in IDA Python\nDESCRIPTION: This script provides an action to dynamically alter the background rendering of pseudocode lines. It uses UI_Hooks and custom action handlers to implement the coloring functionality, demonstrating advanced UI customization in IDA.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nida_hexrays.get_widget_vdui\nida_kernwin.AST_DISABLE_FOR_WIDGET\nida_kernwin.AST_ENABLE_FOR_WIDGET\nida_kernwin.BWN_PSEUDOCODE\nida_kernwin.CK_EXTRA11\nida_kernwin.UI_Hooks\nida_kernwin.action_desc_t\nida_kernwin.action_handler_t\nida_kernwin.get_custom_viewer_location\nida_kernwin.line_rendering_output_entry_t\nida_kernwin.refresh_custom_viewer\nida_kernwin.register_action\nida_moves.lochist_entry_t\n```\n\n----------------------------------------\n\nTITLE: Listing Cross-references to a Structure in IDAPython\nDESCRIPTION: This script demonstrates how to list all references to a user-specified structure. It uses ida_kernwin.choose_struct, ida_typeinf.tinfo_t, and ida_xref.xrefblk_t APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Automatically Decompiling Entrypoints in IDA Python\nDESCRIPTION: This script loads a decompiler plugin for the current architecture after auto-analysis and attempts to decompile the function at the first entrypoint. It's designed for use with IDA's -S flag for automated decompilation tasks.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nida_auto.auto_wait\nida_entry.get_entry\nida_entry.get_entry_ordinal\nida_entry.get_entry_qty\nida_hexrays.decompile\nida_hexrays.init_hexrays_plugin\nida_idp.PLFM_386\nida_idp.PLFM_ARM\nida_idp.PLFM_MIPS\nida_idp.PLFM_PPC\nida_idp.PLFM_RISCV\nida_idp.ph.id\nida_kernwin.cvar.batch\nida_kernwin.msg\nida_loader.load_plugin\nida_pro.qexit\nidc.get_idb_path\n```\n\n----------------------------------------\n\nTITLE: Listing Stack Variable Cross-References in IDAPython\nDESCRIPTION: This script demonstrates how to list cross-references to function stack variables, which requires more work than standard memory or code xrefs. It uses various IDA Pro APIs to analyze and list these references.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_65\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Enumerating Patched Bytes in IDAPython\nDESCRIPTION: Uses the IDA Pro API to iterate over all locations in the file that were patched using IDA. It demonstrates how to identify and process modified bytes in the disassembly.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to list_patched_bytes.py\n```\n\n----------------------------------------\n\nTITLE: Dumping Function Flowchart in IDAPython\nDESCRIPTION: Demonstrates two methods to dump the current function's flowchart: using the low-level ida_gdl.qflow_chart_t type and the higher-level ida_gdl.FlowChart type. It shows how to traverse and analyze function control flow.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to dump_flowchart.py\n```\n\n----------------------------------------\n\nTITLE: Modifying Structure Member Attributes in IDAPython\nDESCRIPTION: This example shows how to access and modify less-obvious attributes of structure members, such as pointer size and representation. It demonstrates creating a structure and then programmatically modifying its members.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Creating Array Types in IDAPython\nDESCRIPTION: This script demonstrates how to create array types using both versions of the create_array tinfo_t method. It uses ida_typeinf.BTF_INT, array_type_data_t, and tinfo_t APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Reacting to Trace Notifications in IDA Python\nDESCRIPTION: This script demonstrates using the low-level tracing hook (ida_dbg.DBG_Hooks.dbg_trace) in IDA Python. It sets up tracing options and reacts to trace events during debugging.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_dbg\nimport ida_ida\nimport ida_ua\nimport ida_lines\n\nclass MyDbgHook(ida_dbg.DBG_Hooks):\n    def dbg_trace(self, tid, ip):\n        insn = ida_ua.insn_t()\n        if ida_ua.decode_insn(insn, ip) > 0:\n            disasm = ida_lines.generate_disasm_line(ip, GENDSM_FORCE_CODE)\n            print(f\"{ip:#x}: {ida_lines.tag_remove(disasm, GENDSM_REMOVE_TAGS)}\")\n            if insn.itype in [NN_call, NN_callfi, NN_callni]:\n                print(\"  (call)\")\n        return 0\n\ndbg = MyDbgHook()\ndbg.hook()\n\nida_dbg.enable_step_trace(True)\nopts = ida_dbg.get_step_trace_options()\nopts |= ST_OVER_DEBUG_SEG | ST_OVER_LIB_FUNC\nida_dbg.set_step_trace_options(opts)\n\nstart = ida_ida.inf_get_start_ip()\nida_dbg.run_to(start if start != ida_idaapi.BADADDR else ida_ida.inf_get_min_ea())\n\nwhile ida_dbg.get_process_state() != -1:\n    ida_dbg.wait_for_next_event(WFNE_SUSP, -1)\n\nprint(\"All done... Exiting\")\nida_pro.qexit(0)\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Complex Structures in IDAPython\nDESCRIPTION: This script demonstrates how to create and populate a structure with members of different types using the IDAPython Types API. It uses a wide range of ida_typeinf APIs for working with various data types.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Printing Function Stack Frame Information in IDA Python\nDESCRIPTION: This script demonstrates how to retrieve and print information about a function's stack frame using IDA Python's type API. It gets the function frame structure and iterates over the frame members.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_funcs\nimport ida_frame\nimport ida_kernwin\n\ndef main():\n    ea = ida_kernwin.get_screen_ea()\n    func = ida_funcs.get_func(ea)\n    if not func:\n        print(\"No function at cursor\")\n        return\n    \n    frame = ida_frame.get_frame(func)\n    if not frame:\n        print(\"Function has no frame\")\n        return\n    \n    print(f\"Frame information for function at {ea:#x}:\")\n    print(f\"  Size: {frame.size()} bytes\")\n    print(\"  Members:\")\n    for i in range(frame.memqty):\n        member = frame.get_member(i)\n        print(f\"    Offset {member.soff}: {ida_frame.get_member_name(member.id)} (size: {member.eoff - member.soff})\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Notifying User of Instruction Operand Changes in IDA Python\nDESCRIPTION: This script shows notifications when a user changes an instruction's operand or a data item in IDA. It uses IDB_Hooks and various ida_bytes and ida_nalt APIs to detect and analyze changes to operands and data items.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nida_bytes.ALOPT_IGNCLT\nida_bytes.ALOPT_IGNHEADS\nida_bytes.get_flags\nida_bytes.get_max_strlit_length\nida_bytes.get_opinfo\nida_bytes.get_strlit_contents\nida_bytes.is_custfmt\nida_bytes.is_custom\nida_bytes.is_enum\nida_bytes.is_off\nida_bytes.is_strlit\nida_bytes.is_stroff\nida_bytes.is_struct\nida_idp.IDB_Hooks\nida_nalt.STRENC_DEFAULT\nida_nalt.get_default_encoding_idx\nida_nalt.get_encoding_name\nida_nalt.get_str_encoding_idx\nida_nalt.get_strtype_bpu\nida_nalt.opinfo_t\nida_typeinf.get_tid_name\nida_typeinf.tinfo_t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Structure Member Path Information in IDA Python\nDESCRIPTION: This snippet demonstrates how to programmatically retrieve information about the 'structure member path' that an operand points to in IDA. It uses APIs like ida_bytes.get_stroff_path and ida_typeinf.tinfo_t to analyze structure offsets and types.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nida_bytes.get_full_flags\nida_bytes.get_stroff_path\nida_bytes.is_stroff\nida_typeinf.get_tid_name\nida_typeinf.tinfo_t\nida_ua.decode_insn\nida_ua.insn_t\nida_ua.o_imm\nida_ua.o_void\n```\n\n----------------------------------------\n\nTITLE: Creating Structures Programmatically in IDAPython\nDESCRIPTION: This script shows how to create a structure by building it member by member using the IDAPython Types API. It uses various ida_typeinf APIs including tinfo_t and udt_type_data_t.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Dumping Current Selection in IDAPython\nDESCRIPTION: Shows how to retrieve the selection from various IDA Pro widgets (e.g., IDA View, Hex View, Pseudocode) as two cursors and generate the corresponding text. It implements a custom action to dump the selection.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to dump_selection.py\n```\n\n----------------------------------------\n\nTITLE: Listing Enumeration Members in IDA Python\nDESCRIPTION: This example demonstrates how to retrieve and print the members of an enumeration in IDA. It prompts the user for the name of an enumeration and then iterates through its members.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_enum\nimport ida_kernwin\n\ndef main():\n    enum_name = ida_kernwin.ask_str(\"\", 0, \"Enter enumeration name\")\n    if not enum_name:\n        print(\"No enumeration name provided\")\n        return\n    \n    enum_id = ida_enum.get_enum(enum_name)\n    if enum_id == ida_idaapi.BADADDR:\n        print(f\"Enumeration '{enum_name}' not found\")\n        return\n    \n    print(f\"Members of enumeration '{enum_name}':\")\n    for i in range(ida_enum.get_enum_size(enum_id)):\n        member_name = ida_enum.get_enum_member_name(enum_id, i)\n        member_value = ida_enum.get_enum_member_value(enum_id, i)\n        print(f\"  {member_name} = {member_value}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Listing Structure Members using IDAPython Types API\nDESCRIPTION: This script asks for a structure name, retrieves its type info from local types, extracts type details, and iterates through its members to print their names. It uses ida_kernwin, ida_typeinf APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Listing Union Members using IDAPython Types API\nDESCRIPTION: This script asks for a union name, retrieves its type info, extracts type details, and iterates through its members to print their names. It uses ida_kernwin and ida_typeinf APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Creating Type Objects with tinfo_t Constructor\nDESCRIPTION: Creates a type object with various initialization options: from a simple type, from a C declaration string, or using named arguments for ordinal or type name. Raises an exception if data is invalid or parsing fails.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t(type: type_t) : tinfo_t\ntinfo_t(decl: str, til: til_t = None, pt_flags: int = 0) : tinfo_t\ntinfo_t(**kwargs) : tinfo_t\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Decompiler Hints in IDA Python\nDESCRIPTION: This script handles the ida_hexrays.hxe_create_hint notification to provide custom hints for function calls, local variable declarations, and if statements in decompiled code. It uses Hexrays_Hooks to intercept and modify hint creation.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nida_hexrays.Hexrays_Hooks\nida_hexrays.USE_MOUSE\nida_hexrays.VDI_EXPR\nida_hexrays.VDI_LVAR\nida_hexrays.cit_if\nida_hexrays.cot_call\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command-Line Interpreter in IDAPython\nDESCRIPTION: Demonstrates how to add a custom command-line interpreter to IDA Pro. The example includes tab completion support but doesn't execute actual code. It uses IDA Pro's notification system and CLI interface.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to custom_cli.py\n```\n\n----------------------------------------\n\nTITLE: Drawing Custom Graphs with Actions in IDAPython\nDESCRIPTION: Illustrates how to create custom graphs using ida_graph.GraphViewer and implement actions that can be performed on these graphs. It includes functionality for function analysis and cross-references.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to custom_graph_with_actions.py\n```\n\n----------------------------------------\n\nTITLE: Printing Call Stack for Linux Debugging in IDA Python\nDESCRIPTION: This snippet demonstrates how to print the return addresses from the call stack at a breakpoint when debugging a Linux binary. It uses IDA Python APIs to collect stack trace information and retrieve module details.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_dbg\nimport ida_idd\nimport ida_kernwin\nimport ida_name\n\ndef print_call_stack():\n    trace = ida_dbg.call_stack_t()\n    ida_dbg.collect_stack_trace(ida_dbg.get_current_thread(), trace)\n    for frame in trace:\n        ea = frame.caller\n        name = ida_name.get_nice_colored_name(ea, ida_name.GNCN_NOCOLOR | ida_name.GNCN_NOSEG | ida_name.GNCN_NOLABEL | ida_name.GNCN_PREFDBG)\n        modinfo = ida_idd.modinfo_t()\n        if ida_dbg.get_module_info(ea, modinfo):\n            print(f\"{ea:#x} {name} ({modinfo.name})\")\n        else:\n            print(f\"{ea:#x} {name}\")\n\nida_kernwin.register_action(\n    ida_kernwin.action_desc_t(\n        \"print_call_stack\",\n        \"Print call stack\",\n        print_call_stack,\n        \"Shift+C\",\n        \"Print the call stack\",\n        -1))\n\nprint(\"Shift+C to print call stack\")\n```\n\n----------------------------------------\n\nTITLE: Generating Microcode for Selected Instructions in IDA Python\nDESCRIPTION: This script generates microcode for a selected range of instructions and dumps it to the output window. It uses ida_hexrays.gen_microcode and ida_kernwin.read_range_selection to process the selected instructions.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nida_bytes.get_flags\nida_bytes.is_code\nida_hexrays.DECOMP_WARNINGS\nida_hexrays.gen_microcode\nida_hexrays.hexrays_failure_t\nida_hexrays.init_hexrays_plugin\nida_hexrays.mba_ranges_t\nida_hexrays.vd_printer_t\nida_kernwin.read_range_selection\nida_kernwin.warning\nida_range.range_t\n```\n\n----------------------------------------\n\nTITLE: Importing Types from Type Libraries in IDAPython\nDESCRIPTION: This script shows how to load a type library from a file and import a specific type from it. It uses ida_kernwin for user interaction and ida_typeinf for type library operations.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Manipulating Disassembly and Graph Widgets in IDAPython\nDESCRIPTION: Illustrates how to programmatically manipulate existing IDA-provided views and their associated graphs using Python. It demonstrates various graph and view manipulation techniques.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to wrap_idaview.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-Loaded Tree-like Data View in IDAPython\nDESCRIPTION: Creates a lazy-loaded, tree-like tabular view using IDA Pro's Choose class. It demonstrates how to implement folder-based lazy loading in custom data views.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to lazy_loaded_chooser.py\n```\n\n----------------------------------------\n\nTITLE: Inserting Information into Listing Prefixes in IDAPython\nDESCRIPTION: Shows how to inject custom information into disassembly line prefixes using the ida_lines.user_defined_prefix_t helper type. This allows for adding custom data to the standard segment and address information in the listing.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to install_user_defined_prefix.py\n```\n\n----------------------------------------\n\nTITLE: Custom IDA Listings with Action Bindings\nDESCRIPTION: Demonstrates creation of custom listing viewers with features like highlighting, copy/paste and notifications. Includes binding of custom actions to the viewer context menu.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Injecting Commands in Output Window using IDAPython and PyQt\nDESCRIPTION: Demonstrates how to execute commands in IDA Pro's Output window from custom widgets. It uses PyQt for UI manipulation and IDA's action processing system to inject commands.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to inject_command.py\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Action to Registers Widget in IDA Python\nDESCRIPTION: This example shows how to add a custom action to the context menu of registers-displaying widgets in IDA. It uses IDA Python APIs to interact with the debugger and UI elements.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_kernwin\nimport ida_dbg\nimport ida_ua\nimport ida_idd\n\nclass show_reg_as_handler_t(ida_kernwin.action_handler_t):\n    def __init__(self, reg_name, dt):\n        ida_kernwin.action_handler_t.__init__(self)\n        self.reg_name = reg_name\n        self.dt = dt\n\n    def activate(self, ctx):\n        rv = ida_dbg.regval_t()\n        if ida_dbg.get_reg_val(self.reg_name, rv):\n            v = rv.ival\n            print(f\"{self.reg_name} = {v:#x}\")\n            if self.dt == ida_ua.dt_byte: print(f\"  as byte: {v & 0xFF}\")\n            elif self.dt == ida_ua.dt_word: print(f\"  as word: {v & 0xFFFF}\")\n            elif self.dt == ida_ua.dt_dword: print(f\"  as dword: {v & 0xFFFFFFFF}\")\n            elif self.dt == ida_ua.dt_qword: print(f\"  as qword: {v & 0xFFFFFFFFFFFFFFFF}\")\n        return 1\n\n    def update(self, ctx):\n        return ida_kernwin.AST_ENABLE_FOR_WIDGET if ctx.widget_type == ida_kernwin.BWN_CPUREGS else ida_kernwin.AST_DISABLE_FOR_WIDGET\n\nclass registers_hooks_t(ida_kernwin.UI_Hooks):\n    def finish_populating_widget_popup(self, widget, popup):\n        if ida_kernwin.get_widget_type(widget) == ida_kernwin.BWN_CPUREGS:\n            for reg in ida_dbg.dbg_get_registers():\n                name = reg.name\n                rv = ida_idd.register_info_t()\n                if ida_dbg.get_dbg_reg_info(name, rv):\n                    size = rv.size\n                    dt = ida_ua.dt_byte if size == 1 else ida_ua.dt_word if size == 2 else ida_ua.dt_dword if size == 4 else ida_ua.dt_qword\n                    actname = f\"show_reg_as:{name}:{dt}\"\n                    desc = ida_kernwin.action_desc_t(actname, f\"Show {name} as {size}-byte value\", show_reg_as_handler_t(name, dt))\n                    ida_kernwin.register_action(desc)\n                    ida_kernwin.attach_action_to_popup(widget, popup, actname)\n\nregisters_hooks = registers_hooks_t()\nregisters_hooks.hook()\nprint(\"Installed registers context menu\")\n```\n\n----------------------------------------\n\nTITLE: Creating Type Library Files in IDAPython\nDESCRIPTION: This script creates a new libssh2-64.til file containing some libssh2 64-bit structures. It demonstrates the use of various ida_typeinf APIs for working with type libraries.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Tabular Data Display in IDA Python\nDESCRIPTION: Example of subclassing ida_kernwin.Choose to display data in table format with support for editing, deletion and refresh actions. Includes context menu integration.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Adding Member to Structure/Union Type\nDESCRIPTION: Adds a new member to a structure/union type with specified name, type, and optional offset. Size is computed automatically. The new member must not overlap with existing members. Returns the member object.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.add_udm(name: str, type: tinfo_t | type_t | str, offset: int = -1)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Structure/Union Member by Offset\nDESCRIPTION: Gets a structure or union member and its index by bit offset from a tinfo_t object. Returns a tuple containing the index and member object, or (-1, None) if no member is found at the specified offset.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.get_udm_by_offset(offset: int) : (idx, udm_t) | (-1, None)\n```\n\n----------------------------------------\n\nTITLE: Creating Dockable Qt Widget Container in IDA Python\nDESCRIPTION: Demonstrates how to create a dockable container and populate it with PyQt widgets using ida_kernwin.PluginForm.FormToPyQtWidget.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass MyPluginForm(ida_kernwin.PluginForm):\n    def OnCreate(self, form):\n        self.parent = self.FormToPyQtWidget(form)\n        # Add PyQt widgets to self.parent\n```\n\n----------------------------------------\n\nTITLE: Assigning Shortcut to Custom Function in IDA Python\nDESCRIPTION: Demonstrates how to use ida_kernwin.add_hotkey to assign a keyboard shortcut to a custom function in IDA. This method is simpler but less flexible than register_action.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nida_kernwin.add_hotkey(\"Ctrl+Alt+F\", my_function)\nida_kernwin.del_hotkey(\"Ctrl+Alt+F\")\n```\n\n----------------------------------------\n\nTITLE: Generating Named Types from Type Library\nDESCRIPTION: Returns a generator that yields tinfo_t objects for all named types in a type library. Each iteration creates a fresh tinfo_t object.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntil_t.named_types() : generator of tinfo_t\n```\n\n----------------------------------------\n\nTITLE: Colorizing Disassembly in IDA using IDA Python\nDESCRIPTION: Illustrates how to set and retrieve background colors for specific address ranges, functions, or segments using IDC wrappers.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nidc.set_color(ea, idc.CIC_ITEM, 0x0000FF)\ncolor = idc.get_color(ea, idc.CIC_FUNC)\n```\n\n----------------------------------------\n\nTITLE: Preventing Action Trigger in IDA Python\nDESCRIPTION: Uses ida_kernwin.UI_Hooks.preprocess_action to intercept and prevent specific actions from being triggered in IDA.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass MyUiHooks(ida_kernwin.UI_Hooks):\n    def preprocess_action(self, name):\n        if name == \"JumpAsk\":\n            print(\"Preventing jump\")\n            return 1\n        return 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Innermost Member of Nested Structures in IDAPython\nDESCRIPTION: This sample demonstrates how to \"drill down\" into nested structures to retrieve the innermost member at a given offset. It uses the ida_typeinf module to parse and analyze structure definitions.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_62\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Creating Function Argument with funcarg_t Constructor\nDESCRIPTION: Creates a function argument with specified name, type, and optional argument location. The type can be a simple type (type_t), complex type (tinfo_t), or a C declaration string.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfuncarg_t(name: str, type: tinfo_t | type_t | str, argloc: argloc_t = argloc_t())\n```\n\n----------------------------------------\n\nTITLE: Generating Numbered Types from Type Library\nDESCRIPTION: Returns a generator that yields tinfo_t objects for all numbered types in a type library. Each iteration creates a fresh tinfo_t object.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntil_t.numbered_types() : generator of tinfo_t\n```\n\n----------------------------------------\n\nTITLE: Retrieving Structure/Union Member by Name\nDESCRIPTION: Gets a structure or union member and its index by name from a tinfo_t object. Returns a tuple containing the index and member object, or (-1, None) if the member is not found.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.get_udm_by_name(name: str) : (idx, udm_t) | (-1, None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Type from Type Library\nDESCRIPTION: Gets a tinfo_t object representing a named type from a type library. Returns None if the type is not found.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntil_t.get_named_type(name: str) : tinfo_t | None\n```\n\n----------------------------------------\n\nTITLE: Mergeable Plugin with Address-Specific Data\nDESCRIPTION: Implements a simple plugin that stores user-provided data for specific addresses. Includes merge functionality to handle data conflicts between databases.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_71\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_idaapi\nimport ida_merge\nimport ida_netnode\n\nclass MyPlugin(ida_idaapi.plugin_t):\n    flags = ida_idaapi.PLUGIN_MOD | ida_idaapi.PLUGIN_MULTI\n    wanted_name = \"My Plugin\"\n    \n    def init(self):\n        self.netnode = ida_netnode.netnode(\"$ my_plugin\", 0, True)\n        return ida_idaapi.PLUGIN_OK\n    \n    def run(self, arg):\n        # Plugin logic here\n        pass\n    \n    def term(self):\n        pass\n\nclass MyPluginData(ida_merge.merge_node_info_t):\n    def __init__(self):\n        ida_merge.merge_node_info_t.__init__(self)\n        self.nid = ida_netnode.BADNODE\n        self.tag = ida_netnode.atag\n    \n    def get_info(self):\n        return [ida_merge.NDS_IS_STR | ida_merge.NDS_MAP_IDX]\n    \n    def get_node(self):\n        return self.nid\n\ndef PLUGIN_ENTRY():\n    return MyPlugin()\n```\n\n----------------------------------------\n\nTITLE: Creating Structure/Union Members with udm_t Constructor\nDESCRIPTION: Creates a structure or union member with specified name, type, and offset. The type can be a simple type (type_t), complex type (tinfo_t), or a C declaration string. Size is computed automatically.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nudm_t(name: str, type, offset: int = -1) : udm_t\n```\n\n----------------------------------------\n\nTITLE: Progress Dialog Operations in IDA Python\nDESCRIPTION: Demonstrates usage of IDA's progress dialog (wait box) primitives including showing, updating and hiding the dialog. Uses core APIs like show_wait_box, replace_wait_box and hide_wait_box.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Inserting Structure Members in IDAPython\nDESCRIPTION: This sample retrieves a type info object by name, finds a member at a specified offset, and inserts a new member before it. It uses the tinfo_t class and various constants from ida_typeinf.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Detecting Structure Gaps and Alignment in IDAPython\nDESCRIPTION: This script illustrates methods to detect gaps and alignments in structures from a structure name and byte offset. It uses the ida_range.rangeset_t API for this purpose.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_60\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Using Timers for Delayed Execution in IDA Python\nDESCRIPTION: Shows how to register and use timers for delayed or repeating execution of functions in IDA.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef timer_callback():\n    print(\"Timer fired!\")\n    return -1  # To stop the timer\n\nida_kernwin.register_timer(1000, timer_callback)\n```\n\n----------------------------------------\n\nTITLE: Adding Enumerator to Enumeration\nDESCRIPTION: Adds an enumerator to an enumeration type. Provides two overloaded forms: adding an edm_t object directly or creating one from name and value. Additional parameters control bitmask, flags, and insertion index.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.add_edm(name: str, value: int)\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmask Enumerations in IDAPython\nDESCRIPTION: This script demonstrates how to create a bitmask enumeration member by member using the IDAPython Types API. It uses ida_typeinf.BTE_BITMASK, BTE_HEX, and tinfo_t APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Creating Bitfield Structures in IDAPython\nDESCRIPTION: This script creates a bitfield structure with three members spanning an int32, and adds repeatable comments for each member. It uses ida_typeinf.tinfo_t, udm_t, and udt_type_data_t APIs.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\n# Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Intercept Structure Field Access using SWIG Property\nDESCRIPTION: Pattern for intercepting structure field access by ignoring direct access and implementing custom getter/setter methods with a Python property.\nSOURCE: https://github.com/idapython/src/blob/master/docs/howto/swig.md#2025-04-22_snippet_3\n\nLANGUAGE: swig\nCODE:\n```\n%ignore idainfo::lflags;\n\n%extend idainfo\n{\n  // ...\n  uint32 _get_lflags() const { return $self->lflags; }\n  void _set_lflags(uint32 _f)\n  {\n    // do the job here\n  }\n\n  %pythoncode {\n    lflags = property(_get_lflags, _set_lflags)\n```\n\n----------------------------------------\n\nTITLE: IDB to I64 Conversion Plugin\nDESCRIPTION: Adds 64-bit conversion capabilities to custom plugins. Handles conversion of address-related data between 32-bit and 64-bit databases.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_70\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_idaapi\nimport ida_netnode\n\ndef cvt64_node(nid):\n    n = ida_netnode.netnode(nid)\n    # Convert 32-bit addresses to 64-bit\n    for tag in (ida_netnode.atag, ida_netnode.stag, ida_netnode.htag):\n        for idx in n.get(tag):\n            val = n.valobj(idx, tag)\n            if isinstance(val, int) and val != ida_idaapi.BADADDR32:\n                n.set(idx, ida_idaapi.BADADDR if val == ida_idaapi.BADADDR32 else val, tag)\n```\n\n----------------------------------------\n\nTITLE: Deleting Structure Members within Offset Range in IDA Python\nDESCRIPTION: This script demonstrates how to use the type API in IDA Python to create a structure with many members and then remove all those that fall within a specified range. It uses the tinfo_t and udm_t classes.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_typeinf\n\ndef main():\n    ti = ida_typeinf.tinfo_t()\n    decl = \"struct my_struct { int a; int b; int c; int d; int e; int f; };\"\n    if ti.get_type_from_c(decl) != ida_typeinf.TERR_OK:\n        print(\"Failed to parse type declaration\")\n        return\n    \n    print(f\"Original structure: {ti._print()}\")\n    \n    udt = ida_typeinf.udm_t()\n    if ti.get_udt_details(udt):\n        udt.delete_members(8, 16)  # Delete members from offset 8 to 16\n        ti.create_udt(udt, ida_typeinf.STRMEM_OFFSET)\n        print(f\"Modified structure: {ti._print()}\")\n    else:\n        print(\"Failed to get UDT details\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Iterating Structure or Union Members\nDESCRIPTION: Creates a generator to iterate through all members of a structure or union type. Each iteration yields a udm_t object. Raises an exception if the type is neither a structure nor a union.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.iter_udt() : generator of udm_t\n```\n\n----------------------------------------\n\nTITLE: Painting Text on Graph View Edges in IDAPython\nDESCRIPTION: Registers an action to paint text on horizontal edges in graph disassembly and proximity browser views. It uses an event filter to intercept paint events and add custom markers.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, refer to paint_over_graph.py\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Mode IDA Commands\nDESCRIPTION: Command line options for running IDA in batch mode with Python scripts. Supports different script execution formats with optional arguments.\nSOURCE: https://github.com/idapython/src/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n-A -OIDAPython:yourscript.py file_to_work_on\n```\n\nLANGUAGE: sh\nCODE:\n```\n-Syourscript.py\n```\n\nLANGUAGE: sh\nCODE:\n```\n-S\"yourscript.py arg1 arg2 arg3\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Line Colorization in IDA Views\nDESCRIPTION: Shows techniques for dynamically altering line background colors and limiting rendering changes to specific glyphs rather than whole lines.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Creating SWiG Interface File for New Module\nDESCRIPTION: Template for creating a new SWiG interface file that includes the corresponding C++ header.\nSOURCE: https://github.com/idapython/src/blob/master/HOWTO.md#2025-04-22_snippet_1\n\nLANGUAGE: swig\nCODE:\n```\n%{\n#include <zzz.hpp>\n%}\n%include \"zzz.hpp\"\n```\n\n----------------------------------------\n\nTITLE: Custom Actions with Icons & Tooltips in IDA Python\nDESCRIPTION: Shows how to create custom user actions that can be added to menus, toolbars and context menus. Actions receive context information and can control their availability state through update callbacks.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Customizing Function Chooser Colors in IDA Python\nDESCRIPTION: Overrides the default \"Functions\" chooser colors by implementing a custom UI_Hooks.get_chooser_item_attrs method to color functions based on their size.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass MyUiHooks(ida_kernwin.UI_Hooks):\n    def get_chooser_item_attrs(self, chooser, n, attrs):\n        # Custom coloring logic here\n        return True\n```\n\n----------------------------------------\n\nTITLE: Extended Script Execution Options\nDESCRIPTION: Extended format for script execution timing control in IDA. Allows specifying when the script should run during IDA's startup process.\nSOURCE: https://github.com/idapython/src/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n-OIDAPython:[N;]script.py\n```\n\n----------------------------------------\n\nTITLE: Filling Chooser Columns in Python for IDA Teams Merge Functionality\nDESCRIPTION: This snippet demonstrates the logic for populating chooser columns in IDA Teams merge functionality. It uses methods from diff_source_t and merge_handler_params_t to determine column content and formatting.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_72\n\nLANGUAGE: Python\nCODE:\n```\ncolumns.clear()\nNAME = print_diffpos_name()\nif ui_complex_name()\nthen\n  columns.add(split NAME by ui_split_char())\nelse\n  columns[0] = NAME\nif not ui_complex_details()\nthen\n  columns.add(print_diffpos_details())\n```\n\n----------------------------------------\n\nTITLE: Running IDAPython Script via Console\nDESCRIPTION: Command to execute an IDAPython script from the output window or IDAPython console. This allows loading external Python scripts into IDA Pro for execution.\nSOURCE: https://github.com/idapython/src/blob/master/tools/examples_index_template.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexec(open(\"path/to/your_script.py\").read())\n```\n\n----------------------------------------\n\nTITLE: Extending IDC with Python Function\nDESCRIPTION: Demonstrates how to add a new IDC function 'pow' implemented in Python. This allows calling Python code from IDC scripts.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_69\n\nLANGUAGE: Python\nCODE:\n```\nimport ida_expr\n\ndef pow_impl(arg1, arg2):\n    return arg1 ** arg2\n\nida_expr.add_idc_func(\"pow\", pow_impl, [ida_expr.VT_LONG, ida_expr.VT_LONG])\n```\n\n----------------------------------------\n\nTITLE: Comparing SWiG Wrappers Before and After Changes\nDESCRIPTION: Commands to create a backup of autogenerated SWiG wrappers and compare them after recompilation to verify changes were correctly implemented.\nSOURCE: https://github.com/idapython/src/blob/master/HOWTO.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp -R obj/x64_linux_gcc_32/3/wrappers/ /tmp/wrappers-before\ngit diff /tmp/wrappers-before/ obj/x64_linux_gcc_32/3/wrappers/\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Menus to IDA using IDA Python\nDESCRIPTION: Shows how to add custom menus to IDA's menubar or as submenus of existing menus. It uses register_action and attach_action_to_menu functions.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nida_kernwin.register_action(ida_kernwin.action_desc_t(...))\nida_kernwin.attach_action_to_menu(\"Edit/MyCustomMenu/\", \"my_action\", ida_kernwin.SETMENU_INS)\n```\n\n----------------------------------------\n\nTITLE: Handle Virtual Method Output Parameter using SWIG Director\nDESCRIPTION: SWIG typemap for handling output parameters in director methods, allowing Python implementations to return lists that get converted to C++ vectors.\nSOURCE: https://github.com/idapython/src/blob/master/docs/howto/swig.md#2025-04-22_snippet_2\n\nLANGUAGE: swig\nCODE:\n```\n%typemap(directorargout) qstrvec_t * (qstrvec_t tmp)\n{ // %typemap(directorargout) qstrvec_t *\n  if ( PyW_PySeqToStrVec(&tmp, $result) >= 0 )\n  {\n    $1->swap(tmp);\n  }\n  else\n  {\n    Swig::DirectorTypeMismatchException::raise(\n            SWIG_ErrorType(SWIG_TypeError),\n            \"in output value of type 'qstrvec_t' in method '$symname'\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TBD Files for IDAPython on macOS\nDESCRIPTION: Commands to generate a .tbd file for libpython3 using the 'tapi' utility on macOS. This process involves copying the Python library, generating the .tbd file, and moving it to the appropriate location in the IDA source directory.\nSOURCE: https://github.com/idapython/src/blob/master/tbd.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ alias tapi='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/tapi'\n$ cp /Library/Frameworks/Python.framework/Versions/3.9/Python /tmp/\n$ tapi stubify /tmp/Python\n$ mv /tmp/Python.tbd ~/idasrc/current/plugins/idapython/libpython3.tbd\n```\n\n----------------------------------------\n\nTITLE: Remove Argument from Prototype using SWIG Typemap\nDESCRIPTION: SWIG typemap to remove a length parameter from function prototypes by setting it to a constant value of -1 in IDAPython context.\nSOURCE: https://github.com/idapython/src/blob/master/docs/howto/swig.md#2025-04-22_snippet_0\n\nLANGUAGE: swig\nCODE:\n```\n%typemap(in,numinputs=0) int length\n{\n    $1 = -1; // always -1 in IDAPython\n}\n```\n\n----------------------------------------\n\nTITLE: Extending qvector with Another qvector\nDESCRIPTION: Extends a qvector by appending all items from another qvector. This is an alias for insert(end(), thing.begin(), thing.end()).\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nqvector.extend(thing: qvector) : None\n```\n\n----------------------------------------\n\nTITLE: Language Switching Commands\nDESCRIPTION: IDC/Python commands to switch the default expression evaluation language between Python and IDC in IDA.\nSOURCE: https://github.com/idapython/src/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nload_and_run_plugin(\"idapython\", 3)\n```\n\nLANGUAGE: c\nCODE:\n```\nload_and_run_plugin(\"idapython\", 4)\n```\n\n----------------------------------------\n\nTITLE: Listing IDA Python API Test Files\nDESCRIPTION: A comprehensive list of IDA Python API test files with their current testing status. The status is indicated by checkboxes: [v] for tested, [ ] for untested, and [?] for uncertain status.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n# Effectively test\n\n    [v] pc_api_add_frame_member.elf\n    [?] pc_api_apply_callee_tinfo.elf\n    [ ] pc_api_change_stkvar_type.elf\n    [v] pc_api_create_array.elf\n    [v] pc_api_create_bfstruct.elf\n    [v] pc_api_create_bmenum.elf\n    [v] pc_api_create_libssh2_til.elf\n    [v] pc_api_create_struct_by_parsing.elf\n    [v] pc_api_create_user_shared_data.elf\n    [v] pc_api_del_struct_members.elf\n    [v] pc_api_func_ti_changed_listener.elf\n    [v] pc_api_gap_size_align_snippet.elf\n    [v] pc_api_get_best_fit_member.elf\n    [v] pc_api_get_innermost_member.elf\n    [v] pc_api_import_type_from_til.elf -> idapython-examples__import_type_from_til (requires UI)\n    [v] pc_api_insert_gap.elf\n    [v] pc_api_list_enum_member.elf\n    [v] pc_api_list_frame_info.elf\n    [v] pc_api_list_func_details.elf\n    [v] pc_api_list_struct_accesses.elf\n    [ ] pc_api_list_struct_member.elf\n    [ ] pc_api_list_struct_xrefs.elf\n    [ ] pc_api_list_union_member.elf\n    [ ] pc_api_mark_func_spoiled.elf\n    [ ] pc_api_operand_to_struct_member.elf\n    [ ] pc_api_setpehdr.elf\n    [ ] pc_api_visit_tinfo.elf\n```\n\n----------------------------------------\n\nTITLE: Alternative Functions Window Implementation\nDESCRIPTION: Custom implementation of IDA's Functions window using a Choose-based widget. Shows how to recreate core IDA UI functionality in a custom form.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: User Init File Paths\nDESCRIPTION: File paths for placing custom IDAPython initialization settings in idapythonrc.py file. Shows paths for both Unix-like systems and Windows.\nSOURCE: https://github.com/idapython/src/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n${HOME}/.idapro/\n```\n\nLANGUAGE: cmd\nCODE:\n```\n%AppData%\\Hex-Rays\\IDA Pro\n```\n\n----------------------------------------\n\nTITLE: Function Call Comparison - C++ vs Python\nDESCRIPTION: Illustrates the difference between C++ and Python syntax for calling IDA API functions that return strings\nSOURCE: https://github.com/idapython/src/blob/master/docs/notes.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nget_func_name(0x1234, buf, sizeof(buf));\n```\n\nLANGUAGE: python\nCODE:\n```\nname = get_func_name(0x1234)\n```\n\n----------------------------------------\n\nTITLE: Running idapyswitch for Python Runtime Selection\nDESCRIPTION: Commands to run the idapyswitch utility for selecting or changing the Python 3.x runtime used by IDAPython. It includes options for standard installations and viewing help for non-standard setups.\nSOURCE: https://github.com/idapython/src/blob/master/README_python3.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nidapyswitch\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nidapyswitch -h\n```\n\n----------------------------------------\n\nTITLE: Exception Example - Undefined Function\nDESCRIPTION: Demonstrates the error message shown when attempting to use an unwrapped IDA API function\nSOURCE: https://github.com/idapython/src/blob/master/docs/notes.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"<string>\", line 1, in ?\nNameError: name 'foobar' is not defined\n```\n\n----------------------------------------\n\nTITLE: Importing New Module in IDAPython\nDESCRIPTION: Code to add to python/idc.py for autoloading a newly created module.\nSOURCE: https://github.com/idapython/src/blob/master/HOWTO.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ida_zzz\n```\n\n----------------------------------------\n\nTITLE: Type Error Example - Invalid Argument Type\nDESCRIPTION: Shows the error message when passing incorrect argument types to IDA API functions\nSOURCE: https://github.com/idapython/src/blob/master/docs/notes.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"<string>\", line 1, in ?\nTypeError: Type error. Got aa, expected _p_func_t\n```\n\n----------------------------------------\n\nTITLE: Inserting Member in Structure/Union at Specific Index\nDESCRIPTION: Inserts a member in a structure/union at the specified index. The member's size is computed automatically. Supports inserting the same member multiple times and specifying ETF flags.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.insert_udm(self, udm: udm_t, idx: int, times: int = 1, etf_flags: int = 0):\n```\n\n----------------------------------------\n\nTITLE: Testing cexpr_t Refwidth Property in IDAPython\nDESCRIPTION: This snippet demonstrates how to write a test for IDAPython APIs by simulating a user dialogue with Python inputs and expected outputs. It specifically tests the refwidth property of a cexpr_t instance, showing normal operations and error handling.\nSOURCE: https://github.com/idapython/src/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPython>x = cexpr_t()\nPython>x.refwidth\n0\nPython>x.refwidth = 18\nPython>x.refwidth\n18\nPython>x.refwidth = var_ref_t()\nTraceback (most recent call last):\n  <snipped file>, <snipped line>, in <module>\n  <snipped file>, <snipped line>, in <lambda>\n    refwidth = property(                                                                lambda self: self._get_refwidth() if True else 0,                    lambda self, v: True                                                         and self._ensure_no_obj(self._get_refwidth(),\"refwidth\", False)                  and self._acquire_ownership(v, False)                                  and self._set_refwidth(v))\n  <snipped file>, <snipped line>, in _set_refwidth\n    return _ida_hexrays.cexpr_t__set_refwidth(self, *args)\nTypeError: in method 'cexpr_t__set_refwidth', argument 2 of type 'int'\n```\n\n----------------------------------------\n\nTITLE: IDA Python Examples Directory Structure\nDESCRIPTION: Markdown listing of IDA Python example scripts organized by functional categories including func, gdl, hexrays, idb, idp, inf, misc, segm, and typeinf modules.\nSOURCE: https://github.com/idapython/src/blob/master/api-examples/api-examples-toc.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# API examples\n\n\nThis file contains the list of all the IDA python examples.\n\n\n## func\n\n* decompile_func_and_callees.py\n* list_func_callees.py\n* print_location_info.py\n* sort_func_by_calls.py\n\n## gdl\n\n* colorize_graph_node.py\n\n## hexrays\n\n* hr_decompile_func_and_callees.py\n\n## idb\n\n* frame_event_listener.py\n* lt_event_listener.py\n\n## idp\n\n* log_idp_events.py\n\n## inf\n\n* print_basic_info.py\n* print_basic_info_plugin.py\n\n## misc\n\n* find_binary_pattern.py\n\n## segm\n\n* list_imports.py\n\n## typeinf\n\n* add_frame_member.py\n* apply_callee_tinfo.py\n* change_stkvar_name.py\n* change_stkvar_type.py\n* create_array.py\n* create_bfstruct.py\n* create_bmenum.py\n* create_libssh2_til.py\n* create_structs.py\n* create_user_shared_data.py\n* del_struct_members.py\n* func_ti_changed_listener.py\n* gap_size_align_snippet.py\n* import_type_from_til.py\n* insert_gap.py\n* list_enum_member.py\n* list_frame_info.py\n* list_func_details.py\n* list_stkvar_xrefs.py\n* list_struct_accesses.py\n* list_struct_member.py\n* list_struct_xrefs.py\n* list_union_member.py\n* mark_func_spoiled.py\n* operand_to_struct_member.py\n* setpehdr.py\n* visit_tinfo.py\n```\n\n----------------------------------------\n\nTITLE: Iterating Enumeration Members\nDESCRIPTION: Creates a generator to iterate through all members of an enumeration type. Each iteration yields an edm_t object containing name and value. Raises an exception if the type is not an enumeration.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.iter_enum() : generator of edm_t\n```\n\n----------------------------------------\n\nTITLE: Iterating Structure Members\nDESCRIPTION: Creates a generator to iterate through all members of a structure type. Each iteration yields a udm_t object. Raises an exception if the type is not a structure.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.iter_struct() : generator of udm_t\n```\n\n----------------------------------------\n\nTITLE: Iterating Union Members\nDESCRIPTION: Creates a generator to iterate through all members of a union type. Each iteration yields a udm_t object. Raises an exception if the type is not a union.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntinfo_t.iter_union() : generator of udm_t\n```\n\n----------------------------------------\n\nTITLE: Creating Enumerator with edm_t Constructor\nDESCRIPTION: Creates an enumerator with specified name, value, and optional comment. Used to define members of enumeration types.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nedm_t(name: str, value: int, cmt: str = None) : edm_t\n```\n\n----------------------------------------\n\nTITLE: Goto Chain Optimization\nDESCRIPTION: Example of goto chain optimization pattern that can be simplified by the custom microcode block optimization rule.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_36\n\nLANGUAGE: asm\nCODE:\n```\n    goto L1\n    ...\nL1:\n    goto L2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Numbered Type from Type Library\nDESCRIPTION: Gets a tinfo_t object representing a numbered type from a type library by its ordinal. Returns None if the type is not found.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntil_t.get_numbered_type(ordinal: int): tinfo_t | None\n```\n\n----------------------------------------\n\nTITLE: Indirect Call Example\nDESCRIPTION: Example of indirect call syntax that the decompiler needs to analyze to determine function prototype.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_35\n\nLANGUAGE: asm\nCODE:\n```\ncall    [eax+4]\n```\n\n----------------------------------------\n\nTITLE: Running IDAPython Script via Output Window\nDESCRIPTION: This snippet demonstrates how to execute an IDAPython script from the output window or IDAPython console.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nexec(open(\"path/to/your_script.py\").read())\n```\n\n----------------------------------------\n\nTITLE: C++ Function Declaration Example\nDESCRIPTION: Example of a C++ function declaration that gets wrapped into Python, showing how parameters are transformed. The 'out' parameter becomes a return value in Python.\nSOURCE: https://github.com/idapython/src/blob/master/docs/inject_pydoc.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ninline void get_registered_actions(qstrvec_t *out)\n```\n\n----------------------------------------\n\nTITLE: Microcode Optimization - DbgRaiseAssertionFailure Call\nDESCRIPTION: Microcode instruction showing transformation of DbgRaiseAssertionFailure call to include assertion text parameter.\nSOURCE: https://github.com/idapython/src/blob/master/examples/index.md#2025-04-22_snippet_34\n\nLANGUAGE: asm\nCODE:\n```\ncall   !DbgRaiseAssertionFailure <fast:>.0\n```\n\nLANGUAGE: asm\nCODE:\n```\ncall   !DbgRaiseAssertionFailure <fast:\"char *\" \"assertion text\">.0\n```\n\n----------------------------------------\n\nTITLE: Building IDAPython Plugin (Bash)\nDESCRIPTION: Command to build the IDAPython plugin using the build script. This command includes options for specifying the SWIG installation, enabling Hex-Rays decompiler support, and setting the IDA installation path.\nSOURCE: https://github.com/idapython/src/blob/master/BUILDING.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython build.py --swig-home /my_path_to/swig-4.0.1-py3-install --with-hexrays --ida-install /path/to/ida_install/\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version for Build (Bash)\nDESCRIPTION: Commands to set environment variables for specifying the Python version to build against. This example sets up for Python 3.8, but can be adjusted for other versions.\nSOURCE: https://github.com/idapython/src/blob/master/BUILDING.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTHON_VERSION_MAJOR=3\nexport PYTHON_VERSION_MINOR=8\n\n# On Windows\nset PYTHON_VERSION_MAJOR=3\nset PYTHON_VERSION_MINOR=8\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SDK Compilation (Bash)\nDESCRIPTION: Commands to set environment variables for compiling the IDA SDK on different operating systems. These variables are used to determine the target platform for the build process.\nSOURCE: https://github.com/idapython/src/blob/master/BUILDING.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\nset __NT__=1\n\n# Linux\nexport __LINUX__=1\n\n# Mac OSX\nexport __MAC__=1\n```\n\n----------------------------------------\n\nTITLE: Appending Item to qvector\nDESCRIPTION: Adds an item to the end of a qvector. This is an alias for the push_back() method.\nSOURCE: https://github.com/idapython/src/blob/master/til_api_improvements.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nqvector.append(thing: any) : None\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building SWIG (Bash)\nDESCRIPTION: Commands to configure, build, and install SWIG from source. This process includes running the autogen script, configuring with a custom install path, and then building and installing SWIG.\nSOURCE: https://github.com/idapython/src/blob/master/BUILDING.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh autogen.sh\n./configure --prefix=/my_path_to/swig-4.0.1-py3-install && make && make install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu (Bash)\nDESCRIPTION: Command to install necessary packages on Ubuntu for building SWIG. These packages are required for compiling SWIG from source.\nSOURCE: https://github.com/idapython/src/blob/master/BUILDING.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libpcre3-dev yacc bison automake autotools-dev patchelf -y\n```\n\n----------------------------------------\n\nTITLE: Patch Notification Hook for Backward Compatibility\nDESCRIPTION: Configuration for patch_codegen.py to support calling old-style hooks after adding a new parameter to a notification.\nSOURCE: https://github.com/idapython/src/blob/master/docs/howto/swig.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"SwigDirector_IDB_Hooks::struc_renamed\" : [\n    (\"director_method_call_arity_cap\", (\n        False, # add GIL lock\n        \"struc_renamed\",\n        \"(method ,(PyObject *)obj0,(__argcnt < 3 ? nullptr : (PyObject *)obj1), nullptr)\",\n        \"(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(__argcnt < 3 ? nullptr : (PyObject *)obj1), nullptr)\"\n    )),\n],\n```\n\n----------------------------------------\n\nTITLE: Cloning SWIG for Python 3.x Build (Bash)\nDESCRIPTION: Command to clone the correct version of SWIG for building IDAPython with Python 3.x support. This uses a specific branch that supports the py3-limited-api feature.\nSOURCE: https://github.com/idapython/src/blob/master/BUILDING.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch py3-stable-abi https://github.com/idapython/swig.git swig-py3-stable-abi\n```"
  }
]