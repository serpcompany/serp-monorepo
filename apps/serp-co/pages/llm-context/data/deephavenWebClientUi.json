[
  {
    "owner": "deephaven",
    "repo": "web-client-ui",
    "content": "TITLE: Importing and Using IrisGrid Component in React\nDESCRIPTION: This code demonstrates how to import and use the IrisGrid component from the @deephaven/iris-grid package. It includes creating a model asynchronously and rendering the IrisGrid component with the necessary props.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/iris-grid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useApi } from '@deephaven/jsapi-bootstrap';\nimport { IrisGrid, IrisGridModelFactory } from '@deephaven/iris-grid';\n\n// In your initialization, create the model async\nconst dh = useApi();\nconst model = await IrisGridModelFactory.makeModel(dh, table);\n\n// In your render function\n<IrisGrid dh={dh} model={model} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Deephaven Dashboard Component in React\nDESCRIPTION: Example React component implementation showing how to use the Dashboard component with a custom plugin. Demonstrates basic setup and plugin integration pattern.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport Dashboard from '@deephaven/dashboard';\nimport MyDashboardPlugin from './MyDashboardPlugin';\n\nclass Example extends Component {\n  render() {\n    return (\n      <Dashboard>\n        <MyDashboardPlugin />\n      </Dashboard>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deephaven Dashboard with Core Plugins in React\nDESCRIPTION: This React component example demonstrates how to use the Dashboard component from @deephaven/dashboard along with GridPlugin and ChartPlugin from @deephaven/dashboard-core-plugins. It also shows how to include a custom plugin (MyDashboardPlugin).\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard-core-plugins/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport Dashboard from '@deephaven/dashboard';\nimport { GridPlugin, ChartPlugin } from '@deephaven/dashboard';\nimport MyDashboardPlugin from './MyDashboardPlugin';\n\nclass Example extends Component {\n  render() {\n    return (\n      <Dashboard>\n        <GridPlugin />\n        <ChartPlugin />\n        <MyDashboardPlugin />\n      </Dashboard>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deephaven Components in a React application\nDESCRIPTION: Example of importing and using components from the @deephaven/components library in a React application. Shows how to set up a basic app with ThemeProvider and Button components.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Button, ThemeProvider } from \"@deephaven/components\";\nimport \"@deephaven/components/scss/BaseStyleSheet.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider themes={[]}>\n      <Button kind=\"primary\">Hello</Button>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using the FileExplorer React Component\nDESCRIPTION: Example showing how to implement the FileStorage interface and use the FileExplorer component in a React application. The custom storage implementation must implement all required methods of the FileStorage interface, and the component requires a storage instance and can accept an onSelect callback for handling item selection.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/file-explorer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport FileExplorer, { FileStorage } from '@deephaven/file-explorer';\n\nclass MyFileStorage implements FileStorage {\n  // Must implement all menthods...\n}\n\nconst storage = new MyFileStorage();\n\nclass Example extends Component {\n  render() {\n    return (\n      <FileExplorer\n        storage={storage}\n        onSelect={item => console.log('Item selected', item)}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deephaven/jsapi-shim in a React Component\nDESCRIPTION: Example demonstrating how to import the dh object and PropTypes from the shim library. The component shows listening for session events and using the PropTypes for type checking.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-shim/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport dh, { PropTypes as APIPropTypes } from '@deephaven/jsapi-shim'\n\nclass MyComponent {\n  componentDidMount() {\n    const { session } = this.props;\n    session.addEventListener(\n      dh.IdeSession.EVENT_COMMANDSTARTED,\n      event => {\n        console.log('Command started event', event);\n      }\n    );\n  }\n\n  render() {\n    return null;\n  }\n}\n\nMyComponent.proptypes = {\n  session: APIPropTypes.IdeSession.isRequired,\n}\n\nexport default MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Tree Grid Implementation\nDESCRIPTION: Example showing how to implement expandable tree-structure data using MockTreeGridModel\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/grid/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Grid, MockTreeGridModel } from '@deephaven/grid';\n\nconst TreeExample = () => {\n  const [model] = useState(() => new MockTreeGridModel());\n\n  return <Grid model={model} />;\n};\n\nexport default TreeExample;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Grid Implementation\nDESCRIPTION: Demonstrates loading data asynchronously using ViewportDataGridModel with viewport management and simulated data fetching\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/grid/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Grid, ViewportDataGridModel } from '@deephaven/grid';\n\n/**\n * An example showing data loading asnychronously for a grid.\n */\nconst AsyncExample = () => {\n  // Use a Viewport data model that we update asynchronously to display the data\n  const [model] = useState(\n    () => new ViewportDataGridModel(1_000_000_000, 1_000_000)\n  );\n  const grid = useRef();\n\n  // The current viewport\n  const [viewport, setViewport] = useState({\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  });\n\n  const handleViewChanged = useCallback(metrics => {\n    // Pull out the viewport from the metrics\n    const { top, bottom, left, right } = metrics;\n    setViewport({ top, bottom, left, right });\n  }, []);\n\n  const { top, bottom, left, right } = viewport;\n  useEffect(() => {\n    let isCancelled = false;\n\n    // Simulate fetching data asynchronously by using at timeout\n    setTimeout(() => {\n      if (isCancelled) return;\n\n      // Generate the data for the viewport\n      const data = [];\n      for (let i = top; i <= bottom; i += 1) {\n        const rowData = [];\n        for (let j = left; j <= right; j += 1) {\n          rowData.push(`${i},${j}`);\n        }\n        data.push(rowData);\n      }\n      model.viewportData = {\n        rowOffset: top,\n        columnOffset: left,\n        data,\n      };\n\n      // Refresh the grid\n      grid.current.forceUpdate();\n    }, 250);\n    return () => {\n      isCancelled = true;\n    };\n  }, [top, bottom, left, right, model]);\n\n  return <Grid model={model} onViewChanged={handleViewChanged} ref={grid} />;\n};\n\nexport default AsyncExample;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Console Component in React\nDESCRIPTION: Example of how to import the Console component from the @deephaven/console package and use it in a React component's render function, passing a session object as a prop.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/console/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Console } from '@deephaven/console';\n\n// In your render function\n<Console session={session} />\n```\n\n----------------------------------------\n\nTITLE: Using Deephaven Log Library\nDESCRIPTION: Comprehensive example showing how to use the @deephaven/log library, including setting log levels, creating module loggers, using different logging methods, and enabling log proxying and history features.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/log/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Log from '@deephaven/log'\n\n// Set the level of logging you want in your app (default is INFO). This can be changed dynamically.\nimport { LoggerLevel } from '@deephaven/log'\nLog.setLogLevel(LoggerLevel.DEBUG2);\n\n// You can log messages directly without a module by calling the logging methods directly\nLog.info('basic info level log message');\n\n// Alternatively, create a log module to group log messages. All messages logged to this module will be prefixed with `[MyModuleName]`.\nconst log = Log.module('MyModuleName');\n\n// The different possible logging methods. If the log level is set lower than the recorded method, it will not be logged.\nlog.debug2('debug2 level log message');\nlog.debug('debug level log message');\nlog.info('info level log message');\nlog.log('alias for log.info');\nlog.warn('warning level log message');\nlog.error('error level log message');\n\n// Enable the LogProxy to intercept all console messages\nimport { LogProxy } from '@deephaven/log';\nconst logProxy = new LogProxy();\nlogProxy.enable();\n\n// Enable the LogHistory to store all log messages in memory for later consumption or exporting (requires LogProxy to be enabled already)\nimport { LogHistory } from '@deephaven/log';\nconst logHistory = new LogHistory(logProxy);\nlogHistory.enable();\n```\n\n----------------------------------------\n\nTITLE: Using TableUtils for Type Checking\nDESCRIPTION: Example demonstrating how to use TableUtils to check column types in DeepHaven tables. Shows checks for date and number types with fallback handling.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TableUtils } from '@deephaven/jsapi-utils';\n\nif (TableUtils.isDateType(columnType)) {\n  console.log('Date type', columnType);\n} else if (TableUtils.isNumberType(columnType)) {\n  console.log('Number type', columnType);\n} else {\n  console.log('Unrecognized type', columnType);\n}\n```\n\n----------------------------------------\n\nTITLE: Using TableInput Component from @deephaven/jsapi-components\nDESCRIPTION: Example of importing and using the TableInput component from the @deephaven/jsapi-components package in a React application. The component requires a table prop to be passed.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TableInput } from '@deephaven/jsapi-components';\n\n<TableInput table={table} />\n```\n\n----------------------------------------\n\nTITLE: Loading Deephaven Modules and Connecting to Server in NodeJS\nDESCRIPTION: Example of loading Deephaven modules from a server, creating a client, and establishing a connection. This shows how to set up the directory for module storage, download the JSAPI modules, and authenticate with the server.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-nodejs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nimport { loadDhModules } from '@deephaven/jsapi-nodejs';\n\n// Needed for esm modules\nif (typeof globalThis.__dirname === 'undefined') {\n  globalThis.__dirname = import.meta.dirname\n}\n\nconst tmpDir = path.join(__dirname, 'tmp');\n\n// Download jsapi from a Deephaven server\nconst dhc = await loadDhModules({\n  serverUrl: new URL('http://localhost:10000'),\n  storageDir: tmpDir,\n  targetModuleType: 'esm', // set to `cjs` to download as a CommonJS module\n});\n\nconst client = new dhc.CoreClient(serverUrl.href, {\n  // Enable http2 transport (this is optional but recommended)\n  transportFactory: NodeHttp2gRPCTransport.factory,\n})\n\nawait client.login({\n  type: dhc.CoreClient.LOGIN_TYPE_ANONYMOUS,\n})\n\nconst cn = await client.getAsIdeConnection()\n```\n\n----------------------------------------\n\nTITLE: Using Deephaven Chart Component\nDESCRIPTION: Example of importing and using the Chart component in a React application. The component requires 'dh' and 'model' props to connect to Deephaven data sources.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/chart/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chart } from '@deephaven/chart';\n\n// In your render function\n<Chart dh={dh} model={model} />\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox Items in TypeScript\nDESCRIPTION: Examples of how to define items for the new ComboBox component in TypeScript. Shows both simple array of values and using Item elements for custom display text.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// values will be used for display + value\nconst items = useMemo(\n  () => ['Aaa', 'Bbb', 'Ccc'],\n  []\n)\n<ComboBox>{items}</ComboBox>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<ComboBox>\n  <Item key=\"aaa\">Aaa</Item>\n  <Item key=\"bbb\">Bbb</Item>\n  <Item key=\"ccc\">Ccc</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Setting API Globally for Legacy Applications\nDESCRIPTION: Example of using ApiBootstrap with the setGlobally prop to make the API available globally. This approach requires lazy loading components to ensure the API is set before imports attempt to use it, and demonstrates integration with the jsapi-shim.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-bootstrap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// App.tsx\nimport { ApiBootstrap } from '@deephaven/jsapi-bootstrap';\n\nconst MyComponent = React.lazy(() => import('./MyComponent'));\n\n<ApiBootstrap apiUrl={API_URL} setGlobally>\n    <Suspense fallback={<div>Loading...</div>}>\n      <MyComponent />\n    </Suspense>\n</ApiBootstrap>;\n\n// MyComponent.tsx\nimport dh from '@deephaven/jsapi-shim';\nfunction MyComponent() {\n  const client = new dh.CoreClient(...);\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deephaven/filters library in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use functions from the @deephaven/filters library. It imports getLabelForTextFilter and FilterType, then logs the label for a 'contains' filter type.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/filters/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLabelForTextFilter, FilterType } from '@deephaven/filters';\n\nconsole.log('Label is', getLabelForTextFilter(FilterType.contains));\n```\n\n----------------------------------------\n\nTITLE: Large Dataset Grid Implementation\nDESCRIPTION: Demonstrates handling large datasets using MockGridModel with virtualized rows and columns supporting up to Number.MAX_SAFE_INTEGER\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/grid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Grid, MockGridModel } from '@deephaven/grid';\n\nconst GridQuadrillionExample = () => {\n  const [model] = useState(\n    () =>\n      new MockGridModel({\n        rowCount: Number.MAX_SAFE_INTEGER,\n        columnCount: Number.MAX_SAFE_INTEGER,\n        isEditable: true,\n      })\n  );\n\n  return <Grid model={model} />;\n};\n\nexport default GridQuadrillionExample;\n```\n\n----------------------------------------\n\nTITLE: ComboBox Simple Values Implementation - TypeScript\nDESCRIPTION: Example showing how to use the ComboBox component with an array of simple values, where the same value is used for both display and internal value.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/code-studio/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// values will be used for display + value\nconst items = useMemo(\n  () => ['Aaa', 'Bbb', 'Ccc'],\n  []\n)\n<ComboBox>{items}</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: ComboBox Custom Display Implementation - TypeScript\nDESCRIPTION: Example showing how to use the ComboBox component with custom Item elements when display text needs to differ from the key/value.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/code-studio/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<ComboBox>\n  <Item key=\"aaa\">Aaa</Item>\n  <Item key=\"bbb\">Bbb</Item>\n  <Item key=\"ccc\">Ccc</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Static Data Grid Implementation\nDESCRIPTION: Example showing how to display static array data using StaticDataGridModel with column headers and row data\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/grid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Grid, StaticDataGridModel } from '@deephaven/grid';\n\nconst GridExample = () => {\n  const [model] = useState(\n    new StaticDataGridModel(\n      [\n        ['Matthew Austins', 'Toronto', 35, 22],\n        ['Doug Millgore', 'Toronto', 14, 33],\n        ['Bart Marchant', 'Boston', 20, 14],\n        ['Luigi Dabest', 'Pittsburgh', 66, 33],\n      ],\n      ['Name', 'Team', 'Goals', 'Assists']\n    )\n  );\n\n  return <Grid model={model} />;\n};\n\nexport default GridExample;\n```\n\n----------------------------------------\n\nTITLE: Auth0 Authentication Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the OAuth 2.0 Authorization Code Flow for Auth0 integration, showing the interaction between User, Web UI, Server, Auth0 Plugin, Auth0 Tenant, and JS API.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/auth-plugins/README.md#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant U as User\n  participant W as Web UI\n  participant S as Server\n  participant P as Auth0Plugin\n  participant T as Auth0 Tenant\n  participant J as JS API\n  U->>W: Open app\n  W->>W: Select first available AuthPlugin\n  W->>P: Login\n  P->>T: Authorization code request to /authorize\n  T->>U: Redirect to login/authorization prompt\n  U-->>T: Authenticate and Consent\n  T->>W: Authorization code\n  W->>W: Select first available AuthPlugin\n  W->>P: Login\n  P->>T: Authorization Code + Client ID + Client Secret to /oauth/token\n  T->>T: Validate Authorization Code + Client ID + Client Secret\n  T-->>P: ID Token and Access Token\n  P->>J: client.login(token)\n  J-->>P: Login success\n  P-->>W: Login success\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json\nDESCRIPTION: JSON configuration to extend the Deephaven ESLint configuration in a project's package.json file. This applies Deephaven's standard linting rules to the project.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/eslint-config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"eslintConfig\": { \"extends\": \"@deephaven/eslint-config\" }\n```\n\n----------------------------------------\n\nTITLE: Using Deephaven Icons with Font Awesome React Component\nDESCRIPTION: Example of importing and using the Deephaven icon set with Font Awesome React components. This snippet demonstrates how to import specific icons from the @deephaven/icons package and render them in a React component.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/icons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {vsAccount, dhTruck} from `@deephaven/icons';\n\n[...]\n<FontAwesomeIcon icon=\"vsAccount\" />\n<FontAwesomeIcon icon=\"dhTruck\" />\n```\n\n----------------------------------------\n\nTITLE: Pre-shared Key Authentication Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the authentication flow for the Pre-shared Key (PSK) authentication plugin, showing both automatic key detection from query string and manual key input.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/auth-plugins/README.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant W as Web UI\n  participant P as AuthPluginPsk\n  participant J as JS API\n  W->>P: Login\n  alt Key in query string\n    P->>J: client.login(key)\n  else Prompt user for key\n    P->>P: Prompt for key\n    P->>J: client.login(key)\n  end\n  J-->>P: Login success\n  P-->>W: Login success\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the general authentication flow between User, Web UI, AuthPlugin, and Server during the authentication process.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/auth-plugins/README.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant U as User\n  participant W as Web UI\n  participant P as AuthPlugin\n  participant S as Server\n  U->>W: Open app\n  activate W\n    W->>S: Load plugin modules\n    S-->>W: PluginModule[]\n    W->>S: client.getAuthConfigValues()\n    S-->>W: Auth config [string, string][]\n    W->>W: Select first available AuthPlugin\n  deactivate W\n  W->>P: Login\n  P->>S: client.login()\n  S-->>P: Login success\n  P-->>W: Login success\n```\n\n----------------------------------------\n\nTITLE: Composite Password/Anonymous Authentication Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the authentication flow for a composite plugin that provides both password-based and anonymous authentication options.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/auth-plugins/README.md#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant W as Web UI\n  participant CP as CompositePlugin\n  participant AP as AnonymousPlugin\n  participant PP as PasswordPlugin\n  participant J as JS API\n  W->>CP: Login\n  CP->>CP: Prompt for authentication method\n  activate CP\n    alt Password login\n      activate PP\n        loop Until success\n          PP->>PP: Show Login UI\n          PP->>J: client.login(password)\n          alt Login success\n            J-->>PP: Login success\n          else Login failure\n            J-->>PP: Login failure\n            PP->>PP: Show login error\n          end\n        end\n        PP-->>CP: Login success\n      deactivate PP\n    else Anonymous login\n      activate AP\n        AP->>J: client.login(anonymous)\n        J-->>AP: Login success\n        AP-->>CP: Login success\n      deactivate AP\n    end\n    CP-->>W: Login success\n  deactivate CP\n```\n\n----------------------------------------\n\nTITLE: Extending Deephaven TypeScript Configuration in tsconfig.json\nDESCRIPTION: JSON configuration to extend the Deephaven TypeScript settings in your project's tsconfig.json file. This allows your project to inherit all the standardized TypeScript compiler settings.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/tsconfig/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": \"@deephaven/tsconfig\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Lodash Debounce Mock\nDESCRIPTION: Example of creating a mock implementation for lodash.debounce using the DeepHaven mocks package in a Jest __mocks__ directory.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/mocks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// File: __mocks__/lodash.debounce.js\nexport { LodoashDebounce as default } from '@deephaven/mocks';\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Core with Anonymous Authentication for E2E Tests\nDESCRIPTION: Command to run Deephaven Core with anonymous authentication and application mode using the app.d folder. This setup is required for running E2E tests locally.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSTART_OPTS=\"-DAuthHandlers=io.deephaven.auth.AnonymousAuthenticationHandler -Ddeephaven.application.dir=/path/to/web-client-ui/tests/docker-scripts/data/app.d\" ./gradlew server-jetty-app:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier in package.json\nDESCRIPTION: JSON configuration to add to your package.json file to use the Deephaven prettier configuration.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/prettier-config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"prettier\": \"@deephaven/prettier-config\"\n```\n\n----------------------------------------\n\nTITLE: Setting VITE_PROXY_URL environment variable for local development\nDESCRIPTION: Sets the proxy URL in a .env.local file to point to a custom Deephaven Core instance for local development, used for session websocket and proxy configurations.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVITE_PROXY_URL=http://<dhc-host>:<port>\n```\n\n----------------------------------------\n\nTITLE: Using API with React Context Pattern\nDESCRIPTION: Example of using the ApiBootstrap component with React context to provide the API to child components. This is the recommended approach for modern applications, where the API is accessed through the useApi hook.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-bootstrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApiBootstrap, useApi } from '@deephaven/jsapi-bootstrap';\n\nfunction MyComponent() {\n  const api = useApi();\n\n  ...\n}\n\n<ApiBootstrap apiUrl={API_URL}>\n  <MyComponent />\n</ApiBootstrap>;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json\nDESCRIPTION: Example configuration to add to a project's package.json file to extend Deephaven's ESLint configuration.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/stylelint-config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"eslintConfig\": { \"extends\": \"@deephaven/eslint-config\" }\n```\n\n----------------------------------------\n\nTITLE: React Hooks Feature: useChangeEventValueCallback Implementation\nDESCRIPTION: A feature added in version 0.107.0 that introduces the useChangeEventValueCallback hook. This hook likely allows components to handle change events with value callbacks.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- useChangeEventValueCallback hook ([#2391](https://github.com/deephaven/web-client-ui/issues/2391)) ([99dfcab](https://github.com/deephaven/web-client-ui/commit/99dfcab0093b582ee907973a1df43995b148491a))\n```\n\n----------------------------------------\n\nTITLE: React Hooks Breaking Change: SelectionUtils.optimizeSelection Modification\nDESCRIPTION: A breaking change in version 0.77.0 that adds a required getKey argument to SelectionUtils.optimizeSelection and useMappedSelection functions, affecting how selections are optimized.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Added `getKey` to `SelectionUtils.optimizeSelection` ([#1994](https://github.com/deephaven/web-client-ui/issues/1994)) ([4404894](https://github.com/deephaven/web-client-ui/commit/440489437de62b1e57cdbb7a85adeff97969f7f2))\n\n### BREAKING CHANGES\n\n- @deephaven/react-hooks:\n  `SelectionUtils.optimizeSelection` and `useMappedSelection` require\n  additional `getKey` arg\n```\n\n----------------------------------------\n\nTITLE: Analyzing Bundle Size with source-map-explorer\nDESCRIPTION: Commands to build a production bundle and analyze its size using source-map-explorer. This helps identify what's taking up the most space in the package.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpx source-map-explorer 'packages/code-studio/build/static/js/*.js'\n```\n\n----------------------------------------\n\nTITLE: Redux Package Breaking Changes\nDESCRIPTION: Major refactoring and relocation of plugin-related functionality between packages.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/redux/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### BREAKING CHANGES\\n\\n- `usePlugins` and `PluginsContext` were moved from `@deephaven/app-utils` to `@deephaven/plugin`.\\n* `useLoadTablePlugin` was moved from `@deephaven/app-utils` to `@deephaven/dashboard-core-plugins`.\\n* `useConnection` and `ConnectionContext` were moved from `@deephaven/app-utils` to `@deephaven/jsapi-components`.\\n* `DeephavenPluginModuleMap` was removed from `@deephaven/redux`. Use `PluginModuleMap` from `@deephaven/plugin` instead.\n```\n\n----------------------------------------\n\nTITLE: Configuring Core API URL in Environment\nDESCRIPTION: Sets the API server URL for remote server connections in the .env.development.local file.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/code-studio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVITE_CORE_API_URL=https://www.myserver.com/jsapi\n```\n\n----------------------------------------\n\nTITLE: Opening a Specific Widget in Application Mode\nDESCRIPTION: Example URL for opening a widget with a specific name in Application Mode. The 'name' query parameter is used to specify the widget.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/embed-widget/README.md#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:4010/?name=world\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Format\nDESCRIPTION: Markdown formatted changelog entries documenting changes, bug fixes, features and version bumps for the @deephaven/iris-grid package. Uses conventional commits format and includes GitHub issue references.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/iris-grid/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [0.107.2](https://github.com/deephaven/web-client-ui/compare/v0.107.1...v0.107.2) (2025-04-21)\n\n**Note:** Version bump only for package @deephaven/iris-grid\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Environment\nDESCRIPTION: Configures the logging level for debugging purposes in the .env.development.local file. Level 2 corresponds to Warn/Error messages.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/code-studio/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nVITE_LOG_LEVEL=2 # Warn/Error\n```\n\n----------------------------------------\n\nTITLE: Replacing LIST_VIEW_ROW_HEIGHT with LIST_VIEW_ROW_HEIGHTS Dictionary\nDESCRIPTION: Breaking change in v0.73.0 that replaces the single numeric constant LIST_VIEW_ROW_HEIGHT with a dictionary LIST_VIEW_ROW_HEIGHTS that likely contains multiple height options.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### BREAKING CHANGES\n\n- `LIST_VIEW_ROW_HEIGHT` number constant replaced with\n  dictionary `LIST_VIEW_ROW_HEIGHTS`\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version updates and changes to the @deephaven/chart package, including commit references and issue links\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/chart/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [0.107.2](https://github.com/deephaven/web-client-ui/compare/v0.107.1...v0.107.2) (2025-04-21)\n\n**Note:** Version bump only for package @deephaven/chart\n\n## [0.107.1](https://github.com/deephaven/web-client-ui/compare/v0.107.0...v0.107.1) (2025-04-10)\n\n**Note:** Version bump only for package @deephaven/chart\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Deephaven Golden Layout\nDESCRIPTION: Commands to install dependencies and start a watch server for development, which recompiles files on changes.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/golden-layout/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Version Change List\nDESCRIPTION: Markdown formatted list of version changes and notes for the DeepHaven web-client-ui app-utils package\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/app-utils/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- DH-16737 Add ObjectManager, `useWidget` hook ([#2030](https://github.com/deephaven/web-client-ui/issues/2030)) ([#2056](https://github.com/deephaven/web-client-ui/issues/2056)) ([dbf613b](https://github.com/deephaven/web-client-ui/commit/dbf613b01507f85274e3a034a21151e746d4505c))\n```\n\n----------------------------------------\n\nTITLE: Adding consistent-type-imports ESLint rule in v0.95.0\nDESCRIPTION: Code refactoring that added an ESLint rule to require type-only imports where possible, which was a breaking change that affected this package.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/pouch-storage/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### ⚠ BREAKING CHANGES\n\n- eslint rule will require type only imports where\n  possible\n\n### Code Refactoring\n\n- Added consistent-type-imports eslint rule and ran --fix ([#2230](https://github.com/deephaven/web-client-ui/issues/2230)) ([2744f97](https://github.com/deephaven/web-client-ui/commit/2744f9793aeac2b70e475a725447dcba1b5f294c)), closes [#2229](https://github.com/deephaven/web-client-ui/issues/2229)\n```\n\n----------------------------------------\n\nTITLE: ComboBox Item Example with String Values\nDESCRIPTION: Example showing how to use the ComboBox component with an array of string values that will be used for both display and value.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/components/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// values will be used for display + value\nconst items = useMemo(\n  () => ['Aaa', 'Bbb', 'Ccc'],\n  []\n)\n<ComboBox>{items}</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Golden Layout\nDESCRIPTION: Command to build the project, which converts SCSS to CSS and combines JavaScript files into the dist folder.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/golden-layout/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Version Release History in Markdown\nDESCRIPTION: Markdown formatted changelog entries tracking changes across multiple versions of the web-client-ui project\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/iris-grid/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.76.0](https://github.com/deephaven/web-client-ui/compare/v0.75.1...v0.76.0) (2024-05-03)\n\n### Bug Fixes\n\n- remove extra padding on column statistic refresh button ([#1984](https://github.com/deephaven/web-client-ui/issues/1984)) ([dc29aa9](https://github.com/deephaven/web-client-ui/commit/dc29aa92de83f1aedeeb787ce89ed442d3536867))\n\n## [0.75.1](https://github.com/deephaven/web-client-ui/compare/v0.75.0...v0.75.1) (2024-05-02)\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog in Markdown\nDESCRIPTION: A markdown formatted changelog documenting version updates for the @deephaven/stylelint-config package, including links to commit comparisons.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/stylelint-config/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [0.107.0](https://github.com/deephaven/web-client-ui/compare/v0.106.4...v0.107.0) (2025-04-01)\n\n**Note:** Version bump only for package @deephaven/stylelint-config\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Newline Handling in Code Editor\nDESCRIPTION: Shows an example of how newlines with leading spaces are handled in the code editor to prevent browser crashes.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n      a\na\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry - Prettier 3.0.0 Upgrade\nDESCRIPTION: Changelog entry documenting the upgrade of Prettier to version 3.0.0 with associated issue references.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/prettier-config/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Upgrade Prettier to 3.0.0 ([#1420](https://github.com/deephaven/web-client-ui/issues/1420)) ([334e530](https://github.com/deephaven/web-client-ui/commit/334e530bf83cebf2cfe3593f2d6e9fd7304c562a)), closes [#1419](https://github.com/deephaven/web-client-ui/issues/1419)\n```\n\n----------------------------------------\n\nTITLE: Git Issue Reference Format\nDESCRIPTION: Format used for referencing GitHub issues in changelog entries\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#2008](https://github.com/deephaven/web-client-ui/issues/2008)\n```\n\n----------------------------------------\n\nTITLE: Example of Conventional Commit Breaking Change Footer in Markdown\nDESCRIPTION: Shows the proper format for documenting a breaking change in a pull request description using the BREAKING CHANGE footer, which is required when introducing backward-incompatible changes to APIs.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBREAKING CHANGE: The API now takes a new parameter that must be provided.\n```\n\n----------------------------------------\n\nTITLE: Commit Hash Link\nDESCRIPTION: Git commit link for plotly plot fix\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/chart/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n88fbe86f819a446228ef47dcc117888af908f98c\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven ESLint Configuration via npm\nDESCRIPTION: Command to install the eslint package and Deephaven's ESLint configuration as development dependencies. Also notes that peer dependencies need to be installed separately.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/eslint-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint @deephaven/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/react-hooks package via npm\nDESCRIPTION: This command installs the @deephaven/react-hooks package as a dependency for a JavaScript/React project. The --save flag ensures the dependency is added to package.json.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Installing DeepHaven JSAPI Utils\nDESCRIPTION: Command to install the @deephaven/jsapi-utils package using npm package manager.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/jsapi-utils\n```\n\n----------------------------------------\n\nTITLE: Implementing TableUtils as an Instance Method in JavaScript\nDESCRIPTION: Code changes that convert static TableUtils methods to instance methods. Consumers now need to create a TableUtils instance and pass the JSAPI object to the constructor.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n`TableUtils` static methods `makeQuickFilter`,\n  `makeQuickFilterFromComponent`, `makeQuickNumberFilter`,\n  `makeQuickTextFilter`, `makeQuickBooleanFilter`, `makeQuickDateFilter`,\n  `makeQuickDateFilterWithOperation`, `makeQuickCharFilter`,\n  `makeAdvancedFilter`, `makeAdvancedValueFilter`, `makeFilterValue`,\n  `makeFilterRawValue`, `makeValue`, `makeSelectValueFilter` converted to\ninstance methods. Consumers now need to create a `TableUtils` instance\nand pass the JSAPI object to the constructor.\n```\n\n----------------------------------------\n\nTITLE: ComboBox Item Example with Item Components\nDESCRIPTION: Example showing how to use the ComboBox component with explicit Item components when display and values differ.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/components/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<ComboBox>\n  <Item key=\"aaa\">Aaa</Item>\n  <Item key=\"bbb\">Bbb</Item>\n  <Item key=\"ccc\">Ccc</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/dashboard-core-plugins via npm\nDESCRIPTION: This command installs the @deephaven/dashboard-core-plugins package using npm. It saves the package as a dependency in the project's package.json file.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard-core-plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/dashboard-core-plugins\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/iris-grid Package via npm\nDESCRIPTION: This snippet shows how to install the @deephaven/iris-grid package using npm. It adds the package to the project's dependencies.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/iris-grid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/iris-grid\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Refactoring Embed Components\nDESCRIPTION: Code refactoring that changes embed-grid and embed-chart to redirects. Removes message handling functionality from @deephaven/embed-grid iframe for filtering and sorting.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/embed-chart/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Code Refactoring\n\n- Change embed-grid and embed-chart to redirects ([#1873](https://github.com/deephaven/web-client-ui/issues/1873)) ([e17619a](https://github.com/deephaven/web-client-ui/commit/e17619a703fb621a091211820c7f7eedfe3b9f8e))\n\n### BREAKING CHANGES\n\n- `@deephaven/embed-grid` does not handle messages to the\n  iframe for filtering or sorting the grid any more\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven App Utils Library via npm\nDESCRIPTION: Command to install the @deephaven/app-utils library as a dependency in a JavaScript/TypeScript project using npm. The --save flag adds the package to the dependencies in package.json.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/app-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/app-utils\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/babel-preset with npm\nDESCRIPTION: Command to install the @deephaven/babel-preset package as a development dependency. This package provides the standardized babel configuration used by Deephaven Data Labs. Peer dependencies need to be installed separately.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @deephaven/babel-preset\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Chart Theme Responsibility\nDESCRIPTION: Changes chart component to handle its own theme. Renames ColorUtils.getColorwayFromTheme and removes chartTheme arguments from various functions.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/embed-chart/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Chart responsible for its own theme ([#1772](https://github.com/deephaven/web-client-ui/issues/1772)) ([fabb055](https://github.com/deephaven/web-client-ui/commit/fabb055f9dacdbb4ad1b4ce7ca85d170f955366d)), closes [#1728](https://github.com/deephaven/web-client-ui/issues/1728)\n\n### BREAKING CHANGES\n\n- - Renamed `ColorUtils.getColorwayFromTheme` to `normalizeColorway`\n\n* Removed `chartTheme` arg from functions in `ChartUtils`,\n  `ChartModelFactory` and `FigureChartModel` in @deephaven/chart\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Console Package with npm\nDESCRIPTION: Command to install the @deephaven/console package as a dependency in your project using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/console/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/console\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Components package with npm\nDESCRIPTION: Command to install the @deephaven/components package as a dependency in your project using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/components\n```\n\n----------------------------------------\n\nTITLE: Redux Package Feature Addition\nDESCRIPTION: Add plugin data map functionality to redux with dashboard plugin data hook.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/redux/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\\n\\n- Add pluginDataMap to redux, add useDashboardPluginData hook ([#1737](https://github.com/deephaven/web-client-ui/issues/1737)) ([e1b4562](https://github.com/deephaven/web-client-ui/commit/e1b4562585fd6ea07efe085fe7ae5128a689ce37))\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/storage using npm\nDESCRIPTION: This command installs the @deephaven/pouch-storage package as a dependency in your project using npm. It saves the package information to your package.json file.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/pouch-storage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/pouch-storage\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/jsapi-nodejs via npm\nDESCRIPTION: Command for installing the @deephaven/jsapi-nodejs package as a dependency in a Node.js project.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-nodejs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/jsapi-nodejs\n```\n\n----------------------------------------\n\nTITLE: Converting DateUtils Static Methods to Instance Methods in JavaScript\nDESCRIPTION: Changes to DateUtils that convert static methods to instance methods requiring the JSAPI object as the first argument, affecting date handling functionality.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n`DateUtils` static methods `makeDateWrapper`, `getNextDate `,\n    `parseDateRange` now require the JSAPI object as the first argument.\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Test Utils Package via NPM\nDESCRIPTION: Command to install @deephaven/test-utils as a development dependency using npm package manager.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/test-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @deephaven/test-utils\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven ESLint Configuration Package\nDESCRIPTION: Command to install the ESLint configuration package and its required dependencies using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/stylelint-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint @deephaven/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Installing CSS-based Loading Spinner in JavaScript\nDESCRIPTION: This snippet shows how to add a CSS class to inline LoadingSpinner instances for proper vertical alignment. It's a breaking change that requires adding the class 'loading-spinner-vertical-align'.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard-core-plugins/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<LoadingSpinner className=\"loading-spinner-vertical-align\" />\n```\n\n----------------------------------------\n\nTITLE: React Hooks Bug Fix: isElementOfType Type Inference Improvement\nDESCRIPTION: A bug fix in version 0.84.0 that improves type inference for the isElementOfType function, enhancing TypeScript type checking and developer experience.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `isElementOfType` Improved type inference ([#2099](https://github.com/deephaven/web-client-ui/issues/2099)) ([e13c9d7](https://github.com/deephaven/web-client-ui/commit/e13c9d78decdfba2ff76657a024b2df44f2ae0fc)), closes [#2094](https://github.com/deephaven/web-client-ui/issues/2094)\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier with Deephaven Config Dependencies\nDESCRIPTION: Command for installing prettier and the Deephaven prettier configuration package as dev dependencies in a project.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/prettier-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev prettier @deephaven/prettier-config\n```\n\n----------------------------------------\n\nTITLE: Installing DeepHaven Mocks Package\nDESCRIPTION: Command to install the @deephaven/mocks package as a development dependency using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/mocks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @deephaven/mocks\n```\n\n----------------------------------------\n\nTITLE: React Hooks Bug Fix: Notebook Typing Performance Improvement\nDESCRIPTION: A fix in version 0.76.0 addressing the laggy typing experience in notebooks, improving overall performance and responsiveness during text input.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Typing in notebooks is laggy ([#1977](https://github.com/deephaven/web-client-ui/issues/1977)) ([47f9a57](https://github.com/deephaven/web-client-ui/commit/47f9a571e725311e429f703fd5332971a1f74f1a))\n```\n\n----------------------------------------\n\nTITLE: Referencing Alternative Package for Embedded Deephaven Chart in Markdown\nDESCRIPTION: This code snippet provides a link to the recommended alternative package '@deephaven/embed-widget' on npmjs.com for embedded Deephaven charts.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/embed-chart/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[@deephaven/embed-widget](https://www.npmjs.com/package/@deephaven/embed-widget)\n```\n\n----------------------------------------\n\nTITLE: Starting the Embed Widget Server with npm\nDESCRIPTION: Commands to install dependencies and start the Embed Widget server using npm. These should be run in the root directory of the repository.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/embed-widget/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: useDelay Hook Implementation Feature\nDESCRIPTION: Addition of a new useDelay hook in v0.65.0 that provides a way to delay operations in React components, referenced by issue #1807.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- useDelay hook ([#1808](https://github.com/deephaven/web-client-ui/issues/1808)) ([445f9fe](https://github.com/deephaven/web-client-ui/commit/445f9fefc3c403f1b43031238d453105a3d1cc45)), closes [#1807](https://github.com/deephaven/web-client-ui/issues/1807)\n```\n\n----------------------------------------\n\nTITLE: usePickerWithSelectedValues API Change\nDESCRIPTION: Breaking change in v0.61.0 that modifies the usePickerWithSelectedValues hook to accept an object argument instead of positional arguments, improving how search text trimming is handled for boolean flags.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- DH-16336: usePickerWithSelectedValues - boolean flags should be calculated based on trimmed search text ([#1750](https://github.com/deephaven/web-client-ui/issues/1750)) ([228f34d](https://github.com/deephaven/web-client-ui/commit/228f34d40ca2f594e0a39b7975ff4668b065d101)), closes [#1747](https://github.com/deephaven/web-client-ui/issues/1747)\n\n### BREAKING CHANGES\n\n- `usePickerWithSelectedValues` now takes an object as an\n  argument instead of positional args\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Case Insensitive Contains in Go To Row\nDESCRIPTION: Added case-insensitive contains functionality to the go to row feature, addressing issue #1274.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/filters/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- add contains ignore case in go to row ([#1291](https://github.com/deephaven/web-client-ui/issues/1291)) ([d67712e](https://github.com/deephaven/web-client-ui/commit/d67712e4d031723ea76b429c79465b122ca4efc4)), closes [#1274](https://github.com/deephaven/web-client-ui/issues/1274)\n```\n\n----------------------------------------\n\nTITLE: Updating generateEmptyKeyedItemsRange Function Signature in JavaScript\nDESCRIPTION: The generateEmptyKeyedItemsRange function now requires start and end index arguments instead of a single count argument.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-utils/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngenerateEmptyKeyedItemsRange(start, end)\n```\n\n----------------------------------------\n\nTITLE: Running Version Bump for Release\nDESCRIPTION: Command to bump the version, update the changelog, and create a release on GitHub. Requires a GitHub personal access token with appropriate permissions.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGH_TOKEN=<token> npm run version-bump -- --git-remote origin\n```\n\n----------------------------------------\n\nTITLE: Redux Package Bug Fix\nDESCRIPTION: Fix to load default dashboard data from workspace data, addressing issue #1746.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/redux/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- Load default dashboard data from workspace data ([#1810](https://github.com/deephaven/web-client-ui/issues/1810)) ([6dd9814](https://github.com/deephaven/web-client-ui/commit/6dd9814d5dde7928c3ad765ce8a0e25f770c1871)), closes [#1746](https://github.com/deephaven/web-client-ui/issues/1746)\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Chart Package\nDESCRIPTION: NPM command to install the @deephaven/chart package as a project dependency\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/chart/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/chart\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Dashboard Package with NPM\nDESCRIPTION: Command to install the @deephaven/dashboard package as a project dependency using npm\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/dashboard\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven File Explorer Package via npm\nDESCRIPTION: Command to install the @deephaven/file-explorer package using npm. This adds the package to your project's dependencies.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/file-explorer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/file-explorer\n```\n\n----------------------------------------\n\nTITLE: Fixing Export for useTableUtils Hook in JavaScript\nDESCRIPTION: A bug fix that exports the useTableUtils hook from a package. This change allows external components to access this hook functionality.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nExport useTableUtils\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/filters library using npm\nDESCRIPTION: This command installs the @deephaven/filters library as a project dependency using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/filters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/filters\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/jsapi-components Package with npm\nDESCRIPTION: Command to install the @deephaven/jsapi-components package as a dependency in your project using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/jsapi-components\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Redux Package via NPM\nDESCRIPTION: Command to install the @deephaven/redux package as a project dependency using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/redux/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/redux\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/storage library via npm\nDESCRIPTION: Command to install the @deephaven/storage library as a dependency in a JavaScript/Node.js project using npm. This adds the library to your package.json file as a dependency.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/storage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/storage\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: The standardized format used for documenting version changes, including version numbers, dates, feature additions, and bug fixes\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.107.2](https://github.com/deephaven/web-client-ui/compare/v0.107.1...v0.107.2) (2025-04-21)\n\n### Bug Fixes\n\n- DH-13095 Ignore right click while dragging table column ([#2415](https://github.com/deephaven/web-client-ui/issues/2415)) ([79f8a33])\n- missing specturm accordian icon due to styling ([#2406](https://github.com/deephaven/web-client-ui/issues/2406)) ([181d29e])\n```\n\n----------------------------------------\n\nTITLE: Fixing PouchStorageTable incorrect operator in v0.78.0\nDESCRIPTION: Bug fix for the PouchStorageTable that was using an incorrect $ne operator, referenced in issue #2011.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/pouch-storage/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- PouchStorageTable using incorrect $ne operator ([#2011](https://github.com/deephaven/web-client-ui/issues/2011)) ([6cf1240](https://github.com/deephaven/web-client-ui/commit/6cf124012a19b122b3a96f620886b970c12b6d29))\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Content\nDESCRIPTION: Changelog entries documenting bug fixes, features, and breaking changes across multiple versions.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- stuck to bottom on filter clear ([#1579](https://github.com/deephaven/web-client-ui/issues/1579)) ([ef52749](https://github.com/deephaven/web-client-ui/commit/ef527498970fd0d994d90d9824bc3a55582f5b4c)), closes [#1477](https://github.com/deephaven/web-client-ui/issues/1477) [#1571](https://github.com/deephaven/web-client-ui/issues/1571) [#1571](https://github.com/deephaven/web-client-ui/issues/1571)\n- Theming - switched from ?inline to ?raw css imports ([#1600](https://github.com/deephaven/web-client-ui/issues/1600)) ([f6d0874](https://github.com/deephaven/web-client-ui/commit/f6d0874a98cc7377c3857a44930b5c636b72ca1f)), closes [#1599](https://github.com/deephaven/web-client-ui/issues/1599)\n\n### BREAKING CHANGES\n\n- Theme css imports were switched from `?inline` to\n  `?raw`. Not likely that we have any consumers yet, but this would impact\n  webpack config.\n```\n\n----------------------------------------\n\nTITLE: Version Change Entry in Markdown\nDESCRIPTION: Markdown-formatted changelog entry detailing version changes, bug fixes, and new features\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Improve golden layout tab overflow drop down behaviour ([#1330](https://github.com/deephaven/web-client-ui/issues/1330)) ([9331822](https://github.com/deephaven/web-client-ui/commit/933182277eb4226caa45871d651789a70fc573d3))\n\n## [0.40.4](https://github.com/deephaven/web-client-ui/compare/v0.40.3...v0.40.4) (2023-06-02)\n\n### Bug Fixes\n\n- Add a default DashboardPanelWrapper ([#1346](https://github.com/deephaven/web-client-ui/issues/1346)) ([ddd92cf](https://github.com/deephaven/web-client-ui/commit/ddd92cf94ee038da9f6b998b12f533d17a400bc4)), closes [#1329](https://github.com/deephaven/web-client-ui/issues/1329)\n- DateWrapper fails on first day of month ([#1342](https://github.com/deephaven/web-client-ui/issues/1342)) ([a4677eb](https://github.com/deephaven/web-client-ui/commit/a4677eb0215b9f3746d68068b0ae13b36736a228)), closes [#1341](https://github.com/deephaven/web-client-ui/issues/1341)\n```\n\n----------------------------------------\n\nTITLE: Version Header\nDESCRIPTION: Header for version 0.76.0 release with link to compare changes\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.76.0](https://github.com/deephaven/web-client-ui/compare/v0.75.1...v0.76.0) (2024-05-03)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry\nDESCRIPTION: Documentation of bug fix for laggy typing in notebooks\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Typing in notebooks is laggy ([#1977](https://github.com/deephaven/web-client-ui/issues/1977)) ([47f9a57](https://github.com/deephaven/web-client-ui/commit/47f9a571e725311e429f703fd5332971a1f74f1a))\n```\n\n----------------------------------------\n\nTITLE: Git Commit Link Format\nDESCRIPTION: Format used for git commit links in changelog, showing version comparisons\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[0.80.0](https://github.com/deephaven/web-client-ui/compare/v0.79.0...v0.80.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven TypeScript Configuration Package\nDESCRIPTION: Command to install the @deephaven/tsconfig package as a development dependency using npm. This adds the standardized TypeScript configuration to your project.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/tsconfig/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @deephaven/tsconfig\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference Format\nDESCRIPTION: Format used for referencing specific git commits in changelog\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-components/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[2246a4a](https://github.com/deephaven/web-client-ui/commit/2246a4a1ef087db060f2130c5a2d7c1e037746b4)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries\nDESCRIPTION: Version history entries showing package updates, bug fixes and feature additions over time\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/log/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [0.107.0](https://github.com/deephaven/web-client-ui/compare/v0.106.4...v0.107.0) (2025-04-01)\n\n### Features\n\n- Allow wildcards for logs blacklist ([#2396](https://github.com/deephaven/web-client-ui/issues/2396)) ([6c406ba](https://github.com/deephaven/web-client-ui/commit/6c406ba00a74b53f4a3d551cb3d9b6241f064dfb))\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/jsapi-bootstrap with npm\nDESCRIPTION: Command to install the @deephaven/jsapi-bootstrap package as a dependency in your project using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-bootstrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/jsapi-bootstrap\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Auth Plugins via npm\nDESCRIPTION: Command to install the Deephaven authentication plugins package as a project dependency using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/auth-plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/auth-plugins\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/utils via npm\nDESCRIPTION: This command installs the @deephaven/utils package as a dependency in your project using npm. The --save flag adds it to your package.json file.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/utils\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Grid Package\nDESCRIPTION: npm command to install the @deephaven/grid package as a project dependency\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/grid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/grid\n```\n\n----------------------------------------\n\nTITLE: Custom Vite Configuration for JS Plugins Proxying\nDESCRIPTION: Example TypeScript configuration for vite.config.local.ts that extends the base configuration to proxy js-plugins requests to a local development server.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig((config: ConfigEnv) => {\n  const baseConfig = (createBaseConfig as UserConfigFn)(config) as UserConfig;\n\n  return {\n    ...baseConfig,\n    server: {\n      ...baseConfig.server,\n      proxy: {\n        ...baseConfig.server?.proxy,\n        '/js-plugins': {\n          target: 'http://localhost:5173',\n          changeOrigin: true,\n          rewrite: path => path.replace(/^\\/js-plugins/, ''),\n        },\n      },\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Plugin Package via NPM\nDESCRIPTION: Command to install the @deephaven/plugin package as a dependency in a JavaScript project using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/plugin\n```\n\n----------------------------------------\n\nTITLE: Installing @deephaven/jsapi-shim via npm\nDESCRIPTION: Command to install the @deephaven/jsapi-shim package as a project dependency using npm.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/jsapi-shim/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/jsapi-shim\n```\n\n----------------------------------------\n\nTITLE: Configuring JS Plugins Development Port\nDESCRIPTION: Configuration setting for .env.development.local file that enables DHC to proxy js-plugins requests to a local development server for plugin development.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_JS_PLUGINS_DEV_PORT=4100\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Deephaven Golden Layout\nDESCRIPTION: Commands to run tests in watch mode and for CI environments, with a note about potential browser crashes during watch mode.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/golden-layout/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:ci\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Log Package\nDESCRIPTION: Command to install the @deephaven/log package using npm package manager.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/log/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deephaven/log\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Golden Layout Package\nDESCRIPTION: Instructions for installing the @deephaven/golden-layout package using npm and importing it into a JavaScript project.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/golden-layout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @deephaven/golden-layout\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport GoldenLayout from @deephaven/golden-layout\n```\n\n----------------------------------------\n\nTITLE: Performance Improvement Entry\nDESCRIPTION: Documentation of performance improvement using fast-deep-equal\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/dashboard/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Performance Improvements\n\n- Use `fast-deep-equal` instead of `deep-equal ([#1979](https://github.com/deephaven/web-client-ui/issues/1979)) ([3f3de9f](https://github.com/deephaven/web-client-ui/commit/3f3de9fd6a150f59cf6bf8e08eb1c11f0d9d93e1))\n```\n\n----------------------------------------\n\nTITLE: Commit Hash Link\nDESCRIPTION: Git commit link for chart error panel feature\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/chart/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n309ff795dcb367fc9b7b6f2abb4a07b10cf8ab55\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Block\nDESCRIPTION: A standard markdown changelog block showing version updates with semantic versioning and commit references\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/embed-chart/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.56.0](https://github.com/deephaven/web-client-ui/compare/v0.55.0...v0.56.0) (2023-12-11)\n\n### Features\n\n- Add embed-widget ([#1668](https://github.com/deephaven/web-client-ui/issues/1668)) ([1b06675](https://github.com/deephaven/web-client-ui/commit/1b06675e54b3dd4802078f9904408b691619611f)), closes [#1629](https://github.com/deephaven/web-client-ui/issues/1629)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Version history entries for @deephaven/stylelint-config package showing version comparisons and dates. All entries indicate version bumps without functional changes.\nSOURCE: https://github.com/deephaven/web-client-ui/blob/main/packages/stylelint-config/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.48.0](https://github.com/deephaven/web-client-ui/compare/v0.47.0...v0.48.0) (2023-09-12)\n\n**Note:** Version bump only for package @deephaven/stylelint-config\n```"
  }
]