[
  {
    "owner": "googlecloudplatform",
    "repo": "java-docs-samples",
    "content": "TITLE: Setting Up Google Cloud Authentication\nDESCRIPTION: Command to authenticate with Google Cloud using application-default login, which initiates an OAuth2 flow for local development.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Downloading Cloud SQL SSL server certificate\nDESCRIPTION: Downloads the SSL server certificate for a Cloud SQL instance and saves it to a local PEM file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta sql ssl server-ca-certs list \\\n  --format=\"value(cert)\" \\\n  --instance=INSTANCE_NAME > \\\n  server-ca.pem\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Template for Source Files\nDESCRIPTION: Required copyright and license information header that must be included in every source code file in the repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating a new Google Cloud Storage bucket using Java\nDESCRIPTION: This command runs the QuickstartSample Java class to create a new Google Cloud Storage bucket. It demonstrates how to use the sample code to interact with Cloud Storage.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/cloud-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.example.storage.QuickstartSample \\\n    -Dexec.args=\"my-bucket-name\"\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow Flex Template\nDESCRIPTION: This snippet runs the Dataflow flex template using the gcloud command-line tool. It specifies the template file location, region, and output parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/getting_started/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngcloud dataflow flex-template run \"flex-`date +%Y%m%d-%H%M%S`\"  \\\n    --template-file-gcs-location \"gs://$BUCKET/getting_started_java.json\" \\\n    --region $REGION \\\n    --parameters output=\"gs://$BUCKET/output-\"\n```\n\n----------------------------------------\n\nTITLE: Querying BigQuery Results in SQL\nDESCRIPTION: Executes a BigQuery query to check the results of the Dataflow pipeline.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `$PROJECT.$DATASET.$TABLE`\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine Flexible Environment\nDESCRIPTION: Maven command to build and deploy the backend module to App Engine flexible environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-backend/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting queue ID environment variable\nDESCRIPTION: Command to set the QUEUE_ID environment variable to the Cloud Tasks queue ID that was created. Queue IDs can be listed using 'gcloud tasks queues list'.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport QUEUE_ID=my-appengine-queue\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application to Google Cloud\nDESCRIPTION: Command to package and deploy the App Engine application to Google Cloud Platform. Requires replacing placeholder values with actual project ID and version number.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/requests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Pattern for Java Snippets\nDESCRIPTION: Shows the proper way to handle exceptions in Java samples. The code catches specific exceptions with clear comments on how to resolve them.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ntry {\n  // Do something\n} catch (IllegalArgumentException ok) {\n  // IllegalArgumentException's are thrown when an invalid argument has been passed to a function. Ok to ignore.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Google Cloud Libraries BOM in Maven Projects\nDESCRIPTION: XML configuration demonstrating how to use the libraries-bom for managing Google Cloud client library dependencies instead of explicitly declaring versions for each library.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>com.google.cloud</groupId>\n        <artifactId>libraries-bom</artifactId>\n        <version>SPECIFY_LATEST_VERSION</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.google.cloud</groupId>\n      <artifactId>google-cloud-storage</artifactId>\n    </dependency>\n  </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud CLI\nDESCRIPTION: Commands for authenticating with Google Cloud. Users can choose between initializing gcloud or logging in with application-default credentials.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud init\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud beta auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Project\nDESCRIPTION: Command to initialize the Google Cloud SDK and create a new App Engine application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/guestbook-cloud-firestore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Testing Region Tags with JUnit4 in Java\nDESCRIPTION: Example of how to structure JUnit4 test classes for testing code snippets with region tags. The test methods should include the region tag name in camel-case followed by a description of the test case.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.example;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/**\n * Store region_tag in test method name, camel-cased\n */ \n@RunWith(JUnit4.class)\npublic class SomeClassIT {\n  @Test public void regionTag_shouldPass() throws Exception { }\n\n  @Test public void regionTag_shouldFail() throws Exception {\n    Assert.fail(\"should fail\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Java class with Maven\nDESCRIPTION: This command demonstrates how to run a specific Java class using Maven, allowing for property setting and argument passing.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/cloud-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.example.storage.ClassName \\\n    -DpropertyName=propertyValue \\\n -Dexec.args=\"any arguments to the app\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Run Job\nDESCRIPTION: Creates a new Cloud Run job named 'job-quickstart' using the gcloud CLI. Configures the job with 50 tasks, environment variables, and 10 max retries.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/jobs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngcloud run jobs create job-quickstart \\\n  --image=gcr.io/$PROJECT_ID/logger-job \\\n  --tasks 50 \\\n  --set-env-vars=SLEEP_MS=10000 \\\n  --set-env-vars=FAIL_RATE=0.5 \\\n  --max-retries 10\n```\n\n----------------------------------------\n\nTITLE: Deploying Quarkus Application to Google App Engine Standard\nDESCRIPTION: Command for deploying a Quarkus application to Google App Engine standard environment. This uses the gcloud CLI tool to handle the deployment process.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/quarkus-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Setting project ID environment variable\nDESCRIPTION: Command to set the GOOGLE_CLOUD_PROJECT environment variable to your Google Cloud project ID, which is required for the sample application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_CLOUD_PROJECT=<YOUR_GOOGLE_CLOUD_PROJECT>\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for project configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: App Engine Staging Command\nDESCRIPTION: Maven command to stage files for upload to App Engine runtime environment. This command prepares files in the appengine-staging directory for deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:stage\n```\n\n----------------------------------------\n\nTITLE: Deploying a Java application to Cloud Run\nDESCRIPTION: Deploys a containerized Java application to Cloud Run with environment variables for Cloud SQL connection.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy run-postgres \\\n  --image gcr.io/[YOUR_PROJECT_ID]/run-postgres \\\n  --platform managed \\\n  --allow-unauthenticated \\\n  --region [REGION] \\\n  --update-env-vars INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME] \\\n  --update-env-vars DB_USER=[MY_DB_USER] \\\n  --update-env-vars DB_PASS=[MY_DB_PASS] \\\n  --update-env-vars DB_NAME=[MY_DB]\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow streaming pipeline with Maven\nDESCRIPTION: Execute the Dataflow streaming pipeline using Maven, reading from Pub/Sub and writing to GCS.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java \\\n  -Dexec.mainClass=com.examples.pubsub.streaming.PubSubToGcs \\\n  -Dexec.cleanupDaemonThreads=false \\\n  -Dexec.args=\"\\\n    --project=$PROJECT_NAME \\\n    --region=$REGION \\\n    --inputTopic=projects/$PROJECT_NAME/topics/cron-topic \\\n    --output=gs://$BUCKET_NAME/samples/output \\\n    --gcpTempLocation=gs://$BUCKET_NAME/temp \\\n    --runner=DataflowRunner \\\n    --windowSize=2\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloud Run with Secrets\nDESCRIPTION: This snippet demonstrates deploying the application to Cloud Run using secrets for sensitive information. It shows how to specify the Cloud SQL instance and update secrets for connection details.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta run deploy SERVICE --image gcr.io/[YOUR_PROJECT_ID]/run-sql \\\n    --add-cloudsql-instances [INSTANCE_CONNECTION_NAME] \\\n    --update-secrets INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME_SECRET]:latest,\\\n      DB_USER=[DB_USER_SECRET]:latest, \\\n      DB_PASS=[DB_PASS_SECRET]:latest, \\\n      DB_NAME=[DB_NAME_SECRET]:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Google Cloud Project\nDESCRIPTION: Commands to set the necessary environment variables for authentication and project identification. These variables are essential for the fraud detection system to interact with Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS={YOUR CREDS PATH}\nexport PROJECT_ID={YOUR PROJECT ID}\n```\n\n----------------------------------------\n\nTITLE: Migration Script from Java 8 to Java 17\nDESCRIPTION: Shell commands to clone the samples repository and automatically update all appengine-web.xml files from Java 8 to Java 17 configuration, with separate commands for Linux and MacOS.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java17-bundled-services/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\ncd java-docs-samples\ncp -pr appengine-java8 /tmp/java17-samples\ncd /tmp/java17-samples\n# On Linux:\nshopt -s globstar dotglob\nfor f in **/appengine-web.xml; do sed -i 's.<runtime>java8</runtime>.<runtime>java17</runtime><app-engine-apis>true</app-engine-apis>.' ${f}; done \n# on MacOS\nfor f in **/appengine-web.xml; do sed -i'' -e 's.<runtime>java8</runtime>.<runtime>java17</runtime><app-engine-apis>true</app-engine-apis>.' ${f}; done\n```\n\n----------------------------------------\n\nTITLE: Building Container Image for Cloud Run Deployment\nDESCRIPTION: This snippet shows how to build a container image for the application using Jib Maven plugin. It specifies the target image repository in Google Container Registry.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package com.google.cloud.tools:jib-maven-plugin:2.8.0:build \\\n -Dimage=gcr.io/[YOUR_PROJECT_ID]/run-mysql -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cloud SQL MySQL Connection\nDESCRIPTION: This snippet demonstrates how to set environment variables for connecting to a Cloud SQL MySQL instance. It includes the path to the service account key, instance connection name, database user, password, and name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/service/account/key.json\nexport INSTANCE_CONNECTION_NAME='<MY-PROJECT>:<INSTANCE-REGION>:<INSTANCE-NAME>'\nexport DB_USER='my-db-user'\nexport DB_PASS='my-db-pass'\nexport DB_NAME='my_db'\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying to Cloud Run\nDESCRIPTION: Commands for building container image using Jib and deploying to Cloud Run with necessary environment variables.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/servlet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package com.google.cloud.tools:jib-maven-plugin:2.8.0:build \\\n -Dimage=gcr.io/[YOUR_PROJECT_ID]/run-sqlserver -DskipTests\n\ngcloud run deploy run-sqlserver \\\n    --image gcr.io/[YOUR_PROJECT_ID]/run-sqlserver \\\n    --platform managed \\\n    --allow-unauthenticated \\\n    --region [REGION] \\\n    --update-env-vars INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME] \\\n    --update-env-vars DB_USER=[MY_DB_USER] \\\n    --update-env-vars DB_PASS=[MY_DB_PASS] \\\n    --update-env-vars DB_NAME=[MY_DB]\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for App Engine deployment. This sets up authentication and configuration for the Google Cloud project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Cloud Monitoring Sample Commands\nDESCRIPTION: Detailed usage instructions for various commands supported by the Cloud Monitoring sample application, including listing, backing up, restoring, and managing alert policies.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: list [-p <PROJECT_ID>]\nLists alert policies.\n -p,--projectid <PROJECT_ID>   Your Google project id.\n\nusage: [backup|restore] [-j <JSON_PATH>] [-p <PROJECT_ID>]\nBacks up or restores alert policies.\n -j,--jsonPath <JSON_PATH>     Path to json file where alert polices are\n                               saved and restored.\n -p,--projectid <PROJECT_ID>   Your Google project id.\n\nusage: replace-channels -a <ALERT_ID> [-c <CHANNEL_ID>] [-p <PROJECT_ID>]\nReplaces alert policy notification channels.\n -a,--alert-id <ALERT_ID>       The id of the alert policy whose channels\n                                will be replaced.\n -c,--channel-id <CHANNEL_ID>   A channel id.  Repeat this option to set\n                                multiple channel ids.\n -p,--projectid <PROJECT_ID>    Your Google project id.\n\nusage: [enable|disable] [-d <FILTER>] [-p <PROJECT_ID>]\nEnables/disables alert policies.\n -d,--filter <FILTER>          See\n                               https://cloud.google.com/monitoring/api/v3/\n                               filters.\n -p,--projectid <PROJECT_ID>   Your Google project id.\n```\n\n----------------------------------------\n\nTITLE: Setting Cloud SQL Connection String Environment Variable\nDESCRIPTION: Examples of setting the CLOUD_SQL_CONNECTION_STRING environment variable for MySQL and PostgreSQL connections using R2DBC.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUD_SQL_CONNECTION_STRING=r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUD_SQL_CONNECTION_STRING=r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable Change Streams Hello World Sample\nDESCRIPTION: This command runs the Hello World sample for Bigtable Change Streams. It uses Maven to compile and execute the Java class, passing necessary arguments for project, instance, and table IDs.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/change-streams/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=ChangeStreamsHelloWorld \\\n\"-Dexec.args=--project=$GOOGLE_CLOUD_PROJECT --bigtableProjectId=$BIGTABLE_PROJECT \\\n--bigtableInstanceId=$INSTANCE_ID --bigtableTableId=$TABLE_ID \\\n--runner=dataflow --region=$REGION --experiments=use_runner_v2\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Maven-based App to App Engine\nDESCRIPTION: Command to clean, package, and deploy the application to Google App Engine using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling Required Google Cloud APIs\nDESCRIPTION: Command to enable all the necessary Google Cloud APIs for the fraud detection system. This includes Vertex AI, Bigtable, Compute Engine, Dataflow, Pub/Sub, and Storage APIs.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud services enable aiplatform.googleapis.com bigtable.googleapis.com \\\nbigtableadmin.googleapis.com compute.googleapis.com dataflow.googleapis.com \\\npubsub.googleapis.com storage-api.googleapis.com \\\nstorage-component.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image to Google Container Registry\nDESCRIPTION: This Bash command uses Jib to build the container image and automatically push it to Google Container Registry.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmvn compile jib:build\n```\n\n----------------------------------------\n\nTITLE: Creating Bigtable Table with Change Streams Enabled\nDESCRIPTION: This command creates a Bigtable table with change streams enabled. It specifies the table ID, column families, and change stream retention period.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/change-streams/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud alpha bigtable instances tables create $TABLE_ID \\\n --column-families=cf1 --change-stream-retention-period=7d \\\n--instance=INSTANCE_ID --project=$GOOGLE_CLOUD_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable Workload Generator from Dataflow Template\nDESCRIPTION: Executes the Bigtable workload generator as a Dataflow job using the gcloud command. It specifies job name, template location, and parameters for the Bigtable instance, table, region, and workload configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nJOB_NAME=\"generate-bigtable-workload\"\ngcloud dataflow flex-template run $JOB_NAME \\\n--template-file-gcs-location \"$TEMPLATE_PATH\" \\\n--parameters bigtableInstanceId=\"$INSTANCE_ID\" \\\n--parameters bigtableTableId=\"$TABLE_ID\" \\\n--region \"$REGION\" \\\n--parameters workloadRate=$WORKLOAD_RATE\n--parameters workloadDurationMinutes=$WORKLOAD_DURATION\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application with Gradle\nDESCRIPTION: Gradle command to deploy the App Engine application to Google Cloud. This builds and uploads the application to App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew appengineDeploy\n```\n\n----------------------------------------\n\nTITLE: Running the Cloud Monitoring Sample Application\nDESCRIPTION: Commands to build and run the Cloud Monitoring sample application, demonstrating how to execute various commands with arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install  \n./manage_alerts_sample.sh \"<command> <args>\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud SQL Sample to App Engine Flexible\nDESCRIPTION: Command to package and deploy the Cloud SQL sample application to Google App Engine Flexible using Maven. It requires specifying the instance connection name, user, password, and database as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cloudsql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy -DINSTANCE_CONNECTION_NAME=instanceConnectionName -Duser=root -Dpassword=myPassword -Ddatabase=myDatabase\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Maven\nDESCRIPTION: Maven command to clean and run the Spring Boot application that demonstrates table creation, write and read operations.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/spring-data/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Running Java App Engine application locally with Maven\nDESCRIPTION: Uses the Maven gcloud plugin to run the Task Queue example locally on port 8080.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/taskqueues-push/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Publishing and Retrieving Fraud Detection Transactions with Pub/Sub\nDESCRIPTION: Commands to send a transaction to the Pub/Sub input topic and retrieve the fraud detection results from the output subscription. This demonstrates how to interact with the fraud detection system.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nINPUT_TOPIC=$(terraform output pubsub_input_topic | tr -d '\"')\nSUBSCRIPTION=$(terraform output pubsub_output_subscription | tr -d '\"')\nTRANSACTION=\"3563761482, TimestampMilliseconds=1647487125000, eb0e996a46d9f80d7339398d2c653639, 937.02, 188548615082, 38.806136, -90.321706, ?\"\n\ngcloud pubsub topics publish $INPUT_TOPIC --message=\"$TRANSACTION\"\ngcloud pubsub subscriptions pull $SUBSCRIPTION --auto-ack\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Cloud Run\nDESCRIPTION: This snippet demonstrates how to deploy the application to Cloud Run using the gcloud CLI. It includes setting environment variables for the Cloud SQL connection and allows unauthenticated access.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy run-mysql \\\n    --image gcr.io/[YOUR_PROJECT_ID]/run-mysql \\\n    --platform managed \\\n    --allow-unauthenticated \\\n    --region [REGION] \\\n    --update-env-vars INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME] \\\n    --update-env-vars DB_USER=[MY_DB_USER] \\\n    --update-env-vars DB_PASS=[MY_DB_PASS] \\\n    --update-env-vars DB_NAME=[MY_DB]\n```\n\n----------------------------------------\n\nTITLE: Creating and Downloading Client Certificates for Cloud SQL\nDESCRIPTION: This snippet demonstrates how to create and download client public key certificate and private key for Cloud SQL using the gcloud CLI. It includes commands to create a client certificate and retrieve its public key.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql ssl client-certs create CERT_NAME client-key.pem --instance=INSTANCE_NAME\n\ngcloud sql ssl client-certs describe CERT_NAME \\\n  --instance=INSTANCE_NAME \\\n  --format=\"value(cert)\" > client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Importing SSL Certificate to Java Truststore\nDESCRIPTION: Command to import the Cloud SQL server certificate into a Java truststore for secure connections.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/servlet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -importcert -alias MySQLCACert -file server-ca.pem \\\n-keystore <truststore-filename> -storepass <password>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine app.yaml for Java 11\nDESCRIPTION: Defines the app.yaml configuration for Java 11 runtime, specifying the entrypoint to start the Jetty server with the WAR file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nruntime: java11\nentrypoint: 'java -cp \"*\" com.example.appengine.jetty.Main helloworld.war'\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Run secrets with Secret Manager\nDESCRIPTION: Creates a secret in Secret Manager for storing Cloud SQL connection information securely.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"my-awesome-project:us-central1:my-cloud-sql-instance\" | \\\n    gcloud secrets versions add INSTANCE_CONNECTION_NAME_SECRET --data-file=-\n```\n\n----------------------------------------\n\nTITLE: Building Flex Template in Bash\nDESCRIPTION: Builds the Flex Template by creating an Uber JAR, setting up the template spec file, and building the container image.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n\nexport TEMPLATE_PATH=\"gs://$BUCKET/samples/dataflow/templates/streaming-beam-sql.json\"\nexport TEMPLATE_IMAGE=\"gcr.io/$PROJECT/samples/dataflow/streaming-beam-sql:latest\"\n\ngcloud dataflow flex-template build $TEMPLATE_PATH \\\n    --image-gcr-path \"$TEMPLATE_IMAGE\" \\\n    --sdk-language \"JAVA\" \\\n    --flex-template-base-image JAVA11 \\\n    --metadata-file \"metadata.json\" \\\n    --jar \"target/streaming-beam-sql-1.0.jar\" \\\n    --env FLEX_TEMPLATE_JAVA_MAIN_CLASS=\"org.apache.beam.samples.StreamingBeamSql\"\n```\n\n----------------------------------------\n\nTITLE: Running Authentication Example with Explicit JSON Credentials\nDESCRIPTION: Command to run the AuthExample class with explicitly provided JSON credentials file path.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.google.cloud.auth.samples.AuthExample\n    -Dexec.args=\"explicit [path-to-credentials-json]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Java 17 Runtime in appengine-web.xml\nDESCRIPTION: XML configuration required in appengine-web.xml to enable Java 17 runtime and App Engine APIs. This is the key difference between Java 8 and Java 17 applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java17-bundled-services/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n    <runtime>java17</runtime>\n    <app-engine-apis>true</app-engine-apis>\n</appengine-web-app>\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Run Service for GCS Events\nDESCRIPTION: Deploys the application to Cloud Run using the source code in the current directory, targeting the us-central1 region.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy $MY_RUN_SERVICE \\\n--source .\n--region us-central1\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Google Cloud Functions\nDESCRIPTION: This snippet shows how to deploy the application as a Google Cloud Function using the gcloud CLI. It specifies the trigger type, entry point, runtime, and environment variables file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngcloud functions deploy sql-sample \\\n  --trigger-http \\\n  --entry-point com.example.cloudsql.functions.Main \\\n  --runtime java11 \\\n  --env-vars-file .env.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Permissions for Service Accounts\nDESCRIPTION: Grants necessary encryption/decryption permissions to Dataflow, Compute Engine, and BigQuery service accounts\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/encryption-keys/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport PROJECT=$(gcloud config get-value project)\nexport PROJECT_NUMBER=$(gcloud projects list --filter $PROJECT --format \"value(PROJECT_NUMBER)\")\n\n# Grant Encrypter/Decrypter permissions to the Dataflow service account.\ngcloud projects add-iam-policy-binding $PROJECT \\\n  --member serviceAccount:service-$PROJECT_NUMBER@dataflow-service-producer-prod.iam.gserviceaccount.com \\\n  --role roles/cloudkms.cryptoKeyEncrypterDecrypter\n\n# Grant Encrypter/Decrypter permissions to the Compute Engine service account.\ngcloud projects add-iam-policy-binding $PROJECT \\\n  --member serviceAccount:service-$PROJECT_NUMBER@compute-system.iam.gserviceaccount.com \\\n  --role roles/cloudkms.cryptoKeyEncrypterDecrypter\n\n# Grant Encrypter/Decrypter permissions to the BigQuery service account.\ngcloud projects add-iam-policy-binding $PROJECT \\\n  --member serviceAccount:bq-$PROJECT_NUMBER@bigquery-encryption.iam.gserviceaccount.com \\\n  --role roles/cloudkms.cryptoKeyEncrypterDecrypter\n```\n\n----------------------------------------\n\nTITLE: Deploying Google App Engine Search API Sample to Cloud\nDESCRIPTION: Commands to package and deploy the App Engine Search API sample application to Google Cloud using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/search/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud authentication for App Engine\nDESCRIPTION: Commands for authenticating with Google Cloud before deploying App Engine applications. Provides two alternative methods for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/gaeinfo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow Flex Template Job\nDESCRIPTION: Executes the Dataflow Flex Template job to process data from Kafka to BigQuery.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport REGION=\"us-central1\"\n\ngcloud dataflow flex-template run \"kafka-to-bigquery-`date +%Y%m%d-%H%M%S`\" \\\n    --template-file-gcs-location \"$TEMPLATE_PATH\" \\\n    --parameters inputTopic=\"messages\" \\\n    --parameters outputTable=\"$PROJECT:$DATASET.$TABLE\" \\\n    --parameters bootstrapServer=\"$KAFKA_ADDRESS:9092\" \\\n    --region \"$REGION\"\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Project via CLI\nDESCRIPTION: Commands to create a new Google Cloud project using the gcloud CLI tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport PROJECT=your-google-cloud-project-id\ngcloud projects create $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Dataflow Flex Template\nDESCRIPTION: Builds the Kafka to BigQuery pipeline as a Dataflow Flex Template and deploys it to Google Cloud Storage.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n\nexport TEMPLATE_IMAGE=\"gcr.io/$PROJECT/samples/dataflow/kafka-to-bigquery-sql:latest\"\nexport TEMPLATE_PATH=\"gs://$BUCKET/samples/dataflow/templates/kafka-to-bigquery.json\"\n\ngcloud dataflow flex-template build $TEMPLATE_PATH \\\n    --image-gcr-path \"$TEMPLATE_IMAGE\" \\\n    --sdk-language \"JAVA\" \\\n    --flex-template-base-image JAVA11 \\\n    --metadata-file \"metadata.json\" \\\n    --jar \"target/kafka-to-bigquery-1.0.jar\" \\\n    --env FLEX_TEMPLATE_JAVA_MAIN_CLASS=\"org.apache.beam.samples.KafkaToBigQuery\"\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Topic\nDESCRIPTION: Command to create a new Pub/Sub topic using the gcloud CLI\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/pubsub/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics create <your-topic-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jib Maven Plugin for Google Cloud Run Deployment\nDESCRIPTION: This XML snippet configures the Jib Maven plugin to build and push a Docker image to Google Container Registry. It requires updating the image name with the user's Google Cloud Project ID and sample name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>jib-maven-plugin</artifactId>\n  <version>2.0.0</version>\n  <configuration>\n    <to>\n      <image>gcr.io/PROJECT_ID/SAMPLE_NAME</image>\n    </to>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Deploying the application to Google App Engine\nDESCRIPTION: Command to deploy the Vert.x application to Google App Engine standard environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/vertx-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for GCS Event Handler\nDESCRIPTION: Sets up necessary environment variables for the deployment process, including service names, trigger names, bucket names, and project identifiers.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MY_RUN_SERVICE=gcs-service\nexport MY_GCS_TRIGGER=gcs-trigger\nexport MY_GCS_BUCKET=\"$(gcloud config get-value project)-gcs-bucket\"\nexport SERVICE_ACCOUNT=gcs-trigger-svcacct\nexport PROJECT_ID=$(gcloud config get-value project)\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Cloud Run\nDESCRIPTION: Maven command to build a Docker image and push it to Google Container Registry for Cloud Run deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package com.google.cloud.tools:jib-maven-plugin:2.8.0:build \\\n -Dimage=gcr.io/[YOUR_PROJECT_ID]/r2dbc-sample -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Deploying Service Configuration to Google Cloud Endpoints\nDESCRIPTION: Commands to deploy the generated protocol buffer descriptor and API configuration to Google Cloud Endpoints Service Management, and list the deployed configurations.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud endpoints services deploy out.pb api_config.yaml\n# The Config ID should be printed out, looks like: 2017-02-01r0, remember this\n\n# set your project to make commands easier\nGCLOUD_PROJECT=<Your Project ID>\n\n# Print out your Config ID again, in case you missed it\ngcloud endpoints configs list --service hellogrpc.endpoints.${GCLOUD_PROJECT}.cloud.goog\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Flex Application with Maven\nDESCRIPTION: Maven command to clean, package, and deploy the application to App Engine Flexible Environment. This builds the application and deploys it according to the configuration in app.yaml.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/cloudstorage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK after installation. This sets up the gcloud command line tool with your account and project configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sparkjava-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Run service with Secret Manager integration\nDESCRIPTION: Deploys a Cloud Run service with secrets from Secret Manager rather than using environment variables directly for better security.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta run deploy SERVICE --image gcr.io/[YOUR_PROJECT_ID]/run-sql \\\n    --add-cloudsql-instances [INSTANCE_CONNECTION_NAME] \\\n    --update-secrets INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME_SECRET]:latest,\\\n      DB_USER=[DB_USER_SECRET]:latest, \\\n      DB_PASS=[DB_PASS_SECRET]:latest, \\\n      DB_NAME=[DB_NAME_SECRET]:latest\n```\n\n----------------------------------------\n\nTITLE: Creating an Authenticated Push Subscription for Pub/Sub\nDESCRIPTION: Command to create a subscription for authenticated pushes with a service account. Requires the service account to have the Service Account Token Creator Role and includes optional audience field configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub subscriptions create <your-subscription-name> \\\n  --topic <your-topic-name> \\\n  --push-endpoint \\\n    https://<your-project-id>.appspot.com/pubsub/authenticated-push?token=<your-verification-token> \\\n  --ack-deadline 30 \\\n  --push-auth-service-account=[your-service-account-email] \\\n  --push-auth-token-audience=example.com\n```\n\n----------------------------------------\n\nTITLE: Region Tag Pattern for Java Snippets\nDESCRIPTION: Example of the proper way to structure region tags in Java code snippets. Region tags should include the full class with imports but start below the package declaration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// [START product_example]\nimport com.example.resource;\n\npublic class exampleSnippet {\n  // Snippet methods ...\n}\n// [END product_example]\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow Job with CMEK\nDESCRIPTION: Executes a Dataflow pipeline that reads from public BigQuery dataset and writes to a CMEK-protected table\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/encryption-keys/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile exec:java \\\n  -Dexec.mainClass=com.example.dataflow.cmek.BigQueryKmsKey \\\n  -Dexec.args=\"\\\n    --outputBigQueryTable=$PROJECT:$DATASET.$TABLE \\\n    --kmsKey=$KMS_KEY_ID \\\n    --project=$PROJECT \\\n    --tempLocation=gs://$BUCKET/samples/dataflow/kms/tmp \\\n    --runner=DataflowRunner\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI for deployment to Google Cloud Platform.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/requests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Running Bigtable Workload Generator\nDESCRIPTION: Defines environment variables needed for running the Bigtable workload generator template, including template path, instance ID, table ID, region, and optional workload parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTEMPLATE_PATH=\"gs://cloud-bigtable-dataflow-templates/generate-workload.json\"\nINSTANCE_ID=YOUR-INSTANCE-ID\nTABLE_ID=YOUR-TABLE-ID\nREGION=us-central1\nWORKLOAD_RATE=100 # Optional, default to 1000\nWORKLOAD_DURATION=15 # Optional, default to 10\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed Application\nDESCRIPTION: Command to open the deployed application in a browser. The application can also be accessed directly via the appspot.com URL.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/http-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Deploying Application\nDESCRIPTION: Commands to deploy the application using Maven and view it in the browser.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/guestbook-cloud-firestore/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Tasks Queue using gcloud CLI\nDESCRIPTION: This command creates a default queue using the Google Cloud SDK's gcloud command-line tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud tasks queues create default\n```\n\n----------------------------------------\n\nTITLE: Client Initialization Pattern for Google Cloud Libraries\nDESCRIPTION: Demonstrates the preferred approach for initializing Google Cloud clients using try-with-resources and providing appropriate cleanup comments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Initialize client that will be used to send requests. This client only needs to be created\n// once, and can be reused for multiple requests. After completing all of your requests, call\n// the \"close\" method on the client to safely clean up any remaining background resources.\ntry (DlpServiceClient dlp = DlpServiceClient.create()) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bigtable Table for Wordcount Example\nDESCRIPTION: Command using the cbt tool to create a Bigtable table for storing wordcount results with a column family named 'cf'.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  -instance=$BIGTABLE_SPARK_INSTANCE_ID \\\n  createtable $BIGTABLE_SPARK_WORDCOUNT_TABLE \\\n  \"families=cf\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cron Job Configuration to Google App Engine\nDESCRIPTION: This command deploys the cron job configuration specified in the cron.yaml file to Google App Engine. It sets up scheduled tasks for the application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/datastore-schedule-export/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngcloud app deploy cron.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application\nDESCRIPTION: Command to create a new App Engine application within the current Google Cloud project. This is a prerequisite before deploying any App Engine services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sparkjava-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Importing Server Certificate into Java Truststore\nDESCRIPTION: This snippet shows how to import the server certificate into a custom Java truststore using the keytool command. It demonstrates the syntax for importing a certificate file into a keystore with a specified alias and password.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -importcert -alias MySQLCACert -file server-ca.pem \\\n    -keystore <truststore-filename> -storepass <password>\n```\n\n----------------------------------------\n\nTITLE: Deploying a Java application to Google App Engine\nDESCRIPTION: Builds and deploys a Java application to Google App Engine Standard environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Creating a New App Engine Project\nDESCRIPTION: Command for creating a new App Engine project, which is required if this is your first time using App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application using Maven\nDESCRIPTION: This Maven command cleans the project, packages it, and deploys it to Google App Engine. It utilizes the App Engine Maven plugin for deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets for Cloud Run Deployment\nDESCRIPTION: This snippet shows how to create secrets using the gcloud CLI for use in Cloud Run deployments. It demonstrates creating a secret for the instance connection name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"my-awesome-project:us-central1:my-cloud-sql-instance\" | \\\n    gcloud secrets versions add INSTANCE_CONNECTION_NAME_SECRET --data-file=-\n```\n\n----------------------------------------\n\nTITLE: Adding Jetty Main class dependency in pom.xml\nDESCRIPTION: Adds a dependency on the appengine-simple-jetty-main artifact which provides the Main class that starts the embedded Jetty server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.example.appengine</groupId>\n  <artifactId>simple-jetty-main</artifactId>\n  <version>1</version>\n  <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline with Gradle\nDESCRIPTION: Command to execute the streaming pipeline using Gradle with configurable parameters\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsublite/streaming-analytics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngradle execute -Dexec.args=\"\\\n    --subscription=projects/$PROJECT_ID/locations/$LITE_LOCATION/subscriptions/$SUBSCRIPTION \\\n    --output=gs://$BUCKET/samples/output \\\n    --windowSize=1 \\\n    --runner=DataflowRunner \\\n    --project=$PROJECT_ID \\\n    --region=$DATAFLOW_REGION \\\n    --tempLocation=gs://$BUCKET/temp\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Java Application to Google App Engine\nDESCRIPTION: This Maven command packages the Java application and deploys it to Google App Engine. It cleans the project, creates a package, and then uses the App Engine plugin to deploy the application to the cloud.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a Pub/Sub Topic in Bash\nDESCRIPTION: Command to create a Pub/Sub topic using the previously defined environment variable. This topic will be used for publishing and receiving messages.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics create $PUBSUB_TOPIC\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Maven Plugin\nDESCRIPTION: XML configuration for the App Engine Maven Plugin in pom.xml. This plugin is used for local development and deployment of the application to App Engine, requiring your Google Cloud Project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sparkjava-helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>appengine-maven-plugin</artifactId>\n  <version>2.2.0</version>\n  <configuration>\n    <projectId>myProjectId</projectId>\n    <version>GCLOUD_CONFIG</version>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Cloning Google Cloud Platform Java Samples Repository\nDESCRIPTION: Commands to clone the Google Cloud Platform Java samples repository and navigate to the BigQuery example directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigquery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\ncd appengine-java8/bigquery\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine Flex\nDESCRIPTION: Maven commands to clean, package and deploy the application to Google App Engine Flexible environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jetty/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Google Cloud Run Container Locally\nDESCRIPTION: This Bash command runs the built container locally, mapping the container's port to the host and setting environment variables. It requires replacing PROJECT_ID and SAMPLE_NAME with appropriate values.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nPORT=8080 && docker run --rm -p 9090:${PORT} -e PORT=${PORT} gcr.io/PROJECT_ID/SAMPLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Direct Execution\nDESCRIPTION: Defines environment variables needed for directly running the Bigtable workload generator without using a template, including project ID, instance ID, region, and workload parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=your-project-id\nINSTANCE_ID=your-instance-id\nREGION=us-central1\nTABLE_ID=your-table-id \nWORKLOAD_RATE=100 # Optional\nWORKLOAD_DURATION=15 # Optional, default to 10\n```\n\n----------------------------------------\n\nTITLE: Building Dataflow Flex Template\nDESCRIPTION: This snippet builds a Dataflow flex template using the gcloud command-line tool. It specifies the template location, image path, SDK language, base image, metadata file, JAR file, and main class.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/getting_started/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport PROJECT=\"project-id\"\n\ngcloud dataflow flex-template build gs://$BUCKET/getting_started_java.json \\\n    --image-gcr-path \"$REGION-docker.pkg.dev/$PROJECT/$REPOSITORY/getting-started-java:latest\" \\\n    --sdk-language \"JAVA\" \\\n    --flex-template-base-image JAVA11 \\\n    --metadata-file \"metadata.json\" \\\n    --jar \"target/flex-template-getting-started-1.0.jar\" \\\n    --env FLEX_TEMPLATE_JAVA_MAIN_CLASS=\"com.example.dataflow.FlexTemplateGettingStarted\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Extended Tracing Options for Cloud Spanner in Java\nDESCRIPTION: This snippet shows how to enable API Tracing and SQL Statement Tracing for Cloud Spanner using SpannerOptions. It demonstrates setting up OpenTelemetry, extended tracing, and API tracing options.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/opentelemetry_traces/Readme.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSpannerOptions options = SpannerOptions.newBuilder()\n.setOpenTelemetry(openTelemetry)\n.setEnableExtendedTracing(true)\n.setEnableApiTracing(true)\n.build();\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application with Maven\nDESCRIPTION: Maven command to package and deploy the application to Google App Engine. After deployment, the application will be accessible at https://YOUR-PROJECT-ID.appspot.com.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sparkjava-helloworld/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket for Dataflow Template\nDESCRIPTION: This bash snippet demonstrates how to create a Cloud Storage bucket for storing Dataflow templates. It uses the 'gsutil' command to make a new bucket.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUCKET=your-gcs-bucket\ngsutil mb gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Audit Log Trigger\nDESCRIPTION: Sets up an Eventarc trigger that listens for storage.buckets.update operations on the specified bucket and forwards events to the Cloud Run service.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha events triggers create $MY_GCS_TRIGGER \\\n--target-service $MY_RUN_SERVICE \\\n--type com.google.cloud.auditlog.event \\\n--parameters methodName=storage.buckets.update \\\n--parameters serviceName=storage.googleapis.com \\\n--parameters resourceName=projects/_/buckets/\"$MY_GCS_BUCKET\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Bigtable App and Running Integration Tests with Gradle\nDESCRIPTION: This command runs integration tests and deploys the Bigtable application to App Engine Standard for Java 8 using Gradle. It requires specifying the project ID and instance ID as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigtable/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngradle -Dbigtable.projectID=PROJECTID -Dbigtable.instanceID=INSTANCEID appengineDeploy\n```\n\n----------------------------------------\n\nTITLE: Packaging the Java 11 application with Maven\nDESCRIPTION: Command to clean and package the Java 11 application using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Lite Topic and Subscription\nDESCRIPTION: Commands to create a Pub/Sub Lite topic and subscription with specified configurations\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsublite/streaming-analytics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport TOPIC=your-lite-topic\nexport SUBSCRIPTION=your-lite-subscription\nexport LITE_LOCATION=your-lite-location\n\ngcloud pubsub lite-topics create $TOPIC \\\n   --zone=$LITE_LOCATION \\\n   --partitions=1 \\\n   --per-partition-bytes=30GiB\ngcloud pubsub lite-subscriptions create $SUBSCRIPTION \\\n   --zone=$LITE_LOCATION \\\n   --topic=$TOPIC\n```\n\n----------------------------------------\n\nTITLE: Deploying Java application to Google App Engine\nDESCRIPTION: This command cleans the target directory, packages the application, and deploys it to Google App Engine Flexible environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/errorreporting/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Pub/Sub Topic\nDESCRIPTION: This command creates a new Cloud Pub/Sub topic named 'my-topic' using the gcloud CLI.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/pubsub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud pubsub topics create my-topic\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Remote API Server Locally\nDESCRIPTION: Command to run the server component locally using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/remote-README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Cloning the Google Cloud Platform Java Samples Repository\nDESCRIPTION: This command clones the Google Cloud Platform Java samples repository to the local machine, which contains the necessary code for the App Engine task handler.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud SDK CLI tool for managing Google Cloud resources and projects.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Deploying Service to Cloud Run\nDESCRIPTION: Deploys the container image to Google Cloud Run as a service named 'eventarc-generic' using the gcloud CLI.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/generic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud run deploy eventarc-generic \\\n--image gcr.io/$(gcloud config get-value project)/eventarc-generic\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Region Cloud Storage Bucket\nDESCRIPTION: Creates a new Cloud Storage bucket in the us-central1 region using the project ID defined in environment variables.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngsutil mb -p $PROJECT_ID -l us-central1 gs://\"$MY_GCS_BUCKET\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Infrastructure for Fraud Detection\nDESCRIPTION: Commands to initialize Terraform and deploy the fraud detection infrastructure to Google Cloud. This sets up Cloud Bigtable, Pub/Sub topics, Storage buckets, VertexAI models, and Dataflow jobs.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd terraform\nterraform init\nterraform apply -var=\"project_id=$PROJECT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Deploying the Bigtable Workload Generator as a Dataflow Template\nDESCRIPTION: Uses the gcloud command to build and deploy a Dataflow flex template for the workload generator. Specifies the template location, container image, metadata, JAR file, and main class to execute.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataflow flex-template build $TEMPLATE_PATH \\\n--image-gcr-path \"$TEMPLATE_IMAGE\" \\\n--sdk-language \"JAVA\" \\\n--flex-template-base-image JAVA11 \\\n--metadata-file \"metadata.json\" \\\n--jar \"target/workload-generator-0.1.jar\" \\\n--env FLEX_TEMPLATE_JAVA_MAIN_CLASS=\"bigtable.WorkloadGenerator\" \\\n--gcs-log-dir=\"$LOGS_PATH\"\n```\n\n----------------------------------------\n\nTITLE: Deploying gRPC Application to GKE\nDESCRIPTION: Deploys the gRPC application to Google Kubernetes Engine using the configured deployment YAML file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f ./deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Running the Application Locally\nDESCRIPTION: Commands to set environment variables and run the application using Maven's Jetty plugin\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/pubsub/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PUBSUB_TOPIC=<your-topic-name>\nexport PUBSUB_VERIFICATION_TOKEN=<your-verification-token>\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Configuring App YAML for Cloud SQL Connection\nDESCRIPTION: Example YAML configuration showing the environment variables that need to be replaced with actual Cloud SQL connection details.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nCLOUD_SQL_CONNECTION_NAME: '<MY-PROJECT>:<INSTANCE-REGION>:<MY-DATABASE>'\nDB_NAME: 'my_db'\nDB_USER: 'my-db-user'\nDB_PASS: 'my-db-pass'\n```\n\n----------------------------------------\n\nTITLE: Testing Cloud Run Service with Pub/Sub Message\nDESCRIPTION: These commands retrieve the Pub/Sub topic associated with the trigger and publish a test message to it. This allows verification of the Cloud Run service's event handling.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/pubsub/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport RUN_TOPIC=$(gcloud eventarc triggers describe events-pubsub-trigger \\\n  --format='value(transport.pubsub.topic)')\ngcloud pubsub topics publish $RUN_TOPIC --message \"Runner\"\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application with Maven\nDESCRIPTION: This shell command deploys the App Engine application using Maven. It uses the appengine:deploy goal to deploy the application to Google Cloud Platform.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Bigtable Table with Column Family (Shell)\nDESCRIPTION: This command creates a Bigtable table named 'mobile-time-series' with a column family 'stats_summary' using the cbt tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncbt createtable mobile-time-series families=\"stats_summary\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud SQL client certificate public key\nDESCRIPTION: Retrieves the public key for a client certificate and saves it to a local PEM file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql ssl client-certs describe CERT_NAME \\\n--instance=INSTANCE_NAME \\\n--format=\"value(cert)\" > client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring GCE Instance for gRPC\nDESCRIPTION: Creates a Google Compute Engine instance with GCI stable image and sets up project variables for deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute instances create grpc-host --image-family gci-stable --image-project google-containers --tags=http-server\ngcloud compute ssh grpc-host\n```\n\n----------------------------------------\n\nTITLE: Downloading Server Certificate for Cloud SQL Instance\nDESCRIPTION: This snippet shows how to use the gcloud CLI to download the server certificate for a Cloud SQL instance. It includes commands to list certificate information, create a new certificate, and download it to a local PEM file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta sql ssl server-ca-certs list --instance=INSTANCE_NAME\n\ngcloud beta sql ssl server-ca-certs create --instance=INSTANCE_NAME\n\ngcloud beta sql ssl server-ca-certs list \\\n  --format=\"value(cert)\" \\\n  --instance=INSTANCE_NAME > \\\n  server-ca.pem\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application\nDESCRIPTION: Maven command to package and deploy the application to Google App Engine\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/iap/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Disabling Change Streams on Bigtable Table\nDESCRIPTION: This command disables change streams on a Bigtable table by clearing the change stream retention period.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/change-streams/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngcloud alpha bigtable instances tables update $TABLE_ID --instance=$INSTANCE_ID \\\n--clear-change-stream-retention-period\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline with Maven\nDESCRIPTION: Command to execute the streaming pipeline using Maven with configurable parameters\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsublite/streaming-analytics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile exec:java \\\n  -Dexec.mainClass=examples.PubsubliteToGcs \\\n  -Dexec.args=\"\\\n    --subscription=projects/$PROJECT_ID/locations/$LITE_LOCATION/subscriptions/$SUBSCRIPTION \\\n    --output=gs://$BUCKET/samples/output \\\n    --windowSize=1 \\\n    --runner=DataflowRunner \\\n    --project=$PROJECT_ID \\\n    --region=$DATAFLOW_REGION \\\n    --tempLocation=gs://$BUCKET/temp\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cron Job Configuration\nDESCRIPTION: Google Cloud command to deploy the cron job configuration specified in cron.yaml file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cron/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud app deploy cron.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Google Cloud Run Container Locally with Service Account\nDESCRIPTION: This Bash command runs the container locally with a service account key injected for GCP service access. It sets various environment variables and mounts the credentials file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nPORT=8080 && docker run \\\n   -p 9090:${PORT} \\\n   -e PORT=${PORT} \\\n   -e K_SERVICE=dev \\\n   -e K_CONFIGURATION=dev \\\n   -e K_REVISION=dev-00001 \\\n   -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/keys/[FILE_NAME].json \\\n   -v $GOOGLE_APPLICATION_CREDENTIALS:/tmp/keys/[FILE_NAME].json:ro \\\n    gcr.io/PROJECT_ID/SAMPLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Storage bucket with gsutil\nDESCRIPTION: Command to create a new Google Cloud Storage bucket using the gsutil command-line tool. The bucket name must be globally unique.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/cloudstorage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngsutil mb gs://[your-bucket-name]\n```\n\n----------------------------------------\n\nTITLE: Creating Eventarc Trigger for Cloud Storage Events\nDESCRIPTION: Sets up an Eventarc trigger that responds to object finalization events in the specified Cloud Storage bucket and routes them to the Cloud Run service.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud eventarc triggers create $MY_GCS_TRIGGER \\\n--destination-run-service=$MY_RUN_SERVICE \\\n--destination-run-region=us-central1 \\\n--event-filters=\"type=google.cloud.storage.object.v1.finalized\" \\\n--event-filters=\"bucket=$MY_GCS_BUCKET\" \\\n--service-account=$SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Adding Jetty Main Dependency in Maven POM\nDESCRIPTION: Maven dependency configuration for adding the simple-jetty-main artifact to the project\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/appengine-simple-jetty-main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.example.appengine</groupId>\n  <artifactId>simple-jetty-main</artifactId>\n  <version>1</version>\n  <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running a single Java sample using Maven\nDESCRIPTION: This command executes a single sample Java class (BatchOperationSample) using Maven's exec:java goal.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/jobs/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"com.google.samples.BatchOperationSample\"\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account for Eventarc Trigger\nDESCRIPTION: Creates a service account and assigns necessary IAM roles for eventarc event receiving and Cloud Run invocation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud iam service-accounts create $SERVICE_ACCOUNT\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n  --member=\"serviceAccount:$SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com\" \\\n  --role=\"roles/eventarc.eventReceiver\" \\\n  --role=\"roles/run.invoker\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud SQL SSL server certificate\nDESCRIPTION: Creates a new SSL server certificate for a Cloud SQL instance using the gcloud CLI.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta sql ssl server-ca-certs create --instance=INSTANCE_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Java Application Locally with Maven\nDESCRIPTION: Command to run the Java application locally using Maven and Spring Boot.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Running Google App Engine Search API Sample Locally\nDESCRIPTION: Command to run the App Engine Search API sample application in a local development environment using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/search/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Authentication Credentials\nDESCRIPTION: Sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to the service account credentials JSON file. This is required for authenticating with Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/language/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/your-project-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Implementing SpringBootServletInitializer for WAR Deployment\nDESCRIPTION: Java code to create a SpringBootServletInitializer implementation for WAR packaging deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ServletInitializer extends SpringBootServletInitializer {\n  @Override\n  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n  return application.sources(YourApplication.class);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dataflow Template with Maven\nDESCRIPTION: This bash snippet uses Maven to compile and execute the WordCount Java class, creating a Dataflow template in the specified Cloud Storage location.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java \\\n  -Dexec.mainClass=com.example.dataflow.templates.WordCount \\\n  -Dexec.args=\"\\\n    --isCaseSensitive=false \\\n    --project=$PROJECT \\\n    --templateLocation=$TEMPLATE_LOCATION \\\n    --runner=DataflowRunner\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine\nDESCRIPTION: Command to clean, package, and deploy the application to App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/spanner/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Pub/Sub Trigger\nDESCRIPTION: This command creates an Eventarc trigger that connects the Pub/Sub topic to the Cloud Run service. It specifies the service name, region, and event type to filter.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/pubsub/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngcloud eventarc triggers create events-pubsub-trigger \\\n  --destination-run-service=cloudrun-events-pubsub \\\n  --destination-run-region=us-central1 \\\n  --event-filters=\"type=google.cloud.pubsub.topic.v1.messagePublished\"\n```\n\n----------------------------------------\n\nTITLE: Running Wordcount Spark Application\nDESCRIPTION: Command to submit the Wordcount Spark application to process text and store word frequencies in Bigtable, using spark-submit with the HBase Spark connector.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$SPARK_HOME/bin/spark-submit \\\n  --packages org.apache.hbase.connectors.spark:hbase-spark:1.0.0 \\\n  --class example.Wordcount \\\n  $BIGTABLE_SPARK_ASSEMBLY_JAR \\\n  $BIGTABLE_SPARK_PROJECT_ID $BIGTABLE_SPARK_INSTANCE_ID \\\n  $BIGTABLE_SPARK_WORDCOUNT_TABLE $BIGTABLE_SPARK_WORDCOUNT_FILE\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependency Plugin\nDESCRIPTION: Maven plugin configuration to copy dependencies to the appengine-staging directory during build\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/appengine-simple-jetty-main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-dependency-plugin</artifactId>\n  <version>3.1.1</version>\n  <executions>\n    <execution>\n      <id>copy</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>copy-dependencies</goal>\n      </goals>\n      <configuration>\n        <outputDirectory>\n          ${project.build.directory}/appengine-staging\n        </outputDirectory>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Running all Java samples using Maven\nDESCRIPTION: This command executes all sample tests using Maven's test phase with a specific test class.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/jobs/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn -Dtest=SampleTests test\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Dataset for Kafka to BigQuery Pipeline\nDESCRIPTION: Sets up a BigQuery dataset and table to store the processed data from the Kafka to BigQuery pipeline.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PROJECT=\"$(gcloud config get-value project)\"\nexport DATASET=\"beam_samples\"\nexport TABLE=\"kafka_to_bigquery\"\n\nbq mk --dataset \"$PROJECT:$DATASET\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Kafka Server on Compute Engine\nDESCRIPTION: Creates and starts a Compute Engine VM instance running the Kafka server using a custom Docker image.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport KAFKA_IMAGE=\"gcr.io/$PROJECT/samples/dataflow/kafka:latest\"\n\ngcloud builds submit --tag $KAFKA_IMAGE kafka/\n\ngcloud compute instances create-with-container kafka-vm \\\n  --zone \"$ZONE\" \\\n  --machine-type \"e2-small\" \\\n  --address \"$KAFKA_ADDRESS\" \\\n  --container-image \"$KAFKA_IMAGE\" \\\n  --container-env \"KAFKA_ADDRESS=$KAFKA_ADDRESS\" \\\n  --tags \"kafka-server\"\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Credentials\nDESCRIPTION: Command to set the GOOGLE_APPLICATION_CREDENTIALS environment variable for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/guestbook-cloud-firestore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"[PATH]\"\n```\n\n----------------------------------------\n\nTITLE: Running Code Samples with Maven\nDESCRIPTION: Commands for executing Java code samples and running unit tests using Maven\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/retail/interactive-tutorials/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=\"package.CodeSampleClass\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn test -Dtest=TestClassName\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Running DownscopedAccessTokenConsumer Example\nDESCRIPTION: Command to run the DownscopedAccessTokenConsumer example which demonstrates using downscoped access tokens to access Cloud Storage resources.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.google.cloud.auth.samples.DownscopedAccessTokenConsumer\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials in Bash\nDESCRIPTION: Sets the environment variable for Google Cloud authentication credentials. This is required for authenticating with Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/your-project-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable Change Streams Song Rank Sample\nDESCRIPTION: This command runs the Song Rank sample for Bigtable Change Streams. It compiles and executes the Java class, specifying project, instance, table IDs, and output location.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/change-streams/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=SongRank \\\n\"-Dexec.args=--project=$GOOGLE_CLOUD_PROJECT --bigtableProjectId=$BIGTABLE_PROJECT \\\n--bigtableInstanceId=$INSTANCE_ID --bigtableTableId=$TABLE_ID --outputLocation=$OUTPUT_LOCATION \\\n--runner=dataflow --region=$REGION --experiments=use_runner_v2\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Micronaut Application to Google App Engine with gcloud\nDESCRIPTION: Command to deploy a Micronaut application to Google App Engine standard environment. This uses the gcloud CLI tool to deploy the application according to the configuration in the app.yaml file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/micronaut-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Running CopyTable Spark Application\nDESCRIPTION: Command to submit the CopyTable Spark application that copies data from one Bigtable table to another using spark-submit with the HBase Spark connector.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$SPARK_HOME/bin/spark-submit \\\n  --packages org.apache.hbase.connectors.spark:hbase-spark:1.0.0 \\\n  --class example.CopyTable \\\n  $BIGTABLE_SPARK_ASSEMBLY_JAR \\\n  $BIGTABLE_SPARK_PROJECT_ID $BIGTABLE_SPARK_INSTANCE_ID \\\n  $BIGTABLE_SPARK_WORDCOUNT_TABLE $BIGTABLE_SPARK_COPYTABLE_TABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven compiler for Java 11 in pom.xml\nDESCRIPTION: Updates Maven compiler properties to use Java 11 and disables the failOnMissingWebXml flag since web.xml is optional in Servlet 3.0+.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n  <maven.compiler.source>11</maven.compiler.source>\n  <maven.compiler.target>11</maven.compiler.target>\n  <failOnMissingWebXml>false</failOnMissingWebXml>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Running Container Locally\nDESCRIPTION: Demonstrates how to run the built container image locally using Docker. Includes an example with environment variables for customization.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/jobs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm gcr.io/${GOOGLE_CLOUD_PROJECT}/logger-job\n\n# With environment variables \ndocker run --rm -e FAIL_RATE=0.9 -e SLEEP_MS=1000 gcr.io/${GOOGLE_CLOUD_PROJECT}/logger-job\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Bigtable and Dataflow (Shell)\nDESCRIPTION: These commands set up environment variables necessary for running the Dataflow pipelines, including project IDs, instance ID, table ID, and region.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=your-project-id\nBIGTABLE_PROJECT=your-project-id\nINSTANCE_ID=your-instance-id\nTABLE_ID=your-table-id\nREGION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Submitting Spark Wordcount Job to Dataproc\nDESCRIPTION: Submits a Spark wordcount job to a Dataproc cluster using gcloud CLI. The job processes text from a GCS file and stores results in Bigtable. Uses HBase-Spark connector for Bigtable integration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataproc jobs submit spark \\\n  --cluster=$BIGTABLE_SPARK_DATAPROC_CLUSTER \\\n  --region=$BIGTABLE_SPARK_DATAPROC_REGION \\\n  --class=example.Wordcount \\\n  --jars=$BIGTABLE_SPARK_ASSEMBLY_JAR \\\n  --properties=spark.jars.packages='org.apache.hbase.connectors.spark:hbase-spark:1.0.0' \\\n  -- \\\n  $BIGTABLE_SPARK_PROJECT_ID $BIGTABLE_SPARK_INSTANCE_ID \\\n  $BIGTABLE_SPARK_WORDCOUNT_TABLE $BIGTABLE_SPARK_BUCKET_NAME/Romeo-and-Juliet-prologue.txt\n```\n\n----------------------------------------\n\nTITLE: Creating an App Engine Application\nDESCRIPTION: Command to create a new App Engine application if this is your first time. This is a prerequisite before deploying any App Engine applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/spanner/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Running the App Engine Application Locally with Maven\nDESCRIPTION: Command to run the application locally using Maven. After execution, the application will be accessible at http://localhost:8080/.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Setting up Vert.x Web and HTTP server\nDESCRIPTION: Code from the Application class that initializes a Vert.x Web client, creates a router, configures request handling, and starts an HTTP server on port 8080. The WebClient is used to query Google metadata API.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/vertx-helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nwebClient = WebClient.create(vertx);\n\nRouter router = Router.router(vertx);\n\nrouter.route().handler(this::handleDefault);\n\nvertx.createHttpServer()\n    .requestHandler(router)\n    .listen(8080, ar -> startFuture.handle(ar.mapEmpty()));\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Storage Bucket\nDESCRIPTION: Command to create a Cloud Storage bucket in the specified region for storing input files and other resources needed by the Spark application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngsutil mb \\\n  -b on \\\n  -l $BIGTABLE_SPARK_DATAPROC_REGION \\\n  -p $BIGTABLE_SPARK_PROJECT_ID \\\n  $BIGTABLE_SPARK_BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Running the App Engine Application Locally\nDESCRIPTION: Maven command to build and run the backend module locally using the App Engine development server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-backend/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:run\n```\n\n----------------------------------------\n\nTITLE: Deploying to Google App Engine Standard with gcloud CLI\nDESCRIPTION: Command to deploy the application to Google App Engine Standard using the gcloud command-line tool. This uses the app.yaml configuration that contains the custom entrypoint definition.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/custom-entrypoint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings in Java for Cloud Spanner OpenTelemetry\nDESCRIPTION: This snippet shows how to set up the database configuration for a Cloud Spanner instance in the OpenTelemetryUsage.java class. It includes setting the project ID, instance ID, and database ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/opentelemetry_traces/Readme.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString projectId = \"my-project\";\nString instanceId = \"my-instance\";\nString databaseId = \"my-database\";\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application Using Maven\nDESCRIPTION: Commands to clean, package and deploy the application to Google App Engine using Maven\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/appidentity/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Bigtable Variables in Bash\nDESCRIPTION: Sets environment variables for Bigtable project, instance, and table IDs. These variables are used in subsequent commands and code execution.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/memorystore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBIGTABLE_PROJECT=YOUR-PROJECT-ID OR $GOOGLE_CLOUD_PROJECT\nINSTANCE_ID=YOUR-INSTANCE-ID\nTABLE_ID=mobile-time-series # Example table for sample\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Topic\nDESCRIPTION: This command creates a new Pub/Sub topic using the gcloud CLI tool. Replace <your-topic-name> with your desired topic name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/pubsub/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud pubsub topics create <your-topic-name>\n```\n\n----------------------------------------\n\nTITLE: Deploying Gradle-based App to App Engine\nDESCRIPTION: Commands to deploy the application to Google App Engine using Gradle or the Gradle wrapper if Gradle is not installed.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngradle appengineDeploy\n```\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew appengineDeploy\n```\n\n----------------------------------------\n\nTITLE: Handling POST Request in SparkJava Controller\nDESCRIPTION: Code snippet showing how to handle a POST request to create a new user in SparkJava controller. It extracts name and email parameters from the request and passes them to the userService for creating a user record in Datastore.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/sparkjava/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npost(\"/api/users\", (req, res) -> userService.createUser(\n    req.queryParams(\"name\"),\n    req.queryParams(\"email),\n), json());\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine Flex\nDESCRIPTION: Maven command to clean, package and deploy the application to App Engine Flexible environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jsr356/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Quarkus Application\nDESCRIPTION: Command for accessing the deployed Quarkus application through your browser. This opens the default application URL in your browser.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/quarkus-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Remote API Server Component\nDESCRIPTION: Commands to initialize Google Cloud, navigate to the server directory, and deploy the app using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/remote-README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Tests for S3 SDK Sample\nDESCRIPTION: This Maven command runs the verification tests for the S3 SDK sample project, ensuring that the implementation works correctly with Google Cloud Storage.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/s3-sdk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Scheduler Jobs for Pub/Sub Messages in Bash\nDESCRIPTION: Sets up Cloud Scheduler jobs to publish sample messages to the Pub/Sub topic at regular intervals.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud scheduler jobs create pubsub positive-ratings-publisher \\\n  --schedule=\"* * * * *\" \\\n  --topic=\"$TOPIC\" \\\n  --message-body='{\"url\": \"https://beam.apache.org/\", \"review\": \"positive\"}'\n\ngcloud scheduler jobs run positive-ratings-publisher\n\ngcloud scheduler jobs create pubsub negative-ratings-publisher \\\n  --schedule=\"*/2 * * * *\" \\\n  --topic=\"$TOPIC\" \\\n  --message-body='{\"url\": \"https://beam.apache.org/\", \"review\": \"negative\"}'\n\ngcloud scheduler jobs run negative-ratings-publisher\n```\n\n----------------------------------------\n\nTITLE: Running the IAM Quickstart Project with Maven\nDESCRIPTION: Command to execute the IAM Quickstart project using Maven. Before running, ensure the Resource Manager API is enabled and authentication is set up. Replace projectId and member fields with your own values.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/iam/api-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nmvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Tasks Directory and Compiling the Application\nDESCRIPTION: These commands change the directory to the tasks folder and use Maven to compile the Java application for creating tasks.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd ../tasks\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Running Data Query and Decryption in Cloud SQL MySQL with Tink\nDESCRIPTION: Command to execute the Java application that queries encrypted data from a Cloud SQL MySQL database and decrypts it using Tink.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/client-side-encryption/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=cloudsql.tink.QueryAndDecryptData\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project ID\nDESCRIPTION: Command to set your Firebase project as the active project for the Google Cloud SDK using the project ID from Firebase settings.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-backend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud config set project [project-id]\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine application with Maven\nDESCRIPTION: Maven commands for packaging and deploying the Google App Engine application to the cloud.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/gaeinfo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Google App Engine\nDESCRIPTION: This snippet demonstrates the Maven command to deploy the application to Google App Engine. It includes steps for cleaning, packaging, and deploying while skipping tests.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Creating a Push Subscription for Pub/Sub\nDESCRIPTION: Command to create a push subscription that sends messages to an App Engine endpoint. Includes a verification token for security and an acknowledgment deadline of 30 seconds.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub subscriptions create <your-subscription-name> \\\n  --topic <your-topic-name> \\\n  --push-endpoint \\\n  https://<your-project-id>.appspot.com/pubsub/push?token=<your-verification-token> \\\n  --ack-deadline 30\n```\n\n----------------------------------------\n\nTITLE: Running Encryption Process in Java with Maven\nDESCRIPTION: This command executes the Java class responsible for encrypting and inserting data into Cloud SQL Postgres using Tink.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/client-side-encryption/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=cloudsql.tink.EncryptAndInsertData\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloud Run with Secret Manager Integration\nDESCRIPTION: Google Cloud CLI command to deploy the Java application to Cloud Run using Secret Manager for SQL configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta run deploy SERVICE --image gcr.io/[YOUR_PROJECT_ID]/run-sql \\\n    --add-cloudsql-instances [INSTANCE_CONNECTION_NAME] \\\n    --update-secrets INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME_SECRET]:latest\n```\n\n----------------------------------------\n\nTITLE: Deploying to Google Cloud Run\nDESCRIPTION: This Bash command deploys the built image to Google Cloud Run. It requires replacing PROJECT_ID and SAMPLE_NAME with appropriate values.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ngcloud run deploy --image gcr.io/PROJECT_ID/SAMPLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating a Pub/Sub Push Subscription in Bash\nDESCRIPTION: Command to create a push subscription that forwards messages to the App Engine application endpoint. Includes verification token for security and a 30-second acknowledgment deadline.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub subscriptions create <your-subscription-name> \\\n  --topic $PUBSUB_TOPIC \\\n  --push-endpoint \\\n  https://<your-project-id>.appspot.com/pubsub/push?token=$PUBSUB_VERIFICATION_TOKEN \\\n  --ack-deadline 30\n```\n\n----------------------------------------\n\nTITLE: Adding App Engine Standard Plugin in pom.xml\nDESCRIPTION: XML configuration to add the App Engine Standard Maven plugin in pom.xml for local development and deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>appengine-maven-plugin</artifactId>\n  <version>2.2.0</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Initializing GCloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for deployment setup.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jetty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Metadata Application with Maven\nDESCRIPTION: Maven command to package and deploy the Google App Engine metadata inspection application to the cloud. This command cleans the build directory, packages the application, and deploys it to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Infrastructure Resources\nDESCRIPTION: Command to clean up and remove all resources created by Terraform for the fraud detection system. This helps avoid ongoing charges for unused resources.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nterraform destroy -var=\"project_id=$PROJECT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in Cloud Run\nDESCRIPTION: Configuration requirements for the Cloud Run service, specifying the required environment variable BLURRED_BUCKET_NAME which determines the Cloud Storage bucket where processed images will be stored.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/image-processing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `BLURRED_BUCKET_NAME`: The Cloud Run service will write blurred images to this Cloud Storage bucket.\n```\n\n----------------------------------------\n\nTITLE: Deploying the application to App Engine\nDESCRIPTION: Command to clean, package, and deploy the application to Google App Engine using the appengine-maven-plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Cloud Datastore Emulator\nDESCRIPTION: Command to start the local Cloud Datastore Emulator for development testing. Requires specifying your project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/guestbook-cloud-datastore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud beta emulators datastore start --project=YOUR_PROJECT_ID_HERE\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Maven\nDESCRIPTION: Maven command to execute the test suite and verify the application. This runs all unit tests defined in the src/main/test directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sparkjava-helloworld/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Jib Maven Plugin for Container Image Build\nDESCRIPTION: Maven configuration snippet showing how to set up the Jib plugin for building and pushing container images to Google Container Registry. Requires replacing PROJECT_ID with actual Google Cloud Project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/markdown-preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <plugin>\n    <groupId>com.google.cloud.tools</groupId>\n    <artifactId>jib-maven-plugin</artifactId>\n    <version>2.1.0</version>\n    <configuration>\n      <to>\n        <image>gcr.io/PROJECT_ID/renderer</image>\n      </to>\n    </configuration>\n  </plugin>\n```\n\n----------------------------------------\n\nTITLE: Packaging and Executing Remote API Client\nDESCRIPTION: Commands to package the client as a JAR file and execute it with a server connection string argument.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/remote-README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\njava -jar appengine-remote-client-1.0-SNAPSHOT-jar-with-dependencies.jar \"YOUR-APP-NAME\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Template Deployment\nDESCRIPTION: Defines environment variables needed for deploying the workload generator as a custom Dataflow template, including GCS paths for template storage, container image location, and log output.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport TEMPLATE_PATH=\"gs://cloud-bigtable-dataflow-templates/generate-workload.json\"\nexport TEMPLATE_IMAGE=\"gcr.io/cloud-bigtable-ecosystem/dataflow/generate-workload:latest\"\nexport LOGS_PATH=\"gs://cloud-bigtable-dataflow-templates-logs/workload-generator\"\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow Pipeline to Write Data to Bigtable (Shell)\nDESCRIPTION: This command executes the HelloWorldWrite class using Maven, which runs a Dataflow pipeline to write data to the specified Bigtable instance and table.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=HelloWorldWrite \\\n\"-Dexec.args=--project=$GOOGLE_CLOUD_PROJECT --bigtableProjectId=$BIGTABLE_PROJECT \\\n--bigtableInstanceId=$INSTANCE_ID --bigtableTableId=$TABLE_ID \\\n--runner=dataflow --region=$REGION\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Cloud Scheduler job for Pub/Sub publishing\nDESCRIPTION: Create a Cloud Scheduler job that publishes a message to a Pub/Sub topic every minute.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a Pub/Sub topic.\ngcloud pubsub topics create cron-topic\n\n# Create a Cloud Scheduler job\ngcloud scheduler jobs create pubsub publisher-job --schedule=\"* * * * *\" \\\n  --topic=cron-topic --message-body=\"Hello!\"\n\n# Run the job. \ngcloud scheduler jobs run publisher-job\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed SparkJava Application\nDESCRIPTION: Command to open the deployed SparkJava application in a browser. This launches the default browser with the URL of the deployed application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/sparkjava-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Running Cloud SQL Sample Locally with Maven\nDESCRIPTION: Command to run the Cloud SQL sample application locally using Maven. It requires specifying the instance connection name, user, password, and database as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cloudsql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean jetty:run -DINSTANCE_CONNECTION_NAME=instanceConnectionName -Duser=root -Dpassword=myPassword -Ddatabase=myDatabase\n```\n\n----------------------------------------\n\nTITLE: Running JavaMail API Sample Locally using Maven\nDESCRIPTION: This command uses Maven to run the JavaMail API sample application locally for testing and development purposes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/mail/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Running API Key Authentication Example\nDESCRIPTION: Command to run the ApiKeyAuthExample class which uses API key authentication with the LanguageService API.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.google.cloud.auth.samples.ApiKeyAuthExample\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Dataproc Cluster\nDESCRIPTION: Command to create a Cloud Dataproc cluster with a specific version (1.4) that's compatible with the Spark applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataproc clusters create $BIGTABLE_SPARK_DATAPROC_CLUSTER \\\n  --region=$BIGTABLE_SPARK_DATAPROC_REGION \\\n  --zone=$BIGTABLE_SPARK_CLUSTER_ZONE \\\n  --project=$BIGTABLE_SPARK_PROJECT_ID \\\n  --image-version=1.4\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image to Google Container Registry\nDESCRIPTION: Builds a Docker image for the gRPC server and submits it to Google Container Registry using Google Cloud Build.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container builds submit --tag gcr.io/${GCLOUD_PROJECT}/java-grpc-hello:1.0 .\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine\nDESCRIPTION: Command to package and deploy the application to App Engine after updating environment variables in app.yaml\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/pubsub/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Maven Compilation Command for Java Sample\nDESCRIPTION: Terminal command to compile the Java sample code using Maven build system.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmvn compile\n```\n\n----------------------------------------\n\nTITLE: Viewing the Deployed Ktor Application on Google App Engine\nDESCRIPTION: Command to open the deployed Ktor application in a browser using the gcloud CLI tool. Alternatively, you can access the application directly via the appspot.com URL.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/kotlin-ktor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Uploading Metadata File for Dataflow Template\nDESCRIPTION: This bash snippet demonstrates how to upload the metadata file for the Dataflow template to the specified Cloud Storage location using the 'gsutil' command.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngsutil cp WordCount_metadata \"$TEMPLATE_LOCATION\"_metadata\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building the Java App Engine Sample for Google Cloud Storage\nDESCRIPTION: This snippet shows the Git and Maven commands to clone the repository and build the project. It includes prerequisites and the exact steps to set up the development environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/serviceaccount-appengine-sample/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd [someDirectory]\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\ncd java-docs-samples/storage/xml-api/serviceaccount-appengine-sample\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Google Cloud\nDESCRIPTION: Maven command to package and deploy the application to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Key Ring and Encryption Key\nDESCRIPTION: Sets up a global key ring and creates a symmetric encryption key for use with Dataflow jobs\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/encryption-keys/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport KMS_KEYRING=samples-keyring\nexport KMS_KEY=samples-key\n\n# Create a key ring.\ngcloud kms keyrings create $KMS_KEYRING --location global\n\n# Create a key.\ngcloud kms keys create $KMS_KEY --location global \\\n  --keyring $KMS_KEYRING --purpose encryption\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Container Image with Jib Maven Plugin\nDESCRIPTION: Uses the Jib Maven Plugin to build and push the container image to Google Container Registry without requiring a Dockerfile.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud SQL client certificate\nDESCRIPTION: Creates a client certificate for SSL connections to Cloud SQL and saves the private key to a local PEM file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql ssl client-certs create CERT_NAME client-key.pem --instance=INSTANCE_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application\nDESCRIPTION: Command to create a new App Engine application in the current Google Cloud Project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot application locally using Maven\nDESCRIPTION: This command runs the Spring Boot application locally using Maven's spring-boot plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld-springboot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application\nDESCRIPTION: Command to create a new App Engine application, required for first-time setup\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/iap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Development\nDESCRIPTION: Shell commands for setting the required SendGrid environment variables before running the application locally using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sendgrid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport SENDGRID_API_KEY=[your-sendgrid-api-key]\nexport SENDGRID_SENDER=[your-sendgrid-sender-email-address]\nmvn clean jetty:run\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying the Vulnerability Function in Google Cloud\nDESCRIPTION: Commands to package the Java function and deploy it to Google Cloud Functions with the appropriate trigger topic and runtime configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/container-registry/vulnerability-notification-function/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n\ngcloud functions deploy vulnerability-function \\\n  --entry-point com.example.containeranalysis.VulnerabilityFunction \\\n  --runtime java11 \\\n  --trigger-topic container-analysis-occurrences-v1 \\\n  --memory 512MB\n```\n\n----------------------------------------\n\nTITLE: Building Container Image with Jib for Deployment\nDESCRIPTION: Maven command to build and push a container image to Google Container Registry using the Jib plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmvn compile jib:build\n```\n\n----------------------------------------\n\nTITLE: Building and Running Storage Sample\nDESCRIPTION: Maven commands to compile, install and run the Storage sample application with a specified bucket name\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/cmdline-sample/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd java-docs-samples/storage/xml-api/cmdline-sample\n# Compile and run\nmvn compile install\nmvn -q exec:java -Dexec.args=\"your-bucket-name\"\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally with Maven\nDESCRIPTION: Shell command using the Cloud SDK Maven plugin to package and run the application locally for testing. The application will be accessible at localhost:8080.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java17-bundled-services/datastore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn package appengine:run\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Task Handler\nDESCRIPTION: Project header and description explaining this is a companion app for Google Cloud Tasks queue processing using Spring Boot on App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks-handler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Handler App for Google Cloud Tasks App Engine Queue Samples\n\nThis is a companion application using Spring Boot to process Cloud Tasks requests.\nSee directory [`appengine-java11/tasks`](../tasks/README.md) for instructions.\n```\n\n----------------------------------------\n\nTITLE: Setting GOOGLE_APPLICATION_CREDENTIALS\nDESCRIPTION: Command to set the environment variable for service account credentials.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=path/to/your/credentials.json\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account and Credentials\nDESCRIPTION: Series of commands to create a service account, assign owner role, and generate credentials JSON file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport PROJECT=$(gcloud config get-value project)\nexport SA_NAME=samples\nexport IAM_ACCOUNT=$SA_NAME@$PROJECT.iam.gserviceaccount.com\n\n# Create the service account.\ngcloud iam service-accounts create $SA_NAME --display-name $SA_NAME\n\n# Set the role to Project Owner (*).\ngcloud projects add-iam-policy-binding $PROJECT \\\n  --member serviceAccount:$IAM_ACCOUNT \\\n  --role roles/owner\n\n# Create a JSON file with the service account credentials.\nexport GOOGLE_APPLICATION_CREDENTIALS=path/to/your/credentials.json\ngcloud iam service-accounts keys create $GOOGLE_APPLICATION_CREDENTIALS \\\n  --iam-account=$IAM_ACCOUNT\n```\n\n----------------------------------------\n\nTITLE: Deploying a Google App Engine Application with Maven\nDESCRIPTION: Command sequence to clean, package, and deploy the Users API sample application to Google Cloud using Maven. Requires replacing YOUR-PROJECT-ID with your actual Google Cloud Project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/users/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources for Dataflow Flex Template\nDESCRIPTION: This snippet deletes the Artifact Registry repository and Cloud Storage bucket created for the Dataflow flex template using the gcloud command-line tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/getting_started/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngcloud artifacts repositories delete $REPOSITORY --location $REGION --quiet\ngcloud storage rm gs://$BUCKET --recursive\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Storage Bucket\nDESCRIPTION: Command to create a new Google Cloud Storage bucket using gsutil with project-specific naming\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/images/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gsutil mb YOUR-PROJECT-ID.appspot.com\n```\n\n----------------------------------------\n\nTITLE: Running Application as Cloud Function Locally\nDESCRIPTION: This snippet shows how to run the application locally as a Cloud Function using Maven. It specifies the function target class to be executed.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn function:run -Drun.functionTarget=com.example.cloudsql.functions.Main\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket\nDESCRIPTION: Commands to set project ID and create a new Cloud Storage bucket\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsublite/streaming-analytics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport PROJECT_ID=$(gcloud config get-value project)\nexport BUCKET=your-gcs-bucket\n\ngsutil mb gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Deploying the App Engine Application with Maven\nDESCRIPTION: Command to package and deploy the application to App Engine after updating the environment variables in appengine-web.xml. This deploys the application to the Google Cloud Platform.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Jetty Main Package\nDESCRIPTION: Commands to navigate to the Jetty main package directory and install it using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/spanner/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd java-docs-samples/appengine-java11/appengine-simple-jetty-main\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Running the Bigtable bulk data generator using Maven and Dataflow\nDESCRIPTION: Maven command to execute the bulk data generator, which uses Apache Beam with Dataflow as the runner. The command passes the Bigtable instance ID, project, target size, and region as arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/bulk-data-generator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=bigtable.BulkWrite \\\n\"-Dexec.args=--bigtableInstanceId=$INSTANCE_ID \\\n--runner=dataflow --project=$GOOGLE_CLOUD_PROJECT \\\n--bigtableSize=$BIGTABLE_SIZE --region=$REGION\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter Settings in Java for Cloud Spanner\nDESCRIPTION: This code snippet demonstrates how to configure the OpenTelemetry exporter settings in the OpenTelemetryUsage.java class. It allows switching between Cloud Trace Exporter and OTLP Exporter, and specifies the OTLP endpoint.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/opentelemetry_traces/Readme.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nboolean useCloudTraceExporter = true; // Replace to false for OTLP\nString otlpEndpoint = \"http://localhost:4317\"; // Replace with your OTLP endpoint\n```\n\n----------------------------------------\n\nTITLE: Generating Protocol Buffer Descriptor\nDESCRIPTION: Uses protoc compiler to generate a descriptor set file from the Protocol Buffer definition, including imports and source info.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --include_imports --include_source_info api/src/main/proto/helloworld.proto --descriptor_set_out out.pb\n```\n\n----------------------------------------\n\nTITLE: Deploying Bigtable App to App Engine with Maven\nDESCRIPTION: This command packages and deploys the Bigtable application to App Engine Standard for Java 8 using Maven. It requires specifying the project ID and instance ID as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigtable/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dbigtable.projectID=PROJECTID -Dbigtable.instanceID=INSTANCEID package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Java Code for Bigtable and Memcached Integration\nDESCRIPTION: Executes the Java code that demonstrates the integration between Bigtable and Memcached. It uses Maven to compile and run the code, passing necessary parameters as system properties.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/memorystore/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=Memcached \\\n-DbigtableProjectId=$PROJECT_ID \\\n-DbigtableInstanceId=$INSTANCE_ID \\\n-DbigtableTableId=$TABLE_ID \\\n-DmemcachedDiscoveryEndpoint=$MEMCACHED_DISCOVERY_ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Running a Java application with App Engine development server\nDESCRIPTION: Starts the local App Engine development server to test a Java application before deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Deploying Spring Boot App to Google App Engine\nDESCRIPTION: Command to deploy the Spring Boot application to Google App Engine standard environment. Uses the gcloud CLI tool to handle deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/springboot-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Container Image with Jib Maven Plugin\nDESCRIPTION: This command uses the Jib Maven Plugin to build and push the container image to Google Container Registry. It dynamically sets the project ID in the image name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/pubsub/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n```\n\n----------------------------------------\n\nTITLE: Deploying Java Firebase Event Proxy\nDESCRIPTION: Commands to package and deploy the Java Firebase Event Proxy application to Google App Engine using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-event-proxy-README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd gae-firebase-event-proxy\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Building Java Samples with Maven\nDESCRIPTION: This command builds the Java samples using Maven, cleaning the project and creating a package.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Running Container Locally with Service Account Credentials\nDESCRIPTION: Extended Docker command that injects a service account key file for GCP service access, along with setting Cloud Run environment variables.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nPORT=8080 && docker run \\\n   -p 9090:${PORT} \\\n   -e PORT=${PORT} \\\n   -e K_SERVICE=dev \\\n   -e K_CONFIGURATION=dev \\\n   -e K_REVISION=dev-00001 \\\n   -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/keys/[FILE_NAME].json \\\n   -v $GOOGLE_APPLICATION_CREDENTIALS:/tmp/keys/[FILE_NAME].json:ro \\\n    gcr.io/PROJECT_ID/SAMPLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Deploying Java Application to Cloud Run\nDESCRIPTION: Google Cloud CLI command to deploy the Java application to Cloud Run, setting environment variables and memory allocation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy r2dbc-sample \\\n    --image gcr.io/$PROJECT_ID/r2dbc-sample \\\n    --platform managed \\\n    --memory 512Mi \\\n    --set-env-vars CLOUD_SQL_CONNECTION_STRING=$CLOUD_SQL_CONNECTION_STRING\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spring Boot Application Locally\nDESCRIPTION: Command to build and run the Spring Boot application using Maven. This will start the application on the local machine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/prometheus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Managing SSL Certificates for Cloud SQL\nDESCRIPTION: Commands for downloading and managing SSL server certificates for secure Cloud SQL connections.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/servlet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta sql ssl server-ca-certs list --instance=INSTANCE_NAME\ngcloud beta sql ssl server-ca-certs create --instance=INSTANCE_NAME\ngcloud beta sql ssl server-ca-certs list \\\n  --format=\"value(cert)\" \\\n  --instance=INSTANCE_NAME > \\\n  server-ca.pem\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed Micronaut Application on Google App Engine\nDESCRIPTION: Command to open the deployed Micronaut application in a browser. This uses the gcloud CLI tool to automatically navigate to the deployed application URL.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/micronaut-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Creating Single Region Cloud Storage Bucket\nDESCRIPTION: Creates a Google Cloud Storage bucket in the us-central1 region for use with the event trigger.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngsutil mb -p $(gcloud config get-value project) -l us-central1 gs://\"$MY_GCS_BUCKET\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Project\nDESCRIPTION: Command to initialize Google Cloud project configuration using gcloud CLI tool\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/taskqueues-pull/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Building JAR File for Dataflow Flex Template\nDESCRIPTION: This snippet uses Maven to clean the project and package it into a JAR file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/getting_started/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Building container image with Jib for Cloud Run\nDESCRIPTION: Uses the Jib Maven plugin to build a container image for a Java application and push it to Google Container Registry.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package com.google.cloud.tools:jib-maven-plugin:2.8.0:build \\\n -Dimage=gcr.io/[YOUR_PROJECT_ID]/run-postgres -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Verifying Wordcount Results in Bigtable\nDESCRIPTION: Uses cbt command-line tool to read and verify the wordcount results stored in Bigtable table.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  -instance=$BIGTABLE_SPARK_INSTANCE_ID \\\n  read $BIGTABLE_SPARK_WORDCOUNT_TABLE\n```\n\n----------------------------------------\n\nTITLE: Deploying Google Cloud Datastore Sample to App Engine\nDESCRIPTION: Command to package and deploy the Cloud Datastore sample to Google App Engine. Requires replacing YOUR-PROJECT-ID with your Google Cloud Project ID and SOME-VERSION with a valid version number.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/datastore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Function for Backup Creation\nDESCRIPTION: This command deploys a Cloud Function named 'cbt-create-backup-function' that will be triggered when a message arrives in the 'cloud-bigtable-scheduled-backups' Pub/Sub topic.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/scheduled-backups/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/scheduled_backups.sh deploy-backup-function\n```\n\n----------------------------------------\n\nTITLE: Running Java Application Locally with Maven Jetty Plugin\nDESCRIPTION: This Maven command cleans the project, then runs the application locally using the Jetty plugin. It allows developers to test the application on their local machine before deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean jetty:run\n```\n\n----------------------------------------\n\nTITLE: Running a Java Cloud Function locally\nDESCRIPTION: Starts a Cloud Function locally for development testing, specifying the function target entry point.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmvn function:run -Drun.functionTarget=com.example.cloudsql.functions.Main\n```\n\n----------------------------------------\n\nTITLE: Deploying Spring Boot App to App Engine with Maven\nDESCRIPTION: Maven command to package and deploy the Spring Boot application to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Memcached Discovery Endpoint in Bash\nDESCRIPTION: Sets the Memcached host IP as an environment variable. This is used to connect to the Memcached instance in the Java code.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/memorystore/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMEMCACHED_DISCOVERY_ENDPOINT=\"0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Environment Variables for Cloud Storage\nDESCRIPTION: Commands to set environment variables for Cloud Storage bucket and other configuration needed for running on Cloud Dataproc.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nBIGTABLE_SPARK_PROJECT_ID=your-project-id\nBIGTABLE_SPARK_INSTANCE_ID=your-instance-id\n\nBIGTABLE_SPARK_WORDCOUNT_TABLE=wordcount\nBIGTABLE_SPARK_BUCKET_NAME=gs://[your-bucket-name]\nBIGTABLE_SPARK_ASSEMBLY_JAR=target/scala-2.11/bigtable-spark-samples-assembly-0.1.jar\n```\n\n----------------------------------------\n\nTITLE: Deploying the App Engine Flex application\nDESCRIPTION: Maven command to clean, package, and deploy the application to App Engine Flex. This builds the Java application and deploys it according to the configuration in app.yaml.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/cloudstorage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Managing Secrets for Cloud Run\nDESCRIPTION: Commands for creating and using secrets in Cloud Run deployment for secure credential management.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/servlet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho -n \"my-awesome-project:us-central1:my-cloud-sql-instance\" | \\\n    gcloud secrets versions add INSTANCE_CONNECTION_NAME_SECRET --data-file=-\n\ngcloud beta run deploy SERVICE --image gcr.io/[YOUR_PROJECT_ID]/run-sql \\\n    --add-cloudsql-instances [INSTANCE_CONNECTION_NAME] \\\n    --update-secrets INSTANCE_CONNECTION_NAME=[INSTANCE_CONNECTION_NAME_SECRET]:latest,\\\n      DB_USER=[DB_USER_SECRET]:latest, \\\n      DB_PASS=[DB_PASS_SECRET]:latest, \\\n      DB_NAME=[DB_NAME_SECRET]:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine XML for Java17 Bundled Services\nDESCRIPTION: XML configuration that defines the Java17 runtime and enables App Engine APIs. This is the key difference between Java8 and Java17 App Engine applications, making migration straightforward.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java17-bundled-services/datastore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n    <runtime>java17</runtime>\n    <app-engine-apis>true</app-engine-apis>\n</appengine-web-app>\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket for Dataflow Flex Template\nDESCRIPTION: This snippet creates a Cloud Storage bucket using the gcloud command-line tool. The bucket name is set using an environment variable.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/getting_started/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport BUCKET=\"your-bucket\"\ngcloud storage buckets create gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in Bigtable CopyTable Table\nDESCRIPTION: Command to verify the CopyTable application results by counting the number of rows copied to the destination Bigtable table.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  -instance=$BIGTABLE_SPARK_INSTANCE_ID \\\n  count $BIGTABLE_SPARK_COPYTABLE_TABLE\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Push Subscription\nDESCRIPTION: This command creates a push subscription for the Pub/Sub topic, specifying the push endpoint URL and verification token. Replace placeholders with your project-specific values.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/pubsub/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud pubsub subscriptions create <your-subscription-name> \\\n  --topic <your-topic-name> \\\n  --push-endpoint \\\n  https://<your-project-id>.appspot.com/pubsub/push?token=<your-verification-token> \\\n  --ack-deadline 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Parent POM for Google Cloud Samples\nDESCRIPTION: XML configuration showing how to declare the shared parent POM for Google Cloud samples. This provides common style checks and testing strategies for the samples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <!--\n    The parent pom defines common style checks and testing strategies for our samples.\n    Removing or replacing it should not affect the execution of the samples in anyway.\n  -->\n  <parent>\n    <groupId>com.google.cloud.samples</groupId>\n    <artifactId>shared-configuration</artifactId>\n    <version>SPECIFY_LATEST_VERSION</version>\n  </parent>\n```\n\n----------------------------------------\n\nTITLE: Setting public read access on Cloud Storage bucket\nDESCRIPTION: Command to set the default access control list (ACL) on a Cloud Storage bucket to allow public read access, enabling files to be served directly from the bucket.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/cloudstorage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngsutil defacl set public-read gs://[your-bucket-name]\n```\n\n----------------------------------------\n\nTITLE: Running Local Java Cloud Functions with Maven\nDESCRIPTION: Command to run Java Cloud Functions locally using the Functions Framework Maven plugin for development and testing purposes. Requires the function-maven-plugin to be configured in the project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/functions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn function:run -Drun.functionTarget=your.package.yourFunction\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK for Bigtable Project\nDESCRIPTION: These commands initialize the Google Cloud SDK and authenticate the application. They are prerequisites for working with Google Cloud Bigtable.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigtable/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Running the Java App Engine Sample Locally\nDESCRIPTION: This command demonstrates how to run the application on a local development server using Maven and the App Engine plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/serviceaccount-appengine-sample/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Creating a delayed task with future execution\nDESCRIPTION: Command to run the CreateTask application to create a task that will be executed after a specified delay. The --in-seconds flag schedules the task to run 30 seconds in the future.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"com.example.task.CreateTask\" \\\n    -Dexec.args=\"--project-id $GOOGLE_CLOUD_PROJECT \\\n    --queue $QUEUE_ID --location $LOCATION_ID --payload hello --in-seconds 30\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine\nDESCRIPTION: Maven commands to package and deploy the application to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/guestbook-cloud-datastore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: maven\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cloud Dataproc\nDESCRIPTION: Commands to set environment variables for Cloud Dataproc cluster configuration, including cluster name, region, and zone.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nBIGTABLE_SPARK_DATAPROC_CLUSTER=your-dataproc-cluster\nBIGTABLE_SPARK_DATAPROC_REGION=your-dataproc-region\nBIGTABLE_SPARK_CLUSTER_ZONE=your-bigtable-cluster-zone\nBIGTABLE_SPARK_PROJECT_ID=your-project-id\n```\n\n----------------------------------------\n\nTITLE: Running Authentication Example with Default Credentials\nDESCRIPTION: Command to run the AuthExample class using default Google Cloud credentials.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.google.cloud.auth.samples.AuthExample\n```\n\n----------------------------------------\n\nTITLE: Migrating Java 8 to Java 11 Bundled Services\nDESCRIPTION: This shell script demonstrates how to migrate App Engine Java 8 applications to Java 11 bundled services. It clones the sample repository, copies Java 8 samples, and updates appengine-web.xml files to use Java 11 runtime with App Engine APIs.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\ncd java-docs-samples\ncp -pr appengine-java8 /tmp/java11-samples\ncd /tmp/java11-samples\n# On Linux:\nshopt -s globstar dotglob\nfor f in **/appengine-web.xml; do sed -i 's.<runtime>java8</runtime>.<runtime>java11</runtime><app-engine-apis>true</app-engine-apis>.' ${f}; done \n# on MacOS\nfor f in **/appengine-web.xml; do sed -i'' -e 's.<runtime>java8</runtime>.<runtime>java11</runtime><app-engine-apis>true</app-engine-apis>.' ${f}; done\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application with Maven\nDESCRIPTION: Maven command to package and deploy the App Engine application to Google Cloud. After deployment, the application will be accessible at https://YOUR-PROJECT-ID.appspot.com.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Converting PEM certificates to PKCS12 keystore\nDESCRIPTION: Uses OpenSSL to convert PEM client certificate and key into a password-protected PKCS12 keystore archive for Java applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -in client-cert.pem -inkey client-key.pem \\\n-name \"mysqlclient\" -passout pass:<password> -out client-keystore.p12\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket using Google Cloud SDK\nDESCRIPTION: This command creates a new Cloud Storage bucket using the gsutil command-line tool from the Google Cloud SDK. The bucket name should be replaced with your desired unique bucket name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cloudstorage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gsutil mb gs://[your-bucket-name]\n```\n\n----------------------------------------\n\nTITLE: Executing the Java Sample\nDESCRIPTION: This command runs the compiled Java sample for verifying instance identity using the packaged jar file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/signed-metadata/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\njava -jar target/compute-signed-metadata-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Deploying Spring Boot Application to Google App Engine Flex\nDESCRIPTION: This command deploys the Spring Boot application to Google App Engine Flex. It uses the gcloud CLI tool to initiate the deployment process.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/springboot-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable App Locally with Maven\nDESCRIPTION: This command runs the Bigtable application locally using Maven. It requires specifying the project ID and instance ID as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigtable/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dbigtable.projectID=PROJECTID -Dbigtable.instanceID=INSTANCEID appengine:run\n```\n\n----------------------------------------\n\nTITLE: Deploying the Java App Engine Sample to Google Cloud\nDESCRIPTION: This command shows how to deploy the application to App Engine using Maven. It assumes that the necessary configuration steps have been completed in the appengine-web.xml file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/serviceaccount-appengine-sample/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:update\n```\n\n----------------------------------------\n\nTITLE: Running Local Jetty Server\nDESCRIPTION: Maven command to run the application locally using Jetty Maven plugin for testing.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jsr356/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Deploying Container to Cloud Run\nDESCRIPTION: Google Cloud CLI command to deploy the built container image to Cloud Run with the specified image URL.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngcloud run deploy --image gcr.io/PROJECT_ID/SAMPLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Executing a Cloud Run Job\nDESCRIPTION: Runs the previously created Cloud Run job named 'job-quickstart' using the gcloud CLI.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/jobs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngcloud run jobs run job-quickstart\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials Environment Variable\nDESCRIPTION: Sets up the environment variable for Google Cloud authentication using a service account credentials JSON file. This is required for authenticating API requests to Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/vision/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/your-project-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Running App Engine application locally using Maven\nDESCRIPTION: This command runs the App Engine application locally using Maven. It allows developers to test and debug the application on their local machine before deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/urlfetch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Viewing Cloud Run Service Logs\nDESCRIPTION: Retrieves and displays logs from the Cloud Run service to verify it received and processed the event.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud logging read \"resource.type=cloud_run_revision AND \\\nresource.labels.service_name=$MY_RUN_SERVICE\" --project \\\n$(gcloud config get-value project) --limit 30 --format 'value(textPayload)'\n```\n\n----------------------------------------\n\nTITLE: Running Cloud Spanner OpenTelemetry Application with Maven\nDESCRIPTION: This command-line snippet demonstrates how to run the Cloud Spanner OpenTelemetry application using Maven. It specifies the main class to be executed.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/opentelemetry_traces/Readme.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"com.example.spanner.OpenTelemetryUsage\"\n```\n\n----------------------------------------\n\nTITLE: Deploying PostgreSQL App to Google App Engine\nDESCRIPTION: Maven command to package and deploy the application to Google App Engine with necessary database connection parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/postgres/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy -DINSTANCE_CONNECTION_NAME=instanceConnectionName -Duser=root\n-Dpassword=myPassword -Ddatabase=myDatabase\n```\n\n----------------------------------------\n\nTITLE: Running DLP Sample Applications with Maven\nDESCRIPTION: Command to execute a specific DLP sample application using Maven, where <CLASS_NAME> needs to be replaced with the actual sample class name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dlp/snippets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"dlp.snippets.<CLASS_NAME>\"\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Server and Client Locally\nDESCRIPTION: Instructions for testing the gRPC application locally by running the server in the background and executing the client with parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# In the background or another terminal run the server:\njava -jar server/build/libs/server.jar\n\n# Check the client parameters:\njava -jar client/build/libs/client.jar --help\n\n# Run the client\njava -jar client/build/libs/client.jar --greetee 'Endpoints!'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud SDK for Application Default Credential\nDESCRIPTION: This command authenticates the user for Application Default Credential using the Google Cloud SDK. It's a prerequisite for running the sample code.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/mlengine/online-prediction/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Setting Google Analytics Tracking ID in appengine-web.xml\nDESCRIPTION: Instructions to set the Google Analytics tracking ID as an environment variable in the appengine-web.xml file. This is a crucial step for integrating Google Analytics with the App Engine application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<appengine-web.xml>\n```\n\n----------------------------------------\n\nTITLE: Running sentiment analysis quickstart sample for Google Cloud Natural Language API\nDESCRIPTION: This command executes the QuickstartSample class from the compiled jar file to perform sentiment analysis on a string using the Google Cloud Natural Language API.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/language/cloud-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\njava -jar target/language-google-cloud-samples-1.0.9-jar-with-dependencies.jar \\\n    com.example.language.QuickstartSample\n```\n\n----------------------------------------\n\nTITLE: Building the Java Bookstore gRPC Application using Gradle\nDESCRIPTION: This command uses Gradle to build the Java Bookstore gRPC application. It compiles the source code and packages it into executable JAR files for both server and client components.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/bookstore-grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Building Container Image using Buildpacks\nDESCRIPTION: Uses Google Cloud Buildpacks to build a container image for the logger job and push it to Google Container Registry.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/jobs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud builds submit --pack image=gcr.io/${GOOGLE_CLOUD_PROJECT}/logger-job\n```\n\n----------------------------------------\n\nTITLE: Deploying a Ktor Application to Google App Engine Standard\nDESCRIPTION: Command to deploy a Ktor application to Google App Engine standard environment using the Google Cloud SDK's gcloud CLI tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/kotlin-ktor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed Application\nDESCRIPTION: Command to open the deployed application in a web browser using the gcloud SDK.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on Debian/Ubuntu VM\nDESCRIPTION: Bash commands to update package repositories and install Git, Maven, and OpenJDK 7 on a Debian or Ubuntu-based Linux system.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install git maven openjdk-7-jdk -y\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification for Cloud Run Endpoints\nDESCRIPTION: This snippet describes the process of generating the OpenAPI specification file using the SpringDoc Maven Plugin. It explains how to run the Maven command to generate the file and mentions the need to manually update the Swagger version from 3.0 to 2.0 in the generated file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/endpoints-v2-backend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Run `mvn clean install` (or alternatively just `mvn verify`) to use the SpringDoc Maven Plugin to generate a base\n    openapi file in the root directory.\n\n    You are able to customize the output filename by changing its plugin configuration `outputFileName` in pom.xml.\n    \n    SpringDoc Openapi Maven Plugin runs during the integration test lifecycle phase in order to pull down a Swagger 3.0\n    openapi specification and automatically write into a file.\n    \n1. Manually, you must switch the generated file's swagger version from 3.0 to 2.0. At the end, it should look like the\n    file openapi-run.yaml in this demo project. If you are using an IDE like IntelliJ IDEA Ultimate, after switching the\n    version number to 2.0, it should tell you what's wrong with the file.\n```\n\n----------------------------------------\n\nTITLE: Running Container Locally with Docker\nDESCRIPTION: Docker command to run the built container image locally, exposing it on port 9090 and setting the required PORT environment variable.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nPORT=8080 && docker run --rm -p 9090:${PORT} -e PORT=${PORT} gcr.io/PROJECT_ID/SAMPLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Java Compute Engine Sample with Maven\nDESCRIPTION: Terminal command to execute the compiled Java application using Maven's exec plugin with quiet output.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmvn -q exec:java\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Version\nDESCRIPTION: This command ensures that OpenJDK 8 is the selected Java version on the system.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/signed-metadata/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nsudo update-alternatives --config java\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven dependency plugin for App Engine deployment\nDESCRIPTION: Configures the maven-dependency-plugin to copy dependencies to the appengine-staging directory, which is required for App Engine deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-dependency-plugin</artifactId>\n  <version>3.1.1</version>\n  <executions>\n    <execution>\n      <id>copy</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>copy-dependencies</goal>\n      </goals>\n      <configuration>\n        <outputDirectory>\n          ${project.build.directory}/appengine-staging\n        </outputDirectory>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Running the App Engine application locally using Maven\nDESCRIPTION: Command to run the App Engine application locally using the Maven Cloud SDK based plugin. This allows developers to test the application on their local machine before deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/analytics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Building Container Image with Jib Maven Plugin\nDESCRIPTION: Shell command to compile the application and build/push the container image to Google Container Registry using Jib Maven plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/markdown-preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile jib:build\n```\n\n----------------------------------------\n\nTITLE: Running the Java Bookstore Server Locally\nDESCRIPTION: This command runs the server component of the Bookstore application. It executes the compiled JAR file, which by default will listen for connections on port 8000.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/bookstore-grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar ./server/build/libs/server.jar\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application\nDESCRIPTION: This Maven command deploys the application to Google App Engine. It requires specifying the project ID and version.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/oauth2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn appengine:update -Dappengine.appId=YOUR-PROJECT-ID -Dappengine.version=SOME-VERSION\n```\n\n----------------------------------------\n\nTITLE: Testing the Event Trigger with Storage Class Change\nDESCRIPTION: Tests the trigger by changing the default storage class of the bucket, which should generate an event.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngsutil defstorageclass set NEARLINE gs://$MY_GCS_BUCKET\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Location ID\nDESCRIPTION: This command sets an environment variable for the location ID of the Cloud Tasks queue, which is required for task creation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nexport LOCATION_ID=\"us-central1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket for Dataflow Flex Template\nDESCRIPTION: Creates a Google Cloud Storage bucket to store the Dataflow Flex template and other resources.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUCKET=\"your-gcs-bucket\"\ngsutil mb gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Flexible Environment Application\nDESCRIPTION: This command packages the application and deploys it to App Engine Flexible Environment using Maven. Update environment variables in app.yaml before deploying.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/pubsub/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Servlet API Dependency in pom.xml\nDESCRIPTION: XML configuration to add the Servlet API dependency in pom.xml for App Engine Standard compatibility.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>javax.servlet</groupId>\n  <artifactId>javax.servlet-api</artifactId>\n  <version>3.1.0</version>\n  <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Firewall Rule for Kafka Server\nDESCRIPTION: Sets up a firewall rule to allow incoming connections to the Kafka server on ports 2181 and 9092.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute firewall-rules create allow-kafka \\\n  --target-tags \"kafka-server\" \\\n  --allow tcp:2181,tcp:9092\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Client Against GKE Deployed Service\nDESCRIPTION: Executes the Java gRPC client, connecting to the Endpoints proxy on the GKE load balancer using an API key for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njava -jar client/build/libs/client.jar --host <IP of GKE LoadBalancer>:80 --api_key <API Key from Console>\n```\n\n----------------------------------------\n\nTITLE: Running the Bigtable Workload Generator with Maven\nDESCRIPTION: Executes the Bigtable workload generator directly using Maven, specifying the main class and passing required arguments for the Bigtable instance, table, runner, project, region, and workload parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=WorkloadGenerator \\\n\"-Dexec.args=--bigtableInstanceId=$INSTANCE_ID --bigtableTableId=$TABLE_ID \\\n--runner=dataflow --project=$GOOGLE_CLOUD_PROJECT \\\n--region=$REGION\" \\\n--workloadRate=$WORKLOAD_RATE \n--workloadDurationMinutes=$WORKLOAD_DURATION\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dataflow Template\nDESCRIPTION: This bash snippet sets up environment variables necessary for creating and running the Dataflow template, including the project ID, bucket name, and template location.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PROJECT=$(gcloud config get-value project)\nexport BUCKET=your-gcs-bucket\nexport TEMPLATE_LOCATION=gs://$BUCKET/samples/dataflow/templates/WordCount\n```\n\n----------------------------------------\n\nTITLE: Opening Java Source File with Nano Editor\nDESCRIPTION: Command to open the Java sample file in the Nano text editor to make required configuration changes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnano src/main/java/ComputeEngineSample.java\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Topic for Cloud Bigtable Scheduled Backups\nDESCRIPTION: This command creates a Cloud Pub/Sub topic named 'cloud-bigtable-scheduled-backups' that will serve as the target for the Cloud Scheduler job and trigger the Cloud Function.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/scheduled-backups/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics create cloud-bigtable-scheduled-backups --project <project-id>\n```\n\n----------------------------------------\n\nTITLE: Assigning IAM Roles\nDESCRIPTION: Script to assign necessary roles (retail.admin, editor, bigquery.admin) to the service account\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/retail/interactive-tutorials/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfor role in {retail.admin,editor,bigquery.admin}\ndo gcloud projects add-iam-policy-binding <YOUR_PROJECT_ID> --member=\"serviceAccount:<YOUR_SERVICE_ACCOUNT_ID>@<YOUR_PROJECT_ID>.iam.gserviceaccount.com\" --role=\"roles/${role}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally with Maven\nDESCRIPTION: Maven command to package and run the App Engine application locally for testing. This starts a local development server accessible at http://localhost:8080/.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn package appengine:run\n```\n\n----------------------------------------\n\nTITLE: Running a Java application locally with Maven Jetty\nDESCRIPTION: Starts a local development server for a Java web application using Maven's Jetty plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Repository\nDESCRIPTION: Command to clone the Google Cloud Platform Java samples repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/spanner/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Version\nDESCRIPTION: Command to select and configure the Java version to use, ensuring OpenJDK 8 is selected for running the application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-alternatives --config java\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Maven Plugin in pom.xml\nDESCRIPTION: XML configuration for the App Engine Maven Plugin in pom.xml, specifying the project ID and version.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>appengine-maven-plugin</artifactId>\n  <version>2.2.0</version>\n  <configuration>\n    <projectId>myProjectId</projectId>\n    <version>GCLOUD_CONFIG</version>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine YAML\nDESCRIPTION: App Engine runtime configuration specifying Java 11 and the Jetty server entrypoint\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/appengine-simple-jetty-main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nruntime: java11\nentrypoint: 'java -cp \"*\" com.example.appengine.jetty.Main helloworld.war'\n```\n\n----------------------------------------\n\nTITLE: Deploying Alert Policy for Vulnerability Monitoring\nDESCRIPTION: Command to create a monitoring alert policy from a configuration file that will trigger based on the previously created log-based metrics.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/container-registry/vulnerability-notification-function/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha monitoring policies create \\\n  --policy-from-file=cloudops/vulnerability-policy.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable App Locally with Gradle\nDESCRIPTION: This command runs the Bigtable application locally using Gradle. It requires specifying the project ID and instance ID as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigtable/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngradle -Dbigtable.projectID=PROJECTID -Dbigtable.instanceID=INSTANCEID appengineRun\n```\n\n----------------------------------------\n\nTITLE: Deleting BigQuery Table\nDESCRIPTION: Command to forcefully remove a BigQuery table using project, dataset, and table environment variables.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nbq rm -f -t $PROJECT:$DATASET.$TABLE\n```\n\n----------------------------------------\n\nTITLE: Creating Bigtable Table for CopyTable Example\nDESCRIPTION: Command using the cbt tool to create a Bigtable table that will store copied data with a column family named 'cf'.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  -instance=$BIGTABLE_SPARK_INSTANCE_ID \\\n  createtable $BIGTABLE_SPARK_COPYTABLE_TABLE \\\n  \"families=cf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Maven Plugin\nDESCRIPTION: XML configuration for the App Engine Maven plugin specifying project ID and version settings.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>appengine-maven-plugin</artifactId>\n  <version>2.2.0</version>\n  <configuration>\n    <projectId>myProjectId</projectId>\n    <version>GCLOUD_CONFIG</version>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Running DownscopingExample\nDESCRIPTION: Command to run the DownscopingExample class which demonstrates server-side downscoping approach.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.google.cloud.auth.samples.DownscopingExample\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket in Bash\nDESCRIPTION: Creates a Google Cloud Storage bucket to store the Dataflow template and temporary files.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUCKET=\"your-gcs-bucket\"\ngsutil mb gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Executing Java Task Creation Program\nDESCRIPTION: This Maven command runs the CreateTask Java class, which creates a new task in the specified Cloud Tasks queue targeting the '/tasks/create' endpoint.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"com.example.task.CreateTask\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Java Samples Repository for Google App Engine Flexible Environment\nDESCRIPTION: This command clones the GitHub repository containing Java code samples for Google App Engine flexible environment. It downloads the latest sample code to the local machine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Job Submission Confirmation Output\nDESCRIPTION: Expected output messages after successful job submission to Dataproc.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nJob [joibId] submitted.\nWaiting for job output...\n```\n\n----------------------------------------\n\nTITLE: Gradle Build and Deploy Commands\nDESCRIPTION: Commands for building the project, generating OpenAPI docs, and deploying with Gradle\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-backend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n./gradlew endpointsOpenApiDocs\ngcloud endpoints services deploy build/endpointsOpenApiDocs/openapi.json\n./gradlew appengineDeploy\n```\n\n----------------------------------------\n\nTITLE: Cloning the Google Cloud Platform Java Samples Repository\nDESCRIPTION: Command to clone the Google Cloud Platform Java samples repository to your local machine using Git.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Deploying Java Application to Google App Engine Standard\nDESCRIPTION: Command to deploy the Java application to Google App Engine Standard using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL App Locally with Maven\nDESCRIPTION: Command to run the application locally using Maven's Jetty plugin with required database connection parameters including instance name, user credentials, and database name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/postgres/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean jetty:run -DINSTANCE_CONNECTION_NAME=instanceConnectionName -Duser=root -Dpassword=myPassowrd -Ddatabase=myDatabase\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally\nDESCRIPTION: Maven command to clean and run the application locally using the App Engine development server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/guestbook-cloud-datastore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: maven\nCODE:\n```\nmvn clean appengine:run\n```\n\n----------------------------------------\n\nTITLE: Configuring appengine-web.xml for Java 11 Bundled Services\nDESCRIPTION: This XML snippet shows the configuration required in appengine-web.xml to use Java 11 runtime with App Engine APIs. It sets the runtime to Java 11 and enables App Engine APIs.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n    <runtime>java11</runtime>\n    <app-engine-apis>true</app-engine-apis>\n</appengine-web-app>\n```\n\n----------------------------------------\n\nTITLE: Deleting Dataproc Cluster\nDESCRIPTION: Commands to delete the Dataproc cluster and verify deletion by listing remaining clusters in the region.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataproc clusters delete $BIGTABLE_SPARK_DATAPROC_CLUSTER \\\n  --region=$BIGTABLE_SPARK_DATAPROC_REGION \\\n  --project=$BIGTABLE_SPARK_PROJECT_ID\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataproc clusters list \\\n  --region=$BIGTABLE_SPARK_DATAPROC_REGION\n```\n\n----------------------------------------\n\nTITLE: Creating First App Engine Application\nDESCRIPTION: Command to create a new App Engine application for first-time users.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/websocket-jetty/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud appengine create\n```\n\n----------------------------------------\n\nTITLE: Retrieving Google Cloud Project Information using gcloud\nDESCRIPTION: Command to describe a Google Cloud project using the gcloud CLI tool. This is used to obtain the project number, which is required for IAP configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/iap/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects describe PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow Pipeline to Read Data from Bigtable (Shell)\nDESCRIPTION: This command executes the HelloWorldRead class using Maven, which runs a Dataflow pipeline to read data from the specified Bigtable instance and table.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/helloworld/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=HelloWorldRead \\\n\"-Dexec.args=--project=$GOOGLE_CLOUD_PROJECT --bigtableProjectId=$BIGTABLE_PROJECT \\\n--bigtableInstanceId=$INSTANCE_ID --bigtableTableId=$TABLE_ID \\\n--runner=dataflow --region=$REGION\"\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server with Maven\nDESCRIPTION: Command to run the application locally using Maven's Jetty plugin for testing purposes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cron/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for local development and deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigquery/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Running Flex Template Pipeline in Bash\nDESCRIPTION: Executes the Flex Template pipeline on Google Cloud Dataflow, specifying input and output parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport REGION=\"us-central1\"\n\ngcloud dataflow flex-template run \"streaming-beam-sql-`date +%Y%m%d-%H%M%S`\" \\\n    --template-file-gcs-location \"$TEMPLATE_PATH\" \\\n    --parameters inputSubscription=\"$SUBSCRIPTION\" \\\n    --parameters outputTable=\"$PROJECT:$DATASET.$TABLE\" \\\n    --region \"$REGION\"\n```\n\n----------------------------------------\n\nTITLE: Testing Authenticated Pub/Sub Push Notifications\nDESCRIPTION: Example curl command for testing authenticated push notifications. Note that this will fail locally because it requires a Cloud Pub/Sub-generated JWT in the Authorization header.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -i --data @sample_message.json\n   \"localhost:8080/pubsub/authenticated-push?token=<your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Compiling OAuth2 Application\nDESCRIPTION: Maven command to package the OAuth2 application after navigating to the appropriate directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../oauth2\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Adding App Engine API Dependency in Maven POM\nDESCRIPTION: This XML snippet demonstrates how to add the App Engine API dependency in the project's pom.xml file. It includes the appengine-api-1.0-sdk dependency with a specific version.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.google.appengine</groupId>\n    <artifactId>appengine-api-1.0-sdk</artifactId>\n    <version>2.0.4</version> <!-- or later-->\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing CloudEvents with cURL\nDESCRIPTION: Sends a test CloudEvent to the deployed service using cURL. The request includes required CloudEvent headers and a JSON payload. The service URL is retrieved dynamically using gcloud CLI.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/generic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nCLOUD_RUN_URL=$(gcloud run services describe eventarc-generic --platform managed --format 'value(status.url)')\ncurl -XPOST $CLOUD_RUN_URL \\\n-H \"Content-Type: application/json\" \\\n-H \"ce-id: 1413058901901494\" \\\n-H \"ce-source: //books.googleapis.com/book/MY-BOOK\" \\\n-H \"ce-specversion: 1.0\" \\\n-H \"ce-type: my-type\" \\\n-d '{\"key\": \"value\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Endpoints Proxy for gRPC on GCE\nDESCRIPTION: Runs the Endpoints Service Proxy (ESP) container on the GCE instance, configuring it to forward HTTP/2 traffic to the gRPC server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    --detach \\\n    --name=esp \\\n    --publish 80:9000 \\\n    --link=grpc-hello:grpc-hello \\\n    gcr.io/endpoints-release/endpoints-runtime:1 \\\n    --service=${SERVICE_NAME} \\\n    --rollout_strategy=managed \\\n    --http2_port=9000 \\\n    --backend=grpc://grpc-hello:50051\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application\nDESCRIPTION: Command to create a new App Engine application for first-time users.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jetty/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud appengine create\n```\n\n----------------------------------------\n\nTITLE: Configuring Web.xml for Firebase Integration\nDESCRIPTION: XML configuration sample for the web.xml file showing how to set up the Firebase credentials and database URL parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-backend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<init-param>\n  <param-name>credential</param-name>\n  <param-value>/WEB-INF/JSON_FILE_NAME</param-value>\n</init-param>\n<init-param>\n  <param-name>databaseUrl</param-name>\n  <param-value>FIREBASE_URL</param-value>\n</init-param>\n```\n\n----------------------------------------\n\nTITLE: Running App Engine application locally with Maven\nDESCRIPTION: Maven command for running the Google App Engine application on the local development server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/gaeinfo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Verifying Java Installation\nDESCRIPTION: Command to verify Java installation and JAVA_HOME configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$JAVA_HOME/bin/java --version\n```\n\n----------------------------------------\n\nTITLE: Creating Log-based Metrics for Container Vulnerabilities\nDESCRIPTION: Command to create a log-based metric using a configuration file that tracks container vulnerabilities for monitoring purposes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/container-registry/vulnerability-notification-function/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta logging metrics create container-vulnerability \\\n  --config-from-file=cloudops/container-analysis-metrics.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting GOOGLE_CLOUD_PROJECT Environment Variable in Bash\nDESCRIPTION: This command sets the GOOGLE_CLOUD_PROJECT environment variable to the user's project ID. This is required to run the KMS sample tests.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/kms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export GOOGLE_CLOUD_PROJECT=\"<your-project-id-here>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Jetty Main Class\nDESCRIPTION: Maven commands to navigate to the appengine-simple-jetty-main directory and install the Main class to the classpath.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd java-docs-samples/appengine-java11/appengine-simple-jetty-main\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Tasks queue using gcloud\nDESCRIPTION: Command to create a new queue in Google Cloud Tasks using the gcloud CLI tool. A newly created queue will route to the default App Engine service and version unless configured otherwise.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud tasks queues create my-appengine-queue\n```\n\n----------------------------------------\n\nTITLE: Listing Cloud SQL SSL server certificates\nDESCRIPTION: Uses the gcloud CLI to list information about SSL server certificates for a Cloud SQL instance.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta sql ssl server-ca-certs list --instance=INSTANCE_NAME\n```\n\n----------------------------------------\n\nTITLE: Running the App Engine Application Locally\nDESCRIPTION: Commands to set required environment variables for the Pub/Sub topic and verification token, then run the application locally using Maven. The application will be accessible at http://localhost:8080/.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PUBSUB_TOPIC=<your-topic-name>\nexport PUBSUB_VERIFICATION_TOKEN=<your-verification-token>\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Executing Java Class with Maven\nDESCRIPTION: Generic Maven command pattern for executing a Java class with custom properties and arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/cloud-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.example.monitoring.ClassName \\\n    -DpropertyName=propertyValue \\\n\t-Dexec.args=\"arg1 'arg 2' arg3\"\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Maven\nDESCRIPTION: Command to start the Spring Boot application using Maven's spring-boot plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/r2dbc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Listing Bigtable Tables\nDESCRIPTION: Command to list all tables in the specified Bigtable instance using the cbt tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  -instance=$BIGTABLE_SPARK_INSTANCE_ID \\\n  ls\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials environment variable\nDESCRIPTION: This command sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the service account key file, which is required for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/jobs/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/key.json\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally with Maven\nDESCRIPTION: Maven command to package and run the application locally for testing. This starts a local development server accessible at http://localhost:8080/.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sparkjava-helloworld/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn package appengine:run\n```\n\n----------------------------------------\n\nTITLE: Enabling Container Analysis API in Google Cloud\nDESCRIPTION: Command to enable the Container Analysis API service in Google Cloud, which is required for vulnerability scanning features.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/container-registry/vulnerability-notification-function/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable containeranalysis.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Setting Up Compute Region and Zone for Kafka Server\nDESCRIPTION: Configures the default compute region and zone for deploying the Kafka server and running the Dataflow job.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport REGION=${\n\"$(gcloud config get-value compute/region)\":-\"us-central1\"}\n\nexport ZONE=${\n\"$(gcloud config get-value compute/zone)\":-\"$REGION-a\"}\n```\n\n----------------------------------------\n\nTITLE: Viewing Terraform Output Resource Information\nDESCRIPTION: Command to display the names of all resources created by Terraform. This helps identify the exact resource names which include random IDs for uniqueness.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nterraform output\n```\n\n----------------------------------------\n\nTITLE: Running a Google App Engine Application Locally with Maven\nDESCRIPTION: Command to run the Users API sample application locally using the Maven gcloud plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/users/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Running Decryption Process in Java with Maven\nDESCRIPTION: This command executes the Java class responsible for querying and decrypting data from Cloud SQL Postgres using Tink.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/client-side-encryption/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=cloudsql.tink.QueryAndDecryptData\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Cloud SQL\nDESCRIPTION: Sample JSON structure showing required database connection credentials including Cloud SQL instance name, database name, and authentication details.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/idp-sql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CLOUD_SQL_CONNECTION_NAME\": \"<MY-PROJECT>:<INSTANCE-REGION>:<MY-DATABASE>\",\n  \"DB_NAME\": \"Cloud SQL postgreSQL database name\",\n  \"DB_USER\": \"database user\",\n  \"DB_PASSWORD\": \"database password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Quickstart Monitoring Sample\nDESCRIPTION: Maven command to execute the QuickstartSample class for writing time series data to a metric. Requires specifying a project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/cloud-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.example.monitoring.QuickstartSample \\\n        -DprojectId=YOUR_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Building Java project with Maven\nDESCRIPTION: This command builds the Java project using Maven, cleaning the target directory and packaging the application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/errorreporting/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Executes the test suite for the project using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/jobs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Deploying Java 17 App Engine Application\nDESCRIPTION: Maven commands for deploying a Java 17 application to App Engine using beta mode, which is required while Java 17 runtime is in Beta.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java17-bundled-services/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n mvn appengine:deploy -Dapp.deploy.gcloudMode=beta\n mvn appengine:deployIndex\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Cluster for gRPC Deployment\nDESCRIPTION: Creates a Google Kubernetes Engine cluster for deploying the gRPC application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters create my-cluster\n```\n\n----------------------------------------\n\nTITLE: Deleting Cloud Scheduler Jobs\nDESCRIPTION: Commands to delete Cloud Scheduler jobs for negative and positive ratings publishers.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngcloud scheduler jobs delete negative-ratings-publisher\ngcloud scheduler jobs delete positive-ratings-publisher\n```\n\n----------------------------------------\n\nTITLE: Updating Project ID in Java Compute Engine Sample\nDESCRIPTION: Code snippet showing how to set your Google Cloud project ID in the Java sample file. This must be updated with your actual project ID for the application to work properly.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final String projectId = \"YOUR_PROJECT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Importing Data for Song Rank Sample\nDESCRIPTION: This command imports data from a CSV file into the Bigtable table for the Song Rank sample. It specifies the instance, project, table ID, and column family.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/change-streams/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncbt -instance=$INSTANCE_ID -project=$GOOGLE_CLOUD_PROJECT import \\\n$TABLE_ID song-rank-data.csv  column-family=cf batch-size=1\n```\n\n----------------------------------------\n\nTITLE: Describing a Cloud Tasks Queue using gcloud CLI\nDESCRIPTION: This command retrieves and displays information about the default queue, which is useful for obtaining the projectId and locationId values needed for configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud tasks queues describe default\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Google App Engine\nDESCRIPTION: Command to deploy the application to Google App Engine Standard environment using gcloud CLI tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/http-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Running Encryption Data Insertion - Java Maven Command\nDESCRIPTION: Maven command to execute the Java class that handles data encryption and insertion into Cloud SQL SQL Server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/client-side-encryption/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=cloudsql.tink.EncryptAndInsertData\n```\n\n----------------------------------------\n\nTITLE: Building and running App Engine application with Maven\nDESCRIPTION: Maven commands to build, run locally, generate discovery documents, create client libraries, and deploy the application to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean appengine:run\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn endpoints-framework:discoveryDocs\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn endpoints-framework:clientLibs\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials for Service Account\nDESCRIPTION: Command to set the GOOGLE_APPLICATION_CREDENTIALS environment variable, pointing to the JSON file containing Service Account credentials for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/v3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=~/Downloads/<project-id>-0123456789abcdef.json\n```\n\n----------------------------------------\n\nTITLE: Setting Dataflow regional endpoint\nDESCRIPTION: Set the REGION environment variable to a Dataflow regional endpoint.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport REGION=your-cloud-region\n```\n\n----------------------------------------\n\nTITLE: Installing Google App Engine SDK for Java using gcloud\nDESCRIPTION: These commands update the Google Cloud SDK components for App Engine Java and ensure all components are up to date.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld-springboot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud components update app-engine-java\ngcloud components update\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Spark and Bigtable Configuration\nDESCRIPTION: Commands to set environment variables for Spark home directory, Bigtable project ID, instance ID, and table names needed for running the examples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSPARK_HOME=/PATH/TO/spark-2.4.8-bin-hadoop2.7\nBIGTABLE_SPARK_PROJECT_ID=your-project-id\nBIGTABLE_SPARK_INSTANCE_ID=your-instance-id\n\nBIGTABLE_SPARK_WORDCOUNT_TABLE=wordcount\nBIGTABLE_SPARK_WORDCOUNT_FILE=src/test/resources/Romeo-and-Juliet-prologue.txt\n\nBIGTABLE_SPARK_COPYTABLE_TABLE=copytable\n```\n\n----------------------------------------\n\nTITLE: Creating a New App Engine Project in Bash\nDESCRIPTION: Command to create a new App Engine project if this is the first time using App Engine. This establishes the serverless environment for the application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Updating Packages and Installing Dependencies on Compute Engine\nDESCRIPTION: This command updates the package list and installs necessary dependencies including git, OpenJDK 8, and Maven on a Compute Engine instance.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/signed-metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install git-core openjdk-8-jdk maven\n```\n\n----------------------------------------\n\nTITLE: Removing Kafka Firewall Rule\nDESCRIPTION: This command deletes the firewall rule that allowed Kafka traffic using gcloud compute.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngcloud compute firewall-rules delete allow-kafka\n```\n\n----------------------------------------\n\nTITLE: Running Local Jetty Server\nDESCRIPTION: Maven command to run the application locally using the Jetty Maven plugin for testing.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jetty/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Running the Application Locally\nDESCRIPTION: These commands set the BUCKET_NAME environment variable and run the application locally using Maven and Jetty. Replace [your-bucket-name] with the actual name of your Cloud Storage bucket.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cloudstorage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export BUCKET_NAME=[your-bucket-name]\n$ mvn clean jetty:run\n```\n\n----------------------------------------\n\nTITLE: Synthesizing SSML File to Audio\nDESCRIPTION: This command synthesizes the content of an SSML file to an output audio file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DSynthesizeFile -Dexec.args='--ssml resources/hello.ssml'\n```\n\n----------------------------------------\n\nTITLE: Deploying SparkJava Application to Google App Engine\nDESCRIPTION: Command to deploy a SparkJava application to Google App Engine standard environment. This will package and upload the application according to the configuration in app.yaml.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/sparkjava-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Storage bucket\nDESCRIPTION: Create a Cloud Storage bucket for storing output data.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nBUCKET_NAME=your-gcs-bucket\nPROJECT_NAME=$(gcloud config get-value project)\n\ngsutil mb gs://$BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google Cloud Project\nDESCRIPTION: This command sets an environment variable for the Google Cloud Project ID, which is required for running the task creation sample.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nexport GOOGLE_CLOUD_PROJECT=\"<YOUR_GOOGLE_CLOUD_PROJECT>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK, which is a prerequisite for deploying to App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Cleaning up resources\nDESCRIPTION: Delete the Cloud Scheduler job, Pub/Sub topic, and GCS files created during the tutorial.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud scheduler jobs delete publisher-job\ngcloud pubsub topics delete cron-topic\ngsutil -m rm -rf \"gs://$BUCKET_NAME/samples/output*\"\ngsutil rb gs://$BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Storage Bucket for Dataflow\nDESCRIPTION: Creates a new Cloud Storage bucket to store Dataflow job data and temporary files\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/encryption-keys/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport BUCKET=your-gcs-bucket\ngsutil mb gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dataflow Templates Directory\nDESCRIPTION: This bash snippet demonstrates how to navigate to the directory containing the Dataflow template samples after cloning the repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd java-docs-samples/dataflow/templates\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Jib for Google Cloud Run\nDESCRIPTION: This Bash command uses Jib to build a Docker image for the sample application without needing a Dockerfile or Docker installed.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmvn compile jib:dockerBuild\n```\n\n----------------------------------------\n\nTITLE: Deploying the App to Google App Engine\nDESCRIPTION: Maven command to package and deploy the application to Google App Engine standard environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sendgrid/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Bigtable Configuration File in Bash\nDESCRIPTION: Creates a configuration file for the cbt (command-line tool for Cloud Bigtable) with project and instance information. This file is used for subsequent cbt commands.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/memorystore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho project = $BIGTABLE_PROJECT > ~/.cbtrc\necho instance = $INSTANCE_ID >> ~/.cbtrc\n```\n\n----------------------------------------\n\nTITLE: Maven Build and Deploy Commands\nDESCRIPTION: Commands for building the project, generating OpenAPI docs, and deploying with Maven\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-backend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\nmvn endpoints-framework:openApiDocs\ngcloud endpoints services deploy target/openapi-docs/openapi.json\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to App Engine Flexible Environment\nDESCRIPTION: Maven command to clean the project, package it as a WAR file, and deploy it to Google App Engine Flexible Environment using the Java 8/Jetty 9 runtime.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/websocket-jetty/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Integration Test for Cloud Spanner Change Stream\nDESCRIPTION: Maven command to execute integration tests for the Cloud Spanner Change Stream sample. Requires specifying the Spanner instance and database names as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/changestreams/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn test -Dspanner.test.instance=my-instance -Dspanner.test.database=my-db -Dtest=com.example.spanner.changestreams.ChangeStreamSampleIT\n```\n\n----------------------------------------\n\nTITLE: Building and running App Engine application with Gradle\nDESCRIPTION: Gradle commands to build, run locally, generate discovery documents, create client libraries, and deploy the application to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-migration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean appengineRun\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew endpointsDiscoveryDocs\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew endpointsClientLibs\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew appengineDeploy\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow streaming pipeline with Gradle\nDESCRIPTION: Execute the Dataflow streaming pipeline using Gradle, reading from Pub/Sub and writing to GCS.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngradle execute -Dexec.args=\"\\\n    --project=$PROJECT_NAME \\\n    --region=$REGION \\\n    --inputTopic=projects/$PROJECT_NAME/topics/cron-topic \\\n    --output=gs://$BUCKET_NAME/samples/output \\\n    --gcpTempLocation=gs://$BUCKET_NAME/temp \\\n    --runner=DataflowRunner \\\n    --windowSize=2\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Java Docs Samples Repository\nDESCRIPTION: This command clones the Google Cloud Platform Java documentation samples repository to the local machine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/s3-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud project for App Engine deployment\nDESCRIPTION: This command initializes the Google Cloud project for deploying the App Engine application. It sets up the necessary configurations and credentials.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/urlfetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Local Development Command for Spring Boot Application\nDESCRIPTION: Maven command to run the Spring Boot application locally for development and testing purposes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/idp-sql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Creating First App Engine Application\nDESCRIPTION: Command to create a new App Engine application if one doesn't exist.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/spanner/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Querying BigQuery Results\nDESCRIPTION: Runs a BigQuery query to check the results of the Kafka to BigQuery pipeline.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbq query --use_legacy_sql=false 'SELECT * FROM `'\"$PROJECT.$DATASET.$TABLE\"'`'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cloud SQL Connection\nDESCRIPTION: Sets required environment variables for connecting to Cloud SQL instance including credentials, connection name, and database details.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/servlet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/service/account/key.json\nexport INSTANCE_CONNECTION_NAME='<MY-PROJECT>:<INSTANCE-REGION>:<INSTANCE-NAME>'\nexport DB_USER='my-db-user'\nexport DB_PASS='my-db-pass'\nexport DB_NAME='my_db'\n```\n\n----------------------------------------\n\nTITLE: Deploying Spring Boot application to App Engine flexible environment\nDESCRIPTION: This Maven command packages the application and deploys it to the App Engine flexible environment using the appengine-maven-plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld-springboot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Twilio in Java\nDESCRIPTION: These commands set the necessary environment variables for running the Twilio application locally. They include the Twilio account SID, auth token, and Twilio phone number.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/twilio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export TWILIO_ACCOUNT_SID=[your-twilio-accoun-sid]\n$ export TWILIO_AUTH_TOKEN=[your-twilio-auth-token]\n$ export TWILIO_NUMBER=[your-twilio-number]\n$ mvn clean jetty:run\n```\n\n----------------------------------------\n\nTITLE: Running Quickstart Sample for Text-To-Speech\nDESCRIPTION: This command executes the Quickstart sample, which synthesizes text to an output audio file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DQuickstart\n```\n\n----------------------------------------\n\nTITLE: Deploying WebSocket Application to App Engine\nDESCRIPTION: Maven command to package and deploy the application to App Engine Flexible Environment using Java 8/Jetty 9 runtime.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/websocket-jetty/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Building Java Project with Maven\nDESCRIPTION: Uses Maven to build the Java project, skipping tests. This command compiles the code and packages it into a JAR file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/servicedirectory/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud SDK\nDESCRIPTION: Command to authenticate with the Google Cloud SDK for accessing Google Cloud Platform services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-backend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Excluding Tomcat Starter in pom.xml\nDESCRIPTION: XML configuration to exclude Tomcat dependencies from the spring-boot-starter-web in pom.xml.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <exclusions>\n    <exclusion>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-tomcat</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Bigtable Change Streams\nDESCRIPTION: This snippet sets up the necessary environment variables for running the Bigtable Change Streams samples. It includes project IDs, instance ID, table ID, and region.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/change-streams/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=your-project-id\nBIGTABLE_PROJECT=your-project-id\nINSTANCE_ID=your-instance-id\nTABLE_ID=your-table-id\nREGION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for Bigtable bulk data generator\nDESCRIPTION: Sets the required environment variables before running the bulk data generator. These include the GCP project ID, Bigtable instance ID, desired size in terabytes, and the GCP region.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/bulk-data-generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=your-project-id\nINSTANCE_ID=your-instance-id\nBIGTABLE_SIZE=1.5 // Size in terabytes in .5 increments\nREGION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application\nDESCRIPTION: Maven commands to clean, package and deploy the application to Google App Engine\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/taskqueues-pull/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Google Cloud Datastore Sample Locally with Maven\nDESCRIPTION: Command to run the Cloud Datastore sample application locally using the Cloud SDK Maven plugin. After execution, the application will be accessible at localhost:8080.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/datastore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Accessing GCS from App Engine with Service Account\nDESCRIPTION: Sample showing how to access Google Cloud Storage from an App Engine application using the App Engine service account. Requires configuring appropriate IAM permissions for the App Engine service account.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/README.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Running Java Cloud Spanner Leaderboard Application\nDESCRIPTION: This command runs the Leaderboard application JAR file, displaying usage instructions and available commands. It should be executed in the 'target' directory where the JAR file is built.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/leaderboard/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar leaderboard.jar\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally\nDESCRIPTION: Command to run the App Engine application locally using the Cloud SDK Maven plugin for testing and development.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/requests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud SDK and project\nDESCRIPTION: Initialize the Google Cloud SDK and set it to your GCP project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Creating Bigtable Table and Inserting Data in Bash\nDESCRIPTION: Uses cbt commands to create a Bigtable table with a column family and insert a sample row of data. This sets up the initial data for the caching demonstration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/memorystore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncbt createtable $TABLE_ID \"families=stats_summary\" \ncbt set mobile-time-series phone#4c410523#20190501 stats_summary:os_build=PQ2A.190405.003 stats_summary:os_name=android\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application\nDESCRIPTION: This command packages the application and deploys it to Google Managed VMs using the App Engine Maven plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cloudstorage/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Spanner Database Connection String in Hibernate XML\nDESCRIPTION: Specifies the format for the database connection string in the Hibernate configuration file. This string connects the application to a specific Google Cloud Spanner instance and database.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/hibernate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\njdbc:cloudspanner:/projects/{YOUR_PROJECT_ID}/instances/{YOUR_INSTANCE_ID}/databases/{YOUR_DATABASE_ID}\n```\n\n----------------------------------------\n\nTITLE: Repository Link in Markdown\nDESCRIPTION: Markdown link pointing to the new location of the Google AutoML Vision samples in the googleapis/java-automl repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/vision/automl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Google AutoML Vision Samples\n\nThese samples have moved to [googleapis/java-automl](https://github.com/googleapis/java-automl/tree/main/samples).\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Maven\nDESCRIPTION: Executes all tests in the Java project using Maven. This command compiles the code, runs the tests, and verifies the results.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/servicedirectory/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials\nDESCRIPTION: Command to set the Google Application Credentials environment variable for authentication\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsublite/streaming-analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=path/to/your/key/file\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for GCS Event Service\nDESCRIPTION: Sets up required environment variables for the Cloud Run service, container, trigger, and GCS bucket names.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MY_RUN_SERVICE=gcs-service\nexport MY_RUN_CONTAINER=gcs-container\nexport MY_GCS_TRIGGER=gcs-trigger\nexport MY_GCS_BUCKET=\"$(gcloud config get-value project)-gcs-bucket\"\n```\n\n----------------------------------------\n\nTITLE: Running Encryption Data Insertion in Cloud SQL MySQL with Tink\nDESCRIPTION: Command to execute the Java application that encrypts and inserts data into a Cloud SQL MySQL database using Tink for encryption.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/client-side-encryption/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=cloudsql.tink.EncryptAndInsertData\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Topic and Subscription in Bash\nDESCRIPTION: Sets up a Pub/Sub topic and subscription for streaming data input to the Dataflow pipeline.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TOPIC=\"messages\"\nexport SUBSCRIPTION=\"$TOPIC\"\n\ngcloud pubsub topics create $TOPIC\ngcloud pubsub subscriptions create --topic $TOPIC $SUBSCRIPTION\n```\n\n----------------------------------------\n\nTITLE: Running the Java Bookstore Client Locally\nDESCRIPTION: This command runs the client component of the Bookstore application. It executes the compiled JAR file, which by default will connect to the server at localhost:8000.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/bookstore-grpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -jar ./client/build/libs/client.jar\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in OAuth2Filter Java Class\nDESCRIPTION: This snippet refers to uncommenting a logging statement in the OAuth2Filter Java class to enable logging for troubleshooting purposes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/oauth2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncontext.log\n```\n\n----------------------------------------\n\nTITLE: Running Data Query and Decryption - Java Maven Command\nDESCRIPTION: Maven command to execute the Java class that retrieves and decrypts data from Cloud SQL SQL Server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/sqlserver/client-side-encryption/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=cloudsql.tink.QueryAndDecryptData\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine app with Maven\nDESCRIPTION: Command to build and deploy the App Engine application using Maven and the App Engine plugin. This packages the application and deploys it to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Maven Commands for Compilation and Execution\nDESCRIPTION: Commands to compile the Java files and run the main method in HibernateSampleApplication.java using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/hibernate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile exec:java\n```\n\n----------------------------------------\n\nTITLE: Deleting Bigtable Instance\nDESCRIPTION: Commands to delete the Bigtable instance and verify deletion by listing remaining instances.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  deleteinstance $BIGTABLE_SPARK_INSTANCE_ID\n```\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  listinstances\n```\n\n----------------------------------------\n\nTITLE: Cloning the Java Sample Repository\nDESCRIPTION: Git command to clone the Google Cloud Platform Java samples repository which contains the SendGrid email sample.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Setting Public Read ACL on Cloud Storage Bucket\nDESCRIPTION: This command sets the default Access Control List (ACL) on the specified Cloud Storage bucket to public-read, allowing files to be served directly from Cloud Storage. The bucket name should be replaced with your actual bucket name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cloudstorage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gsutil defacl set public-read gs://[your-bucket-name]\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Java11 Bundled Services in appengine-web.xml\nDESCRIPTION: XML configuration for App Engine Java11 application with bundled services. This configuration specifies the Java11 runtime and enables the App Engine APIs, which is the key difference from Java8 applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/datastore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n    <runtime>java11</runtime>\n    <app-engine-apis>true</app-engine-apis>\n</appengine-web-app>\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud project\nDESCRIPTION: Initializes the Google Cloud project for the Task Queue example.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/taskqueues-push/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Deploying Python App Engine Listener\nDESCRIPTION: Command to deploy the Python App Engine Listener application using appcfg.py tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-event-proxy-README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nappcfg.py -A <your app id> -V v1 update gae-firebase-listener-python\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application\nDESCRIPTION: Maven command to deploy the application to Google App Engine with project ID and version parameters\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/images/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn appengine:update -Dappengine.appId=YOUR-PROJECT-ID -Dappengine.version=SOME-VERSION\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Pub/Sub in Bash\nDESCRIPTION: Commands to set environment variables for the Pub/Sub topic name and verification token. The verification token ensures the endpoint only handles authorized requests.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PUBSUB_TOPIC=<your-topic-name>\nexport PUBSUB_VERIFICATION_TOKEN=<your-verification-token>\n```\n\n----------------------------------------\n\nTITLE: Setting Public Read Access for Cloud Storage Bucket\nDESCRIPTION: Command to set the default ACL (Access Control List) for a Cloud Storage bucket to public-read. This allows files to be served directly from Cloud Storage without authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/cloudstorage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngsutil defacl set public-read gs://[your-bucket-name]\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine App\nDESCRIPTION: Command to create an App Engine application in the current Google Cloud project. This is a prerequisite before deploying any App Engine applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Running App Locally with Maven Jetty Plugin\nDESCRIPTION: Command to run the application locally using the Maven Jetty plugin with the Spanner instance parameter. This is a workaround since App Engine Maven plugins don't work correctly for this sample.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/spanner/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn -DSPANNER_INSTANCE=my-spanner-instance jetty:run\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Flex Application with Maven\nDESCRIPTION: Command for packaging and deploying the Datastore sample application to App Engine Flex using Maven. This command cleans the project, packages it, and deploys it to Google Cloud.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/datastore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Hibernate HQL Query for Retrieving Person Entities\nDESCRIPTION: Example of a Hibernate Query Language (HQL) select statement used to retrieve all Person entities from the PersonsTable.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/hibernate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nHibernate: select person0_.id as id1_0_, person0_.address as address2_0_, person0_.name as name3_0_, person0_.nickname as nickname4_0_ from PersonsTable person0_\n```\n\n----------------------------------------\n\nTITLE: Structuring Input Instances for Vertex AI Prediction in JSON\nDESCRIPTION: This JSON snippet demonstrates how to format input instances for a Vertex AI prediction request. It includes an 'instances' array containing placeholder values for multiple input instances.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/mlengine/online-prediction/input.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"instances\": [\"YOUR_INPUT_INSTANCE1\", \"YOUR_INPUT_INSTANCE2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Kafka VM Instance\nDESCRIPTION: This command deletes the Kafka server VM instance using gcloud compute.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngcloud compute instances delete kafka-vm\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Bigtable App with Maven\nDESCRIPTION: This command runs the integration tests for the Bigtable application using Maven. It requires specifying the project ID and instance ID as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigtable/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dbigtable.projectID=PROJECTID -Dbigtable.instanceID=INSTANCEID verify\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Dataflow Resources in Bash\nDESCRIPTION: Stops the Dataflow pipeline, deletes the template spec file, and removes the container image.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataflow jobs list \\\n    --filter 'NAME:streaming-beam-sql AND STATE=Running' \\\n    --format 'value(JOB_ID)' \\\n  | xargs gcloud dataflow jobs cancel\n\ngsutil rm $TEMPLATE_PATH\n\ngcloud container images delete $TEMPLATE_IMAGE --force-delete-tags\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account\nDESCRIPTION: Command to create a new service account for accessing the Retail API\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/retail/interactive-tutorials/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud iam service-accounts create <YOUR_SERVICE_ACCOUNT_ID>\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Maven\nDESCRIPTION: Maven command to verify the application by running unit tests. This executes all test cases defined in the project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Creating First App Engine Project\nDESCRIPTION: Command to create an App Engine project if one hasn't been created before.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigquery/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Text File to Audio\nDESCRIPTION: This command synthesizes the content of a text file to an output audio file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DSynthesizeFile -Dexec.args='--text resources/hello.txt'\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Dataflow Template Resources\nDESCRIPTION: This bash snippet demonstrates how to clean up the resources created for the Dataflow template, including removing files from Cloud Storage and optionally deleting the bucket.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngsutil -m rm -rf \"$TEMPLATE_LOCATION*\"\ngsutil -m rm -rf \"gs://$BUCKET/samples/dataflow/wordcount/\"\n\n# [optional] Remove the Cloud Storage bucket.\ngsutil rb gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Creating Google App Engine Project\nDESCRIPTION: Command to create a new App Engine project if it's the first time setting one up.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded HL7 Message\nDESCRIPTION: A base64 encoded HL7 v2.x message containing patient identification and event data. The message appears to include MSH (Message Header), EVN (Event Type), and PID (Patient Identification) segments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/healthcare/v1/src/test/resources/hl7v2-sample-ingest.txt#2025-04-22_snippet_0\n\nLANGUAGE: base64\nCODE:\n```\nTVNIfF5+XCZ8QXxTRU5EX0ZBQ0lMSVRZfEF8QXwyMDE4MDEwMTAwMDAwMHx8VFlQRV5BfDIwMTgwMTAxMDAwMDAwfFR8MC4wfHx8QUF8fDAwfEFTQ0lJDUVWTnxBMDB8MjAxODAxMDEwMDAwMDANUElEfHwxMTExMTFeXl5eTVJOfDExMTExMTExXl5eXk1STn4xMTExMTExMTExXl5eXk5IU05NQlINCg==\n```\n\n----------------------------------------\n\nTITLE: Running Cloud Spanner JDBC Example with Maven\nDESCRIPTION: Command to compile and execute the Java application using Maven. Requires instance and database names as arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/jdbc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile exec:java -Dexec.args=\"<command> my-instance my-database\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project Environment Variable\nDESCRIPTION: Command to set the GOOGLE_CLOUD_PROJECT environment variable required for running the sample tests. This must be set to your specific project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/secretmanager/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ export GOOGLE_CLOUD_PROJECT=<your-project-id-here>\n```\n\n----------------------------------------\n\nTITLE: Installing Maven Dependency Locally\nDESCRIPTION: Command to install the Jetty server dependency locally in Maven repository\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/appengine-simple-jetty-main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for project setup.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/spanner/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Initializing GCloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for project setup and configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jsr356/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Executing the Mailjet Email Sender\nDESCRIPTION: Command to run the compiled Java application JAR file with recipient and sender email arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/mailjet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar compute-mailjet-1.0-SNAPSHOT-jar-with-dependencies.jar [RECIPIENT EMAIL] [SENDER EMAIL]\n```\n\n----------------------------------------\n\nTITLE: Running Integration Test for IAP in Maven\nDESCRIPTION: Maven command to run the integration test for the IAP samples. This test verifies the functionality of building and verifying IAP requests.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/iap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dtest=com.example.iap.BuildAndVerifyIapRequestIT verify\n```\n\n----------------------------------------\n\nTITLE: Viewing Cloud Run Service Logs\nDESCRIPTION: Retrieves and displays logs from the Cloud Run service to verify that it processed the GCS event correctly.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud logging read \"resource.type=cloud_run_revision AND \\\nresource.labels.service_name=$MY_RUN_SERVICE\" --project \\\n$PROJECT_ID --limit 30 --format 'value(textPayload)'\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Text with Audio Profile\nDESCRIPTION: This command synthesizes text with a specific audio profile to an output audio file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DSynthesizeText -Dexec.args='--text \"hello\" \"telephony-class-application\"'\n```\n\n----------------------------------------\n\nTITLE: Building the IAM Quickstart Project with Maven\nDESCRIPTION: Command to build the IAM Quickstart project using Maven. This step compiles the Java code and packages it for execution.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/iam/api-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Retrieving GCE Instance External IP\nDESCRIPTION: Gets the list of compute instances to find the external IP address of the deployed gRPC server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute instances list\n```\n\n----------------------------------------\n\nTITLE: Deploying the App to App Engine\nDESCRIPTION: Command to build and deploy the application to Google App Engine. This packages the application and uploads it to your Google Cloud project's App Engine service.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/spanner/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Testing Pub/Sub Push Notifications Locally\nDESCRIPTION: Curl command to simulate a Pub/Sub push notification to the local development server, using a sample JSON message and the verification token.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -i --data @sample_message.json\n   \"localhost:8080/pubsub/push?token=<your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Spanner Database for Leaderboard Application\nDESCRIPTION: This command creates a sample Cloud Spanner database for the Leaderboard application. It requires specifying the instance ID and database ID as parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/leaderboard/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar leaderboard.jar create my-instance my-database\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to App Engine\nDESCRIPTION: Maven command to package and deploy the application to Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/cron/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Cloning and Accessing the Java Sample Code\nDESCRIPTION: Series of Bash commands to create a directory, clone the Google Cloud Java samples repository, and navigate to the Compute Engine sample directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir some_directory\ncd some_directory\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\ncd java-docs-samples/compute/cmdline\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Database Security Rules\nDESCRIPTION: JSON configuration for Firebase Realtime Database security rules that allow read and write access to the database.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-backend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the SendGrid Sample with Maven\nDESCRIPTION: Maven command to clean the project directory and package the application into a JAR file with dependencies.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot App Locally with Maven\nDESCRIPTION: Maven command to package and run the Spring Boot application locally.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn package appengine:run\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed Spring Boot App\nDESCRIPTION: Command to open the deployed application in a browser. The app can be accessed either through this command or directly via the appspot.com URL.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/springboot-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Voices for Text-To-Speech\nDESCRIPTION: This command runs the sample that lists all supported voices for the Text-To-Speech API.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DListVoices\n```\n\n----------------------------------------\n\nTITLE: Building Java project with Maven\nDESCRIPTION: This command builds the Java project using Maven, skipping tests.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Creating Appengine Directory and Copying App YAML\nDESCRIPTION: Commands to create the required appengine directory for Java 11 runtime and copy the app.yaml configuration file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src/main/appengine\ncp ../../../appengine-java11/cloudsql/app.yaml src/main/appengine/\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cloud Spanner Connection\nDESCRIPTION: Environment variable configuration required to connect the application to a Google Cloud Spanner database. These variables specify the project, instance, and database names.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/r2dbc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport project=[PROJECT]\nexport instance=[INSTANCE]\nexport database=[DATABASE]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud CLI\nDESCRIPTION: Command to authenticate locally using the Google Cloud CLI, enabling access to Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project ID Environment Variable\nDESCRIPTION: Sets the GOOGLE_CLOUD_PROJECT environment variable to the user's Google Cloud project ID. This is required to run the tests for the Service Directory samples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/servicedirectory/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ export GOOGLE_CLOUD_PROJECT=<your-project-id-here>\n```\n\n----------------------------------------\n\nTITLE: Updating Packages and Installing Dependencies on Google Compute Engine\nDESCRIPTION: Command to update apt package lists and install required packages including git, OpenJDK 8, and Maven on a Compute Engine instance.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install git-core openjdk-8-jdk maven\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for Cloud SQL PostgreSQL connection\nDESCRIPTION: Sets environment variables needed for connecting to a Cloud SQL PostgreSQL instance, including service account credentials, instance connection name, database user, password, and database name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/service/account/key.json\nexport INSTANCE_CONNECTION_NAME='<MY-PROJECT>:<INSTANCE-REGION>:<INSTANCE-NAME>'\nexport DB_USER='my-db-user'\nexport DB_PASS='my-db-pass'\nexport DB_NAME='my_db'\n```\n\n----------------------------------------\n\nTITLE: Deploying Google App Engine Application using Maven\nDESCRIPTION: This command cleans the project, packages it, and deploys it to Google App Engine. It uses Maven for build and deployment processes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/datastore-schedule-export/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: CSV Transaction Header Format\nDESCRIPTION: The header structure for transaction data that defines the fields used in the fraud detection system. This shows the format expected when submitting transactions for processing.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/use-cases/fraudDetection/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nuser_id, unix_time_millisecond, transaction_num, amount, merchant_id, merch_lat, merch_long, is_fraud\n```\n\n----------------------------------------\n\nTITLE: API Request Example\nDESCRIPTION: cURL command to test the deployed API endpoint with a POST request\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-backend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"message\":\"echo\"}' \\\n    https://$PROJECT_ID.appspot.com/_ah/api/echo/v1/echo\n```\n\n----------------------------------------\n\nTITLE: Configuring appengine-web.xml for App Engine\nDESCRIPTION: XML configuration for appengine-web.xml to specify App Engine settings like version, threadsafe, and runtime.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n  <version>1</version>\n  <threadsafe>true</threadsafe>\n  <runtime>java8</runtime>\n</appengine-web-app>\n```\n\n----------------------------------------\n\nTITLE: Building Java project with Maven for Google Cloud Natural Language API\nDESCRIPTION: This command builds the Java project using Maven, creating a jar file with dependencies for the Google Cloud Natural Language API samples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/language/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmvn clean compile assembly:single\n```\n\n----------------------------------------\n\nTITLE: Deploying the App Engine application using Maven\nDESCRIPTION: Command sequence to clean the project, package it, and deploy it to Google App Engine using Maven. This process prepares the application for production use on the App Engine platform.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/analytics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a Pub/Sub Topic\nDESCRIPTION: Command to create a new Pub/Sub topic using the Google Cloud CLI, which is required for publishing and subscribing to messages.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics create <your-topic-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials in Bash\nDESCRIPTION: This snippet shows how to set the GOOGLE_APPLICATION_CREDENTIALS environment variable to authenticate with Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/your-project-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Accessing GCS with Application Default Credentials\nDESCRIPTION: Command line sample demonstrating how to access Google Cloud Storage buckets using Application Default Credentials (ADC) authentication method.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/README.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Cloning Java Docs Samples Repository\nDESCRIPTION: These commands clone the Google Cloud Platform Java docs samples repository and navigate to the Pub/Sub sample directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/pubsub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\ncd java-docs-samples/flexible/pubsub\n```\n\n----------------------------------------\n\nTITLE: Converting Client Certificates to PKCS #12 and Java Keystore\nDESCRIPTION: This snippet demonstrates how to convert client key and certificate files to a PKCS #12 archive and then import them into a Java keystore. It uses openssl and keytool commands to perform the conversion and import operations.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -in client-cert.pem -inkey client-key.pem \\\n  -name \"mysqlclient\" -passout pass:mypassword -out client-keystore.p12\n\nkeytool -importkeystore -srckeystore client-keystore.p12 -srcstoretype pkcs12 \\\n -srcstorepass <password> -destkeystore <keystore-filename> -deststoretype JKS -deststorepass <password>\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Run Service\nDESCRIPTION: This command deploys the Cloud Run service named 'cloudrun-events-pubsub' using the previously built container image.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/pubsub/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud run deploy cloudrun-events-pubsub \\\n--image gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n```\n\n----------------------------------------\n\nTITLE: Configuring Places API Key in Maven POM\nDESCRIPTION: XML configuration in pom.xml to set the Google Places API key for local development environment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/async-rest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<places.appkey>YOUR_PLACES_APP_KEY</places.appkey>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample App Repository in Git\nDESCRIPTION: Commands for cloning the Google Cloud Platform Java samples repository and navigating to the pubsub directory to access the sample application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\ncd java-docs-samples/appengine-java8/pubsub\n```\n\n----------------------------------------\n\nTITLE: Running All Tests\nDESCRIPTION: Command to run all tests for the authentication samples project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Configuring logging.properties for App Engine\nDESCRIPTION: INI configuration for logging.properties to set the logging level for App Engine deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n.level = INFO\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google Cloud Project\nDESCRIPTION: Commands to set required environment variables for project ID and service account credentials needed to run the tests.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/privateca/snippets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport GOOGLE_CLOUD_PROJECT=\"<google-project-id-here>\"\nexport GOOGLE_APPLICATION_CREDENTIALS=\"<path-to-service-account-credentials-file>\"\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Text to Audio\nDESCRIPTION: This command synthesizes the given text to an output audio file using the Text-To-Speech API.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DSynthesizeText -Dexec.args='--text \"hello\"'\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed App Engine Application\nDESCRIPTION: Command to open the deployed application in a browser using the gcloud command-line tool. This provides a convenient way to access the application after deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/custom-entrypoint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sample Application\nDESCRIPTION: Series of commands to clone the repository, install dependencies, and compile the application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/guestbook-cloud-firestore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd java-docs-samples/appengine-java11/appengine-simple-jetty-main\nmvn install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ../guestbook-cloud-firestore\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Testing Push Messages\nDESCRIPTION: curl command to send test messages to the local push endpoint using a sample JSON payload\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/pubsub/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -i --data @sample_message.json\n\"localhost:8080/pubsub/push?token=<your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Queue ID\nDESCRIPTION: This command sets an environment variable for the Cloud Tasks queue ID, which is used when creating tasks.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nexport QUEUE_ID=\"my-appengine-queue\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Bigtable Pipeline\nDESCRIPTION: Environment variable configuration for the batch write flow control example. Defines project settings, Bigtable instance details, and pipeline parameters including number of rows, columns, and workers.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/batch-write-flow-control-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=<your-project-id>\nINSTANCE_ID=<your-instance-id>\nTABLE_ID=<your-table-id>\nREGION=<your-region>\nNUM_ROWS=<number-of-rows>\nNUM_COLS_PER_ROW=<number-of-columns-per-row>\nNUM_BYTES_PER_COL=<number-of-bytes-per-col>\nNUM_WORKERS=<number-of-workers>\nMAX_NUM_WORKERS=<max-number-of-workers>\nUSE_CLOUD_BIGTABLE_IO=<true/false>\n```\n\n----------------------------------------\n\nTITLE: Creating GCE Instance with Required Scopes\nDESCRIPTION: Command to create a Google Compute Engine instance with the necessary scopes for running the Cloud Monitoring sample application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute instances create --scopes=\"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/compute.readonly\" test-instance\n```\n\n----------------------------------------\n\nTITLE: Creating a task with immediate execution\nDESCRIPTION: Command to run the CreateTask application to create a task with a specified payload. The task targets the /tasks/create endpoint of the App Engine application and is executed immediately.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"com.example.task.CreateTask\" \\\n    -Dexec.args=\"--project-id $GOOGLE_CLOUD_PROJECT \\\n    --queue $QUEUE_ID \\\n    --location $LOCATION_ID \\\n    --payload hello\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the Cloud SQL MySQL servlet sample location.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../cloud-sql/mysql/servlet/\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK for App Engine Deployment\nDESCRIPTION: This command initializes the Google Cloud SDK, which is required for deploying applications to App Engine. It sets up the necessary configuration for your Google Cloud project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Environment Variables in appengine-web.xml\nDESCRIPTION: XML configuration for setting up SendGrid API key and sender email address as environment variables in the App Engine configuration file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/sendgrid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<env-variables>\n  <env-var name=\"SENDGRID_API_KEY\" value=\"YOUR-SENDGRID-API-KEY\" />\n  <env-var name=\"SENDGRID_SENDER\" value=\"YOUR-SENDGRID-SENDER\" />\n</env-variables>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Bigtable Proxy\nDESCRIPTION: Shell commands demonstrating how to build, verify, and run the Bigtable proxy. Includes steps for building the binary, verifying permissions, and starting the proxy server with appropriate configuration parameters.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/bigtable-proxy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Build the binary\nmvn package\n\n# unpack the binary on the proxy host\nunzip target/bigtable-proxy-0.0.1-SNAPSHOT-bin.zip\ncd bigtable-proxy-0.0.1-SNAPSHOT\n\n# Verify that the proxy has require permissions using an existing table. Please note that the table\n# data will not be modified, however a test metric will be written.\n./bigtable-verify.sh  \\\n  --bigtable-project-id=$BIGTABLE_PROJECT_ID \\\n  --bigtable-instance-id=$BIGTABLE_INSTANCE_ID \\\n  --bigtable-table-id=$BIGTABLE_TABLE_ID \\\n  --metrics-project-id=$METRICS_PROJECT_ID\n\n# Then start the proxy on the specified port. The proxy can forward requests for multiple\n# Bigtable projects/instances/tables. However it will export health metrics to a single project\n# specified by `metrics-project-id`. \n./bigtable-proxy.sh \\\n  --listen-port=1234 \\\n  --metrics-project-id=SOME_GCP_PROJECT\n \n# Start your application, and redirect the bigtable client to connect to the local proxy. \nexport BIGTABLE_EMULATOR_HOST=\"localhost:1234\"\npath/to/application/with/bigtable/client\n```\n\n----------------------------------------\n\nTITLE: Synthesizing SSML to Audio\nDESCRIPTION: This command synthesizes SSML (Speech Synthesis Markup Language) to an output audio file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/beta/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nmvn exec:java -DSynthesizeText -Dexec.args='--ssml \"<speak>Hello there.</speak>\"'\n```\n\n----------------------------------------\n\nTITLE: Assembling Spark Application JAR with SBT\nDESCRIPTION: Command to build a fat JAR containing the Bigtable Spark samples application and all its dependencies using SBT build tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsbt clean assembly\n```\n\n----------------------------------------\n\nTITLE: Running Java Firebase Event Proxy Locally\nDESCRIPTION: Commands to run the Java Firebase Event Proxy application in a local development environment using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-event-proxy-README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd gae-firebase-event-proxy\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: Command to clone the Google Cloud Platform Java samples repository from GitHub which contains the Eventarc samples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Running Dataflow Template with gcloud\nDESCRIPTION: This bash snippet shows how to execute the Dataflow template using the 'gcloud' command-line tool. It sets up job parameters and submits the job to Dataflow.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport JOB_NAME=wordcount-$(date +'%Y%m%d-%H%M%S')\nexport INPUT=gs://apache-beam-samples/shakespeare/kinglear.txt\n\ngcloud dataflow jobs run $JOB_NAME \\\n  --gcs-location $TEMPLATE_LOCATION \\\n  --parameters inputFile=$INPUT,outputBucket=$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluentd Forward Source for Stackdriver\nDESCRIPTION: Configuration for the Google Fluentd logging agent that enables forwarding of logs. This configuration is added to /etc/google-fluentd/config.d/forward.conf to set up the logging port.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/error-reporting/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<source>\n  type forward\n  port 24224\n</source>\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Metrics for Backup Failure Logging\nDESCRIPTION: This command deploys custom metrics configuration to Cloud Logging using Deployment Manager. These metrics are used to filter logs from Cloud Functions, Cloud Scheduler, and Cloud Bigtable for failure notifications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/scheduled-backups/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/scheduled_backups.sh add-metrics\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of Cloud Storage Bucket\nDESCRIPTION: Command to list the contents of the Cloud Storage bucket to verify the file was uploaded successfully.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngsutil ls $BIGTABLE_SPARK_BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Version\nDESCRIPTION: Command to configure the default Java version on the system.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/mailjet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-alternatives --config java\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK and configure project settings.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials in Bash\nDESCRIPTION: This command sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the project credentials JSON file. This is necessary for authenticating the application with Google Cloud services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/vision/face-detection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/your-project-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Setup and Configuration Instructions in Markdown\nDESCRIPTION: Markdown documentation outlining the prerequisites, setup steps, and configuration required to run the Cloud Spanner OpenCensus sample, including API enablement and authentication setup.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/opencensus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cloud Spanner OpenCensus Sample\n\n>Note: OpenCensus project is deprecated. See [Sunsetting OpenCensus](https://opentelemetry.io/blog/2023/sunsetting-opencensus/). We recommend migrating to OpenTelemetry, the successor project.\n\nAn example that demonstrates round-trip and query stats latency of [Google Cloud Spanner](https://cloud.google.com/spanner/) operations.\n\nThis sample requires [Java](https://www.java.com/en/download/) and [Maven](http://maven.apache.org/) for building the application.\n\nThis sample includes 2 classes that demonstrate how to record Cloud Spanner's latencies.\n\n* `CaptureGrpcMetric` - capture client round-trip latency.\n* `CaptureGfeMetric` - capture Google Front End (GFE) latency.\n* `CaptureQueryStatsMetric` - capture query stats latency.\n\n## Build and Run\n\n1.  **Follow the set-up instructions in [the documentation](https://cloud.google.com/java/docs/setup).**\n\n2.  Enable APIs for your project.\n    [Click here](https://console.cloud.google.com/flows/enableapi?apiid=spanner.googleapis.com&showconfirmation=true)\n    to visit Cloud Platform Console and enable the Google Cloud Spanner API.\n\n3.  Create a Cloud Spanner instance and database via the Cloud Plaform Console's\n    [Cloud Spanner section](http://console.cloud.google.com/spanner).\n\n4.  Enable application default credentials by running the command `gcloud auth application-default login`.\n```\n\n----------------------------------------\n\nTITLE: Running the application locally with Maven exec plugin\nDESCRIPTION: Command to start the local server using the Maven exec plugin, passing the WAR file as an argument.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.args=\"../helloworld-servlet/target/helloworld.war\"\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Client Against GCE Deployed Service\nDESCRIPTION: Executes the Java gRPC client, connecting to the Endpoints proxy on the GCE instance using an API key for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njava -jar client/build/libs/client.jar --host <IP of GCE Instance>:80 --api_key <API Key from Console>\n```\n\n----------------------------------------\n\nTITLE: System Setup Commands for Stackdriver\nDESCRIPTION: Series of shell commands for installing dependencies, cloning the repository, and running the Java application. Includes package installation, Java version configuration, and Maven build commands.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/error-reporting/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update && sudo apt-get install git-core openjdk-8-jdk maven\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo service google-fluentd restart\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo update-alternatives --config java\n```\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\nLANGUAGE: shell\nCODE:\n```\njava -jar compute-stackdriver-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Running Java application locally with Jetty Maven plugin\nDESCRIPTION: This command starts the Java application locally using the Jetty Maven plugin for testing purposes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/errorreporting/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Building Spanner Application\nDESCRIPTION: Commands to navigate to the Spanner application directory and build the package.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/spanner/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd ../spanner\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Navigating to Private CA Sample Code Directory\nDESCRIPTION: Command to change directory to the Private CA snippets folder containing the sample code.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/privateca/snippets/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd privateca/snippets\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK with gcloud init\nDESCRIPTION: Command to initialize the Google Cloud SDK after installation. This sets up your Google Cloud environment for further operations.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/spanner/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK in Bash\nDESCRIPTION: Command to initialize the Google Cloud SDK (gcloud) which is required for deploying and managing resources on Google Cloud Platform.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Deploying JavaMail API Sample to Google App Engine\nDESCRIPTION: This command sequence cleans the project, packages it, and then deploys the JavaMail API sample application to Google App Engine using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/mail/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Building and Running Java Face Detection Sample with Maven and Java\nDESCRIPTION: These commands build the Java project using Maven and run the face detection sample. It compiles the code, creates a jar with dependencies, and executes the FaceDetectApp with input and output image paths.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/vision/face-detection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean compile assembly:single\njava -cp target/vision-face-detection-1.0-SNAPSHOT-jar-with-dependencies.jar com.google.cloud.vision.samples.facedetect.FaceDetectApp data/face.jpg output.jpg\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Maven\nDESCRIPTION: Command to clean and run the Spring Boot application using Maven. This command should be executed in the project directory to start the application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/vision/spring-framework/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Java Method Comment Pattern for Snippets\nDESCRIPTION: Example of the recommended comment style for Java snippet methods. Comments should be short and descriptive without using formal javadoc format.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// This is an example snippet for showing best practices.\npublic static void exampleSnippet(String projectId, String filePath) {\n    // Snippet content ...\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Java 11 Compatible POM File\nDESCRIPTION: Command to copy the Java 11 compatible Maven POM file to the project directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp ../../../appengine-java11/cloudsql/pom.xml ./\n```\n\n----------------------------------------\n\nTITLE: Running Authentication Example on Google Compute Engine\nDESCRIPTION: Command to run the AuthExample class specifically for Google Compute Engine instances.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.google.cloud.auth.samples.AuthExample\n    -Dexec.args=\"compute\"\n```\n\n----------------------------------------\n\nTITLE: Hibernate Insert Queries for Person and Payment Entities\nDESCRIPTION: Example of Hibernate-generated SQL insert statements for Person and Payment entities, including specialized payment types like WireTransferPayment and CreditCardPayment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/hibernate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nHibernate: insert into PersonsTable (address, name, nickname, id) values (?, ?, ?, ?)\nHibernate: insert into Payment (amount, id) values (?, ?)\nHibernate: insert into WireTransferPayment (wire_id, id) values (?, ?)\nHibernate: insert into Payment (amount, id) values (?, ?)\nHibernate: insert into CreditCardPayment (credit_card_id, id) values (?, ?)\n```\n\n----------------------------------------\n\nTITLE: Creating New Apache Beam Pipeline\nDESCRIPTION: Maven commands to generate a new Apache Beam pipeline project using the starter archetype.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport NAME=your-pipeline-name\nexport PACKAGE=org.apache.beam.samples\nexport JAVA_VERSION=11\n\n# This creates a new directory with the pipeline's code within it.\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.apache.beam \\\n    -DarchetypeArtifactId=beam-sdks-java-maven-archetypes-starter \\\n    -DtargetPlatform=$JAVA_VERSION \\\n    -DartifactId=$NAME \\\n    -DgroupId=$PACKAGE \\\n    -DinteractiveMode=false\n\n# Navigate to the pipeline contents.\ncd $NAME\n```\n\n----------------------------------------\n\nTITLE: Uploading Input File to Cloud Storage\nDESCRIPTION: Command to upload the sample text file to the Cloud Storage bucket for processing by the Wordcount application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngsutil cp src/test/resources/Romeo-and-Juliet-prologue.txt $BIGTABLE_SPARK_BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Deleting BigQuery Table\nDESCRIPTION: This command removes a specific BigQuery table from the project dataset using the bq command-line tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nbq rm -f -t $PROJECT:$DATASET.$TABLE\n```\n\n----------------------------------------\n\nTITLE: Google Cloud CLI Instance Deletion Command\nDESCRIPTION: Example gcloud CLI command to delete a specific VM instance from a particular zone in Google Compute Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ngcloud compute instances delete my-sample-instance --zone us-central1-f\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed Spring Boot Application on Google App Engine Flex\nDESCRIPTION: This command opens the deployed Spring Boot application in the default web browser. It uses the gcloud CLI tool to retrieve and open the application URL.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/springboot-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Running Workflow Tests with Maven\nDESCRIPTION: Command to execute the test suite for Cloud Workflows implementations using Maven build tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/workflows/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for project setup.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Building the S3 SDK Sample Project\nDESCRIPTION: This Maven command builds the S3 SDK sample project, compiling the source code and packaging it into a deployable format.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/s3-sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK for JavaMail API Sample\nDESCRIPTION: This command initializes the Google Cloud SDK, which is a prerequisite for running and deploying the JavaMail API sample application on Google App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/mail/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Building the Bigtable Workload Generator Project with Maven\nDESCRIPTION: Builds the Maven project for the Bigtable workload generator, skipping tests, to prepare for template deployment or direct execution.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/workload-generator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Creating Secret for Cloud SQL Instance Connection Name\nDESCRIPTION: Command to create a secret in Google Cloud Secret Manager for the Cloud SQL instance connection name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/r2dbc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"my-awesome-project:us-central1:my-cloud-sql-instance\" | \\\n    gcloud secrets versions add INSTANCE_CONNECTION_NAME_SECRET --data-file=-\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployed Application\nDESCRIPTION: Command to browse to the deployed application using Google Cloud CLI.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Deleting Cloud Storage Bucket\nDESCRIPTION: Command to recursively remove a Cloud Storage bucket and all its contents. Warning: This operation cannot be undone.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngsutil rm -r gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Compiling Java Sample Code with Maven\nDESCRIPTION: This Maven command compiles the Java sample code for online prediction. It should be run after modifying the OnlinePredictionSample.java file with project, model, and version information.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/mlengine/online-prediction/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn compile\n```\n\n----------------------------------------\n\nTITLE: Building Java Application with Maven\nDESCRIPTION: Maven command to clean and package the Java application into a JAR file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/mailjet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application to Google Cloud\nDESCRIPTION: Shell commands to deploy the application and its indexes to Google Cloud. The deployment uses the beta gcloud mode for compatibility with Java17 bundled services.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java17-bundled-services/datastore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package appengine:deploy  -Dapp.deploy.gcloudMode=beta\nmvn appengine:deployIndex\n```\n\n----------------------------------------\n\nTITLE: Creating Artifact Registry Repository for Dataflow Flex Template\nDESCRIPTION: This snippet creates an Artifact Registry repository using the gcloud command-line tool. It sets the repository format to Docker and specifies the location.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/getting_started/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport REGION=\"us-central1\"\nexport REPOSITORY=\"your-repository\"\n\ngcloud artifacts repositories create $REPOSITORY \\\n    --repository-format=docker \\\n    --location=$REGION\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Assembly JAR\nDESCRIPTION: Command to set an environment variable that references the location of the assembled JAR file for use in subsequent Spark submit commands.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBIGTABLE_SPARK_ASSEMBLY_JAR=target/scala-2.11/bigtable-spark-samples-assembly-0.1.jar\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally\nDESCRIPTION: Maven command to run the application locally using the App Engine maven plugin\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/images/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Running the App Locally with Maven\nDESCRIPTION: Command to run the application locally using the Maven AppEngine plugin's development server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-tictactoe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Main Method Pattern for Java Snippets\nDESCRIPTION: Demonstrates the recommended structure for Java snippet methods including a main method with example values, proper parameter handling, and return values that can be used programmatically.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    // TODO(developer): Replace these variables before running the sample.\n    String projectId = \"my-project-id\";\n    String filePath = \"path/to/image.png\";\n    List<String> results = inspectImageFile(projectId, filePath);\n    for (String result : results) {\n      // process result ...\n    }\n}\n\n// This is an example snippet for showing best practices.\npublic static List<String> exampleSnippet(String projectId, String filePath) {\n    // Snippet content ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static IP Address for Kafka Server\nDESCRIPTION: Reserves a static IP address for the Kafka server to make it accessible to external applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute addresses create --region \"$REGION\" kafka-address\n\nexport KAFKA_ADDRESS=$(gcloud compute addresses describe --region=\"$REGION\" --format='value(address)' kafka-address)\n```\n\n----------------------------------------\n\nTITLE: Running Python App Engine Listener Locally\nDESCRIPTION: Commands to run the Python App Engine Listener application in a local development environment using dev_appserver.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-event-proxy-README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd gae-firebase-listener-python\ndev_appserver .\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project in gcloud CLI\nDESCRIPTION: This command sets the target Google Cloud project for subsequent gcloud commands. Replace PROJECT_NAME with your actual project identifier.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/datastore-schedule-export/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud config set project PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally Using Maven\nDESCRIPTION: Command to run the application locally using the Maven Cloud SDK plugin for Google App Engine\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/appidentity/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally\nDESCRIPTION: Maven command to run the App Engine application locally for testing and development.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigquery/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in Bigtable Wordcount Table\nDESCRIPTION: Command to verify the Wordcount application results by counting the number of rows inserted into the Bigtable table.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncbt \\\n  -project=$BIGTABLE_SPARK_PROJECT_ID \\\n  -instance=$BIGTABLE_SPARK_INSTANCE_ID \\\n  count $BIGTABLE_SPARK_WORDCOUNT_TABLE\n```\n\n----------------------------------------\n\nTITLE: Displaying Run in Google Cloud Button in Markdown\nDESCRIPTION: This code snippet shows how to embed a 'Run in Google Cloud' button in a Markdown file. It uses an image link to display the button and a URL link to initiate the deployment process.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/pubsub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Run in Google Cloud][run_img]][run_link]\n\n[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/pubsub\n```\n\n----------------------------------------\n\nTITLE: Markdown Link with Cloud Shell Button for Google App Engine Flexible Java Sample\nDESCRIPTION: A markdown link that opens the project in Google Cloud Shell for editing. The link directs to the GitHub repository with the specific path to the README.md file in the flexible/extending-runtime directory.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/extending-runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&page=editor&open_in_editor=flexible/extending-runtime/README.md\">\n<img alt=\"Open in Cloud Shell\" src =\"http://gstatic.com/cloudssh/images/open-btn.png\"></a>\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize the Google Cloud SDK for first-time setup.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/websocket-jetty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Cloning Java Pub/Sub Sample Repository\nDESCRIPTION: Commands to clone the Google Cloud Platform Java samples repository and navigate to the Pub/Sub sample directory\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/pubsub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\ncd java-docs-samples/flexible/pubsub\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally with Gradle\nDESCRIPTION: Gradle command to run the App Engine application locally for testing. This starts a local development server accessible at http://localhost:8080/.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew appengineRun\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Dataflow Flex Template\nDESCRIPTION: Commands to build and run a custom Dataflow Flex template\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsublite/streaming-analytics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngcloud dataflow flex-template build $TEMPLATE_PATH \\\n   --image-gcr-path \"$TEMPLATE_IMAGE\" \\\n   --sdk-language \"JAVA\" \\\n   --flex-template-base-image JAVA11 \\\n   --metadata-file \"metadata.json\" \\\n   --jar \"target/pubsublite-streaming-bundled-1.0.jar\" \\\n   --env FLEX_TEMPLATE_JAVA_MAIN_CLASS=\"examples.PubsubliteToGcs\"\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally\nDESCRIPTION: Maven command to run the application locally using Cloud SDK maven plugin\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/taskqueues-pull/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference for Cloud Shell\nDESCRIPTION: HTML link element that opens the project in Google Cloud Shell editor, with reference to a cloud shell button image.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&page=editor&open_in_editor=appengine-java8/endpoints-v2-README.md\">\n<img alt=\"Open in Cloud Shell\" src =\"http://gstatic.com/cloudssh/images/open-btn.png\"></a>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Twilio Development in Bash\nDESCRIPTION: Commands to set the required Twilio environment variables (account SID, auth token, and phone number) before running the application locally with Maven Jetty.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/twilio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export TWILIO_ACCOUNT_SID=[your-twilio-accoun-sid]\n$ export TWILIO_AUTH_TOKEN=[your-twilio-auth-token]\n$ export TWILIO_NUMBER=[your-twilio-number]\n$ mvn clean jetty:run\n```\n\n----------------------------------------\n\nTITLE: Configuring SLF4J Logging for Google Cloud Platform in Java\nDESCRIPTION: This snippet demonstrates how to set up SLF4J logging for consistent logging in Google Cloud Platform Java samples. It's recommended to use this approach unless specifically demonstrating raw Stackdriver API usage.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class MyClass {\n    private static final Logger logger = LoggerFactory.getLogger(MyClass.class);\n\n    public void doSomething() {\n        logger.info(\"This is an info message\");\n        logger.error(\"This is an error message\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenJDK 11 in Google Cloud Shell\nDESCRIPTION: Commands to switch to OpenJDK 11 in Google Cloud Shell and set the JAVA_HOME environment variable for Maven configuration.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n   sudo update-alternatives --config java\n   # And select the usr/lib/jvm/java-11-openjdk-amd64/bin/java version.\n   # Also, set the JAVA_HOME variable for Maven to pick the correct JDK:\n   export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\n```\n\n----------------------------------------\n\nTITLE: Removing Pub/Sub Resources\nDESCRIPTION: Commands to delete a Pub/Sub subscription and topic using environment variables.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngcloud pubsub subscriptions delete $SUBSCRIPTION\ngcloud pubsub topics delete $TOPIC\n```\n\n----------------------------------------\n\nTITLE: Running Application Locally\nDESCRIPTION: Maven command to run the application locally using the Exec Maven Plugin\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/appengine-simple-jetty-main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.args=\"../sample/target/sample.war\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize Google Cloud SDK after installation, setting up configuration for Google Cloud projects.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/websocket-jetty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine Application\nDESCRIPTION: Command to create a new App Engine application for first-time users.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/websocket-jsr356/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud appengine create\n```\n\n----------------------------------------\n\nTITLE: Deploying the App Engine Application\nDESCRIPTION: Maven command to package and deploy the application to App Engine after updating the environment variables in the appengine-web.xml configuration file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/pubsub/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying to App Engine Standard\nDESCRIPTION: Maven command to clean, package, and deploy the application to App Engine Standard.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating First App Engine Application\nDESCRIPTION: Command to create a new App Engine application in Google Cloud Platform, required before deploying any App Engine applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/websocket-jetty/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud appengine create\n```\n\n----------------------------------------\n\nTITLE: Running Video Intelligence Sample Tests\nDESCRIPTION: Command to execute all tests in the project using Maven. Requires proper project and authentication setup per Google Cloud documentation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/video/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Building Java Video Intelligence Samples with Maven\nDESCRIPTION: Command to build the project using Maven while skipping tests. Requires Maven to be installed as a prerequisite.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/video/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package -DskipTests=True\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Maven\nDESCRIPTION: Maven command to run verification tests for the Spring Boot application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Cloud CDN URL Signing Project\nDESCRIPTION: Maven command to build the project and execute tests for the Cloud CDN URL signing implementation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cdn/signed-urls/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Getting GKE Load Balancer IP\nDESCRIPTION: Retrieves the external IP address of the load balancer for the deployed gRPC service on GKE.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc grpc-hello\n```\n\n----------------------------------------\n\nTITLE: Excluding JUL to SLF4J Bridge in pom.xml\nDESCRIPTION: XML configuration to exclude the jul-to-slf4j dependency in pom.xml to avoid conflicts with Jetty's logging system.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>jul-to-slf4j</artifactId>\n  <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Java Tests with Maven\nDESCRIPTION: Command to run the test suite to verify the correct functioning of the code snippets.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/cloud-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Testing Cloud Storage Event Trigger\nDESCRIPTION: Creates a test file and uploads it to the Cloud Storage bucket to trigger the event and verify the service functionality.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/storage-handler/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch testfile.txt\ngsutil copy testfile.txt gs://$MY_GCS_BUCKET\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Application Locally\nDESCRIPTION: This Maven command is used to run the application locally. Note that OAuth2 APIs do not work with the development server.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/oauth2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Checking Maven Dependencies and Plugins\nDESCRIPTION: Commands to check for available updates to Maven plugins and dependencies.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# Check your plugin versions.\nmvn versions:display-plugin-updates\n\n# Check your dependency versions.\nmvn versions:display-dependency-updates\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Repository\nDESCRIPTION: Git command to clone the Google Cloud Platform Java samples repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/mailjet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Running All DLP API Tests with Maven\nDESCRIPTION: Command to clean the project and run all tests for the DLP API sample code using Maven's verify phase.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dlp/snippets/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Deleting Kafka Static Address\nDESCRIPTION: This command removes the static IP address associated with Kafka in the specified region using gcloud compute.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngcloud compute addresses delete --region \"$REGION\" kafka-address\n```\n\n----------------------------------------\n\nTITLE: Building Container Image with Jib for Local Testing\nDESCRIPTION: Maven command to build a local Docker container image of the sample application using the Jib plugin.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmvn compile jib:dockerBuild\n```\n\n----------------------------------------\n\nTITLE: Executing the SendGrid Email Sample\nDESCRIPTION: Command to run the compiled JAR file, which will send an email using the configured SendGrid settings.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njava -jar compute-sendgrid-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Building the Java Project with Maven\nDESCRIPTION: This command uses Maven to clean the project directory and package the Java class as a jar file with dependencies.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/signed-metadata/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Removing BigQuery Dataset\nDESCRIPTION: This command deletes an entire BigQuery dataset and all its tables. It uses the -r flag for recursive deletion and -f to force the operation without prompting.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nbq rm -r -f -d $PROJECT:$DATASET\n```\n\n----------------------------------------\n\nTITLE: Executing Java Sample Code with Maven\nDESCRIPTION: This Maven command executes the compiled Java sample code for online prediction. The -q flag is used for quiet output, suppressing Maven's logging messages.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/mlengine/online-prediction/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn -q exec:java\n```\n\n----------------------------------------\n\nTITLE: Building the Java Project with Maven\nDESCRIPTION: Commands to build the Java project using Maven, skipping tests during the build process.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Jib Plugin in pom.xml\nDESCRIPTION: XML configuration for the Jib Maven plugin that should be updated with the user's Google Cloud Project ID and sample name to create a container image.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>jib-maven-plugin</artifactId>\n  <version>2.0.0</version>\n  <configuration>\n    <to>\n      <image>gcr.io/PROJECT_ID/SAMPLE_NAME</image>\n    </to>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Making the JAR File Executable\nDESCRIPTION: Command to add execute permissions to the compiled JAR file containing the SendGrid email sample.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x compute-sendgrid-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Signed Metadata Sample Directory\nDESCRIPTION: This command changes the current directory to the location of the signed metadata sample code.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/signed-metadata/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncd java-docs-samples/compute/signed-metadata/\n```\n\n----------------------------------------\n\nTITLE: API Response Example\nDESCRIPTION: Expected JSON response from the API endpoint\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/endpoints-v2-backend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"message\": \"echo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Cloud Shell for Java Docs Samples\nDESCRIPTION: Markdown snippet for a button that opens the project in Google Cloud Shell. It provides a quick way for users to access and explore the sample code.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Open in Cloud Shell](http://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&page=editor&open_in_editor=dataflow/flex-templates/README.md)\n```\n\n----------------------------------------\n\nTITLE: File Path for SendGrid Configuration\nDESCRIPTION: The path to the Java servlet class where SendGrid API key, sender email, and recipient email need to be configured.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/sendgrid/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava-docs-samples/compute/sendgrid/src/main/java/com/example/compute/sendgrid/SendEmailServlet.java\n```\n\n----------------------------------------\n\nTITLE: Cloning Java Docs Samples Repository\nDESCRIPTION: This bash snippet shows how to clone the 'java-docs-samples' repository from GitHub, which contains the Dataflow template samples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/templates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine application using Maven\nDESCRIPTION: This command cleans the project, packages it, and deploys the application to Google App Engine. It ensures that the latest version of the application is deployed to the cloud.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/urlfetch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Building the Vulnerability Function Package\nDESCRIPTION: Command to clean and package the Maven project for deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/container-registry/vulnerability-notification-function/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Setting Application Name for Google API Client\nDESCRIPTION: Code snippet for setting the application name in the Java Compute Engine sample. This identifier helps Google track API usage across different applications.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/cmdline/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final String APPLICATION_NAME = \"\";\n```\n\n----------------------------------------\n\nTITLE: Checking GCS output\nDESCRIPTION: List the output files in the GCS bucket after the Dataflow job has completed.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngsutil ls gs://$BUCKET_NAME/samples/\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Dataset and Table in Bash\nDESCRIPTION: Creates a BigQuery dataset and table for storing the output of the Dataflow pipeline.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PROJECT=\"$(gcloud config get-value project)\"\nexport DATASET=\"beam_samples\"\nexport TABLE=\"streaming_beam_sql\"\n\nbq mk --dataset \"$PROJECT:$DATASET\"\n```\n\n----------------------------------------\n\nTITLE: Running Application in GAE Development Server\nDESCRIPTION: This snippet demonstrates how to run the application locally in the Google App Engine development server using Maven. It's useful for testing GAE-specific configurations before deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn appengine:run\n```\n\n----------------------------------------\n\nTITLE: Displaying Run in Google Cloud Button in Markdown\nDESCRIPTION: This snippet shows how to create a 'Run in Google Cloud' button using Markdown syntax. It includes an image link and a deployment link for the sample project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/system-package/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Run in Google Cloud][run_img]][run_link]\n\n[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/system-package\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up GCS Resources\nDESCRIPTION: Commands to remove the input text file from Google Cloud Storage and delete the bucket.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngsutil rm $BIGTABLE_SPARK_BUCKET_NAME/Romeo-and-Juliet-prologue.txt\ngsutil rb $BIGTABLE_SPARK_BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Removing BigQuery Dataset\nDESCRIPTION: Command to recursively and forcefully delete a BigQuery dataset and all its contents. Warning: This operation cannot be undone.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/streaming_beam_sql/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nbq rm -r -f -d $PROJECT:$DATASET\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages on Compute Engine\nDESCRIPTION: Command to update package list and install Git, OpenJDK 8, and Maven on the Compute Engine instance.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/mailjet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install git-core openjdk-8-jdk maven\n```\n\n----------------------------------------\n\nTITLE: Deploying Service to Cloud Run\nDESCRIPTION: Deploys the container image to Cloud Run as a service that allows unauthenticated access.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/audit-storage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy $MY_RUN_SERVICE \\\n--image gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER \\\n--allow-unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Dataflow Resources\nDESCRIPTION: Stops the Dataflow job, deletes the template spec file, and removes the Flex Template container images.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataflow jobs list \\\n    --filter 'NAME:kafka-to-bigquery AND STATE=Running' \\\n    --format 'value(JOB_ID)' \\\n  | xargs gcloud dataflow jobs cancel\n\ngsutil rm $TEMPLATE_PATH\n\ngcloud container images delete $TEMPLATE_IMAGE --force-delete-tags\n```\n\n----------------------------------------\n\nTITLE: Running Maven-based App Locally\nDESCRIPTION: Command to clean the project, compile, and run the application locally using Maven and Jetty.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean jetty:run-exploded\n```\n\n----------------------------------------\n\nTITLE: Deploying the App Engine Application\nDESCRIPTION: This command deploys the App Engine application to Google Cloud Platform using the gcloud command-line tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Executing Bigtable Batch Write Pipeline\nDESCRIPTION: Maven command to compile and run the batch write flow control example using Apache Beam on Google Cloud Dataflow. Includes all necessary pipeline parameters passed as command-line arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/beam/batch-write-flow-control-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=bigtable.BatchWriteFlowControlExample \\\n\"-Dexec.args=--runner=dataflow \\\n  --project=$GOOGLE_CLOUD_PROJECT \\\n  --bigtableInstanceId=$INSTANCE_ID \\\n  --bigtableTableId=$TABLE_ID \\\n  --bigtableRows=$NUM_ROWS \\\n  --bigtableColsPerRow=$NUM_COLS_PER_ROW \\\n  --bigtableBytesPerCol=$NUM_BYTES_PER_COL\\\n  --region=$REGION \\\n  --numWorkers=$NUM_WORKERS \\\n  --maxNumWorkers=$MAX_NUM_WORKERS \\\n  --useCloudBigtableIo=$USE_CLOUD_BIGTABLE_IO\"\n```\n\n----------------------------------------\n\nTITLE: Java Object Representation of Retrieved Person Entity\nDESCRIPTION: Example output showing the string representation of a Person object retrieved from the database, including its generated UUID and associated properties.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/hibernate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nPerson{\n id=688377a3-b884-4beb-886d-6e93317c5542\n name='person'\n nickname='purson'\n address='address'\n payment_amount=800\n}\n```\n\n----------------------------------------\n\nTITLE: Building Java Project with Maven\nDESCRIPTION: Maven command to build the project while skipping tests. Required for setting up the monitoring application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/monitoring/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Building Java Cloud Spanner Leaderboard Application with Maven\nDESCRIPTION: This command builds the Java application using Maven, skipping tests. It should be run in the 'complete' directory of the project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/leaderboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Installing Appengine Simple Jetty Main Dependency\nDESCRIPTION: Command to install the appengine-simple-jetty-main dependency required for deploying to App Engine Java 11 runtime.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/cloudsql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd java-docs-samples/appengine-java11/appengine-simple-jetty-main\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Project ID in Maven POM for Cloud Run Endpoints\nDESCRIPTION: This XML snippet shows how to set the project ID and other properties in the Maven POM file for a Cloud Run Endpoints project. It includes settings for source encoding, Java compiler version, and the Endpoints project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/endpoints-v2-backend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.target>11</maven.compiler.target>\n    <maven.compiler.source>11</maven.compiler.source>\n    <endpoints.project.id>PROJECT ID</endpoints.project.id>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vert.x instance and deploying Server verticle\nDESCRIPTION: Code snippet from the Main class that creates a Vert.x instance and deploys the Server verticle. This is the entry point for the Vert.x application.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/vertx-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nVertx vertx = Vertx.vertx();\nvertx.deployVerticle(new Server());\n```\n\n----------------------------------------\n\nTITLE: Running Gradle-based App Locally\nDESCRIPTION: Commands to run the application locally using Gradle or the Gradle wrapper if Gradle is not installed.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/helloworld/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngradle jettyRun\n```\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew appengineRun\n```\n\n----------------------------------------\n\nTITLE: Sending Test Messages to Local Pub/Sub Endpoint in Bash\nDESCRIPTION: Curl command to send a test message to the local development server. This simulates a Pub/Sub push notification using a sample JSON message file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -i --data @sample_message.json \\\n\"localhost:8080/pubsub/push?token=$PUBSUB_VERIFICATION_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands for the Vulnerability Function\nDESCRIPTION: Commands for local development and testing of the function, including running the function locally and building the package.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/container-registry/vulnerability-notification-function/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn function:run\n```\n\n----------------------------------------\n\nTITLE: Building Container Image with Jib Maven Plugin\nDESCRIPTION: Uses the Jib Maven Plugin to build and push a container image to Google Container Registry (GCR). The image name is dynamically set using the current GCP project ID.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/eventarc/generic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/eventarc-generic\n```\n\n----------------------------------------\n\nTITLE: Service Account Key Management\nDESCRIPTION: Commands to create and activate a service account key\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/retail/interactive-tutorials/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud iam service-accounts keys create ~/key.json --iam-account <YOUR_SERVICE_ACCOUNT_EMAIL>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth activate-service-account --key-file ~/key.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=~/key.json\n```\n\n----------------------------------------\n\nTITLE: Cloning the Google Cloud API Showcase Repository in Bash\nDESCRIPTION: Commands to clone the java-docs-samples repository and navigate to the translate-pubsub directory. This is the first step in setting up the application locally.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/translate-pubsub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\ncd java-docs-samples/appengine-java8/translate-pubsub\n```\n\n----------------------------------------\n\nTITLE: Running App Engine Java11 Application Locally\nDESCRIPTION: Shell command to package and run the App Engine Java11 application locally using the Cloud SDK Maven plugin. This allows testing the application at localhost:8080 before deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/datastore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn package appengine:run\n```\n\n----------------------------------------\n\nTITLE: Displaying Cloud Pub/Sub Samples Repository Link in Markdown\nDESCRIPTION: This snippet provides a Markdown-formatted link to the new location of the Cloud Pub/Sub samples within the Java client library repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Getting Started with Cloud Pub/Sub and the Google Cloud Client libraries\n\nThe samples have been moved to live alongside the Java client library for Cloud Pub/Sub: https://github.com/googleapis/java-pubsub/tree/main/samples/snippets/src/main/java/pubsub/\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Maven Plugin\nDESCRIPTION: XML configuration for the App Engine Maven Plugin in pom.xml. This specifies the project ID and version configuration for deployment.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java21/helloworld/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.google.cloud.tools</groupId>\n  <artifactId>appengine-maven-plugin</artifactId>\n  <version>2.8.0</version>\n  <configuration>\n    <projectId>myProjectId</projectId>\n    <version>GCLOUD_CONFIG</version>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Cleanup Resources\nDESCRIPTION: Removes created resources and revokes IAM permissions to avoid ongoing charges\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/encryption-keys/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Remove only the files created by this sample.\ngsutil -m rm -rf \"gs://$BUCKET/samples/dataflow/kms\"\n\n# [optional] Remove the Cloud Storage bucket.\ngsutil rb gs://$BUCKET\n\n# Remove the BigQuery table.\nbq rm -f -t $PROJECT:$DATASET.$TABLE\n\n# [optional] Remove the BigQuery dataset and all its tables.\nbq rm -rf -d $PROJECT:$DATASET\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Command\nDESCRIPTION: Git command to clone the Google Cloud Platform Java samples repository\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/xml-api/cmdline-sample/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Client ID in HTML\nDESCRIPTION: This snippet shows where to insert the OAuth2 Client ID in the HTML file. The placeholder needs to be replaced with the actual Client ID obtained from the Google Cloud Console.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/oauth2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nYOUR_CLIENT_ID_HERE.apps.googleusercontent.com\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Storage Bucket with gsutil\nDESCRIPTION: Command to create a new Cloud Storage bucket using the gsutil command-line tool from the Google Cloud SDK. Replace [your-bucket-name] with your desired bucket name.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-11/cloudstorage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngsutil mb gs://[your-bucket-name]\n```\n\n----------------------------------------\n\nTITLE: Setting location ID environment variable\nDESCRIPTION: Command to set the LOCATION_ID environment variable to the Google Cloud region where your queue is located. The location can be discovered using 'gcloud tasks queues describe'.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/tasks/quickstart/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport LOCATION_ID=<YOUR_ZONE>\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Task Handler Directory\nDESCRIPTION: This command changes the current directory to the task-handler folder within the cloned repository, which contains the App Engine application code.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd java-docs-samples/appengine-java11/task-handler\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Application Repository\nDESCRIPTION: Git command to clone the Google Cloud Platform Java documentation samples repository to the local machine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/oauth2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples\n```\n\n----------------------------------------\n\nTITLE: Deploying Micronaut Application to Google App Engine Flex using gcloud CLI\nDESCRIPTION: Command to deploy a Micronaut application to Google App Engine Flex. This deploys the application based on the configuration in app.yaml file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/micronaut-helloworld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud SDK Home Environment Variable\nDESCRIPTION: Command to set the GOOGLE_CLOUD_SDK_HOME environment variable pointing to the Google Cloud SDK installation directory as a troubleshooting step.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-tictactoe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_CLOUD_SDK_HOME=/path/to/google-cloud-sdk\n```\n\n----------------------------------------\n\nTITLE: Running Java Application Locally with Maven\nDESCRIPTION: This snippet shows the command to run a Java application locally using Maven and the Jetty plugin. It's used for local development and testing of the Cloud SQL MySQL connection.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/mysql/servlet/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Server Container on GCE\nDESCRIPTION: Updates Docker credentials and runs the gRPC server container on the GCE instance.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/usr/share/google/dockercfg_update.sh\ndocker run --detach --name=grpc-hello gcr.io/${GCLOUD_PROJECT}/java-grpc-hello:1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Tasks Queue with gcloud CLI\nDESCRIPTION: This command creates a new Cloud Tasks queue named 'my-appengine-queue' using the gcloud command-line tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/tasks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngcloud tasks queues create my-appengine-queue\n```\n\n----------------------------------------\n\nTITLE: Deploying a Java application to Google Cloud Functions\nDESCRIPTION: Deploys a Java application as a Cloud Function with environment variables loaded from a YAML file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/cloud-sql/postgres/servlet/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngcloud functions deploy sql-sample \\\n  --trigger-http \\\n  --entry-point com.example.cloudsql.functions.Main \\\n  --runtime java11 \\\n  --env-vars-file .env.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning the Java Docs Samples Repository\nDESCRIPTION: This command clones the Google Cloud Platform Java docs samples repository to the local machine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/compute/signed-metadata/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to S3 SDK Sample\nDESCRIPTION: This command changes the current working directory to the S3 SDK sample project within the cloned repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/storage/s3-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd java-docs-samples/storage/s3-sdk\n```\n\n----------------------------------------\n\nTITLE: Deploying Java App Engine application with Maven\nDESCRIPTION: Cleans the project, packages it, and deploys the Task Queue example to Google App Engine using Maven.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/taskqueues-push/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Backup Configuration in Cloud Scheduler\nDESCRIPTION: This command deploys the scheduled backup configuration to Cloud Scheduler, setting up the automated backup process.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/scheduled-backups/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/scheduled_backups.sh create-schedule\n```\n\n----------------------------------------\n\nTITLE: Authenticating for Local Development\nDESCRIPTION: Command to authenticate your local environment for Google Cloud services. This allows your local application to access Cloud Spanner with your credentials.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/spanner/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Building Java project with Maven\nDESCRIPTION: This command builds the Java project using Maven, cleaning any previous builds and packaging the result.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/jobs/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Configuring Places API Key in App Engine YAML\nDESCRIPTION: YAML configuration in app.yaml to set the Google Places API key for cloud deployment on App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/async-rest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nPLACES_APPKEY: 'YOUR_PLACES_APP_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud SDK in Bash\nDESCRIPTION: Command to initialize the Google Cloud SDK after installation. This is a prerequisite for working with Cloud IAP samples.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/iap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Application\nDESCRIPTION: Maven command to package and deploy the App Engine application to Google Cloud.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/bigquery/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package appengine:deploy\n```\n\n----------------------------------------\n\nTITLE: Cloning Java Documentation Samples Repository\nDESCRIPTION: Command to clone the Google Cloud Platform Java documentation samples repository from GitHub.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/privateca/snippets/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Project ID Environment Variable\nDESCRIPTION: Sets an environment variable with the Google Cloud Platform Project ID. This is required for subsequent commands.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/run/jobs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_CLOUD_PROJECT=<PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Creating App Engine App\nDESCRIPTION: Command to create an App Engine app within the current Google Cloud Project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app create\n```\n\n----------------------------------------\n\nTITLE: Building Java gRPC Application with Gradle\nDESCRIPTION: Compiles the Java gRPC application using Gradle build tool.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Moving to the Jetty Main directory\nDESCRIPTION: Command to change directory to the appengine-simple-jetty-main project.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ../appengine-simple-jetty-main\n```\n\n----------------------------------------\n\nTITLE: Building Java Samples with Maven\nDESCRIPTION: Command to build the Java sample applications using Maven package manager.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/texttospeech/cloud-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Listing Cloud Dataproc Clusters\nDESCRIPTION: Command to list all Cloud Dataproc clusters in the specified region to verify cluster creation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/bigtable/spark/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataproc clusters list \\\n  --region=$BIGTABLE_SPARK_DATAPROC_REGION\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Command to initialize Google Cloud SDK configuration for the project\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/iap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Secret Properties\nDESCRIPTION: Configuration file to store the Firebase secret key required for authentication.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/firebase-event-proxy-README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfirebaseSecret=<Your Firebase secret>\n```\n\n----------------------------------------\n\nTITLE: Removing Kafka Container Image\nDESCRIPTION: This command deletes the Kafka container image from Container Registry, forcibly removing all associated tags.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngcloud container images delete $KAFKA_IMAGE --force-delete-tags\n```\n\n----------------------------------------\n\nTITLE: Sample BigQuery Test Data for DLP API Testing\nDESCRIPTION: CSV data to be loaded into BigQuery for testing DLP functionality. The data contains mock personal information including names, phone numbers, credit card numbers, and demographic data.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dlp/snippets/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nName,TelephoneNumber,Mystery,Age,Gender\nJames,(567) 890-1234,8291 3627 8250 1234,19,Male\nGandalf,(223) 456-7890,4231 5555 6781 9876,27,Male\nDumbledore,(313) 337-1337,6291 8765 1095 7629,27,Male\nJoe,(452) 223-1234,3782 2288 1166 3030,35,Male\nMarie,(452) 223-1234,8291 3627 8250 1234,35,Female\nCarrie,(567) 890-1234,2253 5218 4251 4526,35,Female\n```\n\n----------------------------------------\n\nTITLE: Deleting Cloud Storage Bucket\nDESCRIPTION: This command removes a Cloud Storage bucket and all its contents using the gsutil tool. The -r flag enables recursive deletion of all objects within the bucket.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/flex-templates/kafka_to_bigquery/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ngsutil rm -r gs://$BUCKET\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Micronaut Application on Google App Engine Flex\nDESCRIPTION: Command to open the deployed application in a browser. This launches the default browser to show the application running on App Engine.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-17/micronaut-helloworld/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud app browse\n```\n\n----------------------------------------\n\nTITLE: Installing the Jetty Main dependency locally\nDESCRIPTION: Command to install the appengine-simple-jetty-main dependency to the local Maven repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11/helloworld-servlet/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Gradle Test Configuration in build.gradle\nDESCRIPTION: Gradle configuration for running JUnit tests with proper reporting. This setup configures the test task to use JUnit and sets up cucumber options for generating XML reports.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/SAMPLE_FORMAT.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnit()\n  systemProperty 'cucumber.options', '--plugin junit:target/surefire-reports/cucumber-junit.xml' \n  include '**/*Test.class'\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Maven Installation\nDESCRIPTION: Command to verify Maven installation.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/dataflow/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmvn --version\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Link for Cloud Spanner Samples\nDESCRIPTION: Redirect notice with link to the new location of Cloud Spanner samples in the googleapis/java-spanner repository.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/spanner/cloud-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started with Cloud Spanner and the Google Cloud Client libraries\n\nThese samples have moved to https://github.com/googleapis/java-spanner/tree/main/samples\n```\n\n----------------------------------------\n\nTITLE: Running a Java Class with Maven\nDESCRIPTION: General command template for running a Java class with Maven, including passing property values and command line arguments.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Dexec.mainClass=com.example.storage.ClassName \\\n    -DpropertyName=propertyValue \\\n\t-Dexec.args=\"any arguments to the app\"\n```\n\n----------------------------------------\n\nTITLE: Memcache Documentation Link and Status\nDESCRIPTION: Markdown content showing Cloud Shell launcher button and project status notes indicating need for redis-memcache updates.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/memcache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# flexible/memcache\n\n<a href=\"https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&page=editor&open_in_editor=flexible/memcache/README.md\">\n<img alt=\"Open in Cloud Shell\" src =\"http://gstatic.com/cloudssh/images/open-btn.png\"></a>\n\nHow to use memcache on flexible.\n\n# NEEDS WORK\n\nThis sample needs to be updated to use redis-memcache\n```\n\n----------------------------------------\n\nTITLE: Deploying App Engine Java11 Application\nDESCRIPTION: Shell commands for deploying the App Engine Java11 application to Google Cloud. The process includes cleaning, packaging, deploying the application, and then deploying the Datastore indexes.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java11-bundled-services/datastore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean package appengine:deploy\nmvn appengine:deployIndex\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables on GCE Instance\nDESCRIPTION: Sets environment variables on the GCE instance to store project ID and service name for easier command execution.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/endpoints/getting-started-grpc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGCLOUD_PROJECT=$(curl -s \"http://metadata.google.internal/computeMetadata/v1/project/project-id\" -H \"Metadata-Flavor: Google\")\nSERVICE_NAME=hellogrpc.endpoints.${GCLOUD_PROJECT}.cloud.goog\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Push Subscription\nDESCRIPTION: Command to create a push subscription that sends messages to a specified Google Cloud Project URL with verification token\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/flexible/java-8/pubsub/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub subscriptions create <your-subscription-name> \\\n  --topic <your-topic-name> \\\n  --push-endpoint \\\n  https://<your-project-id>.appspot.com/pubsub/push?token=<your-verification-token> \\\n  --ack-deadline 30\n```\n\n----------------------------------------\n\nTITLE: Setting GOOGLE_APPLICATION_CREDENTIALS environment variable\nDESCRIPTION: Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to your service account key file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/pubsub/streaming-analytics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=path/to/your/credentials.json\n```\n\n----------------------------------------\n\nTITLE: Configuring System Properties in appengine-web.xml\nDESCRIPTION: XML configuration to add system properties in appengine-web.xml for specifying the logging configuration file.\nSOURCE: https://github.com/googlecloudplatform/java-docs-samples/blob/main/appengine-java8/springboot-helloworld/README.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<system-properties>\n  <property name=\"java.util.logging.config.file\" value=\"WEB-INF/classes/logging.properties\"/>\n</system-properties>\n```"
  }
]