[
  {
    "owner": "zqfang",
    "repo": "gseapy",
    "content": "TITLE: Running GSEApy in Python with dataframe inputs\nDESCRIPTION: Examples of using GSEApy with pandas DataFrame objects for GSEA, prerank, ssGSEA, and GSVA analyses.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# assign dataframe, and use enrichr library data set 'KEGG_2016'\nexpression_dataframe = pd.DataFrame()\n\nsample_name = ['A','A','A','B','B','B'] # always only two group,any names you like\n\n# assign gene_sets parameter with enrichr library name or gmt file on your local computer.\ngseapy.gsea(data=expression_dataframe, gene_sets='KEGG_2016', cls= sample_names, outdir='test')\n\n# prerank tool\ngene_ranked_dataframe = pd.DataFrame()\ngseapy.prerank(rnk=gene_ranked_dataframe, gene_sets='KEGG_2016', outdir='test')\n\n# ssGSEA\ngseapy.ssgsea(data=expression_dataframe, gene_sets='KEGG_2016', outdir='test')\n\n# gsva\ngseapy.gsva(data=expression_dataframe, gene_sets='KEGG_2016', outdir='test')\n```\n\n----------------------------------------\n\nTITLE: Running GSEApy in Python with file inputs\nDESCRIPTION: Examples of using GSEApy within a Python environment with file-based inputs for various analysis types.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport gseapy\n\n# run GSEA.\ngseapy.gsea(data='expression.txt', gene_sets='gene_sets.gmt', cls='test.cls', outdir='test')\n\n# run prerank\ngseapy.prerank(rnk='gsea_data.rnk', gene_sets='gene_sets.gmt', outdir='test')\n\n# run ssGSEA\ngseapy.ssgsea(data=\"expression.txt\", gene_sets= \"gene_sets.gmt\", outdir='test')\n\n# run GSVA\ngseapy.gsva(data=\"expression.txt\", gene_sets= \"gene_sets.gmt\", outdir='test')\n\n# An example to reproduce figures using replot module.\ngseapy.replot(indir='./Gsea.reports', outdir='test')\n```\n\n----------------------------------------\n\nTITLE: Running Enrichr Analysis\nDESCRIPTION: Examples of running enrichment analysis using Enrichr with different input formats.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/gseapy_tutorial.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# assign a list object to enrichr\nl = ['SCARA3', 'LOC100044683', 'CMBL', 'CLIC6', 'IL13RA1', 'TACSTD2', 'DKKL1', 'CSF1',\n     'SYNPO2L', 'TINAGL1', 'PTX3', 'BGN', 'HERC1', 'EFNA1', 'CIB2', 'PMP22', 'TMEM173']\n\ngseapy.enrichr(gene_list=l, gene_sets='KEGG_2016', outfile='test')\n```\n\n----------------------------------------\n\nTITLE: Running GSEApy command line examples\nDESCRIPTION: Examples of using GSEApy from the command line for various analysis types including replot, gsea, prerank, ssgsea, gsva, and enrichr.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# An example to reproduce figures using replot module.\n$ gseapy replot -i ./Gsea.reports -o test\n\n\n# An example to run GSEA using gseapy gsea module\n$ gseapy gsea -d exptable.txt -c test.cls -g gene_sets.gmt -o test\n\n# An example to run Prerank using gseapy prerank module\n$ gseapy prerank -r gsea_data.rnk -g gene_sets.gmt -o test\n\n# An example to run ssGSEA using gseapy ssgsea module\n$ gseapy ssgsea -d expression.txt -g gene_sets.gmt -o test\n\n# An example to run GSVA using gseapy ssgsea module\n$ gseapy gsva -d expression.txt -g gene_sets.gmt -o test\n\n# An example to use enrichr api\n# see details for -g input -> ``get_library_name`` \n$ gseapy enrichr -i gene_list.txt -g KEGG_2016 -o test\n```\n\n----------------------------------------\n\nTITLE: Using enrichr function in GSEApy\nDESCRIPTION: Examples of running enrichment analysis with the enrichr function using either a Python list or a text file as input.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# assign a list object to enrichr\ngl = ['SCARA3', 'LOC100044683', 'CMBL', 'CLIC6', 'IL13RA1', 'TACSTD2', 'DKKL1', 'CSF1',\n     'SYNPO2L', 'TINAGL1', 'PTX3', 'BGN', 'HERC1', 'EFNA1', 'CIB2', 'PMP22', 'TMEM173']\n\ngseapy.enrichr(gene_list=gl, gene_sets='KEGG_2016', outdir='test')\n\n# or a txt file path.\ngseapy.enrichr(gene_list='gene_list.txt', gene_sets='KEGG_2016',\n               outdir='test', cutoff=0.05, format='png' )\n```\n\n----------------------------------------\n\nTITLE: Replotting GSEA Results with GSEApy CLI\nDESCRIPTION: This command uses the GSEApy command-line interface to replot existing GSEA analysis results. It takes '-i' (input) parameter specifying the GSEA result directory and '-o' (output) parameter defining where to save the replotted results.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/gseapy_tutorial.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngseapy replot -i gsea -o gseapy_out\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Gene Sets Dictionary in Python\nDESCRIPTION: Example showing how to create a custom dictionary format for gene sets that can be used as input for gsea, prerank, ssgsea and enrichr functions.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/faq.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngene_sets = {\n    \"term_1\": [\"gene_A\", \"gene_B\", ...],\n    \"term_2\": [\"gene_B\", \"gene_C\", ...],\n    ...\n    \"term_100\": [\"gene_A\", \"gene_T\", ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Gene Sets GMT File\nDESCRIPTION: Example of reading a GMT format file containing gene sets.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/gseapy_tutorial.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open('gsea/edb/gene_sets.gmt') as gmt:\n    print(gmt.read())\n```\n\n----------------------------------------\n\nTITLE: Creating CLS File in Python\nDESCRIPTION: Code to generate a CLS file that specifies sample groups for GSEA analysis.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/gseapy_tutorial.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngroups = ['C1OE', 'C1OE', 'C1OE', 'Vector', 'Vector', 'Vector']\nwith open('gsea/edb/C1OE.cls', \"w\") as cl:\n   line = f\"{len(groups)} 2 1\\n# C10E Vector\\n\"\n   cl.write(line)\n   cl.write(\" \".join(groups) + \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Loading Expression Data in Python\nDESCRIPTION: Example of reading tabular gene expression data using pandas.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/gseapy_tutorial.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_table('./test/gsea_data.txt')\ndf.head()\n\n#or assign dataframe to the parameter 'data'\n```\n\n----------------------------------------\n\nTITLE: Accessing enrichr library names in GSEApy\nDESCRIPTION: Code example showing how to retrieve and view the list of available gene set libraries for use with the enrichr function.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#see full list of latest enrichr library names, which will pass to -g parameter:\nnames = gseapy.get_library_name()\n\n# show top 20 entries.\nprint(names[:20])\n```\n\n----------------------------------------\n\nTITLE: Preparing Gene List for Enrichr in Python\nDESCRIPTION: Example of creating a gene list in Python for use with the Enrichr API. The list contains Entrez gene symbols in uppercase.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/introduction.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# if you prefer to run gseapy.enrchr() inside python console, you could assign a list object to\n# gseapy like this.\ngene_list = ['SCARA3', 'LOC100044683', 'CMBL', 'CLIC6', 'IL13RA1', 'TACSTD2', 'DKKL1',\n                'CSF1', 'CITED1', 'SYNPO2L']\n```\n\n----------------------------------------\n\nTITLE: Reading Gene List from Text File in Python\nDESCRIPTION: Example of reading a gene list from a text file for use with GSEAPY. Each gene is on a separate line in the file.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/introduction.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# an alternative way is that you could provide a gene list txt file which looks like this:\nwith open('data/gene_list.txt') as genes:\n    print(genes.read())\n\n\nCTLA2B\nSCARA3\nLOC100044683\nCMBL\nCLIC6\nIL13RA1\nTACSTD2\nDKKL1\nCSF1\nCITED1\nSYNPO2L\nTINAGL1\nPTX3\n```\n\n----------------------------------------\n\nTITLE: Using Yeast Database with Prerank\nDESCRIPTION: Example showing how to use Yeast database with prerank() function by getting custom gmt dictionary.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/faq.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# get libraries you'd like to use\ngss = gseapy.get_library_name(organism='Yeast')\n# get a custom gmt_dict\ngmt_dict = gseapy.get_library('GO_Biological_Process_2018', organism='Yeast')\n# run \nprn_res = gseapy.prerank( ..., gene_sets=gmt_dict, ...)\n```\n\n----------------------------------------\n\nTITLE: Using Yeast Database with Enrichr\nDESCRIPTION: Example demonstrating how to use Yeast database with enrichr() function by setting the organism parameter.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/faq.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngss = gseapy.get_library_name(organism='Yeast')\nenr = gseapy.enrichr(gene_list=...,\n                    gene_sets=gss, \n                    organism='Yeast', # don't forget to set organism=\"Yeast\"\n                    )\n```\n\n----------------------------------------\n\nTITLE: Installing GSEApy via conda and pip\nDESCRIPTION: Instructions for installing the GSEApy package using either conda (for MacOS_x86-64 and Linux) or pip (for Windows and MacOS_ARM64).\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# if you have conda (MacOS_x86-64 and Linux only)\n$ conda install -c bioconda gseapy\n# Windows and MacOS_ARM64(M1/2-Chip)\n$ pip install gseapy\n```\n\n----------------------------------------\n\nTITLE: Installing GSEAPY Using Conda or Pip\nDESCRIPTION: Commands for installing the GSEAPY package using either conda (from bioconda channel, limited to MacOS_x86-64 and Linux) or pip for the latest release. These commands should be run in a terminal or command prompt.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# if you have conda (MacOS_x86-64 and Linux only)\n$ conda install -c bioconda gseapy\n\n# or use pip to install the latest release\n$ pip install gseapy\n```\n\n----------------------------------------\n\nTITLE: Installing GSEAPY using Conda or Pip (Alternative)\nDESCRIPTION: Alternative instructions for installing GSEAPY using Conda with additional channels or Pip for the latest release.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/introduction.rst#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# if you have conda\n$ conda install -c conda-forge -c bioconda gseapy \n\n# or use pip to install the latest release\n$ pip install gseapy\n```\n\n----------------------------------------\n\nTITLE: Installing GSEAPY using Conda or Pip\nDESCRIPTION: Instructions for installing the GSEAPY package using either Conda (for MacOS_x86-64 and Linux) or Pip for the latest release.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/introduction.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# if you have conda (MacOS_x86-64 and Linux only)\n$ conda install -c bioconda gseapy\n\n# or use pip to install the latest release\n$ pip install gseapy\n```\n\n----------------------------------------\n\nTITLE: Installing GSEApy Package\nDESCRIPTION: Commands to install GSEApy using pip or conda package managers.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/gseapy_tutorial.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install gseapy\n\n# if you have conda\nconda install -c bioconda gseapy\n```\n\n----------------------------------------\n\nTITLE: Installing GSEApy from GitHub with Rust dependencies\nDESCRIPTION: Alternative installation method for GSEApy directly from GitHub repository, including setting up the required Rust compiler.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# you need to install rust first to compile the code\ncurl https://sh.rustup.rs -sSf | sh -s -- -y\n# export rust compiler \nexport PATH=\"$PATH:$HOME/.cargo/bin\"\n# install\n$ pip install git+git://github.com/zqfang/gseapy.git#egg=gseapy\n```\n\n----------------------------------------\n\nTITLE: Testing GSEApy during development\nDESCRIPTION: Commands for testing the GSEApy package during development, including testing only the Rust extension or the entire package.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/README.rst#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# test rust extension only \ncargo test --features=extension-module\n# test whole package\npython setup.py test\n```\n\n----------------------------------------\n\nTITLE: Defining GSEApy Package Dependencies with Minimum Version Requirements\nDESCRIPTION: This requirements file specifies all necessary dependencies for the GSEApy package, including minimum version requirements. It includes scientific computing libraries (NumPy, SciPy, Pandas, Matplotlib), package management tools (pip, wheel, setuptools-rust), and networking libraries (requests).\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\npip>=19.1\nwheel\nnumpy>=1.9.0\nscipy\nmatplotlib>=1.4.3\npandas>=0.16\nrequests\nsetuptools-rust>=0.10.2\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for GSEApy Project\nDESCRIPTION: This snippet lists the required Python packages and libraries for the GSEApy project. It includes packages for interactive computing, scientific computing, data analysis, visualization, and documentation generation.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/docs-requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nipython\nipykernel\ncython\npyyaml\nsphinx\nnbsphinx\nsphinx_rtd_theme\nnumpy\nscipy\nbioservices\nmatplotlib\npandas\nrequests\njoblib\ngseapy\ndocutils\npip>=19.1\nsetuptools-rust>=0.10.2\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements\nDESCRIPTION: Lists required Python packages and development dependencies for the GSEApy project, including Cython for performance optimization, testing frameworks, documentation tools, and YAML support.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/test-requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncython\nnose\npytest\nnumpydoc\npyyaml\nsphinx\n```\n\n----------------------------------------\n\nTITLE: Citing GSEAPY in Academic Publications\nDESCRIPTION: The citation format for referencing the GSEAPY package in academic publications. This citation references the Bioinformatics journal publication by Zhuoqing Fang, Xinyuan Liu, and Gary Peltz.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/docs/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nZhuoqing Fang, Xinyuan Liu, Gary Peltz, GSEApy: a comprehensive package for performing gene set enrichment analysis in Python, \nBioinformatics, 2022;, btac757, https://doi.org/10.1093/bioinformatics/btac757\n```\n\n----------------------------------------\n\nTITLE: Gene Symbol List\nDESCRIPTION: A list containing gene symbols, RNA transcripts, and genetic markers in a plain text format. The list includes various types of genes like kinases (e.g., MAPK), transcription factors, and immunoglobulin-related genes.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/tests/data/gene_list.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIGKV4-1\nCD55\nIGKC\nPPFIBP1\nABHD4\nPCSK6\nPGD\nARHGDIB\nITGB2\nCARD6\nMNDA\nATE1\nLGALS8\nHOMER3\nRP11-356N1.2\nMT-TN\nC14orf159\nHS2ST1\nVDAC3\nMAP4K4\nHK3\nSSH1\nHGD\nMBNL3\nGOLGA2\nTNFRSF10C\nLINC01410\nMGRN1\nNUP98\nRAC1...\n```\n\n----------------------------------------\n\nTITLE: Gene Symbol List\nDESCRIPTION: A list of gene symbols, likely representing differentially expressed or analyzed genes from a genomic study. Each line contains a single gene identifier.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/tests/data/background.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nATF5\nMYH10\nCDK19\nPTPRF\nFAM50B\nFAR1\nCD74\nSPOCK2\nIL17RD\nPTK7\n[...additional genes...]\n```\n\n----------------------------------------\n\nTITLE: Gene Symbol List\nDESCRIPTION: A list of gene symbols/identifiers formatted as a line-separated list for genomic analysis\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/tests/data/background.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSRPRA\nIL1RL2\nPEX2\nASB8\nLINC00689\nRHOD\nF2RL3\nSMYD4\nZBTB2\nSETBP1\n[...additional genes truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Gene Symbol List\nDESCRIPTION: A list of gene symbols including protein-coding genes, non-coding RNAs (LINC), pseudogenes (LOC), and other genetic elements organized in a simple text format.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/tests/data/background.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPCSK1N\nLINC01267\nKLHL31\nFUCA1\nZNF135\nATP11B\nLEMD1\nPDE12\nLINC01018\nPXMP4\nPKDCC\nPOM121L12\nRNF44\nC14orf119\nSLCO2A1\n[...additional genes...]\n```\n\n----------------------------------------\n\nTITLE: Gene Symbol List\nDESCRIPTION: A list of gene symbols and identifiers including protein-coding genes, non-coding RNAs, pseudogenes and other genetic elements. Formatted as one symbol per line.\nSOURCE: https://github.com/zqfang/GSEApy/blob/master/tests/data/background.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nKLHL21\nAPOL4\nMETTL21B\nNIM1\nCRACR2B\nSTIM2\nCENPJ\nPTGDR2\nZFYVE21\nCTIF\nLINC01225\nPANK1\nOMG\nLOC101929538\nTMEM14C\nFLJ21408\nMESDC2\nABCA11P\nGLRA1\nLOC100507562\n[...truncated for brevity...]\n```"
  }
]