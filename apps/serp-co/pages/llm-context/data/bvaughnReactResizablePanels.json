[
  {
    "owner": "bvaughn",
    "repo": "react-resizable-panels",
    "content": "TITLE: Basic PanelGroup Implementation in React\nDESCRIPTION: Example of creating a horizontal panel layout with three panels using the react-resizable-panels library. The layout includes a SourcesExplorer, SourceViewer, and Console component with default sizes and resize handles.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\n\n<PanelGroup autoSaveId=\"example\" direction=\"horizontal\">\n  <Panel defaultSize={25}>\n    <SourcesExplorer />\n  </Panel>\n  <PanelResizeHandle />\n  <Panel>\n    <SourceViewer />\n  </Panel>\n  <PanelResizeHandle />\n  <Panel defaultSize={25}>\n    <Console />\n  </Panel>\n</PanelGroup>;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Panels with Order Props\nDESCRIPTION: Example showing how to implement conditionally rendered panels within a PanelGroup. The example demonstrates proper usage of id and order props to ensure correct panel sizing and layout when some panels may not always be visible.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelGroup direction=\"horizontal\">\n  {renderSideBar && (\n    <>\n      <Panel id=\"sidebar\" minSize={25} order={1}>\n        <Sidebar />\n      </Panel>\n      <PanelResizeHandle />\n    </>\n  )}\n  <Panel minSize={25} order={2}>\n    <Main />\n  </Panel>\n</PanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Panels with IDs and Order Props in React\nDESCRIPTION: Demonstrates how to use the 'id' and 'order' props when conditionally rendering panels to fix layout and sizing issues.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelGroup direction=\"horizontal\">\n  {renderSideBar && (\n    <>\n      <Panel id=\"sidebar\" minSize={25} order={1}>\n        <Sidebar />\n      </Panel>\n      <PanelResizeHandle />\n    </>\n  )}\n  <Panel minSize={25} order={2}>\n    <Main />\n  </Panel>\n</PanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React Resizable Panels\nDESCRIPTION: Demonstrates how to implement persistent layouts with server-side rendering using Next.js. It shows how to retrieve the layout from a cookie on the server and pass it to a client component.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport ResizablePanels from \"@/app/ResizablePanels\";\nimport { cookies } from \"next/headers\";\n\nexport function ServerComponent() {\n  const layout = cookies().get(\"react-resizable-panels:layout\");\n\n  let defaultLayout;\n  if (layout) {\n    defaultLayout = JSON.parse(layout.value);\n  }\n\n  return <ClientComponent defaultLayout={defaultLayout} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Layouts with SSR in React\nDESCRIPTION: Shows how to implement persistent layouts with server-side rendering using cookies and localStorage.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport ResizablePanels from \"@/app/ResizablePanels\";\nimport { cookies } from \"next/headers\";\n\nexport function ServerComponent() {\n  const layout = cookies().get(\"react-resizable-panels:layout\");\n\n  let defaultLayout;\n  if (layout) {\n    defaultLayout = JSON.parse(layout.value);\n  }\n\n  return <ClientComponent defaultLayout={defaultLayout} />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\n\nexport function ClientComponent({\n  defaultLayout = [33, 67],\n}: {\n  defaultLayout: number[] | undefined;\n}) {\n  const onLayout = (sizes: number[]) => {\n    document.cookie = `react-resizable-panels:layout=${JSON.stringify(sizes)}`;\n  };\n\n  return (\n    <PanelGroup direction=\"horizontal\" onLayout={onLayout}>\n      <Panel defaultSize={defaultLayout[0]}>{/* ... */}</Panel>\n      <PanelResizeHandle className=\"w-2 bg-blue-800\" />\n      <Panel defaultSize={defaultLayout[1]}>{/* ... */}</Panel>\n    </PanelGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Component for Persistent Layouts in React Resizable Panels\nDESCRIPTION: Shows the implementation of a client-side component that uses the layout passed from the server component. It demonstrates how to use the onLayout callback to persist the layout in a cookie.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\n\nexport function ClientComponent({\n  defaultLayout = [33, 67],\n}: {\n  defaultLayout: number[] | undefined;\n}) {\n  const onLayout = (sizes: number[]) => {\n    document.cookie = `react-resizable-panels:layout=${JSON.stringify(sizes)}`;\n  };\n\n  return (\n    <PanelGroup direction=\"horizontal\" onLayout={onLayout}>\n      <Panel defaultSize={defaultLayout[0]}>{/* ... */}</Panel>\n      <PanelResizeHandle className=\"w-2 bg-blue-800\" />\n      <Panel defaultSize={defaultLayout[1]}>{/* ... */}</Panel>\n    </PanelGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Elements in React Resizable Panels\nDESCRIPTION: Demonstrates how to access underlying DOM elements of PanelGroup, Panel, and PanelResizeHandle components using utility functions. It shows the usage within a useEffect hook and storing references in a ref object.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getPanelElement,\n  getPanelGroupElement,\n  getResizeHandleElement,\n  Panel,\n  PanelGroup,\n  PanelResizeHandle,\n} from \"react-resizable-panels\";\n\nexport function Example() {\n  const refs = useRef();\n\n  useEffect(() => {\n    const groupElement = getPanelGroupElement(\"group\");\n    const leftPanelElement = getPanelElement(\"left-panel\");\n    const rightPanelElement = getPanelElement(\"right-panel\");\n    const resizeHandleElement = getResizeHandleElement(\"resize-handle\");\n\n    // If you want to, you can store them in a ref to pass around\n    refs.current = {\n      groupElement,\n      leftPanelElement,\n      rightPanelElement,\n      resizeHandleElement,\n    };\n  }, []);\n\n  return (\n    <PanelGroup direction=\"horizontal\" id=\"group\">\n      <Panel id=\"left-panel\">{/* ... */}</Panel>\n      <PanelResizeHandle id=\"resize-handle\" />\n      <Panel id=\"right-panel\">{/* ... */}</Panel>\n    </PanelGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Elements of Panels and Resize Handles in React\nDESCRIPTION: Shows how to use utility functions to access the underlying DOM elements of panels, panel groups, and resize handles.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getPanelElement,\n  getPanelGroupElement,\n  getResizeHandleElement,\n  Panel,\n  PanelGroup,\n  PanelResizeHandle,\n} from \"react-resizable-panels\";\n\nexport function Example() {\n  const refs = useRef();\n\n  useEffect(() => {\n    const groupElement = getPanelGroupElement(\"group\");\n    const leftPanelElement = getPanelElement(\"left-panel\");\n    const rightPanelElement = getPanelElement(\"right-panel\");\n    const resizeHandleElement = getResizeHandleElement(\"resize-handle\");\n\n    // If you want to, you can store them in a ref to pass around\n    refs.current = {\n      groupElement,\n      leftPanelElement,\n      rightPanelElement,\n      resizeHandleElement,\n    };\n  }, []);\n\n  return (\n    <PanelGroup direction=\"horizontal\" id=\"group\">\n      <Panel id=\"left-panel\">{/* ... */}</Panel>\n      <PanelResizeHandle id=\"resize-handle\" />\n      <Panel id=\"right-panel\">{/* ... */}</Panel>\n    </PanelGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling PanelResizeHandle with Tailwind in React\nDESCRIPTION: Shows how to apply CSS styling to a PanelResizeHandle component using Tailwind classes. This is necessary to make the resize handle visible and interactive.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Tailwind example\n<PanelResizeHandle className=\"w-2 bg-blue-800\" />\n```\n\n----------------------------------------\n\nTITLE: Styling PanelResizeHandle with Tailwind in React\nDESCRIPTION: Demonstrates how to apply CSS styling to a PanelResizeHandle component using Tailwind classes.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelResizeHandle className=\"w-2 bg-blue-800\" />\n```\n\n----------------------------------------\n\nTITLE: Using Imperative API Methods with Units in TypeScript\nDESCRIPTION: Examples of using imperative API methods with both pixel and percentage units in TypeScript.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npanelRef.resize(100, \"pixels\");\npanelGroupRef.setLayout([25, 50, 25], \"percentages\");\n\n// Works for getters too, e.g.\nconst percentage = panelRef.getSize(\"percentages\");\nconst pixels = panelRef.getSize(\"pixels\");\n\nconst layout = panelGroupRef.getLayout(\"pixels\");\n```\n\n----------------------------------------\n\nTITLE: Defining Panel with Percentage Units in JSX\nDESCRIPTION: Example of migrating a Panel component from v55 to v56, using percentage-based size constraints.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Panel\n  defaultSizePercentage={25}\n  minSizePercentage={10}\n  maxSizePercentage={50}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Panel with Pixel Units in JSX\nDESCRIPTION: Example of migrating a Panel component from v55 to v56, using pixel-based size constraints within a PanelGroup.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PanelGroup direction=\"horizontal\">\n  <Panel\n    minSizePixels={100}\n    maxSizePixels={200}\n  />\n  <PanelResizeHandle />\n  <Panel />\n</PanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring PanelGroup with Pixel Units in JSX\nDESCRIPTION: Example of using the 'units' prop in PanelGroup to enable pixel-based layout constraints for child Panels.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PanelGroup direction=\"horizontal\" units=\"pixels\">\n  {/* Will be constrained to 100-200 pixels (assuming group is large enough to permit this) */}\n  <Panel minSize={100} maxSize={200} />\n  <PanelResizeHandle />\n  <Panel />\n  <PanelResizeHandle />\n  <Panel />\n</PanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting CSP Nonce for React Resizable Panels\nDESCRIPTION: Demonstrates how to set the Content Security Policy (CSP) nonce attribute for the react-resizable-panels library.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { setNonce } from \"react-resizable-panels\";\n\nsetNonce(\"your-nonce-value-here\");\n```\n\n----------------------------------------\n\nTITLE: Setting CSP Nonce for React Resizable Panels\nDESCRIPTION: Demonstrates how to set the Content Security Policy (CSP) nonce attribute for the react-resizable-panels library using the setNonce function.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { setNonce } from \"react-resizable-panels\";\n\nsetNonce(\"your-nonce-value-here\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Cursor Styles for React Resizable Panels\nDESCRIPTION: Shows how to disable global cursor styles in the react-resizable-panels library.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { disableGlobalCursorStyles } from \"react-resizable-panels\";\n\ndisableGlobalCursorStyles();\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Cursor Styles in React Resizable Panels\nDESCRIPTION: Shows how to disable global cursor styles in the react-resizable-panels library using the disableGlobalCursorStyles function.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/README.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { disableGlobalCursorStyles } from \"react-resizable-panels\";\n\ndisableGlobalCursorStyles();\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This snippet shows the structure of changelog entries using Markdown formatting. Each entry includes a version number as a heading, followed by bullet points describing changes, bug fixes, or new features.\nSOURCE: https://github.com/bvaughn/react-resizable-panels/blob/main/packages/react-resizable-panels/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.12\n\n- Bug fix: [#19](https://github.com/bvaughn/react-resizable-panels/issues/19): Fix initial \"jump\" that could occur when dragging started.\n- Bug fix: [#20](https://github.com/bvaughn/react-resizable-panels/issues/20): Stop resize/drag operation on \"contextmenu\" event.\n- Bug fix: [#21](https://github.com/bvaughn/react-resizable-panels/issues/21): Disable text selection while dragging active (Firefox only)\n\n## 0.0.11\n\n- Drag UX change: Reversing drag after dragging past the min/max size of a panel will no longer have an effect until the pointer overlaps with the resize handle. (Thanks @davidkpiano for the suggestion!)\n- Bug fix: Resize handles are no longer left in a \"focused\" state after a touch/mouse event.\n```"
  }
]