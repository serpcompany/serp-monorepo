[
  {
    "owner": "assertj",
    "repo": "assertj",
    "content": "TITLE: Implementing a Test Class for Optional Assertions in Java\nDESCRIPTION: This code demonstrates the recommended pattern for creating test classes in AssertJ. It shows how to structure test methods with GIVEN/WHEN/THEN steps and how to test both successful and failing assertions using the OptionalAssert_containsInstanceOf_Test class as an example.\nSOURCE: https://github.com/assertj/assertj/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static org.assertj.core.api.BDDAssertions.then;\nimport static org.assertj.core.util.AssertionsUtil.expectAssertionError;\n// other imports not shown for brevity\n\nclass OptionalAssert_containsInstanceOf_Test extends BaseTest {\n\n  @Test\n  void should_fail_if_optional_is_empty() {\n    // GIVEN\n    Optional<Object> actual = Optional.empty();\n    // WHEN\n    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).containsInstanceOf(Object.class));\n    // THEN\n    then(assertionError).hasMessage(shouldBePresent(actual).create());\n  }\n\n  @Test\n  void should_pass_if_optional_contains_required_type() {\n    // GIVEN\n    Optional<String> optional = Optional.of(\"something\");\n    // WHEN/THEN\n    then(optional).containsInstanceOf(String.class);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Javadoc Example for CharSequence Assertion Method in Java\nDESCRIPTION: This code snippet shows the recommended format for documenting assertion methods in AssertJ. It includes a detailed description, code examples of both passing and failing assertions, parameter descriptions, exception details, and since tag for version tracking.\nSOURCE: https://github.com/assertj/assertj/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Verifies that the actual {@code CharSequence} contains all the given strings <b>in the given order</b>.\n * <p>\n * Example:\n *\n * <pre><code class='java'> String book = \"{ 'title':'A Game of Thrones', 'author':'George Martin'}\";\n *\n * // this assertion succeeds ...\n * assertThat(book).containsSequence(\"{\", \"title\", \"A Game of Thrones\", \"}\");\n *\n * // ... but this one fails as \"author\" must come after \"A Game of Thrones\"\n * assertThat(book).containsSequence(\"{\", \"author\", \"A Game of Thrones\", \"}\"); </code></pre>\n *\n * @param values the Strings to look for, in order.\n * @return {@code this} assertion object.\n * @throws NullPointerException if the given values is {@code null}.\n * @throws IllegalArgumentException if the given values is empty.\n * @throws AssertionError if the actual {@code CharSequence} is {@code null}.\n * @throws AssertionError if the actual {@code CharSequence} does not contain all the given strings <b>in the given order</b>.\n * @since 2.1.0 / 3.1.0\n */\n```\n\n----------------------------------------\n\nTITLE: Computing Text Differences with Default Diff Algorithm in Java\nDESCRIPTION: Method that computes the difference between original and revised texts using the default diff algorithm (MyersDiff). It returns a Patch object describing the differences.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/original.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static Patch diff(List<?> original, List<?> revised) {\n\treturn DiffUtils.diff(original, revised, defaultDiffAlgorithm);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patch to Text in Java\nDESCRIPTION: Method to apply a patch to original text to produce the revised text. Throws PatchFailedException if the patch cannot be applied.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic static List<?> patch(List<?> original, Patch patch) throws PatchFailedException {\n\treturn patch.applyTo(original);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patch to Original Text in Java\nDESCRIPTION: Method that applies a patch to the original text to produce the revised version. It throws a PatchFailedException if the patch cannot be applied.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/original.txt#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic static List<?> patch(List<?> original, Patch patch) throws PatchFailedException {\n\treturn patch.applyTo(original);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Unified Diff Format in Java\nDESCRIPTION: Method to parse text in unified diff format and create a Patch object containing the deltas (changes) between the original and revised texts.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic static Patch parseUnifiedDiff(List<String> diff) {\n\tboolean inPrelude = true;\n\tList<Object[]> rawChunk = new ArrayList<Object[]>();\n\tPatch patch = new Patch();\n\t\n\tint old_ln = 0, old_n = 0, new_ln = 0, new_n = 0;\n\tString tag = \"\", rest = \"\";\n\tfor (String line: diff) {\n\t\t// Skip leading lines until after we've seen one starting with '+++'\n\t\tif (inPrelude) {\n\t\t\tif (line.startsWith(\"+++\")) {\n\t\t\t\tinPrelude = false;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tMatcher m = unifiedDiffChunkRe.matcher(line);\n\t\tif (m.find()) {\n\t\t\t// Process the lines in the previous chunk\n\t\t\tif (rawChunk.size() != 0) {\n\t\t\t\tList<String> oldChunkLines = new ArrayList<String>();\n\t\t\t\tList<String> newChunkLines = new ArrayList<String>();\n\t\t\t\t\n\t\t\t\tfor (Object[] raw_line: rawChunk) {\n\t\t\t\t\ttag = (String)raw_line[0];\n\t\t\t\t\trest = (String)raw_line[1];\n\t\t\t\t\tif (tag.equals(\" \") || tag.equals(\"-\")) {\n\t\t\t\t\t\toldChunkLines.add(rest);\n\t\t\t\t\t}\n\t\t\t\t\tif (tag.equals(\" \") || tag.equals(\"+\")) {\n\t\t\t\t\t\tnewChunkLines.add(rest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpatch.addDelta(new ChangeDelta(new Chunk(old_ln - 1, old_n, oldChunkLines),  \n\t\t\t\t\t\tnew Chunk(new_ln - 1, new_n, newChunkLines)));\n\t\t\t\trawChunk.clear();\n\t\t\t}\n\t\t\t// Parse the @@ header\n\t\t\told_ln = m.group(1) == null ? 1 : Integer.parseInt(m.group(1));\n\t\t\told_n  = m.group(2) == null ? 1 : Integer.parseInt(m.group(2));\n\t\t\tnew_ln = m.group(3) == null ? 1 : Integer.parseInt(m.group(3));\n\t\t\tnew_n  = m.group(4) == null ? 1 : Integer.parseInt(m.group(4));\n\t\t\told_ln = Integer.parseInt(m.group(1));\n\t\t\t\n\t\t\tif (old_ln == 0) {\n\t\t\t\told_ln += 1; \n\t\t\t}\n\t\t\tif (new_ln == 0) {\n\t\t\t\tnew_ln += 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (line.length() > 0) {\n\t\t\t\ttag  = line.substring(0, 1);\n\t\t\t\trest = line.substring(1);\n\t\t\t\tif (tag.equals(\" \") || tag.equals(\"+\") || tag.equals(\"-\")) {\n\t\t\t\t\trawChunk.add(new Object[] {tag, rest});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Process the lines in the last chunk\n\tif (rawChunk.size() != 0) {\n\t\tList<String> oldChunkLines = new ArrayList<String>();\n\t\tList<String> newChunkLines = new ArrayList<String>();\n\t\t\n\t\tfor (Object[] raw_line: rawChunk)\n        {\n\t\t\ttag = (String)raw_line[0];\n\t\t\trest = (String)raw_line[1];\n\t\t\tif (tag.equals(\" \") || tag.equals(\"-\"))\n            {\n\t\t\t\toldChunkLines.add(rest);\n\t\t\t} \n\t\t\tif (tag.equals(\" \") || tag.equals(\"+\"))\n            {\n\t\t\t\tnewChunkLines.add(rest);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpatch.addDelta(new ChangeDelta(new Chunk(old_ln - 1, old_n, oldChunkLines),  \n\t\t\t\tnew Chunk(new_ln - 1, new_n, newChunkLines)));\n\t\trawChunk.clear();\n\t}\n\t\n\treturn patch;\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Text Differences with Custom Diff Algorithm in Java\nDESCRIPTION: Method that computes the difference between original and revised texts using a provided custom diff algorithm. It returns a Patch object describing the differences.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/original.txt#2025-04-23_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static Patch diff(List<?> original, List<?> revised, DiffAlgorithm algorithm) {\n\treturn algorithm.diff(original, revised);\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Patched Text in Java\nDESCRIPTION: Method to reverse a patch (unpatch), turning the revised text back into the original text.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic static List<?> unpatch(List<?> revised, Patch patch) {\n\treturn patch.restore(revised); // bla-bla-bla\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Difference with Default Algorithm in Java\nDESCRIPTION: Method to compute the difference between original and revised texts using the default diff algorithm.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static Patch diff(List<?> original, List<?> revised) {\n\treturn DiffUtils.diff(original, revised, defaultDiffAlgorithm);\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Difference with Custom Algorithm in Java\nDESCRIPTION: Method to compute the difference between original and revised texts using a specified diff algorithm.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic static Patch diff(List<?> original, List<?> revised, DiffAlgorithm algorithm) {\n\treturn algorithm.diff(original, revised);\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Original Text from Revised Text in Java\nDESCRIPTION: Method that restores the original text from the revised text using a given patch. This is essentially the reverse operation of patching.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/original.txt#2025-04-23_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic static List<?> unpatch(List<?> revised, Patch patch) {\n\treturn patch.restore(revised);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Unified Diff Format in Java\nDESCRIPTION: Complex method that parses text in unified diff format and creates a Patch object with the appropriate deltas. It handles chunk headers, context lines, additions, and deletions to construct change deltas.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/original.txt#2025-04-23_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic static Patch parseUnifiedDiff(List<String> diff) {\n\tboolean inPrelude = true;\n\tList<Object[]> rawChunk = new ArrayList<Object[]>();\n\tPatch patch = new Patch();\n\t\n\tint old_ln = 0, old_n = 0, new_ln = 0, new_n = 0;\n\tString tag = \"\", rest = \"\";\n\tfor (String line: diff) {\n\t\t// Skip leading lines until after we've seen one starting with '+++'\n\t\tif (inPrelude) {\n\t\t\tif (line.startsWith(\"++\")) {\n\t\t\t\tinPrelude = false;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tMatcher m = unifiedDiffChunkRe.matcher(line);\n\t\tif (m.find()) {\n\t\t\t// Process the lines in the previous chunk\n\t\t\tif (rawChunk.size() != 0) {\n\t\t\t\tList<String> oldChunkLines = new ArrayList<String>();\n\t\t\t\tList<String> newChunkLines = new ArrayList<String>();\n\t\t\t\t\n\t\t\t\tfor (Object[] raw_line: rawChunk) {\n\t\t\t\t\ttag = (String)raw_line[0];\n\t\t\t\t\trest = (String)raw_line[1];\n\t\t\t\t\tif (tag.equals(\" \") || tag.equals(\"-\")) {\n\t\t\t\t\t\toldChunkLines.add(rest);\n\t\t\t\t\t}\n\t\t\t\t\tif (tag.equals(\" \") || tag.equals(\"+\")) {\n\t\t\t\t\t\tnewChunkLines.add(rest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpatch.addDelta(new ChangeDelta(new Chunk(old_ln - 1, old_n, oldChunkLines),  \n\t\t\t\t\t\tnew Chunk(new_ln - 1, new_n, newChunkLines)));\n\t\t\t\trawChunk.clear();\n\t\t\t}\n\t\t\t// Parse the @@ header\n\t\t\told_ln = m.group(1) == null ? 1 : Integer.parseInt(m.group(1));\n\t\t\told_n  = m.group(2) == null ? 1 : Integer.parseInt(m.group(2));\n\t\t\tnew_ln = m.group(3) == null ? 1 : Integer.parseInt(m.group(3));\n\t\t\tnew_n  = m.group(4) == null ? 1 : Integer.parseInt(m.group(4));\n\t\t\told_ln = Integer.parseInt(m.group(1));\n\t\t\t\n\t\t\tif (old_ln == 0) {\n\t\t\t\told_ln += 1; \n\t\t\t}\n\t\t\tif (new_ln == 0) {\n\t\t\t\tnew_ln += 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (line.length() > 0) {\n\t\t\t\ttag  = line.substring(0, 1);\n\t\t\t\trest = line.substring(1);\n\t\t\t\tif (tag.equals(\" \") || tag.equals(\"+\") || tag.equals(\"-\")) {\n\t\t\t\t\trawChunk.add(new Object[] {tag, rest});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Process the lines in the last chunk\n\tif (rawChunk.size() != 0) {\n\t\tList<String> oldChunkLines = new ArrayList<String>();\n\t\tList<String> newChunkLines = new ArrayList<String>();\n\t\t\n\t\tfor (Object[] raw_line: rawChunk) {\n\t\t\ttag = (String)raw_line[0];\n\t\t\trest = (String)raw_line[1];\n\t\t\tif (tag.equals(\" \") || tag.equals(\"-\")) {\n\t\t\t\toldChunkLines.add(rest);\n\t\t\t} \n\t\t\tif (tag.equals(\" \") || tag.equals(\"+\")) {\n\t\t\t\tnewChunkLines.add(rest);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpatch.addDelta(new ChangeDelta(new Chunk(old_ln - 1, old_n, oldChunkLines),  \n\t\t\t\tnew Chunk(new_ln - 1, new_n, newChunkLines)));\n\t\trawChunk.clear();\n\t}\n\t\n\treturn patch;\n}\n```\n\n----------------------------------------\n\nTITLE: Unified Diff Delta Processing and Context Generation\nDESCRIPTION: Processes delta changes between original and revised text, including context lines before and after changes. Generates a unified diff format output with proper headers showing line numbers and change counts. Handles intermediate lines, delta text insertion, and post-delta context.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nint intermediateStart = curDelta.getOriginal().getPosition() + curDelta.getOriginal().getLines().size();\nfor ( line = intermediateStart; line < nextDelta.getOriginal().getPosition(); line++ ) {\n   buffer.add( \" \" + origLines.get( line ) );\t\t\t\t\t\t// output the code between the last Delta and this one\n   origTotal++;\n   revTotal++;\n}\nbuffer.addAll( getDeltaText( nextDelta ) );\t\t\t\t\t\t// output the Delta\norigTotal += nextDelta.getOriginal().getLines().size();\nrevTotal += nextDelta.getRevised().getLines().size();\ncurDelta = nextDelta;\ndeltaIndex++;\t\t\t\t\t\t\t\t\t\t\t// increment the iterator\n}\n\n// Now output the post-Delta context code, clamping the end of the file\ncontextStart = curDelta.getOriginal().getPosition() + curDelta.getOriginal().getLines().size();\nfor ( line = contextStart; ( line < (contextStart + contextSize )) && ( line < origLines.size() ); line++ ) {\n  buffer.add( \" \" + origLines.get( line ) );\n  origTotal++;\n  revTotal++;\n}\n\n// Create and insert the block header, conforming to the Unified Diff standard\nStringBuffer header = new StringBuffer();\nheader.append( \"@@ -\" );\nheader.append( origStart );\nheader.append( \",\" );\nheader.append( origTotal );\nheader.append( \" +\" );\nheader.append( revStart );\nheader.append( \",\" );\nheader.append( revTotal );\nheader.append( \" @@\" );\nbuffer.add( 0, header.toString() );\n\nreturn buffer;\n```\n\n----------------------------------------\n\nTITLE: Generating Unified Diff Format in Java\nDESCRIPTION: Method to generate text in unified diff format from a Patch object, including file names and context lines around changes.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic static List<String> generateUnifiedDiff(String fname1, String fname2, List<String> originalLines, Patch patch, int contextSize ) {\n\tList<String> ret = new ArrayList<String>();\n\tret.add( \"--- \" + fname1 );\n\tret.add( \"+++ \" + fname2 );\n\t\n    List<Delta> cur = new ArrayList<Delta>();   // current list of Delta's to process\n    int deltact = patch.getDeltas().size();\n    // if there's more than 1 Delta, we may need to output them together\n    if ( deltact > 1 ) {\n      Delta curDelta = patch.getDelta(0);\n      cur.add( curDelta );   \t\t\t\t\t\t\t\t\t// add the first Delta to the current set\n      for ( int i = 1; i < deltact; i++ ) {\n    \tint curpos = curDelta.getOriginal().getPosition();   \t\t// store the current position of the first Delta  \n        Delta nextDelta = patch.getDelta(i);\t\t\t\t\t// Check if the next Delta is too close to the current position\n        if ( (curpos + curDelta.getOriginal().getSize() + contextSize) >= ( nextDelta.getOriginal().getPosition()-contextSize ) ) {\n          cur.add( nextDelta );  \t\t\t\t\t\t// if it is, add it to the current set\n        } else {\n          List<String> curBlock = processDeltas( originalLines, cur, contextSize );\n          ret.addAll( curBlock );\t\t\t\t\t// if it isn't, output the current set, then create a new \n          cur.clear();\t\t\t\t\t\t\t\t// set and add the current Delta to it.\n          cur.add( nextDelta );\n        }\n        curDelta = nextDelta;\n      }\n      List<String> curBlock = processDeltas( originalLines, cur, contextSize );  // don't forget to process the last set of Deltas\n      ret.addAll( curBlock );\n    }\n\n\treturn ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Delta Changes for Unified Diff Output in Java\nDESCRIPTION: Helper method that processes a list of Delta objects to generate a unified diff text block with proper context lines.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nprivate static List<String> processDeltas( List<String> origLines, List<Delta> deltas, int contextSize ) {\n  List<String> buffer = new ArrayList<String>();\n  int origTotal = 0;   // counter for total lines output from Original\n  int revTotal = 0;    // counter for total lines output from Original\n  int line;\n\n  Delta curDelta = deltas.get(0);  // start with the first Delta\n  int origStart = curDelta.getOriginal().getPosition()+1 - contextSize;  \t// note the +1 to overcome the 0-offset Position\n  if ( origStart < 1 ) origStart = 1;                                    \t// clamp to the start of the file\n  int revStart = curDelta.getRevised().getPosition()+1 - contextSize;    \t// note the +1 to overcome the 0-offset Position\n  if ( revStart < 1 ) revStart = 1;\t\t\t\t\t\t\t\t// clamp to the start of the file\n  int contextStart = curDelta.getOriginal().getPosition() - contextSize;\t// find the start of the wrapper context code\n  if ( contextStart < 0 ) contextStart = 0;\t\t\t\t\t\t// clamp to the start of the file\n  for ( line = contextStart; line < curDelta.getOriginal().getPosition(); line++ ) {  // output the context before the first Delta\n    buffer.add( \" \" + origLines.get( line ) );\n    origTotal++;\n    revTotal++;\n  }\n  buffer.addAll( getDeltaText( curDelta ) );           \t\t\t\t// output the first Delta\n  origTotal += curDelta.getOriginal().getLines().size();\n  revTotal += curDelta.getRevised().getLines().size();\n\n  int deltaIndex = 1;\n  while ( deltaIndex < deltas.size() ) { \t\t\t\t\t\t\t\t// for each of the other Deltas\n     Delta nextDelta = deltas.get( deltaIndex );\n```\n\n----------------------------------------\n\nTITLE: Delta Text Extraction for Unified Diff\nDESCRIPTION: Helper method that extracts the changed lines from a Delta object and formats them for unified diff output. Prefixes removed lines with '-' and added lines with '+'.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n/**\n * getDeltaText returns the lines to be added to the Unified Diff text from the Delta parameter\n * @author Bill James (tankerbay@gmail.com)\n * \n * @param delta - the Delta to output\n * @return list of String lines of code.\n */\nprivate static List<String> getDeltaText( Delta delta ) {\n    List<String> buffer = new ArrayList<String>();\n    for ( Object line: delta.getOriginal().getLines() ) {\n      buffer.add( \"-\" + line );\n    }\n    for ( Object line: delta.getRevised().getLines() ) {\n      buffer.add( \"+\" + line );\n    }\n    return buffer;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffUtils Class in Java\nDESCRIPTION: Declaration of the DiffUtils class with static variables for the default diff algorithm and a regex pattern for parsing unified diff chunks.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/revised.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class DiffUtils {\n\tprivate static DiffAlgorithm defaultDiffAlgorithm = new MyersDiff();\n\tprivate static Pattern unifiedDiffChunkRe = \n\t\tPattern.compile(\"@@\\\\s+-(?:(\\\\d+)(?:,(\\\\d+))?)\\\\s+\\\\+(?:(\\\\d+)(?:,(\\\\d+))?)\\\\s+@@\");\n```\n\n----------------------------------------\n\nTITLE: Defining MultimapAssert Class for AssertJ Multimap Assertions in Java\nDESCRIPTION: Declaration of the MultimapAssert class which extends AbstractMultimapAssert to create assertions for Multimap objects. It includes constructors and an assertThat factory method that provides a starting point for assertion statements.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/empty.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.assertj.core.api;\n\nimport static org.assertj.core.util.Arrays.array;\n\nimport com.google.common.collect.Multimap;\n\n/**\n * Assertions for {@link Multimap}.\n * <p>\n * To create an instance of this class, invoke <code>{@link Assertions#assertThat(Multimap)}</code>.\n *\n * @param <K> the type of keys in the multimap.\n * @param <V> the type of values in the multimap.\n *\n * @author Marcin Kwaczyński\n */\npublic class MultimapAssert<K, V> extends AbstractMultimapAssert<MultimapAssert<K, V>, Multimap<K, V>, K, V> {\n\n  protected MultimapAssert(Multimap<K, V> actual) {\n    super(actual, MultimapAssert.class);\n  }\n\n  protected MultimapAssert(Multimap<K, V> actual, Class<?> selfType) {\n    super(actual, selfType);\n  }\n\n  public static <K, V> MultimapAssert<K, V> assertThat(Multimap<K, V> actual) {\n    return new MultimapAssert<>(actual);\n  }\n\n  @Override\n  public MultimapAssert<K, V>[] createAssertionsForEntries(K key) {\n    // this assertion is handled elsewhere\n    throw new UnsupportedOperationException(\"not implemented yet\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Support Matrix in Markdown\nDESCRIPTION: A markdown table showing the supported versions of AssertJ, indicating that version 3.27.x is supported while versions below 3.27 are not supported.\nSOURCE: https://github.com/assertj/assertj/blob/main/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.27.x  | :white_check_mark: |\n| < 3.27  | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ IDEA Module for AssertJ Project in XML\nDESCRIPTION: This XML configuration defines the structure of an IntelliJ IDEA module for the AssertJ project. It sets up Python facet, configures source folders, and declares dependencies on external libraries including Commons IO, Java Diff Utils, and Jython.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/issue10_base.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"Python\" name=\"Python\">\n      <configuration sdkName=\"Python 2.7 (C:/Python27/python.exe)\" />\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/resources\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Python 2.7 (C:/Python27/python.exe) interpreter library\" level=\"application\" />\n    <orderEntry type=\"module-library\">\n      <library>\n        <CLASSES>\n          <root url=\"jar://$MODULE_DIR$/lib/commons-io-1.4.jar!/\" />\n        </CLASSES>\n        <JAVADOC />\n        <SOURCES />\n      </library>\n    </orderEntry>\n    <orderEntry type=\"module-library\">\n      <library>\n        <CLASSES>\n          <root url=\"jar://$MODULE_DIR$/lib/java-diff-utils-1.2.jar!/\" />\n        </CLASSES>\n        <JAVADOC />\n        <SOURCES />\n      </library>\n    </orderEntry>\n    <orderEntry type=\"module-library\">\n      <library>\n        <CLASSES>\n          <root url=\"jar://$MODULE_DIR$/lib/jython.jar!/\" />\n        </CLASSES>\n        <JAVADOC />\n        <SOURCES />\n      </library>\n    </orderEntry>\n  </component>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Adding Python Interpreter Library to IntelliJ IDEA Module\nDESCRIPTION: This diff shows the addition of a Python 2.6.6 interpreter library reference to an IntelliJ IDEA module configuration file (bonobo.iml). The change adds a new orderEntry element that references the Python interpreter library at the application level.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/issue10_patch.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<orderEntry type=\"library\" name=\"Python 2.6.6 (/usr/bin/python2.6) interpreter library\" level=\"application\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PIT Mutation Testing License for AssertJ\nDESCRIPTION: License configuration file for PIT mutation testing framework extensions. The license is set to expire on August 15, 2025, and applies to all packages under the org.assertj namespace. The license type is OSSS (Open Source Software Support).\nSOURCE: https://github.com/assertj/assertj/blob/main/cdg-pitest-licence.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n#Licence file for pitest extensions\n#Tue Aug 15 08:24:27 BST 2023\nexpires=15/08/2025\nkeyVersion=1\nsignature=GK1Rn0WFb/cojdFoUZehpBCASQdPh3XOM4Mf6sXb6lMI9ZEqTvE61eRDJUCBoYvu3CveJ1As3qtY5CXxs5wdZVXXDHp2cqLeydPkyYAwN5h0xw0B5XHb2tne4czk1ivj4omEWRWPv7iPrmTuNomrNxITZwOkG4/QWghTQ3skyGo\\=\npackages=org.assertj.*\ntype=OSSS\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice to be included in files when applying the Apache License 2.0 to a project. The template includes placeholders for year and copyright owner information, along with standard license text.\nSOURCE: https://github.com/assertj/assertj/blob/main/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Testing Git diff --check with no whitespace errors\nDESCRIPTION: Verifies that git diff --check succeeds when there are no whitespace issues in the changes.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check with no whitespace errors' '\n\n                git commit -m \"snapshot\" &&\n                echo \"foo();\" > x &&\n                git diff --check\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing Git diff --check with trailing whitespace\nDESCRIPTION: Verifies that git diff --check fails when there is trailing whitespace in the changed content.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check with trailing whitespace' '\n\n                echo \"foo(); \" > x &&\n                test_must_fail git diff --check\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing Git diff --check with space before tab in indentation\nDESCRIPTION: Verifies that git diff --check fails when there are spaces followed by hard tabs in indentation.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check with space before tab in indent' '\n\n                # indent has space followed by hard tab\n                echo \"   foo();\" > x &&\n                test_must_fail git diff --check\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing Git diff with different whitespace options\nDESCRIPTION: Runs git diff with no options, -w, and -b flags and compares the output against expected results to verify behavior.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit diff > out\ntest_expect_success \"Ray's example without options\" 'test_cmp expect out'\n\ngit diff -w > out\ntest_expect_success \"Ray's example with -w\" 'test_cmp expect out'\n\ngit diff -b > out\ntest_expect_success \"Ray's example with -b\" 'test_cmp expect out'\n```\n\n----------------------------------------\n\nTITLE: Testing diff with various whitespace configurations\nDESCRIPTION: Tests Git's diff behavior with multiple combinations of whitespace settings and options, verifying handling of spaces, tabs, and indentation.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntr 'Q_' '\\015 ' << EOF > expect\ndiff --git a/x b/x\nindex d99af23..8b32fb5 100644\n--- a/x\n+++ b/x\n@@ -1,6 +1,6 @@\n-whitespace at beginning\n-whitespace change\n-whitespace in the middle\n-whitespace at end\n+             whitespace at beginning\n+whitespace       change\n+white space in the middle\n+whitespace at end__\nunchanged line\n-CR at endQ\n+CR at end\nEOF\ngit diff > out\ntest_expect_success 'another test, without options' 'test_cmp expect out'\n```\n\n----------------------------------------\n\nTITLE: Testing Git's -w flag for ignoring all whitespace\nDESCRIPTION: Tests the -w flag which should ignore all whitespace differences in the diff output.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncat << EOF > expect\ndiff --git a/x b/x\nindex d99af23..8b32fb5 100644\nEOF\ngit diff -w > out\ntest_expect_success 'another test, with -w' 'test_cmp expect out'\n```\n\n----------------------------------------\n\nTITLE: Testing Git's -b flag for ignoring whitespace amount changes\nDESCRIPTION: Tests the -b flag which ignores changes in the amount of whitespace, focusing on detecting when whitespace is added or removed.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntr 'Q' '\\015' << EOF > expect\ndiff --git a/x b/x\nindex d99af23..8b32fb5 100644\n--- a/x\n+++ b/x\nEOF\ngit diff -b > out\ntest_expect_success 'another test, with -b' 'test_cmp expect out'\n```\n\n----------------------------------------\n\nTITLE: Testing combined whitespace flags for partial whitespace ignoring\nDESCRIPTION: Tests the combination of -b with --ignore-space-at-eol flags to verify partial whitespace ignoring behavior.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntr 'Q' '\\015' << EOF > expect\ndiff --git a/x b/x\nindex d99af23..8b32fb5 100644\n--- a/x\n+++ b/x\n@@ -1,6 +1,6 @@\n-whitespace at beginning\n+             whitespace at beginning\nwhitespace change\n-whitespace in the middle\n+white space in the middle\nwhitespace at end\nunchanged line\nCR at endQ\ngit diff -b --ignore-space-at-eol > out\ntest_expect_failure 'another test, with -b --ignore-space-at-eol' 'test_cmp expect out'\n```\n\n----------------------------------------\n\nTITLE: Testing Git's detection of mixed spaces and tabs in indentation\nDESCRIPTION: Verifies Git's ability to detect and report when spaces and tabs are mixed in indentation, which is generally considered bad practice.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check mixed spaces and tabs in indent' '\n\n                # This is indented with SP HT SP.\n                echo \"    foo();\" > x &&\n                git diff --check | grep \"space before tab in indent\"\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing Git's detection of mixed tabs and spaces in indentation\nDESCRIPTION: Similar to the previous test, but with tabs before spaces in the indentation pattern.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check mixed tabs and spaces in indent' '\n\n                # This is indented with HT SP HT.\n                echo \"                  foo();\" > x &&\n                git diff --check | grep \"space before tab in indent\"\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing compatibility of Git diff --check with other flags\nDESCRIPTION: Tests that --check flag works together with --exit-code and --quiet flags in git diff command.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success '--check and --exit-code are not exclusive' '\n\n                git checkout x &&\n                git diff --check --exit-code\n\n'\n\ntest_expect_success '--check and --quiet are not exclusive' '\n\n                git diff --check --quiet\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing whitespace checking for staged changes\nDESCRIPTION: Tests Git's ability to check whitespace issues in staged (index) changes using git diff --cached --check.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check staged with no whitespace errors' '\n\n                echo \"foo();\" > x &&\n                git add x &&\n                git diff --cached --check\n\n'\n\ntest_expect_success 'check staged with trailing whitespace' '\n\n                echo \"foo(); \" > x &&\n                git add x &&\n                test_must_fail git diff --cached --check\n\n'\n\ntest_expect_success 'check staged with space before tab in indent' '\n\n                # indent has space followed by hard tab\n                echo \"   foo();\" > x &&\n                git add x &&\n                test_must_fail git diff --cached --check\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing whitespace checking with diff-index command\nDESCRIPTION: Tests Git's diff-index command with --check flag for detecting whitespace issues against HEAD.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check with no whitespace errors (diff-index)' '\n\n                echo \"foo();\" > x &&\n                git add x &&\n                git diff-index --check HEAD\n\n'\n\ntest_expect_success 'check with trailing whitespace (diff-index)' '\n\n                echo \"foo(); \" > x &&\n                git add x &&\n                test_must_fail git diff-index --check HEAD\n\n'\n\ntest_expect_success 'check with space before tab in indent (diff-index)' '\n\n                # indent has space followed by hard tab\n                echo \"   foo();\" > x &&\n                git add x &&\n                test_must_fail git diff-index --check HEAD\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing whitespace checking for staged changes with diff-index\nDESCRIPTION: Tests Git's diff-index command with --cached --check flags for detecting whitespace issues in staged changes.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check staged with no whitespace errors (diff-index)' '\n\n                echo \"foo();\" > x &&\n                git add x &&\n                git diff-index --cached --check HEAD\n\n'\n\ntest_expect_success 'check staged with trailing whitespace (diff-index)' '\n\n                echo \"foo(); \" > x &&\n                git add x &&\n                test_must_fail git diff-index --cached --check HEAD\n\n'\n\ntest_expect_success 'check staged with space before tab in indent (diff-index)' '\n\n                # indent has space followed by hard tab\n                echo \"   foo();\" > x &&\n                git add x &&\n                test_must_fail git diff-index --cached --check HEAD\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing whitespace checking with diff-tree command\nDESCRIPTION: Tests Git's diff-tree command with --check flag for detecting whitespace issues between commits.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check with no whitespace errors (diff-tree)' '\n\n                echo \"foo();\" > x &&\n                git commit -m \"new commit\" x &&\n                git diff-tree --check HEAD^ HEAD\n\n'\n\ntest_expect_success 'check with trailing whitespace (diff-tree)' '\n\n                echo \"foo(); \" > x &&\n                git commit -m \"another commit\" x &&\n                test_must_fail git diff-tree --check HEAD^ HEAD\n\n'\n\ntest_expect_success 'check with space before tab in indent (diff-tree)' '\n\n                # indent has space followed by hard tab\n                echo \"   foo();\" > x &&\n                git commit -m \"yet another\" x &&\n                test_must_fail git diff-tree --check HEAD^ HEAD\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing Git whitespace configuration options\nDESCRIPTION: Tests various core.whitespace configuration settings and their effect on Git's whitespace checking behavior.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'check trailing whitespace (trailing-space: off)' '\n\n                git config core.whitespace \"-trailing-space\" &&\n                echo \"foo ();   \" > x &&\n                git diff --check\n\n'\n\ntest_expect_success 'check trailing whitespace (trailing-space: on)' '\n\n                git config core.whitespace \"trailing-space\" &&\n                echo \"foo ();   \" > x &&\n                test_must_fail git diff --check\n\n'\n\ntest_expect_success 'check space before tab in indent (space-before-tab: off)' '\n\n                # indent contains space followed by HT\n                git config core.whitespace \"-space-before-tab\" &&\n                echo \"   foo ();\" > x &&\n                git diff --check\n\n'\n\ntest_expect_success 'check space before tab in indent (space-before-tab: on)' '\n\n                # indent contains space followed by HT\n                git config core.whitespace \"space-before-tab\" &&\n                echo \"   foo ();   \" > x &&\n                test_must_fail git diff --check\n\n'\n\ntest_expect_success 'check spaces as indentation (indent-with-non-tab: off)' '\n\n                git config core.whitespace \"-indent-with-non-tab\"\n                echo \"        foo ();\" > x &&\n                git diff --check\n\n'\n\ntest_expect_success 'check spaces as indentation (indent-with-non-tab: on)' '\n\n                git config core.whitespace \"indent-with-non-tab\" &&\n                echo \"        foo ();\" > x &&\n                test_must_fail git diff --check\n\n'\n\ntest_expect_success 'check tabs and spaces as indentation (indent-with-non-tab: on)' '\n\n                git config core.whitespace \"indent-with-non-tab\" &&\n                echo \"                   foo ();\" > x &&\n                test_must_fail git diff --check\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing line number accuracy in diff --check output\nDESCRIPTION: Verifies that the line numbers reported in git diff --check output correctly identify the lines with whitespace issues.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'line numbers in --check output are correct' '\n\n                echo \"\" > x &&\n                echo \"foo(); \" >> x &&\n                git diff --check | grep \"x:2:\"\n\n'\n```\n\n----------------------------------------\n\nTITLE: Testing detection of trailing blank lines and allowance of new blank lines\nDESCRIPTION: Verifies Git's behavior regarding trailing blank lines and the addition of new blank lines in changes.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'checkdiff detects trailing blank lines' '\n                echo \"foo();\" >x &&\n                echo \"\" >>x &&\n                git diff --check | grep \"ends with blank\"\n'\n\ntest_expect_success 'checkdiff allows new blank lines' '\n                git checkout x &&\n                mv x y &&\n                (\n                                echo \"/* This is new */\" &&\n                                echo \"\" &&\n                                cat y\n                ) >x &&\n                git diff --check\n'\n```\n\n----------------------------------------\n\nTITLE: Testing combined diff with autocrlf conversion\nDESCRIPTION: Tests Git's behavior with combined diffs when core.autocrlf is enabled, verifying proper line ending handling during merge conflicts.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ntest_expect_success 'combined diff with autocrlf conversion' '\n\n                git reset --hard &&\n                echo >x hello &&\n                git commit -m \"one side\" x &&\n                git checkout HEAD^ &&\n                echo >x goodbye &&\n                git commit -m \"the other side\" x &&\n                git config core.autocrlf true &&\n                test_must_fail git merge main &&\n\n                git diff | sed -e \"1,/^@@@/d\" >actual &&\n                ! grep \"^-\" actual\n\n'\n```\n\n----------------------------------------\n\nTITLE: Setting up Ray Lehtiniemi's example for testing Git diff\nDESCRIPTION: Creates an initial file with a 'do-while' loop and then modifies it to have different whitespace formatting for testing Git's diff engine.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat << EOF > x\ndo {\n   nothing;\n} while (0);\nEOF\n\ngit update-index --add x\n\ncat << EOF > x\ndo\n{\n   nothing;\n}\nwhile (0);\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating expected diff output for comparison\nDESCRIPTION: Generates the expected diff output for Ray's example that will be used to validate Git's diff behavior.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat << EOF > expect\ndiff --git a/x b/x\nindex adf3937..6edc172 100644\n--- a/x\n+++ b/x\n@@ -1,3 +1,5 @@\n-do {\n+do\n+{\n    nothing;\n-} while (0);\n+}\n+while (0);\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating test file with various whitespace changes\nDESCRIPTION: Creates a file with specific whitespace patterns including CRs and spaces at various positions for comprehensive diff testing.\nSOURCE: https://github.com/assertj/assertj/blob/main/assertj-core/src/test/resources/diffs/5B.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntr 'Q' '\\015' << EOF > x\nwhitespace at beginning\nwhitespace change\nwhitespace in the middle\nwhitespace at end\nunchanged line\nCR at endQ\nEOF\n\ngit update-index x\n\ntr '_' ' ' << EOF > x\n                whitespace at beginning\nwhitespace          change\nwhite space in the middle\nwhitespace at end__\nunchanged line\nCR at end\nEOF\n```\n\n----------------------------------------\n\nTITLE: Empty Java Code Example Placeholder\nDESCRIPTION: A placeholder comment indicating where example code should be added.\nSOURCE: https://github.com/assertj/assertj/blob/main/ISSUE_TEMPLATE.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n<add example here>\n```"
  }
]