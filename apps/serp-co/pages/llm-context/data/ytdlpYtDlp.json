[
  {
    "owner": "yt-dlp",
    "repo": "yt-dlp",
    "content": "TITLE: Download best video with best audio (yt-dlp)\nDESCRIPTION: Downloads the best video format that contains video, and if it doesn't already have an audio stream, merges it with the best audio-only format. `bv*+ba/b` is equivalent to `yt-dlp` alone.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv*+ba/b\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Format Selector Python\nDESCRIPTION: This snippet demonstrates how to use a custom format selector in yt-dlp. It defines a `format_selector` function that selects the best video and audio formats that won't result in an mkv. This function is then passed as the 'format' option to the YoutubeDL object. The example provides a basic selection logic that prioritizes video without audio and audio without video, ensuring compatibility by matching extensions. Dependency: yt_dlp.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nimport yt_dlp\n\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\n\ndef format_selector(ctx):\n    \"\"\" Select the best video and the best audio that won't result in an mkv.\n    NOTE: This is just an example and does not handle all cases \"\"\"\n\n    # formats are already sorted worst to best\n    formats = ctx.get('formats')[::-1]\n\n    # acodec='none' means there is no audio\n    best_video = next(f for f in formats\n                      if f['vcodec'] != 'none' and f['acodec'] == 'none')\n\n    # find compatible audio extension\n    audio_ext = {'mp4': 'm4a', 'webm': 'webm'}[best_video['ext']]\n    # vcodec='none' means there is no video\n    best_audio = next(f for f in formats if (\n        f['acodec'] != 'none' and f['vcodec'] == 'none' and f['ext'] == audio_ext))\n\n    # These are the minimum required fields for a merged format\n    yield {\n        'format_id': f'{best_video[\"format_id\"]}+{best_audio[\"format_id\"]}',\n        'ext': best_video['ext'],\n        'requested_formats': [best_video, best_audio],\n        # Must be + separated list of protocols\n        'protocol': f'{best_video[\"protocol\"]}+{best_audio[\"protocol\"]}'\n    }\n\n\nydl_opts = {\n    'format': format_selector,\n}\n\nwith yt_dlp.YoutubeDL(ydl_opts) as ydl:\n    ydl.download(URLS)\n```\n\n----------------------------------------\n\nTITLE: Downloading YouTube Playlist Videos in Year-Based Directories in yt-dlp\nDESCRIPTION: This example demonstrates how to download YouTube playlist videos into separate directories based on their upload year. It utilizes the `upload_date` variable with formatting to extract the year and create the appropriate directory structure.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Download YouTube playlist videos in separate directories according to their uploaded year\n$ yt-dlp -o \"%(upload_date>%Y)s/%(title)s.%(ext)s\" \"https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re\"\n```\n\n----------------------------------------\n\nTITLE: Downloading YouTube Playlist Videos in Separate Directories in yt-dlp\nDESCRIPTION: This example demonstrates how to download YouTube playlist videos into separate directories, indexed by their order within the playlist. It uses output template variables like `playlist`, `playlist_index`, and `title` to construct the directory structure and filenames.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Download YouTube playlist videos in separate directory indexed by video order in a playlist\n$ yt-dlp -o \"%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s\" \"https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Set title as Series name S01E05 (Bash)\nDESCRIPTION: This command constructs the title field based on series name, season number, and episode number, using a formatted string. It utilizes the `series`, `season_number`, and `episode_number` fields to generate the title.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \"%(series)s S%(season_number)02dE%(episode_number)02d:%(title)s\"\n```\n\n----------------------------------------\n\nTITLE: Combining Format Filters with yt-dlp\nDESCRIPTION: This command demonstrates combining format filters. It selects up to 720p videos (or videos where the height is unknown) with a bitrate of at least 500 kbps.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_41\n\nLANGUAGE: None\nCODE:\n```\n-f \"bv[height<=?720][tbr>500]\"\n```\n\n----------------------------------------\n\nTITLE: Embedding yt-dlp Basic Example Python\nDESCRIPTION: This snippet demonstrates how to embed yt-dlp within a Python program for downloading videos. It initializes a YoutubeDL object and uses it to download videos from a list of URLs. It showcases the basic usage of the yt_dlp library.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nfrom yt_dlp import YoutubeDL\n\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\nwith YoutubeDL() as ydl:\n    ydl.download(URLS)\n```\n\n----------------------------------------\n\nTITLE: Output Template Field Syntax\nDESCRIPTION: This example shows the general syntax for output template fields in yt-dlp. It includes various components such as name, keys, addition, strftime formatting, alternate fields, replacement, default values, flags, width, precision, length and type.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n%(name[.keys][addition][>strf][,alternate][&replacement][|default])[flags][width][.precision][length]type\n```\n\n----------------------------------------\n\nTITLE: Download best mp4 video or best available (yt-dlp)\nDESCRIPTION: Downloads the best MP4 video available, or the best video if no MP4 is available.  This leverages format selection logic to try for the desired container first.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4] / bv*+ba/b\"\n```\n\n----------------------------------------\n\nTITLE: yt-dlp Configuration File Example\nDESCRIPTION: This configuration file demonstrates how to configure yt-dlp to always extract audio, prevent mtime copying, use a proxy, and save videos to a specific directory.  It shows the correct syntax for options within the file.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n# Lines starting with # are comments\n\n# Always extract audio\n-x\n\n# Do not copy the mtime\n--no-mtime\n\n# Use this proxy\n--proxy 127.0.0.1:3128\n\n# Save all videos under YouTube directory in your home directory\n-o ~/YouTube/%(title)s.%(ext)s\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Interpret Title as Artist - Title (Bash)\nDESCRIPTION: This command interprets the title field as a combination of the artist and title, separated by a hyphen. It utilizes the `--parse-metadata` option with a template that extracts data from the 'artist' and 'title' fields. The resulting string becomes the new title.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \"title:%(artist)s - %(title)s\"\n```\n\n----------------------------------------\n\nTITLE: Downloading All Playlists in Separate Directories by Uploader in yt-dlp\nDESCRIPTION: This example demonstrates how to download all playlists from a YouTube channel or user, keeping each playlist in a separate directory named after the playlist. The directory structure includes the uploader and playlist name for organization.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# Download all playlists of YouTube channel/user keeping each playlist in separate directory:\n$ yt-dlp -o \"%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s\" \"https://www.youtube.com/user/TheLinuxFoundation/playlists\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Prioritize uploader as artist (Bash)\nDESCRIPTION: This command prioritizes the uploader as the artist field in video metadata. It also embeds this modified metadata into the downloaded media file using the `--embed-metadata` flag. The `%(uploader|)s` part handles the case where the uploader field is empty.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \"%(uploader|)s:%(meta_artist)s\" --embed-metadata\n```\n\n----------------------------------------\n\nTITLE: Downloading Video and Subtitles with Nested Uploader Directories in yt-dlp\nDESCRIPTION: This example demonstrates downloading a video and its subtitles, creating a nested directory structure that includes the uploader. The video is stored directly under the uploader's directory, while the subtitles are placed in a \"subs\" subdirectory within the uploader's directory.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Download video as \"C:\\MyVideos\\uploader\\title.ext\" and subtitles as \"C:\\MyVideos\\uploader\\subs\\title.ext\"\n$ yt-dlp -P \"C:/MyVideos\" -o \"%(uploader)s/%(title)s.%(ext)s\" -o \"subtitle:%(uploader)s/subs/%(title)s.%(ext)s\" BaW_jenozKc --write-subs\n```\n\n----------------------------------------\n\nTITLE: Download best video/audio formats (yt-dlp)\nDESCRIPTION: Downloads and merges the best video-only and best audio-only formats, or downloads the best combined format if a video-only format isn't available. This is a common use case for obtaining the highest quality video and audio.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv+ba/b\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Set comment field using description (Bash)\nDESCRIPTION: This command sets the \"comment\" field in the video metadata to the description of the video. The `(?s)` flag in the regular expression enables dotall mode, allowing the dot (.) to match newline characters. It also embeds the modified metadata into the downloaded media file.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \"description:(?s)(?P<meta_comment>.+)\" --embed-metadata\n```\n\n----------------------------------------\n\nTITLE: Download best video and top two audio streams (yt-dlp)\nDESCRIPTION: Downloads and merges the best format that has a video stream and the best 2 audio-only formats into one file.  The `--audio-multistreams` option is required to merge multiple audio streams. ba.2 will select the second best audio.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv*+ba+ba.2\" --audio-multistreams\n```\n\n----------------------------------------\n\nTITLE: Adding Logger and Progress Hook Python\nDESCRIPTION: This snippet demonstrates how to add a custom logger and progress hook to yt-dlp. It defines a `MyLogger` class with debug, info, warning, and error methods and a `my_hook` function that is called during the download process. These are then passed as 'logger' and 'progress_hooks' options to the YoutubeDL object. Dependency: yt_dlp.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nimport yt_dlp\n\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\n\nclass MyLogger:\n    def debug(self, msg):\n        # For compatibility with youtube-dl, both debug and info are passed into debug\n        # You can distinguish them by the prefix '[debug] '\n        if msg.startswith('[debug] '):\n            pass\n        else:\n            self.info(msg)\n\n    def info(self, msg):\n        pass\n\n    def warning(self, msg):\n        pass\n\n    def error(self, msg):\n        print(msg)\n\n\n# ℹ️ See \"progress_hooks\" in help(yt_dlp.YoutubeDL)\ndef my_hook(d):\n    if d['status'] == 'finished':\n        print('Done downloading, now post-processing ...')\n\n\nydl_opts = {\n    'logger': MyLogger(),\n    'progress_hooks': [my_hook],\n}\n\nwith yt_dlp.YoutubeDL(ydl_opts) as ydl:\n    ydl.download(URLS)\n```\n\n----------------------------------------\n\nTITLE: Merging Video and Audio Formats with yt-dlp\nDESCRIPTION: This command merges video and audio from separate formats into a single file using ffmpeg. The command downloads the best video-only format and the best audio-only format and muxes them together using ffmpeg. Requires ffmpeg to be installed.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_38\n\nLANGUAGE: None\nCODE:\n```\n-f bestvideo+bestaudio\n```\n\n----------------------------------------\n\nTITLE: Download best video <= 720p, preferring >30fps (yt-dlp)\nDESCRIPTION: Downloads the best video no better than 720p preferring framerate greater than 30, or the worst video (still preferring framerate greater than 30) if there is no such video. Uses complex format selection.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"((bv*[fps>30]/bv*)[height<=720]/(wv*[fps>30]/wv*)) + ba / (b[fps>30]/b)[height<=720]/(w[fps>30]/w)\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Udemy Course with Chapter Directories in yt-dlp\nDESCRIPTION: This example demonstrates how to download a Udemy course, organizing videos into separate directories for each chapter. It uses authentication credentials and custom output paths to organize the downloaded content under a \"MyVideos\" directory.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home\n$ yt-dlp -u user -p password -P \"~/MyVideos\" -o \"%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s\" \"https://www.udemy.com/java-tutorial\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Regex example (Bash)\nDESCRIPTION: This command parses the description field using a regular expression to extract the artist's name. The `(?P<artist>.+)` is a named capture group that captures any characters after 'Artist - ' and assigns it to the 'artist' field. This modifies the 'artist' metadata field of the video.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \"description:Artist - (?P<artist>.+)\"\n```\n\n----------------------------------------\n\nTITLE: Extract Audio Python\nDESCRIPTION: This snippet demonstrates how to extract audio from a video using yt-dlp. It sets the 'format' option to select the best audio format and uses a postprocessor to extract the audio using ffmpeg. Dependencies: yt_dlp, FFmpeg.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nimport yt_dlp\n\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\n\nydl_opts = {\n    'format': 'm4a/bestaudio/best',\n    # ℹ️ See help(yt_dlp.postprocessor) for a list of available Postprocessors and their arguments\n    'postprocessors': [{  # Extract audio using ffmpeg\n        'key': 'FFmpegExtractAudio',\n        'preferredcodec': 'm4a',\n    }]\n}\n\nwith yt_dlp.YoutubeDL(ydl_opts) as ydl:\n    error_code = ydl.download(URLS)\n```\n\n----------------------------------------\n\nTITLE: Extracting Video Information Python\nDESCRIPTION: This snippet demonstrates how to extract video information without downloading the video.  It uses the `extract_info` method with the `download` parameter set to `False`. The extracted information is then sanitized using `ydl.sanitize_info` to make it JSON serializable before printing. Dependencies: yt_dlp, json.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport yt_dlp\n\nURL = 'https://www.youtube.com/watch?v=BaW_jenozKc'\n\n# ℹ️ See help(yt_dlp.YoutubeDL) for a list of available options and public functions\nydl_opts = {}\nwith yt_dlp.YoutubeDL(ydl_opts) as ydl:\n    info = ydl.extract_info(URL, download=False)\n\n    # ℹ️ ydl.sanitize_info makes the info json-serializable\n    print(json.dumps(ydl.sanitize_info(info)))\n```\n\n----------------------------------------\n\nTITLE: Filtering Videos Python\nDESCRIPTION: This snippet demonstrates how to filter videos based on their duration before downloading. It defines a function `longer_than_a_minute` that checks if the video's duration is longer than a minute and returns a message if it's too short. This function is then used as a 'match_filter' option in the YoutubeDL object. Dependency: yt_dlp.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nimport yt_dlp\n\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\n\ndef longer_than_a_minute(info, *, incomplete):\n    \"\"\"Download only videos longer than a minute (or with unknown duration)\"\"\"\n    duration = info.get('duration')\n    if duration and duration < 60:\n        return 'The video is too short'\n\nydl_opts = {\n    'match_filter': longer_than_a_minute,\n}\n\nwith yt_dlp.YoutubeDL(ydl_opts) as ydl:\n    error_code = ydl.download(URLS)\n```\n\n----------------------------------------\n\nTITLE: Streaming Downloaded Video to Standard Output in yt-dlp\nDESCRIPTION: This example demonstrates how to stream the downloaded video directly to standard output.  The `-o -` option instructs yt-dlp to write the video data to stdout instead of a file.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# Stream the video being downloaded to stdout\n$ yt-dlp -o - BaW_jenozKc\n```\n\n----------------------------------------\n\nTITLE: Download video and audio separately (yt-dlp)\nDESCRIPTION: Downloads the best video-only and best audio-only formats without merging them. An output template should be used since bestvideo and bestaudio will have the same file name. The `-o` option specifies the output filename using the title, format ID, and extension.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv,ba\" -o \"%(title)s.f%(format_id)s.%(ext)s\"\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Formats with yt-dlp\nDESCRIPTION: This command downloads formats based on a preference order specified by slashes. The formats on the left side of the slash are preferred over the formats on the right side. If none of the specified formats are available, yt-dlp will complain that no suitable formats are available.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_36\n\nLANGUAGE: None\nCODE:\n```\n-f 22/17/18\n```\n\n----------------------------------------\n\nTITLE: Printing Restricted Filename with Title and Extension in yt-dlp\nDESCRIPTION: This example demonstrates how to use yt-dlp to print the filename using the video title and extension, while also restricting the filename to remove special characters. The `--restrict-filenames` flag ensures a safer filename across different filesystems.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --print filename -o \"%(title)s.%(ext)s\" BaW_jenozKc --restrict-filenames\nyoutube-dl_test_video_.webm    # Restricted file name\n```\n\n----------------------------------------\n\nTITLE: Downloading Video and Subtitles to Separate Directories in yt-dlp\nDESCRIPTION: This example showcases how to download a video and its subtitles into separate directories using yt-dlp. It leverages the `-P` option to specify different output paths for the video and subtitles and an additional temporary directory.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# Download video as \"C:\\MyVideos\\uploader\\title.ext\", subtitles as \"C:\\MyVideos\\subs\\uploader\\title.ext\"\n# and put all temporary files in \"C:\\MyVideos\\tmp\"\n$ yt-dlp -P \"C:/MyVideos\" -P \"temp:tmp\" -P \"subtitle:subs\" -o \"%(uploader)s/%(title)s.%(ext)s\" BaW_jenozKc --write-subs\n```\n\n----------------------------------------\n\nTITLE: Download largest resolution video <= 720p (yt-dlp)\nDESCRIPTION: Downloads the video with the largest resolution no better than 720p, or the video with the smallest resolution available if there is no such video, preferring larger framerate for formats with the same resolution. Uses format sorting.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"res:720,fps\"\n```\n\n----------------------------------------\n\nTITLE: Utility Function Usage\nDESCRIPTION: This snippet illustrates how to use convenience conversion and parsing functions from `yt_dlp/utils/`, such as `traverse_obj`, `float_or_none`, and `int_or_none`, for safe data handling.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ndescription = traverse_obj(response, ('result', 'video', 'summary'), expected_type=str)\nthumbnails = traverse_obj(response, ('result', 'thumbnails', ..., 'url'), expected_type=url_or_none)\nvideo = traverse_obj(response, ('result', 'video', 0), default={}, expected_type=dict)\nduration = float_or_none(video.get('durationMs'), scale=1000)\nview_count = int_or_none(video.get('views'))\n```\n\n----------------------------------------\n\nTITLE: Download smallest resolution video >= 480p (yt-dlp)\nDESCRIPTION: Downloads the video with smallest resolution no worse than 480p, or the video with the largest resolution available if there is no such video, preferring better codec and then larger total bitrate for the same resolution. Uses format sorting.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"+res:480,codec,br\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Formats by Height with yt-dlp\nDESCRIPTION: This command filters video formats based on their height.  It selects the best format with a height equal to 720p. Filters without a selector are interpreted as `best`.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_39\n\nLANGUAGE: None\nCODE:\n```\n-f \"best[height=720]\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Formats by Filesize with yt-dlp\nDESCRIPTION: This command filters video formats based on their filesize. It selects the best format with a filesize greater than 10MB. Filters without a selector are interpreted as `best`.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_40\n\nLANGUAGE: None\nCODE:\n```\n-f \"[filesize>10M]\"\n```\n\n----------------------------------------\n\nTITLE: Providing Fallbacks for Data Extraction\nDESCRIPTION: This code demonstrates providing fallbacks when extracting metadata from multiple sources. If the first source fails, it attempts to extract the data from another source, making the extractor more robust.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ntitle = meta.get('title') or self._og_search_title(webpage)\n```\n\n----------------------------------------\n\nTITLE: Download best video with h264 codec (yt-dlp)\nDESCRIPTION: Downloads the best video with best codec no better than h264, or the best video with worst codec if there is no such video.  Uses format sorting with codec and a maximum preference.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"codec:h264\"\n```\n\n----------------------------------------\n\nTITLE: Filtering All Audio-Only Formats with yt-dlp\nDESCRIPTION: This command uses the `all` selector to download all audio-only formats available for a video. It filters formats where the video codec is none.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_42\n\nLANGUAGE: None\nCODE:\n```\n-f \"all[vcodec=none]\"\n```\n\n----------------------------------------\n\nTITLE: Download best video with smallest resolution (yt-dlp)\nDESCRIPTION: Downloads the best video available but with the smallest resolution using the `-S` option. The `+res` argument sorts the formats by resolution in ascending order.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"+res\"\n```\n\n----------------------------------------\n\nTITLE: Safely Extracting Nested Data with traverse_obj\nDESCRIPTION: This example demonstrates how to use `traverse_obj` to safely extract nested data from a dictionary in yt-dlp, avoiding potential `KeyError` exceptions. `traverse_obj` gracefully handles missing keys by returning `None`.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nuploader = traverse_obj(meta, ('user', 'name'))  # correct\n```\n\n----------------------------------------\n\nTITLE: Download best video with largest resolution under 480p (yt-dlp)\nDESCRIPTION: Downloads the best video available with the largest resolution but no better than 480p, or the best video with the smallest resolution if there is no video under 480p. `res:480` sets the maximum resolution.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"res:480\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Multiple Formats with yt-dlp\nDESCRIPTION: This command downloads multiple formats of the same video using a comma as a separator. All specified formats will be downloaded if they are available. It can be combined with the precedence feature to create more sophisticated format selections.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_37\n\nLANGUAGE: None\nCODE:\n```\n-f 22,17,18\n```\n\nLANGUAGE: None\nCODE:\n```\n-f 136/137/mp4/bestvideo,140/m4a/bestaudio\n```\n\n----------------------------------------\n\nTITLE: Download smallest video available (yt-dlp)\nDESCRIPTION: Downloads the smallest video available using the `-S` option, sorting by filesize and bitrate in ascending order. `+size,+br` ensures the smallest file size is prioritized.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"+size,+br\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Iteration with traverse_obj\nDESCRIPTION: This example shows a simplified and safer way to iterate over nested data using `traverse_obj`, preventing potential `TypeError` exceptions when the data might be missing. It only yields objects that contain a 'url' key.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nthumbnails = [{\n    'url': item['url'],\n    'height': item.get('h'),\n} for item in traverse_obj(data, ('thumbnails', lambda _, v: v['url']))]\n```\n\n----------------------------------------\n\nTITLE: Download best video with best protocol (yt-dlp)\nDESCRIPTION: Downloads the best video available via the best protocol, where the best protocol is defined as https/ftps > http/ftp > m3u8_native > m3u8 > http_dash_segments. This uses format sorting.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"proto\"\n```\n\n----------------------------------------\n\nTITLE: yt-dlp Output and Thumbnail Template Example\nDESCRIPTION: This example shows how to set different output templates for the video and its thumbnail using the `-o` option. The video is saved with a filename based on its title and extension, while the thumbnail is saved in a folder named after the video.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n-o \"%(title)s.%(ext)s\" -o \"thumbnail:%(title)s\\%(title)s.%(ext)s\"\n```\n\n----------------------------------------\n\nTITLE: Using --netrc-cmd with gpg for Authentication (bash)\nDESCRIPTION: This example demonstrates how to use the `--netrc-cmd` option to decrypt an encrypted .netrc file (`.authinfo.gpg`) using `gpg`. This enhances security by storing credentials in an encrypted format.  The command decrypts the file on the fly when yt-dlp requires the credentials.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyt-dlp --netrc-cmd 'gpg --decrypt ~/.authinfo.gpg' 'https://www.youtube.com/watch?v=BaW_jenozKc'\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA checksums using GPG\nDESCRIPTION: This snippet demonstrates how to verify the SHA256 and SHA512 checksums of the yt-dlp release files using GPG.  It first imports the public key, then uses the `gpg --verify` command to check the signatures against the checksum files. This ensures the integrity and authenticity of the downloaded files.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/yt-dlp/yt-dlp/raw/master/public.key | gpg --import\ngpg --verify SHA2-256SUMS.sig SHA2-256SUMS\ngpg --verify SHA2-512SUMS.sig SHA2-512SUMS\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Extractors - Python\nDESCRIPTION: This script creates lazy extractors to improve the startup performance of yt-dlp binaries.  Running this script before building is recommended.  The YTDLP_NO_LAZY_EXTRACTORS environment variable can be set to disable lazy extractor loading.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython3 devscripts/make_lazy_extractors.py\n```\n\n----------------------------------------\n\nTITLE: Download best video with h264/h265 codec (yt-dlp)\nDESCRIPTION: Downloads the best video with either h264 or h265 codec, or the best video if there is no such video. This uses a regex to match vcodec against the desired codec types.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"(bv*[vcodec~='^((he|a)vc|h26[45])']+ba) / (bv*+ba/b)\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Securing .netrc File (bash)\nDESCRIPTION: This snippet demonstrates how to create a .netrc file and set its permissions to restrict access, enhancing security. This ensures only the user can read and write to the file, which stores sensitive credentials.  It uses `touch` to create the file and `chmod` to modify the file permissions.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntouch ${HOME}/.netrc\nchmod a-rwx,u+rw ${HOME}/.netrc\n```\n\n----------------------------------------\n\nTITLE: Building with PyInstaller - Python\nDESCRIPTION: This command uses the bundle.pyinstaller script to build the standalone executable of yt-dlp using pyinstaller.  It accepts arguments that can be passed to pyinstaller, such as --onefile or --onedir. Using `python -m bundle.pyinstaller` is the official and supported way to use PyInstaller.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython3 -m bundle.pyinstaller\n```\n\n----------------------------------------\n\nTITLE: Download best video with largest height under 480p (yt-dlp)\nDESCRIPTION: Downloads the best video available with the largest height but no better than 480p, or the best video with the smallest resolution if there is no video under 480p. `height:480` specifies the maximum height.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"height:480\"\n```\n\n----------------------------------------\n\nTITLE: Safely Extracting Data from a Dictionary\nDESCRIPTION: This snippet shows the correct way to extract data from a dictionary in yt-dlp, using the `.get()` method to avoid `KeyError` exceptions if the key is missing.  This is especially important for optional metadata fields.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndescription = meta.get('summary')  # correct\n```\n\n----------------------------------------\n\nTITLE: Creating a new extractor template\nDESCRIPTION: Creates a new extractor using a simple template. This template includes the basic structure for a new extractor, including the necessary imports, class definition, URL pattern, and test data. Replace YourExtractor with the actual name you have chosen for your extractor.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom .common import InfoExtractor\n\n\nclass YourExtractorIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?yourextractor\\.com/watch/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://yourextractor.com/watch/42',\n        'md5': 'TODO: md5 sum of the first 10241 bytes of the video file (use --test)',\n        'info_dict': {\n            # For videos, only the 'id' and 'ext' fields are required to RUN the test:\n            'id': '42',\n            'ext': 'mp4',\n            # Then if the test run fails, it will output the missing/incorrect fields.\n            # Properties can be added as:\n            # * A value, e.g.\n            #     'title': 'Video title goes here',\n            # * MD5 checksum; start the string with 'md5:', e.g.\n            #     'description': 'md5:098f6bcd4621d373cade4e832627b4f6',\n            # * A regular expression; start the string with 're:', e.g.\n            #     'thumbnail': r're:https?://.*\\.jpg$',\n            # * A count of elements in a list; start the string with 'count:', e.g.\n            #     'tags': 'count:10',\n            # * Any Python type, e.g.\n            #     'view_count': int,\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        # TODO more code goes here, for example ...\n        title = self._html_search_regex(r'<h1>(.+?)</h1>', webpage, 'title')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'uploader': self._search_regex(r'<div[^>]+id=\"uploader\"[^>]*>([^<]+)<', webpage, 'uploader', fatal=False),\n            # TODO more properties (see yt_dlp/extractor/common.py)\n        }\n```\n\n----------------------------------------\n\nTITLE: Selecting a Format by File Extension with yt-dlp\nDESCRIPTION: This command downloads the best quality format of a specific file extension served as a single file. The supported file extensions are 3gp, aac, flv, m4a, mp3, mp4, ogg, wav, and webm.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_32\n\nLANGUAGE: None\nCODE:\n```\n-f webm\n```\n\n----------------------------------------\n\nTITLE: YouTube .netrc Entry Example\nDESCRIPTION: An example demonstrating how to configure a YouTube account inside the .netrc file. Substitute `myaccount@gmail.com` and `my_youtube_password` with your actual credentials. This entry tells yt-dlp how to automatically log in to YouTube.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_12\n\nLANGUAGE: None\nCODE:\n```\nmachine youtube login myaccount@gmail.com password my_youtube_password\n```\n\n----------------------------------------\n\nTITLE: Download best video via HTTP/HTTPS (yt-dlp)\nDESCRIPTION: Downloads the best video available via direct link over HTTP/HTTPS protocol, or the best video available via any protocol if there is no such video. This uses format selection filters for protocol.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"(bv*+ba/b)[protocol^=http][protocol!*=dash] / (bv*+ba/b)\"\n```\n\n----------------------------------------\n\nTITLE: Download best video under 50MB (yt-dlp)\nDESCRIPTION: Downloads the best video (that also has audio) but no bigger than 50 MB, or the worst video (that also has audio) if there is no video under 50 MB using format selection.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"b[filesize<50M] / w\"\n```\n\n----------------------------------------\n\nTITLE: Searching Webpage Content with Regular Expressions\nDESCRIPTION: This code snippet demonstrates how to use the `_search_regex` method with `fatal=False` to extract optional data from a webpage.  Setting `fatal=False` prevents the extraction process from halting if the regex doesn't find a match.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndescription = self._search_regex(\n    r'<span[^>]+id=\"title\"[^>]*>([^<]+)<',\n    webpage, 'description', fatal=False)\n```\n\n----------------------------------------\n\nTITLE: Installing Editable Version with Dependencies\nDESCRIPTION: This command installs an editable version of yt-dlp along with its default and development dependencies.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m pip install -e \".[default,dev]\"\n```\n\n----------------------------------------\n\nTITLE: Download largest video under 50MB (yt-dlp)\nDESCRIPTION: Downloads the largest video (that also has audio) but no bigger than 50 MB, or the smallest video (that also has audio) if there is no video under 50 MB. Uses format sorting rather than format selection.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"b\" -S \"filesize:50M\"\n```\n\n----------------------------------------\n\nTITLE: Correct Regular Expression: Specificity and Quantifiers\nDESCRIPTION: This code demonstrates the correct way to use specific characters and quantifiers in regular expressions, preventing over-matching and potential catastrophic backtracking. `[^<]+` is preferred over `.+?`.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ntitle = self._search_regex(r'<span\\b[^>]+class=\"title\"[^>]*>([^<]+)', webpage, 'title')\n```\n\n----------------------------------------\n\nTITLE: Installing PyInstaller Dependencies - Python\nDESCRIPTION: This script installs the dependencies, including pyinstaller, required for building the yt-dlp executable.  It handles package management and ensures the necessary tools are available.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython3 devscripts/install_deps.py --include pyinstaller\n```\n\n----------------------------------------\n\nTITLE: Download best video with h264 or better codec (yt-dlp)\nDESCRIPTION: Downloads the best video with worst codec no worse than h264, or the best video with best codec if there is no such video. Uses format sorting with codec and a minimum preference.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"+codec:h264\"\n```\n\n----------------------------------------\n\nTITLE: Correct Regular Expression: Minimal Complexity\nDESCRIPTION: This code demonstrates the correct way to construct regular expressions, using the simplest possible expression that still fulfills the requirements.  Each part of the regex should have a specific purpose.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n_VALID_URL = r'https?://(?:www\\.)?website\\.com/(?:[^/]+/){3,4}(?P<display_id>[^/]+)_(?P<id>\\d+)'\n```\n\n----------------------------------------\n\nTITLE: Adding and committing changes\nDESCRIPTION: Adds the new extractor files to the git repository, commits the changes with a descriptive message, and pushes the branch to the remote repository. Replace yourextractor with the actual name of your extractor.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ git add yt_dlp/extractor/_extractors.py\n$ git add yt_dlp/extractor/yourextractor.py\n$ git commit -m '[yourextractor] Add extractor'\n$ git push origin yourextractor\n```\n\n----------------------------------------\n\nTITLE: Downloading Series Season with Nested Directories in yt-dlp\nDESCRIPTION: This example demonstrates how to download an entire series season, creating nested directories for each series and season. It uses custom output paths and template variables like `series`, `season_number`, `season`, `episode_number`, and `episode` to structure the downloads.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# Download entire series season keeping each series and each season in separate directory under C:/MyVideos\n$ yt-dlp -P \"C:/MyVideos\" -o \"%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s\" \"https://videomore.ru/kino_v_detalyah/5_sezon/367617\"\n```\n\n----------------------------------------\n\nTITLE: Correct Regular Expression: Flexible Matching\nDESCRIPTION: This example illustrates a correct way to write flexible regular expressions that tolerate minor variations in the input. The expression accounts for variations in attributes while capturing desired data, using named groups for clarity.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ntitle = self._search_regex(  # correct\n    r'<span[^>]+class=\"title\"[^>]*>([^<]+)', webpage, 'title')\n```\n\nLANGUAGE: python\nCODE:\n```\ntitle = self._search_regex(  # correct\n    r'<span[^>]+class=([\"\\'])title\\1[^>]*>(?P<title>[^<]+)',\n    webpage, 'title', group='title')\n```\n\n----------------------------------------\n\nTITLE: Creating a new git branch\nDESCRIPTION: Creates a new git branch for your new extractor.  This keeps your changes isolated from the main development branch. Replace yourextractor with the name of your extractor.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ cd yt-dlp\n$ git checkout -b yourextractor\n```\n\n----------------------------------------\n\nTITLE: Download using info-json Python\nDESCRIPTION: This snippet shows how to download a video using a pre-existing info-json file. It initializes a YoutubeDL object and uses the `download_with_info_file` method to download the video.  The snippet checks for errors during the download process and prints a message indicating success or failure. Dependency: yt_dlp.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nimport yt_dlp\n\nINFO_FILE = 'path/to/video.info.json'\n\nwith yt_dlp.YoutubeDL() as ydl:\n    error_code = ydl.download_with_info_file(INFO_FILE)\n\nprint('Some videos failed to download' if error_code\n      else 'All videos successfully downloaded')\n```\n\n----------------------------------------\n\nTITLE: Collapsing Fallback Values (Good)\nDESCRIPTION: This example showcases a clean method for using a list of fallback values via the `_html_search_meta` function. It supports a list of keys, making the code concise and readable.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndescription = self._html_search_meta(\n    ['og:description', 'description', 'twitter:description'],\n    webpage, 'description', default=None)\n```\n\n----------------------------------------\n\nTITLE: Twitch .netrc Entry Example\nDESCRIPTION: This example illustrates the format for storing Twitch credentials in the .netrc file. Replace `my_twitch_account_name` and `my_twitch_password` with your actual Twitch username and password. This enables yt-dlp to automatically authenticate with Twitch.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_13\n\nLANGUAGE: None\nCODE:\n```\nmachine twitch login my_twitch_account_name password my_twitch_password\n```\n\n----------------------------------------\n\nTITLE: Interactive Format Selection with yt-dlp\nDESCRIPTION: This command allows the user to interactively provide the format selector for each video being downloaded. It is useful when different videos have different available formats and the desired format is not known in advance.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_33\n\nLANGUAGE: None\nCODE:\n```\n-f -\n```\n\n----------------------------------------\n\nTITLE: Correct Regular Expression: Non-Capturing Groups\nDESCRIPTION: This snippet demonstrates the correct use of non-capturing groups `(?:...)` in regular expressions.  Unnecessary capturing groups should be avoided for clarity and efficiency.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nr'(?:id|ID)=(?P<id>\\d+)'\n```\n\n----------------------------------------\n\nTITLE: yt-dlp Thumbnail Template Example\nDESCRIPTION: This example demonstrates how to disable thumbnail writing for videos but enable it for playlists. By setting the thumbnail template to empty, thumbnails will only be written for playlists.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n--write-thumbnail -o \"thumbnail:\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Format Selectors with yt-dlp\nDESCRIPTION: This command groups format selectors using parentheses to download the best pre-merged mp4 and webm formats with a height lower than 480.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_43\n\nLANGUAGE: None\nCODE:\n```\n-f \"(mp4,webm)[height<480]\"\n```\n\n----------------------------------------\n\nTITLE: Further Simplification of Iteration with traverse_obj\nDESCRIPTION: This code shows how `traverse_obj` can be used to simplify the extraction of a list of thumbnails, mapping the original keys to the new info dict keys. It provides a concise and readable way to handle optional data.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nthumbnails = traverse_obj(data, ('thumbnails', ..., {'url': 'url', 'height': 'h'}))\n```\n\n----------------------------------------\n\nTITLE: Cloning yt-dlp repository\nDESCRIPTION: Clones the yt-dlp repository to your local machine. Replace YOUR_GITHUB_USERNAME with your actual GitHub username.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:YOUR_GITHUB_USERNAME/yt-dlp.git\n```\n\n----------------------------------------\n\nTITLE: Install Nightly Channel (pip)\nDESCRIPTION: This command installs the nightly release of yt-dlp using pip. It is the recommended way to install or update yt-dlp to the nightly channel. It leverages pip's `--pre` flag to install pre-release versions.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m pip install -U --pre \"yt-dlp[default]\"\n```\n\n----------------------------------------\n\nTITLE: Downloading JSON Data with yt-dlp\nDESCRIPTION: This code demonstrates how to download JSON data using the `_download_json` method in yt-dlp.  It fetches data from a specified URL, associating it with a video ID. The function is used to retrieve structured metadata for further processing.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmeta = self._download_json(url, video_id)\n```\n\n----------------------------------------\n\nTITLE: Running Hatch Setup\nDESCRIPTION: This command installs a pre-commit hook that performs linting and formatting checks before each commit. If any issues are found, the commit will be blocked, and the necessary changes will be made.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hatch run setup\n```\n\n----------------------------------------\n\nTITLE: Example .netrc Credentials Configuration\nDESCRIPTION: This example shows how to format credentials within the .netrc file for YouTube and Twitch extractors. Replace `<extractor>`, `<username>`, and `<password>` with the appropriate values. The extractor name should be in lowercase.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_11\n\nLANGUAGE: None\nCODE:\n```\nmachine <extractor> login <username> password <password>\n```\n\n----------------------------------------\n\nTITLE: Configuration File Encoding Declaration\nDESCRIPTION: This snippet shows how to declare the encoding of a yt-dlp configuration file, useful when the default encoding is not sufficient. It must be the first line of the file.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n# coding: ENCODING\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Manually\nDESCRIPTION: These commands format the code using ruff and autopep8.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ ruff check --fix .\n$ autopep8 --in-place .\n```\n\n----------------------------------------\n\nTITLE: Netscape HTTP Cookie File Format\nDESCRIPTION: Demonstrates the structure and syntax of a Netscape HTTP Cookie file. It includes examples of how cookies are stored, including attributes like domain, path, secure flag, expiration timestamp, name, and value.  The file includes examples of both HTTPOnly and regular (JS accessible) cookies.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/test/testdata/cookies/httponly_cookies.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Netscape HTTP Cookie File\n# http://curl.haxx.se/rfc/cookie_spec.html\n# This is a generated file!  Do not edit.\n\n#HttpOnly_www.foobar.foobar\tFALSE\t/\tTRUE\t2147483647\tHTTPONLY_COOKIE\tHTTPONLY_COOKIE_VALUE\nwww.foobar.foobar\tFALSE\t/\tTRUE\t2147483647\tJS_ACCESSIBLE_COOKIE\tJS_ACCESSIBLE_COOKIE_VALUE\n```\n\n----------------------------------------\n\nTITLE: yt-dlp Single File Download Example\nDESCRIPTION: This command downloads a single video file from the specified URL and saves it with the name 'funny_video.flv'. Note that hard-coding the file extension is not recommended.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyt-dlp -o funny_video.flv \"https://some/video\"\n```\n\n----------------------------------------\n\nTITLE: yt-dlp Verbose Output Command\nDESCRIPTION: This code snippet shows how to run yt-dlp with verbose output and update flag (`-vU`). The output contains debugging information and is essential for bug reports.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yt-dlp -vU <your command line>\n```\n\n----------------------------------------\n\nTITLE: Checking Code Manually\nDESCRIPTION: These commands check the code for style issues using ruff and autopep8 without applying fixes.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ ruff check .\n$ autopep8 --diff .\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Format by ID with yt-dlp\nDESCRIPTION: This command downloads a specific format from a video using its format ID. The format ID can be obtained using `--list-formats` or `-F` options. The selected format depends on the available formats provided by the extractor for the specific video.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_31\n\nLANGUAGE: None\nCODE:\n```\n-f 22\n```\n\n----------------------------------------\n\nTITLE: Example yt-dlp Verbose Output\nDESCRIPTION: This code snippet presents an example of the verbose output generated by yt-dlp when run with the `-vU` flag. It includes version information, Python details, optional libraries, and debugging information.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[debug] Command-line config: ['-vU', 'https://www.example.com/']\n[debug] Encodings: locale cp65001, fs utf-8, pref cp65001, out utf-8, error utf-8, screen utf-8\n[debug] yt-dlp version nightly@... from yt-dlp/yt-dlp-nightly-builds [1a176d874] (win_exe)\n[debug] Python 3.10.11 (CPython AMD64 64bit) - Windows-10-10.0.20348-SP0 (OpenSSL 1.1.1t  7 Feb 2023)\n[debug] exe versions: ffmpeg 7.0.2 (setts), ffprobe 7.0.2\n[debug] Optional libraries: Cryptodome-3.21.0, brotli-1.1.0, certifi-2024.08.30, curl_cffi-0.5.10, mutagen-1.47.0, requests-2.32.3, sqlite3-3.40.1, urllib3-2.2.3, websockets-13.1\n[debug] Proxy map: {}\n[debug] Request Handlers: urllib, requests, websockets, curl_cffi\n[debug] Loaded 1838 extractors\n[debug] Fetching release info: https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest\nLatest version: nightly@... from yt-dlp/yt-dlp-nightly-builds\nyt-dlp is up to date (nightly@... from yt-dlp/yt-dlp-nightly-builds)\n...\n```\n\n----------------------------------------\n\nTITLE: Building Platform-Independent Binary - Makefile\nDESCRIPTION: This command builds a platform-independent yt-dlp binary using the make utility. It requires build tools such as python, zip, make, pandoc, and pytest.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Printing Filename with Title and Extension in yt-dlp\nDESCRIPTION: This example demonstrates how to use yt-dlp to print the filename using the video title and extension. It shows how to incorporate metadata fields into the output filename using template variables.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --print filename -o \"%(title)s.%(ext)s\" BaW_jenozKc\nyoutube-dl test video ''_ä↭𝕐.webm    # All kinds of weird characters\n```\n\n----------------------------------------\n\nTITLE: Checking code formatting\nDESCRIPTION: Checks the code formatting of your extractor using hatch fmt. This ensures that your code follows the yt-dlp coding conventions.  It is crucial to pass this before submitting your changes. --check argument fails if there are formatting issues.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ hatch fmt --check\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Do not set synopsis (Bash)\nDESCRIPTION: This command removes the synopsis metadata field by setting it to an empty string. This effectively prevents any synopsis from being written to the media file's metadata. The `:\"\"` part sets the corresponding field to an empty string.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \":(?P<meta_synopsis>)\"\n```\n\n----------------------------------------\n\nTITLE: Printing Filename with Literal Name and Extension in yt-dlp\nDESCRIPTION: This example demonstrates how to use yt-dlp to print the filename of a video while specifying a literal name and extension in the output template. It showcases basic output template usage with a fixed filename and the correct extension.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --print filename -o \"test video.%(ext)s\" BaW_jenozKc\ntest video.webm    # Literal name with correct extension\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hook\nDESCRIPTION: This command installs the pre-commit hook to ensure code quality and style consistency.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Not Recommended Option Aliases in yt-dlp\nDESCRIPTION: This snippet documents yt-dlp options that are not recommended for use and lists their preferred alternatives. These options are still functional but there are better alternatives. The options involve forcing generic extractors, executing commands before download, handling formats and subtitles, printing JSON, autonumbering, metadata parsing, HLS preferences, listing formats, skipping DASH/HLS manifests, GEO bypassing, and more.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_85\n\nLANGUAGE: Text\nCODE:\n```\n--force-generic-extractor        --ies generic,default\n--exec-before-download CMD       --exec \"before_dl:CMD\"\n--no-exec-before-download        --no-exec\n--all-formats                    -f all\n--all-subs                       --sub-langs all --write-subs\n--print-json                     -j --no-simulate\n--autonumber-size NUMBER         Use string formatting, e.g. %(autonumber)03d\n--autonumber-start NUMBER        Use internal field formatting like %(autonumber+NUMBER)s\n--id                             -o \"%(id)s.%(ext)s\"\n--metadata-from-title FORMAT     --parse-metadata \"%(title)s:FORMAT\"\n--hls-prefer-native              --downloader \"m3u8:native\"\n--hls-prefer-ffmpeg              --downloader \"m3u8:ffmpeg\"\n--list-formats-old               --compat-options list-formats (Alias: --no-list-formats-as-table)\n--list-formats-as-table          --compat-options -list-formats [Default] (Alias: --no-list-formats-old)\n--youtube-skip-dash-manifest     --extractor-args \"youtube:skip=dash\" (Alias: --no-youtube-include-dash-manifest)\n--youtube-skip-hls-manifest      --extractor-args \"youtube:skip=hls\" (Alias: --no-youtube-include-hls-manifest)\n--youtube-include-dash-manifest  Default (Alias: --no-youtube-skip-dash-manifest)\n--youtube-include-hls-manifest   Default (Alias: --no-youtube-skip-hls-manifest)\n--geo-bypass                     --xff \"default\"\n--no-geo-bypass                  --xff \"never\"\n--geo-bypass-country CODE        --xff CODE\n--geo-bypass-ip-block IP_BLOCK   --xff IP_BLOCK\n```\n\n----------------------------------------\n\nTITLE: Prefixing Playlist Index with Separator in yt-dlp\nDESCRIPTION: This example demonstrates how to conditionally prefix the playlist index with a separator ( \" - \") only when it is available. It uses the `%(playlist_index&{} - |)s` template to handle cases where playlist index might not be present.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# Prefix playlist index with \" - \" separator, but only if it is available\n$ yt-dlp -o \"%(playlist_index&{} - |)s%(title)s.%(ext)s\" BaW_jenozKc \"https://www.youtube.com/user/TheLinuxFoundation/playlists\"\n```\n\n----------------------------------------\n\nTITLE: Download best video with best extension (yt-dlp)\nDESCRIPTION: Downloads the best video with the best extension. The `-S \"ext\"` option sorts formats based on extension, prioritizing mp4, mov, webm, and flv for video, and m4a, aac, mp3 for audio.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -S \"ext\"\n```\n\n----------------------------------------\n\nTITLE: Trailing Parentheses (Correct - Multiline)\nDESCRIPTION: This example demonstrates the correct placement of trailing parentheses for grouping/functions when the arguments are written on multiple lines, keeping the closing parenthesis aligned with the opening one.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nurl = traverse_obj(\n    info,\n    ('context', 'dispatcher', 'stores', 'VideoTitlePageStore', 'data', 'video', 0, 'VideoUrlSet', 'VideoUrl'),\n    list)\n```\n\n----------------------------------------\n\nTITLE: Redundant Option Aliases in yt-dlp\nDESCRIPTION: This snippet documents redundant options in yt-dlp and their equivalent alternatives. These options are still functional but can be replaced with the suggested alternatives for better clarity or compatibility. They primarily involve printing information, matching titles, setting view limits, user agent, referer, playlist options, and disabling colors.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_84\n\nLANGUAGE: Text\nCODE:\n```\n--get-description                --print description\n--get-duration                   --print duration_string\n--get-filename                   --print filename\n--get-format                     --print format\n--get-id                         --print id\n--get-thumbnail                  --print thumbnail\n-e, --get-title                  --print title\n-g, --get-url                    --print urls\n--match-title REGEX              --match-filters \"title ~= (?i)REGEX\"\n--reject-title REGEX             --match-filters \"title !~= (?i)REGEX\"\n--min-views COUNT                --match-filters \"view_count >=? COUNT\"\n--max-views COUNT                --match-filters \"view_count <=? COUNT\"\n--break-on-reject                Use --break-match-filters\n--user-agent UA                  --add-headers \"User-Agent:UA\"\n--referer URL                    --add-headers \"Referer:URL\"\n--playlist-start NUMBER          -I NUMBER:\n--playlist-end NUMBER            -I :NUMBER\n--playlist-reverse               -I ::-1\n--no-playlist-reverse            Default\n--no-colors                      --color no_color\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Replace spaces and underscores (Bash)\nDESCRIPTION: This command replaces all spaces and underscores in the title and uploader fields with hyphens. It utilizes the `--replace-in-metadata` option with a regular expression that matches either a space or an underscore. It applies this replacement to both the 'title' and 'uploader' fields.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --replace-in-metadata \"title,uploader\" \"[ _]\" \"-\"\n```\n\n----------------------------------------\n\nTITLE: Correct Line Length: Single Line Code\nDESCRIPTION: This snippet demonstrates how to keep a single, short line of code on one line, instead of splitting it across multiple lines.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nuploader = traverse_obj(info, ('uploader', 'name'), ('author', 'fullname'))\n```\n\n----------------------------------------\n\nTITLE: Old Aliases in yt-dlp\nDESCRIPTION: This snippet lists older aliases of yt-dlp options that are no longer documented and the current equivalents. These aliases have been updated or replaced by newer options. The old aliases involve options such as avconv location, clean infojson, CN verification proxy, dump headers, force write download archive, load info, prefer unsecure, rate limit, split tracks, SRT language, and trim file names.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_87\n\nLANGUAGE: Text\nCODE:\n```\n--avconv-location                --ffmpeg-location\n--clean-infojson                 --clean-info-json\n--cn-verification-proxy URL      --geo-verification-proxy URL\n--dump-headers                   --print-traffic\n--dump-intermediate-pages        --dump-pages\n--force-write-download-archive   --force-write-archive\n--load-info                      --load-info-json\n--no-clean-infojson              --no-clean-info-json\n--no-split-tracks                --no-split-chapters\n--no-write-srt                   --no-write-subs\n--prefer-unsecure                --prefer-insecure\n--rate-limit RATE                --limit-rate RATE\n--split-tracks                   --split-chapters\n--srt-lang LANGS                 --sub-langs LANGS\n--trim-file-names LENGTH         --trim-filenames LENGTH\n--write-srt                      --write-subs\n--yes-overwrites                 --force-overwrites\n```\n\n----------------------------------------\n\nTITLE: Download best video and all audio streams (yt-dlp)\nDESCRIPTION: Downloads and merges the best format that has a video stream and all audio-only formats into one file. The `--audio-multistreams` option is required to merge multiple audio streams.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv*+mergeall[vcodec=none]\" --audio-multistreams\n```\n\n----------------------------------------\n\nTITLE: Searching Webpage Content with Regular Expressions and Default Value\nDESCRIPTION: This example shows how to use the `_search_regex` method with `default=None` to provide a fallback value when the regex fails to find a match.  This is useful for optional metadata fields.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndescription = self._search_regex(\n    r'<span[^>]+id=\"title\"[^>]*>([^<]+)<',\n    webpage, 'description', default=None)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Line Length: Unnecessary Splits\nDESCRIPTION: This snippet shows an example of an unnecessary split of a string literal over multiple lines. Short strings should be kept on a single line for readability.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n'https://www.youtube.com/watch?v=FqZTN594JQw&list='\n'PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4'\n```\n\n----------------------------------------\n\nTITLE: Selecting Worst Quality Video-Only Format with yt-dlp\nDESCRIPTION: This command downloads the worst quality video-only format. It is generally recommended to use `-S +size` or `-S +size,+br,+res,+fps` instead of `-f worstvideo` for more control over the selection criteria.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_34\n\nLANGUAGE: None\nCODE:\n```\n-f worstvideo\n```\n\n----------------------------------------\n\nTITLE: Selecting the n'th Best Format with yt-dlp\nDESCRIPTION: This command downloads the n'th best format of a specific type.  For example, `best.2` selects the 2nd best combined format, and `bv*.3` selects the 3rd best format containing a video stream.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_35\n\nLANGUAGE: None\nCODE:\n```\nbest.2\n```\n\nLANGUAGE: None\nCODE:\n```\nbv*.3\n```\n\n----------------------------------------\n\nTITLE: Adding Custom PostProcessor Python\nDESCRIPTION: This snippet demonstrates how to add a custom postprocessor to yt-dlp. It defines a `MyCustomPP` class that inherits from `yt_dlp.postprocessor.PostProcessor` and overrides the `run` method. This postprocessor is then added to the YoutubeDL object using the `add_post_processor` method. Dependency: yt_dlp.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nimport yt_dlp\n\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\n\n# ℹ️ See help(yt_dlp.postprocessor.PostProcessor)\nclass MyCustomPP(yt_dlp.postprocessor.PostProcessor):\n    def run(self, info):\n        self.to_screen('Doing stuff')\n        return [], info\n\n\nwith yt_dlp.YoutubeDL() as ydl:\n    # ℹ️ \"when\" can take any value in yt_dlp.utils.POSTPROCESS_WHEN\n    ydl.add_post_processor(MyCustomPP(), when='pre_process')\n    ydl.download(URLS)\n```\n\n----------------------------------------\n\nTITLE: Correct Line Length: Avoiding Splits\nDESCRIPTION: This snippet shows an example of how to keep strings on a single line when their length is within reasonable limits, adhering to the line length policy.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n'https://www.youtube.com/watch?v=FqZTN594JQw&list=PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4'\n```\n\n----------------------------------------\n\nTITLE: Download best video under 480p (yt-dlp)\nDESCRIPTION: Downloads the best video available but no better than 480p, or the worst video if there is no video under 480p. This example uses the older format selection method.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"bv*[height<=480]+ba/b[height<=480] / wv*+ba/w\"\n```\n\n----------------------------------------\n\nTITLE: Generate Client Certificate (openssl, sh)\nDESCRIPTION: This shell snippet generates client certificates and keys, including an encrypted version. It first creates an ECDSA key, encrypts it with AES256 using the password 'foobar', and then generates a certificate signing request. Finally, it signs the request using the CA to create the client certificate and appends the client keys to the certificate files for combined certificate and key usage.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/test/testdata/certificate/instructions.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nopenssl ecparam -name prime256v1 -genkey -noout -out client.key\nopenssl ec -in client.key -out clientencrypted.key -passout pass:foobar -aes256\nopenssl req -new -sha256 -key client.key -out client.csr -subj \"/CN=ytdlptest2\"\nopenssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 6027 -sha256\ncp client.crt clientwithkey.crt\ncp client.crt clientwithencryptedkey.crt\ncat client.key >> clientwithkey.crt\ncat clientencrypted.key >> clientwithencryptedkey.crt\n```\n\n----------------------------------------\n\nTITLE: Quotes: Using Single Quotes for Strings\nDESCRIPTION: This describes the convention of using single quotes for strings and double quotes for docstrings within the project.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Download video closest to 50MB (yt-dlp)\nDESCRIPTION: Downloads the best video (that also has audio) that is closest in size to 50 MB. `filesize~50M` prefers formats with a filesize closest to 50 MB.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"b\" -S \"filesize~50M\"\n```\n\n----------------------------------------\n\nTITLE: Update to Nightly Channel (yt-dlp)\nDESCRIPTION: This command updates yt-dlp to the nightly release channel. It is used when the user has a stable executable/binary. This provides access to the latest fixes and features, though it may be less stable.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyt-dlp --update-to nightly\n```\n\n----------------------------------------\n\nTITLE: Multiline Literal Dictionary (Correct)\nDESCRIPTION: This example shows the correct way to define a multi-line literal dictionary, ensuring the closing curly brace is on a new line.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nf = {\n    'url': url,\n    'format_id': format_id,\n}\n```\n\n----------------------------------------\n\nTITLE: List Comprehension (Correct - Multiline)\nDESCRIPTION: Demonstrates a correct way to write a multi-line list comprehension with the closing bracket on a new line.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nformats = [\n    process_formats(f) for f in format_data\n    if f.get('type') in ('hls', 'dash', 'direct') and f.get('downloadable')\n]\n```\n\n----------------------------------------\n\nTITLE: Correct Line Length: Multi-Line Function Call\nDESCRIPTION: This code illustrates the correct way to split a long function call across multiple lines for readability, adhering to the line length policy. However, unnecessary splits should be avoided. The goal is to break up long parameter lists or expressions for clarity.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nformats = self._extract_m3u8_formats(\n    m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls',\n    note='Downloading HD m3u8 information', errnote='Unable to download HD m3u8 information')\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata: Remove formats from infojson (Bash)\nDESCRIPTION: This command removes the 'formats' field from the infojson file generated by yt-dlp. By setting the `formats` field to an empty string, it effectively excludes the formats information from the JSON output. The `--write-info-json` flag is used to generate the infojson file.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp --parse-metadata \"video::(?P<formats>)\" --write-info-json\n```\n\n----------------------------------------\n\nTITLE: Generate CA Certificate (openssl, sh)\nDESCRIPTION: This shell snippet generates a Certificate Authority (CA) key and certificate using openssl. It creates a prime256v1 ECDSA key, then creates a self-signed X.509 certificate valid for 6027 days. The certificate's subject is set to '/CN=ytdlptest'.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/test/testdata/certificate/instructions.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopenssl ecparam -name prime256v1 -genkey -noout -out ca.key\nopenssl req -new -x509 -sha256 -days 6027 -key ca.key -out ca.crt -subj \"/CN=ytdlptest\"\n```\n\n----------------------------------------\n\nTITLE: No Longer Supported Option Aliases in yt-dlp\nDESCRIPTION: This snippet lists yt-dlp options that are no longer supported and may not function as intended. These options have been removed or are no longer actively maintained. The options involve preferring avconv, calling home, including ads, writing annotations, and compat options.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_89\n\nLANGUAGE: Text\nCODE:\n```\n--prefer-avconv                  avconv is not officially supported by yt-dlp (Alias: --no-prefer-ffmpeg)\n--prefer-ffmpeg                  Default (Alias: --no-prefer-avconv)\n-C, --call-home                  Not implemented\n--no-call-home                   Default\n--include-ads                    No longer supported\n--no-include-ads                 Default\n--write-annotations              No supported site has annotations now\n--no-write-annotations           Default\n--compat-options seperate-video-versions  No longer needed\n--compat-options no-youtube-prefer-utc-upload-date  No longer supported\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: This command installs only the development dependencies required for yt-dlp.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m devscripts.install_deps --include dev\n```\n\n----------------------------------------\n\nTITLE: Removed Option Aliases in yt-dlp\nDESCRIPTION: This snippet lists yt-dlp options that have been deprecated since 2014 and are now entirely removed. The options involve auto numbering and setting a title/literal for output.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_90\n\nLANGUAGE: Text\nCODE:\n```\n-A, --auto-number                -o \"%(autonumber)s-%(id)s.%(ext)s\"\n-t, -l, --title, --literal       -o \"%(title)s-%(id)s.%(ext)s\"\n```\n\n----------------------------------------\n\nTITLE: Compiling yt-dlp Binary - Makefile\nDESCRIPTION: This command compiles only the yt-dlp binary without updating additional files. It requires python, zip, and make, but does not need pandoc and pytest.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_7\n\nLANGUAGE: Makefile\nCODE:\n```\nmake yt-dlp\n```\n\n----------------------------------------\n\nTITLE: Developer Options in yt-dlp\nDESCRIPTION: This snippet lists yt-dlp options intended for developers and not meant for regular users. These options are used for testing and debugging purposes. The options include testing, loading pages, printing youtube signature code, and allowing unplayable formats.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_86\n\nLANGUAGE: Text\nCODE:\n```\n--test                           Download only part of video for testing extractors\n--load-pages                     Load pages dumped by --write-pages\n--youtube-print-sig-code         For testing youtube signatures\n--allow-unplayable-formats       List unplayable formats also\n--no-allow-unplayable-formats    Default\n```\n\n----------------------------------------\n\nTITLE: Download worst video available (yt-dlp)\nDESCRIPTION: Downloads the worst video available using the old method of format selection. This is generally not recommended, as it often selects a very low-quality video.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n$ yt-dlp -f \"wv*+wa/w\"\n```\n\n----------------------------------------\n\nTITLE: Collapsing Fallback Values (Unwieldy)\nDESCRIPTION: This example shows an unwieldy way to handle multiple fallback values with chained `or` operators. The preferred approach uses a list of patterns instead.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndescription = (\n    self._og_search_description(webpage, default=None)\n    or self._html_search_meta('description', webpage, default=None)\n    or self._html_search_meta('twitter:description', webpage, default=None))\n```\n\n----------------------------------------\n\nTITLE: Sponskrub Option Aliases in yt-dlp\nDESCRIPTION: This snippet lists deprecated Sponskrub options and their corresponding `--sponsorblock` equivalents in yt-dlp. The Sponskrub integration has been superseded by native Sponsorblock support.  These options pertain to marking and removing sponsor segments in downloaded videos.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/README.md#_snippet_88\n\nLANGUAGE: Text\nCODE:\n```\n--sponskrub                      --sponsorblock-mark all\n--no-sponskrub                   --no-sponsorblock\n--sponskrub-cut                  --sponsorblock-remove all\n--no-sponskrub-cut               --sponsorblock-remove -all\n--sponskrub-force                Not applicable\n--no-sponskrub-force             Not applicable\n--sponskrub-location             Not applicable\n--sponskrub-args                 Not applicable\n```\n\n----------------------------------------\n\nTITLE: Incorrect Line Length: Excessive Multi-Line\nDESCRIPTION: This example presents an incorrect excessive splitting of a function call across multiple lines, hindering readability. The aim should be to make use of multi-line formatting only where it enhances clarity.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nformats = self._extract_m3u8_formats(m3u8_url,\n                                     video_id,\n                                     'mp4',\n                                     'm3u8_native',\n                                     m3u8_id='hls',\n                                     note='Downloading HD m3u8 information',\n                                     errnote='Unable to download HD m3u8 information')\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Iterating Over Data: Handling None Values\nDESCRIPTION: This code demonstrates an incorrect approach to iterating over potentially missing data, leading to a `TypeError` if `thumbnail_data` is `None`.  Directly iterating without a fallback will cause the script to crash.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nthumbnail_data = data.get('thumbnails')\nthumbnails = [{\n    'url': item['url'],\n    'height': item.get('h'),\n} for item in thumbnail_data]  # incorrect\n```\n\n----------------------------------------\n\nTITLE: Inline Value Assignment (Correct)\nDESCRIPTION: This example demonstrates the correct way to assign a value directly within a return statement for better code readability when the variable is only used once.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    'title': self._html_search_regex(r'<h1>([^<]+)</h1>', webpage, 'title'),\n    # ...some lines of code...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Extracting Data from a Dictionary\nDESCRIPTION: This code demonstrates the incorrect way to extract data from a dictionary, which will result in a `KeyError` if the key is not found.  It should be avoided when handling optional metadata.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndescription = meta['summary']  # incorrect\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Data: Handling None Values\nDESCRIPTION: This snippet illustrates how to safely iterate over a list that might be `None` by using `or []` to provide an empty list as a fallback. This prevents `TypeError` exceptions during iteration.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nthumbnail_data = data.get('thumbnails') or []\nthumbnails = [{\n    'url': item['url'],\n    'height': item.get('h'),\n} for item in thumbnail_data if item.get('url')]  # correct\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression: Over-Matching\nDESCRIPTION: This example illustrates the incorrect use of general quantifiers (like `.*`) in regular expressions, leading to over-matching and potentially catastrophic backtracking.  Specificity is key to efficient regex performance.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ntitle = self._search_regex(r'<span\\b.*class=\"title\".*>(.+?)<', webpage, 'title')\n```\n\n----------------------------------------\n\nTITLE: Running Tests Manually\nDESCRIPTION: This command runs the tests for yt-dlp without using hatch.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m devscripts.run_tests\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression: Excessive Complexity\nDESCRIPTION: This snippet illustrates an overly complex regular expression that can be simplified without losing functionality. Unnecessary complexity makes the regex harder to read and maintain.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n_VALID_URL = r'https?:\\/\\/(?:www\\.)?website\\.com\\/[^\\/]+\\/[^\\/]+\\/[^\\/]+(?:\\/[^\\/]+)?\\/(?P<display_id>[^\\/]+)_(?P<id>\\d+)'\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Extracting Nested Data\nDESCRIPTION: This snippet presents incorrect ways to access nested dictionary keys which would cause errors if any of the intermediate keys do not exist. Using direct indexing or nested `.get` calls is not robust.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nuploader = meta['user']['name']  # incorrect\n```\n\nLANGUAGE: python\nCODE:\n```\nuploader = meta.get('user', {}).get('name')  # incorrect\n```\n\nLANGUAGE: python\nCODE:\n```\nuploader = try_get(meta, lambda x: x['user']['name'])  # old utility\n```\n\n----------------------------------------\n\nTITLE: Incorrect Line Length: Unnecessary Multi-Line\nDESCRIPTION: This example shows the unnecessary splitting of a simple line of code onto multiple lines, reducing readability. Small lines should remain single lines.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nuploader = traverse_obj(\n    info,\n    ('uploader', 'name'),\n    ('author', 'fullname'))\n```\n\n----------------------------------------\n\nTITLE: Local parameters JSON example\nDESCRIPTION: Example of a `test/local_parameters.json` file for storing login credentials or other sensitive information for testing extractors that require authentication. This avoids hardcoding credentials in the extractor code.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"username\": \"your user name\",\n    \"password\": \"your password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML\nDESCRIPTION: This provides an HTML example that can be used to extract the \"title\" value from the \"span\" tag.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"position: absolute; left: 910px; width: 90px; float: right; z-index: 9999;\" class=\"title\">some fancy title</span>\n```\n\n----------------------------------------\n\nTITLE: Inline Value Assignment (Incorrect)\nDESCRIPTION: This example showcases an incorrect approach where a variable is extracted unnecessarily and used in a distant part of the code, reducing readability.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nTITLE_RE = r'<h1>([^<]+)</h1>'\n# ...some lines of code...\ntitle = self._html_search_regex(TITLE_RE, webpage, 'title')\n# ...some lines of code...\nreturn {\n    'title': title,\n    # ...some lines of code...\n}\n```\n\n----------------------------------------\n\nTITLE: Trailing Parentheses (Incorrect)\nDESCRIPTION: This example demonstrates the *incorrect* placement of trailing parentheses for grouping/functions when the arguments are written on multiple lines. The closing parenthesis should be on the same line as the last argument or indented to match the opening parenthesis.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nurl = traverse_obj(\n    info,\n    ('context', 'dispatcher', 'stores', 'VideoTitlePageStore', 'data', 'video', 0, 'VideoUrlSet', 'VideoUrl'),\n    list\n)\n```\n\n----------------------------------------\n\nTITLE: Multiline Literal Dictionary (Incorrect)\nDESCRIPTION: This example displays the incorrect method for creating multi-line dictionaries, where the closing curly brace isn't on a new line.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nf = {'url': url,\n     'format_id': format_id}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression: Strict Matching\nDESCRIPTION: This snippet illustrates an overly specific regular expression that is prone to failure if the input HTML changes even slightly.  It's important to write regexes that are flexible and resilient to minor variations.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ntitle = self._search_regex(  # incorrect\n    r'<span style=\"position: absolute; left: 910px; width: 90px; float: right; z-index: 9999;\" class=\"title\">(.*?)</span>',\n    webpage, 'title', group='title')\n```\n\nLANGUAGE: python\nCODE:\n```\ntitle = self._search_regex(  # incorrect\n    r'<span style=\".*?\" class=\"title\">(.*?)</span>',\n    webpage, 'title', group='title')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression: Capturing Groups\nDESCRIPTION: This code shows an incorrect regular expression using capturing groups where non-capturing groups should be used.  Capturing unnecessary groups can reduce performance and make the regex harder to read.\nSOURCE: https://github.com/yt-dlp/yt-dlp/blob/master/CONTRIBUTING.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nr'(id|ID)=(?P<id>\\d+)'\n```"
  }
]