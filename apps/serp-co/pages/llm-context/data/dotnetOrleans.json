[
  {
    "owner": "dotnet",
    "repo": "orleans",
    "content": "TITLE: Defining Thermostat Grain Interface in Orleans\nDESCRIPTION: Interface definition for a thermostat grain that handles device updates and returns commands. Demonstrates the basic grain contract pattern in Orleans using IGrainWithStringKey.\nSOURCE: https://github.com/dotnet/orleans/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IThermostat : IGrainWithStringKey\n{\n    Task<List<Command>> OnUpdate(ThermostatStatus update);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Thermostat Grain\nDESCRIPTION: Complete grain implementation class that implements both IThermostat and IThermostatControl interfaces, demonstrating state management and command handling.\nSOURCE: https://github.com/dotnet/orleans/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ThermostatGrain : Grain, IThermostat, IThermostatControl\n{\n    private ThermostatStatus _status;\n    private List<Command> _commands;\n\n    public Task<List<Command>> OnUpdate(ThermostatStatus status)\n    {\n        _status = status;\n        var result = _commands;\n        _commands = new List<Command>();\n        return Task.FromResult(result);\n    }\n    \n    public Task<ThermostatStatus> GetStatus() => Task.FromResult(_status);\n    \n    public Task UpdateConfiguration(ThermostatConfiguration config)\n    {\n        _commands.Add(new ConfigUpdateCommand(config));\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Thermostat Grain from Client\nDESCRIPTION: Example showing how to get a reference to a thermostat grain from an Orleans client and invoke its OnUpdate method.\nSOURCE: https://github.com/dotnet/orleans/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar thermostat = client.GetGrain<IThermostat>(id);\nreturn await thermostat.OnUpdate(update);\n```\n\n----------------------------------------\n\nTITLE: Defining Thermostat Control Interface\nDESCRIPTION: Secondary interface definition for thermostat control operations, showing how a grain can implement multiple interfaces.\nSOURCE: https://github.com/dotnet/orleans/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IThermostatControl : IGrainWithStringKey\n{\n    Task<ThermostatStatus> GetStatus();\n\n    Task UpdateConfiguration(ThermostatConfiguration config);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Project References in Orleans XML Configuration\nDESCRIPTION: Demonstrates the correct way to reference other projects within Orleans solutions using ProjectReference tags in XML project files. This approach ensures build relationships are properly tracked by build tools.\nSOURCE: https://github.com/dotnet/orleans/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ProjectReference Include=\"..\\Orleans\\Orleans.csproj\">\n    <Project>{BC1BD60C-E7D8-4452-A21C-290AEC8E2E74}</Project>\n    <Name>Orleans</Name>\n</ProjectReference>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Crank Controller Tool\nDESCRIPTION: Command to install the Microsoft Crank Controller tool globally using the .NET CLI. This tool is required for running distributed performance tests.\nSOURCE: https://github.com/dotnet/orleans/blob/main/test/DistributedTests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet tool install -g Microsoft.Crank.Controller --version 0.2.0-*\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Crank Agent Tool\nDESCRIPTION: Command to install the Microsoft Crank Agent tool globally using the .NET CLI. The agent is needed to execute the benchmarks on local or remote machines.\nSOURCE: https://github.com/dotnet/orleans/blob/main/test/DistributedTests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet tool install -g Microsoft.Crank.Agent --version \"0.2.0-*\"\n```\n\n----------------------------------------\n\nTITLE: Running Crank Test Scenario\nDESCRIPTION: Command to run a specific test scenario ('ping') with the 'local' profile as defined in the distributed-tests.yml configuration file. Must be executed from the repository root.\nSOURCE: https://github.com/dotnet/orleans/blob/main/test/DistributedTests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncrank --config .\\distributed-tests.yml --scenario ping --profile local \n```\n\n----------------------------------------\n\nTITLE: Creating NuGet.config for Orleans Nightly Builds\nDESCRIPTION: XML configuration for a NuGet.config file that adds the Orleans nightly build feed. This allows package managers to find and download Orleans packages from both the nightly feed and the official NuGet repository.\nSOURCE: https://github.com/dotnet/orleans/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear /> \n    <add key=\"orleans-nightly\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/orleans-nightly/nuget/v3/index.json\" />\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Orleans Nightly Builds in Project File\nDESCRIPTION: XML configuration to add the Orleans nightly build NuGet feed to a project file (.csproj). This enables using the latest nightly builds which pass all functional tests but aren't thoroughly tested as stable releases.\nSOURCE: https://github.com/dotnet/orleans/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <RestoreSources>\n    $(RestoreSources);\n    https://pkgs.dev.azure.com/dnceng/public/_packaging/orleans-nightly/nuget/v3/index.json\n  </RestoreSources>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Running Crank Agent\nDESCRIPTION: Command to start the Crank Agent on local machine, listening on all interfaces on port 5010. This needs to be run in a separate terminal window.\nSOURCE: https://github.com/dotnet/orleans/blob/main/test/DistributedTests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncrank-agent --url http://*:5010\n```\n\n----------------------------------------\n\nTITLE: Building Orleans in Release Mode\nDESCRIPTION: Command to build the Orleans project in Release configuration before running tests, ensuring optimal performance during benchmarking.\nSOURCE: https://github.com/dotnet/orleans/blob/main/test/DistributedTests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndotnet build -c Release\n```\n\n----------------------------------------\n\nTITLE: Warning Comment About Manual Edits in Orleans Configuration\nDESCRIPTION: A comment warning users not to manually edit the file as it should only be updated through automated code fix application processes. This helps maintain consistency in configuration or generated files.\nSOURCE: https://github.com/dotnet/orleans/blob/main/src/Orleans.Analyzers/AnalyzerReleases.Unshipped.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n; Please do not edit this file manually, it should only be updated through code fix application.\n```\n\n----------------------------------------\n\nTITLE: Incorrect DLL References in Orleans XML Configuration\nDESCRIPTION: Shows the incorrect way to reference Orleans projects using direct DLL references. This approach should be avoided as it doesn't properly maintain build relationships between components.\nSOURCE: https://github.com/dotnet/orleans/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Reference Include=\"Orleans\" >\n    <HintPath>..\\Orleans\\bin\\Debug\\Orleans.dll</HintPath>\n</Reference>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic's SVGs in HTML\nDESCRIPTION: Demonstrates how to display an Open Iconic SVG icon as a standard image element with proper accessibility via the alt attribute.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic's SVG Sprite in HTML\nDESCRIPTION: Shows how to implement the SVG sprite approach which allows displaying icons from a single request. This method uses the SVG and use elements with xlink:href to reference specific icons.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic as Standalone Icons\nDESCRIPTION: Shows the HTML markup pattern for using Open Iconic icons without a framework, using the data-glyph attribute to specify the icon.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons with CSS\nDESCRIPTION: Shows how to change the color of Open Iconic SVG icons by setting the fill property on the specific icon class.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Size with CSS\nDESCRIPTION: Demonstrates how to set dimensions for Open Iconic SVG icons using CSS. This applies equal width and height to create a square format for the icons.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap HTML Markup\nDESCRIPTION: Shows the HTML markup pattern for using Open Iconic icons within a Bootstrap environment, using the oi class naming convention.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation HTML Markup\nDESCRIPTION: Shows the HTML markup pattern for using Open Iconic icons within a Foundation environment, using the fi class naming convention.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Linking Bootstrap CSS for Open Iconic\nDESCRIPTION: Demonstrates how to include the Open Iconic stylesheet specifically formatted for Bootstrap.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Linking Foundation CSS for Open Iconic\nDESCRIPTION: Demonstrates how to include the Open Iconic stylesheet specifically formatted for Foundation.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Linking Standalone CSS for Open Iconic\nDESCRIPTION: Demonstrates how to include the default Open Iconic stylesheet for use without a framework.\nSOURCE: https://github.com/dotnet/orleans/blob/main/playground/DashboardToy/DashboardToy.Frontend/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```"
  }
]