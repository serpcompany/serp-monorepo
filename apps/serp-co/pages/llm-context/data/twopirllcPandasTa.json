[
  {
    "owner": "twopirllc",
    "repo": "pandas-ta",
    "content": "TITLE: Backtesting with VectorBT and Pandas-TA Golden Cross Strategy\nDESCRIPTION: Example demonstrating how to use pandas-ta with vectorbt for backtesting a Golden Cross strategy. The code fetches AAPL data, creates a Golden Cross signal when the 50-day SMA crosses above the 200-day SMA, and uses vectorbt to analyze the strategy's performance with defined parameters for fees and slippage.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pandas_ta as ta\nimport vectorbt as vbt\n\ndf = pd.DataFrame().ta.ticker(\"AAPL\") # requires 'yfinance' installed\n\n# Create the \"Golden Cross\" \ndf[\"GC\"] = df.ta.sma(50, append=True) > df.ta.sma(200, append=True)\n\n# Create boolean Signals(TS_Entries, TS_Exits) for vectorbt\ngolden = df.ta.tsignals(df.GC, asbool=True, append=True)\n\n# Sanity Check (Ensure data exists)\nprint(df)\n\n# Create the Signals Portfolio\npf = vbt.Portfolio.from_signals(df.close, entries=golden.TS_Entries, exits=golden.TS_Exits, freq=\"D\", init_cash=100_000, fees=0.0025, slippage=0.0025)\n\n# Print Portfolio Stats and Return Stats\nprint(pf.stats())\nprint(pf.returns_stats())\n```\n\n----------------------------------------\n\nTITLE: Creating a Comprehensive Strategy in Pandas TA\nDESCRIPTION: This snippet demonstrates creating a comprehensive strategy that combines MACD, RSI, Bollinger Bands, SMAs, and Cumulative Log Returns. It shows how to define multiple indicators with specific parameters.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmomo_bands_sma_ta = [\n    {\"kind\":\"sma\", \"length\": 50},\n    {\"kind\":\"sma\", \"length\": 200},\n    {\"kind\":\"bbands\", \"length\": 20, \"ddof\": 0},\n    {\"kind\":\"macd\"},\n    {\"kind\":\"rsi\"},\n    {\"kind\":\"log_return\", \"cumulative\": True},\n    {\"kind\":\"sma\", \"close\": \"CUMLOGRET_1\", \"length\": 5, \"suffix\": \"CUMLOGRET\"},\n]\nmomo_bands_sma_strategy = ta.Strategy(\n    \"Momo, Bands and SMAs and Cumulative Log Returns\", # name\n    momo_bands_sma_ta, # ta\n    \"MACD and RSI Momo with BBANDS and SMAs 50 & 200 and Cumulative Log Returns\" # description\n)\nmomo_bands_sma_strategy\n```\n\n----------------------------------------\n\nTITLE: Custom Strategy Definition\nDESCRIPTION: Example of defining a custom momentum and volatility strategy with multiple indicators\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCustomStrategy = ta.Strategy(\n    name=\"Momo and Volatility\",\n    description=\"SMA 50,200, BBANDS, RSI, MACD and Volume SMA 20\",\n    ta=[\n        {\"kind\": \"sma\", \"length\": 50},\n        {\"kind\": \"sma\", \"length\": 200},\n        {\"kind\": \"bbands\", \"length\": 20},\n        {\"kind\": \"rsi\"},\n        {\"kind\": \"macd\", \"fast\": 8, \"slow\": 21},\n        {\"kind\": \"sma\", \"close\": \"volume\", \"length\": 20, \"prefix\": \"VOLUME\"},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Trading Trend Signal using EMAs\nDESCRIPTION: Demonstrates how to create a trend signal using exponential moving averages (EMAs). In this example, the long trend is defined as EMA(8) > EMA(21). The code calculates EMAs with lengths of 8, 21, and 50, and adds percent return to the asset dataframe.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Example Long Trends\n# long = ta.sma(asset.close, 50) > ta.sma(asset.close, 200) # SMA(50) > SMA(200) \"Golden/Death Cross\"\n# long = ta.sma(asset.close, 10) > ta.sma(asset.close, 20) # SMA(10) > SMA(20)\nlong = ta.ema(asset.close, 8) > ta.ema(asset.close, 21) # EMA(8) > EMA(21)\n# long = ta.increasing(ta.ema(asset.close, 50))\n# long = ta.macd(asset.close).iloc[:,1] > 0 # MACD Histogram is positive\n# long = ta.amat(asset.close, 50, 200).AMATe_LR_2  # Long Run of AMAT(50, 200) with lookback of 2 bars\n\n# long &= ta.increasing(ta.ema(asset.close, 50), 2) # Uncomment for further long restrictions, in this case when EMA(50) is increasing/sloping upwards\n# long = 1 - long # uncomment to create a short signal of the trend\n\nasset.ta.ema(length=8, sma=False, append=True)\nasset.ta.ema(length=21, sma=False, append=True)\nasset.ta.ema(length=50, sma=False, append=True)\nasset.ta.percent_return(append=True)\nprint(\"TA Columns Added:\")\nasset[asset.columns[5:]].tail()\n```\n\n----------------------------------------\n\nTITLE: Creating Another Custom Strategy in Pandas TA\nDESCRIPTION: This snippet shows how to create another custom strategy named 'B' using Pandas TA. The strategy includes two Exponential Moving Averages (EMA), log return, RSI, and Supertrend indicators.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncustom_b = ta.Strategy(name=\"B\", ta=[{\"kind\": \"ema\", \"length\": 8}, {\"kind\": \"ema\", \"length\": 21}, {\"kind\": \"log_return\", \"cumulative\": True}, {\"kind\": \"rsi\"}, {\"kind\": \"supertrend\"}])\ncustom_b\n```\n\n----------------------------------------\n\nTITLE: Using Candle Pattern Detection in Pandas-TA\nDESCRIPTION: Shows how to use candlestick pattern detection with Pandas-TA. The method can analyze all patterns at once, a single pattern, or a subset of patterns specified in a list.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Get all candle patterns (This is the default behaviour)\ndf = df.ta.cdl_pattern(name=\"all\")\n\n# Get only one pattern\ndf = df.ta.cdl_pattern(name=\"doji\")\n\n# Get some patterns\ndf = df.ta.cdl_pattern(name=[\"doji\", \"inside\"])\n```\n\n----------------------------------------\n\nTITLE: Generating Trading Signals from Trend\nDESCRIPTION: Uses the pandas_ta tsignals method to generate trading signals based on the previously defined trend. This creates trend signals, entries, exits, and trades as boolean integers in the dataframe.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrendy = asset.ta.tsignals(long, asbool=False, append=True)\ntrendy.tail()\n```\n\n----------------------------------------\n\nTITLE: Strategy Implementation Example\nDESCRIPTION: Example of creating and running a custom technical analysis strategy using the Strategy class\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMyStrategy = ta.Strategy(\n    name=\"DCSMA10\",\n    ta=[\n        {\"kind\": \"ohlc4\"},\n        {\"kind\": \"sma\", \"length\": 10},\n        {\"kind\": \"donchian\", \"lower_length\": 10, \"upper_length\": 15},\n        {\"kind\": \"ema\", \"close\": \"OHLC4\", \"length\": 10, \"suffix\": \"OHLC4\"},\n    ]\n)\n\ndf.ta.strategy(MyStrategy, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Active Returns\nDESCRIPTION: Calculates active returns (returns during trend periods) by multiplying percent returns with the trend signal. Plots both regular and active returns for comparison.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasset[\"ACTRET_1\"] = trendy.TS_Trends.shift(1) * asset.PCTRET_1\nasset[[\"PCTRET_1\", \"ACTRET_1\"]].plot(figsize=(16, 3), color=colors(\"GyOr\"), alpha=1, grid=True).axhline(0, color=\"black\")\n```\n\n----------------------------------------\n\nTITLE: Comparing Buy-and-Hold vs. Strategy Cumulative Returns\nDESCRIPTION: Creates an area chart comparing the cumulative returns of a buy-and-hold strategy versus the active returns generated by the trading strategy, showing the relative performance over time.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n((asset[[\"PCTRET_1\", \"ACTRET_1\"]] + 1).cumprod() - 1).plot(figsize=(16, 3), kind=\"area\", stacked=False, color=colors(\"GyOr\"), title=\"B&H vs. Cum. Active Returns\", alpha=.4, grid=True).axhline(0, color=\"black\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom Strategy in Pandas TA\nDESCRIPTION: This snippet demonstrates how to create a custom strategy named 'A' using Pandas TA. The strategy includes two Simple Moving Averages (SMA) with lengths of 50 and 200.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncustom_a = ta.Strategy(name=\"A\", ta=[{\"kind\": \"sma\", \"length\": 50}, {\"kind\": \"sma\", \"length\": 200}])\ncustom_a\n```\n\n----------------------------------------\n\nTITLE: Downloading Financial Data with Pandas-TA Ticker Method\nDESCRIPTION: Demonstrates how to download financial market data using the ticker method with yfinance integration. This method supports various time periods and intervals for data retrieval.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Download Chart history using yfinance. (pip install yfinance) https://github.com/ranaroussi/yfinance\n# It uses the same keyword arguments as yfinance (excluding start and end)\ndf = df.ta.ticker(\"aapl\") # Default ticker is \"SPY\"\n\n# Period is used instead of start/end\n# Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n# Default: \"max\"\ndf = df.ta.ticker(\"aapl\", period=\"1y\") # Gets this past year\n\n# History by Interval by interval (including intraday if period < 60 days)\n# Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n# Default: \"1d\"\ndf = df.ta.ticker(\"aapl\", period=\"1y\", interval=\"1wk\") # Gets this past year in weeks\ndf = df.ta.ticker(\"aapl\", period=\"1mo\", interval=\"1h\") # Gets this past month in hours\n\n# BUT WAIT!! THERE'S MORE!!\nhelp(ta.yf)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Long and Short Trends\nDESCRIPTION: Creates area plots visualizing periods of long and short trends. Long trends are shown in green and short trends in red, with appropriate transparency to enhance visibility.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlong_trend = trendy.TS_Trends\nshort_trend = 1 - long_trend\n\nlong_trend.plot(figsize=(16, 0.85), kind=\"area\", stacked=True, color=colors()[0], alpha=0.25) # Green Area\nshort_trend.plot(figsize=(16, 0.85), kind=\"area\", stacked=True, color=colors()[1], alpha=0.25) # Red Area\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trade Signals\nDESCRIPTION: Plots the trade signals as a line chart showing entry (1), exit (-1), and no action (0) points based on the trend signals generated earlier.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntrendy.TS_Trades.plot(figsize=(16, 1.5), color=colors(\"BkBl\")[0], grid=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Pandas TA with Data Loading\nDESCRIPTION: Demonstrates how to load data into a DataFrame, set the datetime index, and calculate basic returns metrics. Shows loading from CSV or using the integrated ticker functionality with yfinance if installed.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pandas_ta as ta\n\ndf = pd.DataFrame() # Empty DataFrame\n\n# Load data\ndf = pd.read_csv(\"path/to/symbol.csv\", sep=\",\")\n# OR if you have yfinance installed\ndf = df.ta.ticker(\"aapl\")\n\n# VWAP requires the DataFrame index to be a DatetimeIndex.\n# Replace \"datetime\" with the appropriate column from your DataFrame\ndf.set_index(pd.DatetimeIndex(df[\"datetime\"]), inplace=True)\n\n# Calculate Returns and append to the df DataFrame\ndf.ta.log_return(cumulative=True, append=True)\ndf.ta.percent_return(cumulative=True, append=True)\n\n# New Columns with results\ndf.columns\n\n# Take a peek\ndf.tail()\n\n# vv Continue Post Processing vv\n```\n\n----------------------------------------\n\nTITLE: Applying a Comprehensive Strategy in Pandas TA Watchlist\nDESCRIPTION: This code applies the comprehensive strategy to the SPY ticker in the watchlist. It also demonstrates how to add constant values to the resulting DataFrame for indicator comparison.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Update the Watchlist\nwatch.strategy = momo_bands_sma_strategy\nwatch.strategy.name\n\nspy = watch.load(\"SPY\")\n# Apply constants to the DataFrame for indicators\nspy.ta.constants(True, [0, 30, 70])\nspy.tail()\n```\n\n----------------------------------------\n\nTITLE: Basic Pandas TA Indicator Usage\nDESCRIPTION: Examples of using basic technical indicators like Donchian Channel and EMA with direct method calls.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndonchiandf = ta.donchian(df[\"HIGH\"], df[\"low\"], lower_length=10, upper_length=15)\nema10_ohlc4 = ta.ema(ta.ohlc4(df[\"Open\"], df[\"High\"], df[\"Low\"], df[\"Close\"]), length=10)\n```\n\n----------------------------------------\n\nTITLE: Plotting Price and Moving Averages Chart\nDESCRIPTION: Creates a price chart with EMA indicators. The chart displays closing prices along with 8, 21, and 50-period exponential moving averages.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# chart = asset[\"close\"] #asset[[\"close\", \"SMA_10\", \"SMA_20\", \"SMA_50\", \"SMA_200\"]]\n# chart = asset[[\"close\", \"SMA_10\", \"SMA_20\"]]\nchart = asset[[\"close\", \"EMA_8\", \"EMA_21\", \"EMA_50\"]]\nchart.plot(figsize=(16, 10), color=colors(\"BkGrOrRd\"), title=ptitle, grid=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Trade Table with Entry/Exit Points\nDESCRIPTION: Creates a trade table showing entry and exit dates, signals, and prices. Also calculates statistics on total trades, round-trip trades, and displays information on any active trade including unrealized profit/loss.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nentries = trendy.TS_Entries * asset.close\nentries = entries[~np.isclose(entries, 0)]\nentries.dropna(inplace=True)\nentries.name = \"Entry\"\n\nexits = trendy.TS_Exits * asset.close\nexits = exits[~np.isclose(exits, 0)]\nexits.dropna(inplace=True)\nexits.name = \"Exit\"\n\ntotal_trades = trendy.TS_Trades.abs().sum()\nrt_trades = int(trendy.TS_Trades.abs().sum() // 2)\n\nall_trades = trendy.TS_Trades.copy().fillna(0)\nall_trades = all_trades[all_trades != 0]\n\ntrades = pd.DataFrame({\n    \"Signal\": all_trades,\n    entries.name: entries,\n    exits.name: exits\n})\n\n# Show some stats if there is an active trade (when there is an odd number of round trip trades)\nif total_trades % 2 != 0:\n    unrealized_pnl = asset.close.iloc[-1] - entries.iloc[-1]\n    unrealized_pnl_pct_change = 100 * ((asset.close.iloc[-1] / entries.iloc[-1]) - 1)\n    print(\"Current Trade:\")\n    print(f\"Price Entry | Last:\\t{entries.iloc[-1]:.4f} | {asset.close.iloc[-1]:.4f}\")\n    print(f\"Unrealized PnL | %:\\t{unrealized_pnl:.4f} | {unrealized_pnl_pct_change:.4f}%\")\nprint(f\"\\nTrades Total | Round Trip:\\t{total_trades} | {rt_trades}\")\nprint(f\"Trade Coverage: {100 * asset.TS_Trends.sum() / asset.shape[0]:.2f}%\")\n\ntrades\n```\n\n----------------------------------------\n\nTITLE: Loading and Applying Default Strategy in Pandas TA Watchlist\nDESCRIPTION: This code loads all tickers in the watchlist and applies the default 'Common' strategy to each ticker. It demonstrates how to access the resulting data and display its shape.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# No arguments loads all the tickers and applies the Strategy to each ticker.\n# The result can be accessed with Watchlist's 'data' property which returns a \n# dictionary keyed by ticker and DataFrames as values \nwatch.load(verbose=True)\n\n\", \".join([f\"{t}: {d.shape}\" for t,d in watch.data.items()])\n```\n\n----------------------------------------\n\nTITLE: Non-Multiprocessing Strategy Example\nDESCRIPTION: Example of creating a strategy that doesn't use multiprocessing by specifying column names\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nNonMPStrategy = ta.Strategy(\n    name=\"EMAs, BBs, and MACD\",\n    description=\"Non Multiprocessing Strategy by rename Columns\",\n    ta=[\n        {\"kind\": \"ema\", \"length\": 8},\n        {\"kind\": \"ema\", \"length\": 21},\n        {\"kind\": \"bbands\", \"length\": 20, \"col_names\": (\"BBL\", \"BBM\", \"BBU\")},\n        {\"kind\": \"macd\", \"fast\": 8, \"slow\": 21, \"col_names\": (\"MACD\", \"MACD_H\", \"MACD_S\")}\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Watchlist for Strategy Management in Pandas TA\nDESCRIPTION: This snippet creates a Watchlist object for managing and executing strategies in Pandas TA. It initializes the watchlist with specific stock symbols and sets the data source.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata_source = \"av\" # Default\n# data_source = \"yahoo\"\nwatch = Watchlist([\"SPY\", \"IWM\"], ds_name=data_source, timed=False)\n```\n\n----------------------------------------\n\nTITLE: Using Standard Style for Simple Moving Average in Pandas TA\nDESCRIPTION: Example of using the standard style in Pandas TA to calculate a Simple Moving Average with length 10 on a dataframe's Close column. This returns a Series named SMA_10.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nsma10 = ta.sma(df[\"Close\"], length=10)\n```\n\n----------------------------------------\n\nTITLE: Loading Financial Data with Watchlist\nDESCRIPTION: Creates a Watchlist object to load financial data for specified tickers from Yahoo Finance. The code sets up daily timeframe and performs initial analysis on the loaded data.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntf = \"D\"\ntickers = [\"SPY\", \"QQQ\", \"AAPL\", \"TSLA\", \"BTC-USD\"]\nwatch = Watchlist(tickers, tf=tf, ds_name=\"yahoo\", timed=True)\n# watch.strategy = ta.CommonStrategy # If you have a Custom Strategy, you can use it here.\nwatch.load(tickers, analyze=True, verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Technical Indicators in Pandas-TA\nDESCRIPTION: Shows how to list all available technical indicators and utility functions in Pandas-TA. This method allows filtering indicators by exclusion and can return the results as a list.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Prints the indicators and utility functions\ndf.ta.indicators()\n\n# Returns a list of indicators and utility functions\nind_list = df.ta.indicators(as_list=True)\n\n# Prints the indicators and utility functions that are not in the excluded list\ndf.ta.indicators(exclude=[\"cg\", \"pgo\", \"ui\"])\n# Returns a list of the indicators and utility functions that are not in the excluded list\nsmaller_list = df.ta.indicators(exclude=[\"cg\", \"pgo\", \"ui\"], as_list=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Analysis Environment with Pandas TA\nDESCRIPTION: Imports and configures necessary libraries for technical analysis including numpy, pandas, mplfinance, pandas_ta, and the watchlist module. Also sets up Jupyter notebook display options and prints version information.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%pylab inline\nimport datetime as dt\nimport random as rnd\nfrom sys import float_info as sflt\n\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\npd.set_option(\"max_rows\", 100)\npd.set_option(\"max_columns\", 20)\n\nimport mplfinance as mpf\nimport pandas_ta as ta\n\nfrom tqdm.notebook import trange, tqdm\n\nfrom watchlist import colors, Watchlist # Is this failing? If so, copy it locally. See above.\n\nprint(f\"Numpy v{np.__version__}\")\nprint(f\"Pandas v{pd.__version__}\")\nprint(f\"mplfinance v{mpf.__version__}\")\nprint(f\"\\nPandas TA v{ta.version}\\nTo install the Latest Version:\\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\\n\")\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Pandas TA Strategies\nDESCRIPTION: This snippet imports necessary libraries for working with Pandas TA strategies, including datetime, pandas, pandas_ta, and AlphaVantage API. It also prints the Pandas TA version and installation instructions.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport datetime as dt\n\nfrom tqdm import tqdm\n\nimport pandas as pd\nimport pandas_ta as ta\nfrom alphaVantageAPI.alphavantage import AlphaVantage  # pip install alphaVantage-api\n\nfrom watchlist import Watchlist # Is this failing? If so, copy it locally. See above.\n\nprint(f\"\\nPandas TA v{ta.version}\\nTo install the Latest Version:\\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\\n\")\n%pylab inline\n```\n\n----------------------------------------\n\nTITLE: Preparing Asset Data for Technical Analysis\nDESCRIPTION: Prepares the selected asset data by trimming it to a specific duration, converting column names to lowercase, and removing unnecessary columns.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nduration = \"1y\"\nasset = watch.data[ticker]\nrecent = recent_bars(asset, duration)\nasset.columns = asset.columns.str.lower()\nasset.drop(columns=[\"dividends\", \"split\"], errors=\"ignore\", inplace=True)\nasset = asset.copy().tail(recent)\nasset\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Pandas TA\nDESCRIPTION: Shows how to access help information about the Pandas TA library, including listing all available indicators and getting detailed help for specific indicators.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pandas_ta as ta\n\n# Create a DataFrame so 'ta' can be used.\ndf = pd.DataFrame()\n\n# Help about this, 'ta', extension\nhelp(df.ta)\n\n# List of all indicators\ndf.ta.indicators()\n\n# Help about an indicator such as bbands\nhelp(ta.bbands)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Technical Analysis\nDESCRIPTION: A list of Python packages required for technical analysis with Pandas TA. The code includes installation commands for numpy, pandas, mplfinance, pandas-datareader, requests_cache, tqdm, and alphaVantage-api.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install numpy\n#!pip install pandas\n#!pip install mplfinance\n#!pip install pandas-datareader\n#!pip install requests_cache\n#!pip install tqdm\n#!pip install alphaVantage-api # Required for Watchlist\n```\n\n----------------------------------------\n\nTITLE: Selecting an Asset for Analysis\nDESCRIPTION: Selects a specific ticker from the watchlist for analysis. Prints information about the selected asset including its shape and column names.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nticker = tickers[0] # change tickers by changing the index\nprint(f\"{ticker} {watch.data[ticker].shape}\\nColumns: {', '.join(list(watch.data[ticker].columns))}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AlphaVantage Data Source for Pandas TA\nDESCRIPTION: This code initializes an AlphaVantage data source for use with Pandas TA strategies. It sets up the API key, output size, and export options.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nAV = AlphaVantage(\n    api_key=\"YOUR API KEY\", premium=False,\n    output_size='full', clean=True,\n    export_path=\".\", export=True\n)\nAV\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Pandas TA Version with pip\nDESCRIPTION: Command to install the latest version of Pandas TA directly from GitHub repository using pip. This ensures users are running the most up-to-date version when reporting issues.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Values for CommonStrategy in Pandas TA\nDESCRIPTION: This code snippet shows how to access and print the default values of the CommonStrategy in Pandas TA, including its name, description, creation date, and technical analysis parameters.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCommonStrategy = ta.CommonStrategy\nprint(\"name =\", CommonStrategy.name)\nprint(\"description =\", CommonStrategy.description)\nprint(\"created =\", CommonStrategy.created)\nprint(\"ta =\", CommonStrategy.ta)\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Values for AllStrategy in Pandas TA\nDESCRIPTION: This code snippet demonstrates how to access and print the default values of the AllStrategy in Pandas TA, including its name, description, creation date, and technical analysis parameters.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAllStrategy = ta.AllStrategy\nprint(\"name =\", AllStrategy.name)\nprint(\"description =\", AllStrategy.description)\nprint(\"created =\", AllStrategy.created)\nprint(\"ta =\", AllStrategy.ta)\n```\n\n----------------------------------------\n\nTITLE: Preparing Chart Display Strings\nDESCRIPTION: Creates formatted strings for chart titles and labels, including time information, date ranges, and the latest OHLCV (Open, High, Low, Close, Volume) values.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nextime = ta.get_time(to_string=True)\nfirst_date, last_date = asset.index[0], asset.index[-1]\nf_date = f\"{first_date.day_name()} {first_date.month}-{first_date.day}-{first_date.year}\"\nl_date = f\"{last_date.day_name()} {last_date.month}-{last_date.day}-{last_date.year}\"\nlast_ohlcv = f\"Last OHLCV: ({asset.iloc[-1].open:.4f}, {asset.iloc[-1].high:.4f}, {asset.iloc[-1].low:.4f}, {asset.iloc[-1].close:.4f}, {int(asset.iloc[-1].volume)})\"\nptitle = f\"\\n{ticker} [{tf} for {duration}({recent} bars)] from {f_date} to {l_date}\\n{last_ohlcv}\\n{extime}\"\n```\n\n----------------------------------------\n\nTITLE: Managing DataFrame Constants in Pandas-TA\nDESCRIPTION: Demonstrates how to add and remove constants from a DataFrame for charting purposes. The constants can be useful reference lines in technical analysis charts.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Adding constants for charting\nimport numpy as np\nchart_lines = np.append(np.arange(-4, 5, 1), np.arange(-100, 110, 10))\ndf.ta.constants(True, chart_lines)\n# Removing some constants from the DataFrame\ndf.ta.constants(False, np.array([-60, -40, 40, 60]))\n```\n\n----------------------------------------\n\nTITLE: DataFrame Constants Method Example\nDESCRIPTION: Example showing how to add and remove constants from a DataFrame\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\n# Add constant '1' to the DataFrame\ndf.ta.constants(True, [1])\n# Remove constant '1' to the DataFrame\ndf.ta.constants(False, [1])\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Period Filter Function for DataFrame\nDESCRIPTION: Defines a helper function 'recent_bars' that returns the number of bars to display based on a specified time frame. This allows filtering data for specific periods like 1 year, 6 months, etc.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef recent_bars(df, tf: str = \"1y\"):\n    # All Data: 0, Last Four Years: 0.25, Last Two Years: 0.5, This Year: 1, Last Half Year: 2, Last Quarter: 4\n    yearly_divisor = {\"all\": 0, \"10y\": 0.1, \"5y\": 0.2, \"4y\": 0.25, \"3y\": 1./3, \"2y\": 0.5, \"1y\": 1, \"6mo\": 2, \"3mo\": 4}\n    yd = yearly_divisor[tf] if tf in yearly_divisor.keys() else 0\n    return int(ta.RATE[\"TRADING_DAYS_PER_YEAR\"] / yd) if yd > 0 else df.shape[0]\n```\n\n----------------------------------------\n\nTITLE: Creating an Invalid Strategy in Pandas TA\nDESCRIPTION: This snippet demonstrates creating an invalid strategy with a misspelled indicator name. This strategy will fail when executed with Pandas TA.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Misspelled indicator, will fail later when ran with Pandas TA\ncustom_run_failure = ta.Strategy(name=\"Runtime Failure\", ta=[{\"kind\": \"percet_return\"}])\ncustom_run_failure\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for pandas-ta\nDESCRIPTION: Specifies the exact versions of required Python packages including numpy, pandas, python-dateutil, pytz, and six. These dependencies are essential for running the pandas-ta library which is used for technical analysis.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy==1.22.0\npandas==1.2.0\npython-dateutil==2.8.1\npytz==2021.1\nsix==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx Documentation Index for pandas_ta\nDESCRIPTION: Root reStructuredText file that establishes the main documentation structure. Includes toctree directive for content organization and standard Sphinx navigation indices.\nSOURCE: https://github.com/twopirllc/pandas-ta/blob/main/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. pandas_ta documentation master file, created by\n   sphinx-quickstart on Mon Feb 18 11:41:11 2019.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWelcome to pandas_ta's documentation!\n=====================================\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```"
  }
]