[
  {
    "owner": "jetbrains",
    "repo": "kotlin-web-site",
    "content": "TITLE: Declaring Dependencies in build.gradle.kts for a Kotlin/JS React App\nDESCRIPTION: Defines the required project dependencies in the `build.gradle.kts` file using Gradle's dependency management. It includes Kotlin wrappers for React and DOM, Emotion for CSS-in-JS, npm packages for a video player (`react-player`) and social sharing (`react-share`), as well as Kotlinx libraries for coroutines and JSON serialization. The `enforcedPlatform` ensures consistent versions for Kotlin wrappers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    // React, React DOM + Wrappers\n    implementation(enforcedPlatform(\"org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom:1.0.0-pre.430\"))\n    implementation(\"org.jetbrains.kotlin-wrappers:kotlin-react\")\n    implementation(\"org.jetbrains.kotlin-wrappers:kotlin-react-dom\")\n\n    // Kotlin React Emotion (CSS)\n    implementation(\"org.jetbrains.kotlin-wrappers:kotlin-emotion\")\n\n    // Video Player\n    implementation(npm(\"react-player\", \"2.12.0\"))\n\n    // Share Buttons\n    implementation(npm(\"react-share\", \"4.4.1\"))\n\n    // Coroutines & serialization\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4\")\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Kotlin Data Class\nDESCRIPTION: Demonstrates the fundamental syntax for declaring a data class in Kotlin. The `data` keyword before `class` instructs the compiler to automatically generate standard methods like `equals()`, `hashCode()`, `toString()`, `componentN()` functions for destructuring, and a `copy()` function based on the properties declared in the primary constructor (`name` and `age`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val age: Int)\n```\n\n----------------------------------------\n\nTITLE: Java 7's Try-With-Resources in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the `use` function in Kotlin to emulate Java 7's try-with-resources. The `use` function ensures that the resource is closed automatically after the block of code is executed, even if an exception is thrown.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval stream = Files.newInputStream(Paths.get(\"/some/file.txt\"))\nstream.buffered().reader().use { reader ->\n    println(reader.readText())\n}\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Expression in Kotlin\nDESCRIPTION: This snippet demonstrates how to use a `try-catch` block as an expression in Kotlin. The `try-catch` expression returns the value of the last expression in the `try` block or the `catch` block if an exception is caught.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // Working with result\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Request-Response Handling with Sealed Classes in Kotlin\nDESCRIPTION: This comprehensive snippet demonstrates how to use sealed classes and interfaces to implement a user authentication system with API request-response handling. It includes definitions for API requests, responses, user data, and functions for handling requests and retrieving user information.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Import necessary modules\nimport io.ktor.server.application.*\nimport io.ktor.server.resources.*\n\nimport kotlinx.serialization.*\n\n// Define the sealed interface for API requests using Ktor resources\n@Resource(\"api\")\nsealed interface ApiRequest\n\n@Serializable\n@Resource(\"login\")\ndata class LoginRequest(val username: String, val password: String) : ApiRequest\n\n\n@Serializable\n@Resource(\"logout\")\nobject LogoutRequest : ApiRequest\n\n// Define the ApiResponse sealed class with detailed response types\nsealed class ApiResponse {\n    data class UserSuccess(val user: UserData) : ApiResponse()\n    data object UserNotFound : ApiResponse()\n    data class Error(val message: String) : ApiResponse()\n}\n\n// User data class to be used in the success response\ndata class UserData(val userId: String, val name: String, val email: String)\n\n// Function to validate user credentials (for demonstration purposes)\nfun isValidUser(username: String, password: String): Boolean {\n    // Some validation logic (this is just a placeholder)\n    return username == \"validUser\" && password == \"validPass\"\n}\n\n// Function to handle API requests with detailed responses\nfun handleRequest(request: ApiRequest): ApiResponse {\n    return when (request) {\n        is LoginRequest -> {\n            if (isValidUser(request.username, request.password)) {\n                ApiResponse.UserSuccess(UserData(\"userId\", \"userName\", \"userEmail\"))\n            } else {\n                ApiResponse.Error(\"Invalid username or password\")\n            }\n        }\n        is LogoutRequest -> {\n            // Assuming logout operation always succeeds for this example\n            ApiResponse.UserSuccess(UserData(\"userId\", \"userName\", \"userEmail\")) // For demonstration\n        }\n    }\n}\n\n// Function to simulate a getUserById call\nfun getUserById(userId: String): ApiResponse {\n    return if (userId == \"validUserId\") {\n        ApiResponse.UserSuccess(UserData(\"validUserId\", \"John Doe\", \"john@example.com\"))\n    } else {\n        ApiResponse.UserNotFound\n    }\n    // Error handling would also result in an Error response.\n}\n\n// Main function to demonstrate the usage\nfun main() {\n    val loginResponse = handleRequest(LoginRequest(\"user\", \"pass\"))\n    println(loginResponse)\n\n    val logoutResponse = handleRequest(LogoutRequest)\n    println(logoutResponse)\n\n    val userResponse = getUserById(\"validUserId\")\n    println(userResponse)\n\n    val userNotFoundResponse = getUserById(\"invalidId\")\n    println(userNotFoundResponse)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Kotlin Data Class\nDESCRIPTION: This snippet shows how to declare a data class in Kotlin using the `data` keyword.  Data classes automatically provide useful functions like `toString()`, `equals()`, and `copy()`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val id: Int)\n```\n\n----------------------------------------\n\nTITLE: Resource Management with .use() in Kotlin\nDESCRIPTION: Demonstrates how to use the `.use()` function for resource management in Kotlin. This function automatically closes resources that implement `AutoClosable`, like `FileWriter`, eliminating the need for a `finally` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nFileWriter(\"test.txt\").use { writer ->\nwriter.write(\"some text\") \n// After this block, the .use function automatically calls writer.close(), similar to a finally block\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sealed Classes with When Expressions\nDESCRIPTION: Demonstrates the key benefit of sealed classes when used with when expressions. The compiler can verify that all possible cases are covered, eliminating the need for an else clause.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Sealed class and its subclasses\nsealed class Error {\n    class FileReadError(val file: String): Error()\n    class DatabaseError(val source: String): Error()\n    object RuntimeError : Error()\n}\n\n// Function to log errors\nfun log(e: Error) = when(e) {\n    is Error.FileReadError -> println(\"Error while reading file ${e.file}\")\n    is Error.DatabaseError -> println(\"Error while reading from database ${e.source}\")\n    Error.RuntimeError -> println(\"Runtime error\")\n    // No `else` clause is required because all the cases are covered\n}\n\n// List all errors\nfun main() {\n    val errors = listOf(\n        Error.FileReadError(\"example.txt\"),\n        Error.DatabaseError(\"usersDatabase\"),\n        Error.RuntimeError\n    )\n\n    errors.forEach { log(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Delegated Property with a Custom Delegate - Kotlin\nDESCRIPTION: Demonstrates how to declare a property that delegates its get and set operations to a custom delegate class. The example shows how to use the `by` keyword for property delegation within a class, allowing property accessors to be handled externally by providing the required getValue/setValue operator functions. This is foundational for creating reusable, pluggable property behaviors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Example {\n    var p: String by Delegate()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating the Spring REST Controller for Database-backed Message Endpoints in Kotlin\nDESCRIPTION: This snippet updates the MessageResource REST controller to use the service layer for database access, providing HTTP GET for message retrieval and POST for inserting new messages. Spring annotations are used for dependency injection and request body mapping. Dependencies are the MessageService, Spring Web libraries, and the Message data class. JSON-formatted message data is expected as input for POST; output is a list of persisted Message objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.web.bind.annotation.RequestBody\\nimport org.springframework.web.bind.annotation.PostMapping\\n \\n\\n@RestController\\nclass MessageResource(val service: MessageService) {\\n    @GetMapping(\"/\")\\n    fun index(): List<Message> = service.findMessages()\\n \\n    @PostMapping(\"/\")\\n    fun post(@RequestBody message: Message) {\\n        service.post(message)\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Lazy Property Initialization in Kotlin\nDESCRIPTION: This snippet demonstrates lazy property initialization in Kotlin using the `lazy` delegate. The value of the property is computed only when it's accessed for the first time.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval p: String by lazy { // the value is computed only on first access\n    // compute the string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Lazy Property with lazy() - Kotlin\nDESCRIPTION: Demonstrates employing the standard Kotlin lazy() delegate for property initialization. The property is computed on first access and cached for subsequent accesses. The code prints diagnostic output to show when the computation happens, illustrating the lazy loading pattern. Requires the kotlin-stdlib.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main() {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Kotlin const Properties as Static Final Fields in Java\nDESCRIPTION: Shows that Kotlin properties declared with `const val`, whether at the top level (like `MAX`), in an `object` (like `Obj.CONST`), or in a `companion object` (like `C.VERSION`), are compiled into public static final fields in Java. These can be accessed directly using the class or generated file name (e.g., `Obj.CONST`, `ExampleKt.MAX`, `C.VERSION`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// file example.kt\n\nobject Obj {\n    const val CONST = 1\n}\n\nclass C {\n    companion object {\n        const val VERSION = 9\n    }\n}\n\nconst val MAX = 239\n```\n\nLANGUAGE: java\nCODE:\n```\nint constant = Obj.CONST;\nint max = ExampleKt.MAX;\nint version = C.VERSION;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Simple Function - Kotlin\nDESCRIPTION: Demonstrates how to declare a simple function with a single integer parameter and return its double. No dependencies are required. Input is an integer, and the output is its double; suitable for illustrating basic function definitions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun double(x: Int): Int {\n    return 2 * x\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Kotlin Property as Public Field in Java with @JvmField\nDESCRIPTION: Shows how to annotate a Kotlin property (`ID`) within a class (`User`) with `@JvmField`. This exposes the property directly as a public field in the generated Java class, allowing direct access (`user.ID`) from Java code instead of using getter methods. The property must have a backing field, not be private, and meet other specific criteria.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(id: String) {\n    @JvmField val ID = id\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// Java\nclass JavaClient {\n    public String getID(User user) {\n        return user.ID;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Java Synthetic Properties\nDESCRIPTION: Shows how to create references to Java synthetic properties in Kotlin, starting from Kotlin 1.8.20. It uses the `Person` class defined in Java and demonstrates sorting a list of `Person` objects by age using a property reference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval persons = listOf(Person(\"Jack\", 11), Person(\"Sofie\", 12), Person(\"Peter\", 11))\n    persons\n         // Call a reference to Java synthetic property:\n        .sortedBy(Person::age)\n         // Call Java getter via the Kotlin property syntax:\n        .forEach { person -> println(person.name) }\n```\n\n----------------------------------------\n\nTITLE: Recommended Source Set Configuration in Kotlin Multiplatform\nDESCRIPTION: The recommended approaches for configuring source set dependencies in Kotlin Multiplatform, using either direct source set references or the defaultSourceSet property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    js()\n    iosArm64()\n    iosSimulatorArm64()\n\n    sourceSets {\n        val commonMain by getting\n        val myCustomIntermediateSourceSet by creating {\n            dependsOn(commonMain)\n        }\n        \n        // Option #1. Shorter and more readable, use it when possible. \n        // Usually, the name of the default source set \n        // is a simple concatenation of the target name and the compilation name:\n        val jvmMain by getting {\n            dependsOn(myCustomIntermediateSourceSet)\n        }\n        \n        // Option #2. Generic solution, use it if your build script requires a more advanced approach:\n        targets[\"jvm\"].compilations[\"main\"].defaultSourceSet.dependsOn(myCustomIntermediateSourceSet)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Kotlin\nDESCRIPTION: This snippet demonstrates string concatenation using the `+` operator in Kotlin.  It shows how to concatenate strings with other types, such as integers. The example also shows how to concatenate the resulting string with another string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val s = \"abc\" + 1\n    println(s + \"def\")\n    // abc1def    \n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Main Entry Point for Kotlin Applications\nDESCRIPTION: This snippet illustrates the main function, which serves as the entry point for every Kotlin application. It also shows an alternative main function that accepts a variable number of string arguments, demonstrating how to handle arguments passed to the application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n    println(\"Hello world!\")\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    println(args.contentToString())\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Java Class from Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to instantiate and use a Java class (Customer) from Kotlin. It demonstrates Kotlin's interoperability, allowing the Kotlin code to call Java methods and access Java properties without any additional configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/mixing-java-kotlin-intellij.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval customer = Customer(\"Phase\")\nprintln(customer.name)\nprintln(customer.placeOrder())\n```\n\n----------------------------------------\n\nTITLE: Return on When Statement in Kotlin\nDESCRIPTION: This snippet demonstrates how to return a value from a `when` statement in Kotlin. The `when` statement can be used as an expression that returns a value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Compiler Translation of Delegated Properties\nDESCRIPTION: This snippet illustrates how the Kotlin compiler internally transforms property declarations using delegates. For a property using by MyDelegate(), the compiler generates an auxiliary property prop$delegate, and the property accessors delegate get/set calls to this instance. This knowledge is essential to understand the behind-the-scenes mechanisms of property delegation and is relevant for debugging or metaprogramming. It shows the mapping between user-friendly syntax and generated code, including the use of property reflection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C {\n    var prop: Type by MyDelegate()\n}\n\n// this code is generated by the compiler instead:\nclass C {\n    private val prop$delegate = MyDelegate()\n    var prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n        set(value: Type) = prop$delegate.setValue(this, this::prop, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Input with Kotlin readln()\nDESCRIPTION: Demonstrates the usage of Kotlin's built-in readln() function for reading standard input. Shows how to read strings and convert them to other data types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/standard-input.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Reads a string. For example: Charlotte\nval name = readln()\n\n// Reads a string and converts it into an integer. For example: 43\nval age = readln().toInt()\n\nprintln(\"Hello, $name! You are $age years old.\")\n// Hello, Charlotte! You are 43 years old.\n```\n\n----------------------------------------\n\nTITLE: Basic Try-Catch-Finally Block in Kotlin\nDESCRIPTION: Demonstrates the basic structure of a `try-catch-finally` block. The `finally` block executes regardless of whether an exception is thrown or caught, ensuring cleanup operations are always performed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    // Code that may throw an exception\n} catch (e: YourException) {\n    // Exception handler\n} finally {\n    // Code that is always executed\n}\n```\n\n----------------------------------------\n\nTITLE: Default Values for Function Parameters in Kotlin\nDESCRIPTION: This snippet shows how to define default values for function parameters in Kotlin. This allows the function to be called with fewer arguments, using the default values for the omitted parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Kotlin Spring Boot Application with REST Endpoint Example\nDESCRIPTION: This code presents a full example of a Spring Boot application in Kotlin, including the application class, main entry point, REST controller for serving a list of messages, and the data class definition. It brings together all foundational components needed for a minimal working REST API. Dependencies include Spring Boot, Spring Web, and Spring Data annotations. Inputs and outputs align with the endpoint and message schema.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage demo\\n\\nimport org.springframework.boot.autoconfigure.SpringBootApplication\\nimport org.springframework.boot.runApplication\\nimport org.springframework.data.annotation.Id\\nimport org.springframework.web.bind.annotation.GetMapping\\nimport org.springframework.web.bind.annotation.RestController\\n\\n@SpringBootApplication\\nclass DemoApplication\\n\\nfun main(args: Array<String>) {\\n    runApplication<DemoApplication>(*args)\\n}\\n\\n@RestController\\nclass MessageResource {\\n    @GetMapping(\"/\")\\n    fun index(): List<Message> = listOf(\\n        Message(\"1\", \"Hello!\"),\\n        Message(\"2\", \"Bonjour!\"),\\n        Message(\"3\", \"Privet!\"),\\n    )\\n}\\n\\ndata class Message(val id: String?, val text: String)\\n\n```\n\n----------------------------------------\n\nTITLE: Non-Nullable String Assignment Kotlin\nDESCRIPTION: Demonstrates assigning a non-null string to a variable and attempting to assign `null`, resulting in a compilation error because the variable is declared as non-nullable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a non-null string to a variable\n    var a: String = \"abc\"\n    // Attempts to re-assign null to the non-nullable variable\n    a = null\n    print(a)\n    // Null can not be a value of a non-null type String\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Application Properties for Database Initialization\nDESCRIPTION: This property file snippet sets up key Spring Boot datasource properties and initializes the schema from the provided SQL file. It configures an H2 file-based database, sets connection credentials, and ensures that the schema is loaded on every application start. Inputs are the property file lines; output is a running application with an active data source connected to H2 and schema initialization enabled. Must be placed in application.properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nspring.datasource.driver-class-name=org.h2.Driver\\nspring.datasource.url=jdbc:h2:file:./data/testdb\\nspring.datasource.username=sa\\nspring.datasource.password=password\\nspring.sql.init.schema-locations=classpath:sql/schema.sql\\nspring.sql.init.mode=always\\n\n```\n\n----------------------------------------\n\nTITLE: Default Parameter Values in Kotlin\nDESCRIPTION: This example demonstrates how to prefer declaring functions with default parameter values instead of overloaded functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_55\n\nLANGUAGE: kotlin\nCODE:\n```\n// Bad\nfun foo() = foo(\"a\")\nfun foo(a: String) { /*...*/ }\n\n// Good\nfun foo(a: String = \"a\") { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: When Expression with Enum Kotlin\nDESCRIPTION: Demonstrates the use of 'when' as an expression with an enum class.  Since all enum values are covered, no 'else' branch is needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Bit {\n    ZERO, ONE\n}\n\nval numericValue = when (getRandomBit()) {\n    // No else branch is needed because all cases are covered\n    Bit.ZERO -> 0\n    Bit.ONE -> 1\n}\n```\n\n----------------------------------------\n\nTITLE: If-Not-Null Shorthand in Kotlin\nDESCRIPTION: This snippet demonstrates the if-not-null shorthand using the safe call operator `?.`. If the variable before the `?.` is null, the expression after it is not evaluated, and the result is null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size) // size is printed if files is not null\n```\n\n----------------------------------------\n\nTITLE: Using apply Scope Function with this Reference in Kotlin\nDESCRIPTION: Demonstrates the apply scope function which uses 'this' to reference the context object and returns the object itself, making it useful for object configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(var name: String, var age: Int = 0, var city: String = \"\")\n\nfun main() {\n    val adam = Person(\"Adam\").apply { \n        age = 20                       // same as this.age = 20\n        city = \"London\"\n    }\n    println(adam)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Incremental Annotation Processing in Gradle Properties\nDESCRIPTION: Configuration to disable incremental annotation processing in kapt which is enabled by default.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_18\n\nLANGUAGE: none\nCODE:\n```\nkapt.incremental.apt=false\n```\n\n----------------------------------------\n\nTITLE: Updating Main Function for React Rendering\nDESCRIPTION: Updates the main function to render the App component in the root container.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val container = document.getElementById(\"root\") ?: error(\"Couldn't find root container!\")\n    createRoot(container).render(App.create())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Spring REST Controller in Kotlin\nDESCRIPTION: Defines a simple Spring Boot REST controller named `MessageController` in the `demo` package. It uses the `@RestController` annotation to mark the class as a controller and `@GetMapping(\"/\")` to map HTTP GET requests to the root path (\"/\") to the `index` function. The `index` function takes a required request parameter \"name\" (`@RequestParam(\"name\")`) and returns a personalized greeting string using Kotlin's string templates. This demonstrates basic request handling and parameter binding.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-create-project-with-spring-boot.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageController.kt\npackage demo\n\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\nclass MessageController {\n    @GetMapping(\"/\")\n    fun index(@RequestParam(\"name\") name: String) = \"Hello, $name!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Minimum and Maximum Elements by Selector or Comparator - Kotlin\nDESCRIPTION: This snippet demonstrates advanced minimum and maximum operations over collections in Kotlin, using selector functions and comparators with minByOrNull and maxWithOrNull. It finds the element in a list of numbers with the smallest remainder modulo 3, and selects the longest string from a list by using a comparator. The code requires only Kotlin's Standard Library; these functions return null for empty collections and expect a lambda or Comparator as argument. The inputs are hardcoded and output is the selected element, or null if the collection is empty.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 42, 10, 4)\n    val min3Remainder = numbers.minByOrNull { it % 3 }\n    println(min3Remainder)\n\n    val strings = listOf(\"one\", \"two\", \"three\", \"four\")\n    val longestString = strings.maxWithOrNull(compareBy { it.length })\n    println(longestString)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Star-Projection in Kotlin\nDESCRIPTION: Shows how to use star-projection for type checking generic types at runtime. Demonstrates a safe approach to work with collections when specific generic type information is erased.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nif (something is List<*>) {\n    something.forEach { println(it) } // The items are typed as `Any?`\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function with Block Body\nDESCRIPTION: Shows how to declare anonymous functions with block body and explicit return statement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun(x: Int, y: Int): Int {\n    return x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Nulls from Collections\nDESCRIPTION: This code shows how to filter out null values from a collection using the `filterNotNull()` function.  It creates a list of nullable integers and then filters it to create a new list containing only the non-null integers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Declares a list containing some null and non-null integer values\n    val nullableList: List<Int?> = listOf(1, 2, null, 4)\n\n    // Filters out null values, resulting in a list of non-null integers\n    val intList: List<Int> = nullableList.filterNotNull()\n  \n    println(intList)\n    // [1, 2, 4]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Kotlin\nDESCRIPTION: Explains variable declaration using 'val' and 'var' in Kotlin, highlighting immutability and mutability respectively. The snippets show how to declare variables with explicit types, utilize type inference, and declare top-level variables.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Declares the variable x and initializes it with the value of 5\n    val x: Int = 5\n    // 5\n//sampleEnd\n    println(x)\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Declares the variable x and initializes it with the value of 5\n    var x: Int = 5\n    // Reassigns a new value of 6 to the variable x\n    x += 1\n    // 6\n//sampleEnd\n    println(x)\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Declares the variable x with the value of 5;`Int` type is inferred\n    val x = 5\n    // 5\n//sampleEnd\n    println(x)\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Initializes the variable x at the moment of declaration; type is not required\n    val x = 5\n    // Declares the variable c without initialization; type is required\n    val c: Int\n    // Initializes the variable c after declaration \n    c = 3\n    // 5 \n    // 3\n//sampleEnd\n    println(x)\n    println(c)\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nval PI = 3.14\nvar x = 0\n\nfun incrementX() {\n    x += 1\n}\n// x = 0; PI = 3.14\n// incrementX()\n// x = 1; PI = 3.14\n//sampleEnd\n\nfun main() {\n    println(\"x = \\$x; PI = \\$PI\")\n    incrementX()\n    println(\"incrementX()\")\n    println(\"x = \\$x; PI = \\$PI\")\n}\n```\n\n----------------------------------------\n\nTITLE: Trailing Lambda Usage in Kotlin\nDESCRIPTION: Demonstrates how to use trailing lambdas in Kotlin, where a lambda expression can be placed outside parentheses when it's the last parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval product = items.fold(1) { acc, e -> acc * e }\n```\n\n----------------------------------------\n\nTITLE: Using Safe Calls for Functions in Kotlin\nDESCRIPTION: This example shows how to use the safe call operator (?.) to safely call functions on potentially null objects in Kotlin. It attempts to call the uppercase() function on a null string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val nullString: String? = null\n    println(nullString?.uppercase())\n    // null\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing NumberFormatException in Kotlin\nDESCRIPTION: This code snippet demonstrates how a NumberFormatException is thrown when attempting to convert a non-numeric string to an integer using the `toInt()` function in Kotlin. It highlights the importance of validating input strings before attempting to convert them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval string = \"This is not a number\"\nval number = string.toInt() // throws NumberFormatException\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Maps in Kotlin\nDESCRIPTION: This snippet demonstrates different ways to retrieve values from a map, including using get(), getValue(), getOrElse(), and getOrDefault() functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n    println(numbersMap.get(\"one\"))\n    println(numbersMap[\"one\"])\n    println(numbersMap.getOrDefault(\"four\", 10))\n    println(numbersMap[\"five\"])               // null\n    //numbersMap.getValue(\"six\")      // exception!\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Kotlin\nDESCRIPTION: This snippet demonstrates string interpolation in Kotlin. Variables can be directly embedded within strings using the `$` symbol, making string formatting more readable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(\"Name $name\")\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific kotlinx Library Dependency in Kotlin\nDESCRIPTION: This snippet demonstrates how to add a kotlinx library dependency to a specific platform source set in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        jvmMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Property Values in a Map via Property Delegation - Kotlin\nDESCRIPTION: Demonstrates mapping property accessor calls to a map's entries using delegated properties. This approach simplifies dynamic property handling for formats like JSON or external data, associating property names with map keys. The required dependency is a standard Kotlin map.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only List in Kotlin\nDESCRIPTION: This snippet shows how to create a read-only list in Kotlin using the `listOf()` function. The resulting list cannot be modified after creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval list = listOf(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Create a Line Chart with Kandy - Kotlin\nDESCRIPTION: Creates a line chart visualizing temperature data for different cities using the Kandy library.  It accesses columns from a DataFrame for x-axis (Month), y-axis (Temperature), and color-coding (City).  Categorical scales are customized for city colors, and line width is set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-visualization.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndf.plot {\n    line {\n        // Accesses the DataFrame's columns used for the X and Y axes \n        x(Month)\n        y(Temperature)\n        // Accesses the DataFrame's column used for categories and sets colors for these categories \n        color(City) {\n            scale = categorical(\"Berlin\" to Color.PURPLE, \"Madrid\" to Color.ORANGE, \"Caracas\" to Color.GREEN)\n        }\n        // Customizes the line's size\n        width = 1.5\n    }\n    // Customizes the chart's layout size\n    layout.size = 1000 to 450\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Objects with Sealed Hierarchies\nDESCRIPTION: Demonstrates how `data object` declarations can be used effectively within sealed hierarchies, specifically with sealed interfaces and classes. The example shows `EndOfFile` declared as a `data object` to automatically inherit the `toString()` function, maintaining symmetry with `data class` declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface ReadResult\ndata class Number(val number: Int) : ReadResult\ndata class Text(val text: String) : ReadResult\ndata object EndOfFile : ReadResult\n\nfun main() {\n    println(Number(7)) \n    // Number(number=7)\n    println(EndOfFile) \n    // EndOfFile\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering a List in Kotlin\nDESCRIPTION: This snippet demonstrates how to filter a list in Kotlin using the `filter` function. It shows two ways to achieve the same result: using a lambda expression with an explicit parameter and using the `it` keyword for implicit parameter access.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval positives = list.filter { x -> x > 0 }\nval positives = list.filter { it > 0 }\n```\n\n----------------------------------------\n\nTITLE: Using also Scope Function with it Reference in Kotlin\nDESCRIPTION: Shows the also scope function which uses 'it' to reference the context object and returns the object itself, making it useful for side effects in call chains.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\nfun writeToLog(message: String) {\n    println(\"INFO: $message\")\n}\n\nfun main() {\n    fun getRandomInt(): Int {\n        return Random.nextInt(100).also {\n            writeToLog(\"getRandomInt() generated value $it\")\n        }\n    }\n    \n    val i = getRandomInt()\n    println(i)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Kotlin Source Directory for JavaScript Target - Groovy\nDESCRIPTION: This Groovy DSL code snippet configures the main Kotlin source set to include 'src/main/myKotlin' as an additional source directory. This is used when separating Kotlin and Java code for Kotlin/JS projects and ensures the correct files are compiled for the JS target. Add this snippet to your build.gradle file when customizing source layout.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_26\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        main.kotlin.srcDirs += 'src/main/myKotlin'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Receiver with Extension Function\nDESCRIPTION: This code showcases the use of extension functions with nullable receiver types.  The `toString()` function is called on a nullable `Person` object. When invoked on a `null` value, it safely returns the string `\"null\"` without throwing an exception. This example requires the `Person` data class to be defined.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun main() {\n    // Assigns null to a nullable Person object stored in the person variable\n    val person: Person? = null\n\n    // Applies .toString to the nullable person variable and prints a string\n    println(person.toString())\n    // null\n}\n\n// Defines a simple Person class\ndata class Person(val name: String)\n//sampleEnd\n```\n\n----------------------------------------\n\nTITLE: Enable Multi-Dollar Interpolation Gradle Kotlin\nDESCRIPTION: This snippet demonstrates how to enable the multi-dollar string interpolation feature in a Gradle build file using the `freeCompilerArgs.add(\"-Xmulti-dollar-interpolation\")` option. This integrates the feature into the build process for Kotlin projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nkotlin {\n    compilerOptions {\n        freeCompilerArgs.add(\"-Xmulti-dollar-interpolation\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullability Handling with Explicit Type and Check - Kotlin\nDESCRIPTION: Shows how to accept nullable arguments in Kotlin by declaring the parameter type as String? and then doing an explicit null check within the function. If the parameter is not null, returns its length; otherwise, returns zero. This guards against NullPointerException and exhibits Kotlin's explicit nullable type design.\nDependencies: None. Input: a: String? (nullable). Output: Int (length if not null; 0 otherwise).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\nfun stringLength(a: String?): Int = if (a != null) a.length else 0\n```\n\n----------------------------------------\n\nTITLE: Declaring Read-only and Mutable Lists in Kotlin\nDESCRIPTION: Demonstrates how to create read-only lists using listOf() and mutable lists using mutableListOf() with explicit type declaration. Shows the output when printing these lists.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    // Read only list\n    val readOnlyShapes = listOf(\"triangle\", \"square\", \"circle\")\n    println(readOnlyShapes)\n    // [triangle, square, circle]\n    \n    // Mutable list with explicit type declaration\n    val shapes: MutableList<String> = mutableListOf(\"triangle\", \"square\", \"circle\")\n    println(shapes)\n    // [triangle, square, circle]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application Entry Point in Kotlin\nDESCRIPTION: This snippet provides the main entry point for the Spring Boot application in Kotlin, including the application class declaration and the main() function. It demonstrates the use of Spring Boot annotations and functions to bootstrap the application. Dependencies include Spring Boot and the kotlin-spring Gradle plugin. The code expects the surrounding Spring Boot project context. No inputs are required; output is the running application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage demo\\n\\nimport org.springframework.boot.autoconfigure.SpringBootApplication\\nimport org.springframework.boot.runApplication\\n\\n@SpringBootApplication\\nclass DemoApplication\\n\\nfun main(args: Array<String>) {\\n    runApplication<DemoApplication>(*args)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Prefix/Suffix using removeSurrounding in Kotlin\nDESCRIPTION: Uses the Kotlin standard library function `removeSurrounding` to remove the specified delimiter ('##') if it exists as both a prefix and a suffix of the string. This is a more direct alternative to regex for this specific task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val input = \"##place##holder##\"\n    val result = input.removeSurrounding(\"##\")\n    println(result)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JDK Version for Specific Tasks Using Task DSL (Kotlin)\nDESCRIPTION: Configures specific Gradle tasks to use a given JDK version with Kotlin DSL, providing task-level control over JDK settings. Replace `<MAJOR_JDK_VERSION>` with the preferred version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval service = project.extensions.getByType<JavaToolchainService>()\nval customLauncher = service.launcherFor {\n    languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>))\n}\nproject.tasks.withType<UsesKotlinJavaToolchain>().configureEach {\n    kotlinJavaToolchain.toolchain.use(customLauncher)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Type in Kotlin\nDESCRIPTION: Shows how to filter elements by type in Kotlin using filterIsInstance<>() function. It demonstrates Kotlin's smart casts and more concise syntax for type filtering.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(null, 1, \"two\", 3.0, \"four\")\n    println(\"All String elements in upper case:\")\n    numbers.filterIsInstance<String>().forEach {\n        println(it.uppercase())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function with Default Arguments - Kotlin\nDESCRIPTION: Illustrates defining a function where some parameters have default values, simplifying calls and reducing overloads. In this example, 'off' and 'len' have defaults. Callers may omit these parameters, in which case defaults are used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun read(\n    b: ByteArray,\n    off: Int = 0,\n    len: Int = b.size,\n) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Defining, Instantiating, and Using a Functional Interface with a Lambda in Kotlin\nDESCRIPTION: This extended snippet defines an 'IntPredicate' functional interface and instantiates it with a lambda to check for even numbers. The 'main' function demonstrates calling the 'accept' method and printing the result. Dependencies include the Kotlin 1.4+ compiler; expected input is any integer, and output is Boolean.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface IntPredicate {\n   fun accept(i: Int): Boolean\n}\n\nval isEven = IntPredicate { it % 2 == 0 }\n\nfun main() {\n   println(\"Is 7 even? - ${isEven.accept(7)}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Elements from a Mutable List in Kotlin\nDESCRIPTION: Shows how to modify a mutable list by adding elements with the add() function and removing elements with the remove() function. Displays the list state after each operation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    val shapes: MutableList<String> = mutableListOf(\"triangle\", \"square\", \"circle\")\n    // Add \"pentagon\" to the list\n    shapes.add(\"pentagon\") \n    println(shapes)  \n    // [triangle, square, circle, pentagon]\n\n    // Remove the first \"pentagon\" from the list\n    shapes.remove(\"pentagon\") \n    println(shapes)  \n    // [triangle, square, circle]\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Two Variables in Kotlin\nDESCRIPTION: This snippet demonstrates how to swap two variables in Kotlin using the `also` function. The `also` function executes the provided block and returns the original object.  In this case it assigns `b` to `a` and then sets `b` to the original value of `a`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nvar a = 1\nvar b = 2\na = b.also { b = a }\n```\n\n----------------------------------------\n\nTITLE: Accessing Length of Non-Nullable String Kotlin\nDESCRIPTION: Illustrates accessing the `length` property of a non-nullable string variable. Since the variable is guaranteed to be non-null, accessing its properties is safe and does not require null checks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a non-null string to a variable\n    val a: String = \"abc\"\n    // Returns the length of a non-nullable variable\n    val l = a.length\n    print(l)\n    // 3\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Kotlin DataFrame to CSV\nDESCRIPTION: Exports a Kotlin DataFrame to a CSV file named 'sales-stats.csv'. This uses the `writeCSV()` function. Requires the `dataframe` library loaded with `%use dataframe`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// Export your data to CSV format\ndfSales.writeCSV(\"sales-stats.csv\")\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Secondary Constructor Delegation\nDESCRIPTION: Shows how secondary constructors delegate to the primary constructor using the `this` keyword. This ensures that the primary constructor's logic is always executed during object creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(val name: String) {\n    val children: MutableList<Person> = mutableListOf()\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single-Expression Functions in Kotlin\nDESCRIPTION: This snippet demonstrates how to define single-expression functions in Kotlin. If a function contains only a single expression, the curly braces can be omitted, and the expression can be directly assigned to the function name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nfun theAnswer() = 42\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun theAnswer(): Int {\n    return 42\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository Pod Dependencies in Kotlin Gradle Build File\nDESCRIPTION: Configures a Kotlin project with Pod dependencies from Git repositories using different versioning approaches: tag, branch, and commit. The example demonstrates using three different libraries with specific version selections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n\n        pod(\"SDWebImage\") {\n            source = git(\"https://github.com/SDWebImage/SDWebImage\") {\n                tag = \"5.20.0\"\n            }\n        }\n\n        pod(\"JSONModel\") {\n            source = git(\"https://github.com/jsonmodel/jsonmodel.git\") {\n                branch = \"key-mapper-class\"\n            }\n        }\n\n        pod(\"CocoaLumberjack\") {\n            source = git(\"https://github.com/CocoaLumberjack/CocoaLumberjack.git\") {\n                commit = \"3e7f595e3a459c39b917aacf9856cd2a48c4dbf3\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Kotlin Class\nDESCRIPTION: Demonstrates the simplest form of declaring a class in Kotlin using the `class` keyword. The braces can be omitted for an empty class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Printing Output in Kotlin\nDESCRIPTION: Examples showing how to print text using print and println functions in Kotlin, including printing numbers. The print function outputs text directly, whereas println adds a newline after printing the arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    print(\"Hello \")\n    print(\"world!\")\n//sampleEnd\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    println(\"Hello world!\")\n    println(42)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Reading Standard Input in Kotlin\nDESCRIPTION: This snippet demonstrates reading standard input in Kotlin and converting it to an integer safely. `readln().toIntOrNull()` returns null if the input cannot be converted to an integer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Reads a string and returns null if the input can't be converted into an integer. For example: Hi there!\nval wrongInt = readln().toIntOrNull()\nprintln(wrongInt)\n// null\n\n// Reads a string that can be converted into an integer and returns an integer. For example: 13\nval correctInt = readln().toIntOrNull()\nprintln(correctInt)\n// 13\n```\n\n----------------------------------------\n\nTITLE: Accessing Enclosing Scope Variables from Anonymous Objects Kotlin\nDESCRIPTION: This Kotlin code demonstrates how an anonymous object can access variables from its enclosing scope. The `countClicks` function uses an anonymous `MouseAdapter` to increment `clickCount` and `enterCount` variables defined in the function's scope. The `MouseAdapter` overrides the `mouseClicked` and `mouseEntered` methods, and the variables from the outer scope are accessible within these overridden methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.awt.event.MouseAdapter\nimport java.awt.event.MouseEvent\n\nfun countClicks(window: JComponent) {\n    var clickCount = 0\n    var enterCount = 0\n\n    // MouseAdapter provides default implementations for mouse event functions\n    // Simulates MouseAdapter handling mouse events\n    window.addMouseListener(object : MouseAdapter() {\n        override fun mouseClicked(e: MouseEvent) {\n            clickCount++\n        }\n\n        override fun mouseEntered(e: MouseEvent) {\n            enterCount++\n        }\n    })\n    // The clickCount and enterCount variables are accessible within the object expression\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Predefined Source Sets Kotlin DSL\nDESCRIPTION: Demonstrates how to access predefined source sets in a Kotlin Multiplatform project using Kotlin Gradle DSL.  The `commonMain` source set is accessed using `by getting`. This allows for configuration or modification of the source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val commonMain by getting { /* ... */ }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values with Data Classes in Kotlin\nDESCRIPTION: This example demonstrates returning two values from a function using a data class. The destructuring declaration extracts values from an object of a data class, which has the `componentN()` functions automatically declared.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Result(val result: Int, val status: Status)\nfun function(...): Result {\n    // computations\n    \n    return Result(result, status)\n}\n\n// Now, to use this function:\nval (result, status) = function(...)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unrestricted Builder Inference in Kotlin\nDESCRIPTION: Shows usage of the new unrestricted builder inference feature, allowing previously prohibited calls inside lambda arguments of generic builder functions like buildList and buildMap.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@kotlin.ExperimentalStdlibApi\nval list = buildList {\n    add(\"a\")\n    add(\"b\")\n    set(1, null)\n    val x = get(1)\n    if (x != null) {\n        removeAt(1)\n    }\n}\n\n@kotlin.ExperimentalStdlibApi\nval map = buildMap {\n    put(\"a\", 1)\n    put(\"b\", 1.1)\n    put(\"c\", 2f)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kapt with Android Target in Kotlin Multiplatform\nDESCRIPTION: Example showing how to configure Kotlin Annotation Processing Tool (kapt) with an Android target in a multiplatform project. Due to limitations, kapt dependencies must be configured in a top-level dependencies block after the Android target is created.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget { /* ... */ }\n}\n\ndependencies {\n    kapt(\"com.my.annotation:processor:1.0.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Methods with Sealed Classes in Kotlin\nDESCRIPTION: This snippet shows how to use sealed classes to represent different payment methods in an e-commerce system. It defines a Payment sealed class with CreditCard, PayPal, and Cash subclasses, and demonstrates how to process these payment types in a type-safe manner.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class Payment {\n    data class CreditCard(val number: String, val expiryDate: String) : Payment()\n    data class PayPal(val email: String) : Payment()\n    data object Cash : Payment()\n}\n\nfun processPayment(payment: Payment) { \n    when (payment) {\n        is Payment.CreditCard -> processCreditCardPayment(payment.number, payment.expiryDate)\n        is Payment.PayPal -> processPayPalPayment(payment.email)\n        is Payment.Cash -> processCashPayment() \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Setter Implementation in Kotlin\nDESCRIPTION: Example of a property with a custom setter that processes the assigned value. The setter parses a string representation and updates other properties accordingly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nvar stringRepresentation: String\n    get() = this.toString()\n    set(value) {\n        setDataFromString(value) // parses the string and assigns values to other properties\n    }\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class Header Formatting - Multiple Lines\nDESCRIPTION: This snippet shows the formatting guidelines for class headers with numerous constructor parameters, placing each parameter on a separate line with indentation.  It also illustrates inheritance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(\n    id: Int,\n    name: String,\n    surname: String\n) : Human(id, name) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: When Statement Kotlin\nDESCRIPTION: This snippet illustrates the use of a 'when' statement in Kotlin. It checks the value of a string variable ('obj') and prints a greeting based on its value.  It uses the 'else' clause as a default case. It needs Kotlin version 1.3 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val obj = \"Hello\"\n\n    when (obj) {\n        // Checks whether obj equals to \"1\"\n        \"1\" -> println(\"One\")\n        // Checks whether obj equals to \"Hello\"\n        \"Hello\" -> println(\"Greeting\")\n        // Default statement\n        else -> println(\"Unknown\")     \n    }\n    // Greeting\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Analyzing Kotlin Class Metadata\nDESCRIPTION: This comprehensive Kotlin snippet demonstrates how to parse metadata using readLenient(), analyze class-level details with kmClass, and retrieve file-level declarations with kmPackage. It includes error handling and prints various metadata information.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports the necessary libraries\nimport kotlin.metadata.jvm.*\nimport kotlin.metadata.*\n\nfun main() {\n    // Specifies the fully qualified class name\n    val className = \"org.example.SampleClass\"\n\n    try {\n        // Retrieves the class object for the specified name\n        val clazz = Class.forName(className)\n\n        // Retrieves the @Metadata annotation\n        val metadataAnnotation = clazz.getAnnotation(Metadata::class.java)\n        if (metadataAnnotation != null) {\n            println(\"Kotlin Metadata found for class: $className\")\n\n            // Parses metadata using the readLenient() function\n            val metadata = KotlinClassMetadata.readLenient(metadataAnnotation)\n            when (metadata) {\n                is KotlinClassMetadata.Class -> {\n                    val kmClass = metadata.kmClass\n                    println(\"Class name: ${kmClass.name}\")\n\n                    // Iterates over functions and checks visibility\n                    kmClass.functions.forEach { function ->\n                        val visibility = function.visibility\n                        println(\"Function: ${function.name}, Visibility: $visibility\")\n                    }\n                }\n                is KotlinClassMetadata.FileFacade -> {\n                    val kmPackage = metadata.kmPackage\n\n                    // Iterates over functions and checks visibility\n                    kmPackage.functions.forEach { function ->\n                        val visibility = function.visibility\n                        println(\"Function: ${function.name}, Visibility: $visibility\")\n                    }\n                }\n                else -> {\n                    println(\"Unsupported metadata type: $metadata\")\n                }\n            }\n        } else {\n            println(\"No Kotlin Metadata found for class: $className\")\n        }\n    } catch (e: ClassNotFoundException) {\n        println(\"Class not found: $className\")\n    } catch (e: Exception) {\n        println(\"Error processing metadata: ${e.message}\")\n        e.printStackTrace()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: If-Not-Null-Else Shorthand in Kotlin\nDESCRIPTION: This snippet demonstrates the if-not-null-else shorthand using the Elvis operator `?:`. If the expression before `?:` is null, the expression after `?:` is evaluated and returned. It shows both simple and more complex fallback values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval files = File(\"Test\").listFiles()\n\n// For simple fallback values:\nprintln(files?.size ?: \"empty\") // if files is null, this prints \"empty\"\n\n// To calculate a more complicated fallback value in a code block, use `run`\nval filesSize = files?.size ?: run { \n    val someSize = getSomeSize()\n    someSize * 2\n}\nprintln(filesSize)\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties in Kotlin\nDESCRIPTION: Demonstrates how to access and modify properties in Kotlin. This function creates a new Address instance and copies values from an existing one, showing property access and assignment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun copyAddress(address: Address): Address {\n    val result = Address() // there's no 'new' keyword in Kotlin\n    result.name = address.name // accessors are called\n    result.street = address.street\n    // ...\n    return result\n}\n```\n\n----------------------------------------\n\nTITLE: When as If-Else Replacement Kotlin\nDESCRIPTION: Shows how to use 'when' as a replacement for an 'if-else if' chain, especially when dealing with multiple boolean expressions.  The first branch with a 'true' condition is executed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen {\n    x.isOdd() -> print(\"x is odd\")\n    y.isEven() -> print(\"y is even\")\n    else -> print(\"x+y is odd\")\n}\n```\n\n----------------------------------------\n\nTITLE: Managing UI States with Sealed Classes in Kotlin\nDESCRIPTION: This snippet demonstrates how to use sealed classes to represent different UI states in an application. It defines a UIState sealed class with Loading, Success, and Error subclasses, and shows how to handle these states in an updateUI function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class UIState { \n    data object Loading : UIState()\n    data class Success(val data: String) : UIState()\n    data class Error(val exception: Exception) : UIState()\n}\n\nfun updateUI(state: UIState) { \n    when (state) {\n        is UIState.Loading -> showLoadingIndicator()\n        is UIState.Success -> showData(state.data)\n        is UIState.Error -> showError(state.exception) \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the kapt Plugin with Gradle Kotlin DSL - Kotlin\nDESCRIPTION: Demonstrates how to apply the kapt plugin in a Gradle build using Kotlin DSL. Requires Gradle 5.0+ and the correct Kotlin plugin version. This configuration enables annotation processing with kapt in Kotlin projects via the `plugins` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"kapt\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Kotlin lateinit Object Property as Static Field in Java\nDESCRIPTION: Illustrates that a `lateinit var` property (`provider`) declared in a Kotlin `object` (`Singleton`) is exposed as a static field in the corresponding Java class (`Singleton`). The visibility of the Java field matches the visibility of the Kotlin property's setter, and it is non-final, allowing assignment from Java (`Singleton.provider = new Provider();`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Singleton {\n    lateinit var provider: Provider\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// Java\nSingleton.provider = new Provider();\n// public static non-final field in Singleton class\n```\n\n----------------------------------------\n\nTITLE: Resolving Multiple Inheritance Ambiguity with super<Type> Calls in Kotlin\nDESCRIPTION: Explains how to explicitly resolve method ambiguity when inheriting from multiple supertypes that provide competing implementations. Square extends both Rectangle (class) and Polygon (interface) which both declare draw(), so draw() must be overridden and each super's version invoked explicitly using super<Rectangle> and super<Polygon>. Provides a blueprint for diamond inheritance and classic method resolution scenarios in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Rectangle {\n    open fun draw() { /* ... */ }\n}\n\ninterface Polygon {\n    fun draw() { /* ... */ } // interface members are 'open' by default\n}\n\nclass Square() : Rectangle(), Polygon {\n    // The compiler requires draw() to be overridden:\n    override fun draw() {\n        super<Rectangle>.draw() // call to Rectangle.draw()\n        super<Polygon>.draw() // call to Polygon.draw()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin mutable property reference\nDESCRIPTION: Demonstrates how to use a reference to a mutable property (declared with `var`) to change its value. The `KMutableProperty0` type provides a `set()` method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nvar y = 1\n\nfun main() {\n    ::y.set(2)\n    println(y)\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Processing with Sequence in Kotlin\nDESCRIPTION: Shows lazy collection processing with Sequence where operations are performed element by element and only when a terminal operation is called, potentially improving performance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val words = \"The quick brown fox jumps over the lazy dog\".split(\" \")\n    //convert the List to a Sequence\n    val wordsSequence = words.asSequence()\n\n    val lengthsSequence = wordsSequence.filter { println(\"filter: $it\"); it.length > 3 }\n        .map { println(\"length: ${it.length}\"); it.length }\n        .take(4)\n\n    println(\"Lengths of first 4 words longer than 3 chars\")\n    // terminal operation: obtaining the result as a List\n    println(lengthsSequence.toList())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Kotlin Language Version via Gradle Kotlin DSL in Kotlin\nDESCRIPTION: This Kotlin DSL snippet configures the Kotlin language version for compiling sources in a Gradle build. It requires the presence of the Gradle Kotlin plugin and uses the org.jetbrains.kotlin.gradle.dsl.KotlinVersion object to specify the desired languageVersion in the compilerOptions block. Inputs are the desired language version and the DSL block; output is the project configured to use a specific Kotlin language feature set. Limitation: Only valid Kotlin version constants should be used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.%gradleLanguageVersion%)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Property Declaration in Constructor\nDESCRIPTION: Demonstrates the concise syntax for declaring properties directly in the primary constructor. `val` indicates read-only, and `var` indicates mutable properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(val firstName: String, val lastName: String, var age: Int)\n```\n\n----------------------------------------\n\nTITLE: Get First Item of a Possibly Empty Collection in Kotlin\nDESCRIPTION: This snippet demonstrates how to get the first item of a collection safely, even if the collection is empty, using `firstOrNull()` in conjunction with the Elvis operator.  If the collection is empty, `firstOrNull()` returns null, triggering the Elvis operator to return the provided default value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nval emails = ... // might be empty\nval mainEmail = emails.firstOrNull() ?: \"\"\n```\n\n----------------------------------------\n\nTITLE: Smart casts with control flow in Kotlin\nDESCRIPTION: Shows how smart casts work with various control flow structures in Kotlin, including 'when' expressions and 'while' loops, allowing type-safe operations without explicit casts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (x) {\n    is Int -> print(x + 1)\n    is String -> print(x.length + 1)\n    is IntArray -> print(x.sum())\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON to a Kotlin Object\nDESCRIPTION: This code snippet shows how to deserialize a JSON string into a Kotlin object using the kotlinx.serialization library. It uses Json.decodeFromString() to convert a JSON string into a Data object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.decodeFromString\n\n@Serializable\ndata class Data(val a: Int, val b: String)\n\nfun main() {\n   val obj = Json.decodeFromString<Data>(\"{\\\"a\\\":42, \\\"b\\\": \\\"str\\\"}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Platform-Specific Classes with Expected/Actual\nDESCRIPTION: Shows how to integrate with existing platform classes by using the expected/actual pattern, allowing the JVM implementation to extend a platform class while maintaining a common API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Identity {\n    val login: String = System.getProperty(\"user.name\") ?: \"none\"\n    val pid: Long = ProcessHandle.current().pid()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect class CommonIdentity() {\n    val userName: String\n    val processID: Long\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual class CommonIdentity {\n    actual val userName = getlogin()?.toKString() ?: \"None\"\n    actual val processID = getpid().toLong()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual class CommonIdentity : Identity() {\n    actual val userName = login\n    actual val processID = pid\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Data Class in Kotlin for Messages\nDESCRIPTION: This code snippet demonstrates how to define a Kotlin data class for representing message objects with id and text properties. The data class is serializable and ready for use with REST controllers or database mapping. No dependencies are required beyond core Kotlin. Inputs are the id and text fields; output is the Message object instance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Message(val id: String?, val text: String)\\n\n```\n\n----------------------------------------\n\nTITLE: Manipulating Mutable List Elements in Kotlin\nDESCRIPTION: This snippet demonstrates various write operations on MutableList in Kotlin, such as adding, removing, updating, and shuffling elements. It requires Kotlin 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collections-overview.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.add(5)\n    numbers.removeAt(1)\n    numbers[0] = 0\n    numbers.shuffle()\n    println(numbers)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read-Only Property Delegate in Kotlin\nDESCRIPTION: This snippet demonstrates how to define a custom read-only property delegate by implementing the operator function getValue() in Kotlin. The delegate is used with a val property and must return a result of the expected property type. It requires the Kotlin standard reflection API (KProperty) and is typically used when you want to encapsulate property retrieval logic. The inputs are the property owner (thisRef) and the reflection property object; output is the delegated value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Resource\n\nclass Owner {\n    val valResource: Resource by ResourceDelegate()\n}\n\nclass ResourceDelegate {\n    operator fun getValue(thisRef: Owner, property: KProperty<*>): Resource {\n        return Resource()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Map Entry in Kotlin\nDESCRIPTION: This snippet shows how to access and modify a map entry in Kotlin using the bracket notation.  Note: This example assumes the map is mutable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n\n----------------------------------------\n\nTITLE: Execute a Statement if Null in Kotlin\nDESCRIPTION: This snippet demonstrates how to throw an exception if a value is null using the Elvis operator `?:`.  If the expression before the elvis operator is null, the expression after it is executed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval values = ...\nval email = values[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n\n----------------------------------------\n\nTITLE: Configure Properties of an Object (apply) - Kotlin\nDESCRIPTION: This snippet demonstrates using the `apply` function to configure the properties of an object. `apply` is especially useful for configuring properties that are not set in the constructor.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval myRectangle = Rectangle().apply {\n    length = 4\n    breadth = 5\n    color = 0xFAFAFA\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Kotlin Spring Boot Application\nDESCRIPTION: Defines the main class for a Kotlin Spring Boot application. It includes necessary annotations for auto-configuration and starts the application using `runApplication`. This snippet forms the entry point of the application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// DemoApplication.kt\npackage demo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<DemoApplication>(*args)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Property Delegate with getValue and setValue - Kotlin\nDESCRIPTION: Defines a custom property delegate by implementing operator functions getValue and setValue. The getValue method provides a message incorporating the property and instance details, while setValue prints details about assignments. This pattern enables custom logic on property access and modifications without requiring explicit interface implementation. Depends on the Kotlin standard library and reflection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.reflect.KProperty\n\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n        return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n    }\n \n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n        println(\"$value has been assigned to '${property.name}' in $thisRef.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Function, Omitting Parameters with Default Values - Kotlin\nDESCRIPTION: Demonstrates calling a function and skipping all optional parameters, relying entirely on default values. Emphasizes Kotlin's support for concise calls in presence of defaults.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nreformat(\"This is a long String!\")\n```\n\n----------------------------------------\n\nTITLE: Declaring a Singleton Object in Kotlin\nDESCRIPTION: Demonstrates how to declare a singleton object using the `object` keyword in Kotlin. This example shows a `DataProviderManager` object that manages a list of data providers, demonstrating the basic structure and functionality of object declarations. It includes registration and retrieval of data providers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Declares a Singleton object to manage data providers\nobject DataProviderManager {\n    private val providers = mutableListOf<DataProvider>()\n\n    // Registers a new data provider\n    fun registerDataProvider(provider: DataProvider) {\n        providers.add(provider)\n    }\n\n    // Retrieves all registered data providers\n    val allDataProviders: Collection<DataProvider> \n        get() = providers\n}\n\n// Example data provider interface\ninterface DataProvider {\n    fun provideData(): String\n}\n\n// Example data provider implementation\nclass ExampleDataProvider : DataProvider {\n    override fun provideData(): String {\n        return \"Example data\"\n    }\n}\n\nfun main() {\n    // Creates an instance of ExampleDataProvider\n    val exampleProvider = ExampleDataProvider()\n\n    // To refer to the object, use its name directly\n    DataProviderManager.registerDataProvider(exampleProvider)\n\n    // Retrieves and prints all data providers\n    println(DataProviderManager.allDataProviders.map { it.provideData() })\n    // [Example data]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Set Dependencies in Groovy DSL\nDESCRIPTION: This snippet demonstrates how to declare dependencies for Kotlin source sets within the `kotlin` block of a Gradle build script using the Groovy DSL. It uses the `api` and `implementation` dependency configurations for `commonMain` and `jvmMain` source sets respectively. Dependencies must be configured within a `sourceSets` block to be associated with a particular source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_33\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                api 'com.example:foo-metadata:1.0'\n            }\n        }\n        jvmMain {\n            dependencies {\n                implementation 'com.example:foo-jvm:1.0'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Partitioning Collections with partition() in Kotlin\nDESCRIPTION: This code demonstrates how to use partition() to divide a collection into two lists based on a predicate: one with elements matching the predicate and the other with those that don't.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val (match, rest) = numbers.partition { it.length > 3 }\n\n    println(match)\n    println(rest)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Another Multiplatform Project in Kotlin\nDESCRIPTION: This snippet demonstrates how to add a dependency on another multiplatform project in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(project(\":some-other-multiplatform-module\"))\n        }\n        androidMain.dependencies {\n            // platform part of :some-other-multiplatform-module will be added automatically\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NPE with Not-Null Assertion\nDESCRIPTION: This code demonstrates the NullPointerException (NPE) that occurs when using the not-null assertion operator (!!) on a null value. This emphasizes the risk associated with using the !! operator when the value could be null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns null to a nullable variable  \n    val b: String? = null\n    // Treats b as non-null and tries to access its length\n    val l = b!!.length\n    println(l) \n    // Exception in thread \"main\" java.lang.NullPointerException\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Kotlin Array Elements\nDESCRIPTION: Illustrates how to access and modify elements within Kotlin arrays using the indexed access operator (`[]`). It shows changing values at specific indices in both a single-dimensional and a two-dimensional array.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val simpleArray = arrayOf(1, 2, 3)\n    val twoDArray = Array(2) { Array<Int>(2) { 0 } }\n\n    // Accesses the element and modifies it\n    simpleArray[0] = 10\n    twoDArray[0][0] = 2\n\n    // Prints the modified element\n    println(simpleArray[0].toString()) // 10\n    println(twoDArray[0][0].toString()) // 2\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections in Natural Order in Kotlin\nDESCRIPTION: Shows how to use sorted() and sortedDescending() functions to sort collections according to their natural order, both ascending and descending.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n\n    println(\"Sorted ascending: ${numbers.sorted()}\")\n    println(\"Sorted descending: ${numbers.sortedDescending()}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Multiple Arguments and Named Arguments - Kotlin\nDESCRIPTION: Shows how to call a function that utilizes both positional and named arguments, along with default parameter values. Highlights Kotlin's flexibility in argument ordering and optionality.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nreformat(\n    \"String!\",\n    false,\n    upperCaseFirstLetter = false,\n    divideByCamelHumps = true,\n    '_'\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence in a Collection (Kotlin)\nDESCRIPTION: This snippet demonstrates how to check for the presence of an element in a collection using the `in` and `!in` operators. These operators provide a concise way to determine if an element exists within a collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nif (\"john@example.com\" in emailsList) { ... }\n\nif (\"jane@example.com\" !in emailsList) { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Layer for Message Operations in Kotlin Using Spring\nDESCRIPTION: This snippet defines a Spring service class in Kotlin with methods for retrieving and saving Message data by delegating to a repository. The @Service annotation enables Spring component scanning. Dependencies are Spring Framework, MessageRepository, and the previously defined Message class. Inputs are Message objects for saving or retrieving; outputs are lists of Message objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.stereotype.Service\\n \\n@Service\\nclass MessageService(val db: MessageRepository) {\\n\\n    fun findMessages(): List<Message> = db.findMessages()\\n\\n    fun post(message: Message){\\n        db.save(message)\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Actual Collection.addAll Signature with Upper-Bounded Wildcard (Covariance) in Java\nDESCRIPTION: Presents the correct signature for `Collection.addAll` in Java, using the upper-bounded wildcard `? extends E`. This makes the parameter covariant, allowing the method to accept a collection of `E` or any subtype of `E`, enabling scenarios like copying from `Collection<String>` to `Collection<Object>`. It restricts writing to the `items` collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Java\ninterface Collection<E> ... {\n    void addAll(Collection<? extends E> items);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Functional (SAM) Interface in Kotlin\nDESCRIPTION: This snippet defines a functional interface in Kotlin using the 'fun interface' modifier. The interface 'KRunnable' declares a single abstract member function 'invoke', marking it as a SAM interface. There are no dependencies, and this pattern is required to enable SAM conversions for concise lambda instantiation. No arguments or return values are specified; this interface simply models a parameterless action.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface KRunnable {\n   fun invoke()\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating via a Final val with a Backing Field in Kotlin\nDESCRIPTION: This snippet highlights delegation from a class property to a module-level final val delegate. When the delegate is immutable and has a default getter, the compiler optimizes the delegation to avoid using the $delegate field. This is advantageous for repeat deployments of standard delegates. The val can be provided by any ReadOnlyProperty implementation in the project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval impl: ReadOnlyProperty<Any?, String> = ...\n\nclass A {\n    val s: String by impl\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Properties in Kotlin\nDESCRIPTION: Example of declaring various properties in a Kotlin class. This demonstrates defining mutable properties with different types, including nullable types, all with initialization values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Address {\n    var name: String = \"Holmes, Sherlock\"\n    var street: String = \"Baker\"\n    var city: String = \"London\"\n    var state: String? = null\n    var zip: String = \"123456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Kotlin List Elements\nDESCRIPTION: Demonstrates basic operations on a List in Kotlin, showcasing indexed access, size retrieval, and element lookup. Requires Kotlin 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collections-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(\"Number of elements: ${numbers.size}\")\n    println(\"Third element: ${numbers.get(2)}\")\n    println(\"Fourth element: ${numbers[3]}\")\n    println(\"Index of element \\\"two\\\" ${numbers.indexOf(\"two\")}\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using let Scope Function in Kotlin\nDESCRIPTION: Demonstrates using the let scope function to operate on a Person object. The let function uses 'it' to reference the context object and returns the lambda result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(var name: String, var age: Int, var city: String) {\n    fun moveTo(newCity: String) { city = newCity }\n    fun incrementAge() { age++ }\n}\n\nfun main() {\n    Person(\"Alice\", 20, \"Amsterdam\").let {\n        println(it)\n        it.moveTo(\"London\")\n        it.incrementAge()\n        println(it)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Data Class Example with Employee\nDESCRIPTION: This snippet defines a data class `Employee` with properties `name` (String) and `salary` (Int). The `salary` property is mutable to allow salary adjustments. The main function demonstrates how to create an instance of `Employee`, print it, increase the salary, and print it again.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// Write your code here\n\nfun main() {\n    val emp = Employee(\"Mary\", 20)\n    println(emp)\n    emp.salary += 10\n    println(emp)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Employee(val name: String, var salary: Int)\n\nfun main() {\n    val emp = Employee(\"Mary\", 20)\n    println(emp)\n    emp.salary += 10\n    println(emp)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DTOs (POJOs/POCOs) in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a Data Transfer Object (DTO) in Kotlin using a data class. Data classes automatically generate getters and setters (for `var` properties), `equals()`, `hashCode()`, `toString()`, `copy()`, and `componentN()` functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Customer(val name: String, val email: String)\n```\n\n----------------------------------------\n\nTITLE: Call Multiple Methods on an Object Instance (with) - Kotlin\nDESCRIPTION: This snippet demonstrates using the `with` function to call multiple methods on the same object instance without repeatedly referencing the object.  It applies the block directly to the object allowing simplified syntax within the block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for (i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Methods from Kotlin Object Functions with @JvmStatic\nDESCRIPTION: Shows how applying `@JvmStatic` to a function (`callStatic`) in a Kotlin `object` (`Obj`) generates a static method callable directly on the Java class (`Obj.callStatic()`). Without the annotation, functions like `callNonStatic` must be called through the singleton `INSTANCE` (`Obj.INSTANCE.callNonStatic()`). Both static and instance calls work for the annotated function via the `INSTANCE` field.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Obj {\n    @JvmStatic fun callStatic() {}\n    fun callNonStatic() {}\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nObj.callStatic(); // works fine\nObj.callNonStatic(); // error\nObj.INSTANCE.callNonStatic(); // works, a call through the singleton instance\nObj.INSTANCE.callStatic(); // works too\n```\n\n----------------------------------------\n\nTITLE: Configure Gradle repositories Kotlin\nDESCRIPTION: This code snippet configures the Gradle settings to use the Maven Central repository for downloading Kotlin artifacts and dependencies. It ensures that Gradle correctly resolves dependencies by specifying the `mavenCentral()` and `gradlePluginPortal()` repositories within the `pluginManagement` block in the `settings.gradle.kts` file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\npluginManagement {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Retrieval by Position - Nullable and Fallback - Kotlin Collections - Kotlin\nDESCRIPTION: Illustrates safe retrieval from a List using elementAtOrNull() and elementAtOrElse() to avoid exceptions. elementAtOrNull() returns null for out-of-bounds indexes, while elementAtOrElse() computes a fallback value via a lambda expression. No dependencies beyond Kotlin standard library 1.3+. Inputs are out-of-bounds indexes; outputs are null or a string provided by the fallback lambda.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\\n    println(numbers.elementAtOrNull(5))\\n    println(numbers.elementAtOrElse(5) { index -> \"The value for index $index is undefined\"})\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Null Values in Kotlin\nDESCRIPTION: This function demonstrates how to check for null values using conditional expressions in Kotlin. It returns a description of a string based on whether it's null or empty.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun describeString(maybeString: String?): String {\n    if (maybeString != null && maybeString.length > 0) {\n        return \"String of length ${maybeString.length}\"\n    } else {\n        return \"Empty or null string\"\n    }\n}\n\nfun main() {\n    val nullString: String? = null\n    println(describeString(nullString))\n    // Empty or null string\n}\n```\n\n----------------------------------------\n\nTITLE: Using toIntOrNull() to Avoid NumberFormatException\nDESCRIPTION: This example shows how to use `toIntOrNull()` to safely convert a string to an integer, returning `null` if the string cannot be converted, thereby avoiding a `NumberFormatException`. This is useful when the string might not be a valid number.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval nonNumericString = \"not a number\"\n// Returns null, instead of NumberFormatException\nval number = nonNumericString.toIntOrNull()\nprintln(\"Converted number: $number\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods in Anonymous Enum Classes in Kotlin\nDESCRIPTION: This snippet shows how enum constants can declare their own anonymous classes with overridden methods in Kotlin. The enum ProtocolState declares an abstract method signal that each entry overrides individually, allowing entry-specific behaviors. No external dependencies are needed. Inputs and outputs are the enum entries themselves and the state transitions defined by signal. Each transition toggles between WAITING and TALKING.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\n```\n\n----------------------------------------\n\nTITLE: Using Safe-Call and let for Null-Safe Access - Kotlin\nDESCRIPTION: Demonstrates idiomatic Kotlin usage of the safe-call operator ?., followed by a 'let' scope function to process a property only if the receiver is not null. This pattern is concise and reduces boilerplate compared to explicit null checks.\nDependencies: findOrder() must be implemented. Input: Order? Output: processCustomer invoked only if order is non-null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\nval order = findOrder()\\n\\norder?.let {\\n    processCustomer(it.customer)\\n}\n```\n\n----------------------------------------\n\nTITLE: Using `groupingBy` and `eachCount` for Grouping and Counting in Kotlin\nDESCRIPTION: This snippet illustrates the use of the `groupingBy` function in Kotlin, which provides a lazy grouping mechanism. It's combined with `eachCount()` to efficiently group a list of strings by their first letter and count the number of elements within each group. The resulting map contains the first letters as keys and their corresponding counts as values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-grouping.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    // Groups the strings by their first letter using groupingBy() and counts the elements in each group\n    val grouped = numbers.groupingBy { it.first() }.eachCount()\n\n    // Iterates through each group and prints the key and its associated values\n    for ((key, count) in grouped) {\n        println(\"Key: $key, Count: $count\")\n        // Key: o, Count: 1\n        // Key: t, Count: 2\n        // Key: f, Count: 2\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XCFrameworks in Groovy DSL\nDESCRIPTION: Shows how to set up an XCFramework configuration in Groovy DSL to gather logic for multiple iOS target platforms and architectures into a single bundle that can be distributed via CocoaPods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig\n\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n\nkotlin {\n    def xcf = new XCFrameworkConfig(project)\n    def iosTargets = [iosX64(), iosArm64(), iosSimulatorArm64()]\n    \n    iosTargets.forEach {\n        it.binaries.framework {\n            baseName = 'shared'\n            xcf.add(it)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin JVM compilation options (Kotlin DSL)\nDESCRIPTION: This snippet configures Kotlin compiler options specifically for the 'main' compilation of the JVM target.  It accesses the `compileTaskProvider` to configure the `compilerOptions` and sets the JVM target to Java 1.8. It also demonstrates how to access the compilation output and runtime dependencies. Requires Gradle Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            compileTaskProvider.configure {\n                compilerOptions {\n                    // Set up the Kotlin compiler options for the 'main' compilation:\n                    jvmTarget.set(JvmTarget.JVM_1_8)\n                }\n            }\n        \n            compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n\n    // Configure all compilations of all targets:\n    compilerOptions {\n        allWarningsAsErrors.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Type Inference in Kotlin\nDESCRIPTION: Example showing how Kotlin can infer property types from initializers, demonstrating a property with an inferred type and implicit default accessors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvar initialized = 1 // has type Int, default getter and setter\n// var allByDefault // ERROR: explicit initializer required, default getter and setter implied\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Class Properties in Kotlin\nDESCRIPTION: This snippet demonstrates how to access and update the properties of a class instance in Kotlin. It shows accessing the `email` property, printing its value, updating it, and then printing the updated value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Contact(val id: Int, var email: String)\n\nfun main() {\n    val contact = Contact(1, \"mary@gmail.com\")\n    \n    // Prints the value of the property: email\n    println(contact.email)           \n    // mary@gmail.com\n\n    // Updates the value of the property: email\n    contact.email = \"jane@gmail.com\"\n    \n    // Prints the new value of the property: email\n    println(contact.email)           \n    // jane@gmail.com\n}\n```\n\n----------------------------------------\n\nTITLE: Using check() to Validate State in Kotlin\nDESCRIPTION: This Kotlin code shows how to use the check() function to validate the state of an object. If the condition within check() is false, an IllegalStateException is thrown. The getStateValue() function checks that 'someState' is not null or empty before returning its value. Demonstrates use of checkNotNull() as well.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var someState: String? = null\n\n    fun getStateValue(): String {\n\n        val state = checkNotNull(someState) { \"State must be set beforehand!\" }\n        check(state.isNotEmpty()) { \"State must be non-empty!\" }\n        return state\n    }\n    // If you uncomment the line below then the program fails with IllegalStateException\n    // getStateValue()\n\n    someState = \"\"\n\n    // If you uncomment the line below then the program fails with IllegalStateException\n    // getStateValue() \n    someState = \"non-empty-state\"\n\n    // This prints \"non-empty-state\"\n    println(getStateValue())\n}\n```\n\n----------------------------------------\n\nTITLE: Property Without Backing Field in Kotlin\nDESCRIPTION: Example of a property that doesn't require a backing field because it calculates its value on-the-fly from other properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval isEmpty: Boolean\n    get() = this.size == 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Publication for Kotlin Multiplatform Library\nDESCRIPTION: This snippet demonstrates how to set up the maven-publish plugin, specify group and version for the library, and configure publishing repositories in the build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-publish-lib.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    id(\"maven-publish\")\n}\n\ngroup = \"com.example\"\nversion = \"1.0\"\n\npublishing {\n    repositories {\n        maven {\n            //...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Expected and Actual Classes in Kotlin Multiplatform\nDESCRIPTION: Demonstrates declaring an expected class in commonMain and implementing actual versions for JVM and native platforms. The example shows how to handle platform-specific implementations of the Identity class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the commonMain source set:\nexpect class Identity() {\n    val userName: String\n    val processID: Int\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the jvmMain source set:\nactual class Identity {\n    actual val userName: String = System.getProperty(\"user.name\") ?: \"None\"\n    actual val processID: Long = ProcessHandle.current().pid()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the nativeMain source set:\nactual class Identity {\n    actual val userName: String = getlogin()?.toKString() ?: \"None\"\n    actual val processID: Long = getpid().toLong()\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic React Component with Kotlin/JS\nDESCRIPTION: Replaces the previous `Main.kt` content to demonstrate rendering a simple React component using Kotlin/JS. It finds the HTML element with the ID \"root\", creates a React root for it, and renders an `h1` element using the Kotlin React DSL (`ReactHTML.h1`). This serves as the first step in building the React UI entirely with Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.browser.document\nimport react.*\nimport emotion.react.css\nimport csstype.Position\nimport csstype.px\nimport react.dom.html.ReactHTML.h1\nimport react.dom.html.ReactHTML.h3\nimport react.dom.html.ReactHTML.div\nimport react.dom.html.ReactHTML.p\nimport react.dom.html.ReactHTML.img\nimport react.dom.client.createRoot\nimport kotlinx.serialization.Serializable\n\nfun main() {\n    val container = document.getElementById(\"root\") ?: error(\"Couldn't find root container!\")\n    createRoot(container).render(Fragment.create {\n        h1 {\n            +\"Hello, React+Kotlin/JS!\"\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Mutable Lists in Kotlin\nDESCRIPTION: Demonstrates how to remove an element at a specific position from a mutable list using the removeAt() function. When an element is removed, the indices of elements after it decrease by one.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(1, 2, 3, 4, 3)    \n    numbers.removeAt(1)\n    println(numbers)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the is Operator for Type Checking and Smart Casting in Kotlin\nDESCRIPTION: This snippet defines `getStringLength` function that checks if an input `obj` of type `Any` is an instance of `String` using the `is` operator. If the check is successful within the `if` block, Kotlin's smart casting automatically treats `obj` as a `String`, allowing safe access to its `length` property. If the object is not a String, the function returns null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj is String) {\n        // `obj` is automatically cast to `String` in this branch\n        return obj.length\n    }\n\n    // `obj` is still of type `Any` outside of the type-checked branch\n    return null\n}\n//sampleEnd\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"Getting the length of '$obj'. Result: ${getStringLength(obj) ?: \"Error: The object is not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n```\n\n----------------------------------------\n\nTITLE: Building Strings using the buildString Function in Kotlin\nDESCRIPTION: Demonstrates the use of Kotlin's `buildString` inline function, which takes a lambda with a `StringBuilder` receiver (`this`). Inside the lambda, `append` and `appendLine` are used to construct the string efficiently.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n       // Kotlin\n       val countDown = buildString {\n           for (i in 5 downTo 1) {\n               append(i)\n               appendLine()\n           }\n       }\n       println(countDown)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from a List by Index in Kotlin\nDESCRIPTION: This snippet demonstrates various ways to retrieve elements from a Kotlin list by index using functions such as 'get()', 'getOrNull()', and 'getOrElse()'. It requires the Kotlin standard library. Inputs are the list and index, and outputs are the retrieved element or null/default. An exception is thrown if the index is out of bounds for 'get()'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.get(0))\n    println(numbers[0])\n    //numbers.get(5)                         // exception!\n    println(numbers.getOrNull(5))             // null\n    println(numbers.getOrElse(5, {it}))        // 5\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Traverse a Map with Destructuring Declarations\nDESCRIPTION: Illustrates iterating over a map using destructuring declarations. Each map entry is represented as a pair, with keys and values extracted using `component1()` and `component2()`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfor ((key, value) in map) {\n   // do something with the key and the value\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Collections in Kotlin\nDESCRIPTION: Demonstrates the use of map(), mapIndexed(), mapNotNull(), and mapIndexedNotNull() functions to create new collections with transformed elements. Includes examples with filtering null results and using indices in transformations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-transformations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = setOf(1, 2, 3)\n    println(numbers.map { it * 3 })\n    println(numbers.mapIndexed { idx, value -> value * idx })\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = setOf(1, 2, 3)\n    println(numbers.mapNotNull { if ( it == 2) null else it * 3 })\n    println(numbers.mapIndexedNotNull { idx, value -> if (idx == 0) null else value * idx })\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(\"key1\" to 1, \"key2\" to 2, \"key3\" to 3, \"key11\" to 11)\n    println(numbersMap.mapKeys { it.key.uppercase() })\n    println(numbersMap.mapValues { it.value + it.key.length })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Structural Equality in Kotlin\nDESCRIPTION: This snippet demonstrates how to check structural equality between objects in Kotlin using the `==` operator, which calls the `equals()` function by default unless overridden for specific classes like value and data classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/equality.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n    var a = \"hello\"\n    var b = \"hello\"\n    var c = null\n    var d = null\n    var e = d\n\n    println(a == b)\n    // true\n    println(a == c)\n    // false\n    println(c == e)\n    // true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keys and Values Collections in Kotlin Maps\nDESCRIPTION: This example shows how to access the keys and values of a map as separate collections using the keys and values properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n    println(numbersMap.keys)\n    println(numbersMap.values)\n}\n```\n\n----------------------------------------\n\nTITLE: Measure Time Differences Kotlin\nDESCRIPTION: This code snippet demonstrates measuring time differences between `TimeMark` objects from the same time source using subtraction. It also shows how to compare `TimeMark` objects using comparison operators and prints the elapsed time.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\n\nfun main() {\n//sampleStart\n   val timeSource = TimeSource.Monotonic\n   val mark1 = timeSource.markNow()\n   Thread.sleep(500) // Sleep 0.5 seconds.\n   val mark2 = timeSource.markNow()\n\n   repeat(4) { n ->\n       val mark3 = timeSource.markNow()\n       val elapsed1 = mark3 - mark1\n       val elapsed2 = mark3 - mark2\n\n       println(\"Measurement 1.${n + 1}: elapsed1=$elapsed1, elapsed2=$elapsed2, diff=${elapsed1 - elapsed2}\")\n   }\n   \n   println(mark2 > mark1) // This is true, as mark2 was captured later than mark1.\n   // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Single-expression Function with Type Inference - Kotlin\nDESCRIPTION: Shows a single-expression function leveraging type inference for its return type. Reduces boilerplate in definitions for simple functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun double(x: Int) = x * 2\n```\n\n----------------------------------------\n\nTITLE: Destructuring in Kotlin Lambdas\nDESCRIPTION: Illustrates destructuring of lambda parameters with examples, showing how parameters of `Pair` or `Map.Entry` types are unpacked into multiple variables using `componentN()` functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.mapValues { entry -> \"${entry.value}!\" }\nmap.mapValues { (key, value) -> \"$value!\" }\n```\n\n----------------------------------------\n\nTITLE: Local Function with Closure over Outer Variable - Kotlin\nDESCRIPTION: Shows a local function accessing a variable from its enclosing function (closure), which simplifies the argument list. Demonstrates Kotlin's closure capabilities within nested functions, as in recursively traversing a graph.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nfun dfs(graph: Graph) {\n    val visited = HashSet<Vertex>()\n    fun dfs(current: Vertex) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v)\n    }\n\n    dfs(graph.vertices[0])\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Module System (JPMS) in Gradle Build - Kotlin\nDESCRIPTION: This Kotlin DSL code sets up the Kotlin Gradle plugin to support Java Modules (JPMS). It enables module path inference for Gradle versions <7.0 and configures the compileJava task to patch the module path with compiled Kotlin classes, enabling seamless Java/Kotlin mixed compilation. The snippet relies on the java plugin and appropriate settings for sourceSets. Replace 'YOUR_MODULE_NAME' with the actual JPMS module name in your project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n// Add the following three lines if you use a Gradle version less than 7.0\njava {\n    modularity.inferModulePath.set(true)\n}\n\ntasks.named(\"compileJava\", JavaCompile::class.java) {\n    options.compilerArgumentProviders.add(CommandLineArgumentProvider {\n        // Provide compiled Kotlin classes to javac – needed for Java/Kotlin mixed sources to work\n        listOf(\"--patch-module\", \"YOUR_MODULE_NAME=${sourceSets[\\\"main\\\"].output.asPath}\")\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Execute if Not Null in Kotlin\nDESCRIPTION: This snippet demonstrates how to execute a block of code only if a value is not null using the `let` function. The `let` function calls the specified block with the value as its argument, but only if the value is not null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nval value = ...\n\nvalue?.let {\n    ... // execute this block if not null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Entries to Mutable Maps in Kotlin\nDESCRIPTION: This snippet demonstrates how to add new entries to mutable maps using the put() and putAll() functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mutableMapOf(\"one\" to 1, \"two\" to 2)\n    numbersMap.put(\"three\", 3)\n    println(numbersMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Coroutines for Asynchronous Operations in Kotlin\nDESCRIPTION: This example illustrates the use of coroutines to handle asynchronous operations without changing the traditional programming model. It emphasizes the simplicity and platform independence of coroutines. Dependencies: Kotlin coroutine library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/async-programming.md#2025-04-22_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun postItem(item: Item) {\n    launch {\n        val token = preparePost()\n        val post = submitPost(token, item)\n        processPost(post)\n    }\n}\n\nsuspend fun preparePost(): Token {\n    // makes a request and suspends the coroutine\n    return suspendCoroutine { /* ... */ } \n}\n```\n\n----------------------------------------\n\nTITLE: Building Universal (Fat) Frameworks in Kotlin DSL\nDESCRIPTION: Demonstrates how to create a fat framework task in Kotlin DSL to merge frameworks for different platforms (watchOS 32-bit and 64-bit) into a single universal binary.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask\n\nkotlin {\n    // Create and configure the targets.\n    val watchos32 = watchosArm32(\"watchos32\")\n    val watchos64 = watchosArm64(\"watchos64\")\n    configure(listOf(watchos32, watchos64)) {\n        binaries.framework {\n            baseName = \"my_framework\"\n        }\n    }\n    // Create a task to build a fat framework.\n    tasks.register<FatFrameworkTask>(\"debugFatFramework\") {\n        // The fat framework must have the same base name as the initial frameworks.\n        baseName = \"my_framework\"\n        // The default destination directory is \"<build directory>/fat-framework\".\n        destinationDir = buildDir.resolve(\"fat-framework/debug\")\n        // Specify the frameworks to be merged.\n        from(\n            watchos32.binaries.getFramework(\"DEBUG\"),\n            watchos64.binaries.getFramework(\"DEBUG\")\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: If Expression in Kotlin\nDESCRIPTION: This snippet demonstrates how to use an `if` block as an expression in Kotlin. The `if` expression returns the value of the last expression in the executed branch.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nval y = if (x == 1) {\n    \"one\"\n} else if (x == 2) {\n    \"two\"\n} else {\n    \"other\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin JVM compilation options (Groovy DSL)\nDESCRIPTION: This snippet configures Kotlin compiler options for the 'main' compilation of the JVM target using the Groovy DSL.  It uses the `compilations.main` syntax to access the compilation and configure its `compilerOptions`, setting the JVM target to Java 1.8. It also demonstrates how to access the compilation output and runtime dependencies. Requires Gradle Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_23\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        compilations.main {\n            compileTaskProvider.configure {\n                compilerOptions {\n                    // Setup the Kotlin compiler options for the 'main' compilation:\n                    jvmTarget = JvmTarget.JVM_1_8\n                }\n            }\n        }\n\n        compilations.main.compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n\n    // Configure all compilations of all targets:\n    compilerOptions {\n        allWarningsAsErrors = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Initializer Blocks\nDESCRIPTION: Explains how initializer blocks are used to execute code during object creation. The blocks are executed in the order they appear within the class body, interleaved with property initializers. Dependencies: Kotlin standard library for println.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nclass InitOrderDemo(name: String) {\n    val firstProperty = \"First property: $name\".also(::println)\n    \n    init {\n        println(\"First initializer block that prints $name\")\n    }\n    \n    val secondProperty = \"Second property: ${name.length}\".also(::println)\n    \n    init {\n        println(\"Second initializer block that prints ${name.length}\")\n    }\n}\n//sampleEnd\n\nfun main() {\n    InitOrderDemo(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Simple For Loop Kotlin\nDESCRIPTION: Demonstrates a basic `for` loop in Kotlin, iterating over a collection and printing each item.  The example showcases the fundamental syntax of the `for` loop for simple iteration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (item in collection) print(item)\n```\n\n----------------------------------------\n\nTITLE: Safe List Access and Null Handling in Kotlin\nDESCRIPTION: Shows Kotlin's approach to safely accessing list elements and handling potential null values using built-in functions like firstOrNull() and getOrNull().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    // The same code as in Java:\n    val numbers = listOf(1, 2)\n    \n    println(numbers[0])  // Can throw IndexOutOfBoundsException if the collection is empty\n    //numbers.get(5)     // Exception!\n\n    // More abilities:\n    println(numbers.firstOrNull())\n    println(numbers.getOrNull(5)) // null\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Local Delegated Property with Lazy Initialization - Kotlin\nDESCRIPTION: Illustrates using a delegated property for a local variable, making the value lazy and efficient. The variable memoizedFoo is only computed on first access, and not at all if unused. Useful for optimizing resource-intensive computations in function scope. Requires a computeFoo lambda returning a Foo object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun example(computeFoo: () -> Foo) {\n    val memoizedFoo by lazy(computeFoo)\n\n    if (someCondition && memoizedFoo.isValid()) {\n        memoizedFoo.doSomething()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Backing Fields in Kotlin Properties\nDESCRIPTION: Example of using the 'field' identifier to reference a property's backing field in a custom setter. Shows validation logic that only allows positive values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nvar counter = 0 // the initializer assigns the backing field directly\n    set(value) {\n        if (value >= 0)\n            field = value\n            // counter = value // ERROR StackOverflow: Using actual name 'counter' would make setter recursive\n    }\n```\n\n----------------------------------------\n\nTITLE: Join Cleaned Data with Statistics\nDESCRIPTION: Joins the cleaned video data (`clean`) with the newly fetched statistics (`stats`) based on common columns (presumably the `id` column). This merges the two DataFrames into a single comprehensive DataFrame.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval joined = clean.join(stats)\njoined\n```\n\n----------------------------------------\n\nTITLE: Constructor Property Override in Primary Constructors and Varying Mutability\nDESCRIPTION: Demonstrates overriding an interface property directly in a primary constructor and also shows how a val property can be overridden as var for greater mutability. Shape is an interface with a property, implemented by Rectangle (as a val) and by Polygon (as a var). This pattern enables both immutable and mutable property overriding in descendants.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Shape {\n    val vertexCount: Int\n}\n\nclass Rectangle(override val vertexCount: Int = 4) : Shape // Always has 4 vertices\n\nclass Polygon : Shape {\n    override var vertexCount: Int = 0  // Can be set to any number later\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Inlined Lock Function in Kotlin\nDESCRIPTION: Defines a generic locking utility function using the 'inline' modifier, allowing both the function body and its lambda parameter to be inlined at the call site. This eliminates runtime overhead from closures and virtual calls. Relies on the 'Lock' type and accepts a function 'body' to be executed while locked, returning its result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <T> lock(lock: Lock, body: () -> T): T { ... }\n```\n\n----------------------------------------\n\nTITLE: Smart Casts with Logical OR Operator - Kotlin\nDESCRIPTION: This Kotlin snippet illustrates how the K2 compiler improves smart casts when using the logical `or` operator (`||`) for type checks. In Kotlin 2.0.0, if you combine type checks with `||`, a smart cast is made to their closest common supertype, rather than always casting to `Any`. This enables calling functions from the supertype without additional type checks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Status {\n    fun signal() {}\n}\n\ninterface Ok : Status\ninterface Postponed : Status\ninterface Declined : Status\n\nfun signalCheck(signalStatus: Any) {\n    if (signalStatus is Postponed || signalStatus is Declined) {\n        // signalStatus is smart-cast to a common supertype Status\n        signalStatus.signal()\n        // Prior to Kotlin 2.0.0, signalStatus is smart cast \n        // to type Any, so calling the signal() function triggered an\n        // Unresolved reference error. The signal() function can only \n        // be called successfully after another type check:\n        \n        // check(signalStatus is Status)\n        // signalStatus.signal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Let Function with Safe Call Operator\nDESCRIPTION: This code shows how to use the safe call operator `?.` in conjunction with the `let` function to perform operations on non-null values. It iterates over a list of nullable strings and prints only the non-null values. The `let` function is only executed if the value is not null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Declares a list of nullable strings\n    val listWithNulls: List<String?> = listOf(\"Kotlin\", null)\n\n    // Iterates over each item in the list\n    for (item in listWithNulls) {\n        // Checks if the item is null and only prints non-null values\n        item?.let { println(it) }\n        //Kotlin \n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Safe-Call Operator with Nullable Receiver\nDESCRIPTION: This code demonstrates the safe-call operator `?.` in combination with a nullable receiver. The `?.` operator calls `.toString()` only if the object is not `null`; otherwise, it returns `null`. This example requires the `Person` data class to be defined.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun main() {\n    // Assigns a nullable Person object to a variable\n    val person1: Person? = null\n    val person2: Person? = Person(\"Alice\")\n\n    // Prints \"null\" if person is null; otherwise prints the result of person.toString()\n    println(person1?.toString())\n    // null\n    println(person2?.toString())\n    // Person(name=Alice)\n}\n\n// Defines a Person class\ndata class Person(val name: String)\n//sampleEnd\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Kotlin Class\nDESCRIPTION: This code snippet shows how to define a serializable Kotlin class using the @Serializable annotation. It creates a simple data class with two properties that can be serialized and deserialized.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class Data(val a: Int, val b: String)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Property Initialization in Constructor\nDESCRIPTION: Shows how to declare properties and initialize them directly from the primary constructor, making the code more concise. The `val` and `var` keywords define read-only and mutable properties respectively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Customer(name: String) {\n    val customerKey = name.uppercase()\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Elvis Operator in Kotlin\nDESCRIPTION: This snippet demonstrates the use of the Elvis operator (?:) in Kotlin to provide a default value when a null value is detected. It returns the length of a string or 0 if the string is null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val nullString: String? = null\n    println(nullString?.length ?: 0)\n    // 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling npm Lifecycle Scripts in Groovy Gradle Build Script\nDESCRIPTION: This snippet shows how to enable the execution of npm lifecycle scripts during dependency installation in a Groovy Gradle build script. This configuration overrides the default behavior of disabling these scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_37\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).ignoreScripts = false\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Collections in Kotlin\nDESCRIPTION: Demonstrates the use of flatten() and flatMap() functions to process nested collections by combining elements into a flat list. Provides examples on flattening lists of sets and transforming elements while flattening.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-transformations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numberSets = listOf(setOf(1, 2, 3), setOf(4, 5, 6), setOf(1, 2))\n    println(numberSets.flatten())\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class StringContainer(val values: List<String>)\n\nfun main() {\n//sampleStart\n    val containers = listOf(\n        StringContainer(listOf(\"one\", \"two\", \"three\")),\n        StringContainer(listOf(\"four\", \"five\", \"six\")),\n        StringContainer(listOf(\"seven\", \"eight\"))\n    )\n    println(containers.flatMap { it.values })\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases to Implement Actual Declarations\nDESCRIPTION: Shows how to use Kotlin type aliases to implement expected declarations with existing platform-specific types, connecting common API declarations to platform implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect enum class Month {\n    JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY,\n    AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER\n}\n\nexpect class MyDate {\n    fun getYear(): Int\n    fun getMonth(): Month\n    fun getDayOfMonth(): Int\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual typealias Month = java.time.Month\nactual typealias MyDate = java.time.LocalDate\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Enums in Kotlin\nDESCRIPTION: This snippet illustrates how to define an enum class in Kotlin with a constructor parameter, where each constant is initialized with a specific property value (the RGB integer). This pattern allows each enum constant to hold associated data. No external dependencies are required beyond standard Kotlin. Each enum entry specifies its argument; output is a type-safe collection of named, parameterized instances.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Observable Property with Delegates.observable - Kotlin\nDESCRIPTION: Defines a property whose assignments invoke a change handler using Delegates.observable from the Kotlin standard library. The handler receives the property reference, the old value, and the new value, enabling reactive behaviors on change. The example demonstrates monitoring and printing value changes, requiring the kotlin.properties.Delegates companion object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(\"<no name>\") {\n        prop, old, new ->\n        println(\"$old -> $new\")\n    }\n}\n\nfun main() {\n    val user = User()\n    user.name = \"first\"\n    user.name = \"second\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Initialization Status of lateinit Properties in Kotlin\nDESCRIPTION: Example of checking whether a lateinit property has been initialized using the isInitialized property reference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nif (foo::bar.isInitialized) {\n    println(foo.bar)\n}\n```\n\n----------------------------------------\n\nTITLE: Using let() for Non-Null Assertions in Kotlin\nDESCRIPTION: This snippet demonstrates how to use let() with the safe call operator to perform actions on non-null values, avoiding null pointer exceptions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun processNonNullString(str: String) {}\n\nfun main() {\n    val str: String? = \"Hello\"   \n    //processNonNullString(str)       // compilation error: str can be null\n    val length = str?.let { \n        println(\"let() called on $it\")        \n        processNonNullString(it)      // OK: 'it' is not null inside '?.let { }'\n        it.length\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maps with Key-Value Pairs in Kotlin\nDESCRIPTION: Shows how to create maps in Kotlin using the mapOf() function with key-value pairs created using the 'to' infix function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval numbersMap = mapOf(\"key1\" to 1, \"key2\" to 2, \"key3\" to 3, \"key4\" to 1)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Failure of Invariant Array Copy in Kotlin\nDESCRIPTION: Demonstrates that calling the `copy` function (defined with `Array<Any>`) with an `Array<Int>` as the source (`from`) results in a compile-time type mismatch error. This is because `Array<Int>` is not a subtype of `Array<Any>` due to invariance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3) { \"\" } \ncopy(ints, any)\n//   ^ type is Array<Int> but Array<Any> was expected\n```\n\n----------------------------------------\n\nTITLE: Adding Test Dependencies in Kotlin\nDESCRIPTION: This snippet demonstrates how to add test dependencies to all source sets in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonTest.dependencies {\n            implementation(kotlin(\"test\")) // Brings all the platform dependencies automatically\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Checks in Kotlin\nDESCRIPTION: This snippet demonstrates how to perform instance checks using the `is` operator within a `when` expression. This allows different actions to be taken based on the type of an object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Hello World with User Input\nDESCRIPTION: This Kotlin snippet demonstrates how to prompt the user for their name, read the input using `readln()`, and print a personalized greeting using a string template. It uses the `main()` function, which is the entry point for the application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-get-started.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"What's your name?\")\n    val name = readln()\n    println(\"Hello, $name!\")\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Non-local Return via Inlined Lambda in Kotlin\nDESCRIPTION: Illustrates how an inline function enables a lambda to perform a non-local return, exiting the surrounding function. The 'inline' modifier causes both the function call and the lambda code to be inlined, allowing structural control flow like returns that affect the outside function. This feature is important for concise exit patterns within higher-order functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun inlined(block: () -> Unit) {\n    println(\"hi!\")\n}\n//sampleStart\nfun foo() {\n    inlined {\n        return // OK: the lambda is inlined\n    }\n}\n//sampleEnd\nfun main() {\n    foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Import Kotlin DataFrame in Kotlin Notebook\nDESCRIPTION: Imports the Kotlin DataFrame library within a Kotlin Notebook. This is a prerequisite for using DataFrame functionalities like reading data from web sources and performing data manipulation tasks.  It must be executed in a code cell within the notebook.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n%use dataframe\n```\n\n----------------------------------------\n\nTITLE: Implementing Backing Properties in Kotlin\nDESCRIPTION: Example of using a backing property for more complex property behavior. Demonstrates lazy initialization of a Map with null safety checks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate var _table: Map<String, Int>? = null\npublic val table: Map<String, Int>\n    get() {\n        if (_table == null) {\n            _table = HashMap() // Type parameters are inferred\n        }\n        return _table ?: throw AssertionError(\"Set to null by another thread\")\n    }\n```\n\n----------------------------------------\n\nTITLE: Measure Timed Value Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to measure the execution time of a block of code and also retrieve the value returned by the block using the measureTimedValue() inline function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.measureTimedValue\n\nfun main() {\n//sampleStart\n    val (value, timeTaken) = measureTimedValue {\n        Thread.sleep(100)\n        42\n    }\n    println(value)     // 42\n    println(timeTaken) // e.g. 103 ms\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Read CSV file into DataFrame in Kotlin\nDESCRIPTION: This code reads a CSV file named 'movies.csv' and stores the data into a DataFrame called 'movies'. The DataFrame library automatically detects the CSV format and parses the data accordingly. No delimiter specification is provided, so the default comma delimiter is used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval movies = DataFrame.read(\"movies.csv\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving First and Last Elements - Kotlin Collections - Kotlin\nDESCRIPTION: Shows how to retrieve the first and last elements from a Kotlin List using first() and last(). Illustrates idiomatic access for sequential collections. Requires Kotlin standard library version 1.3 or later. No parameters are needed; example prints the first and last elements of a sample List. Throws NoSuchElementException if collection is empty.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\\n    println(numbers.first())    \\n    println(numbers.last())    \\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Enable K2 compiler in Gradle\nDESCRIPTION: This snippet shows how to enable and test the Kotlin K2 compiler by setting the language version to \"2.0\" within the `languageSettings` of all source sets in the `build.gradle.kts` file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = \"2.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Platform Targets in Kotlin Multiplatform\nDESCRIPTION: This snippet shows how to declare multiple platform targets in a Kotlin Multiplatform project, including Android and various Apple platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()   // 64-bit iPhone devices\n    macosArm64() // Modern Apple Silicon-based Macs\n    watchosX64() // Modern 64-bit Apple Watch devices\n    tvosArm64() // Modern Apple TV devices  \n}\n```\n\n----------------------------------------\n\nTITLE: Enabling npm Lifecycle Scripts in Kotlin Gradle Build Script\nDESCRIPTION: This snippet demonstrates how to enable the execution of npm lifecycle scripts during dependency installation in a Kotlin Gradle build script. By default, these scripts are disabled for security reasons.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> { \n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().ignoreScripts = false\n}\n```\n\n----------------------------------------\n\nTITLE: Using error() to Signal Illegal State in Kotlin\nDESCRIPTION: This Kotlin code demonstrates using the error() function to indicate an illegal state, specifically within a when expression. If the user's role is not one of the expected values, an IllegalStateException is thrown, signaling that the role is undefined. This approach provides a clear way to handle unexpected cases.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(val name: String, val role: String)\n\nfun processUserRole(user: User) {\n    when (user.role) {\n        \"admin\" -> println(\"${user.name} is an admin.\")\n        \"editor\" -> println(\"${user.name} is an editor.\")\n        \"viewer\" -> println(\"${user.name} is a viewer.\")\n        else -> error(\"Undefined role: ${user.role}\")\n    }\n}\n\nfun main() {\n    // This works as expected\n    val user1 = User(\"Alice\", \"admin\")\n    processUserRole(user1)\n    // Alice is an admin.\n\n    // This throws an IllegalStateException\n    val user2 = User(\"Bob\", \"guest\")\n    processUserRole(user2)\n}\n```\n\n----------------------------------------\n\nTITLE: FizzBuzz with For Loop and When Expression in Kotlin\nDESCRIPTION: This snippet demonstrates the FizzBuzz game implemented using a `for` loop and a `when` expression in Kotlin. The loop iterates from 1 to 100, and the `when` expression determines whether to print \"fizz\", \"buzz\", \"fizzbuzz\", or the number itself based on divisibility by 3 and 5.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (number in 1..100) {\n        println(\n            when {\n                number % 15 == 0 -> \"fizzbuzz\"\n                number % 3 == 0 -> \"fizz\"\n                number % 5 == 0 -> \"buzz\"\n                else -> \"$number\"\n            }\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Function with Default Arguments in Inheritance - Kotlin\nDESCRIPTION: Demonstrates how to override a function with default arguments. The overriding method must not specify the default value in the signature, inheriting them from the base class. Highlights Kotlin's behavior for default parameters in inheritance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class A {\n    open fun foo(i: Int = 10) { /*...*/ }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { /*...*/ }  // No default value is allowed.\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Java Translation with Wildcards\nDESCRIPTION: Demonstrates the correct Java translation using wildcard types to handle Kotlin's declaration-site variance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nBase unboxBase(Box<? extends Base> box) { ... }\n```\n\n----------------------------------------\n\nTITLE: Sorting Mutable Lists in Kotlin\nDESCRIPTION: Demonstrates various in-place sorting operations for mutable lists in Kotlin, including natural ordering, custom comparators, shuffling, and reversing. Changes are applied directly to the original list instance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n\n    numbers.sort()\n    println(\"Sort into ascending: $numbers\")\n    numbers.sortDescending()\n    println(\"Sort into descending: $numbers\")\n\n    numbers.sortBy { it.length }\n    println(\"Sort into ascending by length: $numbers\")\n    numbers.sortByDescending { it.last() }\n    println(\"Sort into descending by the last letter: $numbers\")\n    \n    numbers.sortWith(compareBy<String> { it.length }.thenBy { it })\n    println(\"Sort by Comparator: $numbers\")\n\n    numbers.shuffle()\n    println(\"Shuffle: $numbers\")\n\n    numbers.reverse()\n    println(\"Reverse: $numbers\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReadWriteProperty Interface for Anonymous Delegates in Kotlin\nDESCRIPTION: This code example demonstrates creating property delegates as anonymous objects implementing the ReadWriteProperty interface in Kotlin. By leveraging the standard library's ReadOnlyProperty and ReadWriteProperty interfaces, developers can easily implement getValue() and setValue() without defining concrete classes. This is useful for concise delegate logic and enables code reuse. The resourceDelegate function creates such an anonymous delegate for both val and var properties, and maintains state in a local variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun resourceDelegate(resource: Resource = Resource()): ReadWriteProperty<Any?, Resource> =\n    object : ReadWriteProperty<Any?, Resource> {\n        var curValue = resource \n        override fun getValue(thisRef: Any?, property: KProperty<*>): Resource = curValue\n        override fun setValue(thisRef: Any?, property: KProperty<*>, value: Resource) {\n            curValue = value\n        }\n    }\n\nval readOnlyResource: Resource by resourceDelegate()  // ReadWriteProperty as val\nvar readWriteResource: Resource by resourceDelegate()\n```\n\n----------------------------------------\n\nTITLE: Using the Spread Operator (`*`) with Varargs in Kotlin\nDESCRIPTION: Demonstrates passing elements of an array as individual arguments to a function accepting a variable number of arguments (`vararg`) using the spread operator (`*`). The `printAllStrings` function iterates through the received strings and prints them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val lettersArray = arrayOf(\"c\", \"d\")\n    printAllStrings(\"a\", \"b\", *lettersArray)\n    // abcd\n}\n\nfun printAllStrings(vararg strings: String) {\n    for (string in strings) {\n        print(string)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using thenBy for Multi-Criteria Sorting in Kotlin\nDESCRIPTION: Demonstrates combining compareBy() with thenBy() to implement multi-criteria sorting more elegantly, sorting strings first by length then alphabetically.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val sortedStrings = listOf(\"aaa\", \"bb\", \"c\", \"b\", \"a\", \"aa\", \"ccc\")\n        .sortedWith(compareBy<String> { it.length }.thenBy { it })\n\n    println(sortedStrings)\n    // [a, b, c, aa, bb, aaa, ccc]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Functions in Kotlin\nDESCRIPTION: Examples of generic function declarations in Kotlin. Shows how to define generic functions with type parameters and demonstrates extension functions with type parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> singletonList(item: T): List<T> {\n    // ...\n}\n\nfun <T> T.basicToString(): String { // extension function\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Null-Filled Kotlin Array with `arrayOfNulls()`\nDESCRIPTION: Illustrates the creation of a Kotlin array of a specified size, initialized with `null` elements, using the `arrayOfNulls()` function. The type `Array<Int?>` indicates it holds nullable integers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Creates an array with values [null, null, null]\n    val nullArray: Array<Int?> = arrayOfNulls(3)\n    println(nullArray.joinToString())\n    // null, null, null\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Read-only Property Declaration in Kotlin\nDESCRIPTION: Syntax for declaring read-only properties with the val keyword. Shows both explicit type declaration and type inference with initialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval simple: Int? // has type Int, default getter, must be initialized in constructor\nval inferredType = 1 // has type Int and a default getter\n```\n\n----------------------------------------\n\nTITLE: Creating a Kotlin Data Class in Spring Boot\nDESCRIPTION: The `Message.kt` file introduces a Kotlin data class named `Message` with two properties: `id` and `text`. This class is designed to handle data transfer, enabling serialized `Message` objects to be used in JSON responses by the application. It demonstrates the use of `val` for read-only properties and nullable types in Kotlin by defining the `id` as nullable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-data-class.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Message.kt\npackage demo\n\ndata class Message(val id: String?, val text: String)\n```\n\n----------------------------------------\n\nTITLE: Underscore for Unused Variables in Kotlin\nDESCRIPTION: Demonstrates the use of an underscore to skip calling `componentN()` operator functions on unused destructured components, enhancing code readability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval (_, status) = getResult()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Read-Only Collection Covariance in Kotlin\nDESCRIPTION: This Kotlin snippet illustrates covariance in read-only collections. Kotlin's `List` (which is read-only) is covariant on its element type. Therefore, if `Rectangle` inherits from `Shape`, a `List<Rectangle>` can be directly passed to a function expecting a `List<Shape>` without needing special syntax like Java's wildcards. The example defines `Shape` and `Rectangle` classes and shows `doSthWithShapes` accepting `List<Shape>` being called with a `List<Rectangle>`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nopen class Shape(val name: String)\n\nclass Rectangle(private val rectangleName: String) : Shape(rectangleName)\n\nfun doSthWithShapes(shapes: List<Shape>) {\n    println(\"The shapes are: ${shapes.joinToString { it.name }}\")\n}\n\nfun main() {\n    val rectangles = listOf(Rectangle(\"rhombus\"), Rectangle(\"parallelepiped\"))\n    doSthWithShapes(rectangles)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Single-expression Function - Kotlin\nDESCRIPTION: Defines a function in a concise single-expression form using the '=' symbol, which returns a computed value directly. Demonstrates Kotlin's fluent style for simple operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun double(x: Int): Int = x * 2\n```\n\n----------------------------------------\n\nTITLE: Read CSV File into DataFrame with Kotlin DataFrame\nDESCRIPTION: This snippet shows how to read a CSV file into a Kotlin DataFrame using the `DataFrame.read()` function. The path to the CSV file is passed as an argument. The resulting DataFrame (`rawDf`) is then displayed. The `netflix_titles.csv` file is expected to be in the project directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-add-dependencies.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Creates a DataFrame by importing data from the \"netflix_titles.csv\" file.\nval rawDf = DataFrame.read(\"netflix_titles.csv\")\n\n// Displays the raw DataFrame data\nrawDf\n```\n\n----------------------------------------\n\nTITLE: Viewing Compiled Kotlin Property in Java\nDESCRIPTION: Illustrates the Java representation of a Kotlin `var` property named `firstName`. The Kotlin compiler generates a private field (`firstName`), a public getter (`getFirstName()`), and a public setter (`setFirstName(String)`) for Java interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate String firstName;\n\npublic String getFirstName() {\n    return firstName;\n}\n\npublic void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring a Modular Gradle Project\nDESCRIPTION: Illustrates a recommended directory structure for a modular Gradle project. It shows a root project containing a `settings.gradle.kts` file and two subprojects (`app`, `lib`), each with its own `build.gradle.kts`. This structure facilitates parallel development and improves build performance, as Gradle only rebuilds affected subprojects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-best-practices.md#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n.\n└── root-project/\n    ├── settings.gradle.kts\n    ├── app subproject/\n    │   └── build.gradle.kts\n    └── lib subproject/\n        └── build.gradle.kts\n```\n\n----------------------------------------\n\nTITLE: Defining Member Functions in Kotlin\nDESCRIPTION: This snippet demonstrates how to define member functions within a class in Kotlin. Member functions are defined inside a class and can be called using dot notation. There are no specific dependencies, but knowledge of Kotlin class syntax is required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Sample {\n    fun foo() { print(\"Foo\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing a Data Class Instance in Kotlin\nDESCRIPTION: This snippet demonstrates how to print a data class instance using `println()`. The `println()` function automatically calls the `toString()` function, which provides a readable string representation of the instance and its properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val id: Int)\n\nfun main() {\n    //sampleStart\n    val user = User(\"Alex\", 1)\n    \n    // Automatically uses toString() function so that output is easy to read\n    println(user)            \n    // User(name=Alex, id=1)\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Kotlin Idioms and Scope Functions\nDESCRIPTION: This code example showcases various Kotlin idioms including destructuring declarations, scope functions (let, apply, also, takeIf), null safety handling, and single-expression functions. It demonstrates how to traverse maps, destructure pairs, handle nullable expressions safely, and chain method calls with scope functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/expressive.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n   val map = mapOf(1 to \"one\", 2 to \"two\")\n   for ((k, v) in map) {                            // Traverse a map or a list of pairs\n       println(\"$k -> $v\")\n   }\n\n   fun obtainKnowledge() = Pair(\"The Answer\", 42)   // Single-expression functions\n\n   val (description, answer) = obtainKnowledge()    // Destructure into a pair of two variables\n   println(\"$description: $answer\")\n    \n   getText()?.let {                                 // Apply an action to a nullable expression\n      sendEmailTo(\"alice@example.com\", it)          // if it's not null \n   }\n\n   createEmptyWindow()\n      .apply {                                    // Configure properties of an object\n         width = 300\n         height = 200\n         isVisible = true\n      }.also { w ->                               // Perform an additional operation on a call chain\n         showWindow(w)\n      }\n\n   val fixedIssue = issueById[\"13456\"]\n       ?.takeIf { it.status == Status.FIXED }       // Use the value only if the condition is true\n   println(fixedIssue)\n}\n\ndata class Window(var width: Int, var height: Int, var isVisible: Boolean)\n\nfun createEmptyWindow() = Window(0, 0, false)\n\nfun showWindow(window: Window) {\n   println(\"Showing $window\")\n}\n\nfun getText(): String? = \"Hi! You've won the lottery! Pay the attached bill to get the prize.\"\nfun sendEmailTo(to: String, message: String) {\n   println(\"Sending email to $to: \\n$message\")\n}\n\nenum class Status { OPEN, FIXED, IN_PROGRESS }\ndata class Issue(val status: Status)\nval issueById = mutableMapOf(\n   \"13456\" to Issue(Status.FIXED)\n)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Abstract Class Declaration\nDESCRIPTION: Demonstrates how to declare an abstract class and an abstract function.  Abstract classes cannot be instantiated and abstract functions must be overridden in subclasses.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class Polygon {\n    abstract fun draw()\n}\n\nclass Rectangle : Polygon() {\n    override fun draw() {\n        // draw the rectangle\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fat Framework Configuration (Kotlin DSL)\nDESCRIPTION: Configuration for creating a universal (fat) framework that supports multiple platforms in Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinArtifacts {\n    Native.FatFramework(\"myfatframe\") {\n        targets(iosX32, iosX64)\n        kotlinOptions {\n            suppressWarnings = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Mutable Collections in Kotlin\nDESCRIPTION: Shows various methods to remove elements from mutable collections, including remove(), removeAll(), retainAll(), and clear(). It also demonstrates the use of the minusAssign (-=) operator for element removal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-write.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(1, 2, 3, 4, 3)\n    numbers.remove(3)                    // removes the first `3`\n    println(numbers)\n    numbers.remove(5)                    // removes nothing\n    println(numbers)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers)\n    numbers.retainAll { it >= 3 }\n    println(numbers)\n    numbers.clear()\n    println(numbers)\n\n    val numbersSet = mutableSetOf(\"one\", \"two\", \"three\", \"four\")\n    numbersSet.removeAll(setOf(\"one\", \"two\"))\n    println(numbersSet)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"three\", \"four\")\n    numbers -= \"three\"\n    println(numbers)\n    numbers -= listOf(\"four\", \"five\")    \n    //numbers -= listOf(\"four\")    // does the same as above\n    println(numbers)    \n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Extension Function in Kotlin\nDESCRIPTION: Illustrates defining a generic extension function `swap` applicable to `MutableList<T>` for any type `T`. The generic type parameter `T` is declared before the function name, making it usable in the receiver type expression.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> MutableList<T>.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // 'this' corresponds to the list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Getter Implementation in Kotlin\nDESCRIPTION: Example of implementing a computed property using a custom getter. The Rectangle class calculates its area property on demand rather than storing it.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Rectangle(val width: Int, val height: Int) {\n    val area: Int // property type is optional since it can be inferred from the getter's return type\n        get() = this.width * this.height\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with a Member Function\nDESCRIPTION: This snippet demonstrates how to define and call a member function within a class in Kotlin. The `Contact` class has a `printId` function that prints the value of the `id` property. The `main` function creates a `Contact` instance and calls the `printId` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Contact(val id: Int, var email: String) {\n    fun printId() {\n        println(id)\n    }\n}\n\nfun main() {\n    val contact = Contact(1, \"mary@gmail.com\")\n    // Calls member function printId()\n    contact.printId()           \n    // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Elements in a Set with count() in Kotlin\nDESCRIPTION: Shows how to use the count() extension function to get the number of unique items in a set. Demonstrates that duplicate items only count once.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    val readOnlyFruit = setOf(\"apple\", \"banana\", \"cherry\", \"cherry\")\n    println(\"This set has ${readOnlyFruit.count()} items\")\n    // This set has 3 items\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Members in a Kotlin Inline Class\nDESCRIPTION: Demonstrates that inline classes can define members similar to regular classes, including `init` blocks for validation, secondary constructors, computed properties (`length`), and methods (`greet`). The `main` function shows how to instantiate the class using both constructors and access its members. Calls to members like `greet()` and `length` are typically compiled to static method calls.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class Person(private val fullName: String) {\n    init {\n        require(fullName.isNotEmpty()) {\n            \"Full name shouldn't be empty\"\n        }\n    }\n\n    constructor(firstName: String, lastName: String) : this(\"$firstName $lastName\") {\n        require(lastName.isNotBlank()) {\n            \"Last name shouldn't be empty\"\n        }\n    }\n\n    val length: Int\n        get() = fullName.length\n\n    fun greet() {\n        println(\"Hello, $fullName\")\n    }\n}\n\nfun main() {\n    val name1 = Person(\"Kotlin\", \"Mascot\")\n    val name2 = Person(\"Kodee\")\n    name1.greet() // the `greet()` function is called as a static method\n    println(name2.length) // property getter is called as a static method\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `copy()` Function in Kotlin Data Classes\nDESCRIPTION: Demonstrates how to use the compiler-generated `copy()` function to create a shallow copy of a data class instance while modifying specific properties. Here, `olderJack` is created as a copy of `jack`, but with the `age` property updated to `2`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = jack.copy(age = 2)\n```\n\n----------------------------------------\n\nTITLE: Looping with Ranges Kotlin\nDESCRIPTION: This snippet shows the preferred way to iterate over an open-ended range in Kotlin using the `..<` operator. It's recommended over the `0..n - 1` approach for better readability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_62\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (i in 0..<n) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Filtering, Sorting, and Mapping Collections with Lambdas in Kotlin\nDESCRIPTION: This snippet showcases the use of higher-order functions and lambda expressions for processing a `List` of strings. It demonstrates a chain of operations: `filter` to select fruits starting with 'a', `sortedBy` to sort them alphabetically, `map` to convert them to uppercase, and `forEach` to print each result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwifruit\")\n    fruits\n      .filter { it.startsWith(\"a\") }\n      .sortedBy { it }\n      .map { it.uppercase() }\n      .forEach { println(it) }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Java Class of Kotlin Object\nDESCRIPTION: Demonstrates two ways to retrieve the Java class of an object in Kotlin: using the `::class.java` property or the `javaClass` extension property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval fooClass = foo::class.java\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval fooClass = foo.javaClass\n```\n\n----------------------------------------\n\nTITLE: Calling Generic Functions in Kotlin\nDESCRIPTION: Demonstrates how to call generic functions with explicit and inferred type arguments. Shows that type arguments can be specified at the call site or inferred by the compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval l = singletonList<Int>(1)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval l = singletonList(1)\n```\n\n----------------------------------------\n\nTITLE: Using @JsStatic for Kotlin Static Members in JavaScript\nDESCRIPTION: The `@JsStatic` annotation allows Kotlin functions defined in named objects or companion objects to be accessed as static methods in JavaScript. This facilitates direct usage of Kotlin code from JavaScript environments, providing a more seamless integration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C {\n    companion object {\n        @JsStatic\n        fun callStatic() {}\n        fun callNonStatic() {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring External JavaScript Symbols Using external Modifier in Kotlin\nDESCRIPTION: Demonstrates the use of the 'external' modifier to declare functions, classes, and values that are implemented in JavaScript (or provided by dependencies) and not compiled from Kotlin. These declarations provide static typings for underlying JavaScript code and cannot include bodies. Used for providing type-safe access to browser/JS globals or library APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal fun alert(message: Any?): Unit\n\nexternal class Node {\n    val firstChild: Node\n\n    fun append(child: Node): Node\n\n    fun removeChild(child: Node): Node\n\n    // etc\n}\n\nexternal val window: Window\n```\n\n----------------------------------------\n\nTITLE: Binary Search in Sorted Kotlin Lists\nDESCRIPTION: Demonstrates searching elements in a sorted Kotlin list with 'binarySearch()'. Inputs are the value or comparator, outputs are the index or insertion point. The list must be sorted, results are undefined otherwise.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.sort()\n    println(numbers)\n    println(numbers.binarySearch(\"two\"))  // 3\n    println(numbers.binarySearch(\"z\")) // -5\n    println(numbers.binarySearch(\"two\", 0, 2))  // -3\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Plus and Minus Operators on Collections - Kotlin\nDESCRIPTION: This snippet demonstrates how to use the plus (+) and minus (-) operators for collections in Kotlin. It creates a list of strings and shows adding an element to the list and removing a set of elements, with the results printed to standard output. Dependencies include the Kotlin standard library. The parameters include the original list of strings and the elements to be added or removed. The expected output is two collections that reflect the plus and minus operations. The snippet is suitable for Kotlin 1.3 or higher and is meant for learning and demonstration purposes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-plus-minus.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n\n    val plusList = numbers + \"five\"\n    val minusList = numbers - listOf(\"three\", \"four\")\n    println(plusList)\n    println(minusList)\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Infix Function with this Receiver - Kotlin\nDESCRIPTION: Defines an infix member function inside a class and shows how to invoke it using both explicit 'this' and standard call syntax. The receiver must be specified explicitly when using infix inside its own class to ensure unambiguous parsing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyStringCollection {\n    infix fun add(s: String) { /*...*/ }\n    \n    fun build() {\n        this add \"abc\"   // Correct\n        add(\"abc\")       // Correct\n        //add \"abc\"        // Incorrect: the receiver must be specified\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Output for CommonJS in Groovy Gradle\nDESCRIPTION: Sets the `output.libraryTarget` property within the `webpackTask` configuration block to `\"commonjs2\"`. This instructs Webpack, when bundling the Kotlin/JS browser application, to output a library compatible with the CommonJS module system, specifically using `module.exports`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            webpackTask {\n                output.libraryTarget = \"commonjs2\"\n            }\n        }\n        binaries.executable()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparable Interface for Custom Ordering in Kotlin\nDESCRIPTION: Demonstrates how to create a custom class (Version) that implements the Comparable interface to define a natural order for comparison of version numbers with major and minor components.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Version(val major: Int, val minor: Int): Comparable<Version> {\n    override fun compareTo(other: Version): Int = when {\n        this.major != other.major -> this.major compareTo other.major // compareTo() in the infix form \n        this.minor != other.minor -> this.minor compareTo other.minor\n        else -> 0\n    }\n}\n\nfun main() {    \n    println(Version(1, 2) > Version(1, 3))\n    println(Version(2, 0) > Version(1, 5))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Primitive-Type Arrays in Kotlin\nDESCRIPTION: Illustrates the creation of a primitive-type array (`IntArray`) in Kotlin, which stores primitive `Int` values directly without boxing overhead. The example initializes an `IntArray` of size 5 using its constructor; the elements are automatically initialized to the default value for `Int` (0). Requires the Kotlin standard library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Creates an array of Int of size 5 with the values initialized to zero\n    val exampleArray = IntArray(5)\n    println(exampleArray.joinToString())\n    // 0, 0, 0, 0, 0\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Collections in Kotlin\nDESCRIPTION: Covers the association functions associateWith(), associateBy(), and associate() to build maps based on collection elements. Includes examples of transforming elements into map keys and values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-transformations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbers.associateWith { it.length })\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n\n    println(numbers.associateBy { it.first().uppercaseChar() })\n    println(numbers.associateBy(keySelector = { it.first().uppercaseChar() }, valueTransform = { it.length }))\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\ndata class FullName (val firstName: String, val lastName: String)\n\nfun parseFullName(fullName: String): FullName {\n    val nameParts = fullName.split(\" \")\n    if (nameParts.size == 2) {\n        return FullName(nameParts[0], nameParts[1])\n    } else throw Exception(\"Wrong name format\")\n}\n\n//sampleStart\n    val names = listOf(\"Alice Adams\", \"Brian Brown\", \"Clara Campbell\")\n    println(names.associate { name -> parseFullName(name).let { it.lastName to it.firstName } })  \n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Enum Constants in Actual Declarations\nDESCRIPTION: Shows how actual enum implementations can extend the set of constants defined in an expected enum, requiring special handling in when expressions to account for platform-specific values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the commonMain source set:\nexpect enum class Department { IT, HR, Sales }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the jvmMain source set:\nactual enum class Department { IT, HR, Sales, Legal }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the nativeMain source set:\nactual enum class Department { IT, HR, Sales, Marketing }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// An else clause is required:\nfun matchOnDepartment(dept: Department) {\n    when (dept) {\n        Department.IT -> println(\"The IT Department\")\n        Department.HR -> println(\"The HR Department\")\n        Department.Sales -> println(\"The Sales Department\")\n        else -> println(\"Some other department\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Casting with Generic Types in Kotlin\nDESCRIPTION: Demonstrates how to perform type checking that involves the non-generic part of a type, allowing for smart casting while preserving type arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun handleStrings(list: MutableList<String>) {\n    if (list is ArrayList) {\n        // `list` is smart-cast to `ArrayList<String>`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop with Explicit Type and Block Kotlin\nDESCRIPTION: Shows a `for` loop with an explicitly declared type for the loop variable and a block of code as the loop body.  Illustrates how to specify the type of the iterator variable and how to include multiple statements within the loop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (item: Int in ints) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Closure Example in Kotlin\nDESCRIPTION: Demonstrates how lambda expressions can access and modify variables from outer scope.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nvar sum = 0\nints.filter { it > 0 }.forEach {\n    sum += it\n}\nprint(sum)\n```\n\n----------------------------------------\n\nTITLE: Using Common Atomic Types for Thread-Safe Operations in Kotlin\nDESCRIPTION: Illustrates the usage of the new common atomic types in the kotlin.concurrent.atomics package. This example demonstrates how to use AtomicInt for safe counting across multiple threads in a coroutine-based scenario.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports the necessary libraries\nimport kotlin.concurrent.atomics.*\nimport kotlinx.coroutines.*\n\n@OptIn(ExperimentalAtomicApi::class)\nsuspend fun main() {\n    // Initializes the atomic counter for processed items\n    var processedItems = AtomicInt(0)\n    val totalItems = 100\n    val items = List(totalItems) { \"item$it\" }\n    // Splits the items into chunks for processing by multiple coroutines\n    val chunkSize = 20\n    val itemChunks = items.chunked(chunkSize)\n    coroutineScope {\n        for (chunk in itemChunks) {\n            launch {\n                for (item in chunk) {\n                    println(\"Processing $item in thread ${Thread.currentThread()}\")\n                    processedItems += 1 // Increment counter atomically\n                }\n            }\n         }\n    }\n    // Prints the total number of processed items\n    println(\"Total processed items: ${processedItems.load()}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options Across All Targets in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure compiler options that apply to all targets in a Kotlin multiplatform project using the Kotlin DSL. It shows setting allWarningsAsErrors to true for all compilations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        allWarningsAsErrors.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring in Kotlin For-Loops\nDESCRIPTION: Shows how to use destructuring declarations within for-loops in Kotlin, where variables receive values from `component1()` and `component2()` functions on each element of the collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfor ((a, b) in collection) { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Dependencies at Top Level in Multiplatform Projects\nDESCRIPTION: This example shows how to declare dependencies at the top level using the pattern <sourceSetName><DependencyType>. This approach is useful for built-in Gradle dependencies that aren't available in the source sets' dependency DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    \"commonMainImplementation\"(\"com.example:my-library:1.0\")\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    commonMainImplementation 'com.example:my-library:1.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Duration Components Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to break down a Duration into its time components (hours, minutes, seconds, nanoseconds) using the toComponents() function with a lambda expression to format the output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.Duration.Companion.minutes\n\nfun main() {\n//sampleStart\n    val thirtyMinutes: Duration = 30.minutes\n    println(thirtyMinutes.toComponents { hours, minutes, _, _ -> \"${hours}h:${minutes}m\" })\n    // 0h:30m\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Approach without takeIf in Kotlin\nDESCRIPTION: This example shows how the same functionality can be achieved without using takeIf or scope functions, for comparison purposes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    fun displaySubstringPosition(input: String, sub: String) {\n        val index = input.indexOf(sub)\n        if (index >= 0) {\n            println(\"The substring $sub is found in $input.\")\n            println(\"Its start position is $index.\")\n        }\n    }\n\n    displaySubstringPosition(\"010000011\", \"11\")\n    displaySubstringPosition(\"010000011\", \"12\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Builder Functions in Kotlin\nDESCRIPTION: Shows how to create collections with builder functions like buildMap(), which allow creating mutable collections, populating them, and returning read-only versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = buildMap { // this is MutableMap<String, Int>, types of key and value are inferred from the `put()` calls below\n    put(\"a\", 1)\n    put(\"b\", 0)\n    put(\"c\", 4)\n}\n\nprintln(map) // {a=1, b=0, c=4}\n```\n\n----------------------------------------\n\nTITLE: Safe cast operator in Kotlin\nDESCRIPTION: Shows the usage of the safe cast operator 'as?' in Kotlin, which returns null on failure instead of throwing an exception. This operator is used to avoid exceptions when casting to nullable types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval x: String? = y as? String\n```\n\n----------------------------------------\n\nTITLE: Slicing Collections by Index Ranges in Kotlin\nDESCRIPTION: Demonstrates the `slice()` extension function on a `List<String>` to retrieve elements based on specified index ranges or a collection of indices. Examples show slicing using an `IntRange`, a range with a step, and a `Set` of indices.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart    \n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")    \n    println(numbers.slice(1..3))\n    println(numbers.slice(0..4 step 2))\n    println(numbers.slice(setOf(3, 5, 0)))    \n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Emptiness with any() and none() in Kotlin\nDESCRIPTION: This example shows how to use any() and none() without a predicate to simply check if a collection is empty or not, providing a boolean result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val empty = emptyList<String>()\n\n    println(numbers.any())\n    println(empty.any())\n    \n    println(numbers.none())\n    println(empty.none())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: When with Multiple Cases Kotlin\nDESCRIPTION: Illustrates how to define a common behavior for multiple cases in a 'when' statement by combining their conditions with a comma.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (x) {\n    0, 1 -> print(\"x == 0 or x == 1\")\n    else -> print(\"otherwise\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Primary Constructor\nDESCRIPTION: Illustrates the declaration of a Kotlin class with a primary constructor. The constructor parameters are defined within the parentheses after the class name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person constructor(firstName: String) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Using let() with Method Reference in Kotlin\nDESCRIPTION: This example shows how to use let() with a method reference instead of a lambda when the block contains a single function call with 'it' as an argument.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    numbers.map { it.length }.filter { it > 3 }.let(::println)\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over a Collection using a for-in Loop in Kotlin\nDESCRIPTION: This snippet shows the standard way to iterate over the elements of a collection (`List` of strings) in Kotlin using a `for-in` loop. Each `item` in the `items` list is printed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Visibility in Actual Declarations\nDESCRIPTION: Demonstrates how to make an actual implementation more visible than the corresponding expected declaration, allowing internal expected types to be implemented with public platform types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ninternal expect class Messenger {\n    fun sendMessage(message: String)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual typealias Messenger = MyMessenger\n```\n\n----------------------------------------\n\nTITLE: Basic Kotlin Artifacts Library Configuration (Kotlin DSL)\nDESCRIPTION: Basic setup for configuring a native library using the Kotlin Artifacts DSL with debug and release modes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinArtifacts {\n    Native.Library {\n        target = iosX64 // Define your target instead\n        modes(DEBUG, RELEASE)\n        // Binary configuration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Annotated Classes and Example SymbolProcessor - KSP Kotlin\nDESCRIPTION: This snippet provides a complete example featuring two Kotlin classes, one with an annotation, plus a KSP SymbolProcessor implementation that demonstrates the association and dependency deduction between source files during incremental annotation processing. Dependencies are expressed through both explicit annotation lookup and type resolution, allowing KSP to deduce needed reprocessing for outputs. No third-party dependencies are needed beyond KSP's API; inputs include annotated class files, and output is written to a generated source file based on those inputs. The example is constrained to a simplified scenario suitable for describing KSP's handling of transitive dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-incremental.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// A.kt\n@Interesting\nclass A : B()\n\n// B.kt\nopen class B\n\n// Example1Processor.kt\nclass Example1Processor : SymbolProcessor {\n    override fun process(resolver: Resolver) {\n        val declA = resolver.getSymbolsWithAnnotation(\"Interesting\").first() as KSClassDeclaration\n        val declB = declA.superTypes.first().resolve().declaration\n        // B.kt isn't required, because it can be deduced as a dependency by KSP\n        val dependencies = Dependencies(aggregating = true, declA.containingFile!!)\n        // outputForA.kt\n        val outputName = \"outputFor${declA.simpleName.asString()}\"\n        // outputForA depends on A.kt and B.kt\n        val output = codeGenerator.createNewFile(dependencies, \"com.example\", outputName, \"kt\")\n        output.write(\"// $declA : $declB\\n\".toByteArray())\n        output.close()\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'is' and '!is' operators for type checking in Kotlin\nDESCRIPTION: Demonstrates how to use 'is' and '!is' operators to perform runtime type checks on objects in Kotlin. These operators allow checking if an object conforms to a specific type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nif (obj is String) {\n    print(obj.length)\n}\n\nif (obj !is String) { // Same as !(obj is String)\n    print(\"Not a String\")\n} else {\n    print(obj.length)\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Strings with trimIndent Kotlin\nDESCRIPTION: This example showcases the usage of multiline strings with `trimIndent()` in Kotlin. `trimIndent()` removes the common leading whitespace from each line, ensuring the string is properly formatted. The sample code prints a non-trimmed string, then a trimmed string, and then shows how to trim to a margin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_64\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n   println(\"\"\"\n    Not\n    trimmed\n    text\n    \"\"\"\n   )\n\n   println(\"\"\"\n    Trimmed\n    text\n    \"\"\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n.trimIndent()\n   )\n\n   println()\n\n   val a = \"\"\"Trimmed to margin text:\n          |if(a > 1) {\n          |    return a\n          |}\"\"\".trimMargin()\n\n   println(a)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: String Template Kotlin\nDESCRIPTION: This snippet demonstrates string templates in Kotlin, using a variable name `$i` and a list `$letters` within a string.  String templates allow variables and expressions to be embedded directly within a string, which simplifies string formatting and concatenation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val i = 10\n    println(\"i = $i\") \n    // i = 10\n    \n    val letters = listOf(\"a\",\"b\",\"c\",\"d\",\"e\")\n    println(\"Letters: $letters\") \n    // Letters: [a, b, c, d, e]\n\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Repository with klib\nDESCRIPTION: Shows how to specify a custom repository location when using klib commands.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ klib <command> <name> -repository <directory>\n```\n\n----------------------------------------\n\nTITLE: When Statement Example Kotlin\nDESCRIPTION: Illustrates the basic usage of the 'when' statement in Kotlin, similar to a switch statement. It demonstrates how to match a variable against multiple possible values and execute the corresponding branch.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val x = 2\n    when (x) {\n        1 -> print(\"x == 1\")\n        2 -> print(\"x == 2\")\n        else -> print(\"x is neither 1 nor 2\")\n    }\n    // x == 2\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Companion Object Factory Method Kotlin\nDESCRIPTION: Demonstrates creating a `User` instance using a factory method defined in a companion object. The companion object is named `Factory`, and the `create` method takes a name as input.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(val name: String) {\n    // Defines a companion object that acts as a factory for creating User instances\n    companion object Factory {\n        fun create(name: String): User = User(name)\n    }\n}\n\nfun main(){\n    // Calls the companion object's factory method using the class name as the qualifier. \n    // Creates a new User instance\n    val userInstance = User.create(\"John Doe\")\n    println(userInstance.name)\n    // John Doe\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Functions Equivalent to Lambdas in Kotlin\nDESCRIPTION: Defines a named function equivalent to a lambda expression for use as a comparator. Used to demonstrate named vs. anonymous function approaches to passing as arguments. Here, takes two strings and returns true if the first is shorter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun compare(a: String, b: String): Boolean = a.length < b.length\n```\n\n----------------------------------------\n\nTITLE: Builder-Style Usage of Methods Returning Unit in Kotlin\nDESCRIPTION: This snippet demonstrates using the `apply` function for builder-style configuration of an object. `apply` executes a block of code on the object and then returns the object itself, allowing chained method calls.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun arrayOfMinusOnes(size: Int): IntArray {\n    return IntArray(size).apply { fill(-1) }\n}\n```\n\n----------------------------------------\n\nTITLE: Using with() for Object Operations in Kotlin\nDESCRIPTION: This snippet demonstrates how to use with() to perform operations on an object without needing to repeatedly reference it. It's useful when you don't need to use the return value of the block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\")\n    with(numbers) {\n        println(\"'with' is called with argument $this\")\n        println(\"It contains $size elements\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin and Java Source Sets\nDESCRIPTION: These snippets illustrate the configuration of Kotlin and Java source sets in a Gradle project. They demonstrate how to specify custom directories for Java and Kotlin source files when deviating from the default structure.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceSets.main {\n    java.srcDirs(\"src/main/myJava\", \"src/main/myKotlin\")\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nsourceSets {\n    main.kotlin.srcDirs += 'src/main/myKotlin'\n    main.java.srcDirs += 'src/main/myJava'\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Scope Functions in Kotlin\nDESCRIPTION: Shows how apply and also can be chained in a fluent interface style because they return the context object, allowing operations to be performed in sequence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numberList = mutableListOf<Double>()\n    numberList.also { println(\"Populating the list\") }\n        .apply {\n            add(2.71)\n            add(3.14)\n            add(1.0)\n        }\n        .also { println(\"Sorting the list\") }\n        .sort()\n    println(numberList)\n}\n```\n\n----------------------------------------\n\nTITLE: Visibility Modifiers for Class Members in Kotlin\nDESCRIPTION: Shows how visibility modifiers work for members declared inside a class. The example demonstrates private, protected, internal, and public members in a class hierarchy and how they are accessible from different contexts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/visibility-modifiers.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal open val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a is not visible\n    // b, c and d are visible\n    // Nested and e are visible\n\n    override val b = 5   // 'b' is protected\n    override val c = 7   // 'c' is internal\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b are not visible\n    // o.c and o.d are visible (same module)\n    // Outer.Nested is not visible, and Nested::e is not visible either \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Try-Catch Block in Kotlin\nDESCRIPTION: Demonstrates the basic structure of a try-catch block in Kotlin for handling potential exceptions. The code within the `try` block is monitored, and if an exception of type `SomeException` is thrown, the code within the corresponding `catch` block is executed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    // Code that may throw an exception\n} catch (e: SomeException) {\n    // Code for handling the exception\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Elements in a Kotlin List\nDESCRIPTION: Illustrates updating elements in a list using 'set()' and its operator form '[]'. The list remains unaltered in structure except for the updated element. Inputs are the element and its index; outputs the modified list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"three\")\n    numbers[1] =  \"two\"\n    println(numbers)\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling Superclass Implementations Using super in Kotlin\nDESCRIPTION: Shows how to explicitly use the super keyword to call a superclass's function and property getter within an overridden method and property. FilledRectangle overrides draw and invokes Rectangle's draw and also accesses a property from the superclass. This is useful for extending base class functionality without reimplementing common logic.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Rectangle {\n    open fun draw() { println(\"Drawing a rectangle\") }\n    val borderColor: String get() = \"black\"\n}\n\nclass FilledRectangle : Rectangle() {\n    override fun draw() {\n        super.draw()\n        println(\"Filling the rectangle\")\n    }\n\n    val fillColor: String get() = super.borderColor\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings after a Character using substringAfter in Kotlin\nDESCRIPTION: Uses the Kotlin standard library function `substringAfter` to directly obtain the part of the string that comes after the first occurrence of the specified delimiter ('?'), simplifying the logic compared to the Java `indexOf`/`substring` approach.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val input = \"What is the answer to the Ultimate Question of Life, the Universe, and Everything? 42\"\n    val answer = input.substringAfter(\"?\")\n    println(answer)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin overloaded function reference\nDESCRIPTION: Shows how to resolve function references for overloaded functions when the expected type is known from the context, using the `::` operator. It uses overloaded `isOdd` functions with `Int` and `String` parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    fun isOdd(x: Int) = x % 2 != 0\n    fun isOdd(s: String) = s == \"brillig\" || s == \"slithy\" || s == \"tove\"\n    \n    val numbers = listOf(1, 2, 3)\n    println(numbers.filter(::isOdd)) // refers to isOdd(x: Int)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Shared Library Dependency in Kotlin\nDESCRIPTION: This snippet demonstrates how to add a dependency on a library shared for all source sets in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"com.example:my-library:1.0\") // library shared for all source sets\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Smartcasts in Kotlin\nDESCRIPTION: This snippet demonstrates how Kotlin's compiler performs automatic smartcasts when null checks are done inline. The compiler automatically casts 's' to non-nullable String after the null check.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(s: String?) {\n    if (s != null) s.length // Compiler automatically casts 's' to 'String'\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing a Map or List of Pairs in Kotlin\nDESCRIPTION: This snippet demonstrates how to iterate over a map (or a list of pairs) in Kotlin using a `for` loop with destructuring. This allows direct access to the key and value of each entry.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Member Function Precedence over Extension Functions in Kotlin\nDESCRIPTION: Shows that if a class has a member function and an extension function with the same name and applicable signature is defined for that class, the member function always takes precedence. This code prints 'Class method'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    class Example {\n        fun printFunctionType() { println(\"Class method\") }\n    }\n    \n    fun Example.printFunctionType() { println(\"Extension function\") }\n    \n    Example().printFunctionType()\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Calling an Extension Function in Kotlin\nDESCRIPTION: Shows how to call the previously defined `swap` extension function on an instance of `MutableList<Int>`. The call looks like a regular method call on the list object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval list = mutableListOf(1, 2, 3)\nlist.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'list'\n```\n\n----------------------------------------\n\nTITLE: Delegating via Named Object in Kotlin\nDESCRIPTION: This code shows how a singleton object can be used as a delegate for property delegation in Kotlin. By defining getValue() on an object (NamedObject), properties can delegate their value retrieval to shared logic. This is a compact and reusable pattern for stateless or globally consistent properties, particularly when the delegate does not need to hold state.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nobject NamedObject {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String = ...\n}\n\nval s: String by NamedObject\n```\n\n----------------------------------------\n\nTITLE: Default Parameter Before Non-default Parameter - Kotlin\nDESCRIPTION: Shows that when a default parameter is placed before a non-default one, the default can only be used if the function is called with named arguments. A syntactic detail that can affect call style.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(\n    bar: Int = 0,\n    baz: Int,\n) { /*...*/ }\n\nfoo(baz = 1) // The default value bar = 0 is used\n```\n\n----------------------------------------\n\nTITLE: Iterating Backwards with ListIterator in Kotlin\nDESCRIPTION: This code demonstrates how to iterate backwards through a list using the `ListIterator` interface. It first iterates to the end of the list using `hasNext()` and `next()`, then iterates backwards using `hasPrevious()` and `previous()`, printing the index and value of each element.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/iterators.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val listIterator = numbers.listIterator()\n    while (listIterator.hasNext()) listIterator.next()\n    println(\"Iterating backwards:\")\n    // Iterating backwards:\n    while (listIterator.hasPrevious()) {\n        print(\"Index: ${listIterator.previousIndex()}\")\n        println(\", value: ${listIterator.previous()}\")\n        // Index: 3, value: four\n        // Index: 2, value: three\n        // Index: 1, value: two\n        // Index: 0, value: one\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Summing Collection Elements Using sumOf Selector - Kotlin\nDESCRIPTION: This snippet illustrates the use of the sumOf function in Kotlin, which computes the sum of arbitrary calculated values over a collection using a provided selector function. It processes a list of integers twice: once doubling each element, and once dividing each element by two as a Double. sumOf expects a lambda that returns a numeric type, and the result is the sum in the corresponding type. No special dependencies are needed; the Kotlin Standard Library supports sumOf from version 1.4.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 42, 10, 4)\n    println(numbers.sumOf { it * 2 })\n    println(numbers.sumOf { it.toDouble() / 2 })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Constructor Delegation with super Keyword in Kotlin\nDESCRIPTION: Uses secondary constructors in a derived class to explicitly call different constructors of a base class via the super keyword. The constructors accept different argument lists enabling flexible initialization based on context. This pattern is commonly used for views or components with overloaded constructors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyView : View {\n    constructor(ctx: Context) : super(ctx)\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Anonymous Objects from Functions Kotlin\nDESCRIPTION: This Kotlin code demonstrates returning an anonymous object from a private function and accessing its members. The `getPreferences` function returns an anonymous object with `theme` and `fontSize` properties, which are then accessed within the `printPreferences` function. The main function creates an instance of `UserPreferences` and calls `printPreferences` to display the values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nclass UserPreferences {\n    private fun getPreferences() = object {\n        val theme: String = \"Dark\"\n        val fontSize: Int = 14\n    }\n\n    fun printPreferences() {\n        val preferences = getPreferences()\n        println(\"Theme: ${preferences.theme}, Font Size: ${preferences.fontSize}\")\n    }\n}\n//sampleEnd\n\nfun main() {\n    val userPreferences = UserPreferences()\n    userPreferences.printPreferences()\n    // Theme: Dark, Font Size: 14\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from a Kotlin MutableList by Index and Value\nDESCRIPTION: This Kotlin snippet demonstrates element removal from a `MutableList`. Kotlin provides distinct functions: `removeAt(index)` removes the element at the specified zero-based index (e.g., `numbers.removeAt(0)`), while `remove(value)` removes the first occurrence of the specified value (e.g., `numbers.remove(1)`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val numbers = mutableListOf(1, 2, 3, 1)\n    numbers.removeAt(0)\n    println(numbers) // [2, 3, 1]\n    numbers.remove(1)\n    println(numbers) // [2, 3]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Combining takeIf with let for Conditional Execution in Kotlin\nDESCRIPTION: This snippet shows how to use takeIf in combination with let to conditionally execute a block of code based on a predicate.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    fun displaySubstringPosition(input: String, sub: String) {\n        input.indexOf(sub).takeIf { it >= 0 }?.let {\n            println(\"The substring $sub is found in $input.\")\n            println(\"Its start position is $it.\")\n        }\n    }\n\n    displaySubstringPosition(\"010000011\", \"11\")\n    displaySubstringPosition(\"010000011\", \"12\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Serialization Dependency in Gradle (Kotlin DSL)\nDESCRIPTION: This code snippet shows how to add the JSON serialization library dependency to a Gradle build script using the Kotlin DSL. It specifies the implementation dependency for kotlinx-serialization-json.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:%serializationVersion%\")\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Maps in Kotlin\nDESCRIPTION: This snippet demonstrates how to filter maps using the filter() function, which allows filtering based on both keys and values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mapOf(\"key1\" to 1, \"key2\" to 2, \"key3\" to 3, \"key11\" to 11)\n    val filteredMap = numbersMap.filter { (key, value) -> key.endsWith(\"1\") && value > 10}\n    println(filteredMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Method Overloads with @JvmOverloads\nDESCRIPTION: Shows how to use the @JvmOverloads annotation to generate multiple overloaded methods in Java for Kotlin functions with default parameter values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Circle @JvmOverloads constructor(centerX: Int, centerY: Int, radius: Double = 1.0) {\n    @JvmOverloads fun draw(label: String, lineWidth: Int = 1, color: String = \"red\") { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Dependencies in SourceSets - Kotlin\nDESCRIPTION: Adding Android-specific dependencies to the androidMain source set in a Kotlin Multiplatform project using Kotlin DSL. This approach isolates Android dependencies to the relevant source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-android-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceSets {\n    androidMain.dependencies {\n        implementation(\"com.example.android:app-magic:12.3\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Smart casts with logical operators in Kotlin\nDESCRIPTION: Shows how Kotlin's smart cast feature works with logical operators like '&&' and '||', allowing for type-safe operations on the right-hand side of these operators.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// x is automatically cast to String on the right-hand side of `||`\nif (x !is String || x.length == 0) return\n\n// x is automatically cast to String on the right-hand side of `&&`\nif (x is String && x.length > 0) {\n    print(x.length) // x is automatically cast to String\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe and Safe Casting in Kotlin/JS with unsafeCast() and as Operator\nDESCRIPTION: Compares how normal 'as' casting and unsafeCast<T>() work: as throws ClassCastException if not valid, but unsafeCast skips runtime checking entirely (pure cast). Demonstrates Kotlin code for calling both, with brief sample JavaScript output to illustrate differences in generated code. Useful for situations where developers need to control type assertions or optimize away runtime checks in interop scenarios.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun usingUnsafeCast(s: Any) = s.unsafeCast<String>()\nfun usingAsOperator(s: Any) = s as String\n```\n\n----------------------------------------\n\nTITLE: External Links in KDoc\nDESCRIPTION: This snippet demonstrates how to insert external links within KDoc comments using the standard Markdown syntax. This functionality allows developers to provide relevant external reference links in their documentation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-doc.md#2025-04-22_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nFor more information about KDoc syntax, see [KDoc](<example-URL>).\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Functional Interface with SAM Conversion in Kotlin\nDESCRIPTION: This code demonstrates the use of Kotlin's SAM conversion feature to instantiate 'IntPredicate' with a lambda expression. Here, 'isEven' is assigned to an 'IntPredicate' created directly from a lambda that checks integer parity. This concise approach requires no boilerplate and depends on the interface being marked as a 'fun interface'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Creating an instance using lambda\nval isEven = IntPredicate { it % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Using Stdlib Contracts for Improved Null Analysis\nDESCRIPTION: This runnable example shows how standard library functions already use contracts to enable smarter null analysis. The isNullOrEmpty check allows the compiler to infer that x is not null inside the if block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun bar(x: String?) {\n    if (!x.isNullOrEmpty()) {\n        println(\"length of '$x' is ${x.length}\") // Yay, smartcast to not-null!\n    }\n}\n//sampleEnd\nfun main() {\n    bar(null)\n    bar(\"42\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing state in App component using Kotlin useState\nDESCRIPTION: Sets up the initial state for the App component, including current video and lists of watched and unwatched videos.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval App = FC<Props> {\n    var currentVideo: Video? by useState(null)\n    var unwatchedVideos: List<Video> by useState(listOf(\n        Video(1, \"Opening Keynote\", \"Andrey Breslav\", \"https://youtu.be/PsaFVLr8t4E\"),\n        Video(2, \"Dissecting the stdlib\", \"Huyen Tue Dao\", \"https://youtu.be/Fzt_9I733Yg\"),\n        Video(3, \"Kotlin and Spring Boot\", \"Nicolas Frankel\", \"https://youtu.be/pSiZVAeReeg\")\n    ))\n    var watchedVideos: List<Video> by useState(listOf(\n        Video(4, \"Creating Internal DSLs in Kotlin\", \"Venkat Subramaniam\", \"https://youtu.be/JzTeAM8N1-o\")\n    ))\n\n    // . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Simple While Loop Kotlin\nDESCRIPTION: Illustrates a basic `while` loop in Kotlin, which executes as long as the specified condition is true. Decrements `x` until it is no longer greater than zero.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nwhile (x > 0) {\n    x--\n}\n```\n\n----------------------------------------\n\nTITLE: Compare Duration Equality Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to compare Duration objects for equality using the equality operator (==).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.Duration.Companion.hours\nimport kotlin.time.Duration.Companion.minutes\n\nfun main() {\n//sampleStart\n    val thirtyMinutes: Duration = 30.minutes\n    val halfHour: Duration = 0.5.hours\n    println(thirtyMinutes == halfHour)\n    // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Contravariant Generic Interface using 'in' in Kotlin\nDESCRIPTION: Demonstrates Kotlin's contravariance using the `in` modifier on the type parameter `T` of the `Comparable` interface. This indicates `T` is only consumed (input position). It allows a `Comparable<Number>` to be treated as a supertype of `Comparable<Double>`, enabling the assignment `val y: Comparable<Double> = x`. The `compareTo` method can safely accept subtypes like `Double`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Comparable<in T> {\n    operator fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable<Number>) {\n    x.compareTo(1.0) // 1.0 has type Double, which is a subtype of Number\n    // Thus, you can assign x to a variable of type Comparable<Double>\n    val y: Comparable<Double> = x // OK!\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Methods in Java Interfaces from Kotlin Companion Object Functions\nDESCRIPTION: Illustrates using `@JvmStatic` on a function (`greet`) within the `companion object` of a Kotlin interface (`ChatBot`). Starting from Kotlin 1.3 and targeting JVM 1.8+, this generates a static method directly within the Java interface (`ChatBot.greet(username)`). This requires compiling with a compatible JVM target (1.8 or higher).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface ChatBot {\n    companion object {\n        @JvmStatic fun greet(username: String) {\n            println(\"Hello, $username\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class for Database Mapping in Kotlin\nDESCRIPTION: This Kotlin snippet defines a `Message` data class annotated with `@Table` and a primary key annotated with `@Id` to map to a database table. Dependencies include `org.springframework.data.annotation.Id` and `org.springframework.data.relational.core.mapping.Table`. The `id` property is set to null, allowing for automatic id generation. The key input is the `text` property, while the id is managed by the database.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Message.kt\npackage demo\n\nimport org.springframework.data.annotation.Id\nimport org.springframework.data.relational.core.mapping.Table\n\n@Table(\"MESSAGES\")\ndata class Message(val text: String, @Id val id: String? = null)\n\n```\n\n----------------------------------------\n\nTITLE: Working with Java Optionals in Kotlin\nDESCRIPTION: Shows new extension functions for Java Optionals in Kotlin 1.7.0, including getOrNull(), getOrDefault(), and getOrElse() for unwrapping optional values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval presentOptional = Optional.of(\"I'm here!\")\n\nprintln(presentOptional.getOrNull())\n// \"I'm here!\"\n\nval absentOptional = Optional.empty<String>()\n\nprintln(absentOptional.getOrNull())\n// null\nprintln(absentOptional.getOrDefault(\"Nobody here!\"))\n// \"Nobody here!\"\nprintln(absentOptional.getOrElse {\n    println(\"Optional was absent!\")\n    \"Default value!\"\n})\n// \"Optional was absent!\"\n// \"Default value!\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Range in a For Loop Kotlin\nDESCRIPTION: Demonstrates iterating over a range of numbers using a `for` loop and range expressions.  Two examples are given: iterating from 1 to 3 and iterating from 6 down to 0 with a step of 2.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    for (i in 1..3) {\n        print(i)\n    }\n    for (i in 6 downTo 0 step 2) {\n        print(i)\n    }\n    // 1236420\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Backing Property Naming in Kotlin\nDESCRIPTION: Shows how to use an underscore prefix for private backing properties in Kotlin when a class has two conceptually same properties (one public API, another implementation detail).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass C {\n    private val _elementList = mutableListOf<Element>()\n\n    val elementList: List<Element>\n         get() = _elementList\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing a Map in Kotlin using for Loop and forEach\nDESCRIPTION: This Kotlin snippet presents two common ways to iterate over a `Map`. The first uses a `for` loop with a destructuring declaration `(k, v)` to directly access the key and value in the loop body. The second uses the `forEach` extension function with a similar lambda ` { (k, v) -> ... }`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nfor ((k, v) in numbers) {\n    println(\"Key = $k, Value = $v\")\n}\n// Or\nnumbers.forEach { (k, v) -> println(\"Key = $k, Value = $v\") }\n```\n\n----------------------------------------\n\nTITLE: Runtime Representation and Boxing of Kotlin Inline Classes\nDESCRIPTION: Demonstrates when inline class instances are represented as their underlying type (unboxed) versus when they require a wrapper (boxed). Boxing typically occurs when the inline class instance is used as a different type, such as a generic type parameter (`T`), an interface (`I`), or a nullable type (`Foo?`). The example shows function calls that trigger boxing and unboxing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface I\n\n@JvmInline\nvalue class Foo(val i: Int) : I\n\nfun asInline(f: Foo) {}\nfun <T> asGeneric(x: T) {}\nfun asInterface(i: I) {}\nfun asNullable(i: Foo?) {}\n\nfun <T> id(x: T): T = x\n\nfun main() {\n    val f = Foo(42) \n    \n    asInline(f)    // unboxed: used as Foo itself\n    asGeneric(f)   // boxed: used as generic type T\n    asInterface(f) // boxed: used as type I\n    asNullable(f)  // boxed: used as Foo?, which is different from Foo\n    \n    // below, 'f' first is boxed (while being passed to 'id') and then unboxed (when returned from 'id') \n    // In the end, 'c' contains unboxed representation (just '42'), as 'f' \n    val c = id(f)  \n}\n```\n\n----------------------------------------\n\nTITLE: Clean and Reorganize DataFrame\nDESCRIPTION: Cleans and reorganizes the `items` DataFrame by dropping null values in the `id.videoId` column, selecting specific columns (renaming `id.videoId` to `id` and keeping `snippet`), and removing duplicate rows.  The cleaned DataFrame is stored in the `videos` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval videos = items.dropNulls { id.videoId }\n    .select { id.videoId named \"id\" and snippet }\n    .distinct()\nvideos\n```\n\n----------------------------------------\n\nTITLE: Grouping Messages by Keywords Kotlin\nDESCRIPTION: This Kotlin code groups a list of `Message` objects based on whether their text contains specific keywords (\"hello\" or \"bye\"). It uses the `groupBy()` function with a lambda expression that checks for the presence of the keywords, ignoring case. Messages that don't contain any of the specified keywords are grouped under the key \"other\".\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/groups\")\nfun groups(): Map<String, List<Message>> {\n    val messages = service.findMessages()\n    val groups = listOf(\"hello\", \"bye\")\n\n    val map = messages.groupBy { message ->\n        groups.firstOrNull {\n            message.text.contains(it, ignoreCase = true)\n        } ?: \"other\"\n    }\n\n    return map\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting with KDoc in Kotlin\nDESCRIPTION: This snippet demonstrates how to document a Kotlin class using KDoc, a documentation system similar to Javadoc but designed for Kotlin. This example includes annotations for parameters, properties, and constructors, and illustrates the use of Markdown for inline markup. The snippet requires no external dependencies but expects familiarity with Kotlin syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-doc.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\\n * A group of *members*.\\n *\\n * This class has no useful logic; it\\'s just a documentation example.\\n *\\n * @param T the type of a member in this group.\\n * @property name the name of this group.\\n * @constructor Creates an empty group.\\n */\\nclass Group<T>(val name: String) {\\n    /**\\n     * Adds a [member] to this group.\\n     * @return the new size of the group.\\n     */\\n    fun add(member: T): Int { ... }\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Caching for Certain Annotation Processors - Properties File\nDESCRIPTION: Shows how to disable kapt's classloader caching feature for specific annotation processors by listing their full names under `kapt.classloaders.cache.disableForProcessors` in `gradle.properties`. Necessary if some processors are incompatible with caching.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n# specify annotation processors' full names to disable caching for them\nkapt.classloaders.cache.disableForProcessors=[annotation processors full names]\n```\n\n----------------------------------------\n\nTITLE: Deep Recursive Function Implementation\nDESCRIPTION: Shows how to implement deep recursive functions using DeepRecursiveFunction to handle deep recursion without stack overflow.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Tree(val left: Tree?, val right: Tree?)\n\nval calculateDepth = DeepRecursiveFunction<Tree?, Int> { t ->\n    if (t == null) 0 else maxOf(\n        callRecursive(t.left),\n        callRecursive(t.right)\n    ) + 1\n}\n\nfun main() {\n    val deepTree = generateSequence(Tree(null, null)) { prev ->\n        Tree(prev, null)\n    }.take(100_000).last()\n\n    println(calculateDepth(deepTree)) // 100000\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reified Type Parameter as Argument in Inline Function in Kotlin\nDESCRIPTION: Illustrates reflection use with reified type parameter, returning all members of type T using 'T::class.members'. Demonstrates invocation and output of available members for a given class. Only possible within inline functions due to reification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <reified T> membersOf() = T::class.members\n\nfun main(s: Array<String>) {\n    println(membersOf<StringBuilder>().joinToString(\"\\n\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Java IOException in Kotlin\nDESCRIPTION: Demonstrates that Kotlin doesn't force you to catch checked exceptions declared by Java methods, such as IOException.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nfun render(list: List<*>, to: Appendable) {\n    for (item in list) {\n        to.append(item.toString()) // Java would require us to catch IOException here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exception with Custom Message and Cause in Kotlin\nDESCRIPTION: This Kotlin code throws an IllegalArgumentException with a custom error message and a cause (another exception). This provides more context about the source of the error, which can be useful for debugging. It also demonstrates a conditional check before throwing the exception based on user input.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval cause = IllegalStateException(\"Original cause: illegal state\")\n\n// Throws an IllegalArgumentException if userInput is negative \n// Additionally, it shows the original cause, represented by the cause IllegalStateException\nif (userInput < 0) {\n    throw IllegalArgumentException(\"Input must be non-negative\", cause)\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Function Type Instances and Using Extension-like Calls in Kotlin\nDESCRIPTION: Demonstrates invocation of function type values both directly and using the invoke operator, with and without receivers. Examples use String::plus and Int::plus, illustrating both regular and extension-like call styles on function type variables. Great for understanding invocation syntax flexibility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val stringPlus: (String, String) -> String = String::plus\n    val intPlus: Int.(Int) -> Int = Int::plus\n    \n    println(stringPlus.invoke(\"<-\", \"->\"))\n    println(stringPlus(\"Hello, \", \"world!\"))\n    \n    println(intPlus.invoke(1, 1))\n    println(intPlus(1, 2))\n    println(2.intPlus(3)) // extension-like call\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Classic Interface Constructor Function Pattern in Kotlin\nDESCRIPTION: This snippet shows a classic pattern to instantiate an interface implementation using a helper function. It defines an interface 'Printer' with a 'print' method and a function 'Printer' that takes a lambda block. The function creates and returns an anonymous object implementing 'Printer', calling 'block' in its 'print' method. No external dependencies are required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Printer { \n    fun print() \n}\n\nfun Printer(block: () -> Unit): Printer = object : Printer { override fun print() = block() }\n```\n\n----------------------------------------\n\nTITLE: Declaring Lambda Expressions with Function Types and Bodies in Kotlin\nDESCRIPTION: Shows how to declare a variable holding a lambda with an explicit function type annotation, where the lambda sums two integers. Good for illustrating full lambda syntax, including parameter list, types, and return value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval sum: (Int, Int) -> Int = { x: Int, y: Int -> x + y }\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options at the Extension Level with Gradle Kotlin DSL\nDESCRIPTION: This Kotlin DSL snippet demonstrates how to configure common Kotlin compiler options across all targets and shared source sets at the extension level in a Gradle build script. The example sets the opt-in for 'kotlin.RequiresOptIn' globally using the 'compilerOptions {}' block inside the main 'kotlin {}' block. No external dependencies are required beyond the standard Kotlin Gradle plugin. This configuration applies defaults for all lower levels (target and compilation unit/tasks).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        optIn.add(\"kotlin.RequiresOptIn\")\n    }\n}    \n```\n\n----------------------------------------\n\nTITLE: Implementing Addition Operator for a Counter Class in Kotlin\nDESCRIPTION: Example of implementing the plus operator (+) for a Counter class. This allows adding integers to a Counter instance to create a new Counter with an incremented value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/operator-overloading.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Counter(val dayIndex: Int) {\n    operator fun plus(increment: Int): Counter {\n        return Counter(dayIndex + increment)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Build Script Example (Kotlin)\nDESCRIPTION: A complete example of a `build.gradle.kts` file using Kotlin DSL, including KSP plugin, Kotlin JVM plugin, Maven Central repository, and dependencies for Kotlin standard library and Dagger processor. The %kspSupportedKotlinVersion%-%kspVersion% placeholder should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    id(\"com.google.devtools.ksp\") version \"%kspSupportedKotlinVersion%-%kspVersion%\"\n    kotlin(\"jvm\")\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib-jdk8\"))\n    implementation(\"com.google.dagger:dagger-compiler:2.51.1\")\n    ksp(\"com.google.dagger:dagger-compiler:2.51.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Try-Catch-Finally Example in Kotlin\nDESCRIPTION: Illustrates the use of `try-catch-finally` to handle potential `ArithmeticException` during division. The `divideOrNull` function attempts division and returns the result or -1 if an exception occurs. The `finally` block always executes, printing a message.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun divideOrNull(a: Int): Int {\n    \n    // The try block is always executed\n    // An exception here (division by zero) causes an immediate jump to the catch block\n    try {\n        val b = 44 / a\n        println(\"try block: Executing division: $b\")\n        return b\n    }\n    \n    // The catch block is executed due to the ArithmeticException (division by zero if a ==0)\n    catch (e: ArithmeticException) {\n        println(\"catch block: Encountered ArithmeticException $e\")\n        return -1\n    }\n    finally {\n        println(\"finally block: The finally block is always executed\")\n    }\n}\n\nfun main() {\n    \n    // Change this value to get a different result. An ArithmeticException will return: -1\n    divideOrNull(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java Collections in Kotlin\nDESCRIPTION: Demonstrates how to iterate and access elements in Java collections from Kotlin using 'for' loops and operator conventions. It highlights Kotlin's seamless interoperability with Java's collection framework.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.*\n\nfun demo(source: List<Int>) {\n    val list = ArrayList<Int>()\n    // 'for'-loops work for Java collections:\n    for (item in source) {\n        list.add(item)\n    }\n    // Operator conventions work as well:\n    for (i in 0..source.size - 1) {\n        list[i] = source[i] // get and set are called\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Int Predicate Functional Interface in Kotlin\nDESCRIPTION: This code snippet defines a functional interface, 'IntPredicate', using the 'fun interface' modifier. The interface contains a single abstract method 'accept' that takes an integer parameter and returns a Boolean, forming the basis for predicate patterns. No dependencies required; any implementation must provide logic for evaluating an integer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface IntPredicate {\n   fun accept(i: Int): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Smart casts with exception handling in Kotlin\nDESCRIPTION: Shows how Kotlin's smart cast feature works with exception handling, demonstrating how the compiler tracks nullable types across try-catch blocks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun testString() {\n    var stringInput: String? = null\n    // stringInput is smart-cast to String type\n    stringInput = \"\"\n    try {\n        // The compiler knows that stringInput isn't null\n        println(stringInput.length)\n        // 0\n\n        // The compiler rejects previous smart cast information for \n        // stringInput. Now stringInput has the String? type.\n        stringInput = null\n\n        // Trigger an exception\n        if (2 > 1) throw Exception()\n        stringInput = \"\"\n    } catch (exception: Exception) {\n        // The compiler knows stringInput can be null\n        // so stringInput stays nullable.\n        println(stringInput?.length)\n        // null\n    }\n}\n\nfun main() {\n    testString()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments in Kotlin Functions\nDESCRIPTION: This code demonstrates the use of named arguments when calling a Kotlin function.  Named arguments allow you to specify the parameter names when calling the function, which can improve readability, especially when the function has many parameters or when you want to pass parameters in a different order than they are defined.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun printMessageWithPrefix(message: String, prefix: String) {\n    println(\"[$prefix] $message\")\n}\n\nfun main() {\n    // Uses named arguments with swapped parameter order\n    printMessageWithPrefix(prefix = \"Log\", message = \"Hello\")\n    // [Log] Hello\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Entries in Mutable Maps in Kotlin\nDESCRIPTION: This example shows how to update existing entries in mutable maps using the put() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mutableMapOf(\"one\" to 1, \"two\" to 2)\n    val previousValue = numbersMap.put(\"one\", 11)\n    println(\"value associated with 'one', before: $previousValue, after: ${numbersMap[\"one\"]}\")\n    println(numbersMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Name Conflicts in Kotlin Member Extensions with Qualified 'this'\nDESCRIPTION: Shows how to resolve name conflicts between members of the dispatch receiver and the extension receiver within a member extension using the qualified `this` syntax (`this@ClassName`). `toString()` calls `Host.toString()`, while `this@Connection.toString()` calls `Connection.toString()`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Connection {\n    fun Host.getConnectionString() {\n        toString()         // calls Host.toString()\n        this@Connection.toString()  // calls Connection.toString()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Infix Function Declaration and Usage - Kotlin\nDESCRIPTION: Declares an infix function as an extension on Int and demonstrates using it with infix notation as well as dot notation. Useful for DSLs and fluent APIs. The function must meet infix requirements (single parameter, no vararg/defaults).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ninfix fun Int.shl(x: Int): Int { ... }\n\n// calling the function using the infix notation\n1 shl 2\n\n// is the same as\n1.shl(2)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings using String Templates in Kotlin\nDESCRIPTION: Illustrates Kotlin's string templates for embedding variable values directly into strings using the `$` prefix (e.g., `$name`) and evaluating expressions within strings using curly braces (e.g., `${name.length}`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val name = \"Joe\"\n    println(\"Hello, $name\")\n    println(\"Your name is ${name.length} characters long\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements by Index in Kotlin\nDESCRIPTION: Shows how to access elements in a list using indexed access operator (square brackets). Demonstrates retrieving the first element of a list using index 0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    val readOnlyShapes = listOf(\"triangle\", \"square\", \"circle\")\n    println(\"The first item in the list is: ${readOnlyShapes[0]}\")\n    // The first item in the list is: triangle\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Interface Definition for Kotlin Global Declarations\nDESCRIPTION: Defines an Objective-C interface representing global functions from Kotlin. Includes attributes for Swift name mapping. It demonstrates how Kotlin global functions are exposed as class methods in Objective-C, including handling of Kotlin strings, Unit type, primitive types, and higher-order functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_8\n\nLANGUAGE: Objective-C\nCODE:\n```\n__attribute__((objc_subclassing_restricted))\n__attribute__((swift_name(\"LibKt\")))\n@interface DemoLibKt : DemoBase\n+ (NSString * _Nullable)acceptFunF:(NSString * _Nullable (^)(NSString *))f __attribute__((swift_name(\"acceptFun(f:)\")));\n+ (void)forFloatsF:(float)f d:(DemoDouble * _Nullable)d __attribute__((swift_name(\"forFloats(f:d:)\")));\n+ (void)forIntegersB:(int8_t)b s:(uint16_t)s i:(int32_t)i l:(DemoULong * _Nullable)l __attribute__((swift_name(\"forIntegers(b:s:i:l:)\")));\n+ (NSString *)stringsStr:(NSString * _Nullable)str __attribute__((swift_name(\"strings(str:)\")));\n+ (NSString * _Nullable (^)(NSString *))supplyFun __attribute__((swift_name(\"supplyFun()\")));\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining a Covariant Generic Interface using 'out' in Kotlin\nDESCRIPTION: Shows how to define a covariant generic interface `Source` in Kotlin using the `out` modifier on the type parameter `T`. This indicates `T` is only produced (output position), allowing `Source<String>` to be safely treated as a subtype of `Source<Any>`, enabling the assignment shown in the `demo` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Source<out T> {\n    fun nextT(): T\n}\n\nfun demo(strs: Source<String>) {\n    val objects: Source<Any> = strs // This is OK, since T is an out-parameter\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enable K2 compiler with command line option\nDESCRIPTION: This snippet shows how to enable and test the Kotlin K2 compiler by specifying the `-language-version 2.0` compiler option. This option can be added to the Gradle build configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-language-version 2.0\n```\n\n----------------------------------------\n\nTITLE: Null Check with If Expression\nDESCRIPTION: This code snippet shows how to check for nullability using a traditional `if` expression. If the nullable string `b` is not null, it returns its length; otherwise, it returns 0. This is an alternative to using the Elvis operator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns null to a nullable variable  \n    val b: String? = null\n    // Checks for nullability. If not null, returns length. If null, returns 0\n    val l: Int = if (b != null) b.length else 0\n    println(l)\n    // 0\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring NPM Dependency with Version Range in Groovy DSL\nDESCRIPTION: Illustrates how to declare an npm dependency (`react`) using the `npm()` function within the `dependencies {}` block in Groovy DSL. This example specifies a version range using npm's semver syntax ('> 14.0.0 <=16.9.0').\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation npm('react', '> 14.0.0 <=16.9.0')\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exhaustive When Statements in Kotlin 1.6.0\nDESCRIPTION: Shows how Kotlin 1.6.0 warns about non-exhaustive when statements with enum, sealed, or Boolean subjects. This behavior will become an error in future releases to ensure code safety.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class Contact {\n    data class PhoneCall(val number: String) : Contact()\n    data class TextMessage(val number: String) : Contact()\n}\n\nfun Contact.messageCost(): Int =\n    when(this) { // Error: 'when' expression must be exhaustive\n        is Contact.PhoneCall -> 42\n    }\n\nfun sendMessage(contact: Contact, message: String) {\n    // Starting with 1.6.0\n\n    // Warning: Non exhaustive 'when' statements on Boolean will be\n    // prohibited in 1.7, add 'false' branch or 'else' branch instead \n    when(message.isEmpty()) {\n        true -> return\n    }\n    // Warning: Non exhaustive 'when' statements on sealed class/interface will be\n    // prohibited in 1.7, add 'is TextMessage' branch or 'else' branch instead\n    when(contact) {\n        is Contact.PhoneCall -> TODO()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Code with Platform Specific Implementations in Kotlin Multiplatform\nDESCRIPTION: This code demonstrates how common code can access platform specific code. In particular it shows that when common code accesses platform code with differing behavior based on the platform. For example the foo() function can be defined in JVM as printing \"platform foo\" when called with an Int, and in common as printing \"common foo\" when called with Any.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(x: Any) = println(\"common foo\")\n\nfun exampleFunction() {\n    foo(42)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Required Reason API Example in Kotlin\nDESCRIPTION: A code example showing how Kotlin code might access a required reason API from platform.posix, such as fstat, which would require declaration in a privacy manifest.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-privacy-manifest.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport platform.posix.fstat\n\nfun useRequiredReasonAPI() {\n    fstat(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Sequence with yield() and yieldAll() in Kotlin\nDESCRIPTION: Creates a sequence using the sequence() builder function with yield() and yieldAll() to produce elements individually or in chunks, demonstrating how to mix different sources.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val oddNumbers = sequence {\n        yield(1)\n        yieldAll(listOf(3, 5))\n        yieldAll(generateSequence(7) { it + 2 })\n    }\n    println(oddNumbers.take(5).toList())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kotlin Arrays using the `Array` Constructor\nDESCRIPTION: Demonstrates creating Kotlin arrays using the `Array` constructor, which takes a size and an initializer lambda function. The first example creates an `Int` array initialized with zeros, and the second creates a `String` array where each element is the square of its index.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Creates an Array<Int> that initializes with zeros [0, 0, 0]\n    val initArray = Array<Int>(3) { 0 }\n    println(initArray.joinToString())\n    // 0, 0, 0\n\n    // Creates an Array<String> with values [\"0\", \"1\", \"4\", \"9\", \"16\"]\n    val asc = Array(5) { i -> (i * i).toString() }\n    asc.forEach { print(it) }\n    // 014916\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Java Derived class inheriting from Kotlin Base\nDESCRIPTION: This Java code defines a Java class that inherits from a Kotlin class and declares a field with the same name as a Kotlin property in the superclass. It demonstrates the precedence rules for name resolution, where the Java field in the subclass takes precedence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\npublic class Derived extends Base {\n    public String a = \"a\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Underscores in Number Literals in Kotlin\nDESCRIPTION: Shows how to use underscores to improve readability of number literals in Kotlin, including integer, long, hexadecimal, binary, and floating-point numbers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval oneMillion = 1_000_000\nval creditCardNumber = 1234_5678_9012_3456L\nval socialSecurityNumber = 999_99_9999L\nval hexBytes = 0xFF_EC_DE_5E\nval bytes = 0b11010010_01101001_10010100_10010010\nval bigFractional = 1_234_567.7182818284\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Toolchain for Kotlin Gradle Plugin (Kotlin)\nDESCRIPTION: Sets up the Kotlin Gradle plugin to use a specific JVM toolchain. Replace `<MAJOR_JDK_VERSION>` with desired JDK. It affects Java compile tasks too.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>))\n    }\n    // Or shorter:\n    jvmToolchain(<MAJOR_JDK_VERSION>)\n    // For example:\n    jvmToolchain(%jvmLTSVersionSupportedByKotlin%)\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Elements in Kotlin\nDESCRIPTION: Demonstrates associating elements with their characteristics in Kotlin using the associateWith() function. It creates a map of words and their lengths, showing Kotlin's more concise syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbers.associateWith { it.length })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Kotlin Extension Property\nDESCRIPTION: Demonstrates how to define an extension property `lastIndex` for the generic `List<T>` class in Kotlin. Extension properties cannot have initializers or backing fields; their behavior must be defined using explicit getters (and setters, if needed).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval <T> List<T>.lastIndex: Int\n    get() = size - 1\n```\n\n----------------------------------------\n\nTITLE: Declaring Top-Level Dependencies in Kotlin DSL\nDESCRIPTION: This snippet shows how to declare source set dependencies in the top-level `dependencies {}` block of a Gradle build script using the Kotlin DSL. The dependency declarations follow the pattern `<sourceSetName><DependencyKind>`, such as `commonMainApi`. This allows for a more concise declaration of dependencies applicable to specific source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    \"commonMainApi\"(\"com.example:foo-common:1.0\")\n    \"jvm6MainApi\"(\"com.example:foo-jvm6:1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Desktop Source Sets in Kotlin DSL\nDESCRIPTION: Demonstrates how to manually configure a shared 'desktop' source set for Linux, Windows and macOS native targets using Kotlin DSL. Creates an intermediate source set that inherits from commonMain and is used by platform-specific source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    linuxX64()\n    mingwX64()\n    macosX64()\n\n    sourceSets {\n        val desktopMain by creating {\n            dependsOn(commonMain.get())\n        }\n\n        linuxX64Main.get().dependsOn(desktopMain)\n        mingwX64Main.get().dependsOn(desktopMain)\n        macosX64Main.get().dependsOn(desktopMain)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: When with Range/Collection Check Kotlin\nDESCRIPTION: Shows how to check if a value is within a range or contained in a collection using the 'in' and '!in' keywords within a 'when' statement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (x) {\n    in 1..10 -> print(\"x is in the range\")\n    in validNumbers -> print(\"x is valid\")\n    !in 10..20 -> print(\"x is outside the range\")\n    else -> print(\"none of the above\")\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda with Function Type Kotlin\nDESCRIPTION: This example shows how to explicitly define a function type for a lambda expression. The `upperCaseString` variable is assigned a lambda that converts a string to uppercase, and its type is defined as `(String) -> String`. This demonstrates how to provide type information to the compiler for lambda expressions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nval upperCaseString: (String) -> String = { text -> text.uppercase() }\n\nfun main() {\n    println(upperCaseString(\"hello\"))\n    // HELLO\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection Elements in Kotlin\nDESCRIPTION: Demonstrates basic collection filtering operations and shows how results need to be stored to be used. The example filters strings longer than 3 characters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")  \n    numbers.filter { it.length > 3 }  // nothing happens with `numbers`, result is lost\n    println(\"numbers are still $numbers\")\n    val longerThan3 = numbers.filter { it.length > 3 } // result is stored in `longerThan3`\n    println(\"numbers longer than 3 chars are $longerThan3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Parameter Values in Kotlin Functions\nDESCRIPTION: This example illustrates how to define default values for function parameters in Kotlin. If a parameter has a default value, it can be omitted when calling the function.  This makes the function more flexible and easier to use in cases where the default value is appropriate.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun printMessageWithPrefix(message: String, prefix: String = \"Info\") {\n    println(\"[$prefix] $message\")\n}\n\nfun main() {\n    // Function called with both parameters\n    printMessageWithPrefix(\"Hello\", \"Log\") \n    // [Log] Hello\n    \n    // Function called only with message parameter\n    printMessageWithPrefix(\"Hello\")        \n    // [Info] Hello\n    \n    printMessageWithPrefix(prefix = \"Log\", message = \"Hello\")\n    // [Log] Hello\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Message Longer Than 10 Characters Kotlin\nDESCRIPTION: This Kotlin code retrieves the first `Message` from a collection where the message text is longer than 10 characters. It uses the `first()` function with a lambda expression as a predicate.  If no message matches the condition, a `NoSuchElementException` will be thrown.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/firstMessageLongerThan10\")\nfun firstMessageLongerThan10(): Message {\n    val messages = service.findMessages()\n    return messages.first { it.text.length > 10 }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding testImplementation Dependency in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add the `testImplementation` dependency in a Kotlin-based `build.gradle.kts` file. This dependency allows you to use `kotlin.test` for writing tests and JUnit for running them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    // Other dependencies.\n    testImplementation(kotlin(\"test\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using `groupBy` for Collection Grouping and Transformation in Kotlin\nDESCRIPTION: This snippet demonstrates the `groupBy` extension function in Kotlin. It first groups a list of strings based on their first letter, resulting in a Map where keys are the first letters and values are lists of corresponding strings. It then shows how to use `groupBy` with a value transformation function to group by the first letter and store the uppercase versions of the strings in the map's values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-grouping.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    // Groups the strings by their first letter using groupBy()\n    val groupedByFirstLetter = numbers.groupBy { it.first().uppercase() }\n    println(groupedByFirstLetter)\n    // {O=[one], T=[two, three], F=[four, five]}\n\n    // Iterates through each group and prints the key and its associated values\n    for ((key, value) in groupedByFirstLetter) {\n        println(\"Key: $key, Values: $value\")\n    }\n    // Key: O, Values: [one]\n    // Key: T, Values: [two, three]\n    // Key: F, Values: [four, five]\n\n    // Groups the strings by their first letter and transforms the values to uppercase\n    val groupedAndTransformed = numbers.groupBy(keySelector = { it.first() }, valueTransform = { it.uppercase() })\n    println(groupedAndTransformed)\n    // {o=[ONE], t=[TWO, THREE], f=[FOUR, FIVE]}\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Function with Multiple Parameters - Kotlin\nDESCRIPTION: Declares a function with two integer parameters using the name:type notation, showcasing explicit typing. Intended to illustrate function parameters' syntax. No dependencies; parameters must be provided explicitly when calling.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun powerOf(number: Int, exponent: Int): Int { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Comparing Kotlin Inline Classes and Type Aliases\nDESCRIPTION: Contrasts inline classes with type aliases, highlighting the key difference in assignment compatibility. Type aliases (`NameTypeAlias`) are interchangeable with their underlying type (`String`), while inline classes (`NameInlineClass`) create distinct types that are not automatically compatible with their underlying type. The `accept` functions and calls in `main` demonstrate these compatibility rules.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias NameTypeAlias = String\n\n@JvmInline\nvalue class NameInlineClass(val s: String)\n\nfun acceptString(s: String) {}\nfun acceptNameTypeAlias(n: NameTypeAlias) {}\nfun acceptNameInlineClass(p: NameInlineClass) {}\n\nfun main() {\n    val nameAlias: NameTypeAlias = \"\"\n    val nameInlineClass: NameInlineClass = NameInlineClass(\"\")\n    val string: String = \"\"\n\n    acceptString(nameAlias) // OK: pass alias instead of underlying type\n    acceptString(nameInlineClass) // Not OK: can't pass inline class instead of underlying type\n\n    // And vice versa:\n    acceptNameTypeAlias(string) // OK: pass underlying type instead of alias\n    acceptNameInlineClass(string) // Not OK: can't pass underlying type instead of inline class\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Unit-returning Function - Kotlin\nDESCRIPTION: Declares a function returning 'Unit' (the Kotlin equivalent of 'void'), which performs an action based on a nullable string parameter. Shows optional explicit return type. No required return value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello $name\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` or `return` is optional\n}\n```\n\n----------------------------------------\n\nTITLE: Set language version in build.gradle.kts\nDESCRIPTION: This code snippet shows how to set the language version to 2.0 in the `build.gradle.kts` file to enable the K2 compiler for kapt. This is a required step, along with setting `kapt.use.k2=true` in `gradle.properties`, to use K2 with kapt.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = \"2.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparable Implementation with Infix compareTo\nDESCRIPTION: Demonstrates the new infix form of compareTo() for implementing the Comparable interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass WrappedText(val text: String) : Comparable<WrappedText> {\n    override fun compareTo(other: WrappedText): Int =\n        this.text compareTo other.text\n}\n```\n\n----------------------------------------\n\nTITLE: Calling External Function (Kotlin)\nDESCRIPTION: Demonstrates how to call the externally declared 'greet' function from Kotlin. The Kotlin code invokes the JavaScript 'greet' function as if it were a regular Kotlin function.  The input parameter is a string literal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n    greet(\"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Structural Equality for Class in Kotlin\nDESCRIPTION: This snippet showcases how to override the `equals()` function in a Kotlin class to implement custom structural equality, specifically to compare object properties for equality.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/equality.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass Point(val x: Int, val y: Int) {\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Point) return false\n\n        // Compares properties for structural equality\n        return this.x == other.x && this.y == other.y\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Properties from Generated Functions in Kotlin Data Classes\nDESCRIPTION: Illustrates how to declare a property (`age`) within the class body instead of the primary constructor. Only properties defined in the primary constructor (`name`) are considered for the automatically generated `equals()`, `hashCode()`, `toString()`, `copy()`, and `componentN()` functions. Properties declared in the body are excluded from these implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String) {\n    var age: Int = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using with() for Temporary Scope in Kotlin\nDESCRIPTION: This example demonstrates how to use the with() scope function to create a temporary scope for local variables. It accesses the first and last items of a list without explicitly referencing the list object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\")\n    with(numbers) {\n        val firstItem = first()\n        val lastItem = last()        \n        println(\"First item: $firstItem, last item: $lastItem\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing this and it Context Object References in Kotlin Scope Functions\nDESCRIPTION: Illustrates the difference between scope functions that use 'this' (run) and those that use 'it' (let) to reference the context object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val str = \"Hello\"\n    // this\n    str.run {\n        println(\"The string's length: $length\")\n        //println(\"The string's length: ${this.length}\") // does the same\n    }\n\n    // it\n    str.let {\n        println(\"The string's length is ${it.length}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Class in Kotlin\nDESCRIPTION: Defines a simple generic class `Box` in Kotlin with a single type parameter `T`. It takes an instance of `T` in its constructor and stores it in a mutable property `value`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Box<T>(t: T) {\n    var value = t\n}\n```\n\n----------------------------------------\n\nTITLE: Iterate over Collection using For Loop in Kotlin\nDESCRIPTION: This snippet demonstrates how to iterate over a collection (List) using a `for` loop in Kotlin. The loop iterates through a list of strings, printing each string. The `in` keyword is used to specify the collection for the iterator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n//sampleStart\n    val cakes = listOf(\"carrot\", \"cheese\", \"chocolate\")\n\n    for (cake in cakes) {\n        println(\"Yummy, it's a $cake cake!\")\n    }\n    // Yummy, it's a carrot cake!\n    // Yummy, it's a cheese cake!\n    // Yummy, it's a chocolate cake!\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Building a REST Controller for Messages in Kotlin\nDESCRIPTION: This snippet defines a `MessageController` class with RESTful endpoints for managing messages. It uses annotations for request mapping and method types, leveraging Spring Boot's REST capabilities. Dependencies include various Spring Web components. Functions handle retrieving all messages, adding a new message, and retrieving a message by ID, returning appropriate HTTP responses.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageController.kt\npackage demo\n\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PathVariable\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\nimport java.net.URI\n\n@RestController\n@RequestMapping(\"/\")\nclass MessageController(private val service: MessageService) {\n    @GetMapping\n    fun listMessages() = ResponseEntity.ok(service.findMessages())\n\n    @PostMapping\n    fun post(@RequestBody message: Message): ResponseEntity<Message> {\n        val savedMessage = service.save(message)\n        return ResponseEntity.created(URI(\"/${savedMessage.id}\")).body(savedMessage)\n    }\n\n    @GetMapping(\"/{id}\")\n    fun getMessage(@PathVariable id: String): ResponseEntity<Message> =\n        service.findMessageById(id).toResponseEntity()\n\n    private fun Message?.toResponseEntity(): ResponseEntity<Message> =\n        // If the message is null (not found), set response code to 404\n        this?.let { ResponseEntity.ok(it) } ?: ResponseEntity.notFound().build()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Chunking Collections into Fixed-Size Lists in Kotlin\nDESCRIPTION: Demonstrates the `chunked()` extension function on a `List<Int>`. It splits the original list into a `List` of `List`s, where each inner list contains elements from the original list, up to the specified chunk size. The last chunk may contain fewer elements if the total number of elements is not perfectly divisible by the chunk size.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.chunked(3))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local JDK Path for Gradle Tasks (Kotlin)\nDESCRIPTION: Directly specifies a local JDK path for task execution using Kotlin DSL. Insert the actual path and version in place of `<LOCAL_JDK_VERSION>`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<UsesKotlinJavaToolchain>().configureEach {\n    kotlinJavaToolchain.jdk.use(\n        \"/path/to/local/jdk\", // Put a path to your JDK\n        JavaVersion.<LOCAL_JDK_VERSION> // For example, JavaVersion.17\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending MouseAdapter with an Object Declaration\nDESCRIPTION: Illustrates how object declarations can inherit from existing classes or implement interfaces. This example shows `DefaultListener` as an object that extends `MouseAdapter` and overrides `mouseClicked` and `mouseEntered` methods, demonstrating polymorphism.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject DefaultListener : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering List with Lambdas Kotlin\nDESCRIPTION: This code showcases the use of lambda expressions for filtering a list of integers.  It demonstrates filtering for positive and negative numbers using both inline lambda definitions and assigning the lambda to a variable before using it in the `filter` function. The output shows the filtered positive and negative numbers from the list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val numbers = listOf(1, -2, 3, -4, 5, -6)\n    \n    val positives = numbers.filter ({ x -> x > 0 })\n    \n    val isNegative = { x: Int -> x < 0 }\n    val negatives = numbers.filter(isNegative)\n    \n    println(positives)\n    // [1, 3, 5]\n    println(negatives)\n    // [-2, -4, -6]\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entries by Keys or Values in Kotlin\nDESCRIPTION: Shows how to remove entries from a mutable map by accessing the keys or values collections. When removing by value, only the first matching entry is removed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mutableMapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3, \"threeAgain\" to 3)\n    numbersMap.keys.remove(\"one\")\n    println(numbersMap)\n    numbersMap.values.remove(3)\n    println(numbersMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Read Data from SQL Table in Kotlin\nDESCRIPTION: This snippet reads data from a specified SQL table using the `readSqlTable()` function from the Kotlin DataFrame library. It requires a `dbConfig` object and the table name. A `limit` parameter is used to restrict the number of records retrieved for efficiency. The resulting data is stored in a DataFrame.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval dfs = DataFrame.readSqlTable(dbConfig, tableName = \"movies\", limit = 100)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Builder with Type Inference Support\nDESCRIPTION: Complete example of a custom ItemHolder builder that supports builder inference by providing public members with type parameters in their signatures.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ItemHolder<T> {\n    private val items = mutableListOf<T>()\n\n    fun addItem(x: T) {\n        items.add(x)\n    }\n\n    fun getLastItem(): T? = items.lastOrNull()\n}\n\nfun <T> ItemHolder<T>.addAllItems(xs: List<T>) {\n    xs.forEach { addItem(it) }\n}\n\nfun <T> itemHolderBuilder(builder: ItemHolder<T>.() -> Unit): ItemHolder<T> = \n    ItemHolder<T>().apply(builder)\n\nfun test(s: String) {\n    val itemHolder1 = itemHolderBuilder { // Type of itemHolder1 is ItemHolder<String>\n        addItem(s)\n    }\n    val itemHolder2 = itemHolderBuilder { // Type of itemHolder2 is ItemHolder<String>\n        addAllItems(listOf(s)) \n    }\n    val itemHolder3 = itemHolderBuilder { // Type of itemHolder3 is ItemHolder<String?>\n        val lastItem: String? = getLastItem()\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Java Methods with Definitely Non-Nullable Types in Kotlin\nDESCRIPTION: Demonstrates how to use the 'definitely non-nullable' syntax (T & Any) when overriding Java methods with @NotNull annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface ArcadeGame<T1> : Game<T1> {\n    override fun save(x: T1): T1\n    // T1 is definitely non-nullable\n    override fun load(x: T1 & Any): T1 & Any\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing a Kotlin Object to JSON\nDESCRIPTION: This snippet demonstrates how to serialize a Kotlin object to JSON using the kotlinx.serialization library. It creates a Data object and encodes it to a JSON string using Json.encodeToString().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.encodeToString\n\n@Serializable\ndata class Data(val a: Int, val b: String)\n\nfun main() {\n   val json = Json.encodeToString(Data(42, \"str\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotlin Extensions for Companion Objects\nDESCRIPTION: Illustrates how to define extension functions and properties for a class's companion object. The extension `printCompanion` is defined for `MyClass.Companion` and can be called using the class name as the qualifier (`MyClass.printCompanion()`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyClass {\n    companion object { }  // will be called \"Companion\"\n}\n\nfun MyClass.Companion.printCompanion() { println(\"companion\") }\n\nfun main() {\n    MyClass.printCompanion()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the kapt Plugin with Gradle Groovy DSL - Groovy\nDESCRIPTION: Shows how to apply the kapt plugin in a Gradle build using Groovy DSL. This snippet is for projects using `build.gradle` with Groovy syntax and requires specifying the Kotlin kapt plugin ID and version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.kapt\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Nulls with filterNotNull() in Kotlin\nDESCRIPTION: This example shows how to use filterNotNull() to create a list of non-null elements from a collection, which then allows for operations that assume non-nullability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(null, \"one\", \"two\", null)\n    numbers.filterNotNull().forEach {\n        println(it.length)   // length is unavailable for nullable Strings\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Kotlin Dependencies with BOM\nDESCRIPTION: Demonstrates how to use the Kotlin BOM (Bill of Materials) to align all Kotlin dependency versions in a Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(platform(\"org.jetbrains.kotlin:kotlin-bom:1.8.0\"))\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Extension Function in Kotlin\nDESCRIPTION: Demonstrates how to define an extension function `swap` for the `MutableList<Int>` class in Kotlin. This function allows swapping two elements at specified indices within the list. The `this` keyword inside the function refers to the `MutableList<Int>` instance on which the function is called.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun MutableList<Int>.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // 'this' corresponds to the list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Management Repository (Groovy)\nDESCRIPTION: Configuring the pluginManagement block in `settings.gradle` file to include Gradle Plugin Portal repository. This allows resolving plugins from the Gradle Plugin Portal. Useful when using custom processors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_11\n\nLANGUAGE: Groovy\nCODE:\n```\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified JVM Toolchain Configuration in Gradle\nDESCRIPTION: New simplified method for configuring JVM toolchain in Kotlin Gradle projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvmToolchain(17)\n}\n```\n\n----------------------------------------\n\nTITLE: KSP File Structure Representation in Kotlin\nDESCRIPTION: This snippet provides a conceptual representation of how KSP views a source file. It models common declarations such as classes, functions, and properties, and their attributes in a hierarchical structure. The focus is on showing the elementary KSP types like KSFile, KSClassDeclaration, and KSFunctionDeclaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nKSFile\n  packageName: KSName\n  fileName: String\n  annotations: List<KSAnnotation>  (File annotations)\n  declarations: List<KSDeclaration>\n    KSClassDeclaration // class, interface, object\n      simpleName: KSName\n      qualifiedName: KSName\n      containingFile: String\n      typeParameters: KSTypeParameter\n      parentDeclaration: KSDeclaration\n      classKind: ClassKind\n      primaryConstructor: KSFunctionDeclaration\n      superTypes: List<KSTypeReference>\n      // contains inner classes, member functions, properties, etc.\n      declarations: List<KSDeclaration>\n    KSFunctionDeclaration // top level function\n      simpleName: KSName\n      qualifiedName: KSName\n      containingFile: String\n      typeParameters: KSTypeParameter\n      parentDeclaration: KSDeclaration\n      functionKind: FunctionKind\n      extensionReceiver: KSTypeReference?\n      returnType: KSTypeReference\n      parameters: List<KSValueParameter>\n      // contains local classes, local functions, local variables, etc.\n      declarations: List<KSDeclaration>\n    KSPropertyDeclaration // global variable\n      simpleName: KSName\n      qualifiedName: KSName\n      containingFile: String\n      typeParameters: KSTypeParameter\n      parentDeclaration: KSDeclaration\n      extensionReceiver: KSTypeReference?\n      type: KSTypeReference\n      getter: KSPropertyGetter\n        returnType: KSTypeReference\n      setter: KSPropertySetter\n        parameter: KSValueParameter\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with filter() in Kotlin\nDESCRIPTION: This snippet shows how to use the filter() function in Kotlin to filter elements from a List and a Map based on specific conditions. This method leaves the original collection unchanged.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")  \n    val longerThan3 = numbers.filter { it.length > 3 }\n    println(longerThan3)\n\n    val numbersMap = mapOf(\"key1\" to 1, \"key2\" to 2, \"key3\" to 3, \"key11\" to 11)\n    val filteredMap = numbersMap.filter { (key, value) -> key.endsWith(\"1\") && value > 10}\n    println(filteredMap)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Create Duration Kotlin\nDESCRIPTION: This code snippet demonstrates how to create Duration objects in Kotlin using extension properties for Int, Long, and Double types. It showcases the usage of nanoseconds, microseconds, milliseconds, seconds, minutes, hours, and days.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\nimport kotlin.time.Duration.Companion.nanoseconds\nimport kotlin.time.Duration.Companion.milliseconds\nimport kotlin.time.Duration.Companion.seconds\nimport kotlin.time.Duration.Companion.minutes\nimport kotlin.time.Duration.Companion.days\n\nfun main() {\n//sampleStart\n    val fiveHundredMilliseconds: Duration = 500.milliseconds\n    val zeroSeconds: Duration = 0.seconds\n    val tenMinutes: Duration = 10.minutes\n    val negativeNanosecond: Duration = (-1).nanoseconds\n    val infiniteDays: Duration = Double.POSITIVE_INFINITY.days\n    val negativeInfiniteDays: Duration = Double.NEGATIVE_INFINITY.days\n\n    println(fiveHundredMilliseconds) // 500ms\n    println(zeroSeconds)             // 0s\n    println(tenMinutes)              // 10m\n    println(negativeNanosecond)      // -1ns\n    println(infiniteDays)            // Infinity\n    println(negativeInfiniteDays)    // -Infinity\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Translation of Null Check to Kotlin - Kotlin\nDESCRIPTION: Shows a direct translation of the Java null-check idiom for safe access in Kotlin. Defines data classes for Order and Customer, fetches an order, and checks for null before processing its customer. This snippet mimics Java-style safety but leverages Kotlin type system.\nDependencies: findOrder() must be implemented. Input: Order? Output: processCustomer invoked if order exists.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\ndata class Order(val customer: Customer)\\n\\ndata class Customer(val name: String)\\n\\nval order = findOrder()\\n\\n// Direct conversion\\nif (order != null){\\n    processCustomer(order.customer)\\n}\n```\n\n----------------------------------------\n\nTITLE: JUnit Test for Sum Function (Kotlin)\nDESCRIPTION: This Kotlin code defines a JUnit test case for the `sum` function in the `Sample` class. It imports necessary classes from `kotlin.test` and `org.junit.jupiter.api`, creates an instance of the `Sample` class, and uses `assertEquals` to verify that the `sum` function returns the expected result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.example.Sample\nimport org.junit.jupiter.api.Assertions.*\nimport kotlin.test.Test\n\nclass SampleTest {\n    private val testSample: Sample = Sample()\n\n    @Test\n    fun testSum() {\n        val expected = 42\n        assertEquals(expected, testSample.sum(40, 2))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using union() for Merging Sets in Kotlin\nDESCRIPTION: Demonstrates how to merge two collections using the union() function. Shows how the order of operands affects the resulting collection order when merging sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/set-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = setOf(\"one\", \"two\", \"three\")\n\n    // output according to the order\n    println(numbers union setOf(\"four\", \"five\"))\n    // [one, two, three, four, five]\n    println(setOf(\"four\", \"five\") union numbers)\n    // [four, five, one, two, three]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Local Opt-in Implementation in Kotlin\nDESCRIPTION: Demonstrates how to opt-in to using an experimental API locally using the @OptIn annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(MyDateTime::class)\n\n// Uses DateProvider\nfun getDate(): Date {\n    val dateProvider: DateProvider\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Visibility for Constructors in Kotlin\nDESCRIPTION: Demonstrates how to specify the visibility of a primary constructor in a Kotlin class. The example shows a class with a private constructor, requiring the explicit 'constructor' keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/visibility-modifiers.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C private constructor(a: Int) { ... }\n```\n\n----------------------------------------\n\nTITLE: Testing Predicates with any(), none(), and all() in Kotlin\nDESCRIPTION: This snippet uses the any(), none(), and all() functions to evaluate collections against predicates, returning boolean results based on the evaluated predicates.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n\n    println(numbers.any { it.endsWith(\"e\") })\n    println(numbers.none { it.endsWith(\"a\") })\n    println(numbers.all { it.endsWith(\"e\") })\n\n    println(emptyList<Int>().all { it > 5 })   // vacuous truth\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Not-Null Assertion Operator Example\nDESCRIPTION: This code illustrates the use of the not-null assertion operator (!!). It converts a nullable type to a non-nullable type. If the value is null, it throws a NullPointerException (NPE). Use it only when you are certain the value is not null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a nullable string to a variable\n    val b: String? = \"Kotlin\"\n    // Treats b as non-null and accesses its length\n    val l = b!!.length\n    println(l)\n    // 6\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using also with Named Parameter in Kotlin\nDESCRIPTION: Demonstrates using the also scope function with a named parameter 'value' instead of the default 'it' to reference the context object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\nfun writeToLog(message: String) {\n    println(\"INFO: $message\")\n}\n\nfun main() {\n    fun getRandomInt(): Int {\n        return Random.nextInt(100).also { value ->\n            writeToLog(\"getRandomInt() generated value $value\")\n        }\n    }\n    \n    val i = getRandomInt()\n    println(i)\n}\n```\n\n----------------------------------------\n\nTITLE: Return Value Examples in Lambda\nDESCRIPTION: Shows two equivalent ways of returning values from lambda expressions - implicit and explicit returns.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nints.filter {\n    val shouldFilter = it > 0\n    shouldFilter\n}\n\nints.filter {\n    val shouldFilter = it > 0\n    return@filter shouldFilter\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering a List with a Lambda in Kotlin\nDESCRIPTION: This example demonstrates how to filter a list using a lambda expression. The lambda should be passed outside parentheses when a call takes a single lambda, and spaces are recommended around curly braces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.filter { it > 10 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Multiplatform targets (Kotlin 1.9.20)\nDESCRIPTION: This Kotlin code snippet shows the simplified configuration of Kotlin Multiplatform targets (Android and iOS) in Kotlin version 1.9.20 using the default hierarchy template. It only requires declaring the necessary targets (`androidTarget`, `iosArm64`, `iosSimulatorArm64`), as the `iosMain` source set is automatically created by the plugin, reducing boilerplate code. This highlights the benefits of the new template in simplifying project setup.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n\n    // The iosMain source set is created automatically\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Expressions for Java Functional Interfaces in Kotlin\nDESCRIPTION: This example shows how to create instances of Java functional interfaces (interfaces with a single abstract method) using Kotlin lambda expressions. This is a concise alternative to anonymous inner classes when working with Java interop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/nested-classes.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = ActionListener { println(\"clicked\") }\n```\n\n----------------------------------------\n\nTITLE: Using Non-Extension run() for Code Block Execution in Kotlin\nDESCRIPTION: This example shows how to use the non-extension variant of run() to execute a block of code and compute a result where an expression is required, such as initializing a complex object or variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val hexNumberRegex = run {\n        val digits = \"0-9\"\n        val hexDigits = \"A-Fa-f\"\n        val sign = \"+-\"\n        \n        Regex(\"[$sign]?[$digits$hexDigits]+\")\n    }\n    \n    for (match in hexNumberRegex.findAll(\"+123 -FFFF !%*& 88 XYZ\")) {\n        println(match.value)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Objects and Interface Implementation Kotlin\nDESCRIPTION: This Kotlin code illustrates how anonymous objects can implement interfaces and how their members are accessible based on the visibility and declared return type of the function. The `NotificationManager` class demonstrates different scenarios where an anonymous object implements an interface and overrides its methods, showcasing how members are accessible depending on the return type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\ninterface Notification {\n    // Declares notifyUser() in the Notification interface\n    fun notifyUser()\n}\n\ninterface DetailedNotification\n\nclass NotificationManager {\n    // The return type is Any. The message property is not accessible.\n    // When the return type is Any, only members of the Any class are accessible.\n    fun getNotification() = object {\n        val message: String = \"General notification\"\n    }\n\n    // The return type is Notification because the anonymous object implements only one interface\n    // The notifyUser() function is accessible because it is part of the Notification interface\n    // The message property is not accessible because it is not declared in the Notification interface\n    fun getEmailNotification() = object : Notification {\n        override fun notifyUser() {\n            println(\"Sending email notification\")\n        }\n        val message: String = \"You've got mail!\"\n    }\n\n    // The return type is DetailedNotification. The notifyUser() function and the message property are not accessible\n    // Only members declared in the DetailedNotification interface are accessible\n    fun getDetailedNotification(): DetailedNotification = object : Notification, DetailedNotification {\n        override fun notifyUser() {\n            println(\"Sending detailed notification\")\n        }\n        val message: String = \"Detailed message content\"\n    }\n}\n//sampleEnd\nfun main() {\n    // This produces no output\n    val notificationManager = NotificationManager()\n\n    // The message property is not accessible here because the return type is Any\n    // This produces no output\n    val notification = notificationManager.getNotification()\n\n    // The notifyUser() function is accessible\n    // The message property is not accessible here because the return type is Notification\n    val emailNotification = notificationManager.getEmailNotification()\n    emailNotification.notifyUser()\n    // Sending email notification\n\n    // The notifyUser() function and message property are not accessible here because the return type is DetailedNotification\n    // This produces no output\n    val detailedNotification = notificationManager.getDetailedNotification()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Name via JsReference\nDESCRIPTION: This Kotlin function `setUserName` takes a `JsReference<User>` and a `name` as input. It retrieves the underlying `User` object using `user.get()` and sets its `name` property. The `@JsExport` annotation exposes this function to JavaScript, enabling manipulation of Kotlin objects from JavaScript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsExport\nfun setUserName(user: JsReference<User>, name: String) {\n    user.get().name = name\n}\n```\n\n----------------------------------------\n\nTITLE: Try-Catch as an Expression in Kotlin\nDESCRIPTION: Illustrates using `try-catch` as an expression in Kotlin, allowing it to return a value. The `count()` function simulates a potential `ArithmeticException`. If `count()` succeeds, its result is assigned to `num`; otherwise, the `catch` block returns -1.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val num: Int = try {\n\n        // If count() completes successfully, its return value is assigned to num\n        count()\n        \n    } catch (e: ArithmeticException) {\n        \n        // If count() throws an exception, the catch block returns -1, \n        // which is assigned to num\n        -1\n    }\n    println(\"Result: $num\")\n}\n\n// Simulates a function that might throw ArithmeticException\nfun count(): Int {\n    \n    // Change this value to return a different value to num\n    val a = 0\n    \n    return 10 / a\n}\n```\n\n----------------------------------------\n\nTITLE: Map Iteration Extension Functions in Kotlin\nDESCRIPTION: Shows extension functions that allow using destructuring declarations in for-loops with maps. The `iterator()` provides map entry sequences, and `componentN()` functions extract keys and values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\noperator fun <K, V> Map<K, V>.iterator(): Iterator<Map.Entry<K, V>> = entrySet().iterator()\noperator fun <K, V> Map.Entry<K, V>.component1() = getKey()\noperator fun <K, V> Map.Entry<K, V>.component2() = getValue()\n```\n\n----------------------------------------\n\nTITLE: Delegating Class Properties to Other Properties - Kotlin\nDESCRIPTION: Showcases delegating class or top-level properties to other properties using Kotlin's property reference syntax (the :: operator). This enables property forwarding, backward compatibility during renaming, and shared backing fields. Requires no external dependencies and works for member, extension, or top-level properties as shown in the example.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nvar topLevelInt: Int = 0\nclass ClassWithDelegate(val anotherClassInt: Int)\n\nclass MyClass(var memberInt: Int, val anotherClassInstance: ClassWithDelegate) {\n    var delegatedToMember: Int by this::memberInt\n    var delegatedToTopLevel: Int by ::topLevelInt\n    \n    val delegatedToAnotherClass: Int by anotherClassInstance::anotherClassInt\n}\nvar MyClass.extDelegated: Int by ::topLevelInt\n```\n\n----------------------------------------\n\nTITLE: Using Scope-Local Pointers with memScoped in Kotlin/Native\nDESCRIPTION: Creates scope-stable pointers for CValues instances that are bound to a MemScope's lifetime. These pointers are valid only within the memScoped block and become invalid once execution leaves the scope.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\n\n@OptIn(kotlinx.cinterop.ExperimentalForeignApi::class)\nmemScoped {\n    items = arrayOfNulls<CPointer<ITEM>?>(6)\n    arrayOf(\"one\", \"two\").forEachIndexed { index, value -> items[index] = value.cstr.ptr }\n    menu = new_menu(\"Menu\".cstr.ptr, items.toCValues().ptr)\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Retrieval by Predicate - FirstOrNull - Kotlin Collections - Kotlin\nDESCRIPTION: Demonstrates use of firstOrNull() on a Kotlin List, safely returning null if no element matches the predicate, instead of throwing an exception. Requires Kotlin standard library 1.3+. Input is a list and a predicate lambda; output is the first matching element or null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\\n    println(numbers.firstOrNull { it.length > 6 })\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expected and Actual Functions in Common Code\nDESCRIPTION: Demonstrates the basic structure of expected declarations in common code, defining an Identity class and a buildIdentity factory function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage identity\n\nclass Identity(val userName: String, val processID: Long)\n\nexpect fun buildIdentity(): Identity\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable List in Kotlin\nDESCRIPTION: This snippet demonstrates how to create and manipulate a mutable list in Kotlin, specifically showcasing list addition and a compilation error for reassignment. It requires Kotlin compiler version 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collections-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.add(\"five\")   // this is OK\n    println(numbers)\n    //numbers = mutableListOf(\"six\", \"seven\")      // compilation error\n//sampleEnd\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CocoaPods Library in Kotlin Code\nDESCRIPTION: Example of how to import a CocoaPods library in Kotlin code. This imports all symbols from the SDWebImage library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport cocoapods.SDWebImage.*\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Maps in Kotlin\nDESCRIPTION: Demonstrates how to create read-only and mutable maps, and access their values using the indexed access operator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Read-only map\n    val readOnlyJuiceMenu = mapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(readOnlyJuiceMenu)\n    // {apple=100, kiwi=190, orange=100}\n\n    // Mutable map with explicit type declaration\n    val juiceMenu: MutableMap<String, Int> = mutableMapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(juiceMenu)\n    // {apple=100, kiwi=190, orange=100}\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Parent Finder Using Reified Type Parameter in Kotlin\nDESCRIPTION: Defines an inline extension function for tree traversal that uses a reified type parameter, allowing direct use of 'is' without runtime reflection. The function is inlined, so type information is preserved at the call site. Returns the matching parent or null, and is called as 'findParentOfType<MyType>()'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <reified T> TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null && p !is T) {\n        p = p.parent\n    }\n    return p as T?\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Another Multiplatform Project in Groovy\nDESCRIPTION: This snippet shows how to add a dependency on another multiplatform project in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation project(':some-other-multiplatform-module')\n            }\n        }\n        androidMain {\n            dependencies {\n                // platform part of :some-other-multiplatform-module will be added automatically\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin code using Java array\nDESCRIPTION: This example demonstrates how to pass an `IntArray` from Kotlin to a Java method that expects an `int[]`. It showcases the interoperability between Kotlin and Java when dealing with primitive arrays.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nval javaObj = JavaArrayExample()\nval array = intArrayOf(0, 1, 2, 3)\njavaObj.removeIndices(array)  // passes int[] to method\n```\n\n----------------------------------------\n\nTITLE: Adding and Setting Elements with MutableListIterator in Kotlin\nDESCRIPTION: This code demonstrates how to add and set elements in a mutable list while iterating using the `MutableListIterator` interface. It adds \"two\" after \"one\" and replaces the second \"four\" with \"three\".  The state of the list is printed after each operation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/iterators.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"four\", \"four\") \n    val mutableListIterator = numbers.listIterator()\n    \n    mutableListIterator.next()\n    mutableListIterator.add(\"two\")\n    println(numbers)\n    // [one, two, four, four]\n    mutableListIterator.next()\n    mutableListIterator.set(\"three\")   \n    println(numbers)\n    // [one, two, three, four]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Number is Within a Range using in Operator in Kotlin\nDESCRIPTION: This snippet demonstrates the use of the `in` operator to check if a value (`x`) falls within a specified range (`1..y+1`). The check is performed within an `if` statement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val x = 10\n    val y = 9\n    if (x in 1..y+1) {\n        println(\"fits in range\")\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'entries' property for enum classes\nDESCRIPTION: This code snippet illustrates how to use the `entries` property, which is a modern replacement for the `values()` function, for accessing enum class values. It demonstrates a function that finds an enum constant by its RGB value using the `entries` property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Color(val colorName: String, val rgb: String) {\n    RED(\"Red\", \"#FF0000\"),\n    ORANGE(\"Orange\", \"#FF7F00\"),\n    YELLOW(\"Yellow\", \"#FFFF00\")\n}\n\nfun findByRgb(rgb: String): Color? = Color.entries.find { it.rgb == rgb }\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values with Selector Functions in Kotlin\nDESCRIPTION: Demonstrates the maxOf function which returns the maximum value obtained by applying a selector function to each element in a collection. Useful for finding maximum values based on specific properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class OrderItem(val name: String, val price: Double, val count: Int)\n\nfun main() {\n//sampleStart\n    val order = listOf<OrderItem>(\n        OrderItem(\"Cake\", price = 10.0, count = 1),\n        OrderItem(\"Coffee\", price = 2.5, count = 3),\n        OrderItem(\"Tea\", price = 1.5, count = 2))\n    val highestPrice = order.maxOf { it.price }\n//sampleEnd\n    println(\"The most expensive item in the order costs $highestPrice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variant Generic Box Class in Kotlin\nDESCRIPTION: Demonstrates the implementation of a generic Box class with declaration-site variance and example usage with Base/Derived types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Box<out T>(val value: T)\n\ninterface Base\nclass Derived : Base\n\nfun boxDerived(value: Derived): Box<Derived> = Box(value)\nfun unboxBase(box: Box<Base>): Base = box.value\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in a List with 'in' Operator in Kotlin\nDESCRIPTION: Demonstrates how to check if an element exists in a list using the 'in' operator, which returns a boolean value indicating presence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val readOnlyShapes = listOf(\"triangle\", \"square\", \"circle\")\n    println(\"circle\" in readOnlyShapes)\n    // true\n}\n```\n\n----------------------------------------\n\nTITLE: Converting an Iterable to a Sequence in Kotlin\nDESCRIPTION: Creates a sequence from an existing Iterable object (like a List or Set) using the asSequence() extension function, allowing for lazy processing of the iterable's elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval numbers = listOf(\"one\", \"two\", \"three\", \"four\")\nval numbersSequence = numbers.asSequence()\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Shared XCFramework in SwiftUI\nDESCRIPTION: This Swift code demonstrates how to import and use a Kotlin Multiplatform shared module in a SwiftUI view. It displays the platform name obtained from the Kotlin code within a Text view.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Shared\n\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Image(systemName: \"globe\")\n                .imageScale(.large)\n                .foregroundStyle(.tint)\n            Text(\"Hello, world! \\(Shared.Platform_iosKt.getPlatform().name)\")\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Functions in Kotlin\nDESCRIPTION: This snippet shows how to define and use extension functions in Kotlin. Extension functions allow adding new functionality to existing classes without modifying their source code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in Kotlin\nDESCRIPTION: Demonstrates filtering elements from a Map in Kotlin using the filter() function. It shows how Kotlin's syntax is more concise for this operation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mapOf(\"key1\" to 1, \"key2\" to 2, \"key3\" to 3, \"key11\" to 11)\n    val filteredNumbers = numbers.filter { (key, value) -> key.endsWith(\"1\") && value > 10 }\n    println(filteredNumbers)\n}\n```\n\n----------------------------------------\n\nTITLE: Using associateWith Function in Kotlin\nDESCRIPTION: Demonstrates the new associateWith function, which efficiently builds a map by associating keys with computed values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val keys = 'a'..'f'\n    val map = keys.associateWith { it.toString().repeat(5).capitalize() }\n    map.forEach { println(it) }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kapt Dependency with Gradle Groovy DSL - Groovy\nDESCRIPTION: Shows how to add a kapt dependency in the Gradle `dependencies` block using Groovy DSL. This ensures annotation processor dependencies are available via the kapt configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    kapt 'groupId:artifactId:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Imported JavaScript Function in Kotlin/JS - Kotlin\nDESCRIPTION: This snippet illustrates how to invoke the imported 'sorted' function (mapped from JavaScript) in Kotlin/JS and log output. 'console.log' is used to print messages and results to the standard output (browser console or Node.js). The first call demonstrates a sorted array, the second an unsorted one. Input arrays can be any type; the adapter handles generic types. Requires previous external declaration for 'sorted'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/using-packages-from-npm.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nconsole.log(\"Hello, Kotlin/JS!\")\nconsole.log(sorted(arrayOf(1,2,3)))\nconsole.log(sorted(arrayOf(3,1,2)))\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Example\nDESCRIPTION: Defines a simple JavaScript function named 'greet' that takes a name as input and logs a greeting message to the console. This example illustrates the basic structure of a JavaScript function that can be called from Kotlin/Wasm.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction greet (name) {\n    console.log(\"Hello, \" + name + \"!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collections with Concrete Type Constructors in Kotlin\nDESCRIPTION: Demonstrates how to create specific implementation types like LinkedList or HashSet using their constructors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval linkedList = LinkedList<String>(listOf(\"one\", \"two\", \"three\"))\nval presizedSet = HashSet<Int>(32)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Native Project with Gradle Kotlin DSL\nDESCRIPTION: A Gradle Kotlin DSL build script that configures a Kotlin Multiplatform project targeting native platforms. It sets up the Kotlin plugin, repository sources, and native target configuration for building executable binaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    macosArm64(\"native\") {  // on macOS\n    // linuxArm64(\"native\") // on Linux\n    // mingwX64(\"native\")   // on Windows\n        binaries {\n            executable()\n        }\n    }\n}\n\ntasks.withType<Wrapper> {\n    gradleVersion = \"%gradleVersion%\"\n    distributionType = Wrapper.DistributionType.BIN\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Producer-Only Generic Interface in Java\nDESCRIPTION: Defines a simple generic Java interface `Source<T>` containing only a method `nextT()` that returns type `T`. This serves as an example of a producer interface used to illustrate declaration-site variance concepts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Java\ninterface Source<T> {\n    T nextT();\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping Collections in Kotlin\nDESCRIPTION: Illustrates zipping of collections using zip(), including scenarios with different sized collections and applying transformation functions during zipping.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-transformations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val colors = listOf(\"red\", \"brown\", \"grey\")\n    val animals = listOf(\"fox\", \"bear\", \"wolf\")\n    println(colors zip animals)\n\n    val twoAnimals = listOf(\"fox\", \"bear\")\n    println(colors.zip(twoAnimals))\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val colors = listOf(\"red\", \"brown\", \"grey\")\n    val animals = listOf(\"fox\", \"bear\", \"wolf\")\n    \n    println(colors.zip(animals) { color, animal -> \"The ${animal.replaceFirstChar { it.uppercase() }} is $color\"})\n//sampleEnd\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numberPairs = listOf(\"one\" to 1, \"two\" to 2, \"three\" to 3, \"four\" to 4)\n    println(numberPairs.unzip())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ES2015 Target for Kotlin/JS Compilation in Kotlin DSL\nDESCRIPTION: Configures all tasks of type `KotlinJsCompile` to target ES2015 (ES6). This enables the use of modern JavaScript features like classes, modules, and generators for suspend functions, potentially improving bundle size and debugging. This snippet uses Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<KotlinJsCompile>().configureEach {\n    kotlinOptions {\n        target = \"es2015\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options at the compilation unit level (Kotlin DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for the `compileKotlinJvm` task using the Kotlin DSL.  This provides the most specific level of configuration, overriding any settings at the target or extension level. Requires Gradle Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\ntask.named<KotlinJvmCompile>(\"compileKotlinJvm\") {\n    compilerOptions {\n        allWarningsAsErrors.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Accessing Java Record from Kotlin - Kotlin\nDESCRIPTION: This Kotlin snippet illustrates how to instantiate a Java record declared in Java and access its components using property-style syntax. The Java Person record can be used directly in Kotlin like a normal class with read-only properties. Dependencies: The Java record class must be present and accessible in the Kotlin module. 'val newPerson' creates a new Person instance, and 'val firstName' retrieves the name component.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-records.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval newPerson = Person(\"Kotlin\", 10)\nval firstName = newPerson.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Set Dependencies in Kotlin DSL\nDESCRIPTION: This snippet demonstrates how to declare dependencies for Kotlin source sets within the `kotlin` block of a Gradle build script using the Kotlin DSL. It uses the `api` and `implementation` dependency configurations for `commonMain` and `jvmMain` source sets respectively. Dependencies must be configured within a `sourceSets` block to be associated with a particular source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(\"com.example:foo-metadata:1.0\")\n            }\n        }\n        val jvmMain by getting {\n            dependencies {\n                implementation(\"com.example:foo-jvm:1.0\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Target with Custom JAR Task in Groovy\nDESCRIPTION: This snippet demonstrates how to specify a JVM target in a Kotlin multiplatform project and configure a custom JAR task for it using Groovy DSL. It includes structure for adding JVM-specific dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\n// Shared module's `build.gradle` file\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n\nkotlin {\n    // Specify the JVM target\n    jvm {\n        // Add the task for JAR generation\n        tasks.named<Jar>(artifactsTaskName).configure {\n            // Configure the task\n        }\n    }\n\n    sourceSets {\n        jvmMain {\n            dependencies {\n                // Add JVM-specific dependencies\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Lambda with Parameter Names in Kotlin\nDESCRIPTION: This example shows how to declare parameter names in a multiline lambda. The parameter names should be on the first line, followed by the arrow and a newline. This example assumes the existence of an `appendCommaSeparated` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nappendCommaSeparated(properties) { prop ->\n    val propertyValue = prop.get(obj)  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Expected and Actual Properties Implementation\nDESCRIPTION: Shows how to implement expected and actual properties in common and platform-specific code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect val identity: Identity\n\ninterface Identity {\n    val userName: String\n    val processID: Long\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual val identity: Identity = JVMIdentity()\n\nclass JVMIdentity(\n    override val userName: String = System.getProperty(\"user.name\") ?: \"none\",\n    override val processID: Long = ProcessHandle.current().pid()\n) : Identity\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual val identity: Identity = NativeIdentity()\n\nclass NativeIdentity(\n    override val userName: String = getlogin()?.toKString() ?: \"None\",\n    override val processID: Long = getpid().toLong()\n) : Identity\n```\n\n----------------------------------------\n\nTITLE: Interoperability Between Kotlin and Java Atomic Types\nDESCRIPTION: Shows how to use the new .asJavaAtomic() and .asKotlinAtomic() extension functions to convert between Kotlin's atomic types and Java's java.util.concurrent.atomic types. This enables seamless interoperability in projects using both Kotlin and Java concurrency primitives.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports the necessary libraries\nimport kotlin.concurrent.atomics.*\nimport java.util.concurrent.atomic.*\n\n@OptIn(ExperimentalAtomicApi::class)\nfun main() {\n    // Converts Kotlin AtomicInt to Java's AtomicInteger\n    val kotlinAtomic = AtomicInt(42)\n    val javaAtomic: AtomicInteger = kotlinAtomic.asJavaAtomic()\n    println(\"Java atomic value: ${javaAtomic.get()}\")\n    // Java atomic value: 42\n\n    // Converts Java's AtomicInteger back to Kotlin's AtomicInt\n    val kotlinAgain: AtomicInt = javaAtomic.asKotlinAtomic()\n    println(\"Kotlin atomic value: ${kotlinAgain.load()}\")\n    // Kotlin atomic value: 42\n}\n```\n\n----------------------------------------\n\nTITLE: Using @JvmName for Property and Function Disambiguation\nDESCRIPTION: Illustrates how to use @JvmName to disambiguate between a property and a function with the same name in Kotlin when accessed from Java.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval x: Int\n    @JvmName(\"getX_prop\")\n    get() = 15\n\nfun getX() = 10\n```\n\n----------------------------------------\n\nTITLE: Compile-time Constants in Kotlin\nDESCRIPTION: Example of declaring a compile-time constant that can be used in annotations. The compiler will inline usages of this constant.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nconst val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Lambda Expressions in Kotlin\nDESCRIPTION: Shows that Kotlin can infer function types for lambdas based on assignment context, here assigning a lambda that adds 1 to its input to a val without explicit type annotation. Helpful for writing concise functional code. The inferred type is (Int) -> Int.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = { i: Int -> i + 1 } // The inferred type is (Int) -> Int\n```\n\n----------------------------------------\n\nTITLE: Applying Application Plugin in Gradle (Kotlin)\nDESCRIPTION: This code snippet shows how to apply the Application plugin in a subproject's `build.gradle.kts` file using the Kotlin DSL for Gradle. This is part of the workaround for compatibility issues between Kotlin Multiplatform and Gradle Java plugins.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"application\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Array Copy Function with Invariant Types in Kotlin\nDESCRIPTION: Defines a function `copy` intended to copy elements from one array (`from`) to another (`to`). It initially requires both arrays to be specifically `Array<Any>`, which limits its usability due to Kotlin's generic invariance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun copy(from: Array<Any>, to: Array<Any>) {\n    assert(from.size == to.size)\n    for (i in from.indices)\n        to[i] = from[i]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Number is Outside a Range using !in Operator in Kotlin\nDESCRIPTION: This snippet illustrates using the `!in` operator to check if a value is outside a specified range. It checks if `-1` is outside the valid index range of a list (`0..list.lastIndex`) and if the list's size is outside its `indices` range.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val list = listOf(\"a\", \"b\", \"c\")\n    \n    if (-1 !in 0..list.lastIndex) {\n        println(\"-1 is out of range\")\n    }\n    if (list.size !in list.indices) {\n        println(\"list size is out of valid list indices range, too\")\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing a Map in Java using forEach\nDESCRIPTION: This Java snippet shows how to iterate over the entries (key-value pairs) of a `Map` using its `forEach` method. The method accepts a `BiConsumer` lambda expression `(k, v) -> ...` which is executed for each entry, providing access to the key `k` and value `v`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Java\nnumbers.forEach((k,v) -> System.out.println(\"Key = \" + k + \", Value = \" + v));\n```\n\n----------------------------------------\n\nTITLE: Mutable Properties Backed by a Mutable Map Delegate - Kotlin\nDESCRIPTION: Extends the mapping pattern to mutable properties with var, using a MutableMap as the delegate. This allows for property updates to reflect directly in the backing map, enabling two-way dynamic synchronization. Uses Kotlin's standard MutableMap interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MutableUser(val map: MutableMap<String, Any?>) {\n    var name: String by map\n    var age: Int     by map\n}\n```\n\n----------------------------------------\n\nTITLE: Using secondary constructors in inline value classes\nDESCRIPTION: This code snippet shows how to define a secondary constructor with a body in an inline value class. It demonstrates the ability to add custom validation logic within the secondary constructor, which was previously restricted in earlier Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class Person(private val fullName: String) {\n    // Allowed since Kotlin 1.4.30:\n    init {\n        check(fullName.isNotBlank()) {\n            \"Full name shouldn't be empty\"\n        }\n    }\n    // Allowed by default since Kotlin 1.9.0:\n    constructor(name: String, lastName: String) : this(\"$name $lastName\") {\n        check(lastName.isNotBlank()) {\n            \"Last name shouldn't be empty\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Set from a List in Kotlin\nDESCRIPTION: Shows how to create a Set from a List in Kotlin using the toSet() function. This method is more concise than the Java equivalent.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val sourceList = listOf(1, 2, 3, 1)\n    val copySet = sourceList.toSet()\n    println(copySet)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Enum Entries Property with Kotlin 1.9 Language Version in Gradle (Groovy DSL)\nDESCRIPTION: This Gradle configuration using Groovy DSL enables the experimental 'entries' property for Enum classes by setting the language version to 1.9. It requires using the @OptIn annotation with ExperimentalStdlibApi.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)\n    .configureEach {\n        compilerOptions.languageVersion =\n            org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Multidimensional (Nested) Arrays in Kotlin\nDESCRIPTION: Shows how to create multidimensional arrays (nested arrays) in Kotlin using nested calls to the `Array` constructor. It demonstrates creating 2D and 3D arrays initialized with zeros and uses `contentDeepToString()` for proper string representation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Creates a two-dimensional array\n    val twoDArray = Array(2) { Array<Int>(2) { 0 } }\n    println(twoDArray.contentDeepToString())\n    // [[0, 0], [0, 0]]\n\n    // Creates a three-dimensional array\n    val threeDArray = Array(3) { Array(3) { Array<Int>(3) { 0 } } }\n    println(threeDArray.contentDeepToString())\n    // [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring libbacktrace in Gradle Properties\nDESCRIPTION: Configuration to enable libbacktrace for better stack traces in Kotlin Native\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n# gradle.properties\nkotlin.native.binary.sourceInfoType=libbacktrace\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Compilations Kotlin DSL\nDESCRIPTION: Shows how to create a custom compilation named `integrationTest` within the `jvm` target, configure its default source set, and register a test task using Kotlin Gradle DSL. The custom compilation is created using `by compilations.creating`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm() {\n        compilations {\n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        /* ... */\n                    }\n                }\n\n                // Create a test task to run the tests produced by this compilation:\n                tasks.register<Test>(\"integrationTest\") {\n                    /* ... */\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CocoaPods Dependency in Groovy Build Script\nDESCRIPTION: Configuration for adding a CocoaPods dependency in a Kotlin Multiplatform project using Groovy DSL. This example adds the SDWebImage library with a specific version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    cocoapods {\n        version = '2.0'\n        //...\n        pod('SDWebImage') {\n            version = '5.20.0'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Kotlin Lists\nDESCRIPTION: This snippet demonstrates adding elements to a Kotlin list using 'add()' and 'addAll()' with specified positions. Inputs are the element(s) and index, and the list is modified by inserting elements and shifting subsequent elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"six\")\n    numbers.add(1, \"two\")\n    numbers.addAll(2, listOf(\"three\", \"four\"))\n    println(numbers)\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Builder Inference with buildMap in Kotlin\nDESCRIPTION: Example showing how builder inference can infer generic type arguments for buildMap based on operations inside the lambda, without explicit type specification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addEntryToMap(baseMap: Map<String, Number>, additionalEntry: Pair<String, Int>?) {\n   val myMap = buildMap {\n       putAll(baseMap)\n       if (additionalEntry != null) {\n           put(additionalEntry.first, additionalEntry.second)\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Definitely Non-Nullable Generics - Kotlin\nDESCRIPTION: Defines a Kotlin interface extending the Java Game interface with generic type T1. It demonstrates how to override Java methods with definitely non-nullable types in Kotlin (T1 & Any) for safe interoperability, enforcing non-null constraints at compile time.\nDependencies: Extends 'Game' Java interface. Input/Output: T1, enforced as non-nullable. Requires Kotlin 1.6+ for definitely non-nullable types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface ArcadeGame<T1> : Game<T1> {\\n  override fun save(x: T1): T1\\n  // T1 is definitely non-nullable\\n  override fun load(x: T1 & Any): T1 & Any\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TestNG for Kotlin JVM Projects\nDESCRIPTION: This snippet demonstrates how to set up a Kotlin JVM project to use TestNG as the testing framework. It adds the kotlin-test dependency and configures the test task to use TestNG.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    testImplementation(kotlin(\"test\"))\n}\n\ntasks {\n    test {\n        useTestNG()\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    testImplementation 'org.jetbrains.kotlin:kotlin-test'\n}\n\ntest {\n    useTestNG()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions for Concise Input Reading in Kotlin\nDESCRIPTION: Demonstrates how to use the previously defined helper functions (`readInt`, `readStr`, `readInts`) to read typical competitive programming input (an integer `n`, a string `s`, and a list of integers `fl`) more concisely. This approach aligns closely with the input specification format.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// read input\nval n = readInt()\nval s = readStr()\nval fl = readInts()\n```\n\n----------------------------------------\n\nTITLE: Generics type check in Kotlin\nDESCRIPTION: Kotlin generics are not retained at runtime. This code demonstrates is-checks for star-projected generic types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nif (a is List<Int>) // Error: cannot check if it is really a List of Ints\n// but\nif (a is List<*>) // OK: no guarantees about the contents of the list\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Compiler Execution Strategy (Kotlin DSL)\nDESCRIPTION: This snippet demonstrates how to configure the Kotlin compiler execution strategy using the Kotlin DSL in a `build.gradle.kts` file.  It utilizes the `CompileUsingKotlinDaemon` task and sets the `compilerExecutionStrategy` property to `KotlinCompilerExecutionStrategy.IN_PROCESS`, which causes the Kotlin compiler to run inside the Gradle daemon process. The strategy affects performance and incremental compilation support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy\n\n// ...\n\ntasks.withType<CompileUsingKotlinDaemon>().configureEach {\n    compilerExecutionStrategy.set(KotlinCompilerExecutionStrategy.IN_PROCESS)\n} \n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface in Kotlin\nDESCRIPTION: This snippet shows how a class in Kotlin can implement the MyInterface interface. The class Child provides the body for the bar method, demonstrating how to override interface methods in classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/interfaces.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Child : MyInterface {\n    override fun bar() {\n        // body\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lambda Result with run() in Kotlin\nDESCRIPTION: This snippet shows how to use the run() scope function to perform operations on a list and return a result. It adds elements to a list and counts those ending with 'e'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\")\n    val countEndsWithE = numbers.run { \n        add(\"four\")\n        add(\"five\")\n        count { it.endsWith(\"e\") }\n    }\n    println(\"There are $countEndsWithE elements that end with e.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Spring Boot Endpoint via URL\nDESCRIPTION: Provides an example URL (`http://localhost:8080?name=John`) to access the REST endpoint defined in the `MessageController`. Accessing this URL on a running Spring Boot application (typically on port 8080) triggers the `index` function, passing \"John\" as the `name` request parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-create-project-with-spring-boot.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8080?name=John\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Random Element - random - Kotlin Collections - Kotlin\nDESCRIPTION: Demonstrates retrieval of a random element from a list using random(). Optionally accepts a Random object for custom seeding. Throws if the list is empty. Requires Kotlin standard library 1.3+. Input is a populated list; output is a randomly selected element.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(1, 2, 3, 4)\\n    println(numbers.random())\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Symmetric Difference in Kotlin Sets\nDESCRIPTION: Demonstrates how to find elements present in either one of two collections but not in their intersection (symmetric difference). This is achieved by calculating and merging the differences between collections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/set-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = setOf(\"one\", \"two\", \"three\")\n    val numbers2 = setOf(\"three\", \"four\")\n\n    // merge differences \n    println((numbers - numbers2) union (numbers2 - numbers))\n    // [one, two, four]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting JVM with Kotlin Plugin\nDESCRIPTION: This snippet depicts how to target the JVM by applying the Kotlin JVM plugin using both Kotlin and Groovy DSLs. The version must be explicitly defined within the build script and cannot reference another script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Visibility Modifiers with Top-Level Declarations in Kotlin\nDESCRIPTION: Illustrates how to apply different visibility modifiers to top-level declarations in a package. The example shows a private function, a public property with a private setter, and an internal property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/visibility-modifiers.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// file name: example.kt\npackage foo\n\nprivate fun foo() { ... } // visible inside example.kt\n\npublic var bar: Int = 5 // property is visible everywhere\n    private set         // setter is visible only in example.kt\n    \ninternal val baz = 6    // visible inside the same module\n```\n\n----------------------------------------\n\nTITLE: Command-line Kotlin Compilation (Windows)\nDESCRIPTION: Illustrates a Kotlin compilation command on Windows using `kotlinc.bat`.  It highlights the need to use double quotes around arguments containing delimiters (whitespace, =, ;, ,) to properly pass file paths with spaces. It compiles `hello.kt`, includes the runtime library, and outputs the result to a jar file in a directory with a space.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ kotlinc.bat hello.kt -include-runtime -d \"My Folder\\hello.jar\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Annotation Use-Site Targets in Kotlin\nDESCRIPTION: Illustrates how to precisely control where an annotation is applied in the generated Java bytecode when annotating Kotlin properties or constructor parameters. It shows `@field:Ann` to target the Java field, `@get:Ann` for the getter, and `@param:Ann` for the constructor parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Example(@field:Ann val foo,    // annotate Java field\n              @get:Ann val bar,      // annotate Java getter\n              @param:Ann val quux)   // annotate Java constructor parameter\n```\n\n----------------------------------------\n\nTITLE: Using Base64 Encoding and Decoding in Kotlin\nDESCRIPTION: Example demonstrating the new experimental Base64 encoding and decoding functionality in Kotlin 1.8.20. Shows how to use different encoding schemes including Default, UrlSafe, and Mime variants.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval foBytes = \"fo\".map { it.code.toByte() }.toByteArray()\nBase64.Default.encode(foBytes) // \"Zm8=\"\n// Alternatively:\n// Base64.encode(foBytes)\n\nval foobarBytes = \"foobar\".map { it.code.toByte() }.toByteArray()\nBase64.UrlSafe.encode(foobarBytes) // \"Zm9vYmFy\"\n\nBase64.Default.decode(\"Zm8=\") // foBytes\n// Alternatively:\n// Base64.decode(\"Zm8=\")\n\nBase64.UrlSafe.decode(\"Zm9vYmFy\") // foobarBytes\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read-Write Property Delegate in Kotlin\nDESCRIPTION: This snippet shows how to define a mutable property delegate by implementing both getValue() and setValue() operator functions in Kotlin. The delegate manages an internal value and supports property assignment and retrieval for a var property. It requires the property owner, property reflection object, and value to be assigned. This approach is commonly used to add custom logic to property mutation and access. The delegate stores and updates an internal Resource instance as the property changes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Resource\n\nclass Owner {\n    var varResource: Resource by ResourceDelegate()\n}\n\nclass ResourceDelegate(private var resource: Resource = Resource()) {\n    operator fun getValue(thisRef: Owner, property: KProperty<*>): Resource {\n        return resource\n    }\n    operator fun setValue(thisRef: Owner, property: KProperty<*>, value: Any?) {\n        if (value is Resource) {\n            resource = value\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Top-Level Kotlin Extension\nDESCRIPTION: Demonstrates how to use a top-level extension function defined in another package by importing it using the `import` directive at the call site.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.example.usage\n\nimport org.example.declarations.getLongestString\n\nfun main() {\n    val list = listOf(\"red\", \"green\", \"blue\")\n    list.getLongestString()\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using Annotation Instances in Kotlin\nDESCRIPTION: Shows that Kotlin allows calling an annotation's constructor (`InfoMarker(\"default\")`) directly in code to create an instance. This instance can then be passed around and used like a regular object, as demonstrated by passing it to the `processInfo` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class InfoMarker(val info: String)\n\nfun processInfo(marker: InfoMarker): Unit = TODO()\n\nfun main(args: Array<String>) {\n    if (args.isNotEmpty())\n        processInfo(getAnnotationReflective(args)) // Assuming getAnnotationReflective returns an InfoMarker instance\n    else\n        processInfo(InfoMarker(\"default\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'out' Type Projection for Covariance in Kotlin Array Copy Function\nDESCRIPTION: Modifies the `copy` function signature to use use-site variance (type projection). Declaring the `from` parameter as `Array<out Any>` makes it covariant for this specific usage. This allows passing an `Array<Int>` (or any `Array<T>` where T is a subtype of Any) while restricting operations on `from` to only those that produce values (like `get`), preventing unsafe writes. The function body is omitted (`...`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun copy(from: Array<out Any>, to: Array<Any>) { ... }\n```\n\n----------------------------------------\n\nTITLE: Group and Sort Data by Channel\nDESCRIPTION: Groups the `joined` DataFrame by the `channel` column and sorts the resulting groups by count (number of videos per channel).  The sorted and grouped DataFrame is stored in the `channels` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval channels = joined.groupBy { channel }.sortByCount()\n```\n\n----------------------------------------\n\nTITLE: Compile a Kotlin application\nDESCRIPTION: This command compiles the `hello.kt` file into a self-contained `hello.jar` file, including the Kotlin runtime library. The `-d` flag specifies the output file and `-include-runtime` includes the runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc hello.kt -include-runtime -d hello.jar\n```\n\n----------------------------------------\n\nTITLE: Using Windowed with Step, Partial Windows, and Transformation in Kotlin\nDESCRIPTION: Demonstrates advanced usage of the `windowed()` extension function on a `List<Int>`. It shows how to specify the `step` between the starting elements of adjacent windows (step=2), how to include `partialWindows` (windows smaller than the specified size at the end of the list), and how to apply a transformation lambda (`{ it.sum() }`) directly to each resulting window.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = (1..10).toList()\n    println(numbers.windowed(3, step = 2, partialWindows = true))\n    println(numbers.windowed(3) { it.sum() })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Java Library Plugin in Kotlin Gradle Build Script\nDESCRIPTION: Example showing how to apply the Java Library plugin in a separate subproject using Kotlin DSL syntax in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"java-library\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Destination Collections in Kotlin\nDESCRIPTION: Shows how to use destination collections with filterTo() and filterIndexedTo() operations. Results are accumulated in a mutable destination collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val filterResults = mutableListOf<String>()  //destination object\n    numbers.filterTo(filterResults) { it.length > 3 }\n    numbers.filterIndexedTo(filterResults) { index, _ -> index == 0 }\n    println(filterResults) // contains results of both operations\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Plugin in Kotlin/JS Project\nDESCRIPTION: This code snippet demonstrates how to configure the Kotlin serialization plugin and add the required dependency in the build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // . . .\n    kotlin(\"plugin.serialization\") version \"%kotlinVersion%\"\n}\n\ndependencies {\n    // . . .\n\n    // Serialization\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific kotlinx Library Dependency in Groovy\nDESCRIPTION: This snippet shows how to add a kotlinx library dependency to a specific platform source set in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        jvmMain {\n            dependencies {\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production JavaScript Artifacts with Webpack (Bash)\nDESCRIPTION: This command executes the `browserProductionWebpack` Gradle task. This task bundles the Kotlin/JS project for production, applying optimizations like dead code elimination and minification to create smaller JavaScript artifacts. The output is typically generated in the `build/dist` directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew browserProductionWebpack\n```\n\n----------------------------------------\n\nTITLE: Immutable Collection in Java\nDESCRIPTION: Shows how to create an immutable list in Java using Collections.unmodifiableList. Attempts to modify the list will fail at runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Java\\nList<String> numbers = new LinkedList<>();\\n// This list is immutable!\\nList<String> immutableCollection = Collections.unmodifiableList(numbers);\\nimmutableCollection.add(\"five\"); // Fails in runtime with `UnsupportedOperationException`\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases for Function Types in Kotlin\nDESCRIPTION: Shows how to define a descriptive type alias for a function type that takes two parameters and returns Unit. Useful for increasing code readability and documentation, especially when passing function types as parameters. Requires nothing other than understanding typealiases and function types in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias ClickHandler = (Button, ClickEvent) -> Unit\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options Across All Targets in Groovy\nDESCRIPTION: This snippet demonstrates how to configure compiler options that apply to all targets in a Kotlin multiplatform project using the Groovy DSL. It shows setting allWarningsAsErrors to true for all compilations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    compilerOptions {\n        allWarningsAsErrors = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JS Main Function Execution Mode with Kotlin Gradle DSL - Kotlin\nDESCRIPTION: This snippet sets the execution mode for a main function in JavaScript targets using the JsMainFunctionExecutionMode enum property in compilerOptions. Dependencies include the appropriate Kotlin Gradle DSL APIs and valid JsMainFunctionExecutionMode values (e.g., NO_CALL). It affects how the main entrypoint is called in generated JS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\ncompilerOptions.main.set(JsMainFunctionExecutionMode.NO_CALL)\n```\n\n----------------------------------------\n\nTITLE: Prohibiting Further Overriding with final override in Kotlin\nDESCRIPTION: Illustrates use of the final override modifier to prevent further subclass overrides of a method that has already been overridden. The Rectangle class extends Shape and overrides draw, ensuring it cannot be re-overridden in further subclasses. This is crucial for locking down implementation details in class hierarchies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Rectangle() : Shape() {\n    final override fun draw() { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Member Functions in Kotlin\nDESCRIPTION: This snippet shows how to call member functions using dot notation. An instance of the class is created, and the function is called on this instance with no parameters or additional dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nSample().foo() // creates instance of class Sample and calls foo\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Values with Explicit Null Checks in Kotlin\nDESCRIPTION: This snippet defines a `printProduct` function that calls `parseInt` (which returns `Int?`) for two string arguments. It demonstrates handling potential nulls by explicitly checking if both results (`x` and `y`) are not null (`!= null`) before attempting multiplication. Inside the `if` block, `x` and `y` are smart-cast to non-nullable `Int`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\n//sampleStart\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n\n    // Using `x * y` yields error because they may hold nulls.\n    if (x != null && y != null) {\n        // x and y are automatically cast to non-nullable after null check\n        println(x * y)\n    }\n    else {\n        println(\"'$arg1' or '$arg2' is not a number\")\n    }    \n}\n//sampleEnd\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"a\", \"b\")\n}\n```\n\n----------------------------------------\n\nTITLE: Property Naming with Mutable Data\nDESCRIPTION: Demonstrates camel case naming convention for top-level or object properties that hold objects with behavior or mutable data.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval mutableCollection: MutableSet<String> = HashSet()\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Opt-in (Kotlin DSL)\nDESCRIPTION: Shows how to configure opt-in requirements at the module level using Gradle with Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named<KotlinCompilationTask<*>>(\"compileKotlin\").configure {\n    compilerOptions.optIn.add(\"org.mylibrary.OptInAnnotation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fat Framework Configuration (Groovy DSL)\nDESCRIPTION: Configuration for creating a universal (fat) framework that supports multiple platforms in Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinArtifacts {\n    it.native.FatFramework(\"myfatframe\") {\n        targets(iosX32, iosX64)\n        kotlinOptions {\n            suppressWarnings = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KSP Gradle Plugin (Groovy)\nDESCRIPTION: This snippet demonstrates how to add the KSP Gradle plugin in a Groovy-based `build.gradle` file. It specifies the plugin ID and version, which are crucial for KSP to function correctly.  The version placeholder should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Code Using Kotlin Framework\nDESCRIPTION: Illustrates how to call Kotlin classes and functions directly from Swift code. Demonstrates accessing the single instance of Kotlin objects using `Object.shared`, calling Kotlin functions with Swift closures, and passing Swift's `String` to Kotlin. This example also shows how Swift handles nullable types when interacting with Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nimport Foundation\nimport Demo\n\nlet kotlinObject = Object.shared\n\nlet field = Object.shared.field\n\nlet clazz = Clazz()\nclazz.member(p: 42)\n\nLibKt.forIntegers(b: 1, s: 2, i: 3, l: 4)\nLibKt.forFloats(f: 2.71, d: nil)\n\nlet ret = LibKt.acceptFun { \"\\($0) Kotlin is fun\" }\nif (ret != nil) {\n    print(ret!)\n}\n```\n\n----------------------------------------\n\nTITLE: Using with() for Computed Values in Kotlin\nDESCRIPTION: This example shows how to use with() to compute a value using multiple properties or functions of an object, improving readability by reducing repetition of the object name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\")\n    val firstAndLast = with(numbers) {\n        \"The first element is ${first()},\" +\n        \" the last element is ${last()}\"\n    }\n    println(firstAndLast)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Kotlin Array Contents with `contentEquals()`\nDESCRIPTION: Shows how to compare the contents of two Kotlin arrays for structural equality using the `contentEquals()` function. It demonstrates both standard and infix notation and highlights that the comparison returns `false` after modifying an element in one array. Direct equality (`==`) should not be used for content comparison.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val simpleArray = arrayOf(1, 2, 3)\n    val anotherArray = arrayOf(1, 2, 3)\n\n    // Compares contents of arrays\n    println(simpleArray.contentEquals(anotherArray))\n    // true\n\n    // Using infix notation, compares contents of arrays after an element \n    // is changed\n    simpleArray[0] = 10\n    println(simpleArray contentEquals anotherArray)\n    // false\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Using Aliases - find and findLast - Kotlin Collections - Kotlin\nDESCRIPTION: Demonstrates using find() and findLast() as aliases for firstOrNull() and lastOrNull() with predicates. Useful for searching for the first or last occurrence of a matching element in a list. No dependencies besides Kotlin standard library 1.3+. Inputs are numeric lists and a predicate for evenness; outputs are the first or last even number or null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(1, 2, 3, 4)\\n    println(numbers.find { it % 2 == 0 })\\n    println(numbers.findLast { it % 2 == 0 })\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gradle Build File (Kotlin DSL)\nDESCRIPTION: Configures the Gradle build file using Kotlin DSL to generate a framework for iOS ARM64 architecture. It sets up the Kotlin multiplatform plugin, defines the repository, and configures the binary output as a framework with the specified base name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    iosArm64(\"native\") {\n        binaries {\n            framework {\n                baseName = \"Demo\"\n            }\n        }\n    }\n}\n\ntasks.wrapper {\n    gradleVersion = \"%gradleVersion%\"\n    distributionType = Wrapper.DistributionType.ALL\n}\n```\n\n----------------------------------------\n\nTITLE: Do-While Loop in Kotlin\nDESCRIPTION: This snippet demonstrates the use of a `do-while` loop in Kotlin. The code block inside the `do` block is executed at least once, and then the conditional expression `cakesBaked < cakesEaten` is checked. The loop continues as long as the condition is true.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    var cakesEaten = 0\n    var cakesBaked = 0\n    while (cakesEaten < 3) {\n        println(\"Eat a cake\")\n        cakesEaten++\n    }\n    do {\n        println(\"Bake a cake\")\n        cakesBaked++\n    } while (cakesBaked < cakesEaten)\n    // Eat a cake\n    // Eat a cake\n    // Eat a cake\n    // Bake a cake\n    // Bake a cake\n    // Bake a cake\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating with For Loop in Kotlin\nDESCRIPTION: This code demonstrates how to iterate through a list using a `for` loop in Kotlin. The `for` loop implicitly obtains an iterator and iterates through each element in the list, printing each element to the console. This approach is equivalent to using the `iterator()` function explicitly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/iterators.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    for (item in numbers) {\n        println(item)\n        // one\n        // two\n        // three\n        // four\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Kotlin Companion Object Property as Static Field with @JvmField\nDESCRIPTION: Demonstrates using the `@JvmField` annotation on a property (`COMPARATOR`) defined within a `companion object` of a Kotlin class (`Key`). This makes the property accessible as a public static field (`Key.COMPARATOR`) directly on the containing class in Java.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Key(val value: Int) {\n    companion object {\n        @JvmField\n        val COMPARATOR: Comparator<Key> = compareBy<Key> { it.value }\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// Java\nKey.COMPARATOR.compare(key1, key2);\n// public static final field in Key class\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Gradle Publication Variants in Kotlin Projects\nDESCRIPTION: Demonstrates how to add custom Gradle publication variants in Kotlin JVM or Multiplatform projects using the new adhocSoftwareComponent() function. This experimental feature allows for more flexible configuration of publication variants.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // Only JVM and Multiplatform are supported\n    kotlin(\"jvm\")\n    // or\n    kotlin(\"multiplatform\")\n}\n\n\nkotlin {\n    @OptIn(ExperimentalKotlinGradlePluginApi::class)\n    publishing {\n        // Returns an instance of AdhocSoftwareComponent\n        adhocSoftwareComponent()\n        // Alternatively, you can configure AdhocSoftwareComponent in the DSL block as follows\n        adhocSoftwareComponent {\n            // Add your custom variants here using the AdhocSoftwareComponent API\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating a Primary Constructor in Kotlin\nDESCRIPTION: Shows how to apply an annotation (`@Inject`) specifically to the primary constructor of a Kotlin class. This requires explicitly using the `constructor` keyword before the parameter list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Foo @Inject constructor(dependency: MyDependency) { ... }\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression Exercise 1 in Kotlin\nDESCRIPTION: This exercise demonstrates using a lambda expression to create a list of URLs from a list of actions, a common prefix, and a resource ID. It involves mapping each action to its corresponding URL using string interpolation and the `map` function. The web service supports actions like 'title', 'year', and 'author'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val actions = listOf(\"title\", \"year\", \"author\")\n    val prefix = \"https://example.com/book-info\"\n    val id = 5\n    val urls = // Write your code here\n    println(urls)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying all-open Annotations in Gradle with Kotlin DSL\nDESCRIPTION: Demonstrates how to specify which annotations should make classes open using the allOpen configuration block in a Kotlin DSL Gradle script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nallOpen {\n    annotation(\"com.my.Annotation\")\n    // annotations(\"com.another.Annotation\", \"com.third.Annotation\")\n}\n```\n\n----------------------------------------\n\nTITLE: External Variable Declaration (Kotlin)\nDESCRIPTION: Declares an external Kotlin variable 'globalCounter' that corresponds to the JavaScript global variable with the same name.  The 'external' keyword signifies that the variable's value is managed externally (by JavaScript). The type is defined as Int.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal var globalCounter: Int\n```\n\n----------------------------------------\n\nTITLE: Using Bound Callable References in Kotlin 1.1\nDESCRIPTION: Shows how to use the :: operator to get a member reference pointing to a method of a specific object instance. The example uses a regex's matches method as a filter predicate on a list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nval numberRegex = \"\\\\d+\".toRegex()\nval numbers = listOf(\"abc\", \"123\", \"456\").filter(numberRegex::matches)\n//sampleEnd\n\nfun main(args: Array<String>) {\n    println(\"Result is $numbers\")\n}\n```\n\n----------------------------------------\n\nTITLE: Create MessageService class Kotlin\nDESCRIPTION: This code defines the MessageService class responsible for interacting with the database. It uses JdbcTemplate to query and save messages.  It requires the Spring Framework and JdbcTemplate dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-db-support.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageService.kt\npackage demo\n\nimport org.springframework.stereotype.Service\nimport org.springframework.jdbc.core.JdbcTemplate\nimport java.util.*\n\n@Service\nclass MessageService(private val db: JdbcTemplate) {\n    fun findMessages(): List<Message> = db.query(\"select * from messages\") { response, _ ->\n        Message(response.getString(\"id\"), response.getString(\"text\"))\n    }\n\n    fun save(message: Message): Message {\n        db.update(\n            \"insert into messages values ( ?, ? )\",\n            message.id, message.text\n        )\n        return message\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a value with labeled return in Kotlin\nDESCRIPTION: Shows syntax for returning a value with a qualified return expression. This example demonstrates that return@a 1 means \"return 1 at label @a\" rather than \"return a labeled expression (@a 1)\".\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nreturn@a 1\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Message Length Kotlin\nDESCRIPTION: This Kotlin code calculates the average length of the text of all `Message` objects in a list. It first uses the `map()` function to transform the list of `Message` objects into a list of integers representing the text lengths. Then, it uses the `average()` function to calculate the average of these lengths. The result is returned as a `Double`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/averageMessageLength\")\nfun averageMessageLength(): Double {\n    val messages = service.findMessages()\n    return messages.map { it.text.length }.average()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Script for Kotlin and Spring Boot\nDESCRIPTION: This Kotlin Gradle build script sets up a Spring Boot application with necessary Kotlin and Spring dependencies. It specifies Kotlin versions, includes Spring Boot and dependency management plugins, and lists dependencies essential for web and database functionalities. Prerequisites include Gradle and Kotlin support in the development environment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-create-project-with-spring-boot.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nplugins {\n    kotlin(\"jvm\") version \"1.9.24\" // The version of Kotlin to use\n    kotlin(\"plugin.spring\") version \"1.9.24\" // The Kotlin Spring plugin\n    id(\"org.springframework.boot\") version \"3.3.4\"\n    id(\"io.spring.dependency-management\") version \"1.1.6\"\n}\n\ngroup = \"com.example\"\nversion = \"0.0.1-SNAPSHOT\"\n\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(17)\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"org.springframework.boot:spring-boot-starter-data-jdbc\")\n    implementation(\"org.springframework.boot:spring-boot-starter-web\")\n    implementation(\"com.fasterxml.jackson.module:jackson-module-kotlin\") // Jackson extensions for Kotlin for working with JSON\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\") // Kotlin reflection library, required for working with Spring\n    runtimeOnly(\"com.h2database:h2\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n    testImplementation(\"org.jetbrains.kotlin:kotlin-test-junit5\")\n    testRuntimeOnly(\"org.junit.platform:junit-platform-launcher\")\n}\n\nkotlin {\n    compilerOptions {\n        freeCompilerArgs.addAll(\"-Xjsr305=strict\") // `-Xjsr305=strict` enables the strict mode for JSR-305 annotations\n    }\n}\n\ntasks.withType<Test> {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XCFrameworks in Kotlin DSL\nDESCRIPTION: Shows how to set up an XCFramework configuration in Kotlin DSL to gather logic for multiple iOS target platforms and architectures into a single bundle that can be distributed via CocoaPods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework\n\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n\nkotlin {\n    val xcf = XCFramework()\n    val iosTargets = listOf(iosX64(), iosArm64(), iosSimulatorArm64())\n    \n    iosTargets.forEach {\n        it.binaries.framework {\n            baseName = \"shared\"\n            xcf.add(this)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Interface Members When Using Delegation in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to override a member of an interface implemented by delegation. `Derived` class overrides the `printMessage` function, which alters the output from the delegate `BaseImpl` to the hardcoded \"abc\" string when `printMessage` is called. Key dependencies are the interface `Base` and the `BaseImpl` class. The main input is an instance of `BaseImpl`, with the output as printed text.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegation.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Base {\n    fun printMessage()\n    fun printMessageLine()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override fun printMessage() { print(x) }\n    override fun printMessageLine() { println(x) }\n}\n\nclass Derived(b: Base) : Base by b {\n    override fun printMessage() { print(\"abc\") }\n}\n\nfun main() {\n    val base = BaseImpl(10)\n    Derived(base).printMessage()\n    Derived(base).printMessageLine()\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Kotlin Plugin Configuration\nDESCRIPTION: This snippet shows how to configure the `kotlin(\"jvm\")` plugin and application plugin in a Gradle `build.gradle.kts` file. It specifies the Kotlin version and applies the application plugin for creating a console application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-get-started.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\"\n    application\n}\n```\n\n----------------------------------------\n\nTITLE: Using ifBlank Function in Kotlin\nDESCRIPTION: Demonstrates the usage of the ifBlank function for strings, which provides a fallback value for blank strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val s = \"    \\n\"\n    println(s.ifBlank { \"<blank>\" })\n    println(s.ifBlank { null })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kotlin Test Dependencies in Groovy Build Script\nDESCRIPTION: Configuration in Groovy DSL to add the kotlin-test dependency to the commonTest source set. This automatically brings in platform-specific test dependencies for all targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_42\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\"test\") // This brings all the platform dependencies automatically\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated build configuration with kotlin-multiplatform plugin\nDESCRIPTION: Demonstrates how to migrate the build.gradle.kts file to use the kotlin-multiplatform plugin, including two options for dependency declaration: using sourceSets or using the add method with jsMain/jsTest prefixes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts:\nplugins {\n    kotlin(\"multiplatform\") version \"1.9.0\"\n}\n\nkotlin {\n    js {\n        // ...\n    }\n    \n    // Option #1. Declare dependencies in the sourceSets {} block:\n    sourceSets {\n        val jsMain by getting {\n            dependencies {\n                // No need for the js prefix here, you can just copy and paste it from the top-level block\n                implementation(\"org.jetbrains.kotlinx:kotlinx-html:0.8.0\")\n            }\n       }\n    }\n}\n\ndependencies {\n    // Option #2. Add the js prefix to the dependency declaration:\n    add(\"jsTestImplementation\", kotlin(\"test\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Simple Aggregate Operations in Kotlin Collections - Kotlin\nDESCRIPTION: This snippet showcases core aggregate operations on a list of integers in Kotlin: count, maxOrNull, minOrNull, average, and sum. It prints the size, maximum, minimum, average, and sum of a predefined list. No special dependencies are required beyond the Kotlin Standard Library; the example trivially demonstrates the calling syntax and return types. Input is hardcoded, but these functions accept any iterable collection of numbers and return appropriate type (or null for empty collections).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(6, 42, 10, 4)\n\n    println(\"Count: ${numbers.count()}\")\n    println(\"Max: ${numbers.maxOrNull()}\")\n    println(\"Min: ${numbers.minOrNull()}\")\n    println(\"Average: ${numbers.average()}\")\n    println(\"Sum: ${numbers.sum()}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Kotlin Array of Pairs to Map\nDESCRIPTION: Explains how to convert an array of `Pair<K,V>` objects into a `Map` using the `.toMap()` extension function in Kotlin. The first element of each Pair becomes the key, and the second becomes the value. If duplicate keys exist (like 'apple' in the example), the last encountered value associated with that key overwrites previous ones. Requires the Kotlin standard library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val pairArray = arrayOf(\"apple\" to 120, \"banana\" to 150, \"cherry\" to 90, \"apple\" to 140)\n\n    // Converts to a Map\n    // The keys are fruits and the values are their number of calories\n    // Note how keys must be unique, so the latest value of \"apple\"\n    // overwrites the first\n    println(pairArray.toMap())\n    // {apple=140, banana=150, cherry=90}\n\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a dynamic button to VideoPlayer component in Kotlin\nDESCRIPTION: Implements a button in the VideoPlayer component that changes appearance and behavior based on the video's watched status.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nbutton {\n    css {\n        display = Display.block\n        backgroundColor = if (props.unwatchedVideo) NamedColor.lightgreen else NamedColor.red\n    }\n    onClick = {\n        props.onWatchedButtonPressed(props.video)\n    }\n    if (props.unwatchedVideo) {\n        +\"Mark as watched\"\n    } else {\n        +\"Mark as unwatched\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Type Qualifier Nickname Example\nDESCRIPTION: This Java code defines custom annotations `@MyNonnull` and `@MyNullable` as type qualifier nicknames for `@Nonnull` and `@CheckForNull` respectively.  These annotations can then be used to specify the nullability of types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@TypeQualifierNickname\n@Nonnull(when = When.ALWAYS)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyNonnull {\n}\n\n@TypeQualifierNickname\n@CheckForNull // a nickname to another type qualifier nickname\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyNullable {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Common Dependencies on Kotlinx Libraries in Multiplatform Projects\nDESCRIPTION: This example shows how to add a kotlinx library dependency to the common source set in a Kotlin multiplatform project. This approach allows the library to be available to all platform-specific source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Compiler Execution Strategy (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to configure the Kotlin compiler execution strategy using the Groovy DSL in a `build.gradle` file. It utilizes the `CompileUsingKotlinDaemon` task and sets the `compilerExecutionStrategy` property to `KotlinCompilerExecutionStrategy.IN_PROCESS`, which causes the Kotlin compiler to run inside the Gradle daemon process. This strategy affects performance and incremental compilation support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy\n\n// ...\n\ntasks.withType(CompileUsingKotlinDaemon)\n    .configureEach {\n        compilerExecutionStrategy = KotlinCompilerExecutionStrategy.IN_PROCESS\n    }\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Type Constraints in Builder Inference\nDESCRIPTION: Example showing how builder inference merges multiple type constraints to determine the most specific type that satisfies all constraints.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = buildList { // Inferring postponed type variable E\n    // Considering E is Number or a subtype of Number\n    val n: Number? = getOrNull(0)\n    // Considering E is Int or a supertype of Int\n    add(1)\n    // E gets inferred into Int\n} // result has the List<Int> type\n```\n\n----------------------------------------\n\nTITLE: External Object Declaration (Kotlin)\nDESCRIPTION: Declares an external Kotlin object 'Counter' that represents the JavaScript object literal with the same name. It defines the method 'increment' and the properties 'value' and 'step'. JsAny is the supertype.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal object Counter : JsAny {\n    fun increment()\n    val value: Int\n    var step: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Video Data Class in Kotlin\nDESCRIPTION: This snippet shows how to define a serializable Video data class using the @Serializable annotation from kotlinx.serialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Video(\n    val id: Int,\n    val title: String,\n    val speaker: String,\n    val videoUrl: String\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Desktop Source Sets in Groovy DSL\nDESCRIPTION: Shows the same source set configuration as above but using Groovy DSL syntax. Sets up a shared desktop source set for native platform targets with proper dependency hierarchy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    linuxX64()\n    mingwX64()\n    macosX64()\n\n    sourceSets {\n        desktopMain {\n            dependsOn(commonMain.get())\n        }\n        linuxX64Main {\n            dependsOn(desktopMain)\n        }\n        mingwX64Main {\n            dependsOn(desktopMain)\n        }\n        macosX64Main {\n            dependsOn(desktopMain)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Library Examples in Kotlin\nDESCRIPTION: Code examples demonstrating the usage of new standard library features like readln() and collection builders.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(\"What is your nickname?\")\nval nickname = readln()\nprintln(\"Hello, $nickname!\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var sum = 0\n    while (true) {\n        val nextLine = readlnOrNull().takeUnless { \n            it.isNullOrEmpty() \n        } ?: break\n        sum += nextLine.toInt()\n    }\n    println(sum)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <reified T> renderType(): String {\n    val type = typeOf<T>()\n    return type.toString()\n}\n\nfun main() {\n    val fromExplicitType = typeOf<Int>()\n    val fromReifiedType = renderType<List<Int>>()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val x = listOf('b', 'c')\n    val y = buildList {\n        add('a')\n        addAll(x)\n        add('d')\n    }\n    println(y)  // [a, b, c, d]\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Parameter Name Usage\nDESCRIPTION: Demonstrates using 'it' as implicit parameter name in single-parameter lambda expressions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nints.filter { it > 0 } // this literal is of type '(it: Int) -> Boolean'\n```\n\n----------------------------------------\n\nTITLE: Configure Database Connection in Kotlin\nDESCRIPTION: This snippet uses the `DatabaseConfiguration` class from the Kotlin DataFrame library to define the connection parameters for a database.  It requires the database URL, username, and password to be defined as variables.  These credentials are then passed to the `DatabaseConfiguration` constructor to create a configuration object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval URL = \"YOUR_URL\"\nval USER_NAME = \"YOUR_USERNAME\"\nval PASSWORD = \"YOUR_PASSWORD\"\n\nval dbConfig = DatabaseConfiguration(URL, USER_NAME, PASSWORD)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Simple Annotation in Kotlin\nDESCRIPTION: Defines a basic annotation class named `Fancy` using the `annotation` keyword modifier in Kotlin. This annotation can be used to attach metadata to other code elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class Fancy\n```\n\n----------------------------------------\n\nTITLE: Accessing Binaries in Kotlin Build Scripts\nDESCRIPTION: This Kotlin snippet demonstrates various ways to access binaries in Kotlin/Native build scripts, including by name and using typed getters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// Fails if there is no such binary.\nbinaries[\"fooDebugExecutable\"]\nbinaries.getByName(\"fooDebugExecutable\")\n\n// Returns null if there is no such binary.\nbinaries.findByName(\"fooDebugExecutable\")\n\n// Fails if there is no such binary.\nbinaries.getExecutable(\"foo\", DEBUG)\nbinaries.getExecutable(DEBUG)          // Skip the first argument if the name prefix isn't set.\nbinaries.getExecutable(\"bar\", \"DEBUG\") // You also can use a string for build type.\n\n// Similar getters are available for other binary kinds:\n// getFramework, getStaticLib and getSharedLib.\n\n// Returns null if there is no such binary.\nbinaries.findExecutable(\"foo\", DEBUG)\n\n// Similar getters are available for other binary kinds:\n// findFramework, findStaticLib and findSharedLib.\n```\n\n----------------------------------------\n\nTITLE: Using the !is Operator for Inverse Type Checking and Smart Casting in Kotlin\nDESCRIPTION: This snippet demonstrates using the `!is` operator in the `getStringLength` function. It checks if `obj` is *not* a `String`. If this condition is true, the function returns `null` immediately. Otherwise, in the subsequent code, `obj` is smart-cast to `String`, allowing the safe return of its `length`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj !is String) return null\n\n    // `obj` is automatically cast to `String` in this branch\n    return obj.length\n}\n//sampleEnd\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"Getting the length of '$obj'. Result: ${getStringLength(obj) ?: \"Error: The object is not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Messages by Last Letter Kotlin\nDESCRIPTION: This Kotlin code sorts a list of `Message` objects alphabetically based on the last character of their text. It uses the `sortedBy()` function with a lambda expression that extracts the last character of the text using `it.text.last()`. The function returns a new list with the messages sorted accordingly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/sortByLastLetter\")\nfun sortByLastLetter(): List<Message> {\n    val messages = service.findMessages()\n    return messages.sortedBy { it.text.last() }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Compilation Tasks in Gradle using Groovy DSL - Groovy\nDESCRIPTION: This Groovy snippet shows how to define an 'integrationTest' compilation and associate it with the 'main' compilation using Gradle's Groovy DSL. This allows the integrationTest compilation to reference internal declarations from main. The dependency is just the presence of the kotlin plugin and appropriate DSL structure. Place this in your build.gradle file when creating custom compilations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_18\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationTestCompilation {\n    kotlin.target.compilations.create(\"integrationTest\") {\n        associateWith(kotlin.target.compilations.getByName(\"main\"))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Kotlin Function within a Package\nDESCRIPTION: Defines a Kotlin function `foo` inside a specific package `my.qualified.packagename`. This illustrates how package structure affects JavaScript access.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage my.qualified.packagename\n\nfun foo() = \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Kotlin function reference\nDESCRIPTION: Demonstrates how to obtain a function reference using the `::` operator and use it as a function type value. This example uses a function reference with the `filter` function on a list of numbers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isOdd(x: Int) = x % 2 != 0\n\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3)\n    println(numbers.filter(::isOdd))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Daemon Stop Command\nDESCRIPTION: Command to stop the Gradle daemon process when needed after disabling script sandboxing\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-direct-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew --stop\n```\n\n----------------------------------------\n\nTITLE: Defining Data Records for Orders and Customers - Java\nDESCRIPTION: Declares two Java record types: Order, holding a Customer object, and Customer, holding a name string. Used as value classes for examples involving function result nullability. Requires Java 16 or newer with record support.\nDependencies: None. Inputs: String, Customer. Outputs: immutable record instances.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n//Java\\nrecord Order (Customer customer) {}\\n\\nrecord Customer (String name) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing JVM-specific Actual Function\nDESCRIPTION: Shows the JVM implementation of the buildIdentity function using Java's System and ProcessHandle APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage identity\n\nimport java.lang.System\nimport java.lang.ProcessHandle\n\nactual fun buildIdentity() = Identity(\n    System.getProperty(\"user.name\") ?: \"None\",\n    ProcessHandle.current().pid()\n)\n```\n\n----------------------------------------\n\nTITLE: Apply Kotlin CocoaPods plugin to module build.gradle.kts\nDESCRIPTION: This code snippet shows how to apply the Kotlin CocoaPods plugin to a specific module's `build.gradle.kts` file, such as the `composeApp` module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nalias(libs.plugins.kotlinCocoapods)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Definition Generation in Kotlin/JS\nDESCRIPTION: Gradle configuration to explicitly enable TypeScript definition file generation for JavaScript projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js {\n        binaries.executable()\n        browser {\n        }\n        generateTypeScriptDefinitions()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Accessor Visibility in Kotlin\nDESCRIPTION: Examples of changing the visibility of property accessors or adding annotations without changing the default implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nvar setterVisibility: String = \"abc\"\n    private set // the setter is private and has the default implementation\n\nvar setterWithAnnotation: Any? = null\n    @Inject set // annotate the setter with Inject\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in Kotlin DSL\nDESCRIPTION: This snippet demonstrates how to configure language settings for all Kotlin source sets within the `kotlin` block of a Gradle build script using the Kotlin DSL.  It allows setting `languageVersion`, `apiVersion`, enabling language features with `enableLanguageFeature`, opting in to experimental APIs with `optIn`, and enabling `progressiveMode`. The settings are applied to all source sets using `sourceSets.all`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings.apply {\n            languageVersion = \"%languageVersion%\" // possible values: \"1.8\", \"1.9\", \"2.0\", \"2.1\"\n            apiVersion = \"%apiVersion%\" // possible values: \"1.8\", \"1.9\", \"2.0\", \"2.1\"\n            enableLanguageFeature(\"InlineClasses\") // language feature name\n            optIn(\"kotlin.ExperimentalUnsignedTypes\") // annotation FQ-name\n            progressiveMode = true // false by default\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Manager Restrictions in Gradle Properties\nDESCRIPTION: Property setting to disable thread restrictions when calling Kotlin suspend functions from Swift/Objective-C.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none\n```\n\n----------------------------------------\n\nTITLE: Importing POSIX Bindings in Kotlin/Native\nDESCRIPTION: This snippet demonstrates how to import the POSIX platform library, which provides bindings to the platform's POSIX implementation. This allows Kotlin/Native code to access standard POSIX functions across various platforms including iOS, macOS, Linux, and Windows.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-platform-libs.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport platform.posix.*\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Init Block and Secondary Constructor\nDESCRIPTION: Demonstrates the execution order of initializer blocks and secondary constructors. The initializer block is executed before the constructor body. Dependencies: Kotlin standard library for println.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nclass Constructors {\n    init {\n        println(\"Init block\")\n    }\n\n    constructor(i: Int) {\n        println(\"Constructor $i\")\n    }\n}\n//sampleEnd\n\nfun main() {\n    Constructors(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maps with Association Operations in Kotlin\nDESCRIPTION: Demonstrates how to create maps from collections using association functions like associateWith to transform elements into key-value pairs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbers.associateWith { it.length })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Criteria Sorting in Kotlin\nDESCRIPTION: Shows how to sort a collection using multiple criteria - first by string length, and then alphabetically when lengths are equal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val sortedStrings = listOf(\"aaa\", \"bb\", \"c\", \"b\", \"a\", \"aa\", \"ccc\")\n        .sortedWith { a, b -> \n           when (val compareLengths = a.length.compareTo(b.length)) {\n             0 -> a.compareTo(b)\n             else -> compareLengths\n           }\n         }\n\n    println(sortedStrings)\n    // [a, b, c, aa, bb, aaa, ccc]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Compose Compiler Options in Gradle\nDESCRIPTION: This code snippet demonstrates how to configure the Compose compiler options within the `build.gradle.kts` file using the `composeCompiler {}` block. It shows how to enable general compiler settings and configure feature flags by adding them to a set.  It enables `includeSourceInformation` and sets the `featureFlags` to include `OptimizeNonSkippingGroups` and disable `StrongSkipping`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-options.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ncomposeCompiler {\n    includeSourceInformation = true\n\n    featureFlags = setOf(\n        ComposeFeatureFlag.StrongSkipping.disabled(),\n        ComposeFeatureFlag.OptimizeNonSkippingGroups\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Local Function Declaration and Usage - Kotlin\nDESCRIPTION: Defines a function that declares and invokes a local function inside itself, useful for encapsulating logic specific to that scope. The example performs a depth-first search (dfs) using recursion and parameter passing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun dfs(graph: Graph) {\n    fun dfs(current: Vertex, visited: MutableSet<Vertex>) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v, visited)\n    }\n\n    dfs(graph.vertices[0], HashSet())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kotlin Test Dependencies in Kotlin Build Script\nDESCRIPTION: Configuration to add the kotlin-test dependency to the commonTest source set. This automatically brings in platform-specific test dependencies for all targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n         commonTest.dependencies {\n             implementation(kotlin(\"test\")) // This brings all the platform dependencies automatically\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Custom Declarations to Kotlin/Native cinterop\nDESCRIPTION: This snippet demonstrates how to add custom C declarations to a `.def` file for use in Kotlin/Native cinterop. It allows including inline C code directly within the `.def` file after a separator line consisting of `---`. This enables adding custom functions or macros to the generated bindings without creating separate header files. Functions with a body should be declared static.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nheaders = errno.h\n---\n\nstatic inline int getErrno() {\n    return errno;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Kotlin Library Content\nDESCRIPTION: Defines a Kotlin library with an object, interface, class, and several functions demonstrating various data types and function types. This code will be compiled into a framework for use in Swift/Objective-C.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage example\n \nobject Object {\n    val field = \"A\"\n}\n \ninterface Interface {\n    fun iMember() {}\n}\n \nclass Clazz : Interface {\n    fun member(p: Int): ULong? = 42UL\n}\n \nfun forIntegers(b: Byte, s: UShort, i: Int, l: ULong?) { }\nfun forFloats(f: Float, d: Double?) { }\n \nfun strings(str: String?) : String {\n    return \"That is '$str' from C\"\n}\n \nfun acceptFun(f: (String) -> String?) = f(\"Kotlin/Native rocks!\")\nfun supplyFun() : (String) -> String? = { \"$it is cool!\" }\n```\n\n----------------------------------------\n\nTITLE: Restricting Nulls in Function Parameters - Kotlin\nDESCRIPTION: Defines a function where the parameter 'a' is a mandatory non-null String. Kotlin's compiler enforces non-nullability for function arguments, thus preventing accidental NullPointerException at runtime. If null is passed, this code fails to compile. This demonstrates Kotlin's stricter null safety by default.\nDependencies: None. Input: a: String (non-null). Output: Int (length of string). Compile-time error if null passed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\nfun stringLength(a: String) = a.length\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings using Extension Function split() in Kotlin\nDESCRIPTION: Demonstrates Kotlin's `split()` extension function, which accepts one or more literal string delimiters. This avoids the need for regex escaping when splitting by simple characters like the period (`.`). The result is a `List<String>`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    println(\"Sometimes.text.should.be.split\".split(\".\"))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Measure Time Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to measure the execution time of a block of code using the measureTime() inline function. It uses Thread.sleep() to simulate a time-consuming operation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.measureTime\n\nfun main() {\n//sampleStart\n    val timeTaken = measureTime {\n        Thread.sleep(100)\n    }\n    println(timeTaken) // e.g. 103 ms\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Checked Exceptions for Java Interoperability\nDESCRIPTION: Illustrates how to use the @Throws annotation in Kotlin to declare checked exceptions for Java interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n@Throws(IOException::class)\nfun writeToFile() {\n    /*...*/\n    throw IOException()\n}\n```\n\n----------------------------------------\n\nTITLE: Finding the Longest Message Kotlin\nDESCRIPTION: This Kotlin code finds the `Message` object with the longest text in a list of messages. It uses the `reduce()` function, which iteratively compares two messages and returns the one with the longer text.  The `reduce()` function applies the given operation to the collection elements sequentially and returns the accumulated result. In this case, it will reduce the collection to a single `Message` object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"findTheLongestMessage\")\nfun reduce(): Message {\n    val messages = service.findMessages()\n    return messages.reduce { first, second ->\n        if (first.text.length > second.text.length) first else second\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Taking and Dropping Elements from Collections in Kotlin\nDESCRIPTION: Illustrates using `take()`, `takeLast()`, `drop()`, and `dropLast()` extension functions on a `List<String>`. `take()` and `takeLast()` retrieve a specified number of elements from the beginning or end, respectively. `drop()` and `dropLast()` return the list excluding a specified number of elements from the beginning or end.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.take(3))\n    println(numbers.takeLast(3))\n    println(numbers.drop(1))\n    println(numbers.dropLast(5))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VideoList Component in Kotlin React\nDESCRIPTION: Implements a reusable VideoList component for displaying video lists.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.browser.window\nimport react.*\nimport react.dom.*\nimport react.dom.html.ReactHTML.p\n\nval VideoList = FC<Props> {\n    for (video in unwatchedVideos) {\n        p {\n            +\"${video.speaker}: ${video.title}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JVM Record in Kotlin\nDESCRIPTION: Shows how to create a JVM record class in Kotlin using the @JvmRecord annotation with a data class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmRecord\ndata class User(val name: String, val age: Int)\n```\n\n----------------------------------------\n\nTITLE: Platform Code with Platform Specific Implementations in Kotlin Multiplatform JVM\nDESCRIPTION: This code demonstrates a platform specific implementation for JVM of a function that is used in common code. When the platform code is compiled for the JVM platform, calling the foo() function in the common code results in the foo() function from the platform code being called as platform foo.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// JVM\nfun foo(x: Int) = println(\"platform foo\")\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin functions from JavaScript\nDESCRIPTION: This JavaScript code imports `createUser` and `setUserName` functions from a Kotlin library (`userlib.mjs`). It creates a `User` object using `createUser`, then updates the user's name using `setUserName`. This demonstrates bidirectional interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport UserLib from \"./userlib.mjs\"\n\nlet user = UserLib.createUser(\"Bob\");\nUserLib.setUserName(user, \"Alice\");\n```\n\n----------------------------------------\n\nTITLE: Folding with Indices and Reverse Folding Using foldIndexed and foldRightIndexed - Kotlin\nDESCRIPTION: This example applies foldIndexed and foldRightIndexed to only sum elements at even indices from a list, once forwards and once in reverse. These functions pass the element index as the first argument to the lambda, enabling position-based aggregation or filtering. Only the Kotlin Standard Library is needed; they accept an initial value, the current index, and standard parameters. The code demonstrates how indexed aggregation builds up custom computations depending on position.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 2, 10, 4)\n    val sumEven = numbers.foldIndexed(0) { idx, sum, element -> if (idx % 2 == 0) sum + element else sum }\n    println(sumEven)\n\n    val sumEvenRight = numbers.foldRightIndexed(0) { idx, element, sum -> if (idx % 2 == 0) sum + element else sum }\n    println(sumEvenRight)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using also() Extension Function in Kotlin\nDESCRIPTION: Demonstrates the also() extension function for chaining operations while maintaining access to the receiver object as 'it'. Useful for performing actions without shadowing the outer scope's this reference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Block.copy() = Block().also {\n    it.content = this.content\n}\n```\n\n----------------------------------------\n\nTITLE: Java Set with NotNull Annotations\nDESCRIPTION: This Java code snippet demonstrates the use of `@NotNull` annotations on a method that returns a `Set` and takes a `Collection` as input. Both the set elements and the collection elements are annotated as `@NotNull` strings.  The return type and parameter are both collections of non-nullable strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@NotNull\nSet<@NotNull String> toSet(@NotNull Collection<@NotNull String> elements) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Processing for No-arg Plugin in Gradle\nDESCRIPTION: Shows how to specify which annotations should trigger the generation of zero-argument constructors when using the no-arg plugin in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nnoArg {\n    annotation(\"com.my.Annotation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Methods from Kotlin Companion Object Functions with @JvmStatic\nDESCRIPTION: Demonstrates the use of the `@JvmStatic` annotation on a function (`callStatic`) within a `companion object` of a Kotlin class (`C`). This generates a true static method in the Java class (`C.callStatic()`). The original instance method on the companion object (`C.Companion.callStatic()`) also remains. Non-annotated functions like `callNonStatic` are only available via the companion object instance (`C.Companion.callNonStatic()`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C {\n    companion object {\n        @JvmStatic fun callStatic() {}\n        fun callNonStatic() {}\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nC.callStatic(); // works fine\nC.callNonStatic(); // error: not a static method\nC.Companion.callStatic(); // instance method remains\nC.Companion.callNonStatic(); // the only way it works\n```\n\n----------------------------------------\n\nTITLE: Implementing a Spring Data Repository Interface in Kotlin\nDESCRIPTION: This snippet defines a Spring Data repository interface for persisting and retrieving Message entities. It extends CrudRepository for basic CRUD operations and adds a custom query method with a SQL select statement. Dependencies include Spring Data JDBC and the annotated Message class. Inputs and outputs are tied to the Message database records and interface method signatures.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.data.jdbc.repository.query.Query\\nimport org.springframework.data.repository.CrudRepository\\n \\ninterface MessageRepository : CrudRepository<Message, String>{\\n \\n    @Query(\"select * from messages\")\\n    fun findMessages(): List<Message>\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Library Dependencies in Kotlin\nDESCRIPTION: This snippet demonstrates how to add platform-specific library dependencies in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            // kotlinx.coroutines will be available in all source sets\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n        androidMain.dependencies {\n\n        }\n        iosMain.dependencies {\n            // SQLDelight will be available only in the iOS source set, but not in Android or common\n            implementation(\"com.squareup.sqldelight:native-driver:%sqlDelightVersion%\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bound Method Reference Kotlin\nDESCRIPTION: This example shows how to create a bound method reference in Kotlin. It creates a regular expression and then creates a bound method reference to the `matches` method of the regex. This bound reference can then be called directly on a string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numberRegex = \"\\\\d+\".toRegex()\n    println(numberRegex.matches(\"29\"))\n     \n    val isNumber = numberRegex::matches\n    println(isNumber(\"29\"))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Kapt Logging via Gradle Property - Properties File\nDESCRIPTION: Shows the setting for enabling verbose annotation processor statistics logging via the `kapt.verbose` property in `gradle.properties`. Once enabled, processor stats and generated file reports will be printed with info level logging.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_15\n\nLANGUAGE: none\nCODE:\n```\nkapt.verbose=true\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Element Value Using Kotlin/JS\nDESCRIPTION: This snippet shows how to access and modify the value of an `input` element with the ID `email` using Kotlin/JS. It demonstrates using `getElementById` and casting the result to `HTMLInputElement` to access its properties. Precondition requires an HTML structure with a matching ID in place.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/browser-api-dom.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval email = document.getElementById(\"email\") as HTMLInputElement\nemail.value = \"hadi@jetbrains.com\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Class Instances in Kotlin\nDESCRIPTION: This snippet demonstrates how to compare data class instances for equality using the `==` operator. It compares two instances with the same property values and another with different values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val id: Int)\n\nfun main() {\n    //sampleStart\n    val user = User(\"Alex\", 1)\n    val secondUser = User(\"Alex\", 1)\n    val thirdUser = User(\"Max\", 2)\n\n    // Compares user to second user\n    println(\"user == secondUser: ${user == secondUser}\") \n    // user == secondUser: true\n    \n    // Compares user to third user\n    println(\"user == thirdUser: ${user == thirdUser}\")   \n    // user == thirdUser: false\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Messages to List of Strings Kotlin\nDESCRIPTION: This Kotlin code transforms a list of `Message` objects into a list of `String` objects by concatenating the `id` and `text` of each message. It uses the `map()` function with a lambda expression that performs the string concatenation. The resulting list of strings is then returned.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/transformMessagesToListOfStrings\")\nfun transformMessagesToListOfStrings(): List<String> {\n    val messages = service.findMessages()\n    return messages.map { \"${it.id} ${it.text}\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Namespaced Kotlin Function (UMD/CommonJS)\nDESCRIPTION: Demonstrates calling the namespaced Kotlin function `foo` (defined in `my.qualified.packagename`) from JavaScript using UMD or CommonJS. Access requires specifying the full package path after importing the module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nalert(require('myModule').my.qualified.packagename.foo())\n```\n\n----------------------------------------\n\nTITLE: Factory Function Kotlin\nDESCRIPTION: This code demonstrates a factory function `fromPolar` within a companion object for creating instances of the `Point` class. It showcases a scenario where a distinct name is preferred for the factory function to indicate special semantics.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_65\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Point(val x: Double, val y: Double) {\n    companion object {\n        fun fromPolar(angle: Double, radius: Double) = Point(...)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Functions with Upper Bounds in Kotlin\nDESCRIPTION: Demonstrates valid and invalid usages of generic functions with upper bounds. Shows how the compiler enforces type constraints on generic parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nsort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable<Int>\nsort(listOf(HashMap<Int, String>())) // Error: HashMap<Int, String> is not a subtype of Comparable<HashMap<Int, String>>\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach for Custom Serialization in Kotlin\nDESCRIPTION: Shows the recommended way to declare a custom serializer for a class using the @Serializable annotation with an explicit reference to the companion object. This approach clearly indicates the use of a custom serializer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.*\n\n@Serializable(Foo.Companion::class)\nclass Foo(val a: Int) {\n    // Doesn't matter if you use @Serializer(Foo::class) or not\n    companion object: KSerializer<Foo> {\n        // Custom implementation of KSerializer<Foo>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing String Templates in Kotlin\nDESCRIPTION: Explains the string templates feature in Kotlin, which allows embedding variables and expressions directly into string literals. Variables can be inserted by prefixing them with a dollar sign, and complex expressions can be included within curly braces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    var a = 1\n    // simple name in template:\n    val s1 = \"a is \\$a\" \n    \n    a = 2\n    // arbitrary expression in template:\n    val s2 = \"\\${s1.replace(\"is\", \"was\")}, but now is \\$a\"\n//sampleEnd\n    println(s2)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Separate Gradle Project for Ktor Implementation\nDESCRIPTION: This snippet shows how to configure a separate Gradle project for a specific implementation (e.g., Ktor). It includes applying the Kotlin JVM plugin, setting up dependencies, and configuring compiler options.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// ktor-impl/build.gradle.kts:\nplugins {\n    kotlin(\"jvm\")\n}\n\ndependencies {\n    project(\":shared\") // Add dependency on the original project\n    // Copy dependencies of jvmKtorMain here\n}\n\nkotlin {\n    compilerOptions {\n        // Copy compiler options of jvmKtorMain here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Implementing a Symbol Processor in Kotlin\nDESCRIPTION: This code snippet demonstrates the implementation of KSP's SymbolProcessor and SymbolProcessorProvider interfaces in Kotlin. It shows how to create a processor that identifies top-level and non-local functions in classes using a custom visitor pattern. Dependencies include the KSP API, and it illustrates the processor framework through method overrides and nested classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface SymbolProcessorProvider {\n    fun create(environment: SymbolProcessorEnvironment): SymbolProcessor\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface SymbolProcessor {\n    fun process(resolver: Resolver): List<KSAnnotated> // Let's focus on this\n    fun finish() {}\n    fun onError() {}\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HelloFunctionFinderProcessor : SymbolProcessor() {\n    // ...\n    val functions = mutableListOf<KSClassDeclaration>()\n    val visitor = FindFunctionsVisitor()\n\n    override fun process(resolver: Resolver) {\n        resolver.getAllFiles().forEach { it.accept(visitor, Unit) }\n    }\n\n    inner class FindFunctionsVisitor : KSVisitorVoid() {\n        override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {\n            classDeclaration.getDeclaredFunctions().forEach { it.accept(this, Unit) }\n        }\n\n        override fun visitFunctionDeclaration(function: KSFunctionDeclaration, data: Unit) {\n            functions.add(function)\n        }\n\n        override fun visitFile(file: KSFile, data: Unit) {\n            file.declarations.forEach { it.accept(this, Unit) }\n        }\n    }\n    // ...\n    \n    class Provider : SymbolProcessorProvider {\n        override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor = TODO()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pod with Support for @import Directives\nDESCRIPTION: Configures a Kotlin project with a Pod dependency that requires support for @import directives in Objective-C headers by using the -fmodules compiler option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n\n        pod(\"PodName\") {\n            version = \"1.0.0\"\n            extraOpts = listOf(\"-compiler-option\", \"-fmodules\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Number-to-Word Map in Kotlin\nDESCRIPTION: This exercise requires creating a map that relates numbers 1-3 to their spelled-out form. The user needs to complete the map initialization and use it to spell out a given number.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val number2word = // Write your code here\n    val n = 2\n    println(\"$n is spelt as '${<Write your code here >}'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Binary Declaration in Kotlin/Native\nDESCRIPTION: This snippet shows a simplified way to declare binaries without additional configuration in a Kotlin/Native project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries {\n    executable()\n}\n```\n\n----------------------------------------\n\nTITLE: Smart casts with common supertype in Kotlin\nDESCRIPTION: Demonstrates how Kotlin performs smart casts to a common supertype when combining type checks with the 'or' operator, allowing for type-safe operations on the resulting object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Status {\n    fun signal() {}\n}\n\ninterface Ok : Status\ninterface Postponed : Status\ninterface Declined : Status\n\nfun signalCheck(signalStatus: Any) {\n    if (signalStatus is Postponed || signalStatus is Declined) {\n        // signalStatus is smart-cast to a common supertype Status\n        signalStatus.signal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Annotations on Separate Lines\nDESCRIPTION: Shows the recommended way to place annotations on separate lines before the declaration they apply to.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n@Target(AnnotationTarget.PROPERTY)\nannotation class JsonExclude\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspending Function to Fetch Video Data in Kotlin/JS\nDESCRIPTION: This code implements a suspending function to fetch video data from an external API using the fetch API and kotlinx.serialization for JSON parsing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun fetchVideo(id: Int): Video {\n    val response = window\n        .fetch(\"https://my-json-server.typicode.com/kotlin-hands-on/kotlinconf-json/videos/$id\")\n        .await()\n        .text()\n        .await()\n    return Json.decodeFromString(response)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Employees (Solution)\nDESCRIPTION: This code snippet provides a complete solution for generating random employees. It defines the `RandomEmployeeGenerator` class with a list of names and a function to generate `Employee` instances with random salaries within a given range. It uses `kotlin.random.Random` for generating random numbers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\ndata class Employee(val name: String, var salary: Int)\n\nclass RandomEmployeeGenerator(var minSalary: Int, var maxSalary: Int) {\n    val names = listOf(\"John\", \"Mary\", \"Ann\", \"Paul\", \"Jack\", \"Elizabeth\")\n    fun generateEmployee() =\n        Employee(names.random(),\n            Random.nextInt(from = minSalary, until = maxSalary))\n}\n\nfun main() {\n    val empGen = RandomEmployeeGenerator(10, 30)\n    println(empGen.generateEmployee())\n    println(empGen.generateEmployee())\n    println(empGen.generateEmployee())\n    empGen.minSalary = 50\n    empGen.maxSalary = 100\n    println(empGen.generateEmployee())\n}\n```\n\n----------------------------------------\n\nTITLE: Using also() for Additional Object Operations in Kotlin\nDESCRIPTION: This example shows how to use also() to perform additional operations on an object within a call chain. It's useful for actions that don't affect the object itself but need to be performed in the context of the object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\")\n    numbers\n        .also { println(\"The list elements before adding new one: $it\") }\n        .add(\"four\")\n}\n```\n\n----------------------------------------\n\nTITLE: Remove a Column from DataFrame in Kotlin\nDESCRIPTION: This snippet shows how to remove the 'movieId' column from the `actionMoviesDf` DataFrame. The resulting DataFrame, without the 'movieId' column, is stored in the `refinedMoviesDf` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval refinedMoviesDf = actionMoviesDf.remove { movieId }\nrefinedMoviesDf\n```\n\n----------------------------------------\n\nTITLE: Retrieving First and Last Elements Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to retrieve the first and last elements of a collection of `Message` objects within a Spring Boot controller. It calls `service.findMessages()` to get all messages, then uses `first()` and `last()` to extract the desired elements.  A new list containing only the first and last messages is returned and serialized to JSON.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/firstAndLast\")\nfun firstAndLast(): List<Message> {\n    val messages = service.findMessages()\n    return listOf(messages.first(), messages.last())\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Kotlin Objects with usePinned\nDESCRIPTION: Shows how to pin a Kotlin ByteArray in memory using usePinned so its address remains stable while passing it to C functions. Pinning ensures the object won't be moved by the garbage collector.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\nimport platform.posix.*\n\n@OptIn(ExperimentalForeignApi::class)\nfun readData(fd: Int) {\n    val buffer = ByteArray(1024)\n    buffer.usePinned { pinned ->\n        while (true) {\n            val length = recv(fd, pinned.addressOf(0), buffer.size.convert(), 0).toInt()\n            if (length <= 0) {\n                break\n            }\n            // Now `buffer` has raw data obtained from the `recv()` call.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Lazy Sequences in Kotlin using generateSequence\nDESCRIPTION: This Kotlin snippet shows how to create a sequence of numbers using `generateSequence`. It starts with 1 and defines the next element function as `it + 3`. The sequence generation is lazy. `.take(10)` limits the sequence to 10 elements, and `.sum()` calculates the sum, triggering the computation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val sum = generateSequence(1) {\n        it + 3\n    }.take(10).sum()\n    println(sum) // Prints 145\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping GET Requests with @GetMapping in Kotlin Spring\nDESCRIPTION: This snippet shows how the `@GetMapping(\"/\")` annotation is used within a Spring REST controller to map HTTP GET requests for the root path (\"/\") to the `index` function. The function accepts a `name` parameter bound from the request using `@RequestParam` and returns a simple string greeting using Kotlin's single-expression function syntax and string templates. It depends on Spring Web annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-create-project-with-spring-boot.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/\")\nfun index(@RequestParam(\"name\") name: String) = \"Hello, $name!\"\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting with Selectors in Kotlin\nDESCRIPTION: Demonstrates using sortedBy() and sortedByDescending() with selector functions to sort collections by derived properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n\n    val sortedNumbers = numbers.sortedBy { it.length }\n    println(\"Sorted by length ascending: $sortedNumbers\")\n    val sortedByLast = numbers.sortedByDescending { it.last() }\n    println(\"Sorted by the last letter descending: $sortedByLast\")\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing to Inference by Passing Variables to Typed Functions\nDESCRIPTION: Shows how passing postponed type variables to functions with concrete parameter types contributes to type inference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun takeMyLong(x: Long) { ... }\n\nfun String.isMoreThat3() = length > 3\n\nfun takeListOfStrings(x: List<String>) { ... }\n\nfun main() {\n    val result1 = buildList {\n        val x = get(0)\n        takeMyLong(x)\n    } // result1 has the List<Long> type\n\n    val result2 = buildList {\n        val x = get(0)\n        val isLong = x.isMoreThat3()\n    // ...\n    } // result2 has the List<String> type\n\n    val result3 = buildList {\n        takeListOfStrings(this)\n    } // result3 has the List<String> type\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Kotlin Dependency Versions with BOM in Kotlin Build Script\nDESCRIPTION: Implementation of a platform dependency on kotlin-bom to align all Kotlin library versions in a project. This helps resolve version conflicts between transitive dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(platform(\"org.jetbrains.kotlin:kotlin-bom:%kotlinVersion%\"))\n```\n\n----------------------------------------\n\nTITLE: Comparing Object and Data Object String Representations\nDESCRIPTION: This example demonstrates how data objects provide improved toString() representations compared to regular objects. Data objects return their simple name rather than the object reference style output of regular objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.example\nobject MyObject\ndata object MyDataObject\n\nfun main() {\n    println(MyObject) // org.example.MyObject@1f32e575\n    println(MyDataObject) // MyDataObject\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Maps by Keys and Values in Kotlin\nDESCRIPTION: This example shows how to use filterKeys() and filterValues() functions to filter maps based on keys or values separately.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mapOf(\"key1\" to 1, \"key2\" to 2, \"key3\" to 3, \"key11\" to 11)\n    val filteredKeysMap = numbersMap.filterKeys { it.endsWith(\"1\") }\n    val filteredValuesMap = numbersMap.filterValues { it < 10 }\n\n    println(filteredKeysMap)\n    println(filteredValuesMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Predicates in Java\nDESCRIPTION: Demonstrates how to test predicates on collections in Java using Stream API methods like allMatch(), noneMatch(), and anyMatch().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npublic void testPredicates() {\n    var numbers = List.of(\"one\", \"two\", \"three\", \"four\");\n    System.out.println(numbers.stream().noneMatch(it -> it.endsWith(\"e\"))); // false\n    System.out.println(numbers.stream().anyMatch(it -> it.endsWith(\"e\"))); // true\n    System.out.println(numbers.stream().allMatch(it -> it.endsWith(\"e\"))); // false\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Class with Map-Based Delegated Properties - Kotlin\nDESCRIPTION: Shows how to create an instance of a class that delegates property access to a map. The map supplies values for properties by name key, facilitating dynamic initialization. No external dependencies required beyond Kotlin collections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval user = User(mapOf(\n    \"name\" to \"John Doe\",\n    \"age\"  to 25\n))\n```\n\n----------------------------------------\n\nTITLE: Using fold and reduce to Accumulate Results in Collections - Kotlin\nDESCRIPTION: This example uses reduce and fold to aggregate results over a list of numbers. reduce combines elements using a lambda, using the first item as the initial value, while fold starts with a custom initial value. The code computes a simple sum with reduce and the sum of doubled elements with fold, highlighting that reduce does not apply the function to the very first element. The input collection is hardcoded, and no external dependencies are required other than the standard Kotlin library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 2, 10, 4)\n\n    val simpleSum = numbers.reduce { sum, element -> sum + element }\n    println(simpleSum)\n    val sumDoubled = numbers.fold(0) { sum, element -> sum + element * 2 }\n    println(sumDoubled)\n\n    //incorrect: the first element isn't doubled in the result\n    //val sumDoubledReduce = numbers.reduce { sum, element -> sum + element * 2 } \n    //println(sumDoubledReduce)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Context Receivers Deprecation Warning (Kotlin)\nDESCRIPTION: This Kotlin code showcases the warning issued in Kotlin 2.0.20 when context receivers are used with the `-Xcontext-receivers` compiler option. The warning indicates that context receivers are deprecated and will be superseded by context parameters.  It advises against using context receivers and suggests alternative approaches.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyContext\n\ncontext(MyContext)\n// Warning: Experimental context receivers are deprecated and will be superseded by context parameters. \n// Please don't use context receivers. You can either pass parameters explicitly or use members with extensions.\nfun someFunction() {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Expected Classes in Frameworks\nDESCRIPTION: Demonstrates how framework authors can use abstract expected classes to define a common API that users must implement, while providing platform-specific implementations of core functionality.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// In commonMain of the framework codebase:\nexpect abstract class CommonIdentity() {\n    val userName: String\n    val processID: Long\n    abstract val displayName: String\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In nativeMain of the framework codebase:\nactual abstract class CommonIdentity {\n    actual val userName = getlogin()?.toKString() ?: \"None\"\n    actual val processID = getpid().toLong()\n    actual abstract val displayName: String\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In jvmMain of the framework codebase:\nactual abstract class CommonIdentity : Identity() {\n    actual val userName = login\n    actual val processID = pid\n    actual abstract val displayName: String\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// In commonMain of the users' codebase:\nclass MyCommonIdentity : CommonIdentity() {\n    override val displayName = \"Admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exhaustive When Expression with Sealed Interface\nDESCRIPTION: Shows how to use exhaustive when expressions with sealed interfaces, eliminating the need for an else branch.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun draw(polygon: Polygon) = when (polygon) {\n   is Rectangle -> // ...\n   is Triangle -> // ...\n   // else is not needed - all possible implementations are covered\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Kandy in Kotlin\nDESCRIPTION: This snippet shows how to create a bar chart using the Kandy plotting library within a Kotlin Notebook.  It uses data from a DataFrame, groups data by 'Product', and maps columns to the X and Y axes, and also uses a column for fill color, customizing the chart's appearance, and setting a title. Requires Kandy dependency to be added via `%use kandy`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval salesPlot = dfSales.groupBy { Product }.plot {\n    bars {\n        // Access the data frame's columns used for the X and Y axes\n        x(Month)\n        y(Sales)\n        // Access the data frame's column used for categories and sets colors for these categories\n        fillColor(Product) {\n            scale = categorical(\n                \"Laptop\" to Color.PURPLE,\n                \"Smartphone\" to Color.ORANGE,\n                \"Tablet\" to Color.GREEN\n            )\n            legend.name = \"Product types\"\n        }\n    }\n    // Customize the chart's appearance\n    layout.size = 1000 to 450\n    layout.title = \"Yearly Gadget Sales Results\"\n}\n\nsalesPlot\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections by Type with filterIsInstance() in Kotlin\nDESCRIPTION: This snippet illustrates the use of filterIsInstance() to filter elements of a specific type from a collection, allowing operations specific to that type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(null, 1, \"two\", 3.0, \"four\")\n    println(\"All String elements in upper case:\")\n    numbers.filterIsInstance<String>().forEach {\n        println(it.uppercase())\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Multiplatform Plugin in Kotlin DSL\nDESCRIPTION: This snippet demonstrates how to apply the `org.jetbrains.kotlin.multiplatform` Gradle plugin to a project using the Kotlin DSL (`build.gradle.kts`). The `%kotlinVersion%` placeholder should be replaced with the desired Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dependencies from Version Catalog in Kotlin DSL\nDESCRIPTION: This Kotlin code snippet shows how to declare a dependency in a `build.gradle.kts` file by referencing an entry defined in a Gradle version catalog (`libs.versions.toml`). It uses the type-safe accessor `libs.kotlinxCoroutines` generated by Gradle to add the `kotlinx-coroutines-core` library to the `implementation` configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(libs.kotlinxCoroutines)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Typesafe HTML Elements Using kotlinx.html in Kotlin/JS\nDESCRIPTION: This Kotlin code snippet demonstrates creating and appending HTML content to the document body using the kotlinx.html library. It imports browser and HTML builder packages, and defines a main function which builds a div containing a headline, paragraph text, and a hyperlink by employing the statically typed DSL. Dependencies include kotlinx.html and browser APIs. Expects the dependencies to be present and runs in a browser environment, producing output directly in the DOM structure of the loaded web page.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/typesafe-html-dsl.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.browser.*\nimport kotlinx.html.*\nimport kotlinx.html.dom.*\n\nfun main() {\n    document.body!!.append.div {\n        h1 {\n            +\"Welcome to Kotlin/JS!\"\n        }\n        p {\n            +\"Fancy joining this year's \"\n            a(\"https://kotlinconf.com/\") {\n                +\"KotlinConf\"\n            }\n            +\"?\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Annotation for No-arg Constructor Generation in Kotlin\nDESCRIPTION: Example of creating a custom annotation that will trigger the no-arg compiler plugin to generate a zero-argument constructor for any class marked with this annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.my\n\nannotation class Annotation\n```\n\n----------------------------------------\n\nTITLE: Retrieving with Selector - firstNotNullOf - Kotlin Collections - Kotlin\nDESCRIPTION: Shows how to use firstNotNullOf() to transform elements via a selector and return the first non-null result. Also highlights firstNotNullOfOrNull() for safe fallback. Requires Kotlin 1.5 or newer. Input is a heterogeneous list and a selector lambda; output is the first string of length at least 4 or throws NoSuchElementException if none found.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val list = listOf<Any>(0, \"true\", false)\\n    // Converts each element to string and returns the first one that has required length\\n    val longEnough = list.firstNotNullOf { item -> item.toString().takeIf { it.length >= 4 } }\\n    println(longEnough)\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements Safely in Java\nDESCRIPTION: Demonstrates the Java approach to safely accessing list elements, which requires explicit null checking to avoid exceptions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Java\nvar numbers = new ArrayList<Integer>();\nnumbers.add(1);\nnumbers.add(2);\n\nSystem.out.println(numbers.get(0));\n//numbers.get(5) // Exception!\n```\n\n----------------------------------------\n\nTITLE: Null Safety Exercise Solution in Kotlin\nDESCRIPTION: This is the solution to the null safety exercise, demonstrating the use of safe call operator and Elvis operator to handle potential null values when retrieving an employee's salary.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Employee (val name: String, var salary: Int)\n\nfun employeeById(id: Int) = when(id) {\n    1 -> Employee(\"Mary\", 20)\n    2 -> null\n    3 -> Employee(\"John\", 21)\n    4 -> Employee(\"Ann\", 23)\n    else -> null\n}\n\nfun salaryById(id: Int) = employeeById(id)?.salary ?: 0\n\nfun main() {\n    println((1..5).sumOf { id -> salaryById(id) })\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe cast operator in Kotlin\nDESCRIPTION: Demonstrates the use of the unsafe cast operator 'as' in Kotlin, which explicitly casts an object to a non-nullable type. This operator throws an exception if the cast is not possible.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval x: String = y as String\n```\n\n----------------------------------------\n\nTITLE: Regex Split to Sequence in Kotlin\nDESCRIPTION: Shows how to use splitToSequence() with regex to lazily split strings and process the results, including filtering and transformation operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val colorsText = \"green, red, brown&blue, orange, pink&green\"\n    val regex = \"[,\\\\s]+\".toRegex()\n    val mixedColor = regex.splitToSequence(colorsText)\n        .onEach { println(it) }\n        .firstOrNull { it.contains('&') }\n    println(mixedColor) // \"brown&blue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a REST Controller Endpoint with Spring Boot in Kotlin\nDESCRIPTION: This snippet implements a REST controller in Kotlin using Spring Boot annotations. It exposes an HTTP GET endpoint at the root path that returns a hardcoded list of Message data objects in JSON format. Dependencies required are Spring Web and the previously defined Message class. The endpoint responds to GET requests and outputs a JSON array of messages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@RestController\\nclass MessageResource {\\n    @GetMapping(\"/\")\\n    fun index(): List<Message> = listOf(\\n        Message(\"1\", \"Hello!\"),\\n        Message(\"2\", \"Bonjour!\"),\\n        Message(\"3\", \"Privet!\"),\\n    )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Map Nullable Value if Not Null in Kotlin\nDESCRIPTION: This snippet demonstrates how to map a nullable value to another value if it is not null, using `let` in combination with the Elvis operator. If the original value is null, a default value is returned.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nval value = ...\n\nval mapped = value?.let { transformValue(it) } ?: defaultValue \n// defaultValue is returned if the value or the transform result is null.\n```\n\n----------------------------------------\n\nTITLE: When with Type Check Kotlin\nDESCRIPTION: Illustrates how to check the type of a value using the 'is' and '!is' keywords within a 'when' statement. Demonstrates smart casts, allowing direct access to members of the checked type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun hasPrefix(x: Any) = when(x) {\n    is String -> x.startsWith(\"prefix\")\n    else -> false\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Kotlin \"Hello, World!\" program\nDESCRIPTION: This Kotlin code defines a simple console application that prints \"Hello, World!\" to the console. It utilizes the `main` function which is the entry point for Kotlin applications. `println` is used to print to standard output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"Hello, World!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Type-Safe Enums in Kotlin\nDESCRIPTION: This snippet demonstrates a basic enum class definition in Kotlin to represent a fixed set of directions. Dependencies include the Kotlin standard library only. There are no parameters to the enum; each entry is a singleton constant representing a unique value. Usage of such enums increases type safety when a finite set of named values is required. The output is the declaration of the enum itself; expected usage is through its named constants.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Direction {\n    NORTH, SOUTH, WEST, EAST\n}\n```\n\n----------------------------------------\n\nTITLE: Using C Function Pointer in Kotlin\nDESCRIPTION: Example of how to use a C function pointer returned from a C function. Shows null-checking and direct invocation of the function pointer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-function-pointers-from-c.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.invoke\n\n@OptIn(ExperimentalForeignApi::class)\nfun myFun2() {\n    val functionFromC = supply_fun() ?: error(\"No function is returned\")\n\n    functionFromC(42)\n}\n```\n\n----------------------------------------\n\nTITLE: Providing JVM Arguments for kapt Worker Process - Groovy\nDESCRIPTION: Demonstrates, using Groovy Gradle DSL, how to set extra JVM arguments for kapt worker processes for memory/performance tuning. Useful when annotation processors require more heap space.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask.class)\n    .configureEach {\n        kaptProcessJvmArgs.add('-Xmx512m')\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Framework Info.plist Properties in Kotlin\nDESCRIPTION: Shows how to customize the Info.plist file properties for a Kotlin/Native framework using the binaryOption DSL to set bundle ID, version string, and other framework metadata.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries {\n    framework {\n        binaryOption(\"bundleId\", \"com.example.app\")\n        binaryOption(\"bundleVersion\", \"2\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Kotlin Dependencies in Gradle (Groovy DSL)\nDESCRIPTION: This Groovy DSL code snippet demonstrates the exclusion of all org.jetbrains.kotlin transitive dependencies from an external library within a Gradle build script. It utilizes the exclude directive within the implementation statement. This is vital for projects requiring strict OSGi compliance where standard Kotlin libraries must be omitted.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-osgi.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\\n    implementation('some.group.id:some.library:someversion') {\\n        exclude group: 'org.jetbrains.kotlin'\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable DSL in Kotlin Multiplatform\nDESCRIPTION: Example of using the new executable DSL that replaces Gradle's Application plugin in Kotlin Multiplatform projects. This configuration creates JavaExec tasks and Gradle distributions for different compilations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        @OptIn(ExperimentalKotlinGradlePluginApi::class)\n        binaries {\n            // Configures a JavaExec task named \"runJvm\" and a Gradle distribution for the \"main\" compilation in this target\n            executable {\n                mainClass.set(\"foo.MainKt\")\n            }\n\n            // Configures a JavaExec task named \"runJvmAnother\" and a Gradle distribution for the \"main\" compilation\n            executable(KotlinCompilation.MAIN_COMPILATION_NAME, \"another\") {\n                // Set a different class\n                mainClass.set(\"foo.MainAnotherKt\")\n            }\n\n            // Configures a JavaExec task named \"runJvmTest\" and a Gradle distribution for the \"test\" compilation\n            executable(KotlinCompilation.TEST_COMPILATION_NAME) {\n                mainClass.set(\"foo.MainTestKt\")\n            }\n\n            // Configures a JavaExec task named \"runJvmTestAnother\" and a Gradle distribution for the \"test\" compilation\n            executable(KotlinCompilation.TEST_COMPILATION_NAME, \"another\") {\n                mainClass.set(\"foo.MainAnotherTestKt\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods settings in Kotlin Gradle file\nDESCRIPTION: This Kotlin snippet demonstrates how to configure CocoaPods settings within a `build.gradle.kts` file. It sets the CocoaPods version, summary, homepage, deployment target for iOS, and specifies a dependency on the `SDWebImage` pod.  It also configures the path to the Xcode project's Podfile. This configuration is essential for integrating a Kotlin Multiplatform library into an iOS project using CocoaPods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-xcode.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n   \n        pod(\"SDWebImage\") {\n            version = \"5.20.0\"\n        }\n        podfile = project.file(\"../ios-app/Podfile\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using sortedWith with a Custom Comparator in Kotlin\nDESCRIPTION: Shows how to sort a collection using sortedWith() and a custom Comparator created with compareBy(), sorting strings by their length.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(\"Sorted by length ascending: ${numbers.sortedWith(compareBy { it.length })}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Load Data from API using Kotlin DataFrame\nDESCRIPTION: Defines a function `load` that uses the `DataRow.read()` function to fetch data from the YouTube Data API. It constructs the API URL using the provided path and API key.  The function returns a single row of data.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun load(path: String): AnyRow = DataRow.read(\"https://www.googleapis.com/youtube/v3/$path&key=$apiKey\")\n```\n\n----------------------------------------\n\nTITLE: Using Opt-in Requirements in Client Code\nDESCRIPTION: Shows how to implement interfaces that require opt-in annotations in client code. Demonstrates proper usage of @SubclassOptInRequired annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// Client code\n@SubclassOptInRequired(UnstableApi::class)\ninterface SomeImplementation : CoreLibraryApi\n```\n\n----------------------------------------\n\nTITLE: Adding Click Handler to Video List in Kotlin/JS React\nDESCRIPTION: Implements an onClick handler for list items that displays an alert when a video is clicked.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\np {\n    key = video.id.toString()\n    onClick = {\n        window.alert(\"Clicked $video!\")\n    }\n    +\"${video.speaker}: ${video.title}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Specific Compilation for JVM Target in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure a specific compilation (main) for the JVM target using Kotlin DSL. It accesses the compilation task provider to set the JVM target version to Java 8.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            compileTaskProvider.configure {\n                compilerOptions {\n                    jvmTarget.set(JvmTarget.JVM_1_8)\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring JavaScript Functions with Optional Parameters in external Kotlin Declarations\nDESCRIPTION: Demonstrates defining an external Kotlin function whose default arguments delegate to JavaScript (using definedExternally). This achieves parity with optional parameters in JavaScript, allowing Kotlin callers to omit arguments while relying on JS defaulting. Ensures interop correctness where JS functions provide their own defaults.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal fun myFunWithOptionalArgs(\n    x: Int,\n    y: String = definedExternally,\n    z: String = definedExternally\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies with Gradle Version Catalog (TOML)\nDESCRIPTION: This snippet demonstrates how to define a version variable (`kotlinxCoroutines`) and a library dependency (`kotlinxCoroutines`) within a `libs.versions.toml` file. This approach centralizes dependency management, allowing consistent reuse of versions and libraries across different modules in a Gradle project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[versions]\nkotlinxCoroutines = \"%coroutinesVersion%\"\n\n[libraries]\nkotlinxCoroutines = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"kotlinxCoroutines\" }\n```\n\n----------------------------------------\n\nTITLE: Safe Call Operator Usage Kotlin\nDESCRIPTION: Shows how to use the safe call operator `?.` to access the `length` property of a nullable string. If the string is not `null`, its length is returned; otherwise, `null` is returned.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a nullable string to a variable\n    val a: String? = \"Kotlin\"\n    // Assigns null to a nullable variable\n    val b: String? = null\n    \n    // Checks for nullability and returns length or null\n    println(a?.length)\n    // 6\n    println(b?.length)\n    // null\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Headers in Kotlin Native C Interop\nDESCRIPTION: This snippet demonstrates excluding specific headers from being imported. The `excludeFilter` property removes redundant or problematic headers, preventing their declarations from being included in the bindings to optimize compilation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nexcludeFilter = SomeLibrary/time.h\n```\n\n----------------------------------------\n\nTITLE: Implementing a CrudRepository for Message Data Class in Kotlin\nDESCRIPTION: The `MessageRepository` interface extends `CrudRepository`, specifying `Message` as the entity type and `String` as the ID type. Dependencies include `org.springframework.data.repository.CrudRepository`. This setup provides standard CRUD operations for `Message` objects, requiring an `id` for unique identification and retrieval.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageRepository.kt\npackage demo\n\nimport org.springframework.data.repository.CrudRepository\n\ninterface MessageRepository : CrudRepository<Message, String>\n\n```\n\n----------------------------------------\n\nTITLE: Adding kapt Dependency with Gradle Kotlin DSL - Kotlin\nDESCRIPTION: Demonstrates how to add a kapt dependency in the Gradle `dependencies` block using Kotlin DSL. The `kapt` configuration instructs Gradle to apply the dependency for annotation processing during build.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    kapt(\"groupId:artifactId:version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Custom Getter in Kotlin\nDESCRIPTION: A simplified example showing how property type can be omitted when it can be inferred from the getter's return type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval area get() = this.width * this.height\n```\n\n----------------------------------------\n\nTITLE: Illustrating Java's Invariance Limitation with Producer Interface\nDESCRIPTION: Demonstrates that standard Java generics prevent assigning a `Source<String>` to a `Source<Object>`, even though it would be theoretically safe because `Source` only produces `T`. This highlights the need for wildcards (`? extends Object`) in Java for such cases.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Java\nvoid demo(Source<String> strs) {\n    Source<Object> objects = strs; // !!! Not allowed in Java\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Constants by Name and Listing with valueOf and entries in Kotlin\nDESCRIPTION: This snippet shows the use of built-in methods for retrieving enum constants by name (valueOf) and listing all entries (entries). An enum RGB is defined. In main, the entries property is used to iterate over the colors and valueOf is used to lookup an enum by its string name. These methods are part of the Kotlin standard library in versions 1.9 and later. Inputs are the enum name as a string and entries; outputs are console prints of the names and the single constant. valueOf throws an exception if the name does not match any constant.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class RGB { RED, GREEN, BLUE }\n\nfun main() {\n    for (color in RGB.entries) println(color.toString()) // prints RED, GREEN, BLUE\n    println(\"The first color is: ${RGB.valueOf(\\\"RED\\\")}\") // prints \"The first color is: RED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Static Buildpack for Kotlin/JS Project\nDESCRIPTION: This JSON configuration specifies the root directory for static content in a Heroku deployment of a Kotlin/JS project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": \"build/distributions\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Type Alias for a Functional Type in Kotlin\nDESCRIPTION: This code defines a type alias 'IntPredicate' for a functional type that takes an integer and returns a Boolean. It shows how to assign a lambda to the alias and call it in 'main'. Dependencies include a compatible Kotlin version; inputs are integers, and outputs are Boolean values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias IntPredicate = (i: Int) -> Boolean\n\nval isEven: IntPredicate = { it % 2 == 0 }\n\nfun main() {\n   println(\"Is 7 even? - ${isEven(7)}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Chained Null-Safe Calls with let - Kotlin\nDESCRIPTION: Further compresses null safety using chained safe-call operators and the let function. If findOrder() or its customer field is null, processCustomer is not called. This is the idiomatic and concise approach for null-safe, conditional function invocation in Kotlin.\nDependencies: findOrder() must be implemented. Input: Order?. Output: Only runs processCustomer if both order and customer are present.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\nfindOrder()?.customer?.let(::processCustomer)\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler Support for kapt in Maven - XML\nDESCRIPTION: Provides a configuration fragment to enable experimental kapt K2 compiler support in a Maven project's pom.xml. Requires adding the argument `-Xuse-k2-kapt` inside the kapt plugin configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n   ...\n   <args>\n      <arg>-Xuse-k2-kapt</arg>\n   </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Handling Maven Dependencies in Kotlin Scripts\nDESCRIPTION: Implementation of the configureMavenDepsOnAnnotations function, which processes annotations to resolve and add Maven dependencies to the script compilation configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Handler that reconfigures the compilation on the fly\nfun configureMavenDepsOnAnnotations(context: ScriptConfigurationRefinementContext): ResultWithDiagnostics<ScriptCompilationConfiguration> {\n    val annotations = context.collectedData?.get(ScriptCollectedData.collectedAnnotations)?.takeIf { it.isNotEmpty() }\n        ?: return context.compilationConfiguration.asSuccess()\n    return runBlocking {\n        resolver.resolveFromScriptSourceAnnotations(annotations)\n    }.onSuccess {\n        context.compilationConfiguration.with { \n            dependencies.append(JvmDependency(it))\n        }.asSuccess()\n    }\n}\n\nprivate val resolver = CompoundDependenciesResolver(FileSystemDependenciesResolver(), MavenDependenciesResolver())\n```\n\n----------------------------------------\n\nTITLE: Apply Power-assert Plugin (Groovy)\nDESCRIPTION: This code snippet demonstrates how to apply the Power-assert plugin in a Groovy build.gradle file. It requires the Kotlin Gradle plugin to be set up.  The snippet adds the `id 'org.jetbrains.kotlin.plugin.power-assert'` plugin with a specified version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// build.gradle\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '2.0.0'\n    id 'org.jetbrains.kotlin.plugin.power-assert' version '2.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing package.json in Kotlin Gradle Build Script\nDESCRIPTION: This snippet demonstrates how to add custom fields to the package.json file generated for a Kotlin/JS project using the Kotlin Gradle DSL. It shows how to add a custom 'hello' field with nested properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js {\n        compilations[\"main\"].packageJson {\n            customField(\"hello\", mapOf(\"one\" to 1, \"two\" to 2))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/Wasm target with Node.js in Kotlin\nDESCRIPTION: This Kotlin code snippet configures a Kotlin/Wasm target using the `wasmWasi` block and specifies the Node.js execution environment.  It also calls `binaries.executable()` to instruct the compiler to emit executable files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    wasmWasi {\n        nodejs()\n        binaries.executable()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component with Coroutine Scope in Kotlin/JS\nDESCRIPTION: This code snippet shows how to initialize a React functional component with a coroutine scope and use the useEffectOnce hook for data fetching.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval mainScope = MainScope()\n\nval App = FC<Props> {\n    var currentVideo: Video? by useState(null)\n    var unwatchedVideos: List<Video> by useState(emptyList())\n    var watchedVideos: List<Video> by useState(emptyList())\n\n    useEffectOnce {\n        mainScope.launch {\n            unwatchedVideos = fetchVideos()\n        }\n    }\n\n// . . .\n```\n\n----------------------------------------\n\nTITLE: Using intersect() and subtract() Operations in Kotlin\nDESCRIPTION: Shows how to find the intersection between collections using intersect() and remove elements using subtract(). Both functions can be used in infix form to perform set operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/set-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = setOf(\"one\", \"two\", \"three\")\n\n    // same output\n    println(numbers intersect setOf(\"two\", \"one\"))\n    // [one, two]\n    println(numbers subtract setOf(\"three\", \"four\"))\n    // [one, two]\n    println(numbers subtract setOf(\"four\", \"three\"))\n    // [one, two]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Zipping Elements in Kotlin\nDESCRIPTION: Demonstrates zipping elements from two collections in Kotlin using the zip() function. It shows how Kotlin simplifies this operation compared to Java.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val colors = listOf(\"red\", \"brown\")\n    val animals = listOf(\"fox\", \"bear\", \"wolf\")\n\n    println(colors.zip(animals) { color, animal -> \n        \"The ${animal.replaceFirstChar { it.uppercase() }} is $color\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler with Language Version 2.0 in Gradle\nDESCRIPTION: This snippet shows how to enable the Kotlin K2 compiler by setting language version to 2.0 in a Gradle build file. This is the recommended way to enable K2 over the deprecated -Xuse-k2 option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   sourceSets.all {\n       languageSettings {\n           languageVersion = \"2.0\"\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Parent Node Using Reflection in Kotlin\nDESCRIPTION: Implements a generic extension for traversing a tree and finding a parent node of a specified type using reflection. Accepts a 'Class<T>' parameter and returns the first matching ancestor or null, using 'isInstance' for runtime type checking. Suppresses unchecked cast warning as type safety is ensured by the logic.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> TreeNode.findParentOfType(clazz: Class<T>): T? {\n    var p = parent\n    while (p != null && !clazz.isInstance(p)) {\n        p = p.parent\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return p as T?\n}\n```\n\n----------------------------------------\n\nTITLE: Define Column Reference for View Count\nDESCRIPTION: Defines a column reference `view` for the `Int` type, which allows for simplified access to the `viewCount` column in subsequent data analysis operations. This enhances readability and reduces the need to specify the column name repeatedly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval view by column<Int>()\n```\n\n----------------------------------------\n\nTITLE: Configuring compiler options for a specific compilation (Kotlin DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for the main Kotlin compilation using the Kotlin DSL. It demonstrates how to configure options within a compilation's `compileTaskProvider`. Requires Gradle Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        compilations.named(KotlinCompilation.MAIN_COMPILATION_NAME) {\n            compileTaskProvider.configure {\n                // Configures the 'main' compilation:\n                compilerOptions {\n                    allWarningsAsErrors.set(true)\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enum Entries Property Example\nDESCRIPTION: This code demonstrates the new 'entries' property for Enum classes, a more performant alternative to the 'values()' function. It returns a pre-allocated immutable list of enum constants instead of an array.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Color(val colorName: String, val rgb: String) {\n    RED(\"Red\", \"#FF0000\"),\n    ORANGE(\"Orange\", \"#FF7F00\"),\n    YELLOW(\"Yellow\", \"#FFFF00\")\n}\n\n@OptIn(ExperimentalStdlibApi::class)\nfun findByRgb(rgb: String): Color? = Color.entries.find { it.rgb == rgb }\n```\n\n----------------------------------------\n\nTITLE: Importing DataFrame and Kandy Libraries using %use in Kotlin\nDESCRIPTION: This code snippet demonstrates how to import the Kotlin DataFrame and Kandy libraries into a Kotlin Notebook using the `%use` statement. `%useLatestDescriptors` ensures that the newest versions of the libraries are used. This is followed by importing `dataframe` and `kandy` libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-add-dependencies.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Ensures that the latest available library versions are used\n%useLatestDescriptors\n\n// Imports the Kotlin DataFrame library\n%use dataframe\n\n// Imports the Kotlin Kandy library\n%use kandy\n```\n\n----------------------------------------\n\nTITLE: Syntax Variations for KDoc Tags\nDESCRIPTION: This example illustrates two equivalent syntaxes for using the @param tag in KDoc comments. It shows how to specify a parameter description either directly or by enclosing the parameter name in brackets. This snippet is not dependent on any particular setup.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-doc.md#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n@param name description.\\n@param[name] description.\n```\n\n----------------------------------------\n\nTITLE: Converting to Double for Fractional Division Results in Kotlin\nDESCRIPTION: This snippet demonstrates how to obtain a division result with the fractional part intact by explicitly converting one of the operands to a floating-point type (Double).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val x = 5 / 2.toDouble()\n    println(x == 2.5)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transitive Export in Groovy DSL\nDESCRIPTION: Shows how to enable transitive export for dependencies in Groovy DSL, which causes the declarations of all transitive dependencies to be included in the framework API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nbinaries {\n    framework {\n        export project(':dependency')\n        // Export transitively.\n        transitiveExport = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Name in withKotlin Ant Task - XML\nDESCRIPTION: This brief XML snippet shows the use of the moduleName attribute in the withKotlin Ant task. Setting moduleName explicitly names the compiled module, which can assist with multi-module build setups. The snippet should be placed inside a javac or kotlinc task as needed. Requires kotlin-ant.jar.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<withKotlin moduleName=\\\"myModule\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Smart casts with inline functions in Kotlin\nDESCRIPTION: Illustrates how Kotlin's smart cast feature works with inline functions, allowing for type-safe operations on captured variables within lambda functions passed to inline functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Processor {\n    fun process()\n}\n\ninline fun inlineAction(f: () -> Unit) = f()\n\nfun nextProcessor(): Processor? = null\n\nfun runProcessor(): Processor? {\n    var processor: Processor? = null\n    inlineAction {\n        // The compiler knows that processor is a local variable and inlineAction()\n        // is an inline function, so references to processor can't be leaked.\n        // Therefore, it's safe to smart-cast processor.\n      \n        // If processor isn't null, processor is smart-cast\n        if (processor != null) {\n            // The compiler knows that processor isn't null, so no safe call \n            // is needed\n            processor.process()\n        }\n\n        processor = nextProcessor()\n    }\n\n    return processor\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sealed and Data Classes in Kotlin 1.1\nDESCRIPTION: Demonstrates the improved sealed and data classes in Kotlin 1.1, where sealed class subclasses can be defined at the top level and data classes can extend other classes. The example shows a hierarchy of expression classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nsealed class Expr\n\ndata class Const(val number: Double) : Expr()\ndata class Sum(val e1: Expr, val e2: Expr) : Expr()\nobject NotANumber : Expr()\n\nfun eval(expr: Expr): Double = when (expr) {\n    is Const -> expr.number\n    is Sum -> eval(expr.e1) + eval(expr.e2)\n    NotANumber -> Double.NaN\n}\nval e = eval(Sum(Const(1.0), Const(2.0)))\n//sampleEnd\n\nfun main(args: Array<String>) {\n    println(\"e is $e\") // 3.0\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Function Requiring Generic Type Information (Kotlin)\nDESCRIPTION: This snippet shows how to create a generic function that requires the generic type information using `reified`. This allows accessing the type information at runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <reified T: Any> Gson.fromJson(json: JsonElement): T = this.fromJson(json, T::class.java)\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options at the target level (Kotlin DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for the JVM target using the Kotlin DSL.  This setting applies as a default to all compilations within the JVM target, unless overridden at the compilation unit level. Requires Gradle Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        // Configures all compilations of the JVM target\n        compilerOptions {\n            allWarningsAsErrors.set(true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bound Property Reference Kotlin\nDESCRIPTION: This example shows how to create a bound property reference in Kotlin. It creates a string and then creates a bound property reference to the `length` property of the string. The `get()` method is then called on the bound reference to retrieve the value of the length property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val prop = \"abc\"::length\n    println(prop.get())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Regex Matches using Regex Class in Kotlin\nDESCRIPTION: Uses Kotlin's `Regex` class, initialized with a multiline string (`\"\"\"...\"\"\"`) for easier regex definition, to find and replace all matches of the pattern (`\\w*\\d+\\w*`) in the input string with 'xxx' using the `replace` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val regex = Regex(\"\"\"\\w*\\d+\\w*\"\"\") // multiline string\n    val input = \"login: Pokemon5, password: 1q2w3e4r5t\"\n    val replacementResult = regex.replace(input, replacement = \"xxx\")\n    println(\"Initial input: '$input'\")\n    println(\"Anonymized input: '$replacementResult'\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Inline Class in Kotlin\nDESCRIPTION: Demonstrates the fundamental syntax for declaring an inline class in Kotlin using the `value` modifier. The class `Password` wraps a `String` value, aiming to provide type safety without runtime allocation overhead.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue class Password(private val s: String)\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Properties name and ordinal in Kotlin\nDESCRIPTION: This snippet demonstrates how to access the built-in properties name and ordinal for enum constants in Kotlin. The enum RGB is defined, and in main, the name and ordinal values for the constant RED are printed. No external dependencies are required. Inputs are enum constants; outputs are their string name and zero-based position within the enum definition.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class RGB { RED, GREEN, BLUE }\n\nfun main() {\n    //sampleStart\n    println(RGB.RED.name)    // prints RED\n    println(RGB.RED.ordinal) // prints 0\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gradle Build File (Groovy DSL)\nDESCRIPTION: Configures the Gradle build file using Groovy DSL to generate a framework for iOS ARM64 architecture. It sets up the Kotlin multiplatform plugin, defines the repository, and configures the binary output as a framework with the specified base name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    iosArm64(\"native\") {\n        binaries {\n            framework {\n                baseName = \"Demo\"\n            }\n        }\n    }\n}\n\nwrapper {\n    gradleVersion = \"%gradleVersion%\"\n    distributionType = \"ALL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Pod Libraries in Kotlin Code\nDESCRIPTION: Shows how to import multiple Pod libraries in Kotlin code, including locally stored Pods and subspecs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport cocoapods.pod_dependency.*\nimport cocoapods.subspec_dependency.*\nimport cocoapods.SDWebImage.*\n```\n\n----------------------------------------\n\nTITLE: Adding Processor Dependency (Groovy)\nDESCRIPTION: This snippet shows how to add a dependency on a processor, specifically Dagger, in a Groovy-based `build.gradle` file. It includes both `implementation` and `ksp` dependencies, ensuring the processor is available at compile time and for KSP symbol processing. The Dagger version should be updated to the desired version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation 'com.google.dagger:dagger-compiler:2.51.1'\n    ksp 'com.google.dagger:dagger-compiler:2.51.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Compact Null Check Using Safe-Call and Elvis Operator - Kotlin\nDESCRIPTION: Uses Kotlin's safe-call operator (?.) in combination with the Elvis operator (?:) to return the string's length if not null or zero otherwise. This idiomatically reduces verbosity and combines null check with action and default value. No additional dependencies are required.\nDependencies: None. Input: a: String? (nullable). Output: Int (length if not null; 0 otherwise).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\nfun stringLength(a: String?): Int = a?.length ?: 0\n```\n\n----------------------------------------\n\nTITLE: Using getOrNull() to Avoid IndexOutOfBoundsException\nDESCRIPTION: This code shows how to use the `getOrNull()` function as a safer alternative to avoid `IndexOutOfBoundsException` when accessing list elements. It will return null if the index is out of range, instead of throwing an exception.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval myList = listOf(1, 2, 3)\n// Returns null, instead of IndexOutOfBoundsException\nval element = myList.getOrNull(3)\nprintln(\"Element at index 3: $element\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Finite Sequence with generateSequence() in Kotlin\nDESCRIPTION: Demonstrates how to create a finite sequence using generateSequence() by providing a function that returns null after the last desired element.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val oddNumbersLessThan10 = generateSequence(1) { if (it < 8) it + 2 else null }\n    println(oddNumbersLessThan10.count())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over a Numerical Range with a for Loop in Kotlin\nDESCRIPTION: This snippet shows a basic `for` loop iterating through a numerical range from 1 to 5 (inclusive) using the `..` operator. Each number in the range is printed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    for (x in 1..5) {\n        print(x)\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-local Return in forEach Inline Function in Kotlin\nDESCRIPTION: Demonstrates non-local return from inside a lambda used with Kotlin's 'forEach', which is only possible because 'forEach' is inlined. The lambda can use 'return' to exit the surrounding function, commonly used in search/predicate loops. Expects an input list of integers and returns true if zero is found.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun hasZeros(ints: List<Int>): Boolean {\n    ints.forEach {\n        if (it == 0) return true // returns from hasZeros\n    }\n    return false\n}\n```\n\n----------------------------------------\n\nTITLE: Duration ISO String Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to convert a Duration object into an ISO-8601 compatible string using the toIsoString() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration.Companion.seconds\n\nfun main() {\n//sampleStart\n    println(86420.seconds.toIsoString()) // PT24H0M20S\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Compilation Task (Kotlin)\nDESCRIPTION: Shows how to set the language version to Kotlin 2.1 in a Gradle project using Kotlin DSL. This is required to enable Java synthetic property references.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks\n    .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()\n    .configureEach {\n        compilerOptions\n            .languageVersion\n            .set(\n                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_1\n            )\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrent Video Fetching using Kotlin Coroutines\nDESCRIPTION: This snippet demonstrates how to fetch multiple videos concurrently using Kotlin coroutines and the async functionality.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun fetchVideos(): List<Video> = coroutineScope {\n    (1..25).map { id ->\n        async {\n            fetchVideo(id)\n        }\n    }.awaitAll()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements by Position - Kotlin Collections - Kotlin\nDESCRIPTION: Demonstrates retrieving elements at specific positions from Set and SortedSet collections in Kotlin using elementAt(). Shows the difference in ordering between LinkedHashSet and SortedSet. No external dependencies are required; works with the Kotlin standard library on version 1.3 or later. Inputs are the index to retrieve, outputs are the element at that index, with possible unpredictability in returned value for Sets where order is not guaranteed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = linkedSetOf(\"one\", \"two\", \"three\", \"four\", \"five\")\\n    println(numbers.elementAt(3))    \\n\\n    val numbersSortedSet = sortedSetOf(\"one\", \"two\", \"three\", \"four\")\\n    println(numbersSortedSet.elementAt(0)) // elements are stored in the ascending order\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Dollar Sign in Multiline String Kotlin\nDESCRIPTION: This snippet demonstrates how to include a literal dollar sign `$` in a multiline string using the `${'$'}` syntax. This is necessary because `$` is used to denote string templates, and this escaping mechanism is needed to use a raw dollar sign.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval price = \"\"\"\n${'$'}_9.99\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Default Property Values\nDESCRIPTION: Illustrates how to assign default values to properties declared in the primary constructor. If no value is provided during instantiation, the default value is used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(val firstName: String, val lastName: String, var isEmployed: Boolean = true)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Podspec Repository Dependency in Kotlin Gradle Build File\nDESCRIPTION: Configures a Kotlin project to use a Pod library from a custom Podspec repository using the url() function inside the specRepos block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n\n        specRepos {\n            url(\"https://github.com/Kotlin/kotlin-cocoapods-spec.git\")\n        }\n        pod(\"example\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Letters with String Extension Function in Kotlin/Native\nDESCRIPTION: Complete implementation that defines a String extension function to count distinct characters and enhances the main function to display both total and unique letter counts in a name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.countDistinctCharacters() = lowercase().toList().distinct().count()\n\nfun main() {\n    // Read the input value.\n    println(\"Hello, enter your name:\")\n    val name = readln()\n    // Count the letters in the name.\n    name.replace(\" \", \"\").let {\n        println(\"Your name contains ${it.length} letters\")\n        // Print the number of unique letters.\n        println(\"Your name contains ${it.countDistinctCharacters()} unique letters\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Kotlin/Wasm WASI Template Repository\nDESCRIPTION: Command to clone the official Kotlin/Wasm WASI template repository from GitHub, which serves as the starting point for building WASI-compatible Kotlin/Wasm applications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Kotlin/kotlin-wasm-wasi-template.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Expected Interface and Factory Function\nDESCRIPTION: Shows how to define an Identity interface with expected factory function in common code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect fun buildIdentity(): Identity\n\ninterface Identity {\n    val userName: String\n    val processID: Long\n}\n```\n\n----------------------------------------\n\nTITLE: Using the is Operator within Boolean Expressions for Smart Casting in Kotlin\nDESCRIPTION: This snippet shows the `is` operator used within a complex boolean condition (`obj is String && obj.length > 0`). Because of smart casting and the short-circuiting behavior of `&&`, the `obj.length` property access is safe only if `obj is String` evaluates to true. The function returns the length only if the object is a non-empty string, otherwise it returns null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun getStringLength(obj: Any): Int? {\n    // `obj` is automatically cast to `String` on the right-hand side of `&&`\n    if (obj is String && obj.length > 0) {\n        return obj.length\n    }\n\n    return null\n}\n//sampleEnd\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"Getting the length of '$obj'. Result: ${getStringLength(obj) ?: \"Error: The object is not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(\"\")\n    printLength(1000)\n}\n```\n\n----------------------------------------\n\nTITLE: Filter DataFrame by Column Value in Kotlin\nDESCRIPTION: This code filters the `moviesDf` DataFrame to include only movies where the 'genres' column is equal to 'Action'. The resulting DataFrame is stored in the `actionMoviesDf` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval actionMoviesDf = moviesDf.filter { genres.equals(\"Action\") }\n```\n\n----------------------------------------\n\nTITLE: Configuring Suppress Warnings Option on Compilation Task with Gradle Kotlin DSL\nDESCRIPTION: This Kotlin code configures the 'suppressWarnings' option for a specific Kotlin compilation task (e.g., 'compileKotlin') using the 'KotlinCompilationTask' API in the Gradle Kotlin DSL. The task is referenced from the 'tasks' collection, and 'suppressWarnings' is set to true, which prevents the compiler from emitting warnings for this task. It requires importing the appropriate 'KotlinCompilationTask' class in the build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\nval compileKotlin: KotlinCompilationTask<*> by tasks\n\ncompileKotlin.compilerOptions.suppressWarnings.set(true)\n```\n\n----------------------------------------\n\nTITLE: Throwing NoSuchElementException in Kotlin\nDESCRIPTION: This code snippet demonstrates how a NoSuchElementException is thrown when attempting to access the first element of an empty list using the `first()` function in Kotlin. The `first()` function throws an exception when the collection is empty.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval emptyList = listOf<Int>()\nval firstElement = emptyList.first()  // throws NoSuchElementException\n```\n\n----------------------------------------\n\nTITLE: Kotlin Modifier Order\nDESCRIPTION: This example demonstrates the recommended order of modifiers in a Kotlin declaration. It also shows the placement of annotations before modifiers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n@Named(\"Foo\")\nprivate val foo: Foo\n```\n\n----------------------------------------\n\nTITLE: Calling a Function - Kotlin\nDESCRIPTION: Shows the standard way to invoke a function and store its result. No dependencies required. Intended for illustrating typical function call syntax with a sample function; input and output types should match the defined function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = double(2)\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Lists in Kotlin\nDESCRIPTION: Creates two lists of Video objects representing watched and unwatched videos.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval unwatchedVideos = listOf(\n    Video(1, \"Opening Keynote\", \"Andrey Breslav\", \"https://youtu.be/PsaFVLr8t4E\"),\n    Video(2, \"Dissecting the stdlib\", \"Huyen Tue Dao\", \"https://youtu.be/Fzt_9I733Yg\"),\n    Video(3, \"Kotlin and Spring Boot\", \"Nicolas Frankel\", \"https://youtu.be/pSiZVAeReeg\")\n)\n\nval watchedVideos = listOf(\n    Video(4, \"Creating Internal DSLs in Kotlin\", \"Venkat Subramaniam\", \"https://youtu.be/JzTeAM8N1-o\")\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Using Elvis Operator - Kotlin\nDESCRIPTION: Leverages Kotlin's Elvis operator (?:) to assign a default value if findOrder() returns null. Offers a concise, one-liner alternative to verbose null checks. Used to ensure the order variable is always initialized with a non-null value.\nDependencies: findOrder(), Order and Customer classes. Output: val order is non-null Order instance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\\nval order = findOrder() ?: Order(Customer(\\\"Antonio\\\"))\n```\n\n----------------------------------------\n\nTITLE: Disabling Kotlin Daemon Fallback Strategy (Kotlin DSL)\nDESCRIPTION: This snippet demonstrates how to disable the Kotlin daemon fallback strategy using the Kotlin DSL within the `build.gradle.kts` file. It targets the `compileKotlin` task and sets the `useDaemonFallbackStrategy` property to `false`.  This will cause the build to fail if the Kotlin daemon fails, preventing a potentially problematic fallback to an in-process or out-of-process compilation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks {\n    compileKotlin {\n        useDaemonFallbackStrategy.set(false)\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings after a Character using indexOf/substring in Java\nDESCRIPTION: Illustrates extracting a substring in Java by first finding the index of a delimiter character ('?') using `indexOf()` and then calling `substring()` with the index incremented by one to get the portion of the string after the delimiter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Java\nString input = \"What is the answer to the Ultimate Question of Life, the Universe, and Everything? 42\";\nString answer = input.substring(input.indexOf(\"?\") + 1);\nSystem.out.println(answer);\n```\n\n----------------------------------------\n\nTITLE: Declaring Lambda Expressions with Type Inference in Kotlin\nDESCRIPTION: Defines a lambda for summing two integers without explicit type annotations for the function type, allowing Kotlin to infer the types. Demonstrates a more concise way to declare simple lambdas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval sum = { x: Int, y: Int -> x + y }\n```\n\n----------------------------------------\n\nTITLE: Reacting to Kotlin Plugin Application Using KotlinBasePlugin Interface - Groovy\nDESCRIPTION: This Groovy DSL snippet registers an action to be executed whenever any Kotlin Gradle plugin is applied, by reacting to the KotlinBasePlugin interface. It is used for cross-Kotlin-plugin configuration, such as setting up common options regardless of the specific Kotlin platform plugin in use. The org.jetbrains.kotlin.gradle.plugin.KotlinBasePlugin class must be imported.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_28\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.KotlinBasePlugin\n\n// ...\n\nproject.plugins.withType(KotlinBasePlugin.class) {\n    // Configure your action here\n}\n```\n\n----------------------------------------\n\nTITLE: Converting standard input to different data types in Kotlin\nDESCRIPTION: Shows how to convert string input to different data types like integers, doubles, and booleans using conversion functions. These functions convert the input string to the appropriate data type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/read-standard-input.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Converts the input from a string to an integer value. For example: 12\nval myNumber = readln().toInt()\nprintln(myNumber)\n// 12\n\n// Converts the input from a string to a double value. For example: 345 \nval myDouble = readln().toDouble()\nprintln(myDouble)\n// 345.0\n\n// Converts the input from a string to a boolean value. For example: true\nval myBoolean = readln().toBoolean()\nprintln(myBoolean)\n// true\n```\n\n----------------------------------------\n\nTITLE: Enable K2 compiler in Maven\nDESCRIPTION: This snippet demonstrates how to enable and test the Kotlin K2 compiler by updating the `<project/>` section of the `pom.xml` file and setting the `kotlin.compiler.languageVersion` property to `2.0`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <kotlin.compiler.languageVersion>2.0</kotlin.compiler.languageVersion>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transitive Export in Kotlin DSL\nDESCRIPTION: Shows how to enable transitive export for dependencies in Kotlin DSL, which causes the declarations of all transitive dependencies to be included in the framework API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries {\n    framework {\n        export(project(\":dependency\"))\n        // Export transitively.\n        transitiveExport = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Guard Conditions in When Expression Kotlin\nDESCRIPTION: Demonstrates how to use guard conditions within a `when` expression to add more specific conditions to branches. It shows the use of `if` to combine primary and secondary conditions. The code checks the type of `animal` and its `mouseHunter` property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface Animal {\n    data class Cat(val mouseHunter: Boolean) : Animal\n    data class Dog(val breed: String) : Animal\n}\n\nfun feedAnimal(animal: Animal) {\n    when (animal) {\n        // Branch with only primary condition. Calls `feedDog()` when `animal` is `Dog`\n        is Animal.Dog -> feedDog()\n        // Branch with both primary and guard conditions. Calls `feedCat()` when `animal` is `Cat` and not `mouseHunter`\n        is Animal.Cat if !animal.mouseHunter -> feedCat()\n        // Prints \"Unknown animal\" if none of the above conditions match\n        else -> println(\"Unknown animal\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Inline Class in Kotlin\nDESCRIPTION: Shows how to use an inline class. The compiler optimizes the runtime representation, removing constructor calls and improving performance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ninline class Name(val s: String)\n//sampleStart\nfun main() {\n    // In the next line no constructor call happens, and\n    // at the runtime 'name' contains just string \"Kotlin\"\n    val name = Name(\"Kotlin\")\n    println(name.s) \n}\n//sampleEnd\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency to a Custom Configuration - Kotlin - Kotlin\nDESCRIPTION: This snippet shows how to add the Kotlin Gradle Plugin as a dependency to the previously defined custom configuration using the Kotlin DSL. It assumes the custom configuration exists and %kotlinVersion% is substituted at runtime. Dependencies: configuration from earlier snippet. Input: plugin coordinates. Output: custom configuration dependency set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    customConfiguration(\"org.jetbrains.kotlin:kotlin-gradle-plugin:%kotlinVersion%\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using anonymous functions for local returns in Kotlin\nDESCRIPTION: Demonstrates using anonymous functions as an alternative to labeled lambda returns. A return statement in an anonymous function will return from that function itself, not the outer function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach(fun(value: Int) {\n        if (value == 3) return  // local return to the caller of the anonymous function - the forEach loop\n        print(value)\n    })\n    print(\" done with anonymous function\")\n}\n\nfun main() {\n    foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Kotlin Stdlib Version Alignment\nDESCRIPTION: Shows how to disable the automatic version alignment of kotlin-stdlib-jdk7 and kotlin-stdlib-jdk8 with kotlin-stdlib using a Gradle property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.stdlib.jdk.variants.version.alignment=false\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Inlined Functional Parameters in Kotlin\nDESCRIPTION: This example shows how to use default values for inlined functional parameters in Kotlin 1.2. It defines an extension function that transforms items in an iterable with a default transformation that calls toString().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <E> Iterable<E>.strings(transform: (E) -> String = { it.toString() }) =\n    map { transform(it) }\n\nval defaultStrings = listOf(1, 2, 3).strings()\nval customStrings = listOf(1, 2, 3).strings { \"($it)\" } \n\nfun main(args: Array<String>) {\n    println(\"defaultStrings = $defaultStrings\")\n    println(\"customStrings = $customStrings\")\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Duration Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to convert a Duration to a whole number of another DurationUnit, using inWholeNanoseconds, inWholeMicroseconds, inWholeSeconds, inWholeMinutes, inWholeHours and inWholeDays.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.Duration.Companion.minutes\n\nfun main() {\n//sampleStart\n    val thirtyMinutes: Duration = 30.minutes\n    println(thirtyMinutes.inWholeSeconds)\n    // 1800\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Suppressed Annotation Names in Kotlin\nDESCRIPTION: This function collects names from 'Suppress' annotations within a Kotlin file by filtering the annotations by type and extracting the arguments as a sequence of strings. It specifically looks for 'Suppress' annotations qualified as 'kotlin.Suppress'. No additional dependencies are required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n// @file:kotlin.Suppress(\"Example1\", \"Example2\")\nfun KSFile.suppressedNames(): Sequence<String> = annotations\n    .filter {\n        it.shortName.asString() == \"Suppress\" &&\n        it.annotationType.resolve().declaration.qualifiedName?.asString() == \"kotlin.Suppress\"\n    }.flatMap {\n        it.arguments.flatMap {\n            (it.value as Array<String>).toList()\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Delegate Creation with provideDelegate in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the provideDelegate operator to customize the instantiation of a property delegate in Kotlin. The provideDelegate function is called at property initialization and can enforce custom checks (such as verifying property names) before returning a delegate. This pattern is useful for property validation, error checking, or logging, and allows binding-time logic to be separated from getValue/setValue calls. It often works in conjunction with standard interfaces like ReadOnlyProperty.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ResourceDelegate<T> : ReadOnlyProperty<MyUI, T> {\n    override fun getValue(thisRef: MyUI, property: KProperty<*>): T { ... }\n}\n    \nclass ResourceLoader<T>(id: ResourceID<T>) {\n    operator fun provideDelegate(\n            thisRef: MyUI,\n            prop: KProperty<*>\n    ): ReadOnlyProperty<MyUI, T> {\n        checkProperty(thisRef, prop.name)\n        // create delegate\n        return ResourceDelegate()\n    }\n\n    private fun checkProperty(thisRef: MyUI, name: String) { ... }\n}\n\nclass MyUI {\n    fun <T> bindResource(id: ResourceID<T>): ResourceLoader<T> { ... }\n\n    val image by bindResource(ResourceID.image_id)\n    val text by bindResource(ResourceID.text_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Search with Comparator in Kotlin Lists\nDESCRIPTION: Illustrates how to use a custom 'Comparator' for binary search in a non-'Comparable' Kotlin list. The list must be sorted per the comparator. Inputs are elements and comparator, and the output is the index of the found element.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\ndata class Product(val name: String, val price: Double)\n\nfun main() {\n//sampleStart\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch(Product(\"AppCode\", 99.0), compareBy<Product> { it.price }.thenBy { it.name }))\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling the K2 Compiler with Command Line Option\nDESCRIPTION: This command line example shows how to enable the Kotlin K2 compiler by setting the language version to 2.0 using the compiler option flag. This is the preferred way over the deprecated -Xuse-k2 option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-language-version 2.0\n```\n\n----------------------------------------\n\nTITLE: Shuffling Sequence Elements in Kotlin\nDESCRIPTION: Shows how to use the shuffled() function with sequences to randomly reorder elements. This example creates a sequence of numbers, maps them, shuffles the results, and takes the first five elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = (0 until 50).asSequence()\n    val result = numbers.map { it * 2 }.shuffled().take(5)\n    println(result.toList()) //five random even numbers below 100\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Applying KSP plugin and Processor (Groovy)\nDESCRIPTION: Snippet demonstrating how to apply the KSP plugin and add a dependency on a processor module (`:test-processor`) in a Groovy `build.gradle` file. It shows how to link a project that needs symbol processing with the processor itself. The `%kspSupportedKotlinVersion%-%kspVersion%` placeholder should be replaced with the actual supported KSP and Kotlin versions. The `%kotlinVersion%` placeholder should be replaced with the Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_13\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'\n}\n\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib:%kotlinVersion%'\n    implementation project(':test-processor')\n    ksp project(':test-processor')\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Daemon JVM Args in Specific Task (Kotlin)\nDESCRIPTION: This snippet shows how to specify JVM arguments for the Kotlin daemon for a specific compilation task using Kotlin DSL. It configures all tasks of type `CompileUsingKotlinDaemon` to use the given JVM arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ntasks.withType<CompileUsingKotlinDaemon>().configureEach {\n    kotlinDaemonJvmArguments.set(listOf(\"-Xmx486m\", \"-Xms256m\", \"-XX:+UseParallelGC\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entries Using remove() Function in Kotlin\nDESCRIPTION: Demonstrates how to remove entries from a mutable map using the remove() function. The function can take either a key or both key and value as arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mutableMapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n    numbersMap.remove(\"one\")\n    println(numbersMap)\n    numbersMap.remove(\"three\", 4)            //doesn't remove anything\n    println(numbersMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting kapt Annotation Processor Timing on CLI - Bash\nDESCRIPTION: A bash command line example that runs kotlinc with multiple kapt plugin and processor options, including dumping annotation processor timing statistics to a file. This setup is for debugging or performance profiling the annotation processing phase.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc -cp $MY_CLASSPATH \\\n-Xplugin=kotlin-annotation-processing-SNAPSHOT.jar -P \\\nplugin:org.jetbrains.kotlin.kapt3:aptMode=stubsAndApt,\\\nplugin:org.jetbrains.kotlin.kapt3:apclasspath=processor/build/libs/processor.jar,\\\nplugin:org.jetbrains.kotlin.kapt3:dumpProcessorTimings=ap-perf-report.file \\\n-Xplugin=$JAVA_HOME/lib/tools.jar \\\n-d cli-tests/out \\\n-no-jdk -no-reflect -no-stdlib -verbose \\\nsample/src/main/\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Compiler Arguments via Gradle Groovy DSL in Groovy\nDESCRIPTION: This Groovy DSL snippet demonstrates configuring extra Kotlin compiler arguments in a Gradle build. It requires access to org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask and uses the tasks.named syntax to apply settings to the compileKotlin task. The snippet sets apiVersion and jvmTarget, and appends various compiler arguments to freeCompilerArgs, both singly and as a list. The input is a Gradle Groovy build script and output is a customized configure block. Limitation: the freeCompilerArgs property may be deprecated in future Kotlin releases.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named('compileKotlin', KotlinCompilationTask) {\n    compilerOptions {\n        // Specifies the version of the Kotlin API and the JVM target\n        apiVersion = KotlinVersion.%gradleLanguageVersion%\n        jvmTarget = JvmTarget.JVM_1_8\n        \n        // Single experimental argument\n        freeCompilerArgs.add(\"-Xexport-kdoc\")\n        \n        // Single additional argument, can be a key-value pair\n        freeCompilerArgs.add(\"-Xno-param-assertions\")\n        \n        // List of arguments\n        freeCompilerArgs.addAll([\"-Xno-receiver-assertions\", \"-Xno-call-assertions\"])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a JVM Inline Class in Kotlin\nDESCRIPTION: Shows how to declare an inline class specifically for the Kotlin/JVM backend. It requires both the `value` modifier and the `@JvmInline` annotation. The class `Password` wraps a `String`, ensuring compatibility and optimization on the JVM.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// For JVM backends\n@JvmInline\nvalue class Password(private val s: String)\n```\n\n----------------------------------------\n\nTITLE: Configure Binary with Groovy DSL\nDESCRIPTION: Configures various aspects of binaries including setting the compilation source, linker options, base name, and entry point in Groovy DSL. It also demonstrates accessing the output file, link task, and run task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nbinaries {\n    executable('my_executable', [RELEASE]) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations.test\n\n        // Custom command line options for the linker.\n        linkerOpts = ['-L/lib/search/path', '-L/another/search/path', '-lmylib']\n\n        // Base name for the output file.\n        baseName = 'foo'\n\n        // Custom entry point function.\n        entryPoint = 'org.example.main'\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework('my_framework' [RELEASE]) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Opt-in (Groovy)\nDESCRIPTION: Shows how to configure opt-in requirements at the module level using Gradle with Groovy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named('compileKotlin', KotlinCompilationTask) {\n    compilerOptions {\n        optIn.add('org.mylibrary.OptInAnnotation')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Set Parameters Groovy DSL\nDESCRIPTION: Illustrates how to configure parameters like `kotlin.srcDir`, `resources.srcDir`, and dependencies for the `commonMain` source set using Groovy DSL. The `commonMain` source set is accessed directly within the `sourceSets` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_17\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            kotlin.srcDir('src')\n            resources.srcDir('res')\n\n            dependencies {\n                /* ... */\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Getting First/Last Element in Kotlin using firstOrNull/lastOrNull\nDESCRIPTION: This Kotlin snippet demonstrates the idiomatic way to safely get the first or last element of a collection using the `firstOrNull()` and `lastOrNull()` extension functions. These functions return the respective element or `null` if the collection is empty. The Elvis operator (`?:`) is used to provide a default value (an empty string `\"\"`) in case the collection is empty and `null` is returned.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nval emails = listOf<String>() // Might be empty\nval theOldestEmail = emails.firstOrNull() ?: \"\"\nval theFreshestEmail = emails.lastOrNull() ?: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Definition File for Library Interop in Kotlin Multiplatform\nDESCRIPTION: Example of a .def file that defines the interface between Kotlin and an Objective-C library called DateTools. It specifies which headers to process and the package name for the generated Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nheaders = DateTools.h\npackage = DateTools\n```\n\n----------------------------------------\n\nTITLE: Inline Property Accessors in Kotlin\nDESCRIPTION: Demonstrates property accessor definitions that utilize the 'inline' modifier on getter or setter methods. Shows how to individually inline the 'get' or 'set' accessor, useful for properties without backing fields. Requires Foo and Bar types and proper assignment implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval foo: Foo\n    inline get() = Foo()\n\nvar bar: Bar\n    get() = ...\n    inline set(v) { ... }\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Precision in Kotlin\nDESCRIPTION: Illustrates the difference in precision between Double and Float types in Kotlin, showing how Float values can be rounded when they exceed 7 decimal digits.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval e = 2.7182818284          // Double\nval eFloat = 2.7182818284f    // Float, actual value is 2.7182817\n```\n\n----------------------------------------\n\nTITLE: Defining a Tail Recursive Function in Kotlin\nDESCRIPTION: This snippet shows how to implement a tail recursive function to calculate a mathematical fixpoint. It requires the `tailrec` modifier and suitable recursion so the compiler can optimize it to an efficient loop. Dependencies include the math library for the cosine calculation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval eps = 1E-10 // \"good enough\", could be 10^-15\n\ntailrec fun findFixPoint(x: Double = 1.0): Double =\n    if (Math.abs(x - Math.cos(x)) < eps) x else findFixPoint(Math.cos(x))\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Collections in Kotlin\nDESCRIPTION: Demonstrates how to create empty collections using functions like emptyList(), requiring type specification for element types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval empty = emptyList<String>()\n```\n\n----------------------------------------\n\nTITLE: Gradle Kotlin dependency for kotlin-reflect\nDESCRIPTION: Adds the `kotlin-reflect` dependency to a Gradle project using Kotlin DSL.  This is required to use Kotlin reflection features on the JVM. The `implementation` configuration is used to include the library in the project's runtime classpath.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(kotlin(\"reflect\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin function composition\nDESCRIPTION: Demonstrates function composition using callable references. The `compose` function combines two functions `f` and `g` into a new function `f(g(x))`. This is applied to `isOdd` and `length` to filter a list of strings based on odd lengths.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <A, B, C> compose(f: (B) -> C, g: (A) -> B): (A) -> C {\n    return { x -> f(g(x)) }\n}\n\nfun isOdd(x: Int) = x % 2 != 0\n\nfun main() {\n//sampleStart\n    fun length(s: String) = s.length\n    \n    val oddLength = compose(::isOdd, ::length)\n    val strings = listOf(\"a\", \"ab\", \"abc\")\n    \n    println(strings.filter(oddLength))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinCompilationTask Compiler Options for Custom Targets (Kotlin DSL)\nDESCRIPTION: This code sample configures compiler options for a specific compilation task using the 'KotlinCompilationTask' API (not limited to JVM or multiplatform) in a Gradle build script. It sets the 'apiVersion' to 'KOTLIN_2_0' for the named task 'compileKotlin', demonstrating the use of strongly typed task configuration. Requires the correct import of 'KotlinCompilationTask' and is intended for scenarios where you target platforms outside JVM/Android. The configuration is performed in the Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named(\"compileKotlin\", org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask::class.java) {\n    compilerOptions {\n        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using return as part of a larger expression in Kotlin\nDESCRIPTION: This example demonstrates using the return expression as part of a larger expression using the Elvis operator. If person.name is null, the function will return immediately.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval s = person.name ?: return\n```\n\n----------------------------------------\n\nTITLE: Implementing an Actual Annotation with Typealias in Kotlin JVM\nDESCRIPTION: Shows how to provide a JVM-specific implementation of the XmlSerializable annotation by using a typealias to an existing JAXB annotation. This allows reusing existing platform-specific annotation types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport javax.xml.bind.annotation.XmlRootElement\n\nactual typealias XmlSerializable = XmlRootElement\n```\n\n----------------------------------------\n\nTITLE: Type Inference in Arithmetic Operations in Kotlin\nDESCRIPTION: Demonstrates how Kotlin infers the resulting type in arithmetic operations involving different number types, automatically handling necessary conversions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val l = 1L + 3       // Long + Int => Long\n    println(l is Long)   // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Complete build.gradle.kts file\nDESCRIPTION: This is a complete `build.gradle.kts` file that includes the Kotlin JVM plugin, sets the group and version, configures the Maven Central repository, adds the kotlin-test dependency, and configures the test task to use the JUnit platform.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\"\n}\n\ngroup = \"org.example\"\nversion = \"1.0-SNAPSHOT\"\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testImplementation(kotlin(\"test\"))\n}\n\ntasks.test {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring NPM Dependency with Gradle DSL - Kotlin\nDESCRIPTION: This snippet demonstrates how to declare an npm dependency (here, 'is-sorted' version 1.0.5) within the Gradle build file for a Kotlin/JS project. The 'implementation(npm(...))' function specifies the npm package and version to include. This enables the Kotlin/JS project to use JavaScript packages from npm via Gradle. Dependencies in the build file are resolved as part of the build process; ensure that the Gradle Kotlin/JS plugin is applied.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/using-packages-from-npm.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    // ...\n    implementation(npm(\"is-sorted\", \"1.0.5\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Interface Definition for Kotlin Object\nDESCRIPTION: Defines an Objective-C interface that maps to a Kotlin object. Includes attributes for Swift name mapping and unavailability of certain methods. Shows how Kotlin objects are represented as Objective-C interfaces, with a shared instance and properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\n__attribute__((objc_subclassing_restricted))\n__attribute__((swift_name(\"Object\")))\n@interface DemoObject : DemoBase\n+ (instancetype)alloc __attribute__((unavailable));\n+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));\n+ (instancetype)object __attribute__((swift_name(\"init()\")));\n@property (class, readonly, getter=shared) DemoObject *shared __attribute__((swift_name(\"shared\")));\n@property (readonly) NSString *field __attribute__((swift_name(\"field\")));\n@end\n```\n\n----------------------------------------\n\nTITLE: Converting Kotlin Array to List or Set\nDESCRIPTION: Shows how to convert a Kotlin `Array` containing duplicate elements to a `List` or a `Set` using the `.toList()` and `.toSet()` extension functions. `toList()` preserves all elements including duplicates, while `toSet()` creates a collection of unique elements. Requires the Kotlin standard library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val simpleArray = arrayOf(\"a\", \"b\", \"c\", \"c\")\n\n    // Converts to a Set\n    println(simpleArray.toSet())\n    // [a, b, c]\n\n    // Converts to a List\n    println(simpleArray.toList())\n    // [a, b, c, c]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Wrap Chained Calls\nDESCRIPTION: Demonstrates how to wrap chained calls, putting the `.` or `?.` operator on the next line with a single indent.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nval anchor = owner\n    ?.firstChild!!\n    .siblings(forward = true)\n    .dropWhile { it is PsiComment || it is PsiWhiteSpace }\n```\n\n----------------------------------------\n\nTITLE: Counting Elements in a List with count() in Kotlin\nDESCRIPTION: Shows how to use the count() extension function to get the number of items in a list. This is equivalent to the size property in many other languages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    val readOnlyShapes = listOf(\"triangle\", \"square\", \"circle\")\n    println(\"This list has ${readOnlyShapes.count()} items\")\n    // This list has 3 items\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating with Index Using withIndex Kotlin\nDESCRIPTION: Demonstrates using the `withIndex` function to iterate through an array and access both the index and value of each element. The loop prints the index and value of each element.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val array = arrayOf(\"a\", \"b\", \"c\")\n//sampleStart\n    for ((index, value) in array.withIndex()) {\n        println(\"the element at $index is $value\")\n    }\n    // the element at 0 is a\n    // the element at 1 is b\n    // the element at 2 is c\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Kotlin/Native Library in a Program\nDESCRIPTION: Demonstrates how to import and use functionality from a Kotlin/Native library in a Kotlin program.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinizer.*\n\nfun main(args: Array<String>) {\n    println(\"Hello, ${\"world\".kotlinized}!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Usage of Java Interface (Incorrect)\nDESCRIPTION: This Kotlin code demonstrates the issue in older Kotlin versions where the nullability of the Java int array was not correctly inferred, leading to potential `NullPointerException`s. The expected type should have been `IntArray?`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nval dataService: DataProvider = ...\ndataService.fetchData() // -> IntArray .. IntArray?\n// No error, even though `dataService.fetchData()` might be `null` according to annotations\n// This might result in a NullPointerException\ndataService.fetchData()[0]\n```\n\n----------------------------------------\n\nTITLE: Adding State Management to Video List Component\nDESCRIPTION: Demonstrates using useState hook to manage selected video state in a React component.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval VideoList = FC<VideoListProps> { props ->\n    var selectedVideo: Video? by useState(null)\n\n```\n\n----------------------------------------\n\nTITLE: Calling a Kotlin Suspending Function from Swift\nDESCRIPTION: Demonstration of how to call a Kotlin suspending function from Swift code. The function is called with a completion handler to handle the asynchronous result or error.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nqueryData(id: 17) { result, error in\n   if let e = error {\n       print(\"ERROR: \\(e)\")\n   } else {\n       print(result!)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Class Hierarchy with Inherited DSL Marker\nDESCRIPTION: Definition of HTML tag classes that inherit from the base Tag class. These classes automatically inherit the DSL marker annotation from their parent class, enabling scope control.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HTML() : Tag(\"html\") { ... }\n\nclass Head() : Tag(\"head\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Function Call with Trailing Comma in Kotlin\nDESCRIPTION: This example demonstrates a function call with trailing comma after the last argument. Trailing commas are entirely optional for the call site.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nfun shift(x: Int, y: Int) { /*...*/ }\nshift(\n    25,\n    20, // trailing comma\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval colors = listOf(\n    \"red\",\n    \"green\",\n    \"blue\", // trailing comma\n)\n```\n\n----------------------------------------\n\nTITLE: Function Naming in Kotlin\nDESCRIPTION: Illustrates the camel case naming convention for functions, properties, and local variables in Kotlin, starting with a lowercase letter.  It also shows the exception for factory functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun processDeclarations() { /*...*/ }\nvar declarationCount = 1\n```\n\n----------------------------------------\n\nTITLE: Retrieve Sublist from Kotlin List\nDESCRIPTION: This snippet shows how to use 'subList()' to retrieve a part of a list in Kotlin. It requires the Kotlin standard library. Inputs are the starting and ending indices, and the output is a sublist view. Changes to the sublist impact the original list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.subList(3, 6))\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Names Policy with Kotlin Gradle DSL - Kotlin\nDESCRIPTION: This snippet configures the policy for including variable and function names in JavaScript source maps by setting the sourceMapNamesPolicy property with the JsSourceMapNamesPolicy enum. Dependencies are the Kotlin Gradle plugin and the enum value, e.g., SOURCE_MAP_NAMES_POLICY_FQ_NAMES. Controls the granularity of name mapping in source maps for debugging.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\ncompilerOptions.sourceMapNamesPolicy.set(JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating windowed, chunked, and zipWithNext functions in Kotlin\nDESCRIPTION: This snippet showcases the new extension functions windowed, chunked, and zipWithNext for Iterable<T>, Sequence<T>, and CharSequence. It demonstrates how to use these functions for buffering, batch processing, sliding window operations, and processing pairs of subsequent items.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n//sampleStart\n    val items = (1..9).map { it * it }\n\n    val chunkedIntoLists = items.chunked(4)\n    val points3d = items.chunked(3) { (x, y, z) -> Triple(x, y, z) }\n    val windowed = items.windowed(4)\n    val slidingAverage = items.windowed(4) { it.average() }\n    val pairwiseDifferences = items.zipWithNext { a, b -> b - a }\n//sampleEnd\n\n    println(\"items: $items\\n\")\n\n    println(\"chunked into lists: $chunkedIntoLists\")\n    println(\"3D points: $points3d\")\n    println(\"windowed by 4: $windowed\")\n    println(\"sliding average by 4: $slidingAverage\")\n    println(\"pairwise differences: $pairwiseDifferences\")\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming MutableMap in JavaScript\nDESCRIPTION: This JavaScript code showcases how to create a Kotlin `MutableMap` from JavaScript using the `KtMutableMap.fromJsMap` factory, which is generated by the Kotlin compiler when the `MutableMap` type is exported via `@JsExport`. The Javascript Map is converted to a Kotlin `MutableMap` and passed to `consumeMutableMap`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nimport { consumeMutableMap } from \"an-awesome-kotlin-module\"\nimport { KtMutableMap } from \"an-awesome-kotlin-module/kotlin-kotlin-stdlib\"\n\nconsumeMutableMap(\n    KtMutableMap.fromJsMap(new Map([[\"First\", 1], [\"Second\", 2]]))\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Kotlin Implementation\nDESCRIPTION: Final implementation showing all string conversion techniques between Kotlin and C\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-strings-from-c.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.*\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n\n    val str = \"This is a Kotlin string\"\n    pass_string(str.cstr)\n\n    val useMe = return_string()?.toKString() ?: error(\"null pointer returned\")\n    println(useMe)\n\n    val copyFromC = ByteArray(255).usePinned { pinned ->\n        val useMe2 = copy_string(pinned.addressOf(0), pinned.get().size - 1)\n        if (useMe2 != 0) throw Error(\"Failed to read a string from C\")\n        pinned.get().decodeToString()\n    }\n\n    println(copyFromC)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotlin Script Definition Class\nDESCRIPTION: Creation of a Kotlin script definition class using the @KotlinScript annotation. This class serves as a superclass for scripts of this type and specifies the file extension and compilation configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// @KotlinScript annotation marks a script definition class\n@KotlinScript(\n    // File extension for the script type\n    fileExtension = \"scriptwithdeps.kts\",\n    // Compilation configuration for the script type\n    compilationConfiguration = ScriptWithMavenDepsConfiguration::class\n)\nabstract class ScriptWithMavenDeps\n\nobject ScriptWithMavenDepsConfiguration: ScriptCompilationConfiguration()\n```\n\n----------------------------------------\n\nTITLE: Generic Tag Initialization Function in Kotlin DSL\nDESCRIPTION: A generic helper function that initializes any HTML tag element. It applies the initialization function to the tag, adds it to the parent's children collection, and returns the initialized tag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprotected fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {\n    tag.init()\n    children.add(tag)\n    return tag\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML DSL Builder Classes in Kotlin\nDESCRIPTION: A comprehensive implementation of HTML DSL using Kotlin classes and interfaces. The code defines a type-safe builder pattern for constructing HTML documents with nested elements and attributes. It uses extension functions and lambdas with receiver to provide a clean, declarative syntax for HTML generation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.html\n\ninterface Element {\n    fun render(builder: StringBuilder, indent: String)\n}\n\nclass TextElement(val text: String) : Element {\n    override fun render(builder: StringBuilder, indent: String) {\n        builder.append(\"$indent$text\\n\")\n    }\n}\n\n@DslMarker\nannotation class HtmlTagMarker\n\n@HtmlTagMarker\nabstract class Tag(val name: String) : Element {\n    val children = arrayListOf<Element>()\n    val attributes = hashMapOf<String, String>()\n\n    protected fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {\n        tag.init()\n        children.add(tag)\n        return tag\n    }\n\n    override fun render(builder: StringBuilder, indent: String) {\n        builder.append(\"$indent<$name${renderAttributes()}>\\n\")\n        for (c in children) {\n            c.render(builder, indent + \"  \")\n        }\n        builder.append(\"$indent</$name>\\n\")\n    }\n\n    private fun renderAttributes(): String {\n        val builder = StringBuilder()\n        for ((attr, value) in attributes) {\n            builder.append(\" $attr=\\\"$value\\\"\")\n        }\n        return builder.toString()\n    }\n\n    override fun toString(): String {\n        val builder = StringBuilder()\n        render(builder, \"\")\n        return builder.toString()\n    }\n}\n\nabstract class TagWithText(name: String) : Tag(name) {\n    operator fun String.unaryPlus() {\n        children.add(TextElement(this))\n    }\n}\n\nclass HTML : TagWithText(\"html\") {\n    fun head(init: Head.() -> Unit) = initTag(Head(), init)\n\n    fun body(init: Body.() -> Unit) = initTag(Body(), init)\n}\n\nclass Head : TagWithText(\"head\") {\n    fun title(init: Title.() -> Unit) = initTag(Title(), init)\n}\n\nclass Title : TagWithText(\"title\")\n\nabstract class BodyTag(name: String) : TagWithText(name) {\n    fun b(init: B.() -> Unit) = initTag(B(), init)\n    fun p(init: P.() -> Unit) = initTag(P(), init)\n    fun h1(init: H1.() -> Unit) = initTag(H1(), init)\n    fun a(href: String, init: A.() -> Unit) {\n        val a = initTag(A(), init)\n        a.href = href\n    }\n}\n\nclass Body : BodyTag(\"body\")\nclass B : BodyTag(\"b\")\nclass P : BodyTag(\"p\")\nclass H1 : BodyTag(\"h1\")\n\nclass A : BodyTag(\"a\") {\n    var href: String\n        get() = attributes[\"href\"]!!\n        set(value) {\n            attributes[\"href\"] = value\n        }\n}\n\nfun html(init: HTML.() -> Unit): HTML {\n    val html = HTML()\n    html.init()\n    return html\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Parameters with Lambda Arguments - Kotlin\nDESCRIPTION: Explains function call mechanics when the last parameter is a lambda with preceding default-parameter values. Demonstrates three ways to call such functions, utilizing default arguments. Inputs are integers and a function; lambda syntax is shown.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(\n    bar: Int = 0,\n    baz: Int = 1,\n    qux: () -> Unit,\n) { /*...*/ }\n\nfoo(1) { println(\"hello\") }     // Uses the default value baz = 1\nfoo(qux = { println(\"hello\") }) // Uses both default values bar = 0 and baz = 1\nfoo { println(\"hello\") }        // Uses both default values bar = 0 and baz = 1\n```\n\n----------------------------------------\n\nTITLE: Using also in Return Statements in Kotlin\nDESCRIPTION: Demonstrates using the also scope function in a return statement, which is useful for logging or other side effects while preserving the return value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\nfun writeToLog(message: String) {\n    println(\"INFO: $message\")\n}\n\nfun main() {\n    fun getRandomInt(): Int {\n        return Random.nextInt(100).also {\n            writeToLog(\"getRandomInt() generated value $it\")\n        }\n    }\n    \n    val i = getRandomInt()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Executable Binaries in Kotlin/Native\nDESCRIPTION: This snippet demonstrates how to declare executable binaries for a Linux X64 target in a Kotlin/Native project. It creates both debug and release binaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    linuxX64 { // Define your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and parsing multiple input values in Kotlin\nDESCRIPTION: Demonstrates how to read multiple input elements separated by delimiters and convert them to lists of specific data types using split() and map() functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/read-standard-input.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Reads the input, assuming the elements are separated by spaces, and converts them into integers. For example: 1 2 3 \nval numbers = readln().split(' ').map { it.toInt() }\nprintln(numbers)\n//[1, 2, 3] \n\n// Reads the input, assuming the elements are separated by commas, and converts them into doubles. For example: 4,5,6\nval doubles = readln().split(',').map { it.toDouble() }\nprintln(doubles)\n//[4.0, 5.0, 6.0]\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Element Existence - contains, in, containsAll - Kotlin Collections - Kotlin\nDESCRIPTION: Shows how to check the presence of elements in a collection using contains(), in keyword, and containsAll(). Useful for single or multiple element checks. Requires Kotlin standard library 1.3+. Inputs are lists and values to check; outputs are boolean indicating presence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\\n    println(numbers.contains(\"four\"))\\n    println(\"zero\" in numbers)\\n    \\n    println(numbers.containsAll(listOf(\"four\", \"two\")))\\n    println(numbers.containsAll(listOf(\"one\", \"zero\")))\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collections with Mapping Operations in Kotlin\nDESCRIPTION: Shows how to create new collections by transforming elements from existing collections using map and mapIndexed functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart \n    val numbers = setOf(1, 2, 3)\n    println(numbers.map { it * 3 })\n    println(numbers.mapIndexed { idx, value -> value * idx })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Translation of Bounded NotNull Java Class\nDESCRIPTION: This Kotlin code shows the translation of the previous Java code snippet.  The `@NotNull` annotation on the type parameter bound is translated to a non-nullable upper bound in Kotlin, resulting in `T : Number`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BaseWithBound<T : Number> {}\n```\n\n----------------------------------------\n\nTITLE: Using data objects for sealed hierarchies\nDESCRIPTION: This code snippet demonstrates the use of `data object` declarations in a `sealed interface` hierarchy.  It showcases how `data object` provides automatic implementations of `toString()`, `equals()`, and `hashCode()` functions, which is useful for maintaining symmetry with `data class` declarations in sealed hierarchies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface ReadResult\ndata class Number(val number: Int) : ReadResult\ndata class Text(val text: String) : ReadResult\ndata object EndOfFile : ReadResult\n\nfun main() {\n    println(Number(7)) // Number(number=7)\n    println(EndOfFile) // EndOfFile\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Inner Classes in Kotlin\nDESCRIPTION: This example demonstrates how to create anonymous inner class instances in Kotlin using object expressions. This is often used for event listeners and other callback interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/nested-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nwindow.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Stable Suspend Conversions in Kotlin 1.6.0\nDESCRIPTION: Shows how regular functions can be automatically converted to suspending functions in Kotlin 1.6.0, supporting any form of expression as a call argument where a suspending function is expected.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getSuspending(suspending: suspend () -> Unit) {}\n\nfun suspending() {}\n\nfun test(regular: () -> Unit) {\n    getSuspending { }           // OK\n    getSuspending(::suspending) // OK\n    getSuspending(regular)      // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Method Call with Named Arguments (Kotlin)\nDESCRIPTION: This example demonstrates how named arguments are used in Kotlin to resolve potential clashes in method signatures when importing Swift/Objective-C methods.  Due to differences in how Swift/Objective-C argument labels and selector pieces map to Kotlin parameter names, clashing signatures can occur.  Named arguments, like `byMeters = 17`, allow disambiguation in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nplayer.moveTo(LEFT, byMeters = 17)\nplayer.moveTo(UP, byInches = 42)\n```\n\n----------------------------------------\n\nTITLE: Implementing Char Conversion APIs in Kotlin\nDESCRIPTION: New stable APIs for converting between Char and integer values, including code point conversion and digit representation functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Char(code: Int): Char\nfun Char(code: UShort): Char\nval Char.code: Int\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Char.digitToInt(radix: Int): Int\nfun Char.digitToIntOrNull(radix: Int): Int?\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Int.digitToChar(radix: Int): Char\n```\n\n----------------------------------------\n\nTITLE: Scoped Memory Management\nDESCRIPTION: Shows how to use memScoped for automatic memory management when working with C structures\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\nimport platform.posix.*\n\n@OptIn(ExperimentalForeignApi::class)\nval fileSize = memScoped {\n    val statBuf = alloc<stat>()\n    val error = stat(\"/\", statBuf.ptr)\n    statBuf.st_size\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Standard Library Default Dependency in Gradle Properties\nDESCRIPTION: Configuration property to disable the automatic addition of the Kotlin standard library to your project. Add this to your gradle.properties file when you don't need the standard library at all.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_31\n\nLANGUAGE: none\nCODE:\n```\nkotlin.stdlib.default.dependency=false\n```\n\n----------------------------------------\n\nTITLE: Equivalent Code Without Using let Scope Function in Kotlin\nDESCRIPTION: Shows the same functionality as the previous example but without using the let scope function, demonstrating how scope functions make code more concise.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(var name: String, var age: Int, var city: String) {\n    fun moveTo(newCity: String) { city = newCity }\n    fun incrementAge() { age++ }\n}\n\nfun main() {\n    val alice = Person(\"Alice\", 20, \"Amsterdam\")\n    println(alice)\n    alice.moveTo(\"London\")\n    alice.incrementAge()\n    println(alice)\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Indentation Example\nDESCRIPTION: This snippet demonstrates the recommended indentation style in Kotlin, using four spaces instead of tabs. It also shows how to properly place curly braces for control flow statements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nif (elements != null) {\n    for (element in elements) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints in LLDB with Kotlin/Native\nDESCRIPTION: Demonstrates different methods to set breakpoints in LLDB when debugging Kotlin/Native applications, including by function name, file location, memory address, and using regex patterns.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(lldb) b -n kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 4: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n```\n\nLANGUAGE: bash\nCODE:\n```\n(lldb) b -f hello.kt -l 1\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n```\n\nLANGUAGE: bash\nCODE:\n```\n(lldb) b -a 0x00000001000012e4\nBreakpoint 2: address = 0x00000001000012e4\n```\n\nLANGUAGE: bash\nCODE:\n```\n3: regex = 'main\\(', locations = 1\n  3.1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0\n```\n\n----------------------------------------\n\nTITLE: Using Named Capturing Groups in Kotlin Regex\nDESCRIPTION: Shows how to use named capturing groups in regular expressions and retrieve matched group values by name in Kotlin 1.7.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val regex = \"\\\\b(?<city>[A-Za-z\\\\s]+),\\\\s(?<state>[A-Z]{2}):\\\\s(?<areaCode>[0-9]{3})\\\\b\".toRegex()\n    val input = \"Coordinates: Austin, TX: 123\"\n    val match = regex.find(input)!!\n    println(match.groups[\"city\"]?.value) // \"Austin\" — by name\n    println(match.groups[2]?.value) // \"TX\" — by number\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Module System (JPMS) in Gradle Build - Groovy\nDESCRIPTION: This Groovy DSL code configures Gradle for JPMS support, making sure that Java and Kotlin sources are correctly compiled when modules are used. It infers the module path for Gradle <7.0 and patches the javac invocation to include compiled Kotlin classes. The code expects that the java plugin is applied. Replace 'YOUR_MODULE_NAME' in the patch-module argument with your Java module's name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_20\n\nLANGUAGE: groovy\nCODE:\n```\n// Add the following three lines if you use a Gradle version less than 7.0\njava {\n    modularity.inferModulePath = true\n}\n\ntasks.named(\"compileJava\", JavaCompile.class) {\n    options.compilerArgumentProviders.add(new CommandLineArgumentProvider() {\n        @Override\n        Iterable<String> asArguments() {\n            // Provide compiled Kotlin classes to javac – needed for Java/Kotlin mixed sources to work\n            return [\"--patch-module\", \"YOUR_MODULE_NAME=${sourceSets[\\\"main\\\"].output.asPath}\"]\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Null Check with If Conditional Kotlin\nDESCRIPTION: Demonstrates a more complex `if` conditional check for nullability and length of a nullable string. If the string is not `null` and has a length greater than 0, a message is printed; otherwise, an alternative message is printed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a nullable string to a variable\n    val b: String? = \"Kotlin\"\n\n    // Checks for nullability first and then accesses length\n    if (b != null && b.length > 0) {\n        print(\"String of length ${b.length}\")\n        // String of length 6\n    } else {\n        // Provides alternative if the condition is not met\n        print(\"Empty string\")\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Points (Scatter) Chart - Kotlin\nDESCRIPTION: Creates a points (scatter) chart visualizing temperature data for different cities using the Kandy library. It accesses columns from a DataFrame for x-axis (Month), y-axis (Temperature), and color-coding (City). Point sizes are customized, and a chart title is added.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-visualization.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndf.plot {\n    points {\n        // Accesses the DataFrame's columns used for the X and Y axes \n        x(Month) { axis.name = \"Month\" }\n        y(Temperature) { axis.name = \"Temperature\" }\n        // Customizes the point's size\n        size = 5.5\n        // Accesses the DataFrame's column used for categories and sets colors for these categories \n        color(City) {\n            scale = categorical(\"Berlin\" to Color.LIGHT_GREEN, \"Madrid\" to Color.BLACK, \"Caracas\" to Color.YELLOW)\n        }\n    }\n    // Adds a chart heading\n    layout.title = \"Temperature per month\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Global Variable Example\nDESCRIPTION: Defines a global JavaScript variable named 'globalCounter' initialized to 0. This variable is used to demonstrate how to declare external variables in Kotlin that correspond to JavaScript global variables.  It represents a counter that can be accessed and modified from both JavaScript and Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet globalCounter = 0;\n```\n\n----------------------------------------\n\nTITLE: Companion Object Creation Kotlin\nDESCRIPTION: Defines a class with a companion object named 'Factory' that contains a function 'create' to instantiate the class. This allows for factory method implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyClass {\n    companion object Factory {\n        fun create(): MyClass = MyClass()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Debug URL in IntelliJ IDEA\nDESCRIPTION: Specifies the default URL where the Kotlin/JS application is served when run via Gradle development tasks. This URL is required when setting up a 'JavaScript Debug' configuration in IntelliJ IDEA Ultimate to connect the IDE's debugger to the running application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\nhttp://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements as Expressions in Kotlin\nDESCRIPTION: This example demonstrates how to use conditional statements (`if`, `when`) as expressions for conciseness.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_57\n\nLANGUAGE: kotlin\nCODE:\n```\nreturn if (x) foo() else bar()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nreturn when(x) {\n    0 -> \"zero\"\n    else -> \"nonzero\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Kotlin Build Script\nDESCRIPTION: This code snippet shows a basic Gradle Kotlin build script (`build.gradle.kts`) configured for a Kotlin/JVM project. It defines plugins, group, version, repositories (using Maven Central), dependencies (including the Kotlin test library), and configures the test task to use JUnitPlatform.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/get-started-with-jvm-gradle-project.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\" // Kotlin version to use\n}\n\ngroup = \"org.example\" // A company name, for example, `org.jetbrains`\nversion = \"1.0-SNAPSHOT\" // Version to assign to the built artifact\n\nrepositories { // Sources of dependencies. See 1️⃣\n    mavenCentral() // Maven Central Repository. See 2️⃣\n}\n\ndependencies { // All the libraries you want to use. See 3️⃣\n    // Copy dependencies' names after you find them in a repository\n    testImplementation(kotlin(\"test\")) // The Kotlin test library\n}\n\ntasks.test { // See 4️⃣\n    useJUnitPlatform() // JUnitPlatform for tests. See 5️⃣\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Annotation with Meta-Annotations in Kotlin\nDESCRIPTION: Declares a Kotlin annotation `Fancy` and configures its behavior using meta-annotations. `@Target` specifies applicable elements (classes, functions, etc.), `@Retention(AnnotationRetention.SOURCE)` indicates it's only kept in source code, and `@MustBeDocumented` ensures it appears in generated documentation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION,\n        AnnotationTarget.TYPE_PARAMETER, AnnotationTarget.VALUE_PARAMETER, \n        AnnotationTarget.EXPRESSION)\n@Retention(AnnotationRetention.SOURCE)\n@MustBeDocumented\nannotation class Fancy\n```\n\n----------------------------------------\n\nTITLE: Memory Management with NativeHeap\nDESCRIPTION: Demonstrates manual memory allocation and deallocation using nativeHeap\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\n\n@OptIn(kotlinx.cinterop.ExperimentalForeignApi::class)\nfun main() {\n    val size: Long = 0\n    val buffer = nativeHeap.allocArray<ByteVar>(size)\n    nativeHeap.free(buffer)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUID for Apple Devices in Kotlin Multiplatform\nDESCRIPTION: This code snippet demonstrates a function that generates a UUID string using Apple-specific APIs. It's meant to be used in an intermediate source set for Apple platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport platform.Foundation.NSUUID\n\nfun randomUuidString(): String {\n    // You want to access Apple-specific APIs\n    return NSUUID().UUIDString()\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Expression\nDESCRIPTION: Demonstrates declaring anonymous functions with explicit return types in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun(x: Int, y: Int): Int = x + y\n```\n\n----------------------------------------\n\nTITLE: Implementing fold as a Higher-Order Function in Kotlin\nDESCRIPTION: Defines an extension function on Collection that takes an initial value and a combining function, iterating over all elements to update and return an accumulator. Requires knowledge of generics and function types in Kotlin. The combine parameter is a lambda that must accept an accumulator of type R and a collection element of type T; the result is the accumulated value of type R after processing all elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T, R> Collection<T>.fold(\n    initial: R, \n    combine: (acc: R, nextElement: T) -> R\n): R {\n    var accumulator: R = initial\n    for (element: T in this) {\n        accumulator = combine(accumulator, element)\n    }\n    return accumulator\n}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations with Type Inference in Kotlin\nDESCRIPTION: Demonstrates basic arithmetic operations using type inference with an Int variable. Shows various arithmetic operators and augmented assignment operators.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-basic-types.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var customers = 10\n\n    // Some customers leave the queue\n    customers = 8\n\n    customers = customers + 3 // Example of addition: 11\n    customers += 7            // Example of addition: 18\n    customers -= 3            // Example of subtraction: 15\n    customers *= 2            // Example of multiplication: 30\n    customers /= 3            // Example of division: 10\n\n    println(customers) // 10\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Java Toolchain Configuration\nDESCRIPTION: New simplified way of configuring Java toolchain in Kotlin DSL without type cast\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Module in Kotlin\nDESCRIPTION: Demonstrates how to use the `@JsModule` annotation to import the 'users.mjs' module into Kotlin. It declares external declarations for the 'maxUsers' variable and the 'User' class.  The @file:JsModule annotation specifies the module path.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Kotlin\n@file:JsModule(\"./users.mjs\")\n\nexternal val maxUsers: Int\n\nexternal class User : JsAny {\n    constructor(username: String)\n\n    val username: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Assertions in Kotlin\nDESCRIPTION: This code snippet demonstrates how to implement soft assertions in Kotlin. It defines an `assertSoftly` function, an `AssertScope` interface, and an `AssertScopeImpl` class to collect error messages.  The `assertSoftly` function executes a block of code within the context of an `AssertScope`, and if any assertions fail (using the `assert` function), it throws an `AssertionError` containing all the error messages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <R> assertSoftly(block: AssertScope.() -> R): R {\n    val scope = AssertScopeImpl()\n    val result = scope.block()\n    if (scope.errors.isNotEmpty()) {\n        throw AssertionError(scope.errors.joinToString(\"\\n\"))\n    }\n    return result\n}\n\ninterface AssertScope {\n    fun assert(assertion: Boolean, message: (() -> String)? = null)\n}\n\nclass AssertScopeImpl : AssertScope {\n    val errors = mutableListOf<String>()\n    override fun assert(assertion: Boolean, message: (() -> String)?) {\n        if (!assertion) {\n            errors.add(message?.invoke() ?: \"Assertion failed\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter DataFrame rows in Kotlin\nDESCRIPTION: This code filters a DataFrame named 'moviesWithYear' to include only rows where the 'year' column value is greater than or equal to 1996. The filtered DataFrame is stored in the 'moviesNew' variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval moviesNew = moviesWithYear.filter { year >= 1996 }\nmoviesNew\n```\n\n----------------------------------------\n\nTITLE: Kotlin Singleton Definition\nDESCRIPTION: This Kotlin code defines a singleton object 'MyObject' and a companion object within 'MyClass', both having a val named 'x'. These examples illustrate how Kotlin singletons are accessed from Swift.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyObject {\n    val x = \"Some value\"\n}\n\nclass MyClass {\n    companion object {\n        val x = \"Some value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Private Constructor\nDESCRIPTION: Shows how to declare a class with a private constructor to prevent external instantiation. This is useful for implementing singleton patterns or controlling object creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DontCreateMe private constructor() { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Apply Kotlin Multiplatform and CocoaPods Plugins\nDESCRIPTION: This code snippet demonstrates how to apply both the Kotlin Multiplatform and Kotlin CocoaPods Gradle plugins in the `build.gradle.kts` file of a project. It is a crucial step for enabling CocoaPods integration in a Kotlin Multiplatform project. The `%kotlinVersion%` placeholder represents the actual Kotlin version used in the project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n    kotlin(\"native.cocoapods\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin React Component Implementation\nDESCRIPTION: Shows how to create a React functional component using Kotlin with React wrappers. Implements a counter component with state management using hooks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/interoperable.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport react.*\nimport react.dom.*\nimport kotlinx.html.js.onClickFunction\n\nval counter = functionalComponent<Props> {\n   val (count, setCount) = useState(0)\n   button {\n      attrs.onClickFunction = { setCount(count + 1) }\n      +count.toString()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering AssertScope with Power-assert Plugin (Kotlin)\nDESCRIPTION: This code snippet shows how to register the custom `AssertScope.assert()` function with the Power-assert plugin. This registration makes the `assert` function available for enhanced assertion failure messages within the Power-assert framework.  The `functions` list should include the full package name of the `assert` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalKotlinGradlePluginApi::class)\npowerAssert {\n    functions = listOf(\"kotlin.assert\", \"kotlin.test.assert\", \"org.example.AssertScope.assert\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Java Class with Getters\nDESCRIPTION: Defines a simple Java class with private fields and public getter methods. This class is used in subsequent Kotlin code snippets to demonstrate accessing Java properties from Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Konan_DebugPrint for Variable Inspection in Kotlin/Native\nDESCRIPTION: Shows how to use the built-in runtime function Konan_DebugPrint to inspect variables in both LLDB and GDB when debugging Kotlin/Native applications. This approach is useful when custom pretty printers aren't available.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-debugging.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(a:String, b:Int) = a + b\nfun one() = 1\nfun main(arg:Array<String>) {\n  var a_variable = foo(\"(a_variable) one is \", 1)\n  var b_variable = foo(\"(b_variable) two is \", 2)\n  var c_variable = foo(\"(c_variable) two is \", 3)\n  var d_variable = foo(\"(d_variable) two is \", 4)\n  println(a_variable)\n  println(b_variable)\n  println(c_variable)\n  println(d_variable)\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb ./program.kexe -o 'b -f 1.kt -l 9' -o r\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b -f 1.kt -l 9\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 463 at 1.kt:9, address = 0x0000000100000dbf\n(lldb) r\n(a_variable) one is 1\nProcess 80496 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100000dbf program.kexe`kfun:main(kotlin.Array<kotlin.String>) at 1.kt:9\n   6      var c_variable = foo(\"(c_variable) two is \", 3)\n   7      var d_variable = foo(\"(d_variable) two is \", 4)\n   8      println(a_variable)\n-> 9      println(b_variable)\n   10     println(c_variable)\n   11     println(d_variable)\n   12   }\n\nProcess 80496 launched: './program.kexe' (x86_64)\n(lldb) expression -- (int32_t)Konan_DebugPrint(a_variable)\n(a_variable) one is 1(int32_t) $0 = 0\n(lldb)\n```\n\n----------------------------------------\n\nTITLE: Duration String Representation Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to get a string representation of a Duration object with specified DurationUnit and decimal places using the toString() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.Duration.Companion.milliseconds\nimport kotlin.time.DurationUnit\n\nfun main() {\n//sampleStart\n    // Print in seconds with 2 decimal places\n    println(5887.milliseconds.toString(DurationUnit.SECONDS, 2))\n    // 5.89s\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Functions in Kotlin\nDESCRIPTION: This function retrieves all member functions declared within a class declaration using the KSP API. It filters the declarations to only include instances of 'KSFunctionDeclaration', and returns them as a 'Sequence' for efficient processing. No additional dependencies are required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun KSClassDeclaration.getDeclaredFunctions(): Sequence<KSFunctionDeclaration> =\n    declarations.filterIsInstance<KSFunctionDeclaration>()\n```\n\n----------------------------------------\n\nTITLE: Class Definition with Trailing Comma in Kotlin\nDESCRIPTION: This example shows a class definition using a trailing comma after the last property. Using trailing commas improves version control diffs and simplifies adding/reordering elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(\n    val firstName: String,\n    val lastName: String,\n    val age: Int, // trailing comma\n)\n```\n\n----------------------------------------\n\nTITLE: Import Library with %use Statement in Kotlin Notebook\nDESCRIPTION: This code snippet shows how to import a library into a Kotlin Notebook using the `%use` statement. The `libraryName` placeholder should be replaced with the actual name of the library to be imported from the Maven repository. Autocompletion helps find available libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-add-dependencies.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Replace libraryName with the library dependency you want to add\n%use libraryName\n```\n\n----------------------------------------\n\nTITLE: Configuring a Specific Compilation for JVM Target in Groovy\nDESCRIPTION: This snippet demonstrates how to configure a specific compilation (main) for the JVM target using Groovy DSL. It accesses the compilation task provider to set the JVM target version to Java 8.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        compilations.main {\n            compileTaskProvider.configure {\n                compilerOptions {\n                    jvmTarget = JvmTarget.JVM_1_8\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Guard Conditions in When Statement Kotlin\nDESCRIPTION: This snippet demonstrates the correct way of using parentheses when combining multiple boolean expressions in `when` expressions or statements with guard conditions. It's important to enclose combined boolean expressions in parentheses for clarity and correctness.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_60\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (status) {\n    is Status.Ok if (status.info.isEmpty() || status.info.id == null) -> \"no information\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces in Enum Classes in Kotlin\nDESCRIPTION: This snippet demonstrates an enum class implementing two interfaces (BinaryOperator<Int>, IntBinaryOperator), with each enum entry providing its own implementation of the interface's apply method. External Java functions are imported, so a Kotlin/JVM context is required. The sample main function iterates over the enum entries and applies the operation to two integers. Inputs are the integers to operate on and the enum entries; outputs are the computed results of each operation. Limitations include the need for JVM interop and appropriate Kotlin compiler versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.function.BinaryOperator\nimport java.util.function.IntBinaryOperator\n\n//sampleStart\nenum class IntArithmetics : BinaryOperator<Int>, IntBinaryOperator {\n    PLUS {\n        override fun apply(t: Int, u: Int): Int = t + u\n    },\n    TIMES {\n        override fun apply(t: Int, u: Int): Int = t * u\n    };\n    \n    override fun applyAsInt(t: Int, u: Int) = apply(t, u)\n}\n//sampleEnd\n\nfun main() {\n    val a = 13\n    val b = 31\n    for (f in IntArithmetics.entries) {\n        println(\"$f($a, $b) = ${f.apply(a, b)}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Power-assert Plugin (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to configure the Power-assert plugin in a Kotlin build.gradle.kts file. It defines the functions to be transformed and the included source sets. The `powerAssert {}` block is used to specify these configurations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\npowerAssert {\n    functions = listOf(\"kotlin.assert\", \"kotlin.test.assertTrue\", \"kotlin.test.assertEquals\", \"kotlin.test.assertNull\")\n    includedSourceSets = listOf(\"commonMain\", \"jvmMain\", \"jsMain\", \"nativeMain\")\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Messages Longer Than 10 Characters Kotlin\nDESCRIPTION: This Kotlin code filters a list of `Message` objects to include only those where the text length is greater than 10. It uses the `filter()` function with a lambda expression to define the filtering condition. The function returns a new list containing only the filtered messages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/filterMessagesLongerThan10\")\nfun filterMessagesLongerThan10(): List<Message> {\n    val messages = service.findMessages()\n    return messages.filter { it.text.length > 10 }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Copy Action Implementation\nDESCRIPTION: Demonstrates implementing custom copy logic using copyAction parameter. The example shows how to skip hidden files and directories while copying other files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceRoot.copyToRecursively(destinationRoot, followLinks = false) { source, target ->\n    if (source.name.startsWith(\".\")) {\n        CopyActionResult.SKIP_SUBTREE\n    } else {\n        source.copyToIgnoringExistingDirectory(target, followLinks = false)\n        CopyActionResult.CONTINUE\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Functions with Progressions in Kotlin\nDESCRIPTION: Shows how to use collection functions like 'filter' with progressions. This example creates a range from 1 to 10 and filters it to get only even numbers, demonstrating that progressions implement Iterable<N>.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println((1..10).filter { it % 2 == 0 })\n    // [2, 4, 6, 8, 10]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Safe Calls for Properties in Kotlin\nDESCRIPTION: This snippet demonstrates the use of the safe call operator (?.) to safely access properties of potentially null objects in Kotlin. It returns the length of a string or null if the string is null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun lengthString(maybeString: String?): Int? = maybeString?.length\n\nfun main() { \n    val nullString: String? = null\n    println(lengthString(nullString))\n    // null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilations for JVM Target in Kotlin\nDESCRIPTION: This snippet shows how to configure compilations specifically for the JVM target using Kotlin DSL. It sets the JVM target version to Java 8 for all compilations of the JVM target.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        compilerOptions {\n            jvmTarget.set(JvmTarget.JVM_1_8)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Named and Positional Arguments in Function Calls\nDESCRIPTION: Example showing how Kotlin 1.4.0 allows mixing named and positional arguments in function calls, even when a named argument is in the middle of positional arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun reformat(\n    str: String,\n    uppercaseFirstLetter: Boolean = true,\n    wordSeparator: Char = ' '\n) {\n    // ...\n}\n\n//Function call with a named argument in the middle\nreformat(\"This is a String!\", uppercaseFirstLetter = false , '-')\n```\n\n----------------------------------------\n\nTITLE: Preferred Target Creation in Kotlin Multiplatform\nDESCRIPTION: The recommended approach for creating platform targets in Kotlin Multiplatform projects using direct target functions instead of presets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Compose Compiler Plugin to Module (Kotlin)\nDESCRIPTION: This code shows how to apply the Compose compiler plugin to individual modules that use Jetpack Compose. It uses the alias function to reference the plugin from the version catalog.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-migration-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    alias(libs.plugins.compose.compiler)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Gradle Configuration - Groovy - Groovy\nDESCRIPTION: This snippet shows how to register a new configuration named \"customConfiguration\" using the Groovy DSL in a Gradle build script. The block allows for further customization or applying specific settings for that configuration. No special dependencies required. Input: configuration name. Output: configuration available to receive dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nconfigurations.register(\"customConfiguration\") {\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Analyze Actor Data: GroupBy, Count, Sort in Kotlin\nDESCRIPTION: This snippet demonstrates data analysis operations using the Kotlin DataFrame library to find the top 20 most common actor first names. It groups the data by first name, counts the occurrences of each name, sorts the counts in descending order, and takes the top 20 results. Requires an `actorDf` DataFrame.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nval top20ActorNames = actorDf\n    // Groups the data by the first_name column to organize it based on actor first names.\n   .groupBy { first_name }\n\n    // Counts the occurrences of each unique first name, providing a frequency distribution.\n   .count()\n\n    // Sorts the results in descending order of count to identify the most common names.\n   .sortByDesc(\"count\")\n\n    // Selects the top 20 most frequent names for analysis.\n   .take(20)\ntop20ActorNames\n```\n\n----------------------------------------\n\nTITLE: Setting CommonJS Module Kind via Compiler Options in Groovy Gradle\nDESCRIPTION: Configures the Kotlin compiler option `moduleKind` for the `compileKotlinJs` task using the Groovy Gradle DSL. It sets the module kind to `JsModuleKind.MODULE_COMMONJS`, instructing the Kotlin compiler to generate CommonJS compatible modules, typically used when building libraries or targeting Node.js.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncompileKotlinJs.compilerOptions.moduleKind = org.jetbrains.kotlin.gradle.dsl.JsModuleKind.MODULE_COMMONJS\n```\n\n----------------------------------------\n\nTITLE: Trailing Lambda Example with .fold() in Kotlin\nDESCRIPTION: This snippet demonstrates the use of trailing lambdas with the `.fold()` function in Kotlin. The `fold()` function accumulates a value starting with an initial value and applying an operation to each element in a collection. The example shows both the standard way and the trailing lambda syntax. The initial value is 0, and the operation sums each item in the list to the accumulator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    // The initial value is zero. \n    // The operation sums the initial value with every item in the list cumulatively.\n    println(listOf(1, 2, 3).fold(0, { x, item -> x + item })) // 6\n\n    // Alternatively, in the form of a trailing lambda\n    println(listOf(1, 2, 3).fold(0) { x, item -> x + item })  // 6\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Property Declaration Syntax in Kotlin\nDESCRIPTION: The full syntax for declaring a property in Kotlin, showing the optional components including property type, initializer, getter, and setter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nvar <propertyName>[: <PropertyType>] [= <property_initializer>]\n    [<getter>]\n    [<setter>]\n```\n\n----------------------------------------\n\nTITLE: Marking API Elements with Opt-in Requirements\nDESCRIPTION: Demonstrates how to mark specific API elements with opt-in requirement annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n@MyDateTime\nclass DateProvider\n\n@MyDateTime\nfun getTime(): Time {}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Java Record - Java\nDESCRIPTION: This Java code snippet demonstrates how to declare a simple record class named Person, which encapsulates two immutable fields: name (String) and age (int). No explicit constructor, accessor, or equality/hash code methods are required; the Java compiler generates them automatically. Prerequisite: Java 16 or later with records feature enabled. The record’s fields are accessible using their names, and the class is implicitly final and immutable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-records.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Java\npublic record Person (String name, int age) {}\n```\n\n----------------------------------------\n\nTITLE: Collection Mutability in Kotlin\nDESCRIPTION: Demonstrates the use of mutable and immutable collections in Kotlin. The code shows a mutableListOf declaration that allows modifications and a listOf declaration that does not compile when modified.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Kotlin\\nval numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\\nnumbers.add(\"five\")            // This is OK\\nval immutableNumbers = listOf(\"one\", \"two\")\\n//immutableNumbers.add(\"five\") // Compilation error - Unresolved reference: add\n```\n\n----------------------------------------\n\nTITLE: Implementing C String Functions\nDESCRIPTION: Implementation of C functions for string handling in interop.def file\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-strings-from-c.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid pass_string(char* str) {\n}\n\nchar* return_string() {\n  return \"C string\";\n}\n\nint copy_string(char* str, int size) {\n    *str++ = 'C';\n    *str++ = ' ';\n    *str++ = 'K';\n    *str++ = '/';\n    *str++ = 'N';\n    *str++ = 0;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Shared Library Dependency in Groovy\nDESCRIPTION: This snippet shows how to add a dependency on a library shared for all source sets in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation 'com.example:my-library:1.0'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Compiler Execution Strategy (Gradle Property)\nDESCRIPTION: This snippet demonstrates how to set the Kotlin compiler execution strategy using the `kotlin.compiler.execution.strategy` property in the `gradle.properties` file. It allows you to define whether the Kotlin compiler runs inside its own daemon process, the Gradle daemon process, or a separate process for each compilation. This property affects incremental compilation and performance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nkotlin.compiler.execution.strategy=out-of-process\n```\n\n----------------------------------------\n\nTITLE: Executing Node.js Target with Gradle\nDESCRIPTION: Command to run Node.js target for Kotlin/JS using Gradle. It leverages the Gradle wrapper to execute the 'jsNodeDevelopmentRun' task, initiating the process on a Node.js environment. Prerequisite: Node.js and necessary Kotlin/JS environment configurations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/running-kotlin-js.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsNodeDevelopmentRun\n```\n\n----------------------------------------\n\nTITLE: Maven dependency for kotlin-reflect\nDESCRIPTION: Adds the `kotlin-reflect` dependency to a Maven project.  This is required to use Kotlin reflection features on the JVM.  The dependency includes the groupId, artifactId, and version (implicitly managed by Kotlin Maven plugin).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.jetbrains.kotlin</groupId>\n        <artifactId>kotlin-reflect</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Finding Actual Types of Type Aliases in Kotlin\nDESCRIPTION: Finds the actual class or interface declaration that a given type alias points to. It resolves the type of the alias, recursively resolving if it points to another type alias, until it reaches an actual class or interface. No additional dependencies are required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun KSTypeAlias.findActualType(): KSClassDeclaration {\n    val resolvedType = this.type.resolve().declaration\n    return if (resolvedType is KSTypeAlias) {\n        resolvedType.findActualType()\n    } else {\n        resolvedType as KSClassDeclaration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Short When Branches\nDESCRIPTION: Illustrates the formatting of short `when` branches placed on the same line as the condition without braces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (foo) {\n    true -> bar() // good\n    false -> { baz() } // bad\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Contracts in User Functions\nDESCRIPTION: This snippet demonstrates how to declare custom contracts for your own functions. The isNullOrEmpty function uses a contract to inform the compiler that if it returns false, the string is not null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n    return this == null || isEmpty()\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Variable Number of Arguments - Kotlin\nDESCRIPTION: Illustrates calling a function that accepts a variable number of arguments by listing each argument individually. Highlights the practical use of 'vararg' parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval list = asList(1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Using Minus Operator with Maps in Kotlin\nDESCRIPTION: This example shows how to use the minus operator to remove entries from maps based on keys.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n    println(numbersMap - \"one\")\n    println(numbersMap - listOf(\"two\", \"four\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotlin Interface with Default Method in Java\nDESCRIPTION: Presents a Java class `C3PO` that implements the Kotlin `Robot` interface. Assuming `Robot` was compiled with `-Xjvm-default=all`, `C3PO` automatically inherits the default implementation of the `move()` method and only needs to provide an implementation for the abstract `speak()` method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n//Java implementation\npublic class C3PO implements Robot {\n    // move() implementation from Robot is available implicitly\n    @Override\n    public void speak() {\n        System.out.println(\"I beg your pardon, sir\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Typed Array Interoperability Example (Kotlin)\nDESCRIPTION: Demonstrates how to convert between Kotlin's `IntArray` and JavaScript's `Int32Array` using adapter functions. The example shows how to convert a `IntArray` to `Int32Array` and back.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.khronos.webgl.*\n\n    // ...\n\n    val intArray: IntArray = intArrayOf(1, 2, 3)\n    \n    // Uses .toInt32Array() to convert Kotlin IntArray to JavaScript Int32Array\n    val jsInt32Array: Int32Array = intArray.toInt32Array()\n    \n    // Uses toIntArray() to convert JavaScript Int32Array back to Kotlin IntArray\n    val kotlnIntArray: IntArray = jsInt32Array.toIntArray()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Steps in Kotlin Ranges\nDESCRIPTION: Shows how to iterate over ranges with custom step values using the 'step()' function. This example demonstrates stepping by 2 in different range types: closed-ended, open-ended, and reverse order.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (i in 0..8 step 2) print(i)\n    println()\n    // 02468\n    for (i in 0..<8 step 2) print(i)\n    println()\n    // 0246\n    for (i in 8 downTo 0 step 2) print(i)\n    // 86420\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Type Inference for Delegated Properties\nDESCRIPTION: Shows how Kotlin 1.4 correctly infers types for delegated properties, allowing for more concise code without explicit type specifications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.properties.Delegates\n\nfun main() {\n    var prop: String? by Delegates.observable(null) { p, old, new ->\n        println(\"$old → $new\")\n    }\n    prop = \"abc\"\n    prop = \"xyz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing to Inference via Callable References\nDESCRIPTION: Demonstrates how taking callable references to the lambda receiver's members can provide type information for builder inference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val result = buildList {\n        val x: KFunction1<Int, Float> = ::get\n    } // result has the List<Float> type\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Objects by Multiple Criteria in Java using Comparator\nDESCRIPTION: This Java snippet demonstrates sorting a list of `Person` objects based on multiple criteria using the `Comparator` interface and the Streams API. It defines a `Person` class. The `comparePersons` method sorts a list first by name (`Person::getName`) using `Comparator.comparing()` and then by age (`Person::getAge`) using `thenComparingInt()`. The sorted result is collected into a new list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nclass Person implements Comparable<Person> {\n    String name;\n    int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return this.name + \" \" + age;\n    }\n}\n\npublic void comparePersons() {\n    var persons = List.of(new Person(\"Jack\", 35), new Person(\"David\", 30), \n            new Person(\"Jack\", 25));\n    System.out.println(persons.stream().sorted(Comparator\n            .comparing(Person::getName)\n            .thenComparingInt(Person::getAge)).collect(toList()));\n}\n```\n\n----------------------------------------\n\nTITLE: Text Content Addition Operator in Kotlin DSL\nDESCRIPTION: Implementation of the unaryPlus operator function that allows adding text content to HTML tags using the '+' prefix. It wraps the string in a TextElement and adds it to the children collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\noperator fun String.unaryPlus() {\n    children.add(TextElement(this))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JSpecify Nullability in Kotlin\nDESCRIPTION: Example demonstrating how Kotlin interacts with JSpecify annotations from Java, showing how the compiler can detect potential nullability issues when calling Java methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Test.kt\nfun kotlinFun() = with(JavaClass()) {\n  notNullableString().length // OK\n  nullableString().length    // Warning: receiver nullability mismatch\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scripting Dependencies in Gradle (Kotlin DSL)\nDESCRIPTION: Gradle build script snippet for adding Kotlin scripting dependencies to the project. These dependencies provide the necessary APIs for script definition.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-common\")\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-jvm\")\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-dependencies\")\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-dependencies-maven\")\n    // coroutines dependency is required for this particular definition\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\") \n}\n```\n\n----------------------------------------\n\nTITLE: Mutable List Reversal with asReversed in Kotlin\nDESCRIPTION: Demonstrates how changes to a mutable list affect its reversed view created with asReversed() and vice versa.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    val reversedNumbers = numbers.asReversed()\n    println(reversedNumbers)\n    numbers.add(\"five\")\n    println(reversedNumbers)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Null Pointers in Kotlin/Native\nDESCRIPTION: Demonstrates how to safely handle potentially null C pointers using Kotlin's null safety operators\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval path = getenv(\"PATH\")?.toKString() ?: \"\"\n```\n\n----------------------------------------\n\nTITLE: Last Element Calculation in Kotlin Progressions\nDESCRIPTION: Demonstrates how the last element of a progression is calculated based on the step value. For a step of 3, the last element is 7 (not 9) because it's the maximum value not greater than 9 such that (7-1)%3==0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (i in 1..9 step 3) print(i) // the last element is 7\n    // 147\n}\n```\n\n----------------------------------------\n\nTITLE: String Immutability Example Kotlin\nDESCRIPTION: This snippet demonstrates that strings are immutable in Kotlin. It shows that the `uppercase()` function returns a new string object, leaving the original string unchanged. The example highlights that string transformations do not modify the original string, ensuring that the original string's state is preserved.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val str = \"abcd\"\n   \n    // Creates and prints a new String object\n    println(str.uppercase())\n    // ABCD\n   \n    // The original string remains the same\n    println(str) \n    // abcd\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SAM Conversions for Kotlin Interfaces\nDESCRIPTION: Example demonstrating how to define and use a functional interface with the fun modifier and SAM conversion in Kotlin 1.4.0. The code shows defining an IntPredicate interface, creating an instance using a lambda, and checking if a number is even.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface IntPredicate {\n    fun accept(i: Int): Boolean\n}\n\nval isEven = IntPredicate { it % 2 == 0 }\n\nfun main() { \n    println(\"Is 7 even? - ${isEven.accept(7)}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java Scanner in Kotlin\nDESCRIPTION: Shows how to use Java Scanner within Kotlin code, demonstrating interoperability features. Includes examples of reading different data types and proper scanner initialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/standard-input.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports Java Scanner\nimport java.util.Scanner\n\nfun main() {\n    // Initializes the Scanner\n    val scanner = Scanner(System.`in`)\n\n    // Reads a whole string line. For example: \"Hello, Kotlin\"\n    val line = scanner.nextLine()\n    print(line)\n    // Hello, Kotlin\n\n    // Reads a string. For example: \"Hello\"\n    val string = scanner.next()\n    print(string)\n    // Hello\n\n    // Reads a number. For example: 123\n    val num = scanner.nextInt()\n    print(num)\n    // 123\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Delegation with Resource Binding in Kotlin\nDESCRIPTION: Demonstrates property delegation with the provideDelegate operator for resource binding validation. Shows how to intercept property binding and perform validation during instance creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ResourceLoader<T>(id: ResourceID<T>) {\n    operator fun provideDelegate(thisRef: MyUI, prop: KProperty<*>): ReadOnlyProperty<MyUI, T> {\n        checkProperty(thisRef, prop.name)\n        ... // property creation\n    }\n\n    private fun checkProperty(thisRef: MyUI, name: String) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude declarations from DCE in Kotlin/JS with Gradle\nDESCRIPTION: This Groovy code snippet demonstrates how to exclude specific declarations from Dead Code Elimination (DCE) in a Kotlin/JS project using Gradle. The `keep` function is used to specify the fully qualified names of the declarations to be excluded. This ensures that these declarations are retained in the generated JavaScript code, even if they are not directly used in the Kotlin module. Requires the kotlin gradle plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/javascript-dce.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            dceTask {\n                keep(\"myKotlinJSModule.org.example.getName\", \"myKotlinJSModule.org.example.User\" )\n            }\n            binaries.executable()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Enum Definition\nDESCRIPTION: This Kotlin code defines a simple enum class named 'Colors' with three possible values: RED, GREEN, and BLUE. This enum is then used in a Swift example.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nenum class Colors {\n    RED, GREEN, BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Kotlin Multiplatform Configuration with Single JVM Target\nDESCRIPTION: This snippet shows the recommended approach of using a single JVM target in a Kotlin Multiplatform project. It simplifies the configuration by moving shared code to the default source set of the newly created target.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// shared/build.gradle.kts:\nkotlin {\n    jvm()\n    \n    sourceSets {\n        jvmMain {\n            // Copy the configuration of jvmCommonMain here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compare Duration Kotlin\nDESCRIPTION: This Kotlin code snippet illustrates how to compare Duration objects using the comparison operators (<, >).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration.Companion.microseconds\nimport kotlin.time.Duration.Companion.nanoseconds\n\nfun main() {\n//sampleStart\n    println(3000.microseconds < 25000.nanoseconds)\n    // false\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CocoaPods Repository Dependency in Kotlin Gradle Build File\nDESCRIPTION: Configures a Kotlin project to use a Pod library from the CocoaPods repository with version specification and deployment target settings. This example shows how to add the SDWebImage library as a dependency.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n\n        pod(\"SDWebImage\") {\n            version = \"5.20.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using labeled break to exit an outer loop in Kotlin\nDESCRIPTION: Shows how to use a break statement qualified with a label to jump out of an outer loop. This allows breaking out of nested loops to a specific labeled point in the code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nloop@ for (i in 1..100) {\n    for (j in 1..100) {\n        if (...) break@loop\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overloads in Multiplatform Library JVM Kotlin\nDESCRIPTION: This code shows the platform specific overload on JVM of `whichFun` function, receiving an integer. This function will resolve for common code that has access to it, in a project that uses this example library for the JVM target\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// MODULE: JVM\nfun whichFun(x: Int) = println(\"platform function\")\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Elements in Kotlin\nDESCRIPTION: Demonstrates the use of the `.shuffle()` extension function to randomly reorder the elements of a Kotlin `Array` in place. It initializes an array and then shuffles it twice, printing the result each time. Requires the Kotlin standard library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val simpleArray = arrayOf(1, 2, 3)\n\n    // Shuffles elements [3, 2, 1]\n    simpleArray.shuffle()\n    println(simpleArray.joinToString())\n\n    // Shuffles elements again [2, 3, 1]\n    simpleArray.shuffle()\n    println(simpleArray.joinToString())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotlin Maven Plugin\nDESCRIPTION: Basic configuration to enable the Kotlin Maven plugin in your project by adding it to the plugins section.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n    <plugin>\n        <artifactId>kotlin-maven-plugin</artifactId>\n        <groupId>org.jetbrains.kotlin</groupId>\n        <version>%kotlinVersion%</version>\n    </plugin>\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Removing Entries Using minusAssign Operator in Kotlin\nDESCRIPTION: Demonstrates the use of the minusAssign (-=) operator to remove entries from a mutable map by key. The operation is ignored if the key doesn't exist.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mutableMapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n    numbersMap -= \"two\"\n    println(numbersMap)\n    numbersMap -= \"five\"             //doesn't remove anything\n    println(numbersMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Create plain JS objects for interoperability - Kotlin\nDESCRIPTION: Demonstrates how to create plain JavaScript objects for interoperability with Kotlin/JS when using external interfaces. This is necessary because properties of Kotlin objects implementing external interfaces are not enumerable, affecting operations like `JSON.stringify`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal interface AppProps { var name: String }\ndata class AppPropsImpl(override var name: String) : AppProps\nfun main() {\n   val jsApp = js(\"{name: 'App1'}\") as AppProps // plain JS object\n   println(\"Kotlin sees: ${jsApp.name}\") // \\\"App1\\\"\n   println(\"JSON.stringify sees:\" + JSON.stringify(jsApp)) // {\\\"name\\\":\\\"App1\\\"} - OK\n\n   val ktApp = AppPropsImpl(\"App2\") // Kotlin object\n   println(\"Kotlin sees: ${ktApp.name}\") // \\\"App2\\\"\n   // JSON sees only the backing field, not the property\n   println(\"JSON.stringify sees:\" + JSON.stringify(ktApp)) // {\\\"_name_3\\\":\\\"App2\\\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Platform-Specific Dependencies in Kotlin Multiplatform\nDESCRIPTION: Example of adding platform-specific dependencies to a specific source set (jvmMain) in a Kotlin Multiplatform project using Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-advanced-project-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // Targets declaration\n    sourceSets {\n        jvmMain.dependencies {\n            // This is jvmMain's dependencies, so it's OK to add a JVM-specific dependency\n            implementation(\"com.google.guava:guava:32.1.2-jre\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Declaration Example With KDoc\nDESCRIPTION: This snippet displays the Objective-C declaration generated from the Kotlin code with a KDoc comment after enabling the `-Xexport-kdoc` compiler option. The KDoc comments are now present in the Objective-C declaration, providing documentation for the API when used from Swift/Objective-C.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n/**\n * Prints the sum of the arguments.\n * Properly handles the case when the sum doesn't fit in 32-bit integer.\n */\n+ (void)printSumA:(int32_t)a b:(int32_t)b __attribute__((swift_name(\"printSum(a:b:)\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Properties for Performance\nDESCRIPTION: Essential Gradle property configurations to improve build performance including heap size and parallel execution settings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-improving-compilation-time.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\norg.gradle.jvmargs=-Xmx3g\norg.gradle.caching=true\norg.gradle.configuration-cache=true\nkotlin.incremental.native=true\n```\n\n----------------------------------------\n\nTITLE: Custom Margin Trimming for Multiline Strings in Kotlin\nDESCRIPTION: Demonstrates using Kotlin's trimMargin() function with a custom margin prefix to format multiline strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val result = \"\"\"\n       #  Kotlin\n       #  Java\n   \"\"\".trimMargin(\"#\")\n    println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Single Name in Kotlin\nDESCRIPTION: Example of importing a specific class or other declaration from a package. This makes the imported name directly accessible without needing to qualify it with the package name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/packages.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.example.Message // Message is now accessible without qualification\n```\n\n----------------------------------------\n\nTITLE: Named Library Configuration (Kotlin DSL)\nDESCRIPTION: Configuring a named native library using Kotlin DSL syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinArtifacts {\n    Native.Library(\"mylib\") {\n        // Binary configuration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create plain JS objects with js() or jso() - Kotlin\nDESCRIPTION: Shows how to use the `js()` or `jso()` functions to create plain JavaScript objects for better interoperability when dealing with external interfaces and avoid issues related to property enumeration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal interface AppProps { var name: String }\ndata class AppPropsImpl(override var name: String) : AppProps\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Replace this\nval ktApp = AppPropsImpl(\"App1\") // Kotlin object\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n// With this\nval jsApp = js(\"{name: 'App1'}\") as AppProps // or jso {}\n```\n\n----------------------------------------\n\nTITLE: Using Suspending Functions as Supertypes in Kotlin 1.6.0\nDESCRIPTION: Demonstrates the stable implementation of suspending functional types as supertypes in Kotlin 1.6.0, allowing for classes that implement suspending functional interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyClickAction : suspend () -> Unit {\n    override suspend fun invoke() { TODO() }\n}\n\nfun launchOnClick(action: suspend () -> Unit) {}\n```\n\n----------------------------------------\n\nTITLE: Applying KSP plugin and Processor (Kotlin)\nDESCRIPTION: Snippet demonstrating how to apply the KSP plugin and add a dependency on a processor module (`:test-processor`) in a Kotlin `build.gradle.kts` file. It shows how to link a project that needs symbol processing with the processor itself. The `%kspSupportedKotlinVersion%-%kspVersion%` placeholder should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    id(\"com.google.devtools.ksp\") version \"%kspSupportedKotlinVersion%-%kspVersion%\"\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib-jdk8\"))\n    implementation(project(\":test-processor\"))\n    ksp(project(\":test-processor\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Declaration Example\nDESCRIPTION: Illustrates using destructured variables independently. `name` and `age` are extracted from the `person` object and printed. The code demonstrates typical usage after a destructuring declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(name)\nprintln(age)\n```\n\n----------------------------------------\n\nTITLE: Configuring No-arg Plugin with Gradle (Kotlin DSL)\nDESCRIPTION: Shows how to apply the no-arg compiler plugin in a Gradle build script using Kotlin DSL. This enables the generation of zero-argument constructors for annotated classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.noarg\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: ArrayDeque Implementation in Kotlin\nDESCRIPTION: Demonstrates the usage of ArrayDeque class for implementing a double-ended queue with operations like addFirst, addLast, removeFirst, and removeLast.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val deque = ArrayDeque(listOf(1, 2, 3))\n\n    deque.addFirst(0)\n    deque.addLast(4)\n    println(deque) // [0, 1, 2, 3, 4]\n\n    println(deque.first()) // 0\n    println(deque.last()) // 4\n\n    deque.removeFirst()\n    deque.removeLast()\n    println(deque) // [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating with forEach in Kotlin\nDESCRIPTION: This code demonstrates how to iterate through a list using the `forEach()` function in Kotlin. The `forEach()` function takes a lambda expression as an argument, which is executed for each element in the list. In this case, the lambda expression prints each element to the console.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/iterators.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.forEach {\n        println(it)\n        // one\n        // two\n        // three\n        // four\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS Shortcut in Kotlin Gradle DSL\nDESCRIPTION: Demonstrates the `useCommonJs()` shortcut within the `kotlin.js` configuration block in the Kotlin Gradle DSL. This provides a concise way to configure the project to use the CommonJS module system by setting the appropriate compiler options.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js {\n        useCommonJs()\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CommonJS Module Kind via Compiler Options in Kotlin Gradle\nDESCRIPTION: Configures the Kotlin compiler option `moduleKind` for JavaScript IR link tasks using the Kotlin Gradle DSL. It sets the module kind to `JsModuleKind.MODULE_COMMONJS`, instructing the compiler to generate CommonJS compatible modules directly, primarily for library or Node.js targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.targets.js.ir.KotlinJsIrLink> {\n    compilerOptions.moduleKind.set(org.jetbrains.kotlin.gradle.dsl.JsModuleKind.MODULE_COMMONJS)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Default and Abstract Methods on Java Implementation of Kotlin Interface\nDESCRIPTION: Demonstrates creating an instance of the `C3PO` class (which implements the Kotlin `Robot` interface) and calling its methods from Java. It shows invoking `c3po.move()`, which uses the default implementation inherited from the `Robot` interface, and `c3po.speak()`, which uses the implementation provided in the `C3PO` class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nC3PO c3po = new C3PO();\nc3po.move(); // default implementation from the Robot interface\nc3po.speak();\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies for 2D density plot\nDESCRIPTION: This code imports necessary dependencies for creating a 2D density plot in Kotlin Notebook, specifically the `commons-math3` library for multivariate normal distribution calculations. The `@file:DependsOn` annotation ensures that the `commons-math3` library is available in the notebook's classpath.  The multivariate normal distribution is used to generate the random data for the density plot.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n%use lets-plot\n\n@file:DependsOn(\"org.apache.commons:commons-math3:3.6.1\")\nimport org.apache.commons.math3.distribution.MultivariateNormalDistribution\n```\n\n----------------------------------------\n\nTITLE: Constant Naming in Kotlin\nDESCRIPTION: Demonstrates the screaming snake case naming convention for constants (properties marked with `const`, or top-level or object `val` properties with no custom `get` function that hold deeply immutable data) in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nconst val MAX_COUNT = 8\nval USER_NAME_FIELD = \"UserName\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Manifest Integration in Kotlin Multiplatform\nDESCRIPTION: Gradle configuration using the apple-privacy-manifests plugin to bundle the PrivacyInfo.xcprivacy file with Kotlin artifacts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-privacy-manifest.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\")\n    kotlin(\"apple-privacy-manifests\") version \"1.0.0\"\n}\n\nkotlin {\n    privacyManifest {\n        embed(\n            privacyManifest = layout.projectDirectory.file(\"PrivacyInfo.xcprivacy\").asFile,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Service for Repository Operations in Kotlin\nDESCRIPTION: This Kotlin class, `MessageService`, is annotated with `@Service` and utilizes `MessageRepository` to perform CRUD operations. Dependencies include `org.springframework.data.repository.findByIdOrNull` and `org.springframework.stereotype.Service`. Methods provided allow finding all messages, finding a message by ID, and saving a message, leveraging the automatic repository implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageService.kt\npackage demo\n\nimport org.springframework.data.repository.findByIdOrNull\nimport org.springframework.stereotype.Service\n\n@Service\nclass MessageService(private val db: MessageRepository) {\n    fun findMessages(): List<Message> = db.findAll().toList()\n\n    fun findMessageById(id: String): Message? = db.findByIdOrNull(id)\n\n    fun save(message: Message): Message = db.save(message)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating the Sum of Elements in a Numeric Kotlin Array\nDESCRIPTION: Demonstrates using the `.sum()` extension function to calculate the sum of all elements in a numeric Kotlin array (specifically an `Array<Int>`). This function is applicable only to arrays of numeric types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val sumArray = arrayOf(1, 2, 3)\n\n    // Sums array elements\n    println(sumArray.sum())\n    // 6\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Kotlin CocoaPods plugin to root build.gradle.kts\nDESCRIPTION: This code snippet shows how to apply the Kotlin CocoaPods plugin to the root `build.gradle.kts` file.  The `apply false` prevents the plugin from being applied directly to the root project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nalias(libs.plugins.kotlinCocoapods) apply false\n```\n\n----------------------------------------\n\nTITLE: Calling Kotlin Function from JavaScript (Plain Module)\nDESCRIPTION: Demonstrates calling the Kotlin function `foo` from JavaScript when the Kotlin module (`myModule`) is compiled using the `plain` module system. The function is accessed as a property of the module object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nalert(myModule.foo());\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Interop in Groovy Build Script\nDESCRIPTION: Configuration for Kotlin Multiplatform build script using Groovy DSL to set up cinterop with an iOS framework. It includes compiler and linker options to reference the framework.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    iosArm64 {\n        compilations.main {\n            cinterops {\n                DateTools {\n                    // Path to the .def file\n                    definitionFile = project.file(\"src/nativeInterop/cinterop/MyFramework.def\")\n\n                    compilerOpts(\"-framework\", \"MyFramework\", \"-F/path/to/framework/\")\n                }\n                anotherInterop { /* ... */ }\n            }\n        }\n\n        binaries.all {\n            // Tell the linker where the framework is located.\n            linkerOpts(\"-framework\", \"MyFramework\", \"-F/path/to/framework/\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Underscores in Numeric Literals in Kotlin 1.1\nDESCRIPTION: Demonstrates the use of underscores in numeric literals to separate groups of digits for better readability. The example shows decimal, hexadecimal, and binary literals with underscores.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nval oneMillion = 1_000_000\nval hexBytes = 0xFF_EC_DE_5E\nval bytes = 0b11010010_01101001_10010100_10010010\n//sampleEnd\n\nfun main(args: Array<String>) {\n    println(oneMillion)\n    println(hexBytes.toString(16))\n    println(bytes.toString(2))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Concurrent Marking in Kotlin/Native GC\nDESCRIPTION: This snippet shows how to enable experimental concurrent marking in the Kotlin/Native garbage collector by setting a property in the `gradle.properties` file.  This is intended to reduce GC pause times.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nkotlin.native.binary.gc=cms\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Version in Kotlin Gradle DSL - Kotlin\nDESCRIPTION: This snippet sets the language version for Kotlin compilation using the KotlinVersion enum in the Gradle DSL. It requires the Kotlin Gradle plugin and valid KotlinVersion values, with a placeholder indicating a variable for the version. Used in build.gradle(.kts) files, it affects source compatibility for the project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\ncompilerOptions.languageVersion.set(KotlinVersion.%gradleLanguageVersion%)\n```\n\n----------------------------------------\n\nTITLE: Configuring Karma Test Runner in Kotlin/JS (Kotlin DSL)\nDESCRIPTION: This Gradle Kotlin DSL snippet configures the test execution for the JavaScript target (`js`). It specifies using the Karma test runner within the `browser` test task configuration, enabling tests to run in headless Chrome (`useChromeHeadless()`) and Firefox (`useFirefox()`). Note that the specified browsers must be installed on the system where the tests are run.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-running-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            testTask {\n                useKarma {\n                    useChromeHeadless()\n                    useFirefox()\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional When Statement Kotlin\nDESCRIPTION: This code shows an example of using `when` statement for a binary condition, which is discouraged in favor of `if`. The suggestion is to use `when` when there are three or more options.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_59\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (x) {\n    null -> // ...\n    else -> // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Casts with Inline Functions - Kotlin\nDESCRIPTION: This Kotlin code showcases the improved smart casting capabilities of the K2 compiler when dealing with inline functions.  Kotlin 2.0.0 treats inline functions as having an implicit `callsInPlace` contract. This allows the compiler to determine if it's safe to smart-cast variables captured within the inline function's lambda. The example demonstrates how this avoids the need for safe calls.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Processor {\n    fun process()\n}\n\ninline fun inlineAction(f: () -> Unit) = f()\n\nfun nextProcessor(): Processor? = null\n\nfun runProcessor(): Processor? {\n    var processor: Processor? = null\n    inlineAction {\n        // In Kotlin 2.0.0, the compiler knows that processor \n        // is a local variable and inlineAction() is an inline function, so \n        // references to processor can't be leaked. Therefore, it's safe \n        // to smart-cast processor.\n      \n        // If processor isn't null, processor is smart-cast\n        if (processor != null) {\n            // The compiler knows that processor isn't null, so no safe call \n            // is needed\n            processor.process()\n\n            // In Kotlin 1.9.20, you have to perform a safe call:\n            // processor?.process()\n        }\n\n        processor = nextProcessor()\n    }\n\n    return processor\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Overriding Conflicts in Kotlin\nDESCRIPTION: This snippet explains how to resolve method conflicts when a class implements multiple interfaces with the same method names. It shows classes implementing interfaces A and B, handling conflicts in class D by specifying which super implementation to use.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/interfaces.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface A {\n    fun foo() { print(\"A\") }\n    fun bar()\n}\n\ninterface B {\n    fun foo() { print(\"B\") }\n    fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n    override fun bar() { print(\"bar\") }\n}\n\nclass D : A, B {\n    override fun foo() {\n        super<A>.foo()\n        super<B>.foo()\n    }\n\n    override fun bar() {\n        super<B>.bar()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Elapsed Time with Kotlin Time API\nDESCRIPTION: This example demonstrates how to use the Kotlin Time API to measure elapsed time between two time marks. It uses `TimeSource.Monotonic` to obtain time marks and calculates the differences between them, printing the results.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\n\nfun main() {\n    val timeSource = TimeSource.Monotonic\n    val mark1 = timeSource.markNow()\n    Thread.sleep(500) // Sleep 0.5 seconds.\n    val mark2 = timeSource.markNow()\n\n    repeat(4) { n ->\n        val mark3 = timeSource.markNow()\n        val elapsed1 = mark3 - mark1\n        val elapsed2 = mark3 - mark2\n\n        println(\"Measurement 1.${n + 1}: elapsed1=$elapsed1, elapsed2=$elapsed2, diff=${elapsed1 - elapsed2}\")\n    }\n    // It's also possible to compare time marks with each other.\n    println(mark2 > mark1) // This is true, as mark2 was captured later than mark1.\n}\n```\n\n----------------------------------------\n\nTITLE: Qualified This Example Kotlin\nDESCRIPTION: Demonstrates the use of qualified `this` expressions to access the receiver of outer scopes using labels. It showcases accessing `this` within nested classes and extension functions with labels to differentiate between different receivers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/this-expressions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A { // implicit label @A\n    inner class B { // implicit label @B\n        fun Int.foo() { // implicit label @foo\n            val a = this@A // A's this\n            val b = this@B // B's this\n\n            val c = this // foo()'s receiver, an Int\n            val c1 = this@foo // foo()'s receiver, an Int\n\n            val funLit = lambda@ fun String.() {\n                val d = this // funLit's receiver, a String\n            }\n\n            val funLit2 = { s: String ->\n                // foo()'s receiver, since enclosing lambda expression\n                // doesn't have any receiver\n                val d1 = this\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with `emptyArray()` in Kotlin\nDESCRIPTION: Provides examples demonstrating Kotlin's type inference when creating empty arrays using `emptyArray()`. The type can be specified either on the variable declaration or as a type argument to the function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nvar exampleArray = emptyArray<String>()\n\nvar exampleArray: Array<String> = emptyArray()\n```\n\n----------------------------------------\n\nTITLE: Configuring All Kotlin Compilation Tasks Using Gradle Kotlin DSL\nDESCRIPTION: This Kotlin DSL snippet configures all Kotlin compilation tasks named 'compileKotlin' by referencing 'KotlinCompilationTask' in Gradle. The 'compilerOptions' block can be used to set common options for all such tasks. The code requires importing 'KotlinCompilationTask' and works for multiple targets (JVM, JS, multiplatform).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named<KotlinCompilationTask<*>>(\"compileKotlin\").configure {\n    compilerOptions { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a JS Module to a Kotlin Package using @file:JsModule\nDESCRIPTION: Illustrates using the file-level annotation `@file:JsModule(\"extModule\")` to map an entire JavaScript module (`extModule`) to a specific Kotlin package (`ext.jspackage.name`). External declarations (`external fun foo()`, `external class C`) within this Kotlin file correspond to members exported by the `extModule` JavaScript module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JsModule(\"extModule\")\n\npackage ext.jspackage.name\n\nexternal fun foo()\n\nexternal class C\n```\n\n----------------------------------------\n\nTITLE: Create objects with kotlin.js.json() - Kotlin\nDESCRIPTION: Illustrates the usage of `kotlin.js.json()` to create JavaScript objects, ensuring that properties are enumerable and properly handled when interfacing with JavaScript code or libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// or with this\nval jsonApp = kotlin.js.json(Pair(\"name\", \"App1\")) as AppProps\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Kotlin References from C Callbacks\nDESCRIPTION: Shows how to retrieve a Kotlin reference that was previously wrapped with StableRef when receiving it back from C code, typically in a callback function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalForeignApi::class)\nval stableRef = voidPtr.asStableRef<KotlinClass>()\nval kotlinReference = stableRef.get()\n```\n\n----------------------------------------\n\nTITLE: Enabling Enum Entries Property with Kotlin 1.9 Language Version in Gradle (Kotlin DSL)\nDESCRIPTION: This Gradle configuration enables the experimental 'entries' property for Enum classes by setting the language version to 1.9. It requires using the @OptIn annotation with ExperimentalStdlibApi.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks\n    .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()\n    .configureEach {\n        compilerOptions\n            .languageVersion\n            .set(\n                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n            )\n    }\n```\n\n----------------------------------------\n\nTITLE: Resolving Name Conflicts with 'as' Keyword in Kotlin\nDESCRIPTION: Example of using the 'as' keyword to rename imported declarations when there are name conflicts. This allows you to use multiple declarations with the same name from different packages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/packages.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.example.Message // Message is accessible\nimport org.test.Message as TestMessage // TestMessage stands for 'org.test.Message'\n```\n\n----------------------------------------\n\nTITLE: External Interface Declaration (Kotlin)\nDESCRIPTION: Declares an external Kotlin interface 'User' that represents the structure of the JavaScript object returned by the 'createUser' function. It defines the 'name' and 'age' properties as read-only values.  JsAny is the supertype.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal interface User : JsAny {\n    val name: String\n    val age: Int\n}\n\nexternal fun createUser(name: String, age: Int): User\n```\n\n----------------------------------------\n\nTITLE: Defining Opt-in Requirement Annotation in Kotlin\nDESCRIPTION: Shows how to create a custom opt-in requirement annotation and apply it to a class that requires explicit opt-in.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresOptIn(message = \"This API is experimental. It could change in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime\n\n@MyDateTime\n// A class requiring opt-in\nclass DateProvider\n```\n\n----------------------------------------\n\nTITLE: Array Pointer Manipulation\nDESCRIPTION: Shows how to work with C-style arrays using pointer arithmetic in Kotlin\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\n\n@OptIn(ExperimentalForeignApi::class)\nfun shift(ptr: CPointer<ByteVar>, length: Int) {\n    for (index in 0 .. length - 2) {\n        ptr[index] = ptr[index + 1]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Library Dependencies in Groovy\nDESCRIPTION: This snippet shows how to add platform-specific library dependencies in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                // kotlinx.coroutines will be available in all source sets\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n        androidMain {\n            dependencies {}\n        }\n        iosMain {\n            dependencies {\n                // SQLDelight will be available only in the iOS source set, but not in Android or common\n                implementation 'com.squareup.sqldelight:native-driver:%sqlDelightVersion%'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JS Function Usable with and without Modules\nDESCRIPTION: JavaScript code defining a top-level function `topLevelSayHello`. It includes a check (`if (module && module.exports)`) to conditionally export the function using `module.exports` if a CommonJS environment is detected. This pattern allows the function to be used both via a `<script>` tag in non-module environments and as a standard CommonJS module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction topLevelSayHello (name) { alert(\"Hello, \" + name); }\n\nif (module && module.exports) {\n  module.exports = topLevelSayHello;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Guard Conditions with Boolean Operators Kotlin\nDESCRIPTION: Shows how to combine multiple guard conditions within a single branch using boolean operators like `&&` (AND) and `||` (OR). Parentheses are used to clarify the order of operations. Checks if animal is a Cat, not a mouse hunter, and hungry.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (animal) {\n    is Animal.Cat if (!animal.mouseHunter && animal.hungry) -> feedCat()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Kotlin/JS DOM Manipulation Example\nDESCRIPTION: A simple `main` function in `Main.kt` demonstrating basic Kotlin/JS functionality. It imports the `document` object from `kotlinx.browser` and modifies the background color of the HTML page to red, serving as an initial test for the setup.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.browser.document\n\nfun main() {\n    document.bgColor = \"red\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Kotlin/Native C Interoperability Example\nDESCRIPTION: A comprehensive example showing how to work with C unions and structs in Kotlin/Native, demonstrating both by-value and by-reference passing techniques using cValue, memScoped, ptr, and readValue functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.alloc\nimport kotlinx.cinterop.cValue\nimport kotlinx.cinterop.memScoped\nimport kotlinx.cinterop.ptr\nimport kotlinx.cinterop.readValue\nimport kotlinx.cinterop.ExperimentalForeignApi\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n\n    val cUnion = cValue<MyUnion> {\n        b.a = 5\n        b.b = 2.7182\n    }\n\n    memScoped {\n        union_by_value(cUnion)\n        union_by_pointer(cUnion.ptr)\n    }\n\n    memScoped {\n        val cStruct = alloc<MyStruct> {\n            a = 42\n            b = 3.14\n        }\n\n        struct_by_value(cStruct.readValue())\n        struct_by_pointer(cStruct.ptr)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Source Files in Source Map with Kotlin Gradle DSL - Kotlin\nDESCRIPTION: This snippet enables embedding source files into the generated JavaScript source map by setting the sourceMapEmbedSources property of the compilerOptions using the JsSourceMapEmbedMode enum. Dependencies include the Kotlin Gradle plugin; users can select between embedding, never including, or always including source content. This affects debugging and portability of JS output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ncompilerOptions.sourceMapEmbedSources.set(JsSourceMapEmbedMode.SOURCE_MAP_SOURCE_CONTENT_INLINING)\n```\n\n----------------------------------------\n\nTITLE: Creating XCFramework using Gradle\nDESCRIPTION: This shell command runs the Gradle task to create the XCFramework for the shared module in a Kotlin Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :shared:assembleSharedXCFramework\n```\n\n----------------------------------------\n\nTITLE: Using the Open-Ended Range Operator in a When Expression\nDESCRIPTION: Demonstrates how to use the new ..< operator for creating open-ended ranges in a when expression to check which quarter a value belongs to.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (value) {\n    in 0.0..<0.25 -> // First quarter\n    in 0.25..<0.5 -> // Second quarter\n    in 0.5..<0.75 -> // Third quarter\n    in 0.75..1.0 ->  // Last quarter  <- Note closed range here\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving C String Bytes in Kotlin\nDESCRIPTION: Example demonstrating how to receive C string bytes into a Kotlin ByteArray and convert to string\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-strings-from-c.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.addressOf\nimport kotlinx.cinterop.usePinned\n\n@OptIn(ExperimentalForeignApi::class)\nfun sendString() {\n    val buf = ByteArray(255)\n    buf.usePinned { pinned ->\n        if (copy_string(pinned.addressOf(0), buf.size - 1) != 0) {\n            throw Error(\"Failed to read string from C\")\n        }\n    }\n\n    val copiedStringFromC = buf.decodeToString()\n    println(\"Message from C: $copiedStringFromC\")\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning to a Delegated Property and Triggering setValue - Kotlin\nDESCRIPTION: Shows assigning a new value to a delegated property, which invokes the delegate's setValue method. This enables custom logic to be executed during property assignment. Uses the Example class with var p by Delegate().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ne.p = \"NEW\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Integration Test Compilation in Kotlin\nDESCRIPTION: This snippet shows how to create a custom compilation for integration tests in a JVM target using Kotlin DSL. It sets up dependencies and creates a test task to run the integration tests with the proper classpath.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm() {\n        compilations {\n            val main by getting\n            \n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        // Compile against the main compilation's compile classpath and outputs:\n                        implementation(main.compileDependencyFiles + main.output.classesDirs)\n                        implementation(kotlin(\"test-junit\"))\n                        /* ... */\n                    }\n                }\n                \n                // Create a test task to run the tests produced by this compilation:\n                tasks.register<Test>(\"integrationTest\") {\n                    // Run the tests with the classpath containing the compile dependencies (including 'main'),\n                    // runtime dependencies, and the outputs of this compilation:\n                    classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs\n                    \n                    // Run only the tests from this compilation's outputs:\n                    testClassesDirs = output.classesDirs\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Formatters in Kotlin/Wasm Gradle Configuration\nDESCRIPTION: Gradle configuration for enabling custom formatters in Kotlin/Wasm production builds. This compiler option adds support for improved debugging in web browsers when working with Kotlin/Wasm code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nkotlin {\n    wasmJs {\n        // ...\n\n        compilerOptions {\n            freeCompilerArgs.add(\"-Xwasm-debugger-custom-formatters\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ranges and the 'in' Operator in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates the use of ranges for custom comparable types. It defines a `Version` class implementing `Comparable`. A range of `Version` objects is created using the `..` operator (`Version(1, 11)..Version(1, 30)`). The `in` operator provides a concise way to check if a specific `Version` falls within that defined range.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nclass Version(val major: Int, val minor: Int): Comparable<Version> {\n    override fun compareTo(other: Version): Int {\n        if (this.major != other.major) {\n            return this.major - other.major\n        }\n        return this.minor - other.minor\n    }\n}\n\nfun main() {\n    val versionRange = Version(1, 11)..Version(1, 30)\n\n    println(Version(0, 9) in versionRange)\n    println(Version(1, 20) in versionRange)\n}\n```\n\n----------------------------------------\n\nTITLE: Printing a Data Object Declaration\nDESCRIPTION: Shows how marking an object declaration with the `data` modifier affects its string representation. When printed, a `data object` returns its name instead of the name and hash code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata object MyDataObject {\n    val number: Int = 3\n}\n\nfun main() {\n    println(MyDataObject) \n    // MyDataObject\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Kotlin Class Metadata with ASM\nDESCRIPTION: Example showing how to create metadata for a Kotlin class from scratch using KmClass and ASM. The code demonstrates creating a class with a constructor and function, serializing the metadata, and writing it to a .class file using ASM.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports the necessary libraries\nimport kotlin.metadata.*\nimport kotlin.metadata.jvm.*\nimport org.objectweb.asm.*\n\nfun main() {\n    // Creates a KmClass instance\n    val klass = KmClass().apply {\n        name = \"Hello\"\n        visibility = Visibility.PUBLIC\n        constructors += KmConstructor().apply {\n            visibility = Visibility.PUBLIC\n            signature = JvmMethodSignature(\"<init>\", \"()V\")\n        }\n        functions += KmFunction(\"hello\").apply {\n            visibility = Visibility.PUBLIC\n            returnType = KmType().apply {\n                classifier = KmClassifier.Class(\"kotlin/String\")\n            }\n            signature = JvmMethodSignature(\"hello\", \"()Ljava/lang/String;\")\n        }\n    }\n\n    // Serializes a KotlinClassMetadata.Class instance, including the version and flags, into a @kotlin.Metadata annotation\n    val annotationData = KotlinClassMetadata.Class(\n        klass, JvmMetadataVersion.LATEST_STABLE_SUPPORTED, 0\n    ).write()\n\n    // Generates a .class file with ASM\n    val classBytes = ClassWriter(0).apply {\n        visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, \"Hello\", null, \"java/lang/Object\", null)\n        // Writes @kotlin.Metadata instance to the .class file\n        visitAnnotation(\"Lkotlin/Metadata;\", true).apply {\n            visit(\"mv\", annotationData.metadataVersion)\n            visit(\"k\", annotationData.kind)\n            visitArray(\"d1\").apply {\n                annotationData.data1.forEach { visit(null, it) }\n                visitEnd()\n            }\n            visitArray(\"d2\").apply {\n                annotationData.data2.forEach { visit(null, it) }\n                visitEnd()\n            }\n            visitEnd()\n        }\n        visitEnd()\n    }.toByteArray()\n\n    // Writes the generated class file to disk\n    java.io.File(\"Hello.class\").writeBytes(classBytes)\n\n    println(\"Metadata and .class file created successfully.\")\n}\n```\n\n----------------------------------------\n\nTITLE: UUID Operations in Kotlin Standard Library (Kotlin)\nDESCRIPTION: Illustrates the usage of UUID APIs in the Kotlin standard library, including creating UUIDs from byte arrays, ULongs, and strings, as well as accessing UUID bits and generating random UUIDs. This feature is experimental and requires opting-in with the `@ExperimentalUuidApi` annotation or the compiler option `-opt-in=kotlin.uuid.ExperimentalUuidApi`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Constructs a byte array for UUID creation\nval byteArray = byteArrayOf(\n    0x55, 0x0E, 0x84.toByte(), 0x00, 0xE2.toByte(), 0x9B.toByte(), 0x41, 0xD4.toByte(),\n    0xA7.toByte(), 0x16, 0x44, 0x66, 0x55, 0x44, 0x00, 0x00\n)\n\nval uuid1 = Uuid.fromByteArray(byteArray)\nval uuid2 = Uuid.fromULongs(0x550E8400E29B41D4uL, 0xA716446655440000uL)\nval uuid3 = Uuid.parse(\"550e8400-e29b-41d4-a716-446655440000\")\n\nprintln(uuid1)\n// 550e8400-e29b-41d4-a716-446655440000\nprintln(uuid1 == uuid2)\n// true\nprintln(uuid2 == uuid3)\n// true\n\n// Accesses UUID bits\nval version = uuid1.toLongs { mostSignificantBits, _ ->\n    ((mostSignificantBits shr 12) and 0xF).toInt()\n}\nprintln(version)\n// 4\n\n// Generates a random UUID\nval randomUuid = Uuid.random()\n\nprintln(uuid1 == randomUuid)\n// false\n```\n\n----------------------------------------\n\nTITLE: Naive (Incorrect) Signature for Collection.addAll in Java\nDESCRIPTION: Shows a simplified, but incorrect, signature for the `addAll` method in Java's `Collection` interface. This signature would prevent adding elements from a `Collection<String>` to a `Collection<Object>` due to invariance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Java\ninterface Collection<E> ... {\n    void addAll(Collection<E> items);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Kotlin Function from JavaScript (UMD/CommonJS Module)\nDESCRIPTION: Shows how to call the Kotlin function `foo` from JavaScript when the Kotlin module (`myModule`) is compiled using UMD or CommonJS module systems. The module is imported using `require`, and the function is accessed as a property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nalert(require('myModule').foo());\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Message or Default Kotlin\nDESCRIPTION: This Kotlin code snippet retrieves the first `Message` from a collection where the message text is longer than 10 characters. If no message matches the condition, it returns a default `Message` object instead of throwing an exception. It uses the `firstOrNull()` function and the elvis operator `?:`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-collections.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@GetMapping(\"/retrieveFirstMessageLongerThan10\")\nfun firstMessageOrNull(): Message {\n    val messages = service.findMessages()\n    return messages.firstOrNull { \n        it.text.length > 10 \n    } ?: Message(null, \"Default message\")\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Progression in Kotlin\nDESCRIPTION: Demonstrates a simple progression created by iterating over a range. When iterating a range, the progression's first and last elements are the range's endpoints, and the step is 1 by default.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (i in 1..10) print(i)\n    // 12345678910\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing a File Tree with Path.walk() in Kotlin\nDESCRIPTION: Comprehensive example showing how to traverse a file tree, create a temporary directory structure, and clean it using a FileVisitor to delete build directories and class files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(kotlin.io.path.ExperimentalPathApi::class)\nfun traverseFileTree() {\n    val cleanVisitor = fileVisitor {\n        onPreVisitDirectory { directory, _ ->\n            if (directory.name == \"build\") {\n                directory.toFile().deleteRecursively()\n                FileVisitResult.SKIP_SUBTREE\n            } else {\n                FileVisitResult.CONTINUE\n            }\n        }\n\n        onVisitFile { file, _ ->\n            if (file.extension == \"class\") {\n                file.deleteExisting()\n            }\n            FileVisitResult.CONTINUE\n        }\n    }\n\n    val rootDirectory = createTempDirectory(\"Project\")\n\n    rootDirectory.resolve(\"src\").let { srcDirectory ->\n        srcDirectory.createDirectory()\n        srcDirectory.resolve(\"A.kt\").createFile()\n        srcDirectory.resolve(\"A.class\").createFile()\n    }\n\n    rootDirectory.resolve(\"build\").let { buildDirectory ->\n        buildDirectory.createDirectory()\n        buildDirectory.resolve(\"Project.jar\").createFile()\n    }\n\n \n// Use walk function:\n    val directoryStructure = rootDirectory.walk(PathWalkOption.INCLUDE_DIRECTORIES)\n        .map { it.relativeTo(rootDirectory).toString() }\n        .toList().sorted()\n    assertPrints(directoryStructure, \"[, build, build/Project.jar, src, src/A.class, src/A.kt]\")\n\n    rootDirectory.visitFileTree(cleanVisitor)\n\n    val directoryStructureAfterClean = rootDirectory.walk(PathWalkOption.INCLUDE_DIRECTORIES)\n        .map { it.relativeTo(rootDirectory).toString() }\n        .toList().sorted()\n    assertPrints(directoryStructureAfterClean, \"[, src, src/A.kt]\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Gradle Dependencies in Kotlin DSL\nDESCRIPTION: Demonstrates how to declare a standard Gradle dependency within the top-level `dependencies {}` block using Kotlin DSL (`build.gradle.kts`). This example adds a dependency on `org.example.myproject` version `1.1.0` using the `implementation` configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating 2D data points for density plot\nDESCRIPTION: This snippet generates random 2D data points from three multivariate normal distributions. It defines covariance matrices (`cov0`, `cov1`, `cov2`) and means (`means0`, `means1`, `means2`) for each distribution. The `MultivariateNormalDistribution` class from the Apache Commons Math library is used to generate `n` (400) samples for each distribution, which are stored in the `xy0`, `xy1`, and `xy2` variables.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// Defines covariance matrices for three distributions\nval cov0: Array<DoubleArray> = arrayOf(\n    doubleArrayOf(1.0, -.8),\n    doubleArrayOf(-.8, 1.0)\n)\n\nval cov1: Array<DoubleArray> = arrayOf(\n    doubleArrayOf(1.0, .8),\n    doubleArrayOf(.8, 1.0)\n)\n\nval cov2: Array<DoubleArray> = arrayOf(\n    doubleArrayOf(10.0, .1),\n    doubleArrayOf(.1, .1)\n)\n\n// Defines the number of samples\nval n = 400\n\n// Defines means for three distributions\nval means0: DoubleArray = doubleArrayOf(-2.0, 0.0)\nval means1: DoubleArray = doubleArrayOf(2.0, 0.0)\nval means2: DoubleArray = doubleArrayOf(0.0, 1.0)\n\n// Generates random samples from three multivariate normal distributions\nval xy0 = MultivariateNormalDistribution(means0, cov0).sample(n)\nval xy1 = MultivariateNormalDistribution(means1, cov1).sample(n)\nval xy2 = MultivariateNormalDistribution(means2, cov2).sample(n)\n```\n\n----------------------------------------\n\nTITLE: Adding kotlinx Library Dependency in Groovy\nDESCRIPTION: This snippet shows how to add a kotlinx library dependency to the common source set in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using implicit labels with lambda returns in Kotlin\nDESCRIPTION: Shows how to return from a lambda using implicit labels. Implicit labels have the same name as the function to which the lambda is passed, making the code more concise.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach {\n        if (it == 3) return@forEach // local return to the caller of the lambda - the forEach loop\n        print(it)\n    }\n    print(\" done with implicit label\")\n}\n\nfun main() {\n    foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Kotlin Keywords in Java Calls\nDESCRIPTION: Demonstrates how to call Java methods that use Kotlin keywords as identifiers by escaping them with backticks (`) in Kotlin code. This allows calling Java methods named 'is', 'in', 'object' etc.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfoo.`is`(bar)\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Serialization Dependency in Gradle (Groovy)\nDESCRIPTION: This snippet demonstrates how to add the JSON serialization library dependency to a Gradle build script using Groovy syntax. It specifies the implementation dependency for kotlinx-serialization-json.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:%serializationVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Custom Values for Build Scans\nDESCRIPTION: This snippet configures the maximum number of custom values used for build scans using the `kotlin.build.report.build_scan.custom_values_limit` property. This is used to avoid exceeding the limit imposed by Gradle Enterprise.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_21\n\nLANGUAGE: none\nCODE:\n```\nkotlin.build.report.build_scan.custom_values_limit=500\n```\n\n----------------------------------------\n\nTITLE: Using Annotations as Parameters for Other Annotations in Kotlin\nDESCRIPTION: Demonstrates defining an annotation `Deprecated` which takes another annotation `ReplaceWith` as one of its parameters. It shows how to apply `@Deprecated`, providing values for its `message` and `replaceWith` parameters, the latter being an instance of the `ReplaceWith` annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class ReplaceWith(val expression: String)\n\nannotation class Deprecated(\n        val message: String,\n        val replaceWith: ReplaceWith = ReplaceWith(\"\"))\n\n@Deprecated(\"This function is deprecated, use === instead\", ReplaceWith(\"this === other\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Maps with apply() in Kotlin\nDESCRIPTION: Demonstrates how to create and populate a mutable map using the apply() function to avoid excessive memory usage from Pair objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval numbersMap = mutableMapOf<String, String>().apply { this[\"one\"] = \"1\"; this[\"two\"] = \"2\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Inheritance in Kotlin with Abstract Classes and Interfaces\nDESCRIPTION: This code demonstrates how to use Kotlin's inheritance mechanisms with abstract classes and interfaces. It shows a RestaurantCustomer class that extends an abstract Person class and implements the FoodConsumer interface. The example includes abstract methods, interface methods with default implementations, and demonstrates how to call different types of inherited methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/object-oriented.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class Person(val name: String) {\n    abstract fun greet()\n}\n\ninterface FoodConsumer {\n    fun eat()\n    fun pay(amount: Int) = println(\"Delicious! Here's $amount bucks!\")\n}\n\nclass RestaurantCustomer(name: String, val dish: String) : Person(name), FoodConsumer {\n    fun order() = println(\"$dish, please!\")\n    override fun eat() = println(\"*Eats $dish*\")\n    override fun greet() = println(\"It's me, $name.\")\n}\n\nfun main() {\n    val sam = RestaurantCustomer(\"Sam\", \"Mixed salad\")\n    sam.greet() // An implementation of an abstract function\n    sam.order() // A member function\n    sam.eat()   // An implementation of an interface function\n    sam.pay(10) // A default implementation in an interface\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Inline Classes in Kotlin 1.7.20\nDESCRIPTION: Illustrates the new feature of generic inline classes in Kotlin 1.7.20. The example shows how to define a generic inline class and a function that uses it, demonstrating how the compiler maps the type parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class UserId<T>(val value: T)\n\nfun compute(s: UserId<String>) {} // Compiler generates fun compute-<hashcode>(s: Any?)\n```\n\n----------------------------------------\n\nTITLE: Disabling Artifact Use in Compilation Task via Gradle Properties - Kotlin\nDESCRIPTION: This snippet instructs how to disable artifact use in Kotlin compilation tasks to avoid circular dependency errors in Gradle. Set the 'kotlin.build.archivesTaskOutputAsFriendModule' property to false in gradle.properties. This removes the task dependency between compilation and artifact-generating tasks, which can break some internal visibility functionality. The line should be placed in your gradle.properties file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin.build.archivesTaskOutputAsFriendModule=false\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Contained JAR with Maven Assembly Plugin in XML\nDESCRIPTION: This snippet shows how to configure the Maven Assembly Plugin to create a self-contained JAR file containing the code from your module along with its dependencies. It includes setting the main class and specifying the jar-with-dependencies descriptor.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>2.6</version>\n    <executions>\n        <execution>\n            <id>make-assembly</id>\n            <phase>package</phase>\n            <goals> <goal>single</goal> </goals>\n            <configuration>\n                <archive>\n                    <manifest>\n                        <mainClass>${main.class}</mainClass>\n                    </manifest>\n                </archive>\n                <descriptorRefs>\n                    <descriptorRef>jar-with-dependencies</descriptorRef>\n                </descriptorRefs>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in Groovy Build Script\nDESCRIPTION: Groovy build script configuration to enable language version 1.6 and optional progressive mode.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = '1.6'\n            //progressiveMode = true // false by default\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing iOS Framework in Kotlin Code\nDESCRIPTION: Example of how to import an iOS framework in Kotlin code after setting up cinterop. This imports all symbols from the MyFramework package.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport MyFramework.*\n```\n\n----------------------------------------\n\nTITLE: Inline Assert Function Example (Kotlin)\nDESCRIPTION: This code snippet shows an example of the `assert()` function with inlined variables. When combined with the Power-assert plugin, this generates a more explicit and informative message about failures, as all variable states are captured and printed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ComplexExampleTest {\n\n    data class Person(val name: String, val age: Int)\n\n    @Test\n    fun testComplexAssertion() {\n        val person = Person(\"Alice\", 10)\n        assert(person.name.startsWith(\"A\") && person.name.length > 3 && person.age > 20 && person.age < 29)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Custom SQL Query for Messages\nDESCRIPTION: This snippet is a plain SQL query used by the repository to select all messages from the table. It should be used within the repository context enabled by Spring Data JDBC. The input is implicit in the repository query context; output is the selected rows from the messages table mapped to Message objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect * from messages\\n\n```\n\n----------------------------------------\n\nTITLE: Calling Java varargs from Kotlin with spread operator\nDESCRIPTION: This Kotlin code calls a Java method that accepts a variable number of arguments (varargs). The spread operator `*` is used to pass the `IntArray`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nval javaObj = JavaArrayExample()\nval array = intArrayOf(0, 1, 2, 3)\njavaObj.removeIndicesVarArg(*array)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Daemon JVM Args in Kotlin Extension (Groovy)\nDESCRIPTION: This snippet demonstrates how to specify JVM arguments for the Kotlin daemon using the `kotlin` extension in a Groovy DSL Gradle build script. It sets the maximum heap size, initial heap size, and enables parallel garbage collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nkotlin {\n    kotlinDaemonJvmArgs = [\"-Xmx486m\", \"-Xms256m\", \"-XX:+UseParallelGC\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking index within array bounds\nDESCRIPTION: This Kotlin code checks if an index is within the bounds of the array, showing that `in`-checks have no overhead.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nif (i in array.indices) { // same as (i >= 0 && i < array.size)\n    print(array[i])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Source Set in Kotlin Multiplatform\nDESCRIPTION: Demonstrates how to create a custom intermediate source set named 'jvmAndJs' for sharing code between JVM and JS targets in a Kotlin Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-advanced-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    js()\n    linuxX64()\n\n    sourceSets {\n        // Create a source set named \"jvmAndJs\"\n        val jvmAndJsMain by creating {\n            // …\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Dependencies in SourceSets - Groovy\nDESCRIPTION: Adding Android-specific dependencies to the androidMain source set in a Kotlin Multiplatform project using Groovy DSL. This isolates Android dependencies to the relevant source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-android-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nsourceSets {\n    androidMain {\n        dependencies {\n            implementation 'com.example.android:app-magic:12.3'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class Header - Long Supertype List\nDESCRIPTION: This shows how to format a class with a very long list of supertypes by adding a line break after the colon and aligning all supertype names horizontally.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFavouriteVeryLongClassHolder :\n    MyLongHolder<MyFavouriteVeryLongClass>(),\n    SomeOtherInterface,\n    AndAnotherOne {\n\n    fun foo() { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Maven Plugin Compiler Options in XML\nDESCRIPTION: This XML snippet shows how to specify additional compiler options and arguments for the Kotlin Maven Plugin. It includes examples of disabling warnings and enabling strict mode for JSR-305 annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.jetbrains.kotlin</groupId>\n    <artifactId>kotlin-maven-plugin</artifactId>\n    <version>${kotlin.version}</version>\n    <extensions>true</extensions> <!-- If you want to enable automatic addition of executions to your build -->\n    <executions>...</executions>\n    <configuration>\n        <nowarn>true</nowarn>  <!-- Disable warnings -->\n        <args>\n            <arg>-Xjsr305=strict</arg> <!-- Enable strict mode for JSR-305 annotations -->\n            ...\n        </args>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Random Shuffling of Collections in Kotlin\nDESCRIPTION: Shows how to randomly shuffle the elements of a collection using the shuffled() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n     val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n     println(numbers.shuffled())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Swift Class with Deinitializer for Thread Tracking\nDESCRIPTION: Defines a Swift class with initializer and deinitializer that print the current thread, used to demonstrate how deinitialization thread behavior works when objects cross Kotlin/Swift boundaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nclass SwiftExample {\n    init() {\n        print(\"init on \\(Thread.current)\")\n    }\n\n    deinit {\n        print(\"deinit on \\(Thread.current)\")\n    }\n}\n\nfunc test() {\n    KotlinExample().action(arg: SwiftExample())\n}\n```\n\n----------------------------------------\n\nTITLE: Read data from JSON file in Kotlin DataFrame\nDESCRIPTION: This snippet demonstrates how to read data from a JSON file into a Kotlin DataFrame. The `DataFrame.read()` function automatically infers the file format from the extension.  The resulting DataFrame is stored in the `dfJson` variable for further manipulation and analysis.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval dfJson = DataFrame.read(\"jsonFile.json\")\ndfJson\n```\n\n----------------------------------------\n\nTITLE: Declaring External Interface for NPM Module - Kotlin\nDESCRIPTION: This snippet defines a Kotlin external declaration (adapter) for the 'is-sorted' npm package. The '@JsModule' and '@JsNonModule' annotations tell the compiler how to map the Kotlin declaration to the JavaScript module. The 'external fun <T> sorted(a: Array<T>): Boolean' exposes the 'sorted' function to Kotlin. Place this in a '.kt' file in the source folder to enable type-safe access to JS modules. Misconfiguring annotations may cause runtime/module resolution errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/using-packages-from-npm.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsModule(\"is-sorted\")\n@JsNonModule\nexternal fun <T> sorted(a: Array<T>): Boolean\n```\n\n----------------------------------------\n\nTITLE: Callback-Based Asynchronous Programming in Kotlin\nDESCRIPTION: This code demonstrates a nested callback approach to asynchronous programming, where callbacks are used to chain asynchronous operations. It discusses the complexity of handling nested callbacks, often termed as 'callback hell'. Dependencies: Kotlin standard library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/async-programming.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun postItem(item: Item) {\n    preparePostAsync { token -> \n        submitPostAsync(token, item) { post -> \n            processPost(post)\n        }\n    }\n}\n\nfun preparePostAsync(callback: (Token) -> Unit) {\n    // make request and return immediately \n    // arrange callback to be invoked later\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Invariant Generic Array Class in Kotlin\nDESCRIPTION: Defines a generic `Array<T>` class in Kotlin. Because it has methods that both return `T` (`get`) and accept `T` as a parameter (`set`), it cannot be declared covariant (`out`) or contravariant (`in`) and remains invariant. The method bodies are omitted (`...`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Array<T>(val size: Int) {\n    operator fun get(index: Int): T { ... }\n    operator fun set(index: Int, value: T) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Kotlin/JS Code to Test Hot Reloading\nDESCRIPTION: This code snippet modifies the `main` function in `Main.kt` by changing the value assigned to `document.bgColor` from \"red\" to \"blue\". This change is used to verify that the continuous compilation/hot reload feature correctly recompiles the project and updates the browser view without manual intervention.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndocument.bgColor = \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Using Unchecked Casts with Generic Types in Kotlin\nDESCRIPTION: Demonstrates unchecked casts in Kotlin when working with generic types where type information cannot be verified at runtime. Shows a typical use case with file-based data.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun readDictionary(file: File): Map<String, *> = file.inputStream().use { \n    TODO(\"Read a mapping of strings to arbitrary elements.\")\n}\n\n// We saved a map with `Int`s into this file\nval intsFile = File(\"ints.dictionary\")\n\n// Warning: Unchecked cast: `Map<String, *>` to `Map<String, Int>`\nval intsDictionary: Map<String, Int> = readDictionary(intsFile) as Map<String, Int>\n```\n\n----------------------------------------\n\nTITLE: Implementing Floored Division in Kotlin\nDESCRIPTION: Example demonstrating floored division and modulus operations compared to regular division and remainder.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"Floored division -5/3: ${(-5).floorDiv(3)}\")\n    println( \"Modulus: ${(-5).mod(3)}\")\n    \n    println(\"Truncated division -5/3: ${-5 / 3}\")\n    println( \"Remainder: ${-5 % 3}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactPlayer in VideoPlayer component\nDESCRIPTION: Replaces the placeholder image with the ReactPlayer component in the VideoPlayer, using the video URL from props.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nReactPlayer {\n    url = props.video.videoUrl\n    controls = true\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Serialization Plugin in Gradle (Groovy)\nDESCRIPTION: This snippet demonstrates how to apply the Kotlin serialization plugin in a Gradle build script using Groovy syntax. It includes the necessary plugin declarations for Kotlin JVM and serialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'\n    id 'org.jetbrains.kotlin.plugin.serialization' version '%kotlinVersion%'  \n}\n```\n\n----------------------------------------\n\nTITLE: Clean Build Command for iOS Framework Integration\nDESCRIPTION: Shell command to clean Gradle build directories as a workaround for the iOS framework version issue after Kotlin version upgrades.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty Kotlin Array with `emptyArray()`\nDESCRIPTION: Shows how to declare an empty array in Kotlin using the `emptyArray()` function. The type argument `<String>` specifies the type of elements the array will hold.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n    var exampleArray = emptyArray<String>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/JS browser target in Kotlin\nDESCRIPTION: This snippet showcases the configuration of a Kotlin/JS browser target within the `kotlin {}` block using the Kotlin DSL. It includes configuration for webpack, test execution, and the distribution directory. `webpackTask` and `testRuns` are placeholders for more complex configurations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    js().browser {\n        webpackTask { /* ... */ }\n        testRuns { /* ... */ }\n        distribution {\n            directory = File(\"$projectDir/customdir/\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Aliases in Kotlin\nDESCRIPTION: This example shows how to use type aliases to simplify functional types or types with type parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_56\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias MouseClickHandler = (Any, MouseEvent) -> Unit\ntypealias PersonIndex = Map<String, Person>\n```\n\n----------------------------------------\n\nTITLE: Using @JsExport Function in JavaScript\nDESCRIPTION: Shows how to import and use the Kotlin/Wasm function 'addOne' in JavaScript. The function is accessed as a property on the `default` export of the generated `.mjs` module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n\nimport exports from \"./module.mjs\"\n\nexports.addOne(10)\n```\n\n----------------------------------------\n\nTITLE: Binary Search with Comparison Function in Kotlin\nDESCRIPTION: Shows a binary search using a comparison function to find elements without explicit search values. Inputs are elements and function, returning the index where the return value is zero. List must be sorted as per the function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n\nimport kotlin.math.sign\n//sampleStart\ndata class Product(val name: String, val price: Double)\n\nfun priceComparison(product: Product, price: Double) = sign(product.price - price).toInt()\n\nfun main() {\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch { priceComparison(it, 99.0) })\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Version for All Projects\nDESCRIPTION: Gradle configuration to set Node.js version globally for all projects and subprojects in Kotlin/JS builds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nallprojects {\n    project.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin> {\n        project.the<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec>().version = \"your Node.js version\"\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nallprojects {\n    project.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin) {\n        project.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec).version = \"your Node.js version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving by Predicate - First/Last with Condition - Kotlin Collections - Kotlin\nDESCRIPTION: Shows how to retrieve the first or last element from a List matching a predicate using first() and last() with lambda predicates. Throws if no element matches. Demonstrates usage for filtering by string length and prefix. Requires Kotlin standard library 1.3+. Inputs are lists and predicate lambdas; outputs are matching elements or exceptions if not found.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\\n    println(numbers.first { it.length > 3 })\\n    println(numbers.last { it.startsWith(\"f\") })\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Classes and Interfaces in Kotlin\nDESCRIPTION: This example shows how classes and interfaces can be nested within each other in Kotlin. All combinations of nesting classes and interfaces are possible in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/nested-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface OuterInterface {\n    class InnerClass\n    interface InnerInterface\n}\n\nclass OuterClass {\n    class InnerClass\n    interface InnerInterface\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Generic Class with Explicit Types in Kotlin\nDESCRIPTION: Demonstrates how to create an instance of the generic `Box` class by explicitly providing the type argument (`Int`). An integer `1` is passed to the constructor.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval box: Box<Int> = Box<Int>(1)\n```\n\n----------------------------------------\n\nTITLE: Folding from Right with foldRight to Aggregate Values Reversely - Kotlin\nDESCRIPTION: The snippet demonstrates folding a collection from right to left using foldRight, doubling each element before summing. The accumulator logic applies to each element in reverse order, affecting both order and semantics. Only Kotlin Standard Library is required; foldRight’s signature swaps the order of element and accumulator in the lambda. The function is useful when order of accumulation matters, such as for non-commutative operations or when the rightmost element is special.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 2, 10, 4)\n    val sumDoubledRight = numbers.foldRight(0) { element, sum -> sum + element * 2 }\n    println(sumDoubledRight)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Mangling for Java Interoperability in Kotlin\nDESCRIPTION: Shows how to disable function name mangling for methods accepting inline classes, allowing them to be called predictably from Java code. The `@JvmName` annotation is used to provide a specific, non-mangled name (`computeUInt`) for the JVM function signature corresponding to `compute(x: UInt)`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class UInt(val x: Int)\n\nfun compute(x: Int) { }\n\n@JvmName(\"computeUInt\")\nfun compute(x: UInt) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrent Countdown using Kotlin Coroutines\nDESCRIPTION: Creates a coroutine scope that launches 10 concurrent tasks with decreasing delays, demonstrating concurrent execution. Each task prints its number along with timing and thread information. The main function is suspended until all coroutines complete.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/asynchronous.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.coroutines.*\n\nsuspend fun main() {                                // A function that can be suspended and resumed later\n    val start = System.currentTimeMillis()\n    coroutineScope {                                // Create a scope for starting coroutines\n        for (i in 1..10) {\n            launch {                                // Start 10 concurrent tasks\n                delay(3000L - i * 300)              // Pause their execution\n                log(start, \"Countdown: $i\")\n            }\n        }\n    }\n    // Execution continues when all coroutines in the scope have finished\n    log(start, \"Liftoff!\")\n}\n\nfun log(start: Long, msg: String) {\n    println(\"$msg \" +\n            \"(on ${Thread.currentThread().name}) \" +\n            \"after ${(System.currentTimeMillis() - start)/1000F}s\")\n}\n```\n\n----------------------------------------\n\nTITLE: Import DataFrame and SQL Libraries in Kotlin\nDESCRIPTION: This code snippet imports the Kotlin DataFrame library and necessary Java libraries for SQL connectivity and utility functions. The `%use dataframe` command enables the DataFrame functionality within the Kotlin Notebook. The `java.sql.DriverManager` and `java.util.*` imports are crucial for establishing database connections and using utility functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n%use dataframe\nimport java.sql.DriverManager\nimport java.util.*\n```\n\n----------------------------------------\n\nTITLE: Anonymous Object Expression Kotlin\nDESCRIPTION: Defines an anonymous object with properties `hello` and `world`, and overrides the `toString()` method. Anonymous objects are created using the `object` keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val helloWorld = object {\n        val hello = \"Hello\"\n        val world = \"World\"\n        // Object expressions extend the Any class, which already has a toString() function,\n        // so it must be overridden\n        override fun toString() = \"$hello $world\"\n    }\n\n    print(helloWorld)\n    // Hello World\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Package in Kotlin\nDESCRIPTION: Example of how to declare a package in a Kotlin source file. The package statement should be placed at the beginning of the file, and all contents of the file will belong to this package.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/packages.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.example\n\nfun printMessage() { /*...*/ }\nclass Message { /*...*/ }\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Handling Null with Continue Inside Inline Lambdas in Kotlin\nDESCRIPTION: Shows use of non-local 'continue' within an inline lambda in a loop, enabled via the compiler option '-Xnon-local-break-continue'. Logs a warning when the element is null/invalid and continues to the next iteration, otherwise checks value. Requires a nullableMethod extension and log instance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun processList(elements: List<Int>): Boolean {\n    for (element in elements) {\n        val variable = element.nullableMethod() ?: run {\n            log.warning(\"Element is null or invalid, continuing...\")\n            continue\n        }\n        if (variable == 0) return true\n    }\n    return false\n}\n```\n\n----------------------------------------\n\nTITLE: Using firstOrNull() to Avoid NoSuchElementException\nDESCRIPTION: This example demonstrates the use of `firstOrNull()` to safely access the first element of a list, returning `null` if the list is empty, thereby avoiding a `NoSuchElementException`. This is a safer alternative when the list might be empty.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nval emptyList = listOf<Int>()\n// Returns null, instead of NoSuchElementException\nval firstElement = emptyList.firstOrNull()\nprintln(\"First element in empty list: $firstElement\")\n```\n\n----------------------------------------\n\nTITLE: Kotlin example of synthetic setter error\nDESCRIPTION: This Kotlin code demonstrates how the synthetic setter for the 'foo' property, generated from Java's setFoo() method, now triggers an error in Kotlin 2.0.0 when used with projected types. It highlights the change in error reporting compared to Kotlin 1.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun exampleFunction(starProjected: Container<*>, inProjected: Container<in Number>, sampleString: String) {\n    starProjected.setFoo(sampleString)\n    // Error since Kotlin 1.0\n\n    // Synthetic setter `foo` is resolved to the `setFoo()` method\n    starProjected.foo = sampleString\n    // Error since Kotlin 2.0.0\n\n    inProjected.setFoo(sampleString)\n    // Error since Kotlin 1.0\n\n    // Synthetic setter `foo` is resolved to the `setFoo()` method\n    inProjected.foo = sampleString\n    // Error since Kotlin 2.0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Kotlin Class Methods with @JsName from JavaScript\nDESCRIPTION: Demonstrates instantiating the Kotlin `Person` class (from module `kjs`) and calling its methods from JavaScript. It shows calls to both the standard `hello()` method and the overloaded method accessed via the name specified by `@JsName` (`helloWithGreeting`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// If necessary, import 'kjs' according to chosen module system\nvar person = new kjs.Person(\"Dmitry\");   // refers to module 'kjs'\nperson.hello();                          // prints \"Hello Dmitry!\"\nperson.helloWithGreeting(\"Servus\");      // prints \"Servus Dmitry!\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for Kotlin/JS React Application Entry Point\nDESCRIPTION: This HTML file (`src/jsMain/resources/index.html`) serves as the entry point for the web application. It defines a `div` with the ID \"root\" where the React application will be mounted and includes the compiled Kotlin/JS code (`confexplorer.js`). The script tag is placed at the end of the body to ensure DOM elements are loaded first.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello, Kotlin/JS!</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script src=\"confexplorer.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Grouping Android Library Variants by Flavor for Publication\nDESCRIPTION: This snippet demonstrates how to enable publishing Android library variants grouped by product flavor, which places different build types in a single module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-publish-lib.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget {\n        publishLibraryVariantsGroupedByFlavor = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Objects in Sealed Class Hierarchies\nDESCRIPTION: Shows how data objects can be used alongside data classes in sealed class hierarchies to get consistent toString representations without manual overrides.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class ReadResult {\n    data class Number(val value: Int) : ReadResult()\n    data class Text(val value: String) : ReadResult()\n    data object EndOfFile : ReadResult()\n}\n\nfun main() {\n    println(ReadResult.Number(1)) // Number(value=1)\n    println(ReadResult.Text(\"Foo\")) // Text(value=Foo)\n    println(ReadResult.EndOfFile) // EndOfFile\n}\n```\n\n----------------------------------------\n\nTITLE: Array Operations in Kotlin\nDESCRIPTION: Demonstrates new array operations including onEach(), shuffle(), reverse(), and sorting functions. Shows how to manipulate array elements and create file extensions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var language = \"\"\n    val letters = arrayOf(\"k\", \"o\", \"t\", \"l\", \"i\", \"n\")\n    val fileExt = letters.onEach { language += it }\n       .filterNot { it in \"aeuio\" }.take(2)\n       .joinToString(prefix = \".\", separator = \"\")\n    println(language) // \"kotlin\"\n    println(fileExt) // \".kt\"\n\n    letters.shuffle()\n    letters.reverse(0, 3)\n    letters.sortDescending(2, 5)\n    println(letters.contentToString()) // [k, o, t, l, i, n]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Emptiness - isEmpty and isNotEmpty - Kotlin Collections - Kotlin\nDESCRIPTION: Demonstrates checking if a collection is empty or not using isEmpty() and isNotEmpty(). Includes examples for both populated and empty lists. Requires only standard Kotlin 1.3+. No inputs required; prints boolean flags for emptiness.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-elements.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\\n//sampleStart\\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\\n    println(numbers.isEmpty())\\n    println(numbers.isNotEmpty())\\n    \\n    val empty = emptyList<String>()\\n    println(empty.isEmpty())\\n    println(empty.isNotEmpty())\\n//sampleEnd\\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Compiler Output with provideDelegate Customization\nDESCRIPTION: This code displays the compiler-generated output for a property assignment using a delegate object with provideDelegate defined. Here, provideDelegate is invoked to initialize an auxiliary delegate property, which is subsequently used for the getValue and setValue calls. This process allows for injection of custom delegate creation logic at compile time, impacting only the initialization of the delegate reference, not property accessors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C {\n    var prop: Type by MyDelegate()\n}\n\n// this code is generated by the compiler \n// when the 'provideDelegate' function is available:\nclass C {\n    // calling \"provideDelegate\" to create the additional \"delegate\" property\n    private val prop$delegate = MyDelegate().provideDelegate(this, this::prop)\n    var prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n        set(value: Type) = prop$delegate.setValue(this, this::prop, value)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Kotlin Package-Level Function from Java\nDESCRIPTION: Demonstrates defining a package-level function `getTime()` in a Kotlin file (`app.kt`) within the `org.example` package. From Java, this function is called as a static method on the automatically generated Java class `org.example.AppKt`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// app.kt\npackage org.example\n\nclass Util\n\nfun getTime() { /*...*/ }\n\n```\n\nLANGUAGE: java\nCODE:\n```\n// Java\nnew org.example.Util();\norg.example.AppKt.getTime();\n```\n\n----------------------------------------\n\nTITLE: Configuring Variant Selection Attributes for Custom Configuration - Groovy - Groovy\nDESCRIPTION: This snippet configures the attributes needed for proper variant selection on the custom configuration in Gradle using the Groovy DSL. It sets the Usage, Category, and optionally a specific Gradle Plugin API version for the configuration, which is needed for correct variant resolution when adding the KGP plugin as a dependency. The code expects that the configuration exists. Inputs: appropriate attribute values. Output: improved variant selection and compatibility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nconfigurations {\n    customConfiguration {\n        attributes {\n            attribute(\n                Usage.USAGE_ATTRIBUTE,\n                project.objects.named(Usage, Usage.JAVA_RUNTIME)\n            )\n            attribute(\n                Category.CATEGORY_ATTRIBUTE,\n                project.objects.named(Category, Category.LIBRARY)\n            )\n            // If you want to depend on a specific KGP variant:\n            attribute(\n                GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE,\n                project.objects.named('7.0')\n            )\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Kotlin property reflection Java interoperability\nDESCRIPTION: Illustrates how to interoperate with Java reflection using extensions in the `kotlin.reflect.jvm` package. This shows how to find the backing field and getter method of a Kotlin property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.reflect.jvm.*\n \nclass A(val p: Int)\n \nfun main() {\n    println(A::p.javaGetter) // prints \"public final int A.getP()\"\n    println(A::p.javaField)  // prints \"private final int A.p\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Java Class Name for Kotlin File with @JvmName\nDESCRIPTION: Shows how to use the `@file:JvmName(\"DemoUtils\")` annotation in a Kotlin file (`org.example` package) to specify `DemoUtils` as the name for the generated Java class containing the package-level functions like `getTime()`. This allows calling `org.example.DemoUtils.getTime()` from Java.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JvmName(\"DemoUtils\")\n\npackage org.example\n\nclass Util\n\nfun getTime() { /*...*/ }\n\n```\n\nLANGUAGE: java\nCODE:\n```\n// Java\nnew org.example.Util();\norg.example.DemoUtils.getTime();\n```\n\n----------------------------------------\n\nTITLE: Singleton Object Property Naming\nDESCRIPTION: Illustrates the naming style for properties holding references to singleton objects, which can follow the same style as `object` declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nval PersonComparator: Comparator<Person> = /*...*/\n```\n\n----------------------------------------\n\nTITLE: Declaring Kotlin Multiplatform Targets in Gradle\nDESCRIPTION: Gradle configuration showing how to declare multiple compilation targets for a Kotlin Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm() // Declares a JVM target\n    iosArm64() // Declares a target that corresponds to 64-bit iPhones\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Storage Interface and Implementation\nDESCRIPTION: Defines a Storage interface and KotlinStorage implementation class for demonstrating garbage collection behavior with chains of Kotlin and Swift objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\ninterface Storage {\n    fun store(arg: Any)\n}\n\nclass KotlinStorage(var field: Any? = null) : Storage {\n    override fun store(arg: Any) {\n        field = arg\n    }\n}\n\nclass KotlinExample {\n    fun action(firstSwiftStorage: Storage, secondSwiftStorage: Storage) {\n        // Here, we create the following chain:\n        // firstKotlinStorage -> firstSwiftStorage -> secondKotlinStorage -> secondSwiftStorage.\n        val firstKotlinStorage = KotlinStorage()\n        firstKotlinStorage.store(firstSwiftStorage)\n        val secondKotlinStorage = KotlinStorage()\n        firstSwiftStorage.store(secondKotlinStorage)\n        secondKotlinStorage.store(secondSwiftStorage)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Opt-in Requirements\nDESCRIPTION: Example showing how to create and use opt-in requirements for library interfaces. Demonstrates the basic setup of opt-in annotations and their application to API elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresOptIn(\n level = RequiresOptIn.Level.WARNING,\n message = \"Interfaces in this library are experimental\"\n)\nannotation class UnstableApi()\n\n@SubclassOptInRequired(UnstableApi::class)\n// An interface requiring opt-in to extend\ninterface CoreLibraryApi\n```\n\n----------------------------------------\n\nTITLE: Java method accepting an int array\nDESCRIPTION: This is a Java method that accepts an `int[]` as a parameter. This example complements the Kotlin example, showcasing how Kotlin interacts with such a Java method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_26\n\nLANGUAGE: java\nCODE:\n```\npublic class JavaArrayExample {\n    public void removeIndices(int[] indices) {\n        // code here...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Power-assert Plugin (Groovy)\nDESCRIPTION: This code snippet demonstrates how to configure the Power-assert plugin in a Groovy build.gradle file. It defines the functions to be transformed and the included source sets.  The `powerAssert {}` block is used to specify these configurations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// build.gradle\npowerAssert {\n    functions = [\"kotlin.assert\", \"kotlin.test.assertTrue\", \"kotlin.test.assertEquals\", \"kotlin.test.assertNull\"]\n    includedSourceSets = [\"commonMain\", \"jvmMain\", \"jsMain\", \"nativeMain\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Debug Info with Kotlin/Native Compiler\nDESCRIPTION: Shows how to compile a Kotlin program with debug information by using the -g flag with the konanc compiler, then demonstrates basic debugging with LLDB including breakpoints and stepping.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n0:b-debugger-fixes:minamoto@unit-703(0)# cat - > hello.kt\nfun main(args: Array<String>) {\n  println(\"Hello world\")\n  println(\"I need your clothes, your boots and your motocycle\")\n}\n0:b-debugger-fixes:minamoto@unit-703(0)# dist/bin/konanc -g hello.kt -o terminator\nKtFile: hello.kt\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb terminator.kexe\n(lldb) target create \"terminator.kexe\"\nCurrent executable set to 'terminator.kexe' (x86_64).\n(lldb) b kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n(lldb) r\nProcess 28473 launched: '/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe' (x86_64)\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x00000001000012e4 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:2\n   1    fun main(args: Array<String>) {\n-> 2      println(\"Hello world\")\n   3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb) n\nHello world\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = step over\n    frame #0: 0x00000001000012f0 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:3\n   1    fun main(args: Array<String>) {\n   2      println(\"Hello world\")\n-> 3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb)\n```\n\n----------------------------------------\n\nTITLE: Xcode Run Script for Framework Integration\nDESCRIPTION: Gradle script to embed and sign the Kotlin framework in the Xcode project. The script needs to be customized with the correct path to the multiplatform project root and the shared module name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-direct-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<Path to the root of the multiplatform project>\"\n./gradlew :<Shared module name>:embedAndSignAppleFrameworkForXcode\n```\n\n----------------------------------------\n\nTITLE: Reacting to Kotlin Plugin Application Using KotlinBasePlugin Interface - Kotlin\nDESCRIPTION: This Kotlin DSL code registers an action that triggers whenever any Kotlin plugin (such as for JVM, JS, Native, or Multiplatform) is applied to the project, using the KotlinBasePlugin interface. It uses project.plugins.withType to hook into plugin lifecycle, enabling custom configuration logic addressing all Kotlin plugin types. Import of org.jetbrains.kotlin.gradle.plugin.KotlinBasePlugin is required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.KotlinBasePlugin\n\n// ...\n\nproject.plugins.withType<KotlinBasePlugin>() {\n    // Configure your action here\n}\n```\n\n----------------------------------------\n\nTITLE: Pointer Type Casting\nDESCRIPTION: Examples of casting between different pointer types using reinterpret\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\n\n@OptIn(ExperimentalForeignApi::class)\nval intPtr = bytePtr.reinterpret<IntVar>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\n\n@OptIn(ExperimentalForeignApi::class)\nval intPtr: CPointer<IntVar> = bytePtr.reinterpret()\n```\n\n----------------------------------------\n\nTITLE: HexFormat minLength property in Kotlin\nDESCRIPTION: This code snippet demonstrates the usage of the `minLength` property in `HexFormat` to specify the minimum number of digits in hexadecimal representations. It shows how to pad a number with leading zeros and then trim them using `removeLeadingZeros`. Requires Kotlin 2.0.20 and `@OptIn(ExperimentalStdlibApi::class)` or `-opt-in=kotlin.ExperimentalStdlibApi`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(93.toHexString(HexFormat {\n        number.minLength = 4\n        number.removeLeadingZeros = true\n    }))\n    // \"005d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Efficiently Printing Multiple Lines using joinToString in Kotlin\nDESCRIPTION: Shows an efficient method for printing multiple output lines, especially when dealing with a large number of elements (e.g., 10^5 or more). Instead of multiple `println` calls which cause frequent buffer flushing, it uses `joinToString(\"\\n\")` on an array or list (`a`) to create a single string with elements separated by newlines, which is then printed once. This significantly improves performance for large outputs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(a.joinToString(\"\\n\")) // each element of array/list of a separate line\n```\n\n----------------------------------------\n\nTITLE: Escaped String Example Kotlin\nDESCRIPTION: This snippet shows an example of an escaped string in Kotlin, using the newline character `\\n`.  Escaped strings allow for the inclusion of special characters that would otherwise be difficult or impossible to represent directly in a string literal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval s = \"Hello, world!\\n\"\n```\n\n----------------------------------------\n\nTITLE: Mapping JavaScript Static/Prototype Members to external Kotlin Classes\nDESCRIPTION: Shows how to use external class declarations and companion objects in Kotlin to describe both static and instance members of a JavaScript class. In Kotlin/JS, companion object members are treated as static/class members. Enables Kotlin code to call shared/static and instance JS methods through typesafe bindings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal class MyClass {\n    companion object {\n        fun sharedMember()\n    }\n\n    fun ownMember()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array elements in Kotlin\nDESCRIPTION: This code shows how to access and modify array elements in Kotlin. The compiler optimizes these operations so that no overhead is introduced.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nval array = arrayOf(1, 2, 3, 4)\narray[1] = array[1] * 2 // no actual calls to get() and set() generated\nfor (x in array) { // no iterator created\n    print(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Set CocoaPods installation path via shell command - Shell\nDESCRIPTION: This shell command demonstrates how to add the CocoaPods installation path to the `local.properties` file using the `which pod` command. This provides a dynamic way to determine the path to the `pod` executable and append it to the file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"kotlin.apple.cocoapods.bin=$(which pod)\" >> local.properties\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in a Set with 'in' Operator in Kotlin\nDESCRIPTION: Demonstrates how to check if an element exists in a set using the 'in' operator, which returns a boolean value indicating presence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val readOnlyFruit = setOf(\"apple\", \"banana\", \"cherry\", \"cherry\")\n    println(\"banana\" in readOnlyFruit)\n    // true\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Forward Declarations in C Interop\nDESCRIPTION: Demonstrates how to handle C forward declarations by using the cnames package and explicit type casting when transferring objects between separate C libraries that share structure definitions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin code:\nfun test() {\n    consumeStruct(produceStruct() as CPointer<cnames.structs.ForwardDeclaredStruct>)\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin test function with inaccessible Node\nDESCRIPTION: This Kotlin code shows how using a lambda with an implicitly typed parameter based on an inaccessible generic type (`Node`) now triggers errors in Kotlin 2.0.0. This highlights the change in how Kotlin handles type inference with inaccessible types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module three\nfun test() {\n    // Triggers an error in Kotlin 2.0.0, as the type of the implicit \n    // lambda parameter (it) resolves to Node, which is inaccessible\n    execute {}\n\n    // Triggers an error in Kotlin 2.0.0, as the type of the unused \n    // lambda parameter (_) resolves to Node, which is inaccessible\n    execute { _ -> }\n\n    // Triggers an error in Kotlin 2.0.0, as the type of the unused\n    // anonymous function parameter (_) resolves to Node, which is inaccessible\n    execute(fun (_) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Source Set Hierarchy in Kotlin Multiplatform\nDESCRIPTION: Shows how to include a custom source set 'jvmAndJsMain' in the project hierarchy by adding dependsOn relations to commonMain, jvmMain, and jsMain source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-advanced-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    js()\n    linuxX64()\n\n    sourceSets {\n        val jvmAndJsMain by creating {\n            // Don't forget to add dependsOn to commonMain\n            dependsOn(commonMain.get())\n        }\n\n        jvmMain {\n            dependsOn(jvmAndJsMain)\n        }\n\n        jsMain {\n            dependsOn(jvmAndJsMain)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Groovy IDEA Module for KSP (Plugin)\nDESCRIPTION: This Groovy snippet configures the IDEA module to include the KSP generated code directories when KSP is used within a Gradle plugin. It addresses an issue where direct dependency declaration is needed to avoid execution optimization warnings. It requires the `idea` plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_20\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    // ...\n    id 'idea'\n}\n\nidea {\n    module {\n        // Not using += due to https://github.com/gradle/gradle/issues/8749\n        sourceDirs = sourceDirs + file('build/generated/ksp/main/kotlin') // or tasks[\"kspKotlin\"].destination\n        testSourceDirs = testSourceDirs + file('build/generated/ksp/test/kotlin')\n        generatedSourceDirs = generatedSourceDirs + file('build/generated/ksp/main/kotlin') + file('build/generated/ksp/test/kotlin')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Java Toolchain via Java Extension (Kotlin)\nDESCRIPTION: Demonstrates setting a Java toolchain using the Java extension in Kotlin, influencing Kotlin compilation tasks. The `<MAJOR_JDK_VERSION>` holds the JDK version number.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\njava {\n    toolchain {\n        languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)) \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Forward Declaration Usage\nDESCRIPTION: This Kotlin code demonstrates how to use the forward-declared protocol from Objective-C with an explicit cast. It calls the `consumeProtocol` function from the first Objective-C library with the result of `produceProtocol` function from the second Objective-C library after explicitly casting to `objcnames.protocols.ForwardDeclaredProtocolProtocol`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin code:\nfun test() {\n    consumeProtocol(produceProtocol() as objcnames.protocols.ForwardDeclaredProtocolProtocol)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Call to Kotlin Function with Lambda\nDESCRIPTION: This Swift code demonstrates how to call the Kotlin function 'foo' from Swift.  It shows casting the Swift Int to Int32 and returning KotlinUnit.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfoo {\n    bar($0 as! Int32)\n    return KotlinUnit()\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Message Data with Kotlin Collections and Sequences\nDESCRIPTION: This snippet shows how to use Kotlin's collection operations to analyze message data. It demonstrates grouping messages by sender to find the most frequent sender, and using sequences with filter, map, distinct, and sorted operations to process data efficiently. The code also showcases Kotlin data classes with default parameters and list initialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/functional.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Who sent the most messages?\n    val frequentSender = messages\n        .groupBy(Message::sender)\n        .maxByOrNull { (_, messages) -> messages.size }\n        ?.key                                                 // Get their names\n    println(frequentSender) // [Ma]\n\n    // Who are the senders?\n    val senders = messages\n        .asSequence()                                         // Make operations lazy (for a long call chain)\n        .filter { it.body.isNotBlank() && !it.isRead }        // Use lambdas...\n        .map(Message::sender)                                 // ...or member references\n        .distinct()\n        .sorted()\n        .toList()                                             // Convert sequence back to a list to get a result\n    println(senders) // [Adam, Ma]\n}\n\ndata class Message(                                           // Create a data class\n    val sender: String,\n    val body: String,\n    val isRead: Boolean = false,                              // Provide a default value for the argument\n)\n\nval messages = listOf(                                        // Create a list\n    Message(\"Ma\", \"Hey! Where are you?\"),\n    Message(\"Adam\", \"Everything going according to plan today?\"),\n    Message(\"Ma\", \"Please reply. I've lost you!\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Argument file quotes usage\nDESCRIPTION: Illustrates the usage of single and double quotes when defining values with whitespaces in argument files. Backslashes should be used to escape quotation marks inside values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n-include-runtime -d 'My folder'\n```\n\n----------------------------------------\n\nTITLE: Applying KSP to Workload (Groovy)\nDESCRIPTION: A full example of applying the KSP plugin to a workload module using Groovy DSL. This includes the KSP plugin, Kotlin JVM plugin, Maven Central repository, and dependencies on the Kotlin standard library and the custom test-processor project. The `%kspSupportedKotlinVersion%-%kspVersion%` placeholder should be replaced with the actual supported KSP and Kotlin versions.  The `%kotlinVersion%` placeholder should be replaced with the Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_15\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'\n    id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib:%kotlinVersion%'\n    implementation project(':test-processor')\n    ksp project(':test-processor')\n}\n```\n\n----------------------------------------\n\nTITLE: Java Interface with Qualifier Nicknames\nDESCRIPTION: This Java code demonstrates the usage of the custom nullability annotations `@MyNonnull` and `@MyNullable` defined earlier.  It shows how they are applied to parameters and return types in an interface. The nullability annotations affect the types seen in Kotlin when strict mode is enabled.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ninterface A {\n    @MyNullable String foo(@MyNonnull String x);\n    // in Kotlin (strict mode): `fun foo(x: String): String?`\n\n    String bar(List<@MyNonnull String> x);\n    // in Kotlin (strict mode): `fun bar(x: List<String>!): String!`\n}\n```\n\n----------------------------------------\n\nTITLE: Open Property Initialization - Kotlin\nDESCRIPTION: This code snippet illustrates the change in Kotlin 2.0 where all open properties with backing fields must be immediately initialized. The code demonstrates the compilation error that occurs when open 'val' and 'var' properties are not initialized in the init block of a base class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Base {\n    open val a: Int\n    open var b: Int\n    \n    init {\n        // Error starting with Kotlin 2.0 that earlier compiled successfully \n        this.a = 1 //Error: open val must have initializer\n        // Always an error\n        this.b = 1 // Error: open var must have initializer\n    }\n}\n\nclass Derived : Base() {\n    override val a: Int = 2\n    override var b = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sums with Type-Specific Results in Kotlin\nDESCRIPTION: Shows the sumOf function which applies a selector to each collection element and returns the sum of the resulting values. It supports various numeric types like Int, Long, Double, and on JVM also BigInteger and BigDecimal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class OrderItem(val name: String, val price: Double, val count: Int)\n\nfun main() {\n//sampleStart\n    val order = listOf<OrderItem>(\n        OrderItem(\"Cake\", price = 10.0, count = 1),\n        OrderItem(\"Coffee\", price = 2.5, count = 3),\n        OrderItem(\"Tea\", price = 1.5, count = 2))\n\n    val total = order.sumOf { it.price * it.count } // Double\n    val count = order.sumOf { it.count } // Int\n//sampleEnd\n    println(\"You've ordered $count items that cost $total in total\")\n}\n```\n\n----------------------------------------\n\nTITLE: Update MessageService with UUID Kotlin\nDESCRIPTION: This code modifies the MessageService to generate a UUID if the message ID is null before saving it to the database. It ensures that the database stores non-null IDs.  It requires the Spring Framework, JdbcTemplate, and UUID dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-db-support.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageService.kt\npackage demo\n\nimport org.springframework.stereotype.Service\nimport org.springframework.jdbc.core.JdbcTemplate\nimport org.springframework.jdbc.core.query\nimport java.util.UUID\n\n@Service\nclass MessageService(private val db: JdbcTemplate) {\n    fun findMessages(): List<Message> = db.query(\"select * from messages\") { response, _ ->\n        Message(response.getString(\"id\"), response.getString(\"text\"))\n    }\n\n    fun save(message: Message): Message {\n        val id = message.id ?: UUID.randomUUID().toString() // Generate new id if it is null\n        db.update(\n            \"insert into messages values ( ?, ? )\",\n            id, message.text\n        )\n        return message.copy(id = id) // Return a copy of the message with the new id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: KDoc Example - Kotlin\nDESCRIPTION: This snippet presents an example of a KDoc comment in Kotlin and the resulting Objective-C declaration. It demonstrates how KDoc comments are not translated to Objective-C unless the `-Xexport-kdoc` compiler option is enabled. This KDoc describes a function that prints the sum of its arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Prints the sum of the arguments.\n * Properly handles the case when the sum doesn't fit in 32-bit integer.\n */\nfun printSum(a: Int, b: Int) = println(a.toLong() + b)\n```\n\n----------------------------------------\n\nTITLE: Bit Rotation Operations in Kotlin\nDESCRIPTION: Demonstrates the stable bit rotation operations rotateLeft() and rotateRight() on integer types, showing binary representation transformations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val number: Short = 0b10001\n    println(number\n        .rotateRight(2)\n        .toString(radix = 2)) // 100000000000100\n    println(number\n        .rotateLeft(2)\n        .toString(radix = 2))  // 1000100\n}\n```\n\n----------------------------------------\n\nTITLE: Trying Latest Language Version (Shell Command)\nDESCRIPTION: This snippet shows how to enable the experimental feature of trying the next language version using a command-line argument for the Gradle build. By setting `-Pkotlin.experimental.tryNext=true`, the Kotlin Gradle plugin increments the language version to one above the default for the current Kotlin version, allowing developers to test new language features.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew assemble -Pkotlin.experimental.tryNext=true\n```\n\n----------------------------------------\n\nTITLE: Command-line Kotlin Compilation\nDESCRIPTION: Demonstrates a basic Kotlin compilation command using the command-line compiler. It compiles `hello.kt`, includes the runtime library, and outputs the result to `hello.jar`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ kotlinc hello.kt -include-runtime -d hello.jar\n```\n\n----------------------------------------\n\nTITLE: Kotlin function using Node\nDESCRIPTION: This Kotlin code demonstrates how another module can successfully utilize the `Node` class when properly configured with dependencies. It shows the correct usage before the misconfiguration is introduced.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module two\nfun execute(func: (Node<Int>) -> Unit) {}\n// Function compiles successfully\n```\n\n----------------------------------------\n\nTITLE: Creating Sliding Windows of Collection Elements in Kotlin\nDESCRIPTION: Illustrates the `windowed()` extension function on a `List<String>`. It generates a list of sublists (windows) of a specified size (3 in this case). By default, it creates a window starting at each element of the original list, effectively creating a sliding window view. The result is a `List` of `List`s.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")    \n    println(numbers.windowed(3))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Bound Method Reference Kotlin\nDESCRIPTION: This example demonstrates how to use a bound method reference with the `filter` function in Kotlin. It creates a regular expression, a list of strings, and filters the list using the bound method reference to the `matches` method of the regular expression.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numberRegex = \"\\\\d+\".toRegex()\n    val strings = listOf(\"abc\", \"124\", \"a70\")\n    println(strings.filter(numberRegex::matches))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenate and Select Video Statistics\nDESCRIPTION: Concatenates the fetched statistics from `statPages` and selects relevant columns (ID and all columns under `statistics`).  It also parses the columns to ensure they have the correct data types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval stats = statPages.items.concat().select { id and statistics.all() }.parse()\nstats\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Binary Search in Kotlin Lists\nDESCRIPTION: Demonstrates binary search with 'String.CASE_INSENSITIVE_ORDER' for case-insensitive search in sorted lists. Requires Kotlin standard library and properly sorted list. Inputs include the element and comparator, output is the index.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val colors = listOf(\"Blue\", \"green\", \"ORANGE\", \"Red\", \"yellow\")\n    println(colors.binarySearch(\"RED\", String.CASE_INSENSITIVE_ORDER)) // 3\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Comparable and Subtractable TimeMarks\nDESCRIPTION: Illustrates the new experimental functionality for comparing and subtracting TimeMarks, useful for precise timing measurements and animations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\nfun main() {\n    val timeSource = TimeSource.Monotonic\n    val mark1 = timeSource.markNow()\n    Thread.sleep(500) // Sleep 0.5 seconds\n    val mark2 = timeSource.markNow()\n\n    // Before 1.8.0\n    repeat(4) { n ->\n        val elapsed1 = mark1.elapsedNow()\n        val elapsed2 = mark2.elapsedNow()\n\n        println(\"Measurement 1.${n + 1}: elapsed1=$elapsed1, \" +\n                \"elapsed2=$elapsed2, diff=${elapsed1 - elapsed2}\")\n    }\n    println()\n\n    // Since 1.8.0\n    repeat(4) { n ->\n        val mark3 = timeSource.markNow()\n        val elapsed1 = mark3 - mark1\n        val elapsed2 = mark3 - mark2\n\n        println(\"Measurement 2.${n + 1}: elapsed1=$elapsed1, \" +\n                \"elapsed2=$elapsed2, diff=${elapsed1 - elapsed2}\")\n    }\n    println(mark2 > mark1)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Karma Browsers for Kotlin/JS Testing (Groovy)\nDESCRIPTION: This Groovy snippet demonstrates how to configure specific browsers for Karma tests within a Kotlin/JS project's `build.gradle` file. It uses the `useKarma` block inside the `testTask` configuration for the browser target to specify which browsers (e.g., IE, Safari, Firefox, Chrome) Karma should use. The plugin uses Headless Chrome by default if no specific browsers are configured.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_17\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            testTask {\n                useKarma {\n                    useIe()\n                    useSafari()\n                    useFirefox()\n                    useChrome()\n                    useChromeCanary()\n                    useChromeHeadless()\n                    usePhantomJS()\n                    useOpera()\n                }\n            }\n        }\n        binaries.executable()\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lombok Plugin in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to apply the Kotlin Lombok plugin and the Lombok plugin in a Gradle build script using the Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.lombok\") version \"%kotlinVersion%\"\n    id(\"io.freefair.lombok\") version \"%lombokVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using List Initializer Functions in Kotlin\nDESCRIPTION: Shows how to create lists with a constructor-like function that takes the list size and an initializer function based on the element index.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val doubled = List(3, { it * 2 })  // or MutableList if you want to change its content later\n    println(doubled)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/JS for Browser Debugging (Gradle)\nDESCRIPTION: Executes Gradle tasks to run the Kotlin/JS project in development mode, making it accessible in a web browser for debugging. `browserDevelopmentRun` is typically used for single-platform JS projects, while `jsBrowserDevelopmentRun` is used in Kotlin Multiplatform projects for the JS browser target.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nbrowserDevelopmentRun\n```\n\nLANGUAGE: Gradle\nCODE:\n```\njsBrowserDevelopmentRun\n```\n\n----------------------------------------\n\nTITLE: Inferring Type Arguments from Lambda Parameters and Returns\nDESCRIPTION: Shows how builder inference can work with type parameters that are used as lambda parameter or return types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <K, V> myBuilder1(\n    mapBuilder: MutableMap<K, V>.() -> K\n): Map<K, V> = mutableMapOf<K, V>().apply { mapBuilder() }\n\nfun <K, V> myBuilder2(\n    mapBuilder: MutableMap<K, V>.(K) -> Unit\n): Map<K, V> = mutableMapOf<K, V>().apply { mapBuilder(2 as K) }\n\nfun main() {\n    // result1 has the Map<Long, String> type inferred\n    val result1 = myBuilder1 {\n        put(1L, \"value\")\n        2\n    }\n    val result2 = myBuilder2 {\n        put(1, \"value 1\")\n        // You can use `it` as \"postponed type variable\" type\n        // See the details in the section below\n        put(it, \"value 2\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Member Access and Override in Kotlin Delegation\nDESCRIPTION: This Kotlin snippet explains the interaction between the delegated implementation and overridden properties. Even if `Derived` overrides `message`, `print` method called on `Derived` will use `BaseImpl`'s version due to how delegation is handled. Dependencies are the `Base` interface and the `BaseImpl` class. Inputs are instances of these classes. Outputs include printed messages and the internal message state.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegation.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Base {\n    val message: String\n    fun print()\n}\n\nclass BaseImpl(x: Int) : Base {\n    override val message = \"BaseImpl: x = $x\"\n    override fun print() { println(message) }\n}\n\nclass Derived(b: Base) : Base by b {\n    // This property is not accessed from b's implementation of `print`\n    override val message = \"Message of Derived\"\n}\n\nfun main() {\n    val b = BaseImpl(10)\n    val derived = Derived(b)\n    derived.print()\n    println(derived.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Common Platform Expectations in Kotlin Multiplatform\nDESCRIPTION: Defines the common expected declarations for UUID generation and socket operations that will be implemented differently for each platform. Includes an interface for socket event handling.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/multiplatform.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Common\n// Declare signatures to use them in the common code\n// Provide platform-specific implementations in the platform modules\nexpect fun randomUUID(): String\n\nexpect class PlatformSocket(\n       url: String\n) {\n    fun openSocket(listener: PlatformSocketListener)\n    fun closeSocket(code: Int, reason: String)\n    fun sendMessage(msg: String)\n}\n\ninterface PlatformSocketListener {\n    fun onOpen()\n    fun onFailure(t: Throwable)\n    fun onMessage(msg: String)\n    fun onClosing(code: Int, reason: String)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Properties for Custom CInterop Libraries\nDESCRIPTION: Gradle properties configuration to enable the use of custom cinterop libraries in shared native code for Kotlin Multiplatform projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.mpp.enableGranularSourceSetsMetadata=true\nkotlin.native.enableDependencyPropagation=false\nkotlin.mpp.enableCInteropCommonization=true\n```\n\n----------------------------------------\n\nTITLE: Convert Duration Extension Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to convert a Duration into a different DurationUnit using the toInt(), toDouble(), or toLong() extension functions with the desired DurationUnit as a function parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration.Companion.seconds\nimport kotlin.time.DurationUnit\n\nfun main() {\n//sampleStart\n    println(270.seconds.toDouble(DurationUnit.MINUTES))\n    // 4.5\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gradle Repositories with Kotlin DSL\nDESCRIPTION: This code snippet configures the Gradle plugin management repositories to include Maven Central and the Gradle Plugin Portal. This ensures that Gradle can download Kotlin artifacts and dependencies correctly. It is essential to avoid using the sunset JCenter repository, which can lead to issues.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\npluginManagement {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Kotlin/Wasm Application in WasmEdge\nDESCRIPTION: Gradle command to run tests for the Kotlin/Wasm application in WasmEdge environment, verifying functionality in this cloud-native WebAssembly runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmWasiWasmEdgeTest\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Smart Casts in Kotlin\nDESCRIPTION: This code demonstrates the improved exception handling in Kotlin 2.0.0, where smart cast information is maintained across `try`, `catch`, and `finally` blocks. The compiler accurately tracks the nullability of `stringInput` throughout the code, ensuring type safety and preventing incorrect nullability assumptions in `catch` blocks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun testString() {\n    var stringInput: String? = null\n    // stringInput is smart-cast to String type\n    stringInput = \"\"\n    try {\n        // The compiler knows that stringInput isn't null\n        println(stringInput.length)\n        // 0\n\n        // The compiler rejects previous smart cast information for \n        // stringInput. Now stringInput has the String? type.\n        stringInput = null\n\n        // Trigger an exception\n        if (2 > 1) throw Exception()\n        stringInput = \"\"\n    } catch (exception: Exception) {\n        // In Kotlin 2.0.0, the compiler knows stringInput \n        // can be null, so stringInput stays nullable.\n        println(stringInput?.length)\n        // null\n\n        // In Kotlin 1.9.20, the compiler says that a safe call isn't\n        // needed, but this is incorrect.\n    }\n}\n//sampleEnd\nfun main() {\n    testString()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shorter Syntax for Properties in Kotlin 1.1\nDESCRIPTION: Demonstrates the shorter syntax for properties with getters defined as expression bodies. The property type can be omitted and will be inferred from the expression.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\n    data class Person(val name: String, val age: Int) {\n    val isAdult get() = age >= 20 // Property type inferred to be 'Boolean'\n}\n//sampleEnd\nfun main(args: Array<String>) {\n    val akari = Person(\"Akari\", 26)\n    println(\"$akari.isAdult = ${akari.isAdult}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Import Kotlin DataFrame in Kotlin Notebook\nDESCRIPTION: This code snippet shows how to import the Kotlin DataFrame library in a Kotlin Notebook.  It uses the `%use` magic command, which is specific to Kotlin Notebooks, to load the dataframe library and its dependencies. This line must be executed before using any other dataframe functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n%use dataframe\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Webpack Loader Rule via Configuration File (JavaScript)\nDESCRIPTION: This JavaScript code snippet is intended for a `.js` file placed inside the `webpack.config.d` directory in the project root. It demonstrates how to customize the webpack configuration by adding a new loader rule. It modifies the global `config` object (representing the webpack configuration generated by the Kotlin plugin) by pushing a new rule to handle files matching the `test` regex (`/\\.extension$/`) using the specified `loader` ('loader-name').\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.module.rules.push({\n    test: /\\.extension$/,\n    loader: 'loader-name'\n});\n```\n\n----------------------------------------\n\nTITLE: Linking in KDoc with Markdown\nDESCRIPTION: This snippet shows how to link to code elements such as methods or properties using KDoc by enclosing the element name in brackets. It also includes examples of custom labels and qualified names. The description requires knowledge of the project's code elements to use effectively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-doc.md#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nUse the method [foo] for this purpose.\\nUse [this method][foo] for this purpose.\\nUse [kotlin.reflect.KClass.properties] to enumerate the properties of the class.\n```\n\n----------------------------------------\n\nTITLE: Specify binaries.executable() in build script - Kotlin\nDESCRIPTION: Demonstrates how to explicitly specify `binaries.executable()` in the project's `build.gradle.kts` file. This is needed for the IR compiler to produce executable `.js` files, which is not the default behavior like in the older compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    js(IR) {\n        browser {\n        }\n        binaries.executable()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Looping with ..< operator in Kotlin\nDESCRIPTION: This snippet demonstrates the usage of the `..<` operator to create an open-ended range, iterating from 2 up to (but not including) 10.  It prints even numbers within this range, showcasing a more readable syntax compared to the `until` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (number in 2..<10) {\n        if (number % 2 == 0) {\n            print(\"$number \")\n        }\n    }\n    // 2 4 6 8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotlin Interface with Implementable Default Method for Java (JVM 1.8+)\nDESCRIPTION: Shows a Kotlin interface `Robot` with a function `move()` that has a default implementation. To make this usable as a Java 8 default method, the Kotlin code must be compiled with the `-Xjvm-default=all` compiler option. This allows Java classes implementing `Robot` to inherit the `move()` implementation. Requires JVM target 1.8 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// compile with -Xjvm-default=all\n\ninterface Robot {\n    fun move() { println(\"~walking~\") }  // will be default in the Java interface\n    fun speak(): Unit\n}\n```\n\n----------------------------------------\n\nTITLE: Context Receivers to Explicit Parameters Migration (Kotlin)\nDESCRIPTION: This Kotlin code illustrates migrating from context receivers to explicit parameters. The 'Before' code shows a function using context receivers, while the 'After' code demonstrates the same function with an explicit parameter representing the context.  This is one suggested migration path away from context receivers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(ContextReceiverType)\nfun someFunction() {\n    contextReceiverMember()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun someFunction(explicitContext: ContextReceiverType) {\n    explicitContext.contextReceiverMember()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reflection to Create Multiple Data Object Instances\nDESCRIPTION: Illustrates a potential edge case where multiple instances of a `data object` can be created using platform reflection. It demonstrates that even with multiple instances, the `equals()` function ensures they are treated as equal, and advises against using `===` for comparison.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.lang.reflect.Constructor\n\ndata object MySingleton\n\nfun main() {\n    val evilTwin = createInstanceViaReflection()\n\n    println(MySingleton) \n    // MySingleton\n\n    println(evilTwin) \n    // MySingleton\n\n    // Even when a library forcefully creates a second instance of MySingleton, \n    // its equals() function returns true:\n    println(MySingleton == evilTwin) \n    // true\n\n    // Don't compare data objects using ===\n    println(MySingleton === evilTwin) \n    // false\n}\n\nfun createInstanceViaReflection(): MySingleton {\n    // Kotlin reflection does not permit the instantiation of data objects.\n    // This creates a new MySingleton instance \"by force\" (using Java platform reflection)\n    // Don't do this yourself!\n    return (MySingleton.javaClass.declaredConstructors[0].apply { isAccessible = true } as Constructor<MySingleton>).newInstance()\n}\n```\n\n----------------------------------------\n\nTITLE: JVM String Concatenation and Path Extensions Examples in Kotlin\nDESCRIPTION: Examples of Kotlin language features including string concatenation using invokedynamic and Path extensions syntax for file operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/releases.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninvokedynamic\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nPath(\"dir\") / \"file.txt\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArray.copyInto()\n```\n\n----------------------------------------\n\nTITLE: Kotlin class member property reference\nDESCRIPTION: Shows how to access a property that is a member of a class using the `::` operator. It exemplifies using `A::p` to retrieve the value of `p` from an instance of class `A`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    class A(val p: Int)\n    val prop = A::p\n    println(prop.get(A(1)))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Native Implementation of Interface\nDESCRIPTION: Shows Native-specific implementation of the Identity interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nactual fun buildIdentity(): Identity = NativeIdentity()\n\nclass NativeIdentity(\n    override val userName: String = getlogin()?.toKString() ?: \"None\",\n    override val processID: Long = getpid().toLong()\n) : Identity\n```\n\n----------------------------------------\n\nTITLE: Basic Kotlin Interop Template\nDESCRIPTION: Initial Kotlin code structure showing import of the C interop library with placeholders for function pointer usage. This demonstrates the basic setup for calling C functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-function-pointers-from-c.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n   \n    accept_fun(/* fix me*/)\n    val useMe = supply_fun()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Time Source on Android using elapsedRealtimeNanos in Kotlin\nDESCRIPTION: This snippet defines a custom `TimeSource` implementation for Android that uses `SystemClock.elapsedRealtimeNanos()` to track time even when the device is in deep sleep. It overrides the `read()` function to return the elapsed real-time in nanoseconds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nobject RealtimeMonotonicTimeSource : AbstractLongTimeSource(DurationUnit.NANOSECONDS) {\n    override fun read(): Long = SystemClock.elapsedRealtimeNanos()\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Padding Configuration in Kotlin\nDESCRIPTION: This code demonstrates how to use the `withPadding` function to configure the padding behavior of Base64 encoding and decoding. It shows how to create `Base64` instances with different padding options (`PRESENT` and `ABSENT`) and use them to encode and decode data. Requires Kotlin 2.0.20 and `@OptIn(ExperimentalEncodingApi::class)` or `-opt-in=kotlin.io.encoding.ExperimentalEncodingApi`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.io.encoding.Base64\nimport kotlin.io.encoding.ExperimentalEncodingApi\n\n@OptIn(ExperimentalEncodingApi::class)\nfun main() {\n    // Example data to encode\n    val data = \"fooba\".toByteArray()\n\n    // Creates a Base64 instance with URL-safe alphabet and PRESENT padding\n    val base64Present = Base64.UrlSafe.withPadding(Base64.PaddingOption.PRESENT)\n    val encodedDataPresent = base64Present.encode(data)\n    println(\"Encoded data with PRESENT padding: $encodedDataPresent\")\n    // Encoded data with PRESENT padding: Zm9vYmE=\n\n    // Creates a Base64 instance with URL-safe alphabet and ABSENT padding\n    val base64Absent = Base64.UrlSafe.withPadding(Base64.PaddingOption.ABSENT)\n    val encodedDataAbsent = base64Absent.encode(data)\n    println(\"Encoded data with ABSENT padding: $encodedDataAbsent\")\n    // Encoded data with ABSENT padding: Zm9vYmE\n\n    // Decodes the data back\n    val decodedDataPresent = base64Present.decode(encodedDataPresent)\n    println(\"Decoded data with PRESENT padding: ${String(decodedDataPresent)}\")\n    // Decoded data with PRESENT padding: fooba\n\n    val decodedDataAbsent = base64Absent.decode(encodedDataAbsent)\n    println(\"Decoded data with ABSENT padding: ${String(decodedDataAbsent)}\")\n    // Decoded data with ABSENT padding: fooba\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Frameworks in CocoaPods Gradle Plugin\nDESCRIPTION: Example showing how to configure a Kotlin framework in the CocoaPods Gradle plugin. Starting with Kotlin 1.8.0, frameworks are linked dynamically by default, replacing the previous static implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    cocoapods {\n        framework {\n            baseName = \"MyFramework\"\n            isStatic = false // Now dynamic by default\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Ruby with rbenv\nDESCRIPTION: This code snippet demonstrates how to install a specific version of Ruby using rbenv.  It's a necessary step before installing CocoaPods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrbenv install 3.0.0\n```\n\n----------------------------------------\n\nTITLE: JVM Implementation of Platform-Specific Code\nDESCRIPTION: Provides JVM-specific implementation for UUID generation using java.util.UUID and a placeholder for socket implementation using okhttp3.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/multiplatform.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.*\n\nactual fun randomUUID() = UUID.randomUUID().toString()\n\nactual class PlatformSocket actual constructor(url: String) {\n   // Use okhttp3 in implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Generic Enum Entries with enumEntries<T> Function in Kotlin\nDESCRIPTION: This snippet shows how to implement a generic inline function using reified type parameters to print all entries of any enum class in Kotlin 2.0.0 and above with the enumEntries<T>() function. The function printAllValues uses joinToString and the name property to create a comma-separated string of all entry names. Dependencies include Kotlin 2.0.0 or newer for enumEntries. The function is type safe and prevents creating new arrays on each call, unlike enumValues. Input is the generic enum type, output is a printout of its entry names.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/enum-classes.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class RGB { RED, GREEN, BLUE }\n\ninline fun <reified T : Enum<T>> printAllValues() {\n    println(enumEntries<T>().joinToString { it.name })\n}\n\nprintAllValues<RGB>() \n// RED, GREEN, BLUE\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Locally Using Yarn\nDESCRIPTION: This code snippet provides commands to run different types of e2e tests locally or in CI environments using yarn. These include tests in headless, headed, and debug modes, with or without visual tests. Commands are given for both local and continuous integration (CI) environments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n  - `yarn test` to run all tests in headless mode locally.\n  - `yarn test:e2e` to run e2e tests locally, visual tests are also included.\n  - `yarn test:e2e:skip-visual` to run e2e tests without visual tests locally.\n  - `yarn test:production` to run the subset of e2e tests that are meant to check the production locally.\n\n  There are also additional options to run tests:\n  - `yarn run test:e2e:ci` or `yarn test:production:ci` to run tests in CI environments.\n  - `yarn test:e2e:headed` or `yarn test:production:headed` to run tests in headed mode locally.\n  - `yarn test:e2e:debug` or `yarn test:production:debug` to run e2e tests in headed mode with debug locally.\n```\n\n----------------------------------------\n\nTITLE: Implementing and Instantiating Function Types via Custom Classes in Kotlin\nDESCRIPTION: Defines a class implementing a function type interface by overriding the invoke operator, showcasing how classes can act as function objects. Instantiates the class and assigns it to a function type variable. Assumes the existence of the TODO body for the transformation function. Demonstrates advanced usage of Kotlin's type system and operator overloading.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntTransformer: (Int) -> Int {\n    override operator fun invoke(x: Int): Int = TODO()\n}\n\nval intFunction: (Int) -> Int = IntTransformer()\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Creation Function in Kotlin DSL\nDESCRIPTION: Implementation of the 'html' builder function that creates the root HTML element. It takes a function literal with receiver as a parameter, initializes an HTML instance, and returns it.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun html(init: HTML.() -> Unit): HTML {\n    val html = HTML()\n    html.init()\n    return html\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WASI function\nDESCRIPTION: This Kotlin snippet shows how to import a WASI function using the `@WasmImport` annotation.  This enables the use of Kotlin/Wasm outside of browsers by accessing system resources with WASI APIs. Requires the kotlin-stdlib-wasm dependency.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.wasm.WasmImport\n\n@WasmImport(\"wasi_snapshot_preview1\", \"clock_time_get\")\nprivate external fun wasiRawClockTimeGet(clockId: Int, precision: Long, resultPtr: Int): Int\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Multiplatform Library Dependency in Kotlin\nDESCRIPTION: This snippet demonstrates how to add a shared multiplatform library dependency in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"io.ktor:ktor-client-core:%ktorVersion%\")\n        }\n        androidMain.dependencies {\n            // dependency to a platform part of ktor-client will be added automatically\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NullPointerException Output Example - Java\nDESCRIPTION: Shows the output traceback when a Java method is called with a null argument causing a NullPointerException. This snippet is not actual code but illustrates the exception details produced in a Java runtime stack trace for null dereference errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\njava.lang.NullPointerException: Cannot invoke \\\"String.length()\\\" because \\\"a\\\" is null\\n    at test.java.Nullability.stringLength(Nullability.java:8)\\n    at test.java.Nullability.main(Nullability.java:12)\\n    at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\\n    at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization of Top-Level Properties (Kotlin)\nDESCRIPTION: This Kotlin snippet illustrates lazy initialization of a top-level property in Kotlin/JS. The property's value is computed only upon its first usage, improving application startup performance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval a = run {\n    val result = // intensive computations\n    println(result)\n    result\n} // value is computed upon the first usage\n```\n\n----------------------------------------\n\nTITLE: Disabling Objective-C Generics in Kotlin/Native Compilation\nDESCRIPTION: Gradle configuration to disable Objective-C generics support when compiling Kotlin/Native code. This option can be used if generics cause issues with existing Objective-C or Swift code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.all {\n            freeCompilerArgs += \"-Xno-objc-generics\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library Configuration in Kotlin\nDESCRIPTION: Demonstrates how to configure a shared library build for iOS Arm64 platform using Kotlin DSL in Gradle. This produces platform-specific shared objects with C language headers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-faq.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64(\"mylib\") {\n        binaries.sharedLib()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a singleton in Kotlin using the `object` keyword. Singletons are classes that have only one instance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Resource {\n    val name = \"Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using KClass for Class Reference Annotation Parameters in Kotlin\nDESCRIPTION: Defines a Kotlin annotation `Ann` that accepts `KClass` parameters (`arg1`, `arg2`) to represent class references. It demonstrates applying `@Ann` to `MyClass`, passing `String::class` and `Int::class` as arguments. The Kotlin compiler automatically converts these to Java `Class` objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.reflect.KClass\n\nannotation class Ann(val arg1: KClass<*>, val arg2: KClass<out Any>)\n\n@Ann(String::class, Int::class) class MyClass\n```\n\n----------------------------------------\n\nTITLE: Recursive Directory Copy with Error Handling in Kotlin\nDESCRIPTION: Demonstrates how to recursively copy directories using copyToRecursively() with custom error handling. The code shows how to log errors and terminate the operation when an exception occurs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceRoot.copyToRecursively(destinationRoot, followLinks = false,\n    onError = { source, target, exception ->\n        logger.logError(exception, \"Failed to copy $source to $target\")\n        OnErrorResult.TERMINATE\n    })\n```\n\n----------------------------------------\n\nTITLE: Java Base Class with NotNull Type Parameter\nDESCRIPTION: This Java code defines a generic `Base` class with a type parameter `T` annotated with `@NotNull`. This enforces that the type argument used with `Base` should be non-nullable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class Base<@NotNull T> {}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Delegated Property Instance - Kotlin\nDESCRIPTION: Illustrates reading a delegated property from an instance of a class using the previously defined delegate. Upon access, the custom delegate's getValue method is invoked, allowing side effects or dynamic value retrieval. Requires the Example and Delegate classes as previously defined.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval e = Example()\nprintln(e.p)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Suspending Function in Kotlin with Coroutines\nDESCRIPTION: Demonstrates a Kotlin suspending function using coroutines that executes asynchronous operations, which will impact how completion handlers are called in Swift.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\n// coroutineScope, launch, and delay are from kotlinx.coroutines\nsuspend fun asyncFunctionExample() = coroutineScope {\n    launch {\n        delay(1000L)\n        println(\"World!\")\n    }\n    println(\"Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions in Kotlin\nDESCRIPTION: This section introduces functions in Kotlin with examples. Functions can have two Int parameters, return types, and a function body can be an expression with an inferred return type. It highlights both value-returning and Unit return type functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n//sampleEnd\n\nfun main() {\n    print(\"sum of 3 and 5 is \")\n    println(sum(3, 5))\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nfun sum(a: Int, b: Int) = a + b\n//sampleEnd\n\nfun main() {\n    println(\"sum of 19 and 23 is \\${sum(19, 23)}\")\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of \\$a and \\$b is \\${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nfun printSum(a: Int, b: Int) {\n    println(\"sum of \\$a and \\$b is \\${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n```\n\n----------------------------------------\n\nTITLE: When Expression Kotlin\nDESCRIPTION: Demonstrates using 'when' as an expression, returning a value based on the matched branch.  Contrasts this with 'when' as a statement, which performs actions without returning a value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Returns a string assigned to the \n// text variable\nval text = when (x) {\n    1 -> \"x == 1\"\n    2 -> \"x == 2\"\n    else -> \"x is neither 1 nor 2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Variant Selection Attributes for Custom Configuration - Kotlin - Kotlin\nDESCRIPTION: This detailed Kotlin DSL snippet configures attributes for the custom Gradle configuration to ensure correct variant selection. It sets the Usage and Category attributes to match runtime and library artifacts, respectively, and demonstrates how to specify a Gradle Plugin API version for targeted variant selection. Dependencies: 'Usage', 'Category', 'GradlePluginApiVersion' classes. Input: names of usage, category, and plugin API version. Output: attributes correctly configured on customConfiguration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigurations {\n    customConfiguration {\n        attributes {\n            attribute(\n                Usage.USAGE_ATTRIBUTE,\n                project.objects.named(Usage.class, Usage.JAVA_RUNTIME)\n            )\n            attribute(\n                Category.CATEGORY_ATTRIBUTE,\n                project.objects.named(Category.class, Category.LIBRARY)\n            )\n            // If you want to depend on a specific KGP variant:\n            attribute(\n                GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE,\n                project.objects.named(\"7.0\")\n            )\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Native-specific Actual Function\nDESCRIPTION: Shows the Native implementation of the buildIdentity function using POSIX APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage identity\n\nimport kotlinx.cinterop.toKString\nimport platform.posix.getlogin\nimport platform.posix.getpid\n\nactual fun buildIdentity() = Identity(\n    getlogin()?.toKString() ?: \"None\",\n    getpid().toLong()\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Function Parameters with Trailing Comma - Kotlin\nDESCRIPTION: Shows how to use a trailing comma in a function's parameter list, which can help with style consistency and version control diffs. No functional implications; available as a syntactic preference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun powerOf(\n    number: Int,\n    exponent: Int, // trailing comma\n) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Using Updated UUID Functionality in Kotlin\nDESCRIPTION: Demonstrates parsing UUIDs in different formats, converting to hex-dash format, and comparing/sorting UUIDs using the new Comparable interface. Requires opting in to the experimental UUID API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.uuid.ExperimentalUuidApi\nimport kotlin.uuid.Uuid\n\n@OptIn(ExperimentalUuidApi::class)\nfun main() {\n    // parse() accepts a UUID in a plain hexadecimal format\n    val uuid = Uuid.parse(\"550e8400e29b41d4a716446655440000\")\n\n    // Converts it to the hex-and-dash format\n    val hexDashFormat = uuid.toHexDashString()\n \n    // Outputs the UUID in the hex-and-dash format\n    println(hexDashFormat)\n\n    // Outputs UUIDs in ascending order\n    println(\n        listOf(\n            uuid,\n            Uuid.parse(\"780e8400e29b41d4a716446655440005\"),\n            Uuid.parse(\"5ab88400e29b41d4a716446655440076\")\n        ).sorted()\n    )\n   }\n```\n\n----------------------------------------\n\nTITLE: Invalid Direct Access on Nullable String Kotlin\nDESCRIPTION: Demonstrates attempting to directly access the `length` property of a nullable string variable without a null check, resulting in a compilation error.  This is because accessing properties directly on a nullable type without proper handling can lead to NullPointerExceptions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a nullable string to a variable\n    var b: String? = \"abc\"\n    // Re-assigns null to the nullable variable\n    b = null\n    // Tries to directly return the length of a nullable variable\n    val l = b.length\n    print(l)\n    // Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type String? \n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Native Cache Configuration\nDESCRIPTION: Properties to control Kotlin/Native compiler caching behavior and daemon settings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-improving-compilation-time.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.native.disableCompilerDaemon=true\nkotlin.native.cacheKind=none\nkotlin.native.cacheKind.iosSimulatorArm64=none\n```\n\n----------------------------------------\n\nTITLE: Working with Unsigned Integers in Kotlin\nDESCRIPTION: Demonstrates the usage of unsigned integer types introduced in Kotlin 1.3, including literal suffixes, conversions, and basic operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n// You can define unsigned types using literal suffixes\nval uint = 42u \nval ulong = 42uL\nval ubyte: UByte = 255u\n\n// You can convert signed types to unsigned and vice versa via stdlib extensions:\nval int = uint.toInt()\nval byte = ubyte.toByte()\nval ulong2 = byte.toULong()\n\n// Unsigned types support similar operators:\nval x = 20u + 22u\nval y = 1u shl 8\nval z = \"128\".toUByte()\nval range = 1u..5u\n//sampleEnd\nprintln(\"ubyte: $ubyte, byte: $byte, ulong2: $ulong2\")\nprintln(\"x: $x, y: $y, z: $z, range: $range\")\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Return Type in Kotlin\nDESCRIPTION: This example shows a function with a Unit return type, which should be omitted.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() { // \": Unit\" is omitted here\n\n}\n```\n\n----------------------------------------\n\nTITLE: Load Data with Pagination from API using Kotlin DataFrame\nDESCRIPTION: Defines a function `load` to fetch data from paginated API endpoints. It retrieves data across multiple pages using the `nextPageToken` and concatenates the results into a DataFrame.  The function takes the API path and maximum number of pages as input.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun load(path: String, maxPages: Int): AnyFrame {\n\n    // Initializes a mutable list to store rows of data.\n    val rows = mutableListOf<AnyRow>()\n\n    // Sets the initial page path for data loading.\n    var pagePath = path\n    do {\n\n        // Loads data from the current page path.\n        val row = load(pagePath)\n        // Adds the loaded data as a row to the list.\n        rows.add(row)\n       \n        // Retrieves the token for the next page, if available.\n        val next = row.getValueOrNull<String>(\"nextPageToken\")\n        // Updates the page path for the next iteration, including the new token.\n        pagePath = path + \"&pageToken=\" + next\n\n        // Continues loading pages until there's no next page.\n    } while (next != null && rows.size < maxPages) \n    \n    // Concatenates and returns all loaded rows as a DataFrame.\n    return rows.concat() \n}\n```\n\n----------------------------------------\n\nTITLE: JVM Implementation of Interface\nDESCRIPTION: Demonstrates JVM-specific implementation of the Identity interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nactual fun buildIdentity(): Identity = JVMIdentity()\n\nclass JVMIdentity(\n    override val userName: String = System.getProperty(\"user.name\") ?: \"none\",\n    override val processID: Long = ProcessHandle.current().pid()\n) : Identity\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Synthetic Property References with Kotlin Gradle DSL\nDESCRIPTION: Gradle configuration using Kotlin DSL to enable Java synthetic property references by setting the language version to 1.9.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks\n    .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()\n    .configureEach {\n        compilerOptions\n            .languageVersion\n            .set(\n                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n            )\n    }\n```\n\n----------------------------------------\n\nTITLE: Swift Enum Access\nDESCRIPTION: This Swift code demonstrates how to access the properties (enum values) of the 'Colors' enum class defined in Kotlin.  It shows accessing each enum value, such as Colors.red, Colors.green, and Colors.blue.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nColors.red\nColors.green\nColors.blue\n```\n\n----------------------------------------\n\nTITLE: Using Indexed Collection Operations in Kotlin\nDESCRIPTION: Demonstrates the onEachIndexed and flatMapIndexed functions which provide access to both the element and its index during collection operations. Useful when the position of elements is relevant to the operation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    listOf(\"a\", \"b\", \"c\", \"d\").onEachIndexed {\n        index, item -> println(index.toString() + \":\" + item)\n    }\n\n   val list = listOf(\"hello\", \"kot\", \"lin\", \"world\")\n          val kotlin = list.flatMapIndexed { index, item ->\n              if (index in 1..2) item.toList() else emptyList() \n          }\n//sampleEnd\n          println(kotlin)\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Min/Max Function Non-nullable Returns\nDESCRIPTION: Demonstrates the behavior difference between maxOrNull() and max() collection functions when handling empty collections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf<Int>()\n    println(numbers.maxOrNull()) // \"null\"\n    println(numbers.max()) // \"Exception in... Collection is empty.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Contracts to Improve Smartcast Analysis\nDESCRIPTION: This snippet shows how contracts enable better smartcast analysis by declaring relationships between a function's return value and its parameters. The require function uses a contract to enable smartcast of 's' after the type check.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun require(condition: Boolean) {\n    // This is a syntax form which tells the compiler:\n    // \"if this function returns successfully, then the passed 'condition' is true\"\n    contract { returns() implies condition }\n    if (!condition) throw IllegalArgumentException(...)\n}\n\nfun foo(s: String?) {\n    require(s is String)\n    // s is smartcast to 'String' here, because otherwise\n    // 'require' would have thrown an exception\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kotlinx Library Dependency in Kotlin\nDESCRIPTION: This snippet demonstrates how to add a kotlinx library dependency to the common source set in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Custom SQL Query in Kotlin\nDESCRIPTION: This code snippet demonstrates how to execute a custom SQL query against a database using JDBC.  It sets connection properties, defines the SQL query, executes the query, and retrieves the results as a DataFrame. Error handling using `try-with-resources` ensures proper connection closure.  Requires the `USER_NAME`, `PASSWORD`, and `URL` to be defined.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval props = Properties()\nprops.setProperty(\"user\", USER_NAME)\nprops.setProperty(\"password\", PASSWORD)\n\nval TARANTINO_FILMS_SQL_QUERY = \"\"\"\n    SELECT name, year, rank, GROUP_CONCAT(genre) as \\\"genres\\\"\n    FROM movies JOIN movies_directors ON movie_id = movies.id\n    JOIN directors ON directors.id=director_id LEFT JOIN movies_genres ON movies.id = movies_genres.movie_id\n    WHERE directors.first_name = \\\"Quentin\\\" AND directors.last_name = \\\"Tarantino\\\"\n    GROUP BY name, year, rank\n    ORDER BY year\n    \"\"\"\n\n// Retrieves a list of Quentin Tarantino's movies, including their name, year, rank, and a concatenated string of all genres. \n// The results are grouped by name, year, rank, and sorted by year.\n\nvar dfTarantinoMovies: DataFrame<*>\n\nDriverManager.getConnection(URL, props).use { connection ->\n   connection.createStatement().use { st ->\n      st.executeQuery(TARANTINO_FILMS_SQL_QUERY).use { rs ->\n         val dfTarantinoFilmsSchema = DataFrame.getSchemaForResultSet(rs, connection)\n         dfTarantinoFilmsSchema.print()\n\n         dfTarantinoMovies = DataFrame.readResultSet(rs, connection)\n         dfTarantinoMovies\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Yarn Lock Directory with Kotlin DSL\nDESCRIPTION: Configuration for changing the directory and filename for yarn.lock in Kotlin/JS projects to customize the lockfile management.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().lockFileDirectory =\n        project.rootDir.resolve(\"my-kotlin-js-store\")\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().lockFileName = \"my-yarn.lock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Property - Complex Getters/Setters\nDESCRIPTION: Illustrates the formatting for properties with more complex `get` and `set` implementations, requiring each keyword to be on a separate line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nval foo: String\n    get() { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Wasm Gradle Configuration\nDESCRIPTION: Gradle configuration for enabling and setting up a Kotlin/Wasm project with multiplatform support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"1.8.20\"\n}\n\nkotlin {\n    wasm {\n        binaries.executable()\n        browser {\n        }\n    }\n    sourceSets {\n        val commonMain by getting\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin(\"test\"))\n            }\n        }\n        val wasmMain by getting\n        val wasmTest by getting\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Gradle Plugin Version in Kotlin Build Script\nDESCRIPTION: Configuration to update the Kotlin Gradle plugin version to match the standard library version. This helps prevent conflicts between the plugin and library versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // replace `<...>` with the plugin name\n    kotlin(\"<...>\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Function in Kotlin\nDESCRIPTION: Defines a top-level Kotlin function `foo` that returns a string. This function is intended to be called from JavaScript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() = \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSR-305 compiler flags in Kotlin\nDESCRIPTION: The `-Xjsr305` compiler flag configures the JSR-305 checks, allowing you to set the behavior for non-`@UnderMigration` annotations, override the behavior for the `@UnderMigration` annotations, or override the behavior for a single annotation. The options include `strict`, `warn`, and `ignore` to control the level of checking.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Dependencies on Kotlinx Libraries\nDESCRIPTION: This code demonstrates adding a kotlinx library dependency to a platform-specific source set (JVM in this case) in a Kotlin multiplatform project. This is useful when a platform-specific implementation is needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        jvmMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        jvmMain {\n            dependencies {\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Safepoint Signposts for GC Monitoring\nDESCRIPTION: Configuration option to enable GC pause tracking using Xcode Instruments on Apple platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nkotlin.native.binary.enableSafepointSignposts=true\n```\n\n----------------------------------------\n\nTITLE: Running University Group Geolocation Script - Bash\nDESCRIPTION: This shell command demonstrates how to execute the universities_geolocator.py script for automatically determining geocoordinates of user groups using the Google Geocoding API. Before running, set the 'GOOGLE_API_KEY' environment variable to your valid Google Maps API key. The Python script consumes the key and updates the user group configuration with latitude and longitude. Requires Python 3 and the specific script, as well as a valid Google API key. Outputs updated YAML or logs processing results.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ GOOGLE_API_KEY=\\\"...\\\" python scripts/universities_geolocator.py\\n\n```\n\n----------------------------------------\n\nTITLE: Build Report Label Configuration\nDESCRIPTION: This snippet configures a label for marking build reports using the `kotlin.build.report.label` property. This is optional and can be used to add context to the report (e.g., debug parameters).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n# Optional. Label for marking your build report (for example, debug parameters)\nkotlin.build.report.label=some_label\n```\n\n----------------------------------------\n\nTITLE: Kotlin Long Method Signature Formatting\nDESCRIPTION: Demonstrates formatting a function with a long signature that spans multiple lines, ensuring proper indentation of parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun longMethodName(\n    argument: ArgumentType = defaultValue,\n    argument2: AnotherArgumentType,\n): ReturnType {\n    // body\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Executable Binary Kotlin\nDESCRIPTION: Configures an executable binary for a specific target in Kotlin. This involves setting the compilation source, linker options, base name, and entry point. It also demonstrates accessing the output file, link task, and run task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    linuxX64 { // Use your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit This Example Kotlin\nDESCRIPTION: Illustrates the use of implicit `this` when calling member functions. It shows that `this.` can be omitted when calling a member function on the current object, but cautions that it can lead to calling a non-member function with the same name if not used carefully.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/this-expressions.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    fun printLine() { println(\"Local function\") }\n    \n    class A {\n        fun printLine() { println(\"Member function\") }\n\n        fun invokePrintLine(omitThis: Boolean = false) {\n            if (omitThis) printLine()\n            else this.printLine()\n        }\n    }\n    \n    A().invokePrintLine() // Member function\n    A().invokePrintLine(omitThis = true) // Local function\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Kapt Annotation Processor Stats and Generated File Report - Text\nDESCRIPTION: An example of log output including timing and file generation stats per annotation processor, as seen when processor statistics and verbose logging are enabled. Provided for reference when troubleshooting or analyzing processor behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n[INFO] Annotation processor stats:\n[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms\n[INFO] Generated files report:\n[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0\n```\n\n----------------------------------------\n\nTITLE: Dispatch Behavior of Overridden Kotlin Member Extensions\nDESCRIPTION: Demonstrates the dispatch mechanism for member extensions declared as `open` and overridden in subclasses. The dispatch is virtual based on the dispatch receiver's type (the class containing the extension, like `BaseCaller` vs `DerivedCaller`) but static based on the extension receiver's type (the type being extended, `Base` vs `Derived`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Base { }\n\nclass Derived : Base() { }\n\nopeng class BaseCaller {\n    open fun Base.printFunctionInfo() {\n        println(\"Base extension function in BaseCaller\")\n    }\n\n    open fun Derived.printFunctionInfo() {\n        println(\"Derived extension function in BaseCaller\")\n    }\n\n    fun call(b: Base) {\n        b.printFunctionInfo()   // call the extension function\n    }\n}\n\nclass DerivedCaller: BaseCaller() {\n    override fun Base.printFunctionInfo() {\n        println(\"Base extension function in DerivedCaller\")\n    }\n\n    override fun Derived.printFunctionInfo() {\n        println(\"Derived extension function in DerivedCaller\")\n    }\n}\n\nfun main() {\n    BaseCaller().call(Base())   // \"Base extension function in BaseCaller\"\n    DerivedCaller().call(Base())  // \"Base extension function in DerivedCaller\" - dispatch receiver is resolved virtually\n    DerivedCaller().call(Derived())  // \"Base extension function in DerivedCaller\" - extension receiver is resolved statically\n}\n```\n\n----------------------------------------\n\nTITLE: Converting DataFrame to Map for Lets-Plot\nDESCRIPTION: This code snippet converts a Kotlin DataFrame named `df` into a `Map` data structure, which is the format required by the Lets-Plot library. It utilizes the `.toMap()` function available for DataFrames to perform this conversion, making the data suitable for plotting with Lets-Plot.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = df.toMap()\n```\n\n----------------------------------------\n\nTITLE: Programmatic JVM Target Validation Mode Configuration in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure the JVM target validation mode at the task level within a `build.gradle.kts` file. This allows you to set the validation mode (e.g., WARNING) for a specific compilation task, offering more granular control than setting it globally in `gradle.properties`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile>(\"compileKotlin\") {\n    jvmTargetValidationMode.set(org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING)\n}\n```\n\n----------------------------------------\n\nTITLE: SAM Conversion for Java Interfaces with Different Arguments\nDESCRIPTION: Demonstrates how Kotlin 1.4 supports SAM conversion for Java interfaces with different argument types, allowing more flexible use of lambdas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class A {\n    public static void foo(Runnable r1, Runnable r2) {}\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun test(r1: Runnable) {\n    A.foo(r1) {}  // Works in Kotlin 1.4\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Regular Object vs Data Object String Representation\nDESCRIPTION: Demonstrates the difference in string representation between regular object and data object declarations, showing the cleaner toString output for data objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.example\nobject MyObject\ndata object MyDataObject\n\nfun main() {\n    println(MyObject) // org.example.MyObject@1f32e575\n    println(MyDataObject) // MyDataObject\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring No-arg Plugin with Gradle (Groovy DSL)\nDESCRIPTION: Shows how to apply the no-arg compiler plugin in a Gradle build script using Groovy DSL. This enables the generation of zero-argument constructors for annotated classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.plugin.noarg\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Publication for All Targets in Kotlin Multiplatform\nDESCRIPTION: This code shows how to disable the publication of source code for all targets in a Kotlin multiplatform project using the withSourcesJar() API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-publish-lib.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    withSourcesJar(publish = false)\n\n    jvm()\n    linuxX64()\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalence Between Function Types With and Without Receiver in Kotlin\nDESCRIPTION: Demonstrates that function types of the forms A.(B) -> C and (A, B) -> C are interchangeable in certain contexts. Assigns an extension function type to a regular function type, then passes it as a parameter. Helps understand Kotlin's flexible function type system.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val repeatFun: String.(Int) -> String = { times -> this.repeat(times) }\n    val twoParameters: (String, Int) -> String = repeatFun // OK\n    \n    fun runTransformation(f: (String, Int) -> String): String {\n        return f(\"hello\", 3)\n    }\n    val result = runTransformation(repeatFun) // OK\n    //sampleEnd\n    println(\"result = $result\")\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing to Inference Results via Method Calls\nDESCRIPTION: Shows how calling methods on a builder lambda's receiver can contribute type information for builder inference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = buildList {\n    // Type argument is inferred into String based on the passed \"value\" argument\n    add(\"value\")\n} // result has the List<String> type inferred\n```\n\n----------------------------------------\n\nTITLE: Running Gradle in Continuous Mode - Bash\nDESCRIPTION: This Bash command initializes Gradle in continuous compilation mode for a Kotlin/JS project, enabling automated recompilation whenever code changes are detected. It uses the Gradle wrapper to execute the 'run' task with the '--continuous' flag. 'gradlew' must be present and executable in the project directory. The command outputs log messages and keeps the process active until manually stopped, facilitating live code reloading via the integrated development server.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/dev-server-continuous-compilation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew run --continuous\n```\n\n----------------------------------------\n\nTITLE: When Statement Kotlin\nDESCRIPTION: Shows how to use 'when' as a statement that returns nothing, but triggers a print statement. The provided condition will be tested until one condition is true.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Returns nothing but triggers a \n// print statement\nwhen (x) {\n    1 -> print(\"x == 1\")\n    2 -> print(\"x == 2\")\n    else -> print(\"x is neither 1 nor 2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Calling @JsStatic Annotated Function from JavaScript\nDESCRIPTION: Demonstrates how functions annotated with `@JsStatic` in Kotlin are called from JavaScript. `C.callStatic()` works because it's generated as a static method, while `C.callNonStatic()` causes an error as it's not static. The original instance methods remain accessible via the companion object (`C.Companion`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nC.callStatic();              // Works, accessing the static function\nC.callNonStatic();           // Error, not a static function in the generated JavaScript\nC.Companion.callStatic();    // Instance method remains\nC.Companion.callNonStatic(); // The only way it works\n```\n\n----------------------------------------\n\nTITLE: Kotlin Base class with property\nDESCRIPTION: This Kotlin code defines a simple Kotlin class with a property `a`, serving as the base class in an example where a Java class inherits from it.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Base {\n    val a = \"aa\"\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Kotlin Files into One Java Class with @JvmMultifileClass\nDESCRIPTION: Illustrates using `@file:JvmName(\"Utils\")` and `@file:JvmMultifileClass` annotations in multiple Kotlin files (`oldutils.kt`, `newutils.kt`) within the same package. This directs the compiler to generate a single Java facade class (`org.example.Utils`) containing all top-level functions (`getTime`, `getDate`) from these files, allowing calls like `org.example.Utils.getTime()` and `org.example.Utils.getDate()` from Java.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// oldutils.kt\n@file:JvmName(\"Utils\")\n@file:JvmMultifileClass\n\npackage org.example\n\nfun getTime() { /*...*/ }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// newutils.kt\n@file:JvmName(\"Utils\")\n@file:JvmMultifileClass\n\npackage org.example\n\nfun getDate() { /*...*/ }\n```\n\nLANGUAGE: java\nCODE:\n```\n// Java\norg.example.Utils.getTime();\norg.example.Utils.getDate();\n```\n\n----------------------------------------\n\nTITLE: Increment/Decrement Operators with Smart Casts in Kotlin\nDESCRIPTION: This code illustrates the fix for increment and decrement operators with smart casts in Kotlin 2.0.0. The compiler now correctly updates the type of an object after applying an increment or decrement operator, resolving potential type mismatch errors and enabling accurate type-safe calls to interface methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Rho {\n    operator fun inc(): Sigma = TODO()\n}\n\ninterface Sigma : Rho {\n    fun sigma() = Unit\n}\n\ninterface Tau {\n    fun tau() = Unit\n}\n\nfun main(input: Rho) {\n    var unknownObject: Rho = input\n\n    // Check if unknownObject inherits from the Tau interface\n    // Note, it's possible that unknownObject inherits from both\n    // Rho and Tau interfaces.\n    if (unknownObject is Tau) {\n\n        // Use the overloaded inc() operator from interface Rho.\n        // In Kotlin 2.0.0, the type of unknownObject is smart-cast to\n        // Sigma.\n        ++unknownObject\n\n        // In Kotlin 2.0.0, the compiler knows unknownObject has type\n        // Sigma, so the sigma() function can be called successfully.\n        unknownObject.sigma()\n\n        // In Kotlin 1.9.20, the compiler doesn't perform a smart cast\n        // when inc() is called so the compiler still thinks that \n        // unknownObject has type Tau. Calling the sigma() function \n        // throws a compile-time error.\n        \n        // In Kotlin 2.0.0, the compiler knows unknownObject has type\n        // Sigma, so calling the tau() function throws a compile-time \n        // error.\n        unknownObject.tau()\n        // Unresolved reference 'tau'\n\n        // In Kotlin 1.9.20, since the compiler mistakenly thinks that \n        // unknownObject has type Tau, the tau() function can be called,\n        // but it throws a ClassCastException.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Kotlin/JS Project to Heroku\nDESCRIPTION: This set of Git commands stages changes, commits them, and pushes the Kotlin/JS project to Heroku for deployment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\ngit commit -m \"add stage task and static content root configuration\"\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Declaring a Record-Like Data Class with @JvmRecord - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to declare a JVM record by annotating a data class with @JvmRecord. The class Person has two immutable properties: name (String) and age (Int). The annotation instructs the Kotlin compiler (when targeting JVM 16+) to generate JVM bytecode compatible with Java records, with property accessor methods and record components. The data class must fulfill record-related requirements: it must be non-local, immutable, wholly constructed via the primary constructor, and not extend any class except interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-records.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n@JvmRecord\ndata class Person(val name: String, val age: Int)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin OSGi Bundle in Gradle (Kotlin DSL)\nDESCRIPTION: This Kotlin DSL snippet shows how to add the kotlin-osgi-bundle dependency in a build.gradle.kts file for Gradle projects. Requires Gradle with Kotlin DSL and the Kotlin plugin applied. The implementation function declares the OSGi bundle dependency, ensuring proper OSGi compatibility. Inputs are dependency declarations, and the output is the OSGi bundle inclusion.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-osgi.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\\n    implementation(kotlin(\"osgi-bundle\"))\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Kotlin script example for listing folders\nDESCRIPTION: This Kotlin script takes a path as an argument and lists all directories within that path.  It utilizes Java's `File` class for file system operations.  If no path is provided via the `-d` argument, it defaults to the current directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.io.File\n\n// Get the passed in path, i.e. \"-d some/path\" or use the current path.\nval path = if (args.contains(\"-d\")) args[1 + args.indexOf(\"-d\")]\n           else \".\"\n\nval folders = File(path).listFiles { file -> file.isDirectory() }\nfolders?.forEach { folder -> println(folder) }\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Publication for Specific Target in Kotlin Multiplatform\nDESCRIPTION: This snippet demonstrates how to disable source code publication for a specific target (JVM in this case) while keeping it enabled for others.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-publish-lib.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n     // Disable sources publication only for JVM:\n    jvm {\n        withSourcesJar(publish = false)\n    }\n    linuxX64()\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing IndexOutOfBoundsException in Kotlin\nDESCRIPTION: This code snippet demonstrates how an IndexOutOfBoundsException is thrown when attempting to remove an element at an invalid index in a mutable list in Kotlin.  It is important to check list boundaries to prevent this exception.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval myList = mutableListOf(1, 2, 3)\nmyList.removeAt(3)  // throws IndexOutOfBoundsException\n```\n\n----------------------------------------\n\nTITLE: Video Player Component Implementation\nDESCRIPTION: Creates a reusable video player component with styling and props interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nimport csstype.*\nimport react.*\nimport emotion.react.css\nimport react.dom.html.ReactHTML.button\nimport react.dom.html.ReactHTML.div\nimport react.dom.html.ReactHTML.h3\nimport react.dom.html.ReactHTML.img\n\nexternal interface VideoPlayerProps : Props {\n    var video: Video\n}\n\nval VideoPlayer = FC<VideoPlayerProps> { props ->\n    div {\n        css {\n            position = Position.absolute\n            top = 10.px\n            right = 10.px\n        }\n        h3 {\n            +\"${props.video.speaker}: ${props.video.title}\"\n        }\n        img {\n            src = \"https://via.placeholder.com/640x360.png?text=Video+Player+Placeholder\"              \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Lambda with Long Parameter List in Kotlin\nDESCRIPTION: This example shows how to format a multiline lambda when the parameter list is too long to fit on one line. The arrow should be placed on a separate line after the parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nfoo {\n   context: Context,\n   environment: Env\n   ->\n   context.configureEnv(environment)\n}\n```\n\n----------------------------------------\n\nTITLE: Java Class Using NonNullApi with UnderMigration\nDESCRIPTION: This Java code defines a class `Test` annotated with `@NonNullApi`. Since `@NonNullApi` has `@UnderMigration(status = MigrationStatus.WARN)`, usages of `Test` in Kotlin will produce warnings for nullability mismatches instead of errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n// The types in the class are non-nullable, but only warnings are reported\n// because `@NonNullApi` is annotated `@UnderMigration(status = MigrationStatus.WARN)`\n@NonNullApi\npublic class Test {}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/Wasm Application in Deno\nDESCRIPTION: Gradle command to build and run the Kotlin/Wasm application in Deno environment, an alternative JavaScript runtime with built-in WebAssembly support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmWasiDenoRun\n```\n\n----------------------------------------\n\nTITLE: LINQ-style Operations in Kotlin\nDESCRIPTION: Demonstrates chaining multiple operations in a LINQ-style using lambda expressions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nstrings.filter { it.length == 5 }.sortedBy { it }.map { it.uppercase() }\n```\n\n----------------------------------------\n\nTITLE: Kotlin Expression Body Function\nDESCRIPTION: Illustrates the preferred usage of expression bodies for functions containing a single expression.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(): Int {     // bad\n    return 1 \n}\n\nfun foo() = 1        // good\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Structure with Kotlin's Type-Safe DSL\nDESCRIPTION: This Kotlin code snippet demonstrates the equivalent of the target HTML structure using Kotlin's type-safe HTML DSL provided by the React wrappers. It uses functions like `h1`, `div`, `p`, and `img` along with lambda expressions to build the UI hierarchy in a type-safe manner within Kotlin code. Text content is added using the unary plus operator, and attributes like `src` are set directly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nh1 {\n    +\"KotlinConf Explorer\"\n}\ndiv {\n    h3 {\n        +\"Videos to watch\"\n    }\n    p {\n        + \"John Doe: Building and breaking things\"\n    }\n    p {\n        +\"Jane Smith: The development process\"\n    }\n    p {\n        +\"Matt Miller: The Web 7.0\"\n    }\n    h3 {\n        +\"Videos watched\"\n    }\n    p {\n        +\"Tom Jerry: Mouseless development\"\n    }\n}\ndiv {\n    h3 {\n        +\"John Doe: Building and breaking things\"\n    }\n    img {\n       src = \"https://via.placeholder.com/640x360.png?text=Video+Player+Placeholder\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing All Contents from a Package in Kotlin\nDESCRIPTION: Example of importing all accessible contents from a package using the wildcard operator. This makes all public declarations from the specified package available without qualification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/packages.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.example.* // everything in 'org.example' becomes accessible\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Example\nDESCRIPTION: Presents a JavaScript module named 'users.mjs' that exports a variable 'maxUsers' and a class 'User'. This module is used to demonstrate how to use the `@JsModule` annotation to import JavaScript modules into Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// users.mjs\nexport let maxUsers = 10;\n\nexport class User {\n    constructor (username) {\n        this.username = username;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add a new column to DataFrame in Kotlin\nDESCRIPTION: This code snippet shows how to add a new column named 'year' to an existing DataFrame called 'movies'. It extracts the year from the 'title' column using a regular expression.  The extracted year is converted to an integer; if no year is found, it defaults to -1.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval moviesWithYear = movies\n    .add(\"year\") { \n        \"\\\\d{4}\".toRegex()\n            .findAll(title)\n            .lastOrNull()\n            ?.value\n            ?.toInt()\n            ?: -1\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Set of Non-Null Items in Kotlin\nDESCRIPTION: Demonstrates the setOfNotNull() function which creates a set containing only the non-null items from the provided arguments. This function is useful for filtering out null values during set creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val set = setOfNotNull(null, 1, 2, 0, null)\n    println(set)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Interface Implementations in KSP\nDESCRIPTION: This Kotlin code snippet demonstrates how to access the interfaces implemented by a class using KSP. It leverages 'superTypes' of 'KSClassDeclaration' to resolve and filter interface types. This is done without type resolution, making it direct and efficient.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nksClassDeclaration.superTypes\n    .map { it.resolve() }\n    .filter { (it?.declaration as? KSClassDeclaration)?.classKind == ClassKind.INTERFACE }\n```\n\n----------------------------------------\n\nTITLE: Objective-C Interface Definition for Kotlin Types\nDESCRIPTION: Defines an Objective-C interface with Swift name attribute to map Kotlin number types. It includes methods for initializing a new instance from the corresponding simple type and for creating a new number instance with the corresponding simple type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n__attribute__((swift_name(\"Kotlin__TYPE__\")))\n@interface Demo__TYPE__ : DemoNumber\n- (instancetype)initWith__TYPE__:(__CTYPE__)value;\n+ (instancetype)numberWith__TYPE__:(__CTYPE__)value;\n@end;\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Interoperability with Groovy DSL in Kotlin Multiplatform\nDESCRIPTION: Example showing how to configure native interoperability in a Kotlin Multiplatform project using the Groovy DSL. It demonstrates setting up C interop definitions, specifying package names, compiler options, and include directories for header files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                    definitionFile = project.file(\"def-file.def\")\n                    \n                    // Package to place the Kotlin API generated.\n                    packageName 'org.sample'\n                    \n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts '-Ipath/to/headers'\n                    \n                    // Directories for header search (an eqivalent of the -I<path> compiler option).\n                    includeDirs.allHeaders(\"path1\", \"path2\")\n                    \n                    // Additional directories to search headers listed in the 'headerFilter' def-file option.\n                    // -headerFilterAdditionalSearchPrefix command line option equivalent.\n                    includeDirs.headerFilterOnly(\"path1\", \"path2\")\n                    \n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(\"include/directory\", \"another/directory\")\n                }\n                \n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lets-Plot and DataFrame libraries in Kotlin Notebook\nDESCRIPTION: This snippet imports the Lets-Plot and Kotlin DataFrame libraries within a Kotlin Notebook.  It uses the `%use` magic command, which is specific to Kotlin Notebooks, to include the necessary dependencies for plotting and data manipulation. This command simplifies dependency management within the notebook environment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n%use lets-plot\n%use dataframe\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Integer Conversions via Gradle\nDESCRIPTION: This snippet demonstrates how to enable implicit integer conversions for C interop in Kotlin/Native using a Gradle build file. The `-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion` compiler option is added to the `freeCompilerArgs` to enable the feature.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile>().configureEach {\n    compilerOptions.freeCompilerArgs.addAll(\n        \"-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Kotlin 1.4 Checked Exception Generation for Delegation\nDESCRIPTION: Kotlin compiler flag to temporarily revert the Kotlin 1.4 change that stopped generating checked exceptions in JVM bytecode when delegating to Kotlin interfaces (KT-35834), restoring the pre-1.4 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-14.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-XXLanguage:-DoNotGenerateThrowsForDelegatedKotlinMembers\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional Interface Manually in Kotlin\nDESCRIPTION: This snippet demonstrates how to implement the 'IntPredicate' functional interface using an anonymous object. The 'isEven' variable is assigned an instance of 'IntPredicate' that overrides the 'accept' function to return true if the input integer is even. This approach is required if not using SAM conversion and doesn't require any extra dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Creating an instance of a class\nval isEven = object : IntPredicate {\n   override fun accept(i: Int): Boolean {\n       return i % 2 == 0\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Underscore for Unused Parameters\nDESCRIPTION: Shows how to use underscore to ignore unused parameters in lambda expressions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.forEach { (_, value) -> println(\"$value!\") }\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Annotation Processors - Groovy\nDESCRIPTION: Demonstrates use of the `kapt { arguments {} }` block in Groovy DSL (build.gradle) to supply arguments to annotation processors. This lets you specify key-value pairs as extra options for annotation processing tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nkapt {\n    arguments {\n        arg(\"key\", \"value\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filling a Kotlin List with a Specific Value\nDESCRIPTION: Shows how to replace all elements in a Kotlin list with the same value using 'fill()'. This operation changes all list elements to the specified value. Inputs are the list and fill value, producing a fully filled list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.fill(3)\n    println(numbers)\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Synthetic Property References with Groovy Gradle DSL\nDESCRIPTION: Gradle configuration using Groovy DSL to enable Java synthetic property references by setting the language version to 1.9.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)\n    .configureEach {\n        compilerOptions.languageVersion =\n            org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n    }\n```\n\n----------------------------------------\n\nTITLE: iOS Implementation of Platform-Specific Code\nDESCRIPTION: Implements iOS-specific code for UUID generation using NSUUID and provides a placeholder for socket implementation using platform.Foundation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/multiplatform.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// iOS\nimport platform.Foundation.NSUUID\n\nactual fun randomUUID(): String = NSUUID().UUIDString()\n\nactual class PlatformSocket actual constructor(url: String) {\n   // Use platform.Foundation in implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class Header - Multiple Interfaces\nDESCRIPTION: Illustrates how to format a class header that inherits from a superclass and implements multiple interfaces, placing each interface on a separate line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(\n    id: Int,\n    name: String,\n    surname: String\n) : Human(id, name),\n    KotlinMaker { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Importing Nested JS Package with @JsModule and @JsQualifier (Kotlin)\nDESCRIPTION: Kotlin code demonstrating how to import members from a nested JavaScript package (`mylib.pkg1`) within a module (`extModule`). It uses the file-level annotations `@file:JsModule(\"extModule\")` and `@file:JsQualifier(\"mylib.pkg1\")` to map the JavaScript functions `foo` and `bar` to external Kotlin functions within the `extlib.pkg1` package.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JsModule(\"extModule\")\n@file:JsQualifier(\"mylib.pkg1\")\n\npackage extlib.pkg1\n\nexternal fun foo()\n\nexternal fun bar()\n```\n\n----------------------------------------\n\nTITLE: Providing JVM Arguments for kapt Worker Process - Kotlin\nDESCRIPTION: Shows how to append JVM arguments (such as -Xmx memory settings) to Gradle kapt worker processes using Kotlin DSL and the Worker API. Requires access to `org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask` and is used for tuning JVM performance during annotation processing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask>()\n    .configureEach {\n        kaptProcessJvmArgs.add(\"-Xmx512m\")\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Map in Kotlin\nDESCRIPTION: This snippet shows how to create a read-only map in Kotlin using the `mapOf()` function. The resulting map cannot be modified after creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n\n----------------------------------------\n\nTITLE: Smart Casts for Function Type Properties in Kotlin\nDESCRIPTION: This code demonstrates the improved smart cast behavior for class properties with function types in Kotlin 2.0.0. It showcases how the compiler correctly infers non-nullability within conditional blocks after a null check, avoiding unnecessary nullable type errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Holder(val provider: (() -> Unit)?) {\n    fun process() {\n        // In Kotlin 2.0.0, if provider isn't null,\n        // it is smart-cast\n        if (provider != null) {\n            // The compiler knows that provider isn't null\n            provider()\n\n            // In 1.9.20, the compiler doesn't know that provider isn't \n            // null, so it triggers an error:\n            // Reference has a nullable type '(() -> Unit)?', use explicit '?.invoke()' to make a function-like call instead\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Compose Compiler Feature Flags (Kotlin)\nDESCRIPTION: Demonstrates how to configure Compose compiler feature flags using the `featureFlags` property within the `composeCompiler` block in Gradle. This example flips the default values of several flags.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\ncomposeCompiler {\n    featureFlags = setOf(\n        ComposeFeatureFlag.IntrinsicRemember.disabled(),\n        ComposeFeatureFlag.OptimizeNonSkippingGroups,\n        ComposeFeatureFlag.StrongSkipping.disabled()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: If Expression with Block Kotlin\nDESCRIPTION: Shows how to use 'if' with code blocks, where the last expression in the block is the returned value. Highlights that when using 'if' as an expression, the 'else' branch is mandatory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval max = if (a > b) {\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n```\n\n----------------------------------------\n\nTITLE: Exported Kotlin function that consumes a MutableMap\nDESCRIPTION: This Kotlin code shows an exported Kotlin function `@JsExport` which accepts a `MutableMap<String, Int>`. Using `@JsExport` on a declaration that uses a collection triggers Kotlin to generate a factory that is accessible on the Javascript/Typescript side. This allows Javascript or Typescript to construct a Kotlin `MutableMap`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\n@JsExport\nfun consumeMutableMap(map: MutableMap<String, Int>)\n```\n\n----------------------------------------\n\nTITLE: Setting Task-Specific Kotlin Daemon JVM Arguments in Groovy DSL\nDESCRIPTION: Configures JVM arguments for the Kotlin daemon for a specific compile task in Groovy DSL. This may start a new Kotlin daemon instance for the task execution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_23\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .matching {\n        it.name == \"compileKotlin\" && it instanceof CompileUsingKotlinDaemon\n    }\n    .configureEach {\n        kotlinDaemonJvmArguments.set([\"-Xmx1g\", \"-Xms512m\"])\n    }\n```\n\n----------------------------------------\n\nTITLE: Working with Characters in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to declare and print characters, including special characters using escape sequences and Unicode. It showcases basic character operations that can be executed in a Kotlin program. There are no external dependencies, and it requires Kotlin compiler version 1.3 or higher. Key parameters include character literals and escape sequences. The expected output includes a single character, a newline, and a Unicode character representation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/characters.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val aChar: Char = 'a'\n \n    println(aChar)\n    println('\\n') // Prints an extra newline character\n    println('\\uFF00')\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using Require Function with Power-assert (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to use the `require()` function with the Power-assert plugin. First, the function must be added to the `powerAssert {}` block in the build.gradle.kts file.  This allows the plugin to provide detailed information about failures of the `require` condition.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nimport org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi\n\n@OptIn(ExperimentalKotlinGradlePluginApi::class)\npowerAssert {\n    functions = listOf(\"kotlin.assert\", \"kotlin.require\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RequireExampleTest {\n\n    @Test\n    fun testRequireFunction() {\n        val value = \"\"\n        require(value.isNotEmpty()) { \"Value should not be empty\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Declaration Names with @ObjCName - Kotlin\nDESCRIPTION: This snippet demonstrates how to use the `@ObjCName` annotation in Kotlin to specify custom Objective-C and Swift names for Kotlin classes and functions. This avoids renaming Kotlin declarations when used in Swift/Objective-C code and allows for a more Swift-friendly API. The annotation requires opt-in and is marked as experimental.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n@ObjCName(swiftName = \"MySwiftArray\")\nclass MyKotlinArray {\n    @ObjCName(\"index\")\n    fun indexOf(@ObjCName(\"of\") element: String): Int = TODO()\n}\n\n// Usage with the ObjCName annotations\nlet array = MySwiftArray()\nlet index = array.index(of: \"element\")\n```\n\n----------------------------------------\n\nTITLE: Final Java Translation with Generated Wildcards\nDESCRIPTION: Shows how Kotlin actually translates the functions with appropriate wildcard generation in parameters but not in return types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nBox<Derived> boxDerived(Derived value) { ... }\n\nBase unboxBase(Box<? extends Base> box) { ... }\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Values with Early Returns on Null Checks in Kotlin\nDESCRIPTION: This snippet shows an alternative way to handle nullable values returned by `parseInt`. The `printProduct` function checks `x` and `y` individually for null. If a null is found, an error message is printed, and the function returns early. If both checks pass, `x` and `y` are smart-cast to non-nullable `Int` and their product is printed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nfun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    \n//sampleStart\n    // ...\n    if (x == null) {\n        println(\"Wrong number format in arg1: '$arg1'\")\n        return\n    }\n    if (y == null) {\n        println(\"Wrong number format in arg2: '$arg2'\")\n        return\n    }\n\n    // x and y are automatically cast to non-nullable after null check\n    println(x * y)\n//sampleEnd\n}\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"99\", \"b\")\n}\n```\n\n----------------------------------------\n\nTITLE: Describing JavaScript Settings Objects with external Interfaces in Kotlin/JS\nDESCRIPTION: Implements a typical use-case: defining a complex external interface for a JavaScript settings object (e.g., JQueryAjaxSettings), and showing how to instantiate it using js(\"{}\") and configure its properties via apply(). Demonstrates passing the configured object to an external static method, and handling async completion by providing a Kotlin lambda callback. Highlights idiomatic Kotlin/JS usage for adapting JS configuration object patterns.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal interface JQueryAjaxSettings {\n    var async: Boolean\n\n    var cache: Boolean\n\n    var complete: (JQueryXHR, String) -> Unit\n\n    // etc\n}\n\nfun JQueryAjaxSettings(): JQueryAjaxSettings = js(\"{}\")\n\nexternal class JQuery {\n    companion object {\n        fun get(settings: JQueryAjaxSettings): JQueryXHR\n    }\n}\n\nfun sendQuery() {\n    JQuery.get(JQueryAjaxSettings().apply {\n        complete = { (xhr, data) ->\n            window.alert(\"Request complete\")\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Reflection Features in Kotlin/JS\nDESCRIPTION: Demonstrates obtaining class names (`simpleName`, `js.name`), checking instance types (`isInstance`), casting (`cast`), and accessing reified type arguments (`typeof()`) using the supported reflection capabilities in Kotlin/JS. It defines base and derived classes (`Shape`, `Rectangle`) and uses reflection functions within the `main` method and a helper generic function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-reflection.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\nopen class Shape\nclass Rectangle : Shape()\n\ninline fun <reified T> accessReifiedTypeArg() =\n    println(typeOf<T>().toString())\n\nfun main() {\n    val s = Shape()\n    val r = Rectangle()\n\n    println(r::class.simpleName) // Prints \"Rectangle\"\n    println(Shape::class.simpleName) // Prints \"Shape\"\n    println(Shape::class.js.name) // Prints \"Shape\"\n\n    println(Shape::class.isInstance(r)) // Prints \"true\"\n    println(Rectangle::class.isInstance(s)) // Prints \"false\"\n    val rShape = Shape::class.cast(r) // Casts a Rectangle \"r\" to Shape\n\n    accessReifiedTypeArg<Rectangle>() // Accesses the type via typeOf(). Prints \"Rectangle\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Solving Reachable Numbers with HashSet and readLine()!! in Earlier Kotlin\nDESCRIPTION: Presents the main solution for the \"Reachable Numbers\" problem tailored for Kotlin versions prior to 1.6.0. It reads the input integer using `readLine()!!.toInt()`, utilizing the not-null assertion operator `!!` because `readLine()` returns a nullable `String?`. It employs a `HashSet` to track reached numbers while iteratively applying the `f` function (defined elsewhere) and prints the size of the set upon completion.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var n = readLine()!!.toInt() // read integer from the input\n    val reached = HashSet<Int>() // a mutable hash set \n    while (reached.add(n)) n = f(n) // iterate function f\n    println(reached.size) // print answer to the output\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/Native Compiler Options via Gradle\nDESCRIPTION: This snippet shows how to configure Kotlin/Native compiler options using a Gradle build file. It demonstrates how to suppress linkage warnings, raise linkage warnings to errors, and disable the partial linkage feature. These options are set using `freeCompilerArgs`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    macosX64(\"native\") {\n        binaries.executable()\n\n        compilations.configureEach {\n            compilerOptions.configure {\n                // To suppress linkage warnings:\n                freeCompilerArgs.add(\"-Xpartial-linkage-loglevel=INFO\")\n\n                // To raise linkage warnings to errors:\n                freeCompilerArgs.add(\"-Xpartial-linkage-loglevel=ERROR\")\n\n                // To disable the feature completely:\n                freeCompilerArgs.add(\"-Xpartial-linkage=disable\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM IR Backend in Gradle (Groovy DSL)\nDESCRIPTION: Configuration to enable the new JVM IR backend in a Gradle project using Groovy DSL. This sets the 'useIR' option to true for all Kotlin JVM compile tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile) {\n  kotlinOptions.useIR = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CocoaPods Library in Kotlin Code\nDESCRIPTION: Shows how to import a Pod library in Kotlin code using the cocoapods package namespace followed by the library name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport cocoapods.SDWebImage.*\n```\n\n----------------------------------------\n\nTITLE: Illustrating Smartcast Limitations with Extracted Checks\nDESCRIPTION: This code shows how smartcasts fail when type checks are extracted into separate functions. The compiler can't infer that 's' is not null after the isNotNull() check.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String?.isNotNull(): Boolean = this != null\n\nfun foo(s: String?) {\n    if (s.isNotNull()) s.length // No smartcast :(\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Recursive Generic Types Example\nDESCRIPTION: Comparison of container configuration code between Kotlin 1.5.20 and 1.5.30 showing improved type inference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin 1.5.20\nval containerA = PostgreSQLContainer<Nothing>(DockerImageName.parse(\"postgres:13-alpine\")).apply {\n    withDatabaseName(\"db\")\n    withUsername(\"user\")\n    withPassword(\"password\")\n    withInitScript(\"sql/schema.sql\")\n}\n\n// Kotlin 1.5.30\nval containerB = PostgreSQLContainer(DockerImageName.parse(\"postgres:13-alpine\"))\n    .withDatabaseName(\"db\")\n    .withUsername(\"user\")\n    .withPassword(\"password\")\n    .withInitScript(\"sql/schema.sql\")\n```\n\n----------------------------------------\n\nTITLE: Compiling a Program with a Kotlin/Native Library\nDESCRIPTION: Shows how to compile a Kotlin program while linking it with a previously created Kotlin/Native library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ kotlinc-native use.kt -l kotlinizer -o kohello\n```\n\n----------------------------------------\n\nTITLE: Styling Video Player with Kotlin Emotion CSS\nDESCRIPTION: Applies CSS styling to video player component using Kotlin Emotion wrapper.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndiv {\n    css {\n        position = Position.absolute\n        top = 10.px\n        right = 10.px\n    }\n    h3 {\n        +\"John Doe: Building and breaking things\"\n    }\n    img {\n        src = \"https://via.placeholder.com/640x360.png?text=Video+Player+Placeholder\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Expression Body - Long Line\nDESCRIPTION: Shows the formatting for expression body functions when the first line of the expression does not fit on the same line as the function declaration, indenting the expression body by four spaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun f(x: String, y: String, z: String) =\n    veryLongFunctionCallWithManyWords(andLongParametersToo(), x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Safe Casts with 'as?' Operator\nDESCRIPTION: This code demonstrates the safe cast operator `as?`. It attempts to cast a value to a specified type and returns `null` if the cast is not possible, preventing ClassCastExceptions.  It casts a variable of type `Any` to `Int` and `String`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Declares a variable of type Any, which can hold any type of value\n    val a: Any = \"Hello, Kotlin!\"\n\n    // Safe casts to Int using the 'as?' operator\n    val aInt: Int? = a as? Int\n    // Safe casts to String using the 'as?' operator\n    val aString: String? = a as? String\n\n    println(aInt)\n    // null\n    println(aString)\n    // \"Hello, Kotlin!\"\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Language and API Version Compatibility Flags\nDESCRIPTION: Command line switches for configuring Kotlin compiler compatibility modes. The -language-version flag restricts language features to a specific version, while -api-version limits access to newer Kotlin Standard Library APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-modes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-language-version X.Y\n```\n\nLANGUAGE: bash\nCODE:\n```\n-api-version X.Y\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack CSS Support in Kotlin/JS\nDESCRIPTION: Gradle configuration to enable CSS support for webpack tasks in a Kotlin/JS project using the commonWebpackConfig block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1420.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nbrowser {\n    commonWebpackConfig {\n        cssSupport.enabled = true\n    }\n    binaries.executable()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Referential Equality in Kotlin\nDESCRIPTION: This snippet illustrates referential equality in Kotlin using the `===` operator, which checks if two references point to the same object in memory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/equality.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n    var a = \"Hello\"\n    var b = a\n    var c = \"world\"\n    var d = \"world\"\n\n    println(a === b)\n    // true\n    println(a === c)\n    // false\n    println(c === d)\n    // true\n\n}\n```\n\n----------------------------------------\n\nTITLE: Try-Finally without Catch in Kotlin\nDESCRIPTION: Illustrates using a `try-finally` block without a `catch` block for resource cleanup. The `MockResource` simulates a resource, and the `finally` block ensures it's always closed, even if an exception occurs within the `try` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MockResource { \n    fun use() { \n        println(\"Resource being used\") \n        // Simulate a resource being used \n        // This throws an ArithmeticException if division by zero occurs\n        val result = 100 / 0\n        \n        // This line is not executed if an exception is thrown\n        println(\"Result: $result\") \n    }\n    \n    fun close() { \n        println(\"Resource closed\") \n    }\n}\n\nfun main() { \n    val resource = MockResource()\n//sampleStart \n    try {\n        \n        // Attempts to use the resource \n        resource.use()\n        \n    } finally {\n        \n        // Ensures that the resource is always closed, even if an exception occurs \n        resource.close()\n    }\n\n    // This line is not printed if an exception is thrown\n    println(\"End of the program\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlinx Coroutines Dependency with EAP Version in Gradle (Kotlin DSL)\nDESCRIPTION: This code shows how to specify a compatible version of the kotlinx.coroutines library that works with the Kotlin EAP version in Gradle using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/configure-build-for-eap.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesEapVersion%\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Null Safety Features in Kotlin\nDESCRIPTION: Demonstrates multiple null safety patterns in Kotlin including nullable types (String?), safe call operator (?.), smart casting after null checks, and the Elvis operator (?:) combined with Nothing return type for error handling. Shows how the compiler handles null safety checks and type inference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/safe.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun reply(condition: Boolean): String? =          // Nullability is part of Kotlin's type system\n   if (condition) \"I'm fine\" else null\n\nfun error(): Nothing =                            // Always throw an exception\n   throw IllegalStateException(\"Shouldn't be here\")\n\nfun main() {\n   val condition = true                        // Try replacing `true` with `false` and run the sample!\n   val message = reply(condition)              // The result is nullable\n   // println(message.uppercase())             // This line doesn't compile\n   println(message?.replace(\"fine\", \"okay\"))   // Access a nullable value in a safe manner\n   if (message != null) {                      // If you check that the type is right,\n      println(message.uppercase())             // the compiler will smart-cast it for you\n   }\n\n   val nonNull: String =                             // If the null-case throws an error,\n   reply(condition = true) ?: error()             // Kotlin can infer that the result is non-null\n   println(nonNull)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Collections using Stream API in Java\nDESCRIPTION: Illustrates using Java's Stream API to process a list of integers. It filters odd numbers, maps them to their negative string representation, and collects them into a single string joined by '; '.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Java\nList<Integer> numbers = List.of(1, 2, 3, 4, 5, 6);\nString invertedOddNumbers = numbers\n        .stream()\n        .filter(it -> it % 2 != 0)\n        .map(it -> -it)\n        .map(Object::toString)\n        .collect(Collectors.joining(\"; \"));\nSystem.out.println(invertedOddNumbers);\n```\n\n----------------------------------------\n\nTITLE: Replacing Prefix/Suffix using replaceAll and Regex in Java\nDESCRIPTION: Shows how to remove a specific prefix and suffix ('##') from a string in Java. It uses `String.replaceAll()` with a regular expression (`^##|##$`) that matches '##' at the beginning (`^`) or end (`$`) of the string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Java\nString input = \"##place##holder##\";\nString result = input.replaceAll(\"^##|##$\", \"\");\nSystem.out.println(result);\n```\n\n----------------------------------------\n\nTITLE: Inline Class with Secondary Constructor Example\nDESCRIPTION: Demonstrates the usage of secondary constructors with bodies in inline classes, including validation logic in both init blocks and constructors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class Person(private val fullName: String) {\n    // Allowed since Kotlin 1.4.30:\n    init { \n        check(fullName.isNotBlank()) {\n            \"Full name shouldn't be empty\"\n        }\n    }\n\n    // Preview available since Kotlin 1.8.20:\n    constructor(name: String, lastName: String) : this(\"$name $lastName\") {\n        check(lastName.isNotBlank()) {\n            \"Last name shouldn't be empty\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Kotlin APIs for C Functions\nDESCRIPTION: Kotlin function signatures generated from C function prototypes, showing type mappings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-primitive-data-types-from-c.md#2025-04-22_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun ints(c: kotlin.Byte, d: kotlin.Short, e: kotlin.Int, f: kotlin.Long)\nfun uints(c: kotlin.UByte, d: kotlin.UShort, e: kotlin.UInt, f: kotlin.ULong)\nfun doubles(a: kotlin.Float, b: kotlin.Double)\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Video Selection with State\nDESCRIPTION: Shows complete implementation of video list with selection state and visual indicator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval VideoList = FC<VideoListProps> { props ->\n    var selectedVideo: Video? by useState(null)\n    for (video in props.videos) {\n        p {\n            key = video.id.toString()\n            onClick = {\n                selectedVideo = video\n            }\n            if (video == selectedVideo) {\n                +\"▶ \"\n            }\n            +\"${video.speaker}: ${video.title}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM class file sharing in Gradle\nDESCRIPTION: This gradle property enables a new approach to share JVM artifacts between projects in Kotlin 2.0.20 by providing access to the compiled `.class` files instead of the compressed JAR artifact during compilation. This may improve build performance, but might degrade performance on Windows hosts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\nkotlin.jvm.addClassesVariant=true\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Multiplatform Plugin with Kotlin DSL\nDESCRIPTION: This code snippet shows how to apply the Kotlin Multiplatform Gradle plugin using the Kotlin Gradle DSL. It specifies the plugin's fully qualified name and version. The `%kotlinVersion%` is a placeholder for the actual Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Source Sets Kotlin DSL\nDESCRIPTION: Shows how to create a custom source set named `myMain` in a Kotlin Multiplatform project using Kotlin Gradle DSL. The custom source set is created using `by creating`.  It's important to connect this new source set to others to use it in compilations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val myMain by creating { /* ... */ } // create a new source set by the name 'MyMain'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kotlin Array with `arrayOf()`\nDESCRIPTION: Demonstrates creating a simple object-type array in Kotlin using the `arrayOf()` function, initialized with specific integer values. The `joinToString()` function is used to print the array's contents.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Creates an array with values [1, 2, 3]\n    val simpleArray = arrayOf(1, 2, 3)\n    println(simpleArray.joinToString())\n    // 1, 2, 3\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring kotlin-spring Plugin in Maven\nDESCRIPTION: Shows how to configure the kotlin-spring plugin in a Maven project. This plugin automatically makes Spring-annotated classes open without requiring explicit 'open' keywords.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<compilerPlugins>\n    <plugin>spring</plugin>\n</compilerPlugins>\n\n<dependencies>\n    <dependency>\n        <groupId>org.jetbrains.kotlin</groupId>\n        <artifactId>kotlin-maven-allopen</artifactId>\n        <version>${kotlin.version}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Disabling Annotation Processor Discovery in Gradle Properties\nDESCRIPTION: Configuration to disable the discovery of annotation processors in the compile classpath for enabling compile avoidance with kapt.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_17\n\nLANGUAGE: none\nCODE:\n```\nkapt.include.compile.classpath=false\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Gradle Dependencies in Groovy DSL\nDESCRIPTION: Demonstrates how to declare a standard Gradle dependency within the top-level `dependencies {}` block using Groovy DSL (`build.gradle`). This example adds a dependency on `org.example.myproject:1.1.0` using the `implementation` configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.example.myproject:1.1.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Guard Conditions in When Statement (Incorrect) Kotlin\nDESCRIPTION: This snippet demonstrates an incorrect way of using guard conditions within a when statement due to missing parentheses around the boolean expressions. Omitting parentheses can lead to unexpected behavior due to operator precedence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_61\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (status) {\n    is Status.Ok if status.info.isEmpty() || status.info.id == null -> \"no information\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Manipulation Functions in Kotlin\nDESCRIPTION: Shows the usage of new array manipulation functions for element-by-element operations, including comparison and conversion to string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val array = arrayOf(\"a\", \"b\", \"c\")\n    println(array.toString())  // JVM implementation: type-and-hash gibberish\n    println(array.contentToString())  // nicely formatted as list\n}\n```\n\n----------------------------------------\n\nTITLE: DSL Marker with Type Target for Function Types\nDESCRIPTION: Definition of a DSL marker annotation with explicit targeting for types, allowing it to be applied directly to function types like lambdas with receivers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n@Target(AnnotationTarget.TYPE)\n@DslMarker\nannotation class HtmlTagMarker\n```\n\n----------------------------------------\n\nTITLE: External Function Declaration (Kotlin)\nDESCRIPTION: Declares an external Kotlin function 'greet' that corresponds to the JavaScript function with the same name. The 'external' keyword indicates that the function's implementation is provided externally (in this case, by JavaScript).  This allows Kotlin code to call the JavaScript function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal fun greet(name: String)\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in Kotlin Native C Interop\nDESCRIPTION: This snippet shows how to specify the module to be imported when dealing with an Objective-C library that has a Clang module.  The `modules` property lists the Clang module to be included in the generated bindings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\nmodules = UIKit\n```\n\n----------------------------------------\n\nTITLE: Compile a Kotlin library\nDESCRIPTION: This command compiles the `hello.kt` file into a `hello.jar` file without including the Kotlin runtime. This is suitable for libraries that will be used by other Kotlin applications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc hello.kt -d hello.jar\n```\n\n----------------------------------------\n\nTITLE: Compiled Destructuring Code in Kotlin\nDESCRIPTION: Demonstrates how destructuring declarations are compiled in Kotlin. The declaration is translated into individual variable assignments using `componentN()` functions on the object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval name = person.component1()\nval age = person.component2()\n```\n\n----------------------------------------\n\nTITLE: Update column values in DataFrame in Kotlin\nDESCRIPTION: This snippet demonstrates how to update the values in the 'title' column of a DataFrame named 'moviesWithYear'.  It removes the year information (e.g., '(2023)') from each movie title using a regular expression replacement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval moviesTitle = moviesWithYear\n    .update(\"title\") {\n        \"\\\\s*\\\\(\\\\d{4}\\\\)\\\\s*$\".toRegex().replace(title, \"\")\n    }\n```\n\n----------------------------------------\n\nTITLE: Kotlin Actual Class Implementation\nDESCRIPTION: This Kotlin code shows the actual class `PlatformFileSystem` which implements the abstract function `listFiles()` from the `FileSystem` class. This demonstrates how the abstract function is implemented in the platform-specific code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nactual open class PlatformFileSystem : FileSystem {\n    actual override fun listFiles() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function with Receiver\nDESCRIPTION: Demonstrates declaring anonymous functions with explicit receiver type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nval sum = fun Int.(other: Int): Int = this + other\n```\n\n----------------------------------------\n\nTITLE: Defining Kotlin Objects and Companion Objects\nDESCRIPTION: Example of defining a Kotlin object and a class with a companion object. This demonstrates the structure that can now be more intuitively accessed from Swift/Objective-C.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyObject {\n    val x = \"Some value\"\n}\n\nclass MyClass {\n    companion object {\n        val x = \"Some value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Build Script Example (Groovy)\nDESCRIPTION: A complete example of a `build.gradle` file using Groovy DSL, including KSP plugin, Kotlin JVM plugin, Maven Central repository, and dependencies for Kotlin standard library and Dagger processor. The %kspSupportedKotlinVersion%-%kspVersion% and %kotlinVersion% placeholders should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'\n    id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib:%kotlinVersion%'\n    implementation 'com.google.dagger:dagger-compiler:2.51.1'\n    ksp 'com.google.dagger:dagger-compiler:2.51.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/Wasm Application in WasmEdge\nDESCRIPTION: Gradle command to build and run the Kotlin/Wasm application in WasmEdge environment, a high-performance WebAssembly runtime focused on cloud-native and edge computing scenarios.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmWasiWasmEdgeRun\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Source Sets Groovy DSL\nDESCRIPTION: Shows how to create a custom source set named `myMain` in a Kotlin Multiplatform project using Groovy DSL. The custom source set is created directly within the `sourceSets` block. It's important to connect this new source set to others for use in compilations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        myMain { /* ... */ } // create or configure a source set by the name 'myMain'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a box plot with Lets-Plot\nDESCRIPTION: This code generates a box plot using the Lets-Plot library. It maps \"City\" to the x-axis and \"Temperature\" to the y-axis.  `geomBoxplot { fill = \"City\" }` generates the box plot with colors assigned by city. `scaleFillManual` customizes the fill colors to light yellow, light magenta, and light green. `ggsize(700, 500)` sets the dimensions of the plot.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Specifies X and Y axes, categories, plot size, and plot type\nval boxPlot = ggplot(data) { x = \"City\"; y = \"Temperature\" } + ggsize(700, 500) + geomBoxplot { fill = \"City\" } +\n    // Customizes colors        \n    scaleFillManual(values = listOf(\"light_yellow\", \"light_magenta\", \"light_green\"))\nboxPlot\n```\n\n----------------------------------------\n\nTITLE: Deprecating Specific JS-Only APIs in Kotlin/JS Stdlib\nDESCRIPTION: Outlines the deprecation of several JavaScript-only functions in the Kotlin standard library as a source incompatible change. Affected functions include `String.concat(String)`, `String.match(regex: String)`, `String.matches(regex: String)`, and array `sort` functions taking a comparison lambda. Deprecation warnings start in 1.6.0, escalating to errors in 1.7.0, with removal planned for 1.8.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Running Kotlin/Wasm Development Server\nDESCRIPTION: Command to start the Kotlin/Wasm development server using Gradle from the project root directory\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmJsBrowserDevelopmentRun\n```\n\n----------------------------------------\n\nTITLE: If Expression Example Kotlin\nDESCRIPTION: Demonstrates the use of 'if' as an expression in Kotlin, including simple 'if', 'if-else', and 'else if' constructs. It showcases how 'if' can return a value and be used in variable assignments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val a = 2\n    val b = 3\n\n    //sampleStart\n    var max = a\n    if (a < b) max = b\n\n    // With else\n    if (a > b) {\n      max = a\n    } else {\n      max = b\n    }\n\n    // As expression\n    max = if (a > b) a else b\n\n    // You can also use `else if` in expressions:\n    val maxLimit = 1\n    val maxOrLimit = if (maxLimit > a) maxLimit else if (a > b) a else b\n  \n    println(\"max is $max\")\n    // max is 3\n    println(\"maxOrLimit is $maxOrLimit\")\n    // maxOrLimit is 3\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using Early Returns in Kotlin Functions\nDESCRIPTION: This code demonstrates the use of early returns in Kotlin functions. Early returns allow you to exit a function prematurely based on certain conditions. This can simplify the control flow and improve readability, especially when handling error conditions or validation checks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// A list of registered usernames\nval registeredUsernames = mutableListOf(\"john_doe\", \"jane_smith\")\n\n// A list of registered emails\nval registeredEmails = mutableListOf(\"john@example.com\", \"jane@example.com\")\n\nfun registerUser(username: String, email: String): String {\n    // Early return if the username is already taken\n    if (username in registeredUsernames) {\n        return \"Username already taken. Please choose a different username.\"\n    }\n\n    // Early return if the email is already registered\n    if (email in registeredEmails) {\n        return \"Email already registered. Please use a different email.\"\n    }\n\n    // Proceed with the registration if the username and email are not taken\n    registeredUsernames.add(username)\n    registeredEmails.add(email)\n\n    return \"User registered successfully: $username\"\n}\n\nfun main() {\n    println(registerUser(\"john_doe\", \"newjohn@example.com\"))\n    // Username already taken. Please choose a different username.\n    println(registerUser(\"new_user\", \"newuser@example.com\"))\n    // User registered successfully: new_user\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM IR Backend in Maven\nDESCRIPTION: Configuration to enable the new JVM IR backend in a Maven project. This adds the '-Xuse-ir' argument to the Kotlin compiler configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <args>\n        <arg>-Xuse-ir</arg>\n    </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Finding Element Positions in Kotlin Lists\nDESCRIPTION: Demonstrates linear search in a Kotlin list using 'indexOf()', 'lastIndexOf()', 'indexOfFirst()', and 'indexOfLast()'. Requires the Kotlin standard library. Inputs are elements or predicates, returning the index or -1 if the element is not found.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/list-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4, 2, 5)\n    println(numbers.indexOf(2))\n    println(numbers.lastIndexOf(2))\n//sampleEnd\n}\n\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers.indexOfFirst { it > 2})\n    println(numbers.indexOfLast { it % 2 == 1})\n//sampleEnd\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Constraints on Kotlin Standard Library Dependencies in Groovy Build Script\nDESCRIPTION: Configuration in Groovy DSL to explicitly require specific versions of kotlin-stdlib-jdk7 and kotlin-stdlib-jdk8 to resolve version conflicts with transitive dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_36\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    constraints {\n        add(\"implementation\", \"org.jetbrains.kotlin:kotlin-stdlib-jdk7\") {\n            version {\n                require(\"%kotlinVersion%\")\n            }\n        }\n        add(\"implementation\", \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\") {\n            version {\n                require(\"%kotlinVersion%\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options at the extension level (Groovy DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for all targets in the project using the Groovy DSL. This setting applies as a default to all compilations unless overridden at a lower level. Requires Gradle Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_25\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    // Configures all compilations of all targets:\n    compilerOptions {\n        allWarningsAsErrors = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Predefined Compilations Kotlin DSL\nDESCRIPTION: Demonstrates how to access predefined compilations (`main` and `test`) within the `jvm` target and retrieve their outputs and runtime dependencies using Kotlin Gradle DSL. The main compilation is accessed using `by compilations.getting` and test compilation is accessed using bracket notation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            output // get the main compilation output\n        }\n\n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing for Loop in Kotlin\nDESCRIPTION: Provides usage examples of the for loop in Kotlin to iterate over items in a list and using indices. The snippets show how to access list elements directly and through their indices, printing each element during iteration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (index in items.indices) {\n        println(\"item at \\$index is \\${items[index]}\")\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Dependencies for Source Sets in Kotlin Multiplatform - Kotlin\nDESCRIPTION: This snippet demonstrates specifying a library ('com.example:my-library:1.0') as an implementation dependency for the 'commonMain' source set in a Kotlin Multiplatform Gradle build using Kotlin DSL. It must be placed inside the 'kotlin' block. This facilitates sharing dependencies across all platforms targeted by the commonMain source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"com.example:my-library:1.0\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Late-initialized Properties in Kotlin\nDESCRIPTION: Example of using the lateinit modifier for a property that cannot be initialized at declaration time. Common in dependency injection or test setup scenarios.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/properties.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\npublic class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // dereference directly\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overloading Member Functions with Kotlin Extension Functions\nDESCRIPTION: Illustrates that extension functions can overload member functions if they have the same name but different signatures. Here, the extension function `printFunctionType(i: Int)` is called because it matches the call signature.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    class Example {\n        fun printFunctionType() { println(\"Class method\") }\n    }\n    \n    fun Example.printFunctionType(i: Int) { println(\"Extension function #$i\") }\n    \n    Example().printFunctionType(1)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Directories in Kotlin\nDESCRIPTION: This code snippet demonstrates how to use the `createParentDirectories()` extension function in Kotlin 1.9.0 to create a new file along with all the necessary parent directories.  It is used in combination with `copyToRecursively()` to ensure the destination path exists.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nsourcePath.copyToRecursively(\n    destinationPath.createParentDirectories(), \n    followLinks = false\n )\n```\n\n----------------------------------------\n\nTITLE: Using Java Synthetic Property References in Kotlin\nDESCRIPTION: Example of using Java synthetic property references in Kotlin to sort a list of Person objects by age and access the name property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval persons = listOf(Person(\"Jack\", 11), Person(\"Sofie\", 12), Person(\"Peter\", 11))\n    persons\n        // Call a reference to Java synthetic property:\n        .sortedBy(Person::age)\n        // Call Java getter via the Kotlin property syntax:\n        .forEach { person -> println(person.name) }\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Dependencies in Kotlin Multiplatform\nDESCRIPTION: Example showing how to configure a CocoaPods dependency in a Kotlin Multiplatform project. The snippet demonstrates setting up iOS target architecture, CocoaPods version, deployment target, and adding a pod dependency with specific configuration options including version, compiler options, linking settings, and local source path.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-dsl-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n    \n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n      \n        pod(\"pod_dependency\") {\n            version = \"1.0\"\n            extraOpts += listOf(\"-compiler-option\")\n            linkOnly = true\n            source = path(project.file(\"../pod_dependency\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Targets in a Kotlin Multiplatform Module\nDESCRIPTION: This Kotlin Gradle script shows how to set up iOS targets in a Kotlin Multiplatform module that will be included in an umbrella module for XCFramework export.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    androidTarget {\n        //...\n    }\n    \n    iosX64()\n    iosArm64()\n    iosSimulatorArm64()\n    \n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding social share buttons to VideoPlayer component in Kotlin\nDESCRIPTION: Implements email and Telegram share buttons in the VideoPlayer component using components from react-share.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\ndiv {\n    css {\n         position = Position.absolute\n         top = 10.px\n         right = 10.px\n     }\n    EmailShareButton {\n        url = props.video.videoUrl\n        EmailIcon {\n            size = 32\n            round = true\n        }\n    }\n    TelegramShareButton {\n        url = props.video.videoUrl\n        TelegramIcon {\n            size = 32\n            round = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options at the Target Level with Gradle Kotlin DSL\nDESCRIPTION: This Kotlin snippet configures Kotlin compiler options specifically for a single target (such as JVM or Android) in a Gradle build script, overriding extension-level settings. The 'compilerOptions {}' block is placed within a 'target {}' block inside the main 'kotlin {}' configuration, showing opt-in for 'kotlin.RequiresOptIn' at the target scope. No external dependencies are necessary except for the Kotlin Gradle plugin and an appropriately named target block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    target { \n        compilerOptions {\n            optIn.add(\"kotlin.RequiresOptIn\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @JsName for Overloaded Kotlin Functions\nDESCRIPTION: Defines a Kotlin class `Person` with two `hello` methods. The `@JsName(\"helloWithGreeting\")` annotation is used on the overloaded method to provide a distinct name in the generated JavaScript, preventing name mangling and allowing clear access from JavaScript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module 'kjs'\nclass Person(val name: String) {\n    fun hello() {\n        println(\"Hello $name!\")\n    }\n\n    @JsName(\"helloWithGreeting\")\n    fun hello(greeting: String) {\n        println(\"$greeting $name!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lombok Plugin with Kotlin Command-line Compiler\nDESCRIPTION: These bash commands show how to use the Lombok compiler plugin with the Kotlin command-line compiler, including specifying the plugin JAR and configuration file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=$KOTLIN_HOME/lib/lombok-compiler-plugin.jar\n```\n\nLANGUAGE: bash\nCODE:\n```\n-P plugin:org.jetbrains.kotlin.lombok:config=<PATH_TO_CONFIG_FILE>\n```\n\n----------------------------------------\n\nTITLE: Excluding Transitive Kotlin Standard Library Dependency in Groovy Build Script\nDESCRIPTION: Configuration in Groovy DSL to exclude a transitive kotlin-stdlib dependency from a third-party library. This is useful when you need to resolve version conflicts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_40\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation(\"com.example:lib:1.0\") {\n        exclude group: \"org.jetbrains.kotlin\", module: \"kotlin-stdlib\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Native Build Report Metrics Example\nDESCRIPTION: This example showcases the structure of build report metrics for Kotlin/Native tasks in Kotlin 1.9.20. It provides information such as the total time for Kotlin tasks, the time spent on specific tasks, and task-specific details like Kotlin language version and time metrics.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_21\n\nLANGUAGE: None\nCODE:\n```\nTotal time for Kotlin tasks: 20.81 s (93.1 % of all tasks time)\nTime   |% of Kotlin time|Task                            \n15.24 s|73.2 %          |:compileCommonMainKotlinMetadata\n5.57 s |26.8 %          |:compileNativeMainKotlinMetadata\n\nTask ':compileCommonMainKotlinMetadata' finished in 15.24 s\nTask info:\n  Kotlin language version: 2.0\nTime metrics:\n  Total Gradle task time: 15.24 s\n  Spent time before task action: 0.16 s\n  Task action before worker execution: 0.21 s\n  Run native in process: 2.70 s\n    Run entry point: 2.64 s\nSize metrics:\n  Start time of task action: 2023-07-27T11:04:17\n\nTask ':compileNativeMainKotlinMetadata' finished in 5.57 s\nTask info:\n  Kotlin language version: 2.0\nTime metrics:\n  Total Gradle task time: 5.57 s\n  Spent time before task action: 0.04 s\n  Task action before worker execution: 0.02 s\n  Run native in process: 1.48 s\n    Run entry point: 1.47 s\nSize metrics:\n  Start time of task action: 2023-07-27T11:04:32\n```\n\n----------------------------------------\n\nTITLE: Removing Brittle Contains Optimization in Kotlin Stdlib\nDESCRIPTION: Details a behavioral incompatible change in the Kotlin standard library (stdlib) from version 1.6. Functions/operators like `minus`, `removeAll`, `retainAll` will no longer automatically convert their collection/iterable/array/sequence argument to a `Set` for optimization purposes. This change aims to improve predictability. For JVM, the old behavior can be temporarily re-enabled using the system property `kotlin.collections.convert_arg_to_set_in_removeAll=true`, but this property will be removed in version 1.7 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Multiple Catch Handlers in Kotlin\nDESCRIPTION: Shows how to use multiple `catch` blocks to handle different types of exceptions. The example uses custom exceptions `InsufficientFundsException` and `WithdrawalException`. The order of `catch` blocks is crucial, with more specific exceptions listed before general ones.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class WithdrawalException(message: String) : Exception(message)\nclass InsufficientFundsException(message: String) : WithdrawalException(message)\n\nfun processWithdrawal(amount: Double, availableFunds: Double) {\n    if (amount > availableFunds) {\n        throw InsufficientFundsException(\"Insufficient funds for the withdrawal.\")\n    }\n    if (amount < 1 || amount % 1 != 0.0) {\n        throw WithdrawalException(\"Invalid withdrawal amount.\")\n    }\n    println(\"Withdrawal processed\")\n}\n\nfun main() {\n    val availableFunds = 500.0\n\n    // Change this value to test different scenarios\n    val withdrawalAmount = 500.5\n\n    try {\n        processWithdrawal(withdrawalAmount.toDouble(), availableFunds)\n\n    // The order of catch blocks is important!\n    } catch (e: InsufficientFundsException) {\n        println(\"Caught an InsufficientFundsException: ${e.message}\")\n    } catch (e: WithdrawalException) {\n        println(\"Caught a WithdrawalException: ${e.message}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Smart casts with local variables in Kotlin\nDESCRIPTION: Demonstrates how smart casts work with local Boolean variables in Kotlin, allowing for improved code readability and reusability while maintaining type safety.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Cat {\n    fun purr() {\n        println(\"Purr purr\")\n    }\n}\n\nfun petAnimal(animal: Any) {\n    val isCat = animal is Cat\n    if (isCat) {\n        // The compiler can access information about\n        // isCat, so it knows that animal was smart-cast\n        // to the type Cat.\n        // Therefore, the purr() function can be called.\n        animal.purr()\n    }\n}\n\nfun main(){\n    val kitty = Cat()\n    petAnimal(kitty)\n    // Purr purr\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function with Base of NonNull Strings\nDESCRIPTION: This Kotlin code defines a function `takeBaseOfNotNullStrings` that takes an argument of type `Base<String>`.  It then calls this function with an instance of `Derived`. Because Derived extends `Base<@Nullable String>`, this results in a nullability mismatch warning.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun takeBaseOfNotNullStrings(x: Base<String>) {}\n\nfun main() {\n    takeBaseOfNotNullStrings(Derived()) // warning: nullability mismatch\n}\n```\n\n----------------------------------------\n\nTITLE: External function with JsAny type parameter\nDESCRIPTION: This declares an external Kotlin function `processData` that takes a `JsArray<T>` as input, where `T` is a type parameter constrained to `JsAny` or its subtypes, and returns a value of type `T`. This shows how to use generic types in Kotlin/Wasm JavaScript interop declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal fun <T : JsAny> processData(data: JsArray<T>): T\n```\n\n----------------------------------------\n\nTITLE: Type Parameters with Trailing Comma in Kotlin\nDESCRIPTION: This example showcases the usage of trailing commas within type parameter declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMap<\n        MyKey,\n        MyValue, // trailing comma\n        > {}\n```\n\n----------------------------------------\n\nTITLE: Java NonNullApi with UnderMigration\nDESCRIPTION: This Java code defines the `@NonNullApi` annotation with `@UnderMigration(status = MigrationStatus.WARN)`. This configuration reports inappropriate usages of the annotated types as warnings instead of errors during Kotlin compilation, while keeping the types as platform types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n@Nonnull(when = When.ALWAYS)\n@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})\n@UnderMigration(status = MigrationStatus.WARN)\npublic @interface NonNullApi {\n}\n```\n\n----------------------------------------\n\nTITLE: Reified Type Parameters for Generic Type Checking in Kotlin\nDESCRIPTION: Shows how to use reified type parameters with inline functions to perform type checking on generic types at runtime. Includes a complete example with limitations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <reified A, reified B> Pair<*, *>.asPairOf(): Pair<A, B>? {\n    if (first !is A || second !is B) return null\n    return first as A to second as B\n}\n\nval somePair: Pair<Any?, Any?> = \"items\" to listOf(1, 2, 3)\n\n\nval stringToSomething = somePair.asPairOf<String, Any>()\nval stringToInt = somePair.asPairOf<String, Int>()\nval stringToList = somePair.asPairOf<String, List<*>>()\nval stringToStringList = somePair.asPairOf<String, List<String>>() // Compiles but breaks type safety!\n// Expand the sample for more details\n\nfun main() {\n    println(\"stringToSomething = \" + stringToSomething)\n    println(\"stringToInt = \" + stringToInt)\n    println(\"stringToList = \" + stringToList)\n    println(\"stringToStringList = \" + stringToStringList)\n    //println(stringToStringList?.second?.forEach() {it.length}) // This will throw ClassCastException as list items are not String\n}\n```\n\n----------------------------------------\n\nTITLE: Overloads in Multiplatform Library Common Kotlin\nDESCRIPTION: This code shows the function `whichFun` in common code of a multiplatform library, receiving an `Any` type.  This function will resolve for common code in the same source set, or if platform specific code is inaccessible.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// MODULE: common\nfun whichFun(x: Any) = println(\"common function\")\n```\n\n----------------------------------------\n\nTITLE: Using Java Annotations with a Single 'value' Parameter in Kotlin\nDESCRIPTION: Defines a Java annotation `AnnWithValue` having only a `value` parameter. In Kotlin, this special parameter can be passed without explicitly naming it (`@AnnWithValue(\"abc\")`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic @interface AnnWithValue {\n    String value();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\n@AnnWithValue(\"abc\") class C\n```\n\n----------------------------------------\n\nTITLE: Referencing Kotlinx-io Library in Ecosystem Roadmap\nDESCRIPTION: Code snippet referencing the kotlinx-io library, which is mentioned in the context of stabilization efforts in the library ecosystem roadmap.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/roadmap.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinx-io\n```\n\n----------------------------------------\n\nTITLE: Using @JvmDefault Annotation in Kotlin\nDESCRIPTION: Shows how to use the @JvmDefault annotation to generate default methods for JVM interfaces, improving Java interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Foo {\n    // Will be generated as 'default' method\n    @JvmDefault\n    fun foo(): Int = 42\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Collection min/max Return Type to Non-Nullable in Kotlin Stdlib\nDESCRIPTION: Outlines a phased source incompatible change for collection `min` and `max` functions in the Kotlin standard library. Starting from Kotlin 1.7, these functions will return non-nullable types. The transition involves introducing `...OrNull` variants (1.4.0), raising deprecation warnings/errors for the original functions (1.4.0-1.5.0), hiding them (1.6.0), and finally reintroducing them with non-nullable return types (>= 1.7.0).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: C String to Kotlin Conversion\nDESCRIPTION: Example showing how to convert a C string to a Kotlin string using toKString()\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-strings-from-c.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.toKString\n\n@OptIn(ExperimentalForeignApi::class)\nfun passStringToC() {\n    val stringFromC = return_string()?.toKString()\n\n    println(\"Returned from C: $stringFromC\")\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output with JavaScript in Kotlin Notebook\nDESCRIPTION: Illustrates how to embed HTML with inline JavaScript within a Kotlin Notebook.  The example creates a simple counter with an increment button. Requires the notebook to be trusted for the script to execute.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nHTML(\"\"\"\n<p>Counter: <span id=\\\"ctr\\\">0</span> <button onclick=\\\"inc()\\\">Increment</button></p>\n<script>\n    function inc() {\n        let counter = document.getElementById(\\\"ctr\\\")\n        counter.innerHTML = parseInt(counter.innerHTML) + 1;\n}\n</script>\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Unwatched Videos in Kotlin DSL\nDESCRIPTION: Uses a for loop to iterate over unwatched videos and display them using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (video in unwatchedVideos) {\n    p {\n        +\"${video.speaker}: ${video.title}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Objective-C Exception Wrapping in CocoaPods Integration\nDESCRIPTION: Demonstrates how to enable wrapping of Objective-C exceptions into Kotlin ForeignException objects using the extraOpts property in a CocoaPods dependency configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1420.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npod(\"foo\") {\n    extraOpts = listOf(\"-Xforeign-exception-mode\", \"objc-wrap\")\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO Duration Strings in Kotlin\nDESCRIPTION: Shows how to use Duration.parseIsoString() and Duration.parseIsoStringOrNull() to specifically parse ISO-formatted duration strings and handle invalid formats.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.ExperimentalTime\n\n@ExperimentalTime\nfun main() {\n//sampleStart\n    val isoFormatString = \"PT1H30M\"\n    val defaultFormatString = \"1h 30m\"\n    println(Duration.parseIsoString(isoFormatString)) // \"1h 30m\"\n    //println(Duration.parseIsoString(defaultFormatString)) // throws exception\n    println(Duration.parseIsoStringOrNull(defaultFormatString)) // \"null\"\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Initializers for No-arg Plugin in Gradle\nDESCRIPTION: Shows how to enable the invokeInitializers option in the no-arg plugin configuration. When enabled, initialization logic will be executed in the synthetic constructor.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nnoArg {\n    invokeInitializers = true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Null Dereference in Java - Java\nDESCRIPTION: Demonstrates how Java does not enforce non-null references at compile time. The function stringLength returns the length of a string, but will throw a NullPointerException if passed null, as Java permits nullable parameters by default. No special annotation or check is present, and this illustrates why explicit null handling is necessary in Java.\nDependencies: None. Input: String a (can be null). Output: int (length of string). Throws if a is null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Java\\nint stringLength(String a) {\\n    return a.length();\\n}\\n\\nvoid main() {\\n    stringLength(null); // Throws a `NullPointerException`\\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Concurrent Marking for GC\nDESCRIPTION: Experimental compiler option to enable concurrent marking for improved GC performance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nkotlin.native.binary.gc=cms\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function with @JsExport Annotation\nDESCRIPTION: Defines a Kotlin/Wasm function 'addOne' annotated with `@JsExport`, making it available to JavaScript code. The function takes an integer as input and returns the incremented value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Kotlin/Wasm\n\n@JsExport\nfun addOne(x: Int): Int = x + 1\n```\n\n----------------------------------------\n\nTITLE: Using @ObjCName Annotation for Swift Interoperability in Kotlin\nDESCRIPTION: Example demonstrating how to use the @ObjCName annotation to provide more idiomatic names in Swift or Objective-C for Kotlin declarations, without renaming the original Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@ObjCName(swiftName = \"MySwiftArray\")\nclass MyKotlinArray {\n    @ObjCName(\"index\")\n    fun indexOf(@ObjCName(\"of\") element: String): Int = TODO()\n}\n\n// Usage with the ObjCName annotations\nlet array = MySwiftArray()\nlet index = array.index(of: \"element\")\n```\n\n----------------------------------------\n\nTITLE: Manipulate DataFrame: FillNA, Convert, Filter in Kotlin\nDESCRIPTION: This snippet demonstrates common DataFrame manipulation operations: filling missing values (NA) in the 'year' column with 0, converting the 'year' column to integer type, and filtering the DataFrame to include only movies released after the year 2000.  These operations are chained together for conciseness. Requires a `dfTarantinoMovies` DataFrame to be available.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nval df = dfTarantinoMovies\n    // Replaces any missing values in the 'year' column with 0.\n    .fillNA { year }.with { 0 }\n    \n    // Converts the 'year' column to integers.\n    .convert { year }.toInt()\n\n    // Filters the data to include only movies released after the year 2000.\n    .filter { year > 2000 }\ndf\n```\n\n----------------------------------------\n\nTITLE: Optimizing Delegated Properties in Kotlin\nDESCRIPTION: Illustrates the optimization of delegated properties in Kotlin 1.6.0, where the compiler generates direct access to the referenced property without creating a delegate field.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Box<T> {\n    private var impl: T = ...\n\n    var content: T by ::impl\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Kotlin Daemon Fallback Strategy (Gradle Property)\nDESCRIPTION: This snippet shows how to disable the Kotlin daemon fallback strategy using the `kotlin.daemon.useFallbackStrategy` property in the `gradle.properties` file. Setting this to `false` will cause builds to fail if there are problems with the Kotlin daemon's startup or communication, preventing silent fallbacks to other compilation strategies that may consume more resources or lead to non-deterministic builds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nkotlin.daemon.useFallbackStrategy=false\n```\n\n----------------------------------------\n\nTITLE: Declaring the SQL Schema for the Messages Table\nDESCRIPTION: This SQL code snippet defines the structure of the messages table, with an auto-generated primary key and a required text column. It is intended for inclusion in schema.sql and will be executed by Spring Boot for schema initialization. No dependencies beyond a SQL-capable database engine (H2 is recommended). Inputs are none; outputs are persistent storage for Message data. Nullable id and non-null text are enforced. Table is created if it doesn't exist.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS messages (\\n  id                     VARCHAR(60)  DEFAULT RANDOM_UUID() PRIMARY KEY,\\n  text                   VARCHAR      NOT NULL\\n);\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Target with Java Source Sets\nDESCRIPTION: Example of configuring a JVM target with Java source sets using the deprecated withJava() function. This was previously required to create src/jvmMain/java and src/jvmTest/java source sets, but is now created by default from Kotlin 2.1.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        withJava()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Class Example with toString()\nDESCRIPTION: Demonstrates the usage of Kotlin data class and its automatic toString() implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/test-page.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val id: Int)\n\nfun main() {\n    val user = User(\"Alex\", 1)\n    \n    //sampleStart\n    // Automatically uses toString() function so that output is easy to read\n    println(user)            \n    // User(name=Alex, id=1)\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Xcode Build Configurations in CocoaPods Gradle Plugin\nDESCRIPTION: Demonstrates how to specify custom Xcode build configuration names in the CocoaPods Gradle plugin, mapping them to NativeBuildTypes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ncocoapods {\n    // Maps custom Xcode configuration to NativeBuildType\n    xcodeConfigurationToNativeBuildType[\"CUSTOM_DEBUG\"] = NativeBuildType.DEBUG\n    xcodeConfigurationToNativeBuildType[\"CUSTOM_RELEASE\"] = NativeBuildType.RELEASE\n}\n```\n\n----------------------------------------\n\nTITLE: If Expression Kotlin\nDESCRIPTION: This code showcases the use of 'if' as an expression in Kotlin. It compares two integer values and prints the larger value. Because there's only one line of code per action, the curly braces are optional. It requires Kotlin version 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n//sampleStart\n    val a = 1\n    val b = 2\n\n    println(if (a > b) a else b) // Returns a value: 2\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Heroku Deployment Task in Kotlin/JS Gradle Project\nDESCRIPTION: This snippet adds a 'stage' task to the build.gradle.kts file, which is required for Heroku deployment of a Kotlin/JS project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\n// Heroku Deployment\ntasks.register(\"stage\") {\n    dependsOn(\"build\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Contracts for Variable Initialization Analysis\nDESCRIPTION: This example demonstrates how contracts can improve variable initialization analysis with higher-order functions. The synchronize function tells the compiler its lambda will be called exactly once, enabling proper initialization tracking.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun synchronize(lock: Any?, block: () -> Unit) {\n    // It tells the compiler:\n    // \"This function will invoke 'block' here and now, and exactly one time\"\n    contract { callsInPlace(block, EXACTLY_ONCE) }\n}\n\nfun foo() {\n    val x: Int\n    synchronize(lock) {\n        x = 42 // Compiler knows that lambda passed to 'synchronize' is called\n               // exactly once, so no reassignment is reported\n    }\n    println(x) // Compiler knows that lambda will be definitely called, performing\n               // initialization, so 'x' is considered to be initialized here\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable String Assignment Kotlin\nDESCRIPTION: Shows how to declare a nullable string variable using the `?` operator and successfully assign `null` to it.  This allows the variable to hold either a string or a `null` value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns a nullable string to a variable\n    var b: String? = \"abc\"\n    // Successfully re-assigns null to the nullable variable\n    b = null\n    print(b)\n    // null\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Build Report Directory Configuration\nDESCRIPTION: This snippet configures the directory for JSON build reports using the `kotlin.build.report.json.directory` property. This is mandatory if the `json` output option is used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n# Mandatory if json output is used. Where to put reports \nkotlin.build.report.json.directory=my/directory/path\n```\n\n----------------------------------------\n\nTITLE: Safe Type Casting with Null Handling in Kotlin\nDESCRIPTION: Demonstrates Kotlin's safe cast operator 'as?' for type casting, which returns null on failure, combined with the elvis operator for concise null handling.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nfun main() {\n    println(getStringLength(1)) // Prints `-1`\n}\n\nfun getStringLength(y: Any): Int {\n    val x: String? = y as? String // null\n    return x?.length ?: -1 // Returns -1 because `x` is null\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DSL Marker to Function Types in Kotlin\nDESCRIPTION: Application of the DSL marker annotation directly to function types in builder functions. This approach adds scope control to the lambdas used as parameters without requiring class annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun html(init: @HtmlTagMarker HTML.() -> Unit): HTML { ... }\n\nfun HTML.head(init: @HtmlTagMarker Head.() -> Unit): Head { ... }\n\nfun Head.title(init: @HtmlTagMarker Title.() -> Unit): Title { ... }\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types with Kotlin Inline Classes\nDESCRIPTION: Illustrates that an inline class can have a generic type parameter as its underlying type. The example shows `UserId<T>` wrapping a value of type `T`. The compiler maps the underlying type to `Any?` or the upper bound of the type parameter in the generated code, as shown in the comment for the `compute` function signature.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class UserId<T>(val value: T)\n\nfun compute(s: UserId<String>) {} // compiler generates fun compute-<hashcode>(s: Any?)\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotlin JVM Plugin with Gradle (Kotlin)\nDESCRIPTION: Adds the Kotlin JVM plugin to a Gradle project to enable Kotlin JVM language features. This snippet does not specify the target JVM version, relying on default settings. Requires Kotlin plugin specified by version string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Non-local Return in Lambda for Ordinary Function in Kotlin\nDESCRIPTION: Shows a scenario where an attempt to perform a non-local return from a lambda passed to a regular (non-inline) function results in a compile error. This is because a lambda cannot cause the enclosing function to 'return', highlighting Kotlin's restriction on non-local control flow for ordinary lambdas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun ordinaryFunction(block: () -> Unit) {\n    println(\"hi!\")\n}\n//sampleStart\nfun foo() {\n    ordinaryFunction {\n        return // ERROR: cannot make `foo` return here\n    }\n}\n//sampleEnd\nfun main() {\n    foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scripting Dependencies in Gradle (Groovy DSL)\nDESCRIPTION: Gradle build script snippet for adding Kotlin scripting dependencies to the project using Groovy DSL. These dependencies provide the necessary APIs for script definition.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-common'\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm'\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-dependencies'\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-dependencies-maven'\n    // coroutines dependency is required for this particular definition\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Android Executables\nDESCRIPTION: Gradle configuration to enable standalone executable generation for Android Native targets\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidNativeX64(\"android\") {\n        binaries {\n            executable {\n                binaryOptions[\"androidProgramType\"] = \"standalone\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Ruby with RVM\nDESCRIPTION: This code snippet demonstrates how to install a specific version of Ruby using RVM (Ruby Version Manager). It is a prerequisite for installing CocoaPods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrvm install ruby 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Constructor Visibility in Sealed Classes\nDESCRIPTION: Explains constructor visibility options in sealed classes. Sealed class constructors can only have protected (default) or private visibility, with public and internal constructors not allowed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class IOError {\n    // A sealed class constructor has protected visibility by default. It's visible inside this class and its subclasses \n    constructor() { /*...*/ }\n\n    // Private constructor, visible inside this class only. \n    // Using a private constructor in a sealed class allows for even stricter control over instantiation, enabling specific initialization procedures within the class.\n    private constructor(description: String): this() { /*...*/ }\n\n    // This will raise an error because public and internal constructors are not allowed in sealed classes\n    // public constructor(code: Int): this() {} \n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Deprecated Annotation in KSP\nDESCRIPTION: This code snippet demonstrates how to check if a declaration is deprecated in KSP by examining its annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nKsDeclaration.annotations.any { \n    it.annotationType.resolve()!!.declaration.qualifiedName!!.asString() == Deprecated::class.qualifiedName\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating with Iterator in Kotlin\nDESCRIPTION: This code demonstrates how to iterate through a list using the `iterator()` function and the `hasNext()` and `next()` methods of the `Iterator` interface. The `while` loop continues as long as there are more elements in the list, printing each element to the console.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/iterators.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val numbersIterator = numbers.iterator()\n    while (numbersIterator.hasNext()) {\n        println(numbersIterator.next())\n        // one\n        // two\n        // three\n        // four\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function Annotation on Same Line\nDESCRIPTION: Shows placing a single annotation without arguments on the same line as the corresponding function declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test fun foo() { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Accessing Kotlin Static and Non-Static Members in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to access Kotlin static members annotated with `@JsStatic` directly from JavaScript, while non-static members require accessing through the `Companion` object. Demonstrates how `@JsStatic` changes accessibility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nC.callStatic();              // Works, accessing the static function\nC.callNonStatic();           // Error, not a static function in the generated JavaScript\nC.Companion.callStatic();    // Instance method remains\nC.Companion.callNonStatic(); // The only way it works\n```\n\n----------------------------------------\n\nTITLE: Create database schema SQL\nDESCRIPTION: This SQL script creates the 'messages' table if it doesn't already exist. It defines two columns: 'id' (VARCHAR, primary key) and 'text' (VARCHAR, not null).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-db-support.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- schema.sql\nCREATE TABLE IF NOT EXISTS messages (\n   id       VARCHAR(60)  PRIMARY KEY,\n   text     VARCHAR      NOT NULL\n);\n\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Multiplatform Plugin in Gradle using Kotlin DSL - Kotlin\nDESCRIPTION: This snippet applies the Kotlin Multiplatform plugin in a Gradle build script using the Kotlin DSL. Replace '%kotlinVersion%' with the appropriate version of the plugin for your project. This is the base step for enabling multiplatform targeting in a project and requires the org.jetbrains.kotlin.multiplatform Gradle plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Solving Long Number Problem with Functional Operators in Kotlin 1.6+\nDESCRIPTION: Implements a greedy algorithm for the Codeforces 'Long Number' problem (1157B) using Kotlin 1.6+ features. It reads the input size `n`, the number string `s`, and the mapping list `fl`. A local function `f` maps characters based on `fl`. It uses `indexOfFirst` and `takeIf` with the elvis operator `?:` to find the start index `i` and end index `j` for replacement. The final answer is constructed by concatenating substrings and the mapped middle part, then printed. This version uses `readln()` for input.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // read input\n    val n = readln().toInt()\n    val s = readln()\n    val fl = readln().split(\" \").map { it.toInt() }\n    // define local function f\n    fun f(c: Char) = '0' + fl[c - '1']\n    // greedily find first and last indices\n    val i = s.indexOfFirst { c -> f(c) > c }\n        .takeIf { it >= 0 } ?: s.length\n    val j = s.withIndex().indexOfFirst { (j, c) -> j > i && f(c) < c }\n        .takeIf { it >= 0 } ?: s.length\n    // compose and write the answer\n    val ans =\n        s.substring(0, i) +\n        s.substring(i, j).map { c -> f(c) }.joinToString(\"\") +\n        s.substring(j)\n    println(ans)\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Expected/Actual Classes Beta Warning in Gradle\nDESCRIPTION: Configures the Kotlin compiler in a Gradle build file to suppress warnings about the Beta status of expected and actual classes by adding a compiler flag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        // Common compiler options applied to all Kotlin source sets\n        freeCompilerArgs.add(\"-Xexpect-actual-classes\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Kotlin/Native Executable\nDESCRIPTION: Shows how to run a compiled Kotlin/Native executable program (.kexe file).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ ./kohello.kexe\nHello, Kotlin world!\n```\n\n----------------------------------------\n\nTITLE: Excluding Kotlin Dependencies in Gradle (Kotlin DSL)\nDESCRIPTION: This Kotlin DSL snippet illustrates how to exclude all transitive Kotlin dependencies from an added external library in a Gradle (build.gradle.kts) project. The exclude function within the implementation call removes all dependencies from the org.jetbrains.kotlin group, ensuring only OSGi-compliant libraries are present. This is essential for maintaining OSGi compatibility when using external libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-osgi.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\\n    implementation(\"some.group.id:some.library:someversion\") {\\n        exclude(group = \"org.jetbrains.kotlin\")\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Podspec Repository Source in Podfile\nDESCRIPTION: Shows how to specify the location of custom specs at the beginning of a Podfile for correct Xcode integration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://github.com/Kotlin/kotlin-cocoapods-spec.git'\n```\n\n----------------------------------------\n\nTITLE: Creating and Immediately Using a FileVisitor in Kotlin\nDESCRIPTION: Shows how to create a FileVisitor with builder action and use it immediately on a project directory, handling both directories and files with custom logic.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nprojectDirectory.visitFileTree {\n// Definition of the builderAction:\n    onPreVisitDirectory { directory, attributes ->\n        // Some logic on visiting directories\n        FileVisitResult.CONTINUE\n    }\n\n    onVisitFile { file, attributes ->\n        // Some logic on visiting files\n        FileVisitResult.CONTINUE\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Project Structure Example for Separate Subprojects\nDESCRIPTION: Example file structure for a Kotlin Multiplatform project with a separate subproject that applies Gradle Java plugins to avoid compatibility warnings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n.\n├── build.gradle\n├── settings.gradle.kts\n├── subproject-A\n    └── build.gradle.kts\n    └── src\n        └── Main.java\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Version in Version Catalog\nDESCRIPTION: Configuration in the version catalog (gradle/libs.versions.toml) that specifies the Kotlin version to use for the Kotlin/Native project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[versions]\nkotlin = \"%kotlinVersion%\"\n```\n\n----------------------------------------\n\nTITLE: Adding CocoaPods Dependency in Kotlin DSL Build Script\nDESCRIPTION: Configuration for adding a CocoaPods dependency in a Kotlin Multiplatform project using Kotlin DSL. This example adds the SDWebImage library with a specific version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    cocoapods {\n        version = \"2.0\"\n        //...\n        pod(\"SDWebImage\") {\n            version = \"5.20.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods with rbenv\nDESCRIPTION: This code snippet demonstrates how to install CocoaPods using the gem package manager after setting up Ruby with rbenv. The `-n /usr/local/bin` option specifies the installation directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install -n /usr/local/bin cocoapods\n```\n\n----------------------------------------\n\nTITLE: Adding testImplementation Dependency in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to add the `testImplementation` dependency in a Groovy-based `build.gradle` file. This dependency allows you to use `kotlin.test` for writing tests and JUnit for running them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // Other dependencies.\n    testImplementation 'org.jetbrains.kotlin:kotlin-test'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Class Instance in Kotlin\nDESCRIPTION: This snippet demonstrates how to create an instance of a class in Kotlin. It shows the creation of a `Contact` object with specific values for the `id` and `email` properties. It also shows a `main` function to execute the creation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Contact(val id: Int, var email: String)\n\nfun main() {\n    val contact = Contact(1, \"mary@gmail.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using a when Expression for Type and Value Matching in Kotlin\nDESCRIPTION: This snippet defines a function `describe` that uses a `when` expression to perform pattern matching on an input object of type `Any`. It returns different strings based on whether the object matches specific values (1, \"Hello\"), types (`Long`), or conditions (`!is String`). An `else` branch handles unknown cases.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nfun describe(obj: Any): String =\n    when (obj) {\n        1          -> \"One\"\n        \"Hello\"    -> \"Greeting\"\n        is Long    -> \"Long\"\n        !is String -> \"Not a string\"\n        else       -> \"Unknown\"\n    }\n//sampleEnd\n\nfun main() {\n    println(describe(1))\n    println(describe(\"Hello\"))\n    println(describe(1000L))\n    println(describe(2))\n    println(describe(\"other\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Floating-Point Array Functions in Kotlin Stdlib\nDESCRIPTION: Describes the deprecation and eventual removal of floating-point array functions (`contains`, `indexOf`, `lastIndexOf`) in the Kotlin standard library. This source incompatible change addresses the issue where these functions used IEEE-754 ordering instead of total order for comparisons. They were deprecated with a warning in 1.4.0, raised to an error in 1.6.0, and will be hidden from public API in version 1.7.0 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Enable K2 for kapt in gradle.properties\nDESCRIPTION: This snippet demonstrates how to enable the K2 compiler for the kapt (Kotlin Annotation Processing Tool) compiler plugin by setting the `kapt.use.k2` property to `true` in the `gradle.properties` file. This allows you to experiment with K2 in kapt, which is currently in the Experimental stage.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nkotlin.experimental.tryK2=true\nkapt.use.k2=true\n```\n\n----------------------------------------\n\nTITLE: Partially Mutable Collection in Java\nDESCRIPTION: Illustrates a scenario in Java where an attempt to add an element to a fixed-size list fails with UnsupportedOperationException. Arrays.asList creates a fixed-size list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Java\\nList<String> numbers = Arrays.asList(\"one\", \"two\", \"three\", \"four\");\\nnumbers.add(\"five\"); // Fails in runtime with `UnsupportedOperationException`\n```\n\n----------------------------------------\n\nTITLE: Platform Type Property Declaration Kotlin\nDESCRIPTION: This snippet demonstrates the explicit declaration of a Kotlin type for a property initialized with an expression of a platform type. This ensures the Kotlin compiler correctly handles the platform type's characteristics.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_67\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person {\n    val name: String = MyJavaApi.getProperty(\"name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Nested Packages within a JS Module\nDESCRIPTION: JavaScript example showing a module that exports a nested object structure. The `module.exports` object contains a `mylib` object, which in turn contains `pkg1` and `pkg2` objects, each exporting functions. This represents a module exporting multiple nested packages or namespaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  mylib: {\n    pkg1: {\n      foo: function () { /* some code here */ },\n      bar: function () { /* some code here */ }\n    },\n    pkg2: {\n      baz: function () { /* some code here */ }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Char Category APIs in Kotlin\nDESCRIPTION: Multiplatform APIs for checking character categories including letter/digit checks and case verification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val chars = listOf('a', '1', '+')\n    val (letterOrDigitList, notLetterOrDigitList) = chars.partition { it.isLetterOrDigit() }\n    println(letterOrDigitList) // [a, 1]\n    println(notLetterOrDigitList) // [+]\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val chars = listOf('ǅ', 'ǈ', 'ǋ', 'ǲ', '1', 'A', 'a', '+')\n    val (titleCases, notTitleCases) = chars.partition { it.isTitleCase() }\n    println(titleCases) // [ǅ, ǈ, ǋ, ǲ]\n    println(notTitleCases) // [1, A, a, +]\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Initialization in Kotlin\nDESCRIPTION: Shows how to declare variables with explicit types and initialize them later. Demonstrates type specification using the colon syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-basic-types.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Variable declared without initialization\n    val d: Int\n    // Variable initialized\n    d = 3\n\n    // Variable explicitly typed and initialized\n    val e: String = \"hello\"\n\n    // Variables can be read because they have been initialized\n    println(d) // 3\n    println(e) // hello\n}\n```\n\n----------------------------------------\n\nTITLE: Bound Constructor Reference Kotlin\nDESCRIPTION: This example shows how to create a bound constructor reference for an inner class in Kotlin.  It defines an outer class `Outer` with an inner class `Inner`.  An instance of `Outer` is created and then a bound constructor reference to `Inner` is created using the outer class instance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Outer {\n    inner class Inner\n}\n\nval o = Outer()\nval boundInnerCtor = o::Inner\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Plugin with Gradle\nDESCRIPTION: This snippet demonstrates how to apply the Kotlin Gradle plugin in both Kotlin and Groovy DSLs. It requires specifying the correct plugin name corresponding to the target environment and setting the version of the Kotlin Gradle plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // Replace `<...>` with the plugin name appropriate for your target environment\n    kotlin(\"<...>\") version \"%kotlinVersion%\"\n    // For example, if your target environment is JVM:\n    // kotlin(\"jvm\") version \"%kotlinVersion%\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    // Replace `<...>` with the plugin name appropriate for your target environment\n    id 'org.jetbrains.kotlin.<...>' version '%kotlinVersion%'\n    // For example, if your target environment is JVM: \n    // id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Cast in Lambda for Variables Modified Before the Lambda\nDESCRIPTION: This snippet shows how Kotlin 1.2 enables smart casts in lambdas for local variables that are only modified before the lambda is defined. This improves the convenience of using nullable variables in lambdas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val flag = args.size == 0\n    var x: String? = null\n    if (flag) x = \"Yahoo!\"\n\n    run {\n        if (x != null) {\n            println(x.length) // x is smart cast to String\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Native Activity Program Type\nDESCRIPTION: Gradle configuration to preserve native activity behavior in Android Native targets\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaryOptions[\"androidProgramType\"] = \"nativeActivity\"\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods with Homebrew\nDESCRIPTION: This code snippet demonstrates how to install CocoaPods using Homebrew. Note that this method might lead to compatibility issues, especially with Xcode versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Kotlin Scripting Host (Kotlin)\nDESCRIPTION: Gradle dependency configuration for Kotlin scripting host implementation using Kotlin DSL, including core scripting components and script definition module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-common\")\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-jvm\")\n    implementation(\"org.jetbrains.kotlin:kotlin-scripting-jvm-host\")\n    implementation(project(\":script-definition\")) // the script definition module\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Long Argument Lists\nDESCRIPTION: Shows how to format method calls with long argument lists, adding line breaks and indenting arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\ndrawSquare(\n    x = 10, y = 10,\n    width = 100, height = 100,\n    fill = true\n)\n```\n\n----------------------------------------\n\nTITLE: Disable archivesTaskOutputAsFriendModule Gradle Property (Kotlin)\nDESCRIPTION: Shows how to disable the `archivesTaskOutputAsFriendModule` Gradle property to resolve circular dependency errors. This involves setting the property to `false` in the `gradle.properties` file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin.build.archivesTaskOutputAsFriendModule=false\n```\n\n----------------------------------------\n\nTITLE: Running the Kotlin/Wasm Compose Multiplatform Application in Development Mode\nDESCRIPTION: Command to run the Kotlin/Wasm Compose Multiplatform application in development mode with continuous build enabled using Gradle from the command line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmJsBrowserDevelopmentRun -t\n```\n\n----------------------------------------\n\nTITLE: Creating Pairs of Adjacent Elements in Kotlin\nDESCRIPTION: Shows the `zipWithNext()` extension function on a `List<String>`. It creates a `List` of `Pair`s, where each pair consists of an element and the element immediately following it in the original list. It also demonstrates providing a transformation lambda to `zipWithNext()`, which takes two adjacent elements as arguments and produces a result for each pair (in this case, a `Boolean` indicating if the first string is longer than the second).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")    \n    println(numbers.zipWithNext())\n    println(numbers.zipWithNext() { s1, s2 -> s1.length > s2.length})\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an Infinite Sequence in Kotlin\nDESCRIPTION: Creates an infinite sequence of odd numbers using generateSequence() with a seed value and a lambda function that defines how to generate subsequent elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val oddNumbers = generateSequence(1) { it + 2 } // `it` is the previous element\n    println(oddNumbers.take(5).toList())\n    //println(oddNumbers.count())     // error: the sequence is infinite\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Duration API Usage in Kotlin\nDESCRIPTION: Demonstrates the usage of Duration companion properties for time unit conversion, showing how to convert seconds to minutes using the new Duration.Companion extensions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration.Companion.seconds\n\nfun main() {\n    val duration = 10000\n    println(\"There are ${duration.seconds.inWholeMinutes} minutes in $duration seconds\")\n    // There are 166 minutes in 10000 seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform in Gradle (Kotlin)\nDESCRIPTION: This snippet configures the Gradle `test` task in a Kotlin-based `build.gradle.kts` file to use the JUnit Platform.  This enables JUnit 5 support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Naive Java Translation of Generic Box Usage\nDESCRIPTION: Shows the initial naive approach to translating Kotlin variance to Java, which doesn't work due to Java's invariance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nBox<Derived> boxDerived(Derived value) { ... }\nBase unboxBase(Box<Base> box) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Dynamic Types in Kotlin\nDESCRIPTION: This snippet illustrates how to define a dynamic type variable in Kotlin, which bypasses the type checker and allows interaction with JavaScript-like untyped environments, where dynamic properties and functions can be accessed without predefinition. No specific dependencies are required other than a Kotlin-JavaScript setup. Dynamic variables can hold any value, accept various parameters, and disable null-checks. The snippet demonstrates the ability for any function or property to be called on a dynamic type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/dynamic-type.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval dyn: dynamic = ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Kotlin Extensions as Class Members\nDESCRIPTION: Illustrates declaring an extension function (`printConnectionString` for `Host`) inside another class (`Connection`). Inside this member extension, members of both the dispatch receiver (`Connection`, accessed via `printPort()`) and the extension receiver (`Host`, accessed via `printHostname()`) can be called implicitly. The extension is callable only within the scope of the enclosing class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Host(val hostname: String) {\n    fun printHostname() { print(hostname) }\n}\n\nclass Connection(val host: Host, val port: Int) {\n    fun printPort() { print(port) }\n\n    fun Host.printConnectionString() {\n        printHostname()   // calls Host.printHostname()\n        print(\":\")\n        printPort()   // calls Connection.printPort()\n    }\n\n    fun connect() {\n        /*...*/\n        host.printConnectionString()   // calls the extension function\n    }\n}\n\nfun main() {\n    Connection(Host(\"kotl.in\"), 443).connect()\n    //Host(\"kotl.in\").printConnectionString()  // error, the extension function is unavailable outside Connection\n}\n```\n\n----------------------------------------\n\nTITLE: Data Class Constructor Visibility Warning (Kotlin)\nDESCRIPTION: This Kotlin code demonstrates the warning issued in Kotlin 2.0.20 when a data class with a private constructor is used.  The warning indicates that the visibility of the automatically generated `copy()` function will change in future releases to match the constructor's visibility. This snippet illustrates the potential issue and the need for migration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Triggers a warning in 2.0.20\ndata class PositiveInteger private constructor(val number: Int) {\n    companion object {\n        fun create(number: Int): PositiveInteger? = if (number > 0) PositiveInteger(number) else null\n    }\n}\n\nfun main() {\n    val positiveNumber = PositiveInteger.create(42) ?: return\n    // Triggers a warning in 2.0.20\n    val negativeNumber = positiveNumber.copy(number = -1)\n    // Warning: Non-public primary constructor is exposed via the generated 'copy()' method of the 'data' class.\n    // The generated 'copy()' will change its visibility in future releases.\n}\n```\n\n----------------------------------------\n\nTITLE: Single File Build Report Configuration\nDESCRIPTION: This snippet configures the location for single file build reports using the `kotlin.build.report.single_file` property. This is mandatory if the `single_file` output option is used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n# Mandatory if single_file output is used. Where to put reports \n# Use instead of the deprecated `kotlin.internal.single.build.metrics.file` property\nkotlin.build.report.single_file=some_filename\n```\n\n----------------------------------------\n\nTITLE: Anonymous Object Inheritance Kotlin\nDESCRIPTION: Illustrates how to create an anonymous object that inherits from a class and implements an interface. The `specialTransaction` function creates an anonymous object that inherits from `BankAccount` and implements `Transaction`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class BankAccount(initialBalance: Int) {\n    open val balance: Int = initialBalance\n}\n\n// Defines an interface Transaction with an execute() function\ninterface Transaction {\n    fun execute()    \n}\n\n// A function to perform a special transaction on a BankAccount\nfun specialTransaction(account: BankAccount) {\n    // Creates an anonymous object that inherits from the BankAccount class and implements the Transaction interface\n    // The balance of the provided account is passed to the BankAccount superclass constructor\n    val temporaryAccount = object : BankAccount(account.balance), Transaction {\n\n        override val balance = account.balance + 500  // Temporary bonus\n        \n        // Implements the execute() function from the Transaction interface\n        override fun execute() {\n            println(\"Executing special transaction. New balance is $balance.\")\n        }\n    }\n    // Executes the transaction\n    temporaryAccount.execute()\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Legacy Interface Constructor Functions in Kotlin\nDESCRIPTION: This snippet shows how to deprecate a legacy helper function for interface construction after migrating to a functional interface. The '@Deprecated' annotation is used with 'DeprecationLevel.HIDDEN' to remove the function from visible API but preserve binary compatibility. Replace '...' with appropriate parameters and function body as needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@Deprecated(message = \"Your message about the deprecation\", level = DeprecationLevel.HIDDEN)\nfun Printer(...) {...}\n```\n\n----------------------------------------\n\nTITLE: Open-Ended Range Interface Implementation\nDESCRIPTION: Shows the structure of the new OpenEndRange<T> interface used to represent open-ended ranges, with start and endExclusive properties, and contains and isEmpty functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface OpenEndRange<T : Comparable<T>> {\n    // Lower bound\n    val start: T\n    // Upper bound, not included in the range\n    val endExclusive: T\n    operator fun contains(value: T): Boolean = value >= start && value < endExclusive\n    fun isEmpty(): Boolean = start >= endExclusive\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Cast Example with Local Variables - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how the K2 compiler improves smart casts for local variables within `if` conditions. In Kotlin 2.0.0, if a variable is declared before being used in an `if`, `when`, or `while` condition, the compiler can access information about the variable for smart-casting. This example shows how to call a function on an object after a type check in an `if` statement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Cat {\n    fun purr() {\n        println(\"Purr purr\")\n    }\n}\n\nfun petAnimal(animal: Any) {\n    val isCat = animal is Cat\n    if (isCat) {\n        // In Kotlin 2.0.0, the compiler can access\n        // information about isCat, so it knows that\n        // animal was smart-cast to the type Cat.\n        // Therefore, the purr() function can be called.\n        // In Kotlin 1.9.20, the compiler doesn't know\n        // about the smart cast, so calling the purr()\n        // function triggers an error.\n        animal.purr()\n    }\n}\n\nfun main(){\n    val kitty = Cat()\n    petAnimal(kitty)\n    // Purr purr\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MimeTypedResult in Kotlin\nDESCRIPTION: Creates a MimeTypedResult object to manually map data to specific MIME types for rendering in Kotlin Notebook. This allows you to control how the output is displayed, such as using Markdown instead of plain text.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nMimeTypedResult(\n    mapOf(\n        \"text/plain\" to \"123\",\n        \"text/markdown\" to \"# HEADER\",\n        //other mime:value pairs\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: New Target Configuration Approach in Kotlin Multiplatform\nDESCRIPTION: The new required approach for configuring multiple targets in Kotlin Multiplatform using findByName() to access targets instead of auto-generated accessors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets {\n        configure([findByName('windows'),\n            findByName('linux')]) {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Nullability Example\nDESCRIPTION: This Kotlin code snippet demonstrates a generic class `Sample` with a function `myVal` that returns a value of type `T`.  When compiled to Objective-C, without constraints, `T` is treated as potentially nullable.  This might not match the intent.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Sample<T>() {\n    fun myVal(): T\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callable References with Function Parameters\nDESCRIPTION: Shows how passing callable references to functions can contribute to type inference in builders.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun takeFunction(x: KFunction1<Int, Float>) { ... }\n\nfun main() {\n    val result = buildList {\n        takeFunction(::get)\n    } // result has the List<Float> type\n}\n```\n\n----------------------------------------\n\nTITLE: Java Base Class with Bounded NotNull Type Parameter\nDESCRIPTION: This Java code defines a generic `BaseWithBound` class with a type parameter `T` that extends `@NotNull Number`.  This enforces that `T` must be a non-nullable `Number` or subtype.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class BaseWithBound<T extends @NotNull Number> {}\n```\n\n----------------------------------------\n\nTITLE: Extending JavaScript Classes from Kotlin/JS\nDESCRIPTION: Illustrates extending a JavaScript base class (declared 'open external') from Kotlin, and overriding or implementing new methods. Shows how to call JS browser APIs (like window.alert) from overridden methods in Kotlin-derived classes. Highlights the pattern for safe extension of JS types while noting certain override limitations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nopen external class Foo {\n    open fun run()\n    fun stop()\n}\n\nclass Bar : Foo() {\n    override fun run() {\n        window.alert(\"Running!\")\n    }\n\n    fun restart() {\n        window.alert(\"Restarting\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin/Native Module Name via Gradle (Groovy)\nDESCRIPTION: This snippet demonstrates how to set the module name for Kotlin/Native compilation using the `compilerOptions` block in Gradle with the Groovy DSL. It targets the `compileKotlinLinuxX64` task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.named(\"compileKotlinLinuxX64\", org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile.class) {\n    compilerOptions {\n        moduleName = \"my-module-name\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Casting for Lambda's Last Expression\nDESCRIPTION: Shows how Kotlin 1.4 improves smart casting for the last expression in a lambda, inferring a more precise non-nullable type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = run {\n    var str = currentValue()\n    if (str == null) {\n        str = \"test\"\n    }\n    str // the Kotlin compiler knows that str is not null here\n}\n// The type of 'result' is String? in Kotlin 1.3 and String in Kotlin 1.4\n```\n\n----------------------------------------\n\nTITLE: Install Kotlin compiler via Homebrew\nDESCRIPTION: These commands update Homebrew and then install the Kotlin compiler using the Homebrew package manager on macOS. Homebrew simplifies software installation on macOS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install kotlin\n```\n\n----------------------------------------\n\nTITLE: Using run() for Object Initialization and Computation in Kotlin\nDESCRIPTION: This snippet demonstrates how to use run() to initialize an object and compute a return value in a single expression. It compares the usage with let() to highlight the difference in syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MultiportService(var url: String, var port: Int) {\n    fun prepareRequest(): String = \"Default request\"\n    fun query(request: String): String = \"Result for query '$request'\"\n}\n\nfun main() {\n    val service = MultiportService(\"https://example.kotlinlang.org\", 80)\n\n    val result = service.run {\n        port = 8080\n        query(prepareRequest() + \" to port $port\")\n    }\n    \n    // the same code written with let() function:\n    val letResult = service.let {\n        it.port = 8080\n        it.query(it.prepareRequest() + \" to port ${it.port}\")\n    }\n\n    println(result)\n    println(letResult)\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin Code to a Native Library\nDESCRIPTION: Shows how to use the Kotlin/Native compiler to produce a library file from Kotlin source code using the -p library flag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kotlinc-native foo.kt -p library -o bar\n```\n\n----------------------------------------\n\nTITLE: Using androidTarget Block for Dependencies - Kotlin\nDESCRIPTION: Alternative approach to add Android dependencies inside the androidTarget block using Kotlin DSL. This method is useful for migrating from traditional Android projects, as it handles non-trivial configuration names.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-android-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nandroidTarget {\n    //...\n    dependencies {\n        implementation(\"com.example.android:app-magic:12.3\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating kapt.use.worker.api Gradle Property\nDESCRIPTION: Documents the deprecation of the `kapt.use.worker.api` Gradle property, a source incompatible change affecting the Kapt tool. This property controlled whether Kapt runs via the Gradle Workers API (defaulting to true). It's deprecated with a warning starting from 1.6.20, with removal planned for version 1.8.0 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Eager Processing with Iterable in Kotlin\nDESCRIPTION: Demonstrates eager collection processing with Iterable where each processing step completes for the entire collection before moving to the next step.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {    \n//sampleStart\n    val words = \"The quick brown fox jumps over the lazy dog\".split(\" \")\n    val lengthsList = words.filter { println(\"filter: $it\"); it.length > 3 }\n        .map { println(\"length: ${it.length}\"); it.length }\n        .take(4)\n\n    println(\"Lengths of first 4 words longer than 3 chars:\")\n    println(lengthsList)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Reading Helper Functions in Earlier Kotlin Versions\nDESCRIPTION: Provides a set of private helper functions for simplifying input reading in competitive programming, compatible with Kotlin versions before 1.6. Functions include `readStr` for reading a single string line, `readInt` for a single integer, `readStrings` for a list of strings split by spaces, and `readInts` for a list of integers. These helpers utilize `readLine()!!`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun readStr() = readLine()!! // string line\nprivate fun readInt() = readStr().toInt() // single int\nprivate fun readStrings() = readStr().split(\" \") // list of strings\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\n```\n\n----------------------------------------\n\nTITLE: Migrating kotlin.dom/browser Packages to kotlinx.* in Kotlin/JS Stdlib\nDESCRIPTION: Details a source incompatible change affecting Kotlin/JS standard library users. Declarations from `kotlin.dom` and `kotlin.browser` packages are being moved to `kotlinx.dom` and `kotlinx.browser` respectively. This prepares for extracting these APIs into a separate library. The process involved introducing replacements (1.4.0), deprecating old APIs (1.4.0), raising deprecation to error (1.6.0), and planning removal from stdlib and migration to a separate library (>= 1.7.0).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Using 'in' Type Projection for Contravariance in Kotlin Array Fill Function\nDESCRIPTION: Shows an example function `fill` where the destination array `dest` is declared using use-site variance as `Array<in String>`. This type projection makes `dest` contravariant for this usage, allowing arrays like `Array<CharSequence>` or `Array<Any>` to be passed, as long as they can safely accept `String` values (consuming `String`). Operations returning the element type on `dest` would yield `Any?`. The function body is omitted (`...`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun fill(dest: Array<in String>, value: String) { ... }\n```\n\n----------------------------------------\n\nTITLE: Throwing ArithmeticException in Kotlin\nDESCRIPTION: This code snippet demonstrates how an ArithmeticException is thrown when attempting to divide by zero in Kotlin. It illustrates a common scenario where this exception can occur.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval example = 2 / 0 // throws ArithmeticException\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies in Shared Source Sets with Kotlin DSL\nDESCRIPTION: Demonstrates how to specify a dependency only once in a shared source set. This example adds the kotlinx-coroutines-core dependency to the commonMain source set using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Types in Destructured Parameters\nDESCRIPTION: This snippet shows how to specify the type for destructured lambda parameters or specific components, providing flexibility in defining lambda expressions with precise type constraints.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.mapValues { (_, value): Map.Entry<Int, String> -> \"$value!\" }\n\nmap.mapValues { (_, value: String) -> \"$value!\" }\n```\n\n----------------------------------------\n\nTITLE: Elvis Operator Example\nDESCRIPTION: This code demonstrates the use of the Elvis operator (?:) in Kotlin.  It checks if a nullable string `b` is null. If `b` is not null, it returns the length of `b`. If `b` is null, it returns 0. The Elvis operator provides a concise way to handle nullability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns null to a nullable variable  \n    val b: String? = null\n    // Checks for nullability. If not null, returns length. If null, returns 0\n    val l = b?.length ?: 0\n    println(l)\n    // 0\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Converting kotlin-js plugin declaration in settings.gradle.kts\nDESCRIPTION: Shows how to remove the kotlin-js plugin declaration from the settings.gradle.kts file and replace it with the kotlin-multiplatform plugin declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// settings.gradle.kts:\npluginManagement {\n    plugins {\n        // Remove the following line:\n        kotlin(\"js\") version \"1.9.0\"\n    }\n    \n    repositories {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Framework Configuration (Kotlin DSL)\nDESCRIPTION: Example of configuring an Objective-C framework in Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinArtifacts {\n    Native.Framework(\"myframe\") {\n        modes(DEBUG, RELEASE)\n        target = iosArm64\n        isStatic = false\n        kotlinOptions {\n            verbose = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameters with Optional Type and Trailing Comma in Kotlin\nDESCRIPTION: This example illustrates parameters with optional types, including setters, and trailing commas. Note the trailing comma is before the closing parenthesis for the fun declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nval sum: (Int, Int, Int) -> Int = fun(\n    x,\n    y,\n    z, // trailing comma\n): Int {\n    return x + y + x\n}\nprintln(sum(8, 8, 8))\n```\n\n----------------------------------------\n\nTITLE: Using Promises for Asynchronous Calls in Kotlin\nDESCRIPTION: This snippet shows how to use futures or promises for chaining asynchronous operations. The code highlights the requirement of learning new APIs and handling error propagation in this model. Dependencies: Kotlin's promise library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/async-programming.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun postItem(item: Item) {\n    preparePostAsync() \n        .thenCompose { token -> \n            submitPostAsync(token, item)\n        }\n        .thenAccept { post -> \n            processPost(post)\n        }\n}\n\nfun preparePostAsync(): Promise<Token> {\n    // makes request and returns a promise that is completed later\n    return promise \n}\n```\n\n----------------------------------------\n\nTITLE: Using Trailing Commas in Parameter Lists and Collections\nDESCRIPTION: Examples of using trailing commas in function parameter declarations and collection initializations, which makes code maintenance easier when adding or reordering items.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun reformat(\n    str: String,\n    uppercaseFirstLetter: Boolean = true,\n    wordSeparator: Character = ' ', //trailing comma\n) {\n    // ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval colors = listOf(\n    \"red\",\n    \"green\",\n    \"blue\", //trailing comma\n)\n```\n\n----------------------------------------\n\nTITLE: Implementation by Delegation with Inline Classes\nDESCRIPTION: Example showing how to use implementation by delegation with inline classes to create lightweight wrappers that avoid memory allocation in most cases.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Bar {\n    fun foo() = \"foo\"\n}\n\n@JvmInline\nvalue class BarWrapper(val bar: Bar): Bar by bar\n\nfun main() {\n    val bw = BarWrapper(object: Bar {})\n    println(bw.foo())\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JPA Plugin in Maven\nDESCRIPTION: XML snippet showing how to enable the JPA plugin in a Maven build configuration. This plugin automatically handles JPA annotations for no-arg constructor generation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<compilerPlugins>\n    <plugin>jpa</plugin>\n</compilerPlugins>\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Multiple Sealed Superclasses in Kotlin\nDESCRIPTION: Shows how sealed interfaces allow a class to inherit from two or more sealed superclasses, which wasn't possible with sealed classes alone. The example demonstrates implementing both Fillable and Polygon interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface Fillable {\n   fun fill()\n}\nsealed interface Polygon {\n   val vertices: List<Point>\n}\n\nclass Rectangle(override val vertices: List<Point>): Fillable, Polygon {\n   override fun fill() { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CValuesRef for Struct and Union Types\nDESCRIPTION: Example of creating and using struct and union types by reference in Kotlin using memScoped for automatic memory management.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.memScoped\nimport kotlinx.cinterop.alloc\nimport kotlinx.cinterop.ptr\n\n@OptIn(ExperimentalForeignApi::class)\nfun callRef() {\n    memScoped {\n        val cStruct = alloc<MyStruct>()\n        cStruct.a = 42\n        cStruct.b = 3.14\n\n        struct_by_pointer(cStruct.ptr)\n\n        val cUnion = alloc<MyUnion>()\n        cUnion.b.a = 5\n        cUnion.b.b = 2.7182\n\n        union_by_pointer(cUnion.ptr)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods settings in Kotlin Gradle file (Multiple Targets)\nDESCRIPTION: This Kotlin snippet configures CocoaPods settings for a multi-target Xcode project. It specifies deployment targets for both iOS and tvOS. It includes settings for the CocoaPods version, summary, homepage, and pod dependencies.  The `podfile` property points to the location of the Xcode project's Podfile. This configuration allows the Kotlin Multiplatform library to be built and linked into both iOS and tvOS targets within the Xcode project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-xcode.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n    tvosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n        tvos.deploymentTarget = \"16.0\"\n\n        pod(\"SDWebImage\") {\n            version = \"5.20.0\"\n        }\n        podfile = project.file(\"../severalTargetsXcodeProject/Podfile\") // specify the path to the Podfile\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Kotlin Native Application with Gradle\nDESCRIPTION: Command to compile and run a Kotlin Native application that has C interoperability. The cinterop tool output is implicitly included in the build.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-app-with-c-and-libcurl.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew runDebugExecutableNative\n```\n\n----------------------------------------\n\nTITLE: Handling Collection Covariance in Java using Wildcards\nDESCRIPTION: This Java snippet demonstrates how to handle covariance for collections. Because Java generics are invariant by default, a method expecting `List<Shape>` cannot directly accept a `List<Rectangle>` (where `Rectangle extends Shape`). Using the upper bounded wildcard `List<? extends Shape>` allows the method `doSthWithShapes` to accept lists of `Shape` or any of its subtypes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Java\nclass Shape {}\n\nclass Rectangle extends Shape {}\n\npublic void doSthWithShapes(List<? extends Shape> shapes) {\n/* If using just List<Shape>, the code won't compile when calling\nthis function with the List<Rectangle> as the argument as below */\n}\n\npublic void main() {\n    var rectangles = List.of(new Rectangle(), new Rectangle());\n    doSthWithShapes(rectangles);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JAR Task with Custom Destination Directory for Kotlin Compilation - Kotlin\nDESCRIPTION: This snippet demonstrates how to update a Gradle Jar task to correctly include all outputs when custom destination directories are set for Kotlin/JVM compilation tasks. It adds both the outputs from 'sourceSets.main.outputs' and 'sourceSets.main.kotlin.classesDirectories' to the generated JAR artifact. Use this in the build script when overriding the default destinationDirectory for Kotlin compile tasks to ensure all class files are packaged.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jar(type: Jar) {\n    from sourceSets.main.outputs\n    from sourceSets.main.kotlin.classesDirectories\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Declaration and Logical Operations in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to declare boolean variables (`myTrue`, `myFalse`) and a nullable boolean variable (`boolNull`). It demonstrates the use of logical OR (`||`), logical AND (`&&`), and logical NOT (`!`) operators, printing the results to the console. It also shows that printing a null `Boolean?` results in `null`. The example is runnable and requires Kotlin compiler version 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/booleans.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val myTrue: Boolean = true\n    val myFalse: Boolean = false\n    val boolNull: Boolean? = null\n\n    println(myTrue || myFalse)\n    // true\n    println(myTrue && myFalse)\n    // false\n    println(!myTrue)\n    // false\n    println(boolNull)\n    // null\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Repeatable Annotations with Custom Container in Kotlin\nDESCRIPTION: This code demonstrates how to create a repeatable annotation in Kotlin with a custom container annotation by using @JvmRepeatable. The @JvmRepeatable meta-annotation specifies the containing class (e.g., Tags), which must be explicitly declared as an annotation class with an array parameter of the repeated type. This is intended for cases where explicit container naming or customization is required, typically for Java interoperability. Dependencies include kotlin.jvm.JvmRepeatable and proper annotation structure as shown.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmRepeatable(Tags::class)\nannotation class Tag(val name: String)\n\nannotation class Tags(val value: Array<Tag>)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific JVM Implementation\nDESCRIPTION: Example of platform-specific code in jvmMain source set that uses JVM-specific dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// jvmMain/kotlin/jvm.kt\n// You can use Java dependencies in the `jvmMain` source set\nfun jvmGreeting() {\n    java.io.File(\"greeting.txt\").writeText(\"Hello, Multiplatform!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kotlin-multiplatform plugin in settings.gradle.kts\nDESCRIPTION: Demonstrates how to add the kotlin-multiplatform plugin declaration in the settings.gradle.kts file to replace the deprecated kotlin-js plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// settings.gradle.kts:\npluginManagement {\n    plugins {\n        // Add the following line instead:\n        kotlin(\"multiplatform\") version \"1.9.0\"\n    }\n    \n    repositories {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Old Backend Configuration\nDESCRIPTION: Maven configuration to enable the old JVM backend instead of the new IR backend.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <args>\n        <arg>-Xuse-old-backend</arg>\n    </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Declaring an External JS Function with @JsModule in Kotlin\nDESCRIPTION: Shows how to declare an external function `sayHello` in Kotlin that corresponds to a function exported by a JavaScript module. The `@JsModule(\"hello\")` annotation specifies that the function originates from the \"hello\" JavaScript module, enabling calls from Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsModule(\"hello\")\nexternal fun sayHello(name: String)\n```\n\n----------------------------------------\n\nTITLE: Downloading Kotlin Compiler and KSP Artifacts using Bash\nDESCRIPTION: This Bash script downloads the specified versions (using placeholders like %kspSupportedKotlinVersion%) of the Kotlin compiler and KSP artifacts using `wget` and extracts them using `unzip`. These are prerequisites for running KSP from the command line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-command-line.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Kotlin compiler\nwget https://github.com/JetBrains/kotlin/releases/download/v%kspSupportedKotlinVersion%/kotlin-compiler-%kspSupportedKotlinVersion%.zip\nunzip kotlin-compiler-%kspSupportedKotlinVersion%.zip\n\n# KSP\nwget https://github.com/google/ksp/releases/download/%kspSupportedKotlinVersion%-%kspVersion%/artifacts.zip\nunzip artifacts.zip\n```\n\n----------------------------------------\n\nTITLE: Factory Function Naming\nDESCRIPTION: Demonstrates that factory functions used to create instances of classes can have the same name as the abstract return type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ninterface Foo { /*...*/ }\n\nclass FooImpl : Foo { /*...*/ }\n\nfun Foo(): Foo { return FooImpl() }\n```\n\n----------------------------------------\n\nTITLE: Adding Processor Dependency (Kotlin)\nDESCRIPTION: This snippet shows how to add a dependency on a processor, specifically Dagger, in a Kotlin-based `build.gradle.kts` file. It includes both `implementation` and `ksp` dependencies, ensuring the processor is available at compile time and for KSP symbol processing. The Dagger version should be updated to the desired version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ndependencies {\n    implementation(\"com.google.dagger:dagger-compiler:2.51.1\")\n    ksp(\"com.google.dagger:dagger-compiler:2.51.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: When Expression Game Button Kotlin\nDESCRIPTION: This Kotlin code uses a 'when' expression to determine the action associated with a game console button. It prints the action corresponding to the button pressed. Requires Kotlin version 1.3 or higher and relies on string comparisons.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val button = \"A\"\n    \n    println(\n        when (button) {\n            \"A\" -> \"Yes\"\n            \"B\" -> \"No\"\n            \"X\" -> \"Menu\"\n            \"Y\" -> \"Nothing\"\n            else -> \"There is no such button\"\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Program Type in Kotlin/Native\nDESCRIPTION: Gradle configuration to set the Android program type to 'nativeActivity' for Kotlin/Native compilation. This reverts to the previous behavior of generating shared libraries instead of standalone executables.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nbinaryOptions[\"androidProgramType\"] = \"nativeActivity\"\n```\n\n----------------------------------------\n\nTITLE: Function Literal with Receiver\nDESCRIPTION: Shows how to declare and use function literals with receiver types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nval sum: Int.(Int) -> Int = { other -> plus(other) }\n```\n\n----------------------------------------\n\nTITLE: Pass Feature Flags to Compose Compiler Directly\nDESCRIPTION: This code snippet shows how to pass feature flags directly to the Compose compiler using the `-P` option with the `plugin:androidx.compose.compiler.plugins.kotlin:featureFlag` property. The `<flag name>` should be replaced with the actual name of the feature flag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-options.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=<flag name>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Initialization of Kotlin Extension Property\nDESCRIPTION: Shows an example of attempting to initialize an extension property (`number` for `House`), which results in a compile-time error because initializers are not allowed for extension properties due to the absence of backing fields.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval House.number = 1 // error: initializers are not allowed for extension properties\n```\n\n----------------------------------------\n\nTITLE: Customizing package.json in Kotlin/JS Projects\nDESCRIPTION: Gradle DSL configuration for adding custom fields to the package.json file in a Kotlin/JS project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1420.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js(BOTH) {\n        compilations[\"main\"].packageJson {\n            customField(\"hello\", mapOf(\"one\" to 1, \"two\" to 2))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Classes in Kotlin\nDESCRIPTION: This example demonstrates how to define a nested class in Kotlin and access its members. Nested classes don't have access to the outer class instance unless marked as inner.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/nested-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n\n----------------------------------------\n\nTITLE: Representing Color in Hexadecimal Format Using UInt\nDESCRIPTION: Demonstrates using unsigned integers to represent hexadecimal constants that don't fit in signed types, such as colors in 32-bit AARRGGBB format.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/unsigned-integer-types.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Color(val representation: UInt)\n\nval yellow = Color(0xFFCC00CCu)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Version for Specific Subproject\nDESCRIPTION: Gradle configuration to set Node.js version for a specific subproject in Kotlin/JS builds. Allows version control of Node.js runtime environment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nproject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin> {\n    project.the<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec>().version = \"your Node.js version\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nproject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin) {\n    project.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec).version = \"your Node.js version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Assert Function Example (Kotlin)\nDESCRIPTION: This code snippet demonstrates a more complex assertion using the `assert()` function in Kotlin. It highlights the importance of inlining variables for more informative error messages generated by the Power-assert plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ComplexExampleTest {\n\n    data class Person(val name: String, val age: Int)\n \n    @Test\n    fun testComplexAssertion() {\n        val person = Person(\"Alice\", 10)\n        val isValidName = person.name.startsWith(\"A\") && person.name.length > 3\n        val isValidAge = person.age in 21..28\n        assert(isValidName && isValidAge)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Unit-Level Compiler Options with Gradle Kotlin DSL\nDESCRIPTION: This Kotlin DSL example shows how to configure compiler options for a specific compilation unit or task (here, 'compileKotlin') in a build script. The 'compilerOptions {}' block is nested within a 'tasks.named<KotlinJvmCompile>()' configuration, opt-ing in to 'kotlin.RequiresOptIn' just for that task. Requires the Kotlin Gradle plugin and a task named 'compileKotlin'. These settings override those at the extension and target levels for this specific task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<KotlinJvmCompile>(\"compileKotlin\"){\n    compilerOptions {\n        optIn.add(\"kotlin.RequiresOptIn\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Case Folding in Kotlin/JS Regex\nDESCRIPTION: Describes a behavioral incompatible change for the `Regex` class in Kotlin/JS standard library. Starting partially in 1.5.0 and fully in 1.6.0 (including `replaceFirst`), `Regex` operations will use the JavaScript `unicode` flag. This enables Unicode-aware case folding for comparisons and search, requires compatible JS environments, and enforces stricter validation against unnecessary escaping in regex patterns.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Constant Value Access in Kotlin/Native\nDESCRIPTION: This Kotlin code demonstrates that accessing `const val` fields in Kotlin/Native no longer triggers object initialization, aligning with the behavior of Kotlin/JVM and Java. The object `MyObject` with an `init` block and a `const val y` field is defined. The first print statement accessing `MyObject.y` doesn't initialize the object, but the subsequent access through a reference `x` does.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nobject MyObject {\n    init {\n        println(\"side effect!\")\n    }\n\n    const val y = 1\n}\n\nfun main() {\n    println(MyObject.y) // No initialization at first\n    val x = MyObject    // Initialization occurs\n    println(x.y)\n}\n```\n\n----------------------------------------\n\nTITLE: Catching JavaScript exceptions in Kotlin\nDESCRIPTION: This Kotlin code demonstrates catching JavaScript exceptions using a `try-catch` block. It calls an external function `JSON.parse` that can throw an exception if the input is invalid JSON. The `JsException` is caught, and its properties like `thrownValue`, `message`, and stack trace are printed to the console.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal object JSON {\n    fun <T: JsAny> parse(json: String): T\n}\n\nfun main() {\n    try {\n        JSON.parse(\"an invalid JSON\")\n    } catch (e: JsException) {\n        println(\"Thrown value is: ${e.thrownValue}\")\n        // SyntaxError: Unexpected token 'a', \"an invalid JSON\" is not valid JSON\n\n        println(\"Message: ${e.message}\")\n        // Message: Unexpected token 'a', \"an invalid JSON\" is not valid JSON\n\n        println(\"Stacktrace:\")\n        // Stacktrace:\n\n        // Prints the full JavaScript stack trace \n        e.printStackTrace()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure CInterops with Kotlin DSL\nDESCRIPTION: Configures C interop settings for a specific target in Kotlin DSL. This includes specifying the definition file, package name, compiler options, include directories, and header files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.getByName(\"main\") {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                definitionFile.set(project.file(\"def-file.def\"))\n\n                // Package to place the Kotlin API generated.\n                packageName(\"org.sample\")\n\n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(\"-Ipath/to/headers\")\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                includeDirs.allHeaders(\"path1\", \"path2\")\n\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(\"include/directory\", \"another/directory\")\n\n                // Header files to be included in the bindings.\n                header(\"path/to/header.h\")\n                headers(\"path/to/header1.h\", \"path/to/header2.h\")\n            }\n\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Unit Tests in Kotlin\nDESCRIPTION: This Kotlin code defines a simple test class `AppTest` located in `src/jsTest/kotlin/`. It uses annotations and assertion functions from the `kotlin.test` library (`@Test`, `assertEquals`) to define two test cases: one expected to pass (`thingsShouldWork`) and one expected to fail (`thingsShouldBreak`), demonstrating basic test structure and assertion usage.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-running-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass AppTest {\n    @Test\n    fun thingsShouldWork() {\n        assertEquals(listOf(1,2,3).reversed(), listOf(3,2,1))\n    }\n\n    @Test\n    fun thingsShouldBreak() {\n        assertEquals(listOf(1,2,3).reversed(), listOf(1,2,3))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using let() for Local Variable Introduction in Kotlin\nDESCRIPTION: This example shows how to use let() to introduce local variables with limited scope, improving code readability by providing a custom name for the context object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val modifiedFirstItem = numbers.first().let { firstItem ->\n        println(\"The first item of the list is '$firstItem'\")\n        if (firstItem.length >= 5) firstItem else \"!\" + firstItem + \"!\"\n    }.uppercase()\n    println(\"First item after modifications: '$modifiedFirstItem'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Taking and Dropping Elements Conditionally in Kotlin\nDESCRIPTION: Shows how to use `takeWhile()`, `takeLastWhile()`, `dropWhile()`, and `dropLastWhile()` extension functions with predicates on a `List<String>`. `takeWhile` takes elements from the start as long as the predicate is true. `takeLastWhile` takes elements from the end as long as the predicate is true. `dropWhile` removes elements from the start while the predicate is true, returning the rest. `dropLastWhile` removes elements from the end while the predicate is true, returning the rest.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.takeWhile { !it.startsWith('f') })\n    println(numbers.takeLastWhile { it != \"three\" })\n    println(numbers.dropWhile { it.length == 3 })\n    println(numbers.dropLastWhile { it.contains('i') })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Property - Simple Read-Only\nDESCRIPTION: Demonstrates a one-line formatting for very simple read-only properties with a getter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nval isEmpty: Boolean get() = size == 0\n```\n\n----------------------------------------\n\nTITLE: Conditional If Statement Kotlin\nDESCRIPTION: This snippet shows the preferred way of writing a simple binary conditional statement in Kotlin, using `if` statement. It avoids using `when` for simple binary conditions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_58\n\nLANGUAGE: kotlin\nCODE:\n```\nif (x == null) ... else ...\n```\n\n----------------------------------------\n\nTITLE: Configuring XCFrameworks in Kotlin Multiplatform Project using Groovy DSL\nDESCRIPTION: Demonstrates how to set up XCFrameworks in a Kotlin Multiplatform project using the Groovy DSL. This configuration targets iOS platforms (x64, Arm64, and Simulator Arm64) and includes modules from the 'shared' and 'lib' projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinArtifacts {\n    it.native.XCFramework(\"sdk\") {\n        targets(iosX64, iosArm64, iosSimulatorArm64)\n        setModules(\n            project(\":shared\"), \n            project(\":lib\")\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Target with Custom JAR Task in Kotlin\nDESCRIPTION: This snippet demonstrates how to specify a JVM target in a Kotlin multiplatform project and configure a custom JAR task for it using Kotlin DSL. It includes structure for adding JVM-specific dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Shared module's `build.gradle.kts` file\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n\nkotlin {\n    // Specify the JVM target\n    jvm {\n        // Add the task for JAR generation\n        tasks.named<Jar>(artifactsTaskName).configure {\n            // Configure the task\n        }\n    }\n\n    sourceSets {\n        jvmMain {\n            dependencies {\n                // Add JVM-specific dependencies\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Time Marks in Kotlin\nDESCRIPTION: Demonstrates the use of inline TimeMark instances from TimeSource.Monotonic for improved performance in time measurement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalTime::class)\nfun main() {\n    val mark = TimeSource.Monotonic.markNow() // Returned `TimeMark` is inline class\n    val elapsedDuration = mark.elapsedNow()\n}\n```\n\n----------------------------------------\n\nTITLE: Java Interface with Type Qualifier Defaults\nDESCRIPTION: This Java code shows how `@NonNullApi` and `@NullableApi` are used in an interface to define default nullability.  The example shows how a default can be overridden and how `TYPE_USE` affects type arguments. Also, it demonstrates the effect of the `@Nonnull(when = When.UNKNOWN)` annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n@NullableApi\ninterface A {\n    String foo(String x); // fun foo(x: String?): String?\n\n    @NotNullApi // overriding default from the interface\n    String bar(String x, @Nullable String y); // fun bar(x: String, y: String?): String\n\n    // The List<String> type argument is seen as nullable because of `@NullableApi`\n    // having the `TYPE_USE` element type:\n    String baz(List<String> x); // fun baz(List<String?>?): String?\n\n    // The type of `x` parameter remains platform because there's an explicit\n    // UNKNOWN-marked nullability annotation:\n    String qux(@Nonnull(when = When.UNKNOWN) String x); // fun baz(x: String!): String?\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if an Object is Within a Range in Java\nDESCRIPTION: This Java snippet shows how to check if a custom object (`Version`) falls within a specified range. It defines a `Version` class implementing `Comparable`. The `versionIsInRange` method manually compares the `versionToCheck` against `minVersion` and `maxVersion` using the `compareTo` method to determine if it's within the inclusive bounds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Java\nclass Version implements Comparable<Version> {\n\n    int major;\n    int minor;\n\n    Version(int major, int minor) {\n        this.major = major;\n        this.minor = minor;\n    }\n\n    @Override\n    public int compareTo(Version o) {\n        if (this.major != o.major) {\n            return this.major - o.major;\n        }\n        return this.minor - o.minor;\n    }\n}\n\npublic void compareVersions() {\n    var minVersion = new Version(1, 11);\n    var maxVersion = new Version(1, 31);\n\n   System.out.println(\n           versionIsInRange(new Version(0, 9), minVersion, maxVersion));\n   System.out.println(\n           versionIsInRange(new Version(1, 20), minVersion, maxVersion));\n}\n\npublic Boolean versionIsInRange(Version versionToCheck, Version minVersion, \n                                Version maxVersion) {\n    return versionToCheck.compareTo(minVersion) >= 0 \n            && versionToCheck.compareTo(maxVersion) <= 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring all-open Plugin in Gradle with Groovy DSL\nDESCRIPTION: Shows how to add and configure the all-open plugin in a Gradle build script using Groovy DSL. The plugin makes classes annotated with specified annotations automatically open without requiring the 'open' keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.plugin.allopen\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing iOS Library in Kotlin Code\nDESCRIPTION: Example of how to import an iOS library in Kotlin code after setting up cinterop. This imports all symbols from the DateTools package.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport DateTools.*\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Compiler Arguments via Gradle Kotlin DSL in Kotlin\nDESCRIPTION: This Kotlin DSL snippet configures additional Kotlin compiler arguments for a Gradle build. Dependencies include the Gradle Kotlin DSL and org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask. Key parameters like apiVersion and jvmTarget set the API and JVM target compatibility. The freeCompilerArgs list is used to add single and multiple experimental arguments such as -Xexport-kdoc, -Xno-param-assertions, and others. Input is the Gradle build script; output is a configured compiler task with custom arguments. Limitations include possible future deprecation of freeCompilerArgs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\nkotlin {\n    compilerOptions {\n        // Specifies the version of the Kotlin API and the JVM target\n        apiVersion.set(KotlinVersion.%gradleLanguageVersion%)\n        jvmTarget.set(JvmTarget.JVM_1_8)\n        \n        // Single experimental argument\n        freeCompilerArgs.add(\"-Xexport-kdoc\")\n\n        // Single additional argument\n        freeCompilerArgs.add(\"-Xno-param-assertions\")\n\n        // List of arguments\n        freeCompilerArgs.addAll(\n            listOf(\n                \"-Xno-receiver-assertions\",\n                \"-Xno-call-assertions\"\n            )\n        ) \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regex.matchesAt() in Kotlin\nDESCRIPTION: Demonstrates the experimental Regex.matchesAt() function which checks whether a regular expression matches exactly at a specific position in a string, returning a boolean result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(){\n//sampleStart\n    val releaseText = \"Kotlin 1.5.30 is released!\"\n    // regular expression: one digit, dot, one digit, dot, one or more digits\n    val versionRegex = \"\\\\d[.]\\\\d[.]\\\\d+\".toRegex()\n    println(versionRegex.matchesAt(releaseText, 0)) // \"false\"\n    println(versionRegex.matchesAt(releaseText, 7)) // \"true\"\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using CValue for Struct and Union Types\nDESCRIPTION: Example of creating and using struct and union types by value in Kotlin using the cValue function for initialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.cValue\n\n@OptIn(ExperimentalForeignApi::class)\nfun callValue() {\n\n    val cStruct = cValue<MyStruct> {\n        a = 42\n        b = 3.14\n    }\n    struct_by_value(cStruct)\n\n    val cUnion = cValue<MyUnion> {\n        b.a = 5\n        b.b = 2.7182\n    }\n\n    union_by_value(cUnion)\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin get KClass from Java class\nDESCRIPTION: Shows how to obtain the Kotlin class (`KClass`) that corresponds to a Java class using the `.kotlin` extension property on `javaClass`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getKClass(o: Any): KClass<Any> = o.javaClass.kotlin\n```\n\n----------------------------------------\n\nTITLE: Throwing IllegalArgumentException in Kotlin\nDESCRIPTION: This code snippet demonstrates how to throw an IllegalArgumentException without parameters in Kotlin. It creates an instance of the IllegalArgumentException class and throws it using the 'throw' keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nthrow IllegalArgumentException()\n```\n\n----------------------------------------\n\nTITLE: Companion Object Initialization in Class Constructors\nDESCRIPTION: This Kotlin code demonstrates how companion objects are initialized when class constructors are called, unifying the behavior with Kotlin/JVM. The init block within the companion object will be executed when the `Greeting` class is instantiated.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Greeting {\n    companion object {\n        init {\n            print(\"Hello, Kotlin!\") \n        }\n    }\n}\n\nfun main() {\n    val start = Greeting() // Prints \"Hello, Kotlin!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated String Capitalization Functions in Kotlin\nDESCRIPTION: Examples of replacing deprecated locale-sensitive string capitalization functions with new locale-agnostic alternatives in Kotlin 1.5.0. These new functions help avoid errors due to different locale settings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nString.replaceFirstChar { it.uppercase() } // replaces String.capitalize()\nString.replaceFirstChar { it.lowercase() } // replaces String.decapitalize()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Opt-in Requirements for Experimental APIs\nDESCRIPTION: Example showing how opt-in requirements work with experimental APIs, including implicit usages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Library code\n\n@RequiresOptIn(message = \"This API is experimental.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime\nclass DateProvider // A class requiring opt-in\n\n// Client code\n\n// Warning: experimental API usage\nfun createDateSource(): DateProvider { /* ... */ }\n\nfun getDate(): Date {\n    val dateSource = createDateSource() // Also warning: experimental API usage\n    // ... \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin EAP Version in Maven\nDESCRIPTION: This XML snippet shows how to configure a Maven project to use an EAP version of Kotlin. It demonstrates setting the Kotlin version as a property and configuring the necessary repositories and dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/configure-build-for-eap.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<project ...>\n    <properties>\n        <kotlin.version>KOTLIN-EAP-VERSION</kotlin.version>\n    </properties>\n\n    <repositories>\n        <repository>\n           <id>mavenCentral</id>\n           <url>https://repo1.maven.org/maven2/</url>\n        </repository>\n    </repositories>\n\n    <pluginRepositories>\n       <pluginRepository>\n          <id>mavenCentral</id>\n          <url>https://repo1.maven.org/maven2/</url>\n       </pluginRepository>\n    </pluginRepositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-stdlib</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.jetbrains.kotlin</groupId>\n                <artifactId>kotlin-maven-plugin</artifactId>\n                <version>${kotlin.version}</version>\n                ...\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Build Report Example After Enabling Precise Backup\nDESCRIPTION: Sample output from a Kotlin build report after enabling the precise backup optimization, demonstrating the reduced time spent on backup operations and other performance improvements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_26\n\nLANGUAGE: none\nCODE:\n```\nTask ':kotlin-gradle-plugin:compileCommonKotlin' finished in 0.46 s\n<...>\nTime metrics:\n Total Gradle task time: 0.46 s\n Task action before worker execution: 0.07 s\n  Backup output: 0.05 s // The time has reduced\n Run compilation in Gradle worker: 0.32 s\n  Clear jar cache: 0.00 s\n  Precise backup output: 0.00 s // Related to precise backup\n  Cleaning up the backup stash: 0.00 s // Related to precise backup\n<...>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Kotlin class\nDESCRIPTION: Defines a simple Kotlin class named `User` with a mutable `name` property. This class is later used as an example for demonstrating `JsReference` usage.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(var name: String)\n```\n\n----------------------------------------\n\nTITLE: Swift Access to Kotlin Singletons\nDESCRIPTION: This Swift code shows how to access the singleton instances and their properties from Kotlin singletons (objects and companion objects). It demonstrates accessing the 'shared' instance and the 'x' property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nMyObject.shared\nMyObject.shared.x\nMyClass.companion\nMyClass.Companion.shared\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dependencies in Kotlin DSL\nDESCRIPTION: Example showing how to configure test dependencies using Kotlin DSL in a multiplatform project's commonTest source set. Demonstrates automatic JUnit4 dependency inclusion.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin(\"test\")) // This brings the dependency\n                                               // on JUnit 4 transitively\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java Annotations with Named Array Parameters in Kotlin\nDESCRIPTION: Defines a Java annotation `AnnWithArrayMethod` with a named array parameter `names`. In Kotlin, values for such parameters must be provided using either array literal syntax (`[\"abc\", ...]` ) or `arrayOf(...)`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic @interface AnnWithArrayMethod {\n    String[] names();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@AnnWithArrayMethod(names = [\"abc\", \"foo\", \"bar\"]) \nclass C\n```\n\n----------------------------------------\n\nTITLE: Kotlin functions using IntNode\nDESCRIPTION: This Kotlin code defines functions in Module Two that uses the non-generic IntNode class. These definitions will be used in Module Three to illustrate the warning.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module two\n// A function that contains a lambda \n// parameter with `IntNode` type\nfun execute(func: (IntNode) -> Unit) {}\n\nclass Container<C>(vararg val content: C)\n\n// Functions with generic class type\n// that has `IntNode` as a type argument\nfun produce(): Container<IntNode> = Container(IntNode(42))\nfun consume(arg: Container<IntNode>) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin KAPT Plugin\nDESCRIPTION: Demonstrates plugin configuration for Kotlin and Groovy build scripts to enable Kotlin Annotation Processing Tool (KAPT).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/test-page.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"kapt\") version \"1.9.23\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.kapt\" version \"1.9.23\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Interoperability with Kotlin DSL in Kotlin Multiplatform\nDESCRIPTION: Example showing how to configure native interoperability in a Kotlin Multiplatform project using the Kotlin DSL. It demonstrates setting up C interop definitions, specifying package names, compiler options, and include directories for header files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.getByName(\"main\") {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                definitionFile.set(project.file(\"def-file.def\"))\n                \n                // Package to place the Kotlin API generated.\n                packageName(\"org.sample\")\n                \n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(\"-Ipath/to/headers\")\n              \n                // Directories to look for headers.\n                includeDirs.apply {\n                    // Directories for header search (an equivalent of the -I<path> compiler option).\n                    allHeaders(\"path1\", \"path2\")\n                    \n                    // Additional directories to search headers listed in the 'headerFilter' def-file option.\n                    // -headerFilterAdditionalSearchPrefix command line option equivalent.\n                    headerFilterOnly(\"path1\", \"path2\")\n                }\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(\"include/directory\", \"another/directory\")\n            }\n            \n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding AP/Javac Options for kapt CLI\nDESCRIPTION: Kotlin function that encodes annotation processor options as a Base64 string for the kapt CLI.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nfun encodeList(options: Map<String, String>): String {\n    val os = ByteArrayOutputStream()\n    val oos = ObjectOutputStream(os)\n\n    oos.writeInt(options.size)\n    for ((key, value) in options.entries) {\n        oos.writeUTF(key)\n        oos.writeUTF(value)\n    }\n\n    oos.flush()\n    return Base64.getEncoder().encodeToString(os.toByteArray())\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over Numerical Progressions with step and downTo in Kotlin\nDESCRIPTION: This snippet demonstrates iterating over numerical progressions using `step` and `downTo`. The first loop iterates from 1 to 10, incrementing by 2 in each step. The second loop iterates from 9 down to 0, decrementing by 3 in each step.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    for (x in 1..10 step 2) {\n        print(x)\n    }\n    println()\n    for (x in 9 downTo 0 step 3) {\n        print(x)\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Common Dependencies in Kotlin Multiplatform\nDESCRIPTION: Example of adding a common dependency (kotlinx-coroutines) to the commonMain source set that will be propagated to all platform-specific source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-advanced-project-structure.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget()     // Android\n    iosArm64()          // iPhone devices \n    iosSimulatorArm64() // iPhone simulator on Apple Silicon Mac\n\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Transformation with HashSet in Kotlin\nDESCRIPTION: Demonstrates using mapTo() with HashSet as destination to eliminate duplicates while mapping collection elements to their lengths.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val result = numbers.mapTo(HashSet()) { it.length }\n    println(\"distinct item lengths are $result\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Map.getValue() Extension Function in Kotlin\nDESCRIPTION: Demonstrates the usage of Map.getValue() extension function to retrieve values from a map, with error handling and default value support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val map = mapOf(\"key\" to 42)\n    // returns non-nullable Int value 42\n    val value: Int = map.getValue(\"key\")\n\n    val mapWithDefault = map.withDefault { k -> k.length }\n    // returns 4\n    val value2 = mapWithDefault.getValue(\"key2\")\n\n    // map.getValue(\"anotherKey\") // <- this will throw NoSuchElementException\n    \n    println(\"value is $value\")\n    println(\"value2 is $value2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Sets with Dependencies (Groovy)\nDESCRIPTION: Example of configuring source sets with dependencies and showing warning for undefined targets in Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n\n    sourceSets {\n        iosMain {\n            dependencies {\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n        // Warning: accessing source set without declaring the target\n        linuxX64Main { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods with -fmodules Option for @import Support\nDESCRIPTION: Kotlin Gradle configuration for enabling support for Objective-C headers with @import directives by passing the -fmodules compiler option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    ios()\n\n    cocoapods {\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n\n        ios.deploymentTarget = \"13.5\"\n\n        pod(\"PodName\") {\n            extraOpts = listOf(\"-compiler-option\", \"-fmodules\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Karma Browsers via gradle.properties (Properties)\nDESCRIPTION: This snippet shows how to specify target browsers for Karma tests globally for all modules using the `gradle.properties` file. The `kotlin.js.browser.karma.browsers` property accepts a comma-separated list of browser names (e.g., firefox, safari). These settings can be overridden or supplemented in individual module build scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nkotlin.js.browser.karma.browsers=firefox,safari\n```\n\n----------------------------------------\n\nTITLE: Configuring All Kotlin Compilation Tasks Using Gradle Groovy DSL\nDESCRIPTION: This Groovy DSL snippet configures all tasks named 'compileKotlin' of type 'KotlinCompilationTask' using 'compilerOptions' in a Gradle build script. Options specified inside 'compilerOptions' are applied to all such compilation tasks. This is suitable for configuring settings that should be globally applied across all Kotlin compilations in the project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named('compileKotlin', KotlinCompilationTask) {\n    compilerOptions { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler in Kotlin Gradle Build Script\nDESCRIPTION: Shows how to enable the experimental K2 compiler in a Kotlin Gradle build script by setting the kotlinOptions.useK2 property to true.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<KotlinCompile> {\n    kotlinOptions.useK2 = true\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Kotlin UUID to Java UUID and Vice Versa (Kotlin)\nDESCRIPTION: Demonstrates how to convert between Kotlin UUID (`kotlin.uuid.Uuid`) and Java UUID (`java.util.UUID`) using extension functions `.toJavaUuid()` and `.toKotlinUuid()`. These functions are available in Kotlin/JVM.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nval kotlinUuid = Uuid.parseHex(\"550e8400e29b41d4a716446655440000\")\n// Converts Kotlin UUID to java.util.UUID\nval javaUuid = kotlinUuid.toJavaUuid()\n\nval javaUuid = java.util.UUID.fromString(\"550e8400-e29b-41d4-a716-446655440000\")\n// Converts Java UUID to kotlin.uuid.Uuid\nval kotlinUuid = javaUuid.toKotlinUuid()\n```\n\n----------------------------------------\n\nTITLE: Displaying LaTeX Formula with lib-ext in Kotlin\nDESCRIPTION: Renders a mathematical formula using LaTeX within a Kotlin Notebook. Requires the `lib-ext` library loaded with `%use lib-ext(0.11.0-398)`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nLATEX(\"c^2 = a^2 + b^2 - 2 a b \\\\cos\\\\alpha\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Explicit Supertype and Constructor Delegation in Kotlin\nDESCRIPTION: Illustrates explicit declaration of a base class and how a derived class delegates parameters to the base constructor via the colon syntax. Requires both classes to have primary constructors accepting the same parameter. Demonstrates standard initialization and parameter passing in inheritance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Base(p: Int)\n\nclass Derived(p: Int) : Base(p)\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Objective-C/Swift Object Deallocation on Main Thread\nDESCRIPTION: This code shows how to disable the Objective-C/Swift object deallocation hook on the main thread in Kotlin/Native by setting the `kotlin.native.binary.objcDisposeOnMain` property to `false` in the `gradle.properties` file.  This is a workaround in case issues arise with the new default behavior introduced in Kotlin 1.9.0, where `objc_release` is called on the main thread if the object was passed to Kotlin there. Setting it to false reverts to calling `objc_release` on a special GC thread.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\nkotlin.native.binary.objcDisposeOnMain=false\n```\n\n----------------------------------------\n\nTITLE: Aggregate Data and Summarize Channel Statistics\nDESCRIPTION: Aggregates the grouped channel data to calculate summary statistics for each channel. It calculates the sum of `viewCount`, extracts the title, published date, and view count of the most recently published video, sorts the results by `view` count in descending order, and flattens the structure of the result.  The result is stored in the `aggregated` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval aggregated = channels.aggregate {\n    viewCount.sum() into view\n\n    val last = maxBy { publishedAt }\n    last.title into \"last title\"\n    last.publishedAt into \"time\"\n    last.viewCount into \"viewCount\"\n    // Sorts the DataFrame in descending order by view count and transform it into a flat structure.\n}.sortByDesc(view).flatten()\naggregated\n```\n\n----------------------------------------\n\nTITLE: Creating a scatter plot with Lets-Plot\nDESCRIPTION: This snippet uses the Lets-Plot library to create a scatter plot from the prepared data. It specifies the x-axis as \"Month\", y-axis as \"Temperature\", and uses \"City\" for color-coding the data points.  `geomPoint(shape = 15)` creates the scatter plot. `ggsize(600, 500)` sets the plot size.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Specifies X and Y axes, categories and their color, plot size, and plot type\nval scatterPlot =\n    letsPlot(data) { x = \"Month\"; y = \"Temperature\"; color = \"City\" } + ggsize(600, 500) + geomPoint(shape = 15)\nscatterPlot\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency to a Custom Configuration - Groovy - Groovy\nDESCRIPTION: This Groovy DSL snippet adds the Kotlin Gradle Plugin to the custom configuration’s dependencies. The dependency notation uses a string literal with %kotlinVersion% expected to be replaced as appropriate. Prerequisites: customConfiguration must exist. Output: dependency registered for that configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    customConfiguration 'org.jetbrains.kotlin:kotlin-gradle-plugin:%kotlinVersion%'\n}\n\n```\n\n----------------------------------------\n\nTITLE: Convert properties of external interfaces to var - Kotlin\nDESCRIPTION: Changes properties of external interfaces from read-only (`val`) to mutable (`var`).  This allows values to be assigned after object creation using `js()` or `jso()` from `kotlin-wrappers`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Replace this\nexternal interface CustomComponentState : State {\n   val name: String\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n// With this\nexternal interface CustomComponentState : State {\n   var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imported jQuery in a Kotlin Application\nDESCRIPTION: Shows how to use the imported jQuery module in a Kotlin application to handle button clicks and toggle panels.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    jquery(\".toggle-button\").click {\n        jquery(\".toggle-panel\").toggle(300)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Kotlin compiler via SDKMAN!\nDESCRIPTION: This command installs the Kotlin compiler using the SDKMAN! package manager. SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits on UNIX-based systems.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsdk install kotlin\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Casting in Kotlin\nDESCRIPTION: This Kotlin function demonstrates the runtime type indistinguishability, where an `Int` is treated as a `Float` in a narrowed context. It highlights Kotlin's casting capabilities where numeric types (except `kotlin.Long`) cannot be distinguished at runtime. Ensure that the environment allows for Kotlin code execution and the correct Kotlin-JS interop configuration is set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun f() {\n    val x: Int = 23\n    val y: Any = x\n    println(y as Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Visualize Data with Kotlin DataFrame and Kandy\nDESCRIPTION: This code snippet demonstrates how to visualize data from a Kotlin DataFrame using the Kandy library to generate a bar chart. It counts the occurrences of each 'type' and creates a bar chart showing the counts for each type with custom colors and layout. Requires the DataFrame and Kandy libraries to be imported.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-add-dependencies.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrawDf\n    // Counts the occurrences of each unique value in the column named \"type\"\n    .valueCounts(sort = false) { type }\n    // Visualizes data in a bar chart specifying the colors\n    .plot {\n        bars {\n            x(type)\n            y(\"count\")\n            fillColor(type) {\n                scale = categorical(range = listOf(Color.hex(\"#00BCD4\"), Color.hex(\"#009688\")))\n            }\n        }\n\n        // Configures the layout of the chart and sets the title\n        layout {\n            title = \"Count of TV Shows and Movies\"\n            size = 900 to 550\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Message Controller in Spring Boot\nDESCRIPTION: The `MessageController.kt` file replaces the `index()` function with `listMessages()`, which returns a list of `Message` objects. This list is serialized into a JSON response. The code uses the `listOf()` function to create a read-only list and includes an example of using trailing commas in Kotlin syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-data-class.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// MessageController.kt\npackage demo\n\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\n@RequestMapping(\"/\")\nclass MessageController {\n    @GetMapping\n    fun listMessages() = listOf(\n        Message(\"1\", \"Hello!\"),\n        Message(\"2\", \"Bonjour!\"),\n        Message(\"3\", \"Privet!\"),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Data Object toString() Implementation Example\nDESCRIPTION: This code demonstrates how the toString() method automatically generated for data objects returns the simple name of the object, ignoring any properties or fields that the object might contain.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndata object MyDataObject {\n    val x: Int = 3\n}\n\nfun main() {\n    println(MyDataObject) // MyDataObject\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path Extensions for File Operations\nDESCRIPTION: Showcases new experimental extensions for java.nio.file.Path, allowing idiomatic Kotlin syntax for file operations like path construction and directory listing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1420.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// construct path with the div (/) operator\nval baseDir = Path(\"/base\")\nval subDir = baseDir / \"subdirectory\" \n\n// list files in a directory\nval kotlinFiles: List<Path> = Path(\"/home/user\").listDirectoryEntries(\"*.kt\")\n```\n\n----------------------------------------\n\nTITLE: Including Kotlin Bill of Materials (BOM) in Maven POM XML\nDESCRIPTION: This XML snippet shows how to include the Kotlin Bill of Materials (BOM) in a Maven project's dependency management section. This helps manage consistent versions of Kotlin dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>  \n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-bom</artifactId>\n            <version>%kotlinVersion%</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Creating Main App Component in Kotlin React\nDESCRIPTION: Defines the main App component with necessary imports and structure.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.coroutines.async\nimport react.*\nimport react.dom.*\nimport kotlinx.browser.window\nimport kotlinx.coroutines.*\nimport kotlinx.serialization.decodeFromString\nimport kotlinx.serialization.json.Json\nimport emotion.react.css\nimport csstype.Position\nimport csstype.px\nimport react.dom.html.ReactHTML.h1\nimport react.dom.html.ReactHTML.h3\nimport react.dom.html.ReactHTML.div\nimport react.dom.html.ReactHTML.p\nimport react.dom.html.ReactHTML.img\n\nval App = FC<Props> {\n    // typesafe HTML goes here, starting with the first h1 tag!\n}\n```\n\n----------------------------------------\n\nTITLE: Install Kotlin compiler via Snap\nDESCRIPTION: This command installs the Kotlin compiler using the Snap package manager on Ubuntu 16.04 or later. Snap provides a sandboxed environment for applications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install --classic kotlin\n```\n\n----------------------------------------\n\nTITLE: Bound class reference\nDESCRIPTION: Retrieves a reference to the exact class of a specific object using the `::class` syntax with the object as a receiver. Useful for runtime type checking and debugging.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval widget: Widget = ...\nassert(widget is GoodWidget) { \"Bad widget: ${widget::class.qualifiedName}\" }\n```\n\n----------------------------------------\n\nTITLE: Aligning Kotlin Dependency Versions with BOM in Groovy Build Script\nDESCRIPTION: Implementation of a platform dependency on kotlin-bom in Groovy DSL to align all Kotlin library versions in a project. This helps resolve version conflicts between transitive dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_34\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform('org.jetbrains.kotlin:kotlin-bom:%kotlinVersion%')\n```\n\n----------------------------------------\n\nTITLE: Comparing Lists with Mutable Elements in Kotlin\nDESCRIPTION: Illustrates how changes in mutable elements affect equality between lists in Kotlin. Demonstrates structural equality and mutability concepts. Requires Kotlin 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collections-overview.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(var name: String, var age: Int)\n\nfun main() {\n//sampleStart\n    val bob = Person(\"Bob\", 31)\n    val people = listOf(Person(\"Adam\", 20), bob, bob)\n    val people2 = listOf(Person(\"Adam\", 20), Person(\"Bob\", 31), bob)\n    println(people == people2)\n    bob.age = 32\n    println(people == people2)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Type Annotation Example in Kotlin\nDESCRIPTION: Demonstration of type annotations in Kotlin that can be emitted to JVM bytecode. Shows how to define and use an annotation that targets types with runtime retention.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n@Target(AnnotationTarget.TYPE)\nannotation class Foo\n\nclass A {\n    fun foo(): @Foo String = \"OK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Kotlin Version in Build Files\nDESCRIPTION: The code snippet shows how to specify Kotlin version 1.6.0 in build configuration files. This is required when migrating existing projects to Kotlin 1.6.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n1.6.0\n```\n\n----------------------------------------\n\nTITLE: Mapping a Kotlin Data Class to a SQL Table with Spring Data Annotations\nDESCRIPTION: This snippet shows how to annotate a Kotlin data class using Spring Data annotations for ORM mapping. The @Table annotation specifies the SQL table, and @Id indicates the primary key field. Required dependencies are Spring Data Relational and the Message class. The annotated Message class can be used seamlessly with Spring Data repositories for persistence.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.data.annotation.Id\\nimport org.springframework.data.relational.core.mapping.Table\\n \\n@Table(\"MESSAGES\")\\ndata class Message(@Id val id: String?, val text: String)\\n\n```\n\n----------------------------------------\n\nTITLE: Return Lambda from Function Kotlin\nDESCRIPTION: This code demonstrates returning a lambda expression from a function.  The `toSeconds` function returns a lambda of type `(Int) -> Int` based on the input string. The `main` function then calls `toSeconds` to get a lambda, applies it to a list of minutes, and calculates the total time in seconds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun toSeconds(time: String): (Int) -> Int = when (time) {\n    \"hour\" -> { value -> value * 60 * 60 }\n    \"minute\" -> { value -> value * 60 }\n    \"second\" -> { value -> value }\n    else -> { value -> value }\n}\n\nfun main() {\n    val timesInMinutes = listOf(2, 10, 15, 1)\n    val min2sec = toSeconds(\"minute\")\n    val totalTimeInSeconds = timesInMinutes.map(min2sec).sum()\n    println(\"Total time is $totalTimeInSeconds secs\")\n    // Total time is 1680 secs\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Repeatable Annotations with Default Container in Kotlin\nDESCRIPTION: This snippet shows how to define a basic repeatable annotation in Kotlin by marking the annotation class with the @Repeatable meta-annotation. There are no external dependencies except Kotlin itself. The compiler will automatically generate a containing annotation class (e.g., @Tag.Container), so no manual creation of the container is needed. The annotation can be applied multiple times to the same element, and the automatically generated container will aggregate these usages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n@Repeatable\nannotation class Tag(val name: String)\n\n// The compiler generates the @Tag.Container containing annotation\n```\n\n----------------------------------------\n\nTITLE: Wrapping Kotlin References for C Callbacks\nDESCRIPTION: Demonstrates how to wrap a Kotlin reference using StableRef to safely pass it through C code. This pattern is common when setting up callbacks that need to maintain Kotlin state.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\n\n@OptIn(ExperimentalForeignApi::class)\nval stableRef = StableRef.create(kotlinReference)\nval voidPtr = stableRef.asCPointer()\n```\n\n----------------------------------------\n\nTITLE: Passing Primitive Arrays to vararg Parameter - Kotlin\nDESCRIPTION: Shows how to convert a primitive type array (e.g., IntArray) to a typed array using 'toTypedArray()', enabling its use with a 'vararg' function. Required because vararg expects a reference-type array.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = intArrayOf(1, 2, 3) // IntArray is a primitive type array\nval list = asList(-1, 0, *a.toTypedArray(), 4)\n```\n\n----------------------------------------\n\nTITLE: HTTP Build Report Authentication Configuration\nDESCRIPTION: This snippet configures user credentials for HTTP build report authentication using the `kotlin.build.report.http.user` and `kotlin.build.report.http.password` properties. These are optional and used if the HTTP endpoint requires authentication.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n# Optional. User and password if the HTTP endpoint requires authentication\nkotlin.build.report.http.user=someUser\nkotlin.build.report.http.password=somePassword\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements in Kotlin\nDESCRIPTION: Demonstrates grouping elements in Kotlin using the groupBy() function. It groups Request objects by their URL, showing Kotlin's more straightforward syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Request(\n    val url: String,\n    val responseCode: Int\n)\n\nfun main() {\n    val requests = listOf(\n        Request(\"https://kotlinlang.org/docs/home.html\", 200),\n        Request(\"https://kotlinlang.org/docs/home.html\", 400),\n        Request(\"https://kotlinlang.org/docs/comparison-to-java.html\", 200)\n    )\n    println(requests.groupBy(Request::url))\n}\n```\n\n----------------------------------------\n\nTITLE: Including Compiler Arguments in HTTP Build Report\nDESCRIPTION: This snippet configures whether to include compiler arguments in HTTP build reports using the `kotlin.build.report.include_compiler_arguments` property. This is optional and defaults to `false`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_20\n\nLANGUAGE: none\nCODE:\n```\n# Optional. Add compiler arguments to a build report\n# If a project contains many modules, its compiler arguments in the report can be very heavy and not that helpful\nkotlin.build.report.include_compiler_arguments=true|false\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Message by ID\nDESCRIPTION: This HTTP request retrieves a message from the Spring Boot application by its ID. It sends a GET request to the /id endpoint on localhost:8080. Replace the sample ID with a valid message ID from the database.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-db-support.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\n### Get the message by its id\nGET http://localhost:8080/id\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Class with Test Methods in Kotlin\nDESCRIPTION: Defines a test class with test methods using JUnit annotations. Shows how to write test names with whitespaces using backticks and demonstrates different assertion methods from kotlin.test.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/ideal-for-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SampleTest {\n    @Test\n    fun `test sum`() {                  // Write test names with whitespaces in backticks\n        val a = 1\n        val b = 41\n        assertEquals(42, sum(a, b), \"Wrong result for sum($a, $b)\")\n    }\n\n    @Test\n    fun `test computation`() {\n        assertTrue(\"Computation failed\") {\n            setup()                     // Use lambda returning the test subject\n            compute()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Opt-in Requirement Annotations\nDESCRIPTION: Example of creating a custom opt-in requirement annotation with specific retention and target parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresOptIn\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin (JVM) Source with kotlinc Ant Task - XML\nDESCRIPTION: This XML Ant build script snippet demonstrates the use of the kotlinc Ant task to compile a single Kotlin source file targeting the JVM. It requires the kotlin-ant.jar from the Kotlin compiler distribution and defines the Ant project, task definition, and target for compiling hello.kt into hello.jar. The ${kotlin.lib} variable must be set to the directory containing the Kotlin compiler JARs. The main inputs are the src (source file) and output (destination JAR).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\\\"Ant Task Test\\\" default=\\\"build\\\">\\n    <typedef resource=\\\"org/jetbrains/kotlin/ant/antlib.xml\\\" classpath=\\\"${kotlin.lib}/kotlin-ant.jar\\\"/>\\n\\n    <target name=\\\"build\\\">\\n        <kotlinc src=\\\"hello.kt\\\" output=\\\"hello.jar\\\"/>\\n    </target>\\n</project>\n```\n\n----------------------------------------\n\nTITLE: Assigning Default Value on Null Result - Java\nDESCRIPTION: Illustrates the Java way to assign a default value if a method returns null. Checks the result of findOrder(), and if null, creates a new Order instance with a default Customer. Demonstrates manual null guard pattern.\nDependencies: findOrder(), Customer class. Input: none. Output: order variable is always non-null after block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Java\\nOrder order = findOrder();\\nif (order == null) {\\n    order = new Order(new Customer(\\\"Antonio\\\"))\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Pointer Types in C\nDESCRIPTION: C code that defines a function, a function pointer type, and functions that accept and return function pointers. This demonstrates the basic C constructs that will be mapped to Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-function-pointers-from-c.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint myFun(int i) {\n  return i+1;\n}\n\ntypedef int  (*MyFun)(int);\n\nvoid accept_fun(MyFun f) {\n  f(42);\n}\n\nMyFun supply_fun() {\n  return myFun;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Kotlin Function as C Function Pointer\nDESCRIPTION: Example of how to convert a Kotlin lambda into a C function pointer using staticCFunction. This shows how to implement callbacks for C functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-function-pointers-from-c.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.staticCFunction\nimport kotlinx.cinterop.ExperimentalForeignApi\n\n@OptIn(ExperimentalForeignApi::class)\nfun myFun() {\n    accept_fun(staticCFunction<Int, Int> { it + 1 })\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Checksum for XCFramework ZIP\nDESCRIPTION: This shell command computes the checksum for the ZIP file containing the XCFramework, which is needed for the Swift package manifest.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nswift package compute-checksum Shared.xcframework.zip\n```\n\n----------------------------------------\n\nTITLE: Defining a Functional Interface in Kotlin\nDESCRIPTION: Demonstrates how to define a functional interface 'Printer' with a single abstract method 'print'. This replaces the previous pattern of using an interface with a constructor function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface Printer {\n    fun print()\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Whitespace and Colon Usage\nDESCRIPTION: This snippet illustrates the proper spacing when using colons in Kotlin for inheritance, delegation, and type declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class Foo<out T : Any> : IFoo {\n    abstract fun foo(a: Int): T\n}\n\nclass FooImpl : Foo() {\n    constructor(x: String) : this(x) { /*...*/ }\n    \n    val x = object : IFoo { /*...*/ } \n}\n```\n\n----------------------------------------\n\nTITLE: Example Linkage Error Message\nDESCRIPTION: This text provides an example of an improved linkage error message produced by the Kotlin/Native compiler. It uses signature names instead of hashes, making it easier to identify and fix the issue. The example shows a missing function for a symbol.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nNo function found for symbol 'org.samples/MyClass.removedFunction|removedFunction(kotlin.Int;kotlin.String){}[0]'\n```\n\n----------------------------------------\n\nTITLE: Configuring yarn.lock Reporting in Kotlin Gradle Build Script\nDESCRIPTION: This snippet demonstrates how to configure yarn.lock reporting options in a Kotlin Gradle build script. It shows how to set the mismatch report type, enable reporting of new yarn.lock files, and configure automatic replacement of yarn.lock.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.targets.js.yarn.YarnLockMismatchReport\nimport org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension\n\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin::class.java) {\n    rootProject.the<YarnRootExtension>().yarnLockMismatchReport =\n        YarnLockMismatchReport.WARNING // NONE | FAIL\n    rootProject.the<YarnRootExtension>().reportNewYarnLock = false // true\n    rootProject.the<YarnRootExtension>().yarnLockAutoReplace = false // true\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Annotations on Class Type Parameters in Kotlin 1.6.0\nDESCRIPTION: Shows how to use annotations on class type parameters, a new feature in Kotlin 1.6.0. These annotations are emitted into JVM bytecode for use by annotation processors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Target(AnnotationTarget.TYPE_PARAMETER)\nannotation class BoxContent\n\nclass Box<@BoxContent T> {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Threading in Kotlin\nDESCRIPTION: This snippet uses a thread to perform operations without blocking the UI. It highlights the challenges with threads in terms of resource constraints and debugging difficulties. Dependencies: Kotlin standard library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/async-programming.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun postItem(item: Item) {\n    val token = preparePost()\n    val post = submitPost(token, item)\n    processPost(post)\n}\n\nfun preparePost(): Token {\n    // makes a request and consequently blocks the main thread\n    return token\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Replace Pattern Usage in Kotlin\nDESCRIPTION: Shows the usage of regex replace() and replaceFirst() functions with escape patterns for literal replacement strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(Regex(\"(.+)\").replace(\"Kotlin\", \"\\\\$ $1\")) // $ Kotlin\n    println(Regex(\"(.+)\").replaceFirst(\"1.6.0\", \"\\\\\\\\ $1\")) // \\ 1.6.0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Test Dependency in Kotlin DSL\nDESCRIPTION: Demonstrates how to add the `kotlin.test` dependency to the `commonTest` source set using Kotlin DSL. Adding it to `commonTest` automatically brings in the necessary platform-specific testing dependencies for all configured targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonTest.dependencies {\n            implementation(kotlin(\"test\")) // Brings all the platform dependencies automatically\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Delegated Properties with 'this' in Kotlin\nDESCRIPTION: Demonstrates an optimization for delegated properties in Kotlin 1.7.20, where the $delegate field is omitted when delegating to 'this'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>) ...\n \n    val s by this\n}\n```\n\n----------------------------------------\n\nTITLE: Java Derived Class with Nullable String\nDESCRIPTION: This Java code defines a `Derived` class that extends the `Base` class, using a `@Nullable String` as the type argument. This defines `Derived` to be a `Base` of nullable strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class Derived extends Base<@Nullable String> {}\n```\n\n----------------------------------------\n\nTITLE: Using No-arg Plugin with Command-line Kotlin Compiler\nDESCRIPTION: Shows how to use the no-arg compiler plugin with the command-line Kotlin compiler, specifying the plugin JAR path and configuration parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=$KOTLIN_HOME/lib/noarg-compiler-plugin.jar\n-P plugin:org.jetbrains.kotlin.noarg:annotation=com.my.Annotation\n-P plugin:org.jetbrains.kotlin.noarg:preset=jpa\n```\n\n----------------------------------------\n\nTITLE: Using refTo for Simplified Object Pinning\nDESCRIPTION: Demonstrates an alternative approach to object pinning using the refTo extension function, which reduces boilerplate by automatically pinning the object, passing its address to a C function, and unpinning afterward.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\nimport platform.posix.*\n  \n@OptIn(ExperimentalForeignApi::class)\nfun readData(fd: Int) { \n    val buffer = ByteArray(1024)\n    while (true) {\n        val length = recv(fd, buffer.refTo(0), buffer.size.convert(), 0).toInt()\n\n        if (length <= 0) {\n            break\n        }\n        // Now `buffer` has raw data obtained from the `recv()` call.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotlin JVM Plugin with Gradle (Groovy)\nDESCRIPTION: Adds the Kotlin JVM plugin to a Gradle project using Groovy DSL. Assumes default JVM version unless specified. Minimum requirement is the Kotlin plugin version to be declared.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Delegation to a Referenced Property in Kotlin\nDESCRIPTION: This snippet demonstrates an optimized delegation pattern where the property is delegated to an existing property reference (e.g., ::impl). In this case, the compiler skips creating the $delegate field and instead directly accesses and updates the referenced property. This pattern saves memory and avoids unnecessary reflection or operator calls. It is best used when the delegate logic is trivial and property indirection is desired.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C<Type> {\n    private var impl: Type = ...\n    var prop: Type by ::impl\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Suppress Warnings Option on Compilation Task with Gradle Groovy DSL\nDESCRIPTION: This Groovy DSL example sets the 'suppressWarnings' option to true for a specified Kotlin compilation task ('compileKotlin') using 'KotlinCompilationTask' in a Gradle build script. The snippet demonstrates task-configuration with 'tasks.named' and requires importing the appropriate class. This disables compiler warnings output for the configured compilation task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named('compileKotlin', KotlinCompilationTask) {\n    compilerOptions {\n        suppressWarnings = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pod Library with Custom Package Name\nDESCRIPTION: Shows how to import a Pod library using a custom package name specified in the packageName parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport FirebaseAuthWrapper.Auth\nimport FirebaseAuthWrapper.User\n```\n\n----------------------------------------\n\nTITLE: Enum Class with Trailing Comma in Kotlin\nDESCRIPTION: This snippet showcases an enum class definition with a trailing comma after the last enum value. Using trailing commas is encouraged for maintainability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Direction {\n    NORTH,\n    SOUTH,\n    WEST,\n    EAST, // trailing comma\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Packages and Imports in Kotlin\nDESCRIPTION: This snippet demonstrates how to define a package and import necessary libraries in a Kotlin file. The package specification should be at the top of the source file. However, it's not required for the directories and packages to match, allowing source files to be placed arbitrarily.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage my.demo\n\nimport kotlin.text.*\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Source Sets with Custom Hierarchy (Groovy)\nDESCRIPTION: Example of creating additional source sets while using the default hierarchy template in Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm()\n    macosArm64()\n    iosArm64()\n    iosSimulatorArm64()\n\n    // Apply the default hierarchy again. It'll create, for example, the iosMain source set:\n    applyDefaultHierarchyTemplate()\n\n    sourceSets {\n        // Create an additional jvmAndMacos source set:\n        jvmAndMacos {\n            dependsOn(commonMain.get())\n        }\n        macosArm64Main {\n            dependsOn(jvmAndMacos.get())\n        }\n        jvmMain {\n            dependsOn(jvmAndMacos.get())\n        }\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Operations on Collections in Java\nDESCRIPTION: Illustrates how to perform aggregate operations, such as finding the maximum value, on collections in Java using the Stream API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Java\nvar numbers = new ArrayList<Integer>();\nvar max = numbers.stream().max(Comparator.naturalOrder()).orElse(null);\nSystem.out.println(\"Max: \" + max);\n```\n\n----------------------------------------\n\nTITLE: Kotlin Casting to Objective-C Types\nDESCRIPTION: This Kotlin code demonstrates casting Kotlin types to their Objective-C equivalents (e.g., `List` to `NSArray`, `String` to `NSString`, `Int` to `NSNumber`). These casts allow for seamless interaction with Objective-C APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nval nsArray = listOf(1, 2, 3) as NSArray\nval string = nsString as String\nval nsNumber = 42 as NSNumber\n```\n\n----------------------------------------\n\nTITLE: Defining VideoList Props Interface\nDESCRIPTION: Creates an external interface for VideoList component props.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal interface VideoListProps : Props {\n    var videos: List<Video>\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Strings with trimIndent in Kotlin\nDESCRIPTION: Illustrates Kotlin's approach to multiline strings using triple-quotes with trimIndent() function to handle indentation automatically.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val result = \"\"\"\n        Kotlin\n           Java \n    \"\"\".trimIndent()\n    println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Capture Group by Name in Kotlin\nDESCRIPTION: This code demonstrates how to use the new common `groups` function in Kotlin 1.9.0 to retrieve regular expression capture groups by name. It defines a regex with named capture groups for city, state, and areaCode and then uses the `groups` function to access the matched values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val regex = \"\"\"\\b(?<city>[A-Za-z\\s]+),\\s(?<state>[A-Z]{2}):\\s(?<areaCode>[0-9]{3})\\b\"\"\".toRegex()\n    val input = \"Coordinates: Austin, TX: 123\"\n    \n    val match = regex.find(input)!!\n    println(match.groups[\"city\"]?.value)\n    // Austin\n    println(match.groups[\"state\"]?.value)\n    // TX\n    println(match.groups[\"areaCode\"]?.value)\n    // 123\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling Repeatable Annotation Container Constraint Checks (Kotlin)\nDESCRIPTION: This Kotlin compiler flag temporarily disables the error reporting introduced in Kotlin 1.6 for violations of Java Language Specification (JLS) requirements for repeatable annotation container classes, and also disables the check prohibiting a nested class named 'Container' within such annotations. This allows code violating these constraints to compile without errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-RepeatableAnnotationContainerConstraints\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic Kotlin Main Function\nDESCRIPTION: This Kotlin `main` function serves as the entry point for the program. It declares a string variable `name`, prints a personalized greeting using string templating (`\"Hi, $name!\"`), and then prints numbers from 0 to 10 sequentially using a `for` loop that iterates over an inclusive range (`0..10`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/simple.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val name = \"stranger\"        // Declare your first variable\n    println(\"Hi, $name!\")        // ...and use it!\n    print(\"Current count:\")\n    for (i in 0..10) {           // Loop over a range from 0 to 10\n        print(\" $i\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison of Generated JavaScript from unsafeCast() and as Operator in Kotlin/JS\nDESCRIPTION: Displays the corresponding JavaScript emitted by the Kotlin/JS compiler when using unsafeCast versus as. Shows that unsafeCast returns the value unchanged, while as includes JavaScript runtime type checking and throws if not a string. Useful for understanding the output and performance implications when bridging Kotlin types into JavaScript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction usingUnsafeCast(s) {\n    return s;\n}\n\nfunction usingAsOperator(s) {\n    var tmp$;\n    return typeof (tmp$ = s) === 'string' ? tmp$ : throwCCE();\n}\n```\n\n----------------------------------------\n\nTITLE: Using JsAny in Kotlin/Wasm vs dynamic in Kotlin/JS\nDESCRIPTION: This code snippet demonstrates how to use `JsAny` in Kotlin/Wasm as an alternative to the `dynamic` type in Kotlin/JS. It includes examples for both Kotlin/JS and Kotlin/Wasm to illustrate the difference when interacting with untyped JavaScript objects. No specific dependencies are required beyond the Kotlin/Wasm and Kotlin/JS toolchains.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Kotlin/JS\nfun processUser(user: dynamic, age: Int) {\n    // ...\n    user.profile.updateAge(age)\n    // ...\n}\n\n// Kotlin/Wasm\nprivate fun updateUserAge(user: JsAny, age: Int): Unit =\n    js(\"{ user.profile.updateAge(age); }\")\n\nfun processUser(user: JsAny, age: Int) {\n    // ...\n    updateUserAge(user, age)\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Bindings Using Command Line in Kotlin/Native\nDESCRIPTION: This snippet provides an example of using the `cinterop` command-line tool to generate a `png.klib` compiled library from a `png.def` file.  The command specifies the definition file, compiler options (including include paths), and the output file name. The generated bindings are generally platform-specific.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncinterop -def png.def -compiler-option -I/usr/local/include -o png\n```\n\n----------------------------------------\n\nTITLE: Resolving Builder Inference Error with Extension Function in Kotlin\nDESCRIPTION: Demonstrates how to fix a builder inference error caused by an extension function hiding a member function. The solution is to explicitly specify the type argument in the buildList function call.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Data {\n    fun doSmth() {} // 1\n}\n\nfun <T> T.doSmth() {} // 2\n\nfun test() {\n    buildList<Data> { // Type argument!\n        this.add(Data())\n        this.get(0).doSmth() // Resolves to 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating useIR Compiler Option\nDESCRIPTION: Details the deprecation process for the `useIR` compiler option, a source incompatible change. This option, related to enabling the IR backend, was deprecated with a warning in 1.5.0, hidden (but potentially still functional) in 1.6.0, and is planned for complete removal in version 1.7.0 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Installing a Library to the Default Repository\nDESCRIPTION: Shows how to install a Kotlin/Native library to the default repository.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ klib install kotlinizer\n```\n\n----------------------------------------\n\nTITLE: Configuring Lombok Plugin in Maven\nDESCRIPTION: This XML snippet shows how to configure the Kotlin Lombok plugin in a Maven pom.xml file, including setting up the compiler plugin and dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.jetbrains.kotlin</groupId>\n    <artifactId>kotlin-maven-plugin</artifactId>\n    <version>${kotlin.version}</version>\n    <configuration>\n        <compilerPlugins>\n            <plugin>lombok</plugin>\n        </compilerPlugins>\n        <pluginOptions>\n            <option>lombok:config=${project.basedir}/lombok.config</option>\n        </pluginOptions>\n    </configuration>\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-lombok</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.20</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Main Function Template\nDESCRIPTION: Basic Kotlin template showing import statements and function calls that need to be implemented for struct and union operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n\n    struct_by_value(/* fix me*/)\n    struct_by_pointer(/* fix me*/)\n    union_by_value(/* fix me*/)\n    union_by_pointer(/* fix me*/)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Employees\nDESCRIPTION: This code snippet defines a data class `Employee` and requires the declaration of a `RandomEmployeeGenerator` class. The `RandomEmployeeGenerator` is configured with minimum and maximum salary values. The `main` function demonstrates the usage of the class to generate random employees and update the salary range.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\ndata class Employee(val name: String, var salary: Int)\n\n// Write your code here\n\nfun main() {\n    val empGen = RandomEmployeeGenerator(10, 30)\n    println(empGen.generateEmployee())\n    println(empGen.generateEmployee())\n    println(empGen.generateEmployee())\n    empGen.minSalary = 50\n    empGen.maxSalary = 100\n    println(empGen.generateEmployee())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack DevServer\nDESCRIPTION: Configuration for Webpack DevServer to enable source access for debugging\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndevServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {\n    static = (static ?: mutableListOf()).apply {\n        // Serve sources to debug inside browser\n        add(project.rootDir.path)\n        add(project.projectDir.path)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin non-generic IntNode\nDESCRIPTION: This Kotlin code defines a non-generic class `IntNode` to illustrate how Kotlin 2.0.0 provides warnings for inaccessible types, even when not generic.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module one\nclass IntNode(val value: Int)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Daemon JVM Args in Specific Task (Groovy)\nDESCRIPTION: This snippet shows how to specify JVM arguments for the Kotlin daemon for a specific compilation task using Groovy DSL. It configures all tasks of type `CompileUsingKotlinDaemon` to use the given JVM arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\ntasks.withType(CompileUsingKotlinDaemon).configureEach { task ->\n    task.kotlinDaemonJvmArguments = [\"-Xmx1g\", \"-Xms512m\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Expected Annotation Class in Kotlin Multiplatform\nDESCRIPTION: Creates an expected annotation class XmlSerializable and applies it to a Person class. This demonstrates the basic pattern for declaring annotations that will have platform-specific implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.RUNTIME)\nexpect annotation class XmlSerializable()\n\n@XmlSerializable\nclass Person(val name: String, val age: Int)\n```\n\n----------------------------------------\n\nTITLE: DOM event listener before 1.9.20\nDESCRIPTION: Before Kotlin 1.9.20, DOM event listeners were required to return a value. This code shows how the value `null` was often explicitly returned, even if it served no purpose.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    window.onload = {\n        document.body?.sayHello()\n        null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Kotlin Array (Inefficient)\nDESCRIPTION: Shows how adding an element to a Kotlin `Array` using the `+=` operator results in the creation of a new array containing the original elements plus the new one. This illustrates the fixed-size nature of arrays and the inefficiency of this operation compared to mutable collections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/arrays.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    var riversArray = arrayOf(\"Nile\", \"Amazon\", \"Yangtze\")\n\n    // Using the += assignment operation creates a new riversArray,\n    // copies over the original elements and adds \"Mississippi\"\n    riversArray += \"Mississippi\"\n    println(riversArray.joinToString())\n    // Nile, Amazon, Yangtze, Mississippi\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using CharSequence.splitToSequence() with Regex in Kotlin\nDESCRIPTION: Illustrates the alternative syntax for splitToSequence using the CharSequence extension method with a Regex parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval mixedColor = colorsText.splitToSequence(regex)\n```\n\n----------------------------------------\n\nTITLE: Testing Kotlin/Wasm Application in Deno\nDESCRIPTION: Gradle command to run tests for the Kotlin/Wasm application in Deno environment, ensuring compatibility with this alternative JavaScript runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmWasiDenoTest\n```\n\n----------------------------------------\n\nTITLE: Objective-C Interface Definition for Kotlin Class and Interface\nDESCRIPTION: Defines an Objective-C protocol and interface that maps to a Kotlin interface and class, respectively. Includes attributes for Swift name mapping and availability. It showcases the generated interfaces for a Kotlin interface and class, defining their methods and properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n__attribute__((swift_name(\"Interface\")))\n@protocol DemoInterface\n@required\n- (void)iMember __attribute__((swift_name(\"iMember()\")));\n@end\n\n__attribute__((objc_subclassing_restricted))\n__attribute__((swift_name(\"Clazz\")))\n@interface DemoClazz : DemoBase <DemoInterface>\n- (instancetype)init __attribute__((swift_name(\"init()\"))) __attribute__((objc_designated_initializer));\n+ (instancetype)new __attribute__((availability(swift, unavailable, message=\"use object initializers instead\")));\n- (DemoULong * _Nullable)memberP:(int32_t)p __attribute__((swift_name(\"member(p:)\")));\n@end\n```\n\n----------------------------------------\n\nTITLE: Zipping Elements in Java\nDESCRIPTION: Illustrates how to zip elements from two collections in Java by iterating over them simultaneously. It combines elements with the same index from both collections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_29\n\nLANGUAGE: java\nCODE:\n```\npublic void zip() {\n    var colors = List.of(\"red\", \"brown\");\n    var animals = List.of(\"fox\", \"bear\", \"wolf\");\n\n    for (int i = 0; i < Math.min(colors.size(), animals.size()); i++) {\n        String animal = animals.get(i);\n        System.out.println(\"The \" + animal.substring(0, 1).toUpperCase()\n               + animal.substring(1) + \" is \" + colors.get(i));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing non-existent source set with Kotlin warning\nDESCRIPTION: This Kotlin code demonstrates the warning generated when attempting to access a source set that doesn't exist because the respective target is not declared. In this case, `jvmMain` is accessed without declaring the `jvm` target, resulting in a warning during the build process. This showcases the IDE's ability to provide feedback on incorrect project configurations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n\n    sourceSets {\n        jvmMain {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Function Mangling with Kotlin Inline Classes\nDESCRIPTION: Demonstrates the concept of function name mangling for functions accepting inline classes. Because the inline class `UInt` is represented as its underlying type `Int` at runtime, the two `compute` functions would normally have the same JVM signature (`compute(int)`). Kotlin avoids this clash by mangling the name of the function accepting the inline class, appending a hashcode.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class UInt(val x: Int)\n\n// Represented as 'public final void compute(int x)' on the JVM\nfun compute(x: Int) { }\n\n// Also represented as 'public final void compute(int x)' on the JVM!\nfun compute(x: UInt) { }\n```\n\n----------------------------------------\n\nTITLE: Full Example of Map-Based Delegated Properties with main() - Kotlin\nDESCRIPTION: Provides a complete, runnable example where class properties delegate access to map keys, and the class is used to fetch dynamic data. Demonstrates both class definition and practical use within a main() function. Relies on standard Kotlin collections and properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n\nfun main() {\n    val user = User(mapOf(\n        \"name\" to \"John Doe\",\n        \"age\"  to 25\n    ))\n//sampleStart\n    println(user.name) // Prints \"John Doe\"\n    println(user.age)  // Prints 25\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Gradle Configuration - Kotlin - Kotlin\nDESCRIPTION: This snippet demonstrates how to register a new custom configuration named \"customConfiguration\" in a Gradle build script using the Kotlin DSL. It provides a template for extending project dependency management. No external dependencies are required, and the configuration can be further customized within the lambda. Input: no parameters. Output: a new configuration available for later dependency declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigurations.register(\"customConfiguration\") {\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining external declarations for ReactPlayer in Kotlin\nDESCRIPTION: Creates external declarations for the ReactPlayer component from the react-player npm package, including prop types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JsModule(\"react-player\")\n@file:JsNonModule\n\nimport react.*\n\n@JsName(\"default\")\nexternal val ReactPlayer: ComponentClass<ReactPlayerProps>\n\nexternal interface ReactPlayerProps : Props {\n    var url: String\n    var controls: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Centralized Repositories in settings.gradle\nDESCRIPTION: This example demonstrates how to declare repositories centrally in the settings.gradle file using the dependencyResolutionManagement block. This approach allows sharing repository configurations across multiple subprojects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Kotlin Native Executable\nDESCRIPTION: Command to execute the compiled Kotlin/Native program from the build directory. The path includes the build output directory and the debug executable with the project name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbuild/bin/native/debugExecutable/<project_name>.kexe\n```\n\n----------------------------------------\n\nTITLE: Enabling Precise Backup for Kotlin Compilation\nDESCRIPTION: Gradle properties configuration to enable experimental precise backup of compilation task outputs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_23\n\nLANGUAGE: none\nCODE:\n```\nkotlin.compiler.preciseCompilationResultsBackup=true\n```\n\n----------------------------------------\n\nTITLE: Type Arguments with Trailing Comma in Kotlin\nDESCRIPTION: This example demonstrates type arguments using a trailing comma within a function call.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T1, T2> foo() {}\nfun main() {\n    foo<\n            Comparable<Number>,\n            Iterable<Number>, // trailing comma\n            >()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM IR Backend in Gradle (Kotlin DSL)\nDESCRIPTION: Configuration to enable the new JVM IR backend in a Gradle project using Kotlin DSL. This sets the 'useIR' option to true for all Kotlin JVM compile tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile::class) {\n  kotlinOptions.useIR = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Gradle Projects for Separate Implementations\nDESCRIPTION: This snippet demonstrates how to add new Gradle projects for separate implementations (e.g., Ktor and OkHttp) in the settings.gradle.kts file. This approach is recommended for managing multiple implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninclude(\":okhttp-impl\")\ninclude(\":ktor-impl\")\n```\n\n----------------------------------------\n\nTITLE: Enable Compose Feature Flag\nDESCRIPTION: This code snippet shows how to enable a Compose feature flag that is disabled by default by including it in the `featureFlags` set. The example uses the `OptimizeNonSkippingGroups` feature flag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-options.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfeatureFlags = setOf(ComposeFeatureFlag.OptimizeNonSkippingGroups)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class Header with Opening Brace on New Line\nDESCRIPTION: Demonstrates an alternative style for separating a long class header from its body by placing the opening curly brace on a separate line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFavouriteVeryLongClassHolder :\n    MyLongHolder<MyFavouriteVeryLongClass>(),\n    SomeOtherInterface,\n    AndAnotherOne \n{\n    fun foo() { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Regex Matches using Pattern and Matcher in Java\nDESCRIPTION: Demonstrates using Java's `Pattern` and `Matcher` classes to find all substrings matching a regular expression (`\\w*\\d+\\w*`) within an input string and replace each match with 'xxx'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Java\nString input = \"login: Pokemon5, password: 1q2w3e4r5t\";\nPattern pattern = Pattern.compile(\"\\\\w*\\\\d+\\\\w*\");\nMatcher matcher = pattern.matcher(input);\nString replacementResult = matcher.replaceAll(it -> \"xxx\");\nSystem.out.println(\"Initial input: '\" + input + \"'\");\nSystem.out.println(\"Anonymized input: '\" + replacementResult + \"'\");\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling Annotation Target Checks in Type Use Positions (Kotlin)\nDESCRIPTION: This Kotlin compiler flag disables the error introduced in Kotlin 1.6 related to stricter checking of annotation targets when annotations are applied to types. It allows annotations that should not be applicable to types according to their target definition to be used on types without causing a compilation error, reverting temporarily to pre-1.6 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-ProperCheckAnnotationsTargetInTypeUsePositions\n```\n\n----------------------------------------\n\nTITLE: Applying Annotations to Lambda Expressions in Kotlin\nDESCRIPTION: Demonstrates applying an annotation (`@Suspendable`) directly to a lambda expression in Kotlin. The annotation targets the `invoke()` method generated for the lambda, useful for frameworks that rely on annotations for specific behaviors like concurrency control.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class Suspendable\n\nval f = @Suspendable { Fiber.sleep(10) } // Assuming Fiber.sleep exists\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/Native targets in Gradle\nDESCRIPTION: Gradle configuration for setting up Kotlin/Native targets based on the host operating system and architecture.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-app-with-c-and-libcurl.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    val hostOs = System.getProperty(\"os.name\")\n    val isArm64 = System.getProperty(\"os.arch\") == \"aarch64\"\n    val isMingwX64 = hostOs.startsWith(\"Windows\")\n    val nativeTarget = when {\n        hostOs == \"Mac OS X\" && isArm64 -> macosArm64(\"native\")\n        hostOs == \"Mac OS X\" && !isArm64 -> macosX64(\"native\")\n        hostOs == \"Linux\" && isArm64 -> linuxArm64(\"native\")\n        hostOs == \"Linux\" && !isArm64 -> linuxX64(\"native\")\n        isMingwX64 -> mingwX64(\"native\")\n        else -> throw GradleException(\"Host OS is not supported in Kotlin/Native.\")\n    }\n\n    nativeTarget.apply {\n        binaries {\n            executable {\n                entryPoint = \"main\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Appendable Operations in Kotlin\nDESCRIPTION: Demonstrates the usage of new appendLine() functions in the common library for string building operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(buildString {\n        appendLine(\"Hello,\")\n        appendLine(\"world\")\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Postponed Type Variables with Concrete Types\nDESCRIPTION: Demonstrates how builder inference collects type information when a postponed type variable is assigned to a variable with a concrete type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = buildList {\n    val x = get(0)\n    val y: String = x\n} // result has the List<String> type inferred\n```\n\n----------------------------------------\n\nTITLE: Converting Between Platform-Dependent Integer Types\nDESCRIPTION: Shows how to use the convert extension method to handle platform-dependent integer types like size_t when calling C functions, which helps with writing portable code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\nimport platform.posix.*\n\n@OptIn(ExperimentalForeignApi::class)\nfun zeroMemory(buffer: COpaquePointer, size: Int) {\n    memset(buffer, 0, size.convert<size_t>())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining external declarations for react-share components in Kotlin\nDESCRIPTION: Creates external declarations for various components from the react-share npm package, including share buttons and icons.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JsModule(\"react-share\")\n@file:JsNonModule\n\nimport react.ComponentClass\nimport react.Props\n\n@JsName(\"EmailIcon\")\nexternal val EmailIcon: ComponentClass<IconProps>\n\n@JsName(\"EmailShareButton\")\nexternal val EmailShareButton: ComponentClass<ShareButtonProps>\n\n@JsName(\"TelegramIcon\")\nexternal val TelegramIcon: ComponentClass<IconProps>\n\n@JsName(\"TelegramShareButton\")\nexternal val TelegramShareButton: ComponentClass<ShareButtonProps>\n\nexternal interface ShareButtonProps : Props {\n    var url: String\n}\n\nexternal interface IconProps : Props {\n    var size: Int\n    var round: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Include a Static Library in Kotlin/Native cinterop\nDESCRIPTION: This snippet shows how to include a static library in a `.klib` file using the `staticLibrary` and `libraryPaths` properties in the `.def` file. The cinterop tool searches for the specified library in the given paths and includes its binary in the resulting `klib` file, which is then automatically linked when used in a Kotlin/Native program.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nheaders = foo.h\nstaticLibraries = libfoo.a\nlibraryPaths = /opt/local/lib /usr/local/opt/curl/lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Maven Plugin for Compilation\nDESCRIPTION: Sets up the Kotlin Maven plugin with executions for compiling both main and test Kotlin source code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n\n                <execution>\n                    <id>test-compile</id>\n                    <goals>\n                        <goal>test-compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Enabling Memory Leak Checker in Kotlin/Native\nDESCRIPTION: Code snippet showing how to enable the built-in memory leak checker in Kotlin/Native, which is disabled by default in version 1.5.0. This is useful for certain cases like unit testing but not recommended for application runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nPlatform.isMemoryLeakCheckerActive = true\n```\n\n----------------------------------------\n\nTITLE: Output of Object Reclamation Example\nDESCRIPTION: Shows the console output from the object reclamation example, highlighting the difference in timing between Swift's immediate deinitialization and the delayed deinitialization for objects passed to Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nshared.SwiftExample\nSwiftExample deinit\nswiftTestFinished\nshared.SwiftExample\nkotlinTest finished\nSwiftExample deinit\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Test Dependency in Groovy DSL\nDESCRIPTION: Demonstrates how to add the `kotlin.test` dependency to the `commonTest` source set using Groovy DSL. Adding it to `commonTest` automatically brings in the necessary platform-specific testing dependencies for all configured targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\"test\") // Brings all the platform dependencies automatically\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring kapt in Gradle for Lombok\nDESCRIPTION: This Groovy snippet shows how to configure kapt in Gradle to keep Java's annotation processors working alongside Lombok.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkapt {\n    keepJavacAnnotationProcessors = true\n}\n```\n\n----------------------------------------\n\nTITLE: Java Class Definition with Getters\nDESCRIPTION: Example Java class with private fields and getter methods that demonstrate how Kotlin synthetic properties are derived from Java getters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: StringBuilder Operations in Kotlin\nDESCRIPTION: Shows new StringBuilder extension functions including setRange(), deleteRange(), insertRange(), and set() for string manipulation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val sb = StringBuilder(\"Bye Kotlin 1.3.72\")\n    sb.deleteRange(0, 3)\n    sb.insertRange(0, \"Hello\", 0 ,5)\n    sb.set(15, '4')\n    sb.setRange(17, 19, \"0\")\n    print(sb.toString())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Delegation with Kotlin Inline Classes\nDESCRIPTION: Shows that an inline class can implement an interface by delegating the implementation to its underlying value, provided the underlying value also implements that interface. The `MyInterfaceWrapper` inline class wraps a `MyInterface` instance and delegates the interface calls to it using the `by` keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MyInterface {\n    fun bar()\n    fun foo() = \"foo\"\n}\n\n@JvmInline\nvalue class MyInterfaceWrapper(val myInterface: MyInterface) : MyInterface by myInterface\n\nfun main() {\n    val my = MyInterfaceWrapper(object : MyInterface {\n        override fun bar() {\n            // body\n        }\n    })\n    println(my.foo()) // prints \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Namespaced Kotlin Function (Plain Module)\nDESCRIPTION: Shows how to call the namespaced Kotlin function `foo` (defined in `my.qualified.packagename`) from JavaScript when using the `plain` module system. Access requires specifying the full package path on the module object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nalert(myModule.my.qualified.packagename.foo());\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Block with Basic Settings\nDESCRIPTION: Demonstrates a complete cocoapods block configuration with version, name, summary, homepage and other basic Pod metadata settings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-dsl-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n   \n    cocoapods {\n        version = \"2.0\"\n        name = \"MyCocoaPod\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        \n        extraSpecAttributes[\"vendored_frameworks\"] = 'CustomFramework.xcframework'\n        license = \"{ :type => 'MIT', :text => 'License text'}\"\n        source = \"{ :git => 'git@github.com:vkormushkin/kmmpodlibrary.git', :tag => '$version' }\"\n        authors = \"Kotlin Dev\"\n        \n        specRepos {\n            url(\"https://github.com/Kotlin/kotlin-cocoapods-spec.git\")\n        }\n        pod(\"example\")\n        \n        xcodeConfigurationToNativeBuildType[\"CUSTOM_RELEASE\"] = NativeBuildType.RELEASE\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Local Development Server for Kotlin/Wasm Application\nDESCRIPTION: URL to access the locally running Kotlin/Wasm Compose Multiplatform application in a web browser.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Apply Power-assert Plugin (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to apply the Power-assert plugin in a Kotlin build.gradle.kts file. It requires Kotlin and the Kotlin Gradle plugin to be set up. The snippet adds the `kotlin(\"plugin.power-assert\")` plugin with a specified version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nplugins {\n    kotlin(\"multiplatform\") version \"2.0.0\"\n    kotlin(\"plugin.power-assert\") version \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit API Mode in Kotlin Gradle Build Scripts\nDESCRIPTION: Configuration examples for enabling explicit API mode in Kotlin projects using Gradle. Shows both strict and warning modes for Kotlin DSL and Groovy DSL build scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {    \n    // for strict mode\n    explicitApi() \n    // or\n    explicitApi = ExplicitApiMode.Strict\n    \n    // for warning mode\n    explicitApiWarning()\n    // or\n    explicitApi = ExplicitApiMode.Warning\n}\n```\n\n----------------------------------------\n\nTITLE: Applying default hierarchy template and configuring additional source sets\nDESCRIPTION: This Kotlin code demonstrates how to explicitly apply the default hierarchy template and configure additional source sets using `dependsOn()`. It shows how to create a `jvmAndMacos` source set shared between `jvm` and `macosArm64` targets, requiring the explicit application of the template and manual configuration of dependencies. This is necessary when the default template doesn't provide the desired source set relationships.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    macosArm64()\n    iosArm64()\n    iosSimulatorArm64()\n\n    // Apply the default hierarchy explicitly. It'll create, for example, the iosMain source set:\n    applyDefaultHierarchyTemplate()\n\n    sourceSets {\n        // Create an additional jvmAndMacos source set\n        val jvmAndMacos by creating {\n            dependsOn(commonMain.get())\n        }\n\n        macosArm64Main.get().dependsOn(jvmAndMacos)\n        jvmMain.get().dependsOn(jvmAndMacos)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Multiplatform Project (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to add a dependency on the parent multiplatform project from a subproject using the Kotlin DSL in Gradle.  This is necessary when using Java plugins in a separate subproject due to compatibility issues with Kotlin Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(project(\":my-main-project\")) // The name of your parent multiplatform project\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DSL Marker to Base Tag Class in Kotlin\nDESCRIPTION: Application of the DSL marker annotation to the abstract base Tag class. This ensures all subclasses inherit the DSL scope control without requiring explicit annotation of each class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@HtmlTagMarker\nabstract class Tag(val name: String) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Script Compilation\nDESCRIPTION: Definition of the script compilation configuration object. It sets up default imports, classpath dependencies, and annotation processing for Maven dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ScriptWithMavenDepsConfiguration : ScriptCompilationConfiguration(\n    {\n        // Implicit imports for all scripts of this type\n        defaultImports(DependsOn::class, Repository::class)\n        jvm {\n            // Extract the whole classpath from context classloader and use it as dependencies\n            dependenciesFromCurrentContext(wholeClasspath = true) \n        }\n        // Callbacks\n        refineConfiguration {\n            // Process specified annotations with the provided handler\n            onAnnotations(DependsOn::class, Repository::class, handler = ::configureMavenDepsOnAnnotations)\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Kotlin IDEA Module for KSP (Plugin)\nDESCRIPTION: This Kotlin snippet configures the IDEA module to include the KSP generated code directories when KSP is used within a Gradle plugin. It addresses an issue where direct dependency declaration is needed to avoid execution optimization warnings. It requires the `idea` plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    idea\n}\n\nidea {\n    module {\n        // Not using += due to https://github.com/gradle/gradle/issues/8749\n        sourceDirs = sourceDirs + file(\"build/generated/ksp/main/kotlin\") // or tasks[\"kspKotlin\"].destination\n        testSourceDirs = testSourceDirs + file(\"build/generated/ksp/test/kotlin\")\n        generatedSourceDirs = generatedSourceDirs + file(\"build/generated/ksp/main/kotlin\") + file(\"build/generated/ksp/test/kotlin\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: While Loop Refactoring Exercise in Kotlin\nDESCRIPTION: This snippet demonstrates a refactored version of the pizza slices counting program using a `while` loop in Kotlin. It initializes `pizzaSlices` to 0 and increments it within the while loop until it reaches 7, printing a message for each slice. Finally, it prints a completion message.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var pizzaSlices = 0\n    while ( pizzaSlices < 7 ) {\n        pizzaSlices++\n        println(\"There's only $pizzaSlices slice/s of pizza :(\")\n    }\n    pizzaSlices++\n    println(\"There are $pizzaSlices slices of pizza. Hooray! We have a whole pizza! :D\")\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Non-External Member in @file:JsModule File (Kotlin)\nDESCRIPTION: Demonstrates an incorrect usage where a non-external function `bar` is declared in a Kotlin file annotated with `@file:JsModule`. Files marked with `@file:JsModule` are intended only for declaring external members mapping to the JavaScript module and cannot contain regular Kotlin function or property implementations, resulting in a compile-time error.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JsModule(\"extModule\")\n\npackage ext.jspackage.name\n\nexternal fun foo()\n\nfun bar() = \"!\" + foo() + \"!\" // error here\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinCompilationTask Compiler Options for Custom Targets (Groovy DSL)\nDESCRIPTION: This Groovy DSL sample demonstrates configuring compiler options for a specific Kotlin compilation task across custom targets by setting 'apiVersion' to 'KOTLIN_2_0'. It uses the 'tasks.named' method for task configuration and requires the Kotlin Gradle plugin and usage of the Groovy syntax. The example is suitable for non-JVM or non-Android Kotlin targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.named('compileKotlin', org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class) {\n    compilerOptions {\n        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interval Calculation with Default Parameters Kotlin\nDESCRIPTION: This code snippet enhances the time interval calculation function by introducing default parameter values. This allows for more flexible function calls where only specific parameters need to be provided. The `main` function showcases how named arguments can further improve code readability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun intervalInSeconds(hours: Int = 0, minutes: Int = 0, seconds: Int = 0) =\n    ((hours * 60) + minutes) * 60 + seconds\n\nfun main() {\n    println(intervalInSeconds(1, 20, 15))\n    println(intervalInSeconds(minutes = 1, seconds = 25))\n    println(intervalInSeconds(hours = 2))\n    println(intervalInSeconds(minutes = 10))\n    println(intervalInSeconds(hours = 1, seconds = 1))\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping List with Lambdas Kotlin\nDESCRIPTION: This snippet demonstrates transforming a list of integers using lambda expressions with the `map` function. It showcases doubling and tripling each element in the list, both with an inline lambda and a named lambda. The output displays the transformed lists.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val numbers = listOf(1, -2, 3, -4, 5, -6)\n    val doubled = numbers.map { x -> x * 2 }\n    \n    val isTripled = { x: Int -> x * 3 }\n    val tripled = numbers.map(isTripled)\n    \n    println(doubled)\n    // [2, -4, 6, -8, 10, -12]\n    println(tripled)\n    // [3, -6, 9, -12, 15, -18]\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Getting First/Last Element from a Java Deque\nDESCRIPTION: This Java snippet shows how to safely get the first and last elements from a `Deque` (e.g., `ArrayDeque`). Similar to the list example, it first checks `deque.size() > 0`. If the deque is not empty, it uses the specific methods `deque.getFirst()` and `deque.getLast()` to retrieve the elements, avoiding potential `NoSuchElementException`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Java\nvar deque = new ArrayDeque<>();\n//...\nif (deque.size() > 0) {\n    System.out.println(deque.getFirst());\n    System.out.println(deque.getLast());\n}\n```\n\n----------------------------------------\n\nTITLE: Do-While Loop Refactoring Exercise in Kotlin\nDESCRIPTION: This snippet demonstrates a refactored version of the pizza slices counting program using a `do-while` loop in Kotlin. The loop increments the `pizzaSlices` variable and prints a message. It continues until `pizzaSlices` is no longer less than 8, ensuring at least one execution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var pizzaSlices = 0\n    pizzaSlices++\n    do {\n        println(\"There's only $pizzaSlices slice/s of pizza :(\")\n        pizzaSlices++\n    } while ( pizzaSlices < 8 )\n    println(\"There are $pizzaSlices slices of pizza. Hooray! We have a whole pizza! :D\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Unit-Level Compiler Options via KotlinCompilation API\nDESCRIPTION: This snippet configures compiler options at the compilation unit level using the 'KotlinCompilation' API in a multiplatform Gradle build script. The snippet defines a 'main' compilation within a target, then sets up compiler options (left empty in this example) on the compile task provider. Useful for fine-grained control in multiplatform builds, requiring the Kotlin Multiplatform Gradle plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    target {\n        val main by compilations.getting {\n            compileTaskProvider.configure {\n                compilerOptions {\n\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline JavaScript with js() in Kotlin\nDESCRIPTION: Shows how to use the js() function to embed JavaScript directly within Kotlin code. This requires the string parameter to be a compile-time constant, and the return type is 'dynamic', meaning no compile-time type safety. Allows Kotlin code to execute raw JavaScript expressions/functions; used, for instance, to call typeof on a Kotlin value at runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun jsTypeOf(o: Any): String {\n    return js(\"typeof o\")\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Area as Single Expression Function in Kotlin\nDESCRIPTION: This Kotlin code defines a single-expression function `circleArea` that calculates the area of a circle given its radius. It uses the assignment operator (`=`) to define the function body in a single line, taking advantage of Kotlin's type inference. It utilizes the `PI` constant from the `kotlin.math` package and returns the area as a `Double`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.math.PI\n\nfun circleArea(radius: Int): Double = PI * radius * radius\n\nfun main() {\n    println(circleArea(2)) // 12.566370614359172\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C interoperability in Gradle for Kotlin/Native\nDESCRIPTION: Gradle configuration to include C interoperability in the build process for Kotlin/Native.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-app-with-c-and-libcurl.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnativeTarget.apply {\n    compilations.getByName(\"main\") {\n        cinterops {\n            val libcurl by creating\n        }\n    }\n    binaries {\n        executable {\n            entryPoint = \"main\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlinx Coroutines Dependency with EAP Version in Gradle (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to add a compatible version of kotlinx.coroutines library that works with the Kotlin EAP version in Gradle using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/configure-build-for-eap.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesEapVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Custom Field in package.json\nDESCRIPTION: This JSON snippet shows the result of adding a custom field to the package.json file using the Gradle DSL configuration. It demonstrates the structure of the added 'hello' field with its nested properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n\"hello\": {\n    \"one\": 1,\n    \"two\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Wrapper for Default Import with Kotlin/Wasm\nDESCRIPTION: This snippet demonstrates how to create a JavaScript wrapper module to enable default importing of Kotlin/Wasm code. It creates a new .mjs file that imports all exports from the main Wasm module and re-exports them as a default export.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Specifies the path to the main .mjs file\nimport * as moduleExports from \"./wasm-test.mjs\";\n\nexport { moduleExports as default };\n```\n\n----------------------------------------\n\nTITLE: Migrating to Provider API for Kotlin/Wasm and Kotlin/JS Properties\nDESCRIPTION: Demonstrates the change from direct property assignment to using the Provider API's .set() function for Kotlin/Wasm and Kotlin/JS extensions. This improves build performance by ensuring lazy computation and proper task dependency integration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nthe<NodeJsExtension>().version = \"2.0.0\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthe<NodeJsEnvSpec>().version.set(\"2.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SAM-with-receiver Plugin in Gradle (Kotlin DSL)\nDESCRIPTION: Configuration for the SAM-with-receiver plugin using Gradle with Kotlin DSL. This adds the plugin to the build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.sam.with.receiver\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Internal Implementation Functions in Kotlin/JS Stdlib\nDESCRIPTION: Details a source and binary incompatible change in the Kotlin/JS standard library from version 1.6.0. Implementation-specific functions `HashMap.createEntrySet` and `AbstactMutableCollection.toJSON` are having their visibility changed to internal, removing them from the public API. This affects code directly calling these internal functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Configuring No-arg Plugin with Maven\nDESCRIPTION: Shows how to configure the Kotlin no-arg compiler plugin in a Maven pom.xml file, including annotation specification and optional initialization settings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <artifactId>kotlin-maven-plugin</artifactId>\n    <groupId>org.jetbrains.kotlin</groupId>\n    <version>${kotlin.version}</version>\n\n    <configuration>\n        <compilerPlugins>\n            <!-- Or \"jpa\" for JPA support -->\n            <plugin>no-arg</plugin>\n        </compilerPlugins>\n\n        <pluginOptions>\n            <option>no-arg:annotation=com.my.Annotation</option>\n            <!-- Call instance initializers in the synthetic constructor -->\n            <!-- <option>no-arg:invokeInitializers=true</option> -->\n        </pluginOptions>\n    </configuration>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-noarg</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Smart Casts with Invoke Operator Overloading in Kotlin\nDESCRIPTION: This code illustrates the consistent smart cast behavior when overloading the `invoke` operator in Kotlin 2.0.0. The compiler correctly identifies that the `provider` is not null after a null check, allowing the overloaded `invoke` function to be called without explicit null safety checks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Provider {\n    operator fun invoke()\n}\n\ninterface Processor : () -> String\n\nclass Holder(val provider: Provider?, val processor: Processor?) {\n    fun process() {\n        if (provider != null) {\n            provider() \n            // In 1.9.20, the compiler triggers an error: \n            // Reference has a nullable type 'Provider?', use explicit '?.invoke()' to make a function-like call instead\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Kotlin Language Version via Gradle Groovy DSL in Groovy\nDESCRIPTION: This Groovy DSL snippet shows how to set the Kotlin language version for all Kotlin compilation tasks in a Gradle build. It utilizes the withType method on tasks to select all KotlinCompilationTask instances and sets their compilerOptions.languageVersion property to a specified version via org.jetbrains.kotlin.gradle.dsl.KotlinVersion. The input is a Gradle build script; output is that all Kotlin tasks are compiled using the specified language version. Prerequisite: the org.jetbrains.kotlin.gradle.dsl package must be available.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)\n    .configureEach {\n        compilerOptions.languageVersion =\n            org.jetbrains.kotlin.gradle.dsl.KotlinVersion.%gradleLanguageVersion%\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Function References in Unit-returning Functions\nDESCRIPTION: Example showing how Kotlin 1.4.0 allows using callable references to functions of any return type in Unit-returning functions, instead of requiring lambda expressions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(f: () -> Unit) { }\nfun returnsInt(): Int = 42\n\nfun main() {\n    foo { returnsInt() } // this was the only way to do it  before 1.4\n    foo(::returnsInt) // starting from 1.4, this also works\n}\n```\n\n----------------------------------------\n\nTITLE: Building Kotlin/JS Project for Node.js Debugging (Gradle)\nDESCRIPTION: Executes the standard Gradle 'build' task to compile the Kotlin/JS project. This is a prerequisite step for debugging Node.js targets, as it generates the necessary JavaScript output files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: Gradle\nCODE:\n```\nbuild\n```\n\n----------------------------------------\n\nTITLE: Type Mismatch in Function Arguments in Kotlin\nDESCRIPTION: Demonstrates how Kotlin strictly enforces type matching for function arguments, preventing implicit widening conversions for numbers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    fun printDouble(x: Double) { print(x) }\n\n    val x = 1.0\n    val xInt = 1    \n    val xFloat = 1.0f \n\n    printDouble(x)\n    \n    printDouble(xInt)   \n    // Argument type mismatch\n    \n    printDouble(xFloat)\n    // Argument type mismatch\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Step Progression in Kotlin\nDESCRIPTION: Shows how to create a progression with a custom step value. This example iterates from 1 to 8 with a step of 2, producing odd numbers in that range.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (i in 1..8 step 2) print(i)\n    // 1357\n}\n```\n\n----------------------------------------\n\nTITLE: Update MessageController Kotlin\nDESCRIPTION: This code updates the MessageController class to use the MessageService for retrieving and saving messages. It handles GET and POST requests for messages, utilizing Spring annotations for request mapping and request body handling. It depends on the MessageService class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-db-support.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// MessageController.kt\npackage demo\n\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\nimport java.net.URI\n\n@RestController\n@RequestMapping(\"/\")\nclass MessageController(private val service: MessageService) {\n    @GetMapping\n    fun listMessages() = service.findMessages()\n\n    @PostMapping\n    fun post(@RequestBody message: Message): ResponseEntity<Message> {\n        val savedMessage = service.save(message)\n        return ResponseEntity.created(URI(\"/${savedMessage.id}\")).body(savedMessage)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Source Directories in Gradle\nDESCRIPTION: Example showing how to configure source directories for Kotlin and Java in a Gradle build script using the new SourceDirectorySet extension.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceSets {\n    main {\n        kotlin {\n            java.setSrcDirs(listOf(\"src/java\"))\n            kotlin.setSrcDirs(listOf(\"src/kotlin\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Interop in Kotlin DSL Build Script\nDESCRIPTION: Configuration for Kotlin Multiplatform build script using Kotlin DSL to set up cinterop with a native iOS library. It includes setting the definition file path, include directories, and linker options.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64() {\n        compilations.getByName(\"main\") {\n            val DateTools by cinterops.creating {\n                // Path to the .def file\n                definitionFile.set(project.file(\"src/nativeInterop/cinterop/DateTools.def\"))\n\n                // Directories for header search (an analogue of the -I<path> compiler option)\n                includeDirs(\"include/this/directory\", \"path/to/another/directory\")\n            }\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n\n        binaries.all {\n            // Linker options required to link to the library.\n            linkerOpts(\"-L/path/to/library/binaries\", \"-lbinaryname\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Kotlin Interface Default Method in Java Implementation\nDESCRIPTION: Shows a Java class `BB8` implementing the Kotlin `Robot` interface. Unlike `C3PO`, `BB8` provides its own implementation for the `move()` method using the `@Override` annotation, thus overriding the default implementation that would otherwise be inherited from the `Robot` interface (when compiled with default method support).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n//Java\npublic class BB8 implements Robot {\n    //own implementation of the default method\n    @Override\n    public void move() {\n        System.out.println(\"~rolling~\");\n    }\n\n    @Override\n    public void speak() {\n        System.out.println(\"Beep-beep\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying KSP to Workload (Kotlin)\nDESCRIPTION: A full example of applying the KSP plugin to a workload module using Kotlin DSL. This includes the KSP plugin, Kotlin JVM plugin, Maven Central repository, and dependencies on the Kotlin standard library and the custom test-processor project. The `%kspSupportedKotlinVersion%-%kspVersion%` placeholder should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    id(\"com.google.devtools.ksp\") version \"%kspSupportedKotlinVersion%-%kspVersion%\"\n    kotlin(\"jvm\") \n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib-jdk8\"))\n    implementation(project(\":test-processor\"))\n    ksp(project(\":test-processor\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin OSGi Bundle in Gradle (Groovy DSL)\nDESCRIPTION: This Groovy DSL snippet adds the kotlin-osgi-bundle as a dependency in a Gradle build.gradle file. It assumes that the Kotlin Gradle Plugin is already applied and that the variable %kotlinVersion% is set. The implementation configuration is used to declare the specific OSGi bundle, ensuring no standard Kotlin libraries are included unintentionally.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-osgi.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\\n    implementation \\\"org.jetbrains.kotlin:kotlin-osgi-bundle:%kotlinVersion%\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Example Failing Compilation with Naive Java addAll Signature\nDESCRIPTION: Provides a code example (`copyAll` method) that would fail to compile if Java used the naive `addAll` signature (without wildcards). This highlights the problem solved by bounded wildcards, as `Collection<String>` isn't a subtype of `Collection<Object>`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Java\n\n// The following would not compile with the naive declaration of addAll:\n// Collection<String> is not a subtype of Collection<Object>\nvoid copyAll(Collection<Object> to, Collection<String> from) {\n    to.addAll(from);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Destructuring Declarations with Kotlin Data Classes\nDESCRIPTION: Illustrates how data classes integrate with Kotlin's destructuring declarations feature. Because the compiler generates `componentN()` functions for each primary constructor property (e.g., `component1()` for `name`, `component2()` for `age`), an instance of the data class (`jane`) can be easily unpacked into individual variables (`name`, `age`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval jane = User(\"Jane\", 35)\nval (name, age) = jane\nprintln(\"$name, $age years of age\") \n// Jane, 35 years of age\n```\n\n----------------------------------------\n\nTITLE: Illustrating Static Dispatch of Kotlin Extension Functions\nDESCRIPTION: Demonstrates that Kotlin extension functions are resolved statically at compile time based on the declared type of the receiver variable, not its runtime type. Calling `getName()` on a `Shape` variable holding a `Rectangle` instance invokes the `Shape` extension, printing 'Shape'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    open class Shape\n    class Rectangle: Shape()\n    \n    fun Shape.getName() = \"Shape\"\n    fun Rectangle.getName() = \"Rectangle\"\n    \n    fun printClassName(s: Shape) {\n        println(s.getName())\n    }\n    \n    printClassName(Rectangle())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin String to C Conversion\nDESCRIPTION: Example showing how to pass a Kotlin string to a C function using cstr property\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-strings-from-c.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.cstr\n\n@OptIn(ExperimentalForeignApi::class)\nfun passStringToC() {\n    val str = \"This is a Kotlin string\"\n    pass_string(str.cstr)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Allocator in Kotlin/Native\nDESCRIPTION: This Kotlin code snippet demonstrates how to enable the custom memory allocator for Kotlin/Native projects using the `-Xallocator=custom` compiler option within a Gradle build configuration. This custom allocator aims to improve runtime performance of the Kotlin/Native memory manager. The configuration applies specifically to the `macosX64` target, setting it up for executable binaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    macosX64(\"native\") {\n        binaries.executable()\n\n        compilations.configureEach {\n            compilerOptions.configure {\n                freeCompilerArgs.add(\"-Xallocator=custom\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin Native Code with Command-line Compiler\nDESCRIPTION: A command using the Kotlin Native compiler to compile a Kotlin source file into a native executable. The -o option specifies the output file name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc-native hello.kt -o hello\n```\n\n----------------------------------------\n\nTITLE: Enabling Incremental Compilation for Kotlin/JS IR Compiler\nDESCRIPTION: Gradle configuration to enable incremental compilation for development binaries in Kotlin/JS projects using the IR compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_14\n\nLANGUAGE: Gradle\nCODE:\n```\n# gradle.properties\nkotlin.incremental.js.ir=true // false by default\n```\n\n----------------------------------------\n\nTITLE: Initializing Byte Arrays with Unsigned Values\nDESCRIPTION: Shows how to use unsigned numbers to initialize byte arrays without explicit toByte() casts, which is useful for representing raw byte sequences.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/unsigned-integer-types.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval byteOrderMarkUtf8 = ubyteArrayOf(0xEFu, 0xBBu, 0xBFu)\n```\n\n----------------------------------------\n\nTITLE: Specifying Kotlin Plugin Version (Kotlin)\nDESCRIPTION: Snippet for specifying the Kotlin plugin version in the root project's `build.gradle.kts` using Kotlin DSL. The `apply false` prevents the plugin from being applied in the root project but makes it available for subprojects. The `%kspSupportedKotlinVersion%` placeholder should be replaced with the actual supported Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kspSupportedKotlinVersion%\" apply false\n}\n\nbuildscript {\n    dependencies {\n        classpath(kotlin(\"gradle-plugin\", version = \"%kspSupportedKotlinVersion%\"))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy JVM Toolchain Configuration in Gradle\nDESCRIPTION: Previous method for configuring JVM toolchain settings in Kotlin Gradle projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        languageVersion.set(JavaLanguageVersion.of(17))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining E2E Tests Using Yarn\nDESCRIPTION: This snippet includes commands to ease the process of adding and maintaining e2e tests using yarn. It provides commands to generate new tests for user interactions and update screenshots when the page changes intentionally.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n  - `yarn test:e2e:new` to generate the test for the user interactions.\n  - `yarn test:e2e:update`  to update screenshots when something on page has changed intentionally.\n```\n\n----------------------------------------\n\nTITLE: Using Java SAM Interfaces in Kotlin\nDESCRIPTION: Shows how Kotlin 1.4 allows direct use of Java SAM interfaces in Kotlin code, enabling SAM conversions without requiring Java declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.lang.Runnable\n\nfun foo(r: Runnable) {}\n\nfun test() { \n    foo { } // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Wasm Example in Kotlin Playground\nDESCRIPTION: This code snippet demonstrates a simple Kotlin/Wasm program that calculates the Ackermann function and measures its execution time. It imports the necessary libraries for time measurement and defines the `main` function to print a greeting and compute the Ackermann function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\\nimport kotlin.time.measureTime\\n\nfun main() {\n    println(\"Hello from Kotlin/Wasm!\")\n    computeAck(3, 10)\n}\n\ntailrec fun ack(m: Int, n: Int): Int = when {\n    m == 0 -> n + 1\n    n == 0 -> ack(m - 1, 1)\n    else -> ack(m - 1, ack(m, n - 1))\n}\n\nfun computeAck(m: Int, n: Int) {\n    var res = 0\n    val t = measureTime {\n        res = ack(m, n)\n    }\n    println()\n    println(\"ack($m, $n) = ${res}\")\n    println(\"duration: ${t.inWholeNanoseconds / 1e6} ms\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Abstract Class and Expected Class\nDESCRIPTION: This Kotlin code shows an abstract class `FileSystem` and an expected class `PlatformFileSystem` that inherits from it.  Prior to Kotlin 2.0.0, the override for `listFiles()` in the expected class was not required, but now it is to ensure correct behavior with the K2 compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nabstract class FileSystem {\n    abstract fun listFiles()\n}\nexpect open class PlatformFileSystem() : FileSystem {\n    // In Kotlin 2.0.0, an explicit override is needed\n    expect override fun listFiles()\n    // Before Kotlin 2.0.0, an override wasn't needed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin EAP Version in Gradle (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to configure a Kotlin Multiplatform project in Gradle using Groovy DSL to use an EAP version of Kotlin. It shows setting the Kotlin plugin version in the plugins block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/configure-build-for-eap.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'java'\n    id 'org.jetbrains.kotlin.multiplatform' version 'KOTLIN-EAP-VERSION'\n}\n\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Maven Central Repository\nDESCRIPTION: This code shows how to declare the Maven Central repository in a Gradle build script, making its dependencies available to the project. This configuration can be added to a build.gradle file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to a Kotlin/Native Library\nDESCRIPTION: Demonstrates how to link a Kotlin/Native program with a previously compiled .klib library using the -l flag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kotlinc-native qux.kt -l bar\n```\n\n----------------------------------------\n\nTITLE: Applying Application Plugin in Gradle (Groovy)\nDESCRIPTION: This code snippet shows how to apply the Application plugin in a subproject's `build.gradle.kts` file using the Groovy DSL for Gradle. This is part of the workaround for compatibility issues between Kotlin Multiplatform and Gradle Java plugins.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id('application')\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Java Annotation Properties in Kotlin\nDESCRIPTION: Shows a Java annotation `Ann` with an `int value()` method. In Kotlin, the value of an annotation instance (`ann`) can be accessed directly as a property (`ann.value`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic @interface Ann {\n    int value();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nfun foo(ann: Ann) {\n    val i = ann.value\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring JVM Record Classes in Kotlin with @JvmRecord Annotation\nDESCRIPTION: Shows how to declare a JVM record class in Kotlin using the @JvmRecord annotation on a data class. This experimental feature requires compiler options -Xjvm-enable-preview and -language-version 1.5.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmRecord\ndata class User(val name: String, val age: Int)\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from a Java ArrayList by Index and Value\nDESCRIPTION: This Java snippet illustrates removing elements from an `ArrayList`. `numbers.remove(1)` removes the element at index 1. To remove an element by its integer value (e.g., the first occurrence of the number 1), `Integer.valueOf(1)` must be passed to `remove()` to distinguish it from the index-based removal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic void remove() {\n    var numbers = new ArrayList<>();\n    numbers.add(1);\n    numbers.add(2);\n    numbers.add(3);\n    numbers.add(1);\n    numbers.remove(1); // This removes by index\n    System.out.println(numbers); // [1, 3, 1]\n    numbers.remove(Integer.valueOf(1));\n    System.out.println(numbers); // [3, 1]\n}\n```\n\n----------------------------------------\n\nTITLE: Check Deadline with TimeMark Kotlin\nDESCRIPTION: This code snippet illustrates how to use the `hasPassedNow()` extension function to check if a deadline has passed. It sets a deadline using `Duration` and `TimeMark`, then checks if the deadline has passed after waiting for a specified amount of time. Requires `kotlin.time` dependency.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\nimport kotlin.time.Duration.Companion.seconds\n\nfun main() {\n//sampleStart\n   val timeSource = TimeSource.Monotonic\n   val mark1 = timeSource.markNow()\n   val fiveSeconds: Duration = 5.seconds\n   val mark2 = mark1 + fiveSeconds\n\n   // It hasn't been 5 seconds yet\n   println(mark2.hasPassedNow())\n   // false\n  \n   // Wait six seconds\n   Thread.sleep(6000)\n   println(mark2.hasPassedNow())\n   // true\n\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Backward-Compatible Property Renaming via Property Delegation - Kotlin\nDESCRIPTION: Illustrates using property delegation to maintain backward compatibility when renaming a property. The old property is marked as deprecated and delegated to the new property, enabling continued use and IDE warnings. The pattern uses annotation and the by this::newName delegation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyClass {\n   var newName: Int = 0\n   @Deprecated(\"Use 'newName' instead\", ReplaceWith(\"newName\"))\n   var oldName: Int by this::newName\n}\nfun main() {\n   val myClass = MyClass()\n   // Notification: 'oldName: Int' is deprecated.\n   // Use 'newName' instead\n   myClass.oldName = 42\n   println(myClass.newName) // 42\n}\n```\n\n----------------------------------------\n\nTITLE: Using Where Clause for Multiple Constraints in Kotlin\nDESCRIPTION: Shows how to apply multiple constraints to a type parameter using the where clause. Enables defining functions that require types to implement multiple interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> copyWhenGreater(list: List<T>, threshold: T): List<String>\n    where T : CharSequence,\n          T : Comparable<T> {\n    return list.filter { it > threshold }.map { it.toString() }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Top-Level Dependencies in Groovy DSL\nDESCRIPTION: This snippet demonstrates how to declare source set dependencies in the top-level `dependencies {}` block of a Gradle build script using the Groovy DSL. The dependency declarations follow the pattern `<sourceSetName><DependencyKind>`, such as `commonMainApi`. This provides a more concise declaration of dependencies applicable to specific source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_35\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    commonMainApi 'com.example:foo-common:1.0'\n    jvm6MainApi 'com.example:foo-jvm6:1.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Using filterIndexed() and filterNot() in Kotlin\nDESCRIPTION: This snippet demonstrates how to use filterIndexed() to filter elements by index and how to use filterNot() to filter elements that do not meet a specific condition.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-filtering.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    \n    val filteredIdx = numbers.filterIndexed { index, s -> (index != 0) && (s.length < 5)  }\n    val filteredNot = numbers.filterNot { it.length <= 3 }\n\n    println(filteredIdx)\n    println(filteredNot)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: String Initialization Kotlin\nDESCRIPTION: This snippet demonstrates the basic initialization of a string in Kotlin using double quotes.  It shows how to assign a sequence of characters to a variable of type String. This example is the most basic way to define string literals.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval str = \"abcd 123\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Async/Await with Coroutines in Kotlin\nDESCRIPTION: Demonstrates how to use coroutines to implement async/await patterns for asynchronous operations. The example shows loading images asynchronously and applying an overlay in a background thread pool, then displaying the result in a UI context.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// runs the code in the background thread pool\nfun asyncOverlay() = async(CommonPool) {\n    // start two async operations\n    val original = asyncLoadImage(\"original\")\n    val overlay = asyncLoadImage(\"overlay\")\n    // and then apply overlay to both results\n    applyOverlay(original.await(), overlay.await())\n}\n\n// launches new coroutine in UI context\nlaunch(UI) {\n    // wait for async overlay to complete\n    val image = asyncOverlay().await()\n    // and then show it in UI\n    showImage(image)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Switch Statement with Kotlin Enum\nDESCRIPTION: This Swift code demonstrates how to use a Kotlin enum in a Swift switch statement. A default case is included to prevent compilation errors since Swift requires switch statements over enums to be exhaustive.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nswitch color {\n    case .red: print(\"It's red\")\n    case .green: print(\"It's green\")\n    case .blue: print(\"It's blue\")\n    default: fatalError(\"No such color\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Required Reason API Finder Script\nDESCRIPTION: Shell command to run a Python script that helps identify which dependencies use required reason APIs in your Kotlin framework.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-privacy-manifest.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/usr/bin/python3 -c \"$(curl -fsSL https://github.com/JetBrains/kotlin/raw/rrf_v0.0.1/libraries/tools/required-reason-finder/required_reason_finder.py)\"\n```\n\n----------------------------------------\n\nTITLE: Tag Element Builder Functions in Kotlin DSL\nDESCRIPTION: Implementation of HTML tag element builder functions like 'head' and 'body'. These functions create their respective tag elements, initialize them with provided lambda, and add them to parent's children.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun head(init: Head.() -> Unit): Head {\n    val head = Head()\n    head.init()\n    children.add(head)\n    return head\n}\n\nfun body(init: Body.() -> Unit): Body {\n    val body = Body()\n    body.init()\n    children.add(body)\n    return body\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions (Kotlin)\nDESCRIPTION: This Kotlin snippet configures the generation of TypeScript declaration files (`.d.ts`) in the `build.gradle.kts` file within the `js` section.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    js {\n        binaries.executable()\n        browser {\n        }\n        generateTypeScriptDefinitions()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Main Function with Result Reporting\nDESCRIPTION: Extended main function implementation that includes detailed script execution result reporting and error handling.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(vararg args: String) {\n    if (args.size != 1) {\n        println(\"usage: <app> <script file>\")\n    } else {\n        val scriptFile = File(args[0])\n        println(\"Executing script $scriptFile\")\n        val res = evalFile(scriptFile)\n        res.reports.forEach {\n            if (it.severity > ScriptDiagnostic.Severity.DEBUG) {\n                println(\" : ${it.message}\" + if (it.exception == null) \"\" else \": ${it.exception}\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Member Functions in Inheritable Kotlin Classes\nDESCRIPTION: Demonstrates the use of the open and override modifiers to enable and implement method overriding in Kotlin classes. The class Shape has an overridable draw method and a non-overridable fill method, and Circle properly overrides draw with the override keyword. This example is foundational for polymorphic behavior in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Shape {\n    open fun draw() { /*...*/ }\n    fun fill() { /*...*/ }\n}\n\nclass Circle() : Shape() {\n    override fun draw() { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Test Dependency in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet demonstrates how to add the `kotlin-test` dependency to the `commonTest` source set within a Kotlin Multiplatform project using the Gradle Kotlin DSL (`build.gradle.kts`). This dependency provides the necessary annotations and testing functionalities, making them available for JavaScript targets as well.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-running-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\n\nkotlin {\n    sourceSets {\n         commonTest.dependencies {\n            implementation(kotlin(\"test\")) // This makes test annotations and functionality available in JS\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin compiler options for language version\nDESCRIPTION: This code snippet demonstrates how to set the language and API versions for the Kotlin compiler in a Gradle project. It's used to specify which Kotlin version should be used for compiling source code, especially when using the K2 compiler and needing to ensure compatibility with older Gradle versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)\n        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using fill, replaceAll, and shuffle functions for MutableList in Kotlin\nDESCRIPTION: This code demonstrates the usage of new extension functions for manipulating lists in Kotlin: fill, replaceAll, and shuffle for MutableList, and shuffled for read-only List. It shows how to shuffle a list, double its items, and fill it with a specific value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n//sampleStart\n    val items = (1..5).toMutableList()\n    \n    items.shuffle()\n    println(\"Shuffled items: $items\")\n    \n    items.replaceAll { it * 2 }\n    println(\"Items doubled: $items\")\n    \n    items.fill(5)\n    println(\"Items filled with 5: $items\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Customer Class in Java\nDESCRIPTION: This Java code snippet defines a simple class named Customer, which includes a constructor, a getter and setter for the name field, and a method to simulate placing an order. It demonstrates Java-Kotlin interoperability which allows Java classes to be seamlessly utilized in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/mixing-java-kotlin-intellij.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class Customer {\n\n    private String name;\n\n    public Customer(String s){\n        name = s;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void placeOrder() {\n        System.out.println(\"A new order is placed by \" + name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: When Expression Kotlin\nDESCRIPTION: This code demonstrates the 'when' expression in Kotlin. It checks the value of a string variable ('obj') and assigns a corresponding string to the 'result' variable. The 'result' is then printed to the console. The minimum compiler version required is 1.3.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart    \n    val obj = \"Hello\"    \n    \n    val result = when (obj) {\n        // If obj equals \"1\", sets result to \"one\"\n        \"1\" -> \"One\"\n        // If obj equals \"Hello\", sets result to \"Greeting\"\n        \"Hello\" -> \"Greeting\"\n        // Sets result to \"Unknown\" if no previous condition is satisfied\n        else -> \"Unknown\"\n    }\n    println(result)\n    // Greeting\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Default Mode in Gradle Kotlin DSL\nDESCRIPTION: Shows how to set the jvmDefault compiler option in a Gradle build script using Kotlin DSL, controlling the generation of default methods in interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew-eap.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        jvmDefault = JvmDefaultMode.NO_COMPATIBILITY\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Kotlin Source Sets for KSP\nDESCRIPTION: This Kotlin snippet configures the main and test source sets in a Kotlin project to include the generated KSP code. This makes the generated code visible to the IDE for code completion and error checking. It requires the `kotlin` block in the `build.gradle.kts` file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets.main {\n        kotlin.srcDir(\"build/generated/ksp/main/kotlin\")\n    }\n    sourceSets.test {\n        kotlin.srcDir(\"build/generated/ksp/test/kotlin\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Labeled break and continue in when Expressions (Pre-1.4)\nDESCRIPTION: Example showing how break and continue had to be labeled when used inside when expressions in loops before Kotlin 1.4.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun test(xs: List<Int>) {\n    LOOP@for (x in xs) {\n        when (x) {\n            2 -> continue@LOOP\n            17 -> break@LOOP\n            else -> println(x)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Input Element\nDESCRIPTION: This HTML snippet includes a text input element and a JavaScript script source. It provides structure for the Kotlin/JS code to interact with the DOM. The script source is expected to be loaded after the DOM is ready. It represents the structure of the HTML page used in Kotlin examples.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/browser-api-dom.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <input type=\"text\" name=\"email\" id=\"email\"/>\n\n    <script type=\"text/javascript\" src=\"tutorial.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: External Class Declaration (Kotlin)\nDESCRIPTION: Declares an external Kotlin class 'Rectangle' that represents the JavaScript class with the same name. All declarations inside the external class are implicitly external. It includes the constructor, properties, and methods defined in the JavaScript class.  JsAny is used as the supertype.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal class Rectangle(height: Double, width: Double) : JsAny {\n    val height: Double\n    val width: Double\n    fun area(): Double\n}\n```\n\n----------------------------------------\n\nTITLE: KSP Upgrade Error Message\nDESCRIPTION: This snippet shows the error message that occurs when the KSP version is too old for the Kotlin compiler version.  Users need to bump the KSP version when bumping the Kotlin compiler version in their project. Failure to do so results in this specific error message.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-faq.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nksp-a.b.c is too old for kotlin-x.y.z. Please upgrade ksp or downgrade kotlin-gradle-plugin\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Integers using Destructuring Declaration in Kotlin\nDESCRIPTION: Illustrates parsing a line containing two space-separated integers (`n` and `k`) using Kotlin's destructuring declaration feature. It assumes the `readInts` helper function (which returns a list of integers) is defined and available. This provides a concise way to assign multiple variables from a single input line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval (n, k) = readInts()\n```\n\n----------------------------------------\n\nTITLE: Using Old JVM Backend with Gradle Groovy DSL\nDESCRIPTION: Code snippet showing how to configure a Kotlin project in Gradle (Groovy DSL) to use the old JVM backend instead of the new IR-based backend introduced in Kotlin 1.5.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-15.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile) {\n  kotlinOptions.useOldBackend = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations in Kotlin\nDESCRIPTION: Shows examples of basic arithmetic operations (addition, subtraction, multiplication, division) on different number types in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    println(1 + 2)\n    println(2_500_000_000L - 1L)\n    println(3.14 * 2.71)\n    println(10.0 / 3)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Time Mark Progression in Kotlin\nDESCRIPTION: This example demonstrates how to check if a time mark has passed using `hasPassedNow()` and `hasNotPassedNow()`. It sets a time mark and a duration, then checks if the deadline has passed after waiting for a specific amount of time.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\nimport kotlin.time.Duration.Companion.seconds\n\nfun main() {\n    val timeSource = TimeSource.Monotonic\n    val mark1 = timeSource.markNow()\n    val fiveSeconds: Duration = 5.seconds\n    val mark2 = mark1 + fiveSeconds\n\n    // It hasn't been 5 seconds yet\n    println(mark2.hasPassedNow())\n    // false\n\n    // Wait six seconds\n    Thread.sleep(6000)\n    println(mark2.hasPassedNow())\n    // true\n}\n```\n\n----------------------------------------\n\nTITLE: Chunk IDs and Load Video Statistics\nDESCRIPTION: Chunks the IDs from the `clean` DataFrame into batches of 50 and loads corresponding video statistics from the YouTube API. The `map` function iterates through the chunked IDs, joining them into a comma-separated string for the API request, and then calls the `load` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval statPages = clean.id.chunked(50).map {\n    val ids = it.joinToString(\"%2C\")\n    load(\"videos?part=statistics&id=$ids\")\n}\nstatPages\n```\n\n----------------------------------------\n\nTITLE: Safely Getting First/Last Element from a Java List\nDESCRIPTION: This Java snippet demonstrates how to safely retrieve the first and last elements from a `List`. It first checks if the list is not empty using `list.size() > 0`. If it's not empty, it accesses the first element using `list.get(0)` and the last element using `list.get(list.size() - 1)`, preventing potential `IndexOutOfBoundsException`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Java\nvar list = new ArrayList<>();\n//...\nif (list.size() > 0) {\n    System.out.println(list.get(0));\n    System.out.println(list.get(list.size() - 1));\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering List with For Loop and If Statement in Kotlin\nDESCRIPTION: This snippet demonstrates how to filter a list of strings and print only those that start with the letter 'l' using a `for` loop and an `if` statement in Kotlin. The `startsWith()` function is used to check if a string starts with the specified prefix.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val words = listOf(\"dinosaur\", \"limousine\", \"magazine\", \"language\")\n    for (w in words) {\n        if (w.startsWith(\"l\"))\n            println(w)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: When Expression (Boolean Subject) Kotlin\nDESCRIPTION: This Kotlin code uses a 'when' expression with `trafficLightState` as the subject.  It assigns a corresponding traffic action based on the state (Green, Yellow, Red) and prints the resulting action to the console. Requires Kotlin 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val trafficLightState = \"Red\" // This can be \"Green\", \"Yellow\", or \"Red\"\n\n    val trafficAction = when (trafficLightState) {\n        \"Green\" -> \"Go\"\n        \"Yellow\" -> \"Slow down\"\n        \"Red\" -> \"Stop\"\n        else -> \"Malfunction\"\n    }\n\n    println(trafficAction)  \n    // Stop\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Package Manifest\nDESCRIPTION: This Swift code defines the Package.swift file that describes the Swift package for the XCFramework. It specifies the package name, supported platforms, and the binary target with the URL and checksum of the XCFramework ZIP file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.3\nimport PackageDescription\n \nlet package = Package(\n   name: \"Shared\",\n   platforms: [\n     .iOS(.v14),\n   ],\n   products: [\n      .library(name: \"Shared\", targets: [\"Shared\"])\n   ],\n   targets: [\n      .binaryTarget(\n         name: \"Shared\",\n         url: \"<link to the uploaded XCFramework ZIP file>\",\n         checksum:\"<checksum calculated for the ZIP file>\")\n   ]\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing Non-local Returns with 'crossinline' in Kotlin\nDESCRIPTION: Presents an inline function utilizing the 'crossinline' modifier on a lambda parameter to prevent it from using non-local returns. The lambda is called from within a different execution context (object), enforcing limitations on non-local control flow. Useful to prevent non-local exits from callbacks or objects capturing the lambda.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun f(crossinline body: () -> Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Gradle Plugin for Kotlin/Native Frameworks\nDESCRIPTION: Shows the improved Kotlin DSL for the CocoaPods Gradle plugin, allowing specification of framework parameters like dynamic/static version, dependency export, and Bitcode embedding.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ncocoapods {\n    frameworkName = \"MyFramework\" // This property is deprecated \n    // and will be removed in future versions\n    // New DSL for framework configuration:\n    framework {\n        // All Framework properties are supported\n        // Framework name configuration. Use this property instead of \n        // deprecated 'frameworkName'\n        baseName = \"MyFramework\"\n        // Dynamic framework support\n        isStatic = false\n        // Dependency export\n        export(project(\":anotherKMMModule\"))\n        transitiveExport = false // This is default.\n        // Bitcode embedding\n        embedBitcode(BITCODE)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin test function using functions with IntNode\nDESCRIPTION: This Kotlin code demonstrates how calling functions that use the `IntNode` class (an inaccessible non-generic type) trigger warnings in Kotlin 2.0.0 when the module dependencies are misconfigured.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module three\nfun test() {\n    // Triggers warnings in Kotlin 2.0.0, as class IntNode is \n    // inaccessible.\n\n    execute {}\n    // Class 'IntNode' of the parameter 'it' is inaccessible.\n\n    execute { _ -> }\n    execute(fun (_) {})\n    // Class 'IntNode' of the parameter '_' is inaccessible.\n\n    // Will trigger a warning in future Kotlin releases, as IntNode is\n    // inaccessible.\n    consume(produce())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Distribution Directory in Groovy Gradle Build Script\nDESCRIPTION: This snippet shows how to set a custom output directory for the distribution files of a Kotlin/JS project in a Groovy Gradle build script. It configures the browser target to use a specific directory for output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_39\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            distribution {\n                outputDirectory = file(\"$projectDir/output\")\n            }\n        }\n        binaries.executable()\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Expected and Actual Declarations for Multiplatform Projects in Kotlin\nDESCRIPTION: This snippet demonstrates the expected/actual declaration pattern used in Kotlin multiplatform projects. It shows how to define an API in common code with 'expect' keyword and implement it with 'actual' keyword in platform-specific code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// expected platform-specific API:\nexpect fun hello(world: String): String\n\nfun greet() {\n    // usage of the expected API:\n    val greeting = hello(\"multiplatform world\")\n    println(greeting)\n}\n\nexpect class URL(spec: String) {\n    open fun getHost(): String\n    open fun getPath(): String\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual fun hello(world: String): String =\n    \"Hello, $world, on the JVM platform!\"\n\n// using existing platform-specific implementation:\nactual typealias URL = java.net.URL\n```\n\n----------------------------------------\n\nTITLE: Nested Class Opt-in Example\nDESCRIPTION: Demonstrates how opt-in requirements behave with nested classes. Shows that opt-in requirements are not propagated to inner or nested classes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Library code\n@RequiresOptIn\nannotation class ExperimentalFeature\n\n@SubclassOptInRequired(ExperimentalFeature::class)\nopen class FileSystem {\n    open class File\n}\n\n// Client code\n\n// Opt-in is required\nclass NetworkFileSystem : FileSystem()\n\n// Nested class\n// No opt-in required\nclass TextFile : FileSystem.File()\n```\n\n----------------------------------------\n\nTITLE: Adding KSP API Dependency (Kotlin)\nDESCRIPTION: Adding the KSP API dependency to a module's `build.gradle.kts` file. This allows the module to use KSP's symbol processing APIs. The `%kspSupportedKotlinVersion%-%kspVersion%` placeholder should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\")\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"com.google.devtools.ksp:symbol-processing-api:%kspSupportedKotlinVersion%-%kspVersion%\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Gradle Pre-Build Script for Xcode\nDESCRIPTION: Bash script to be added as a pre-action in Xcode build settings that executes the Gradle task for embedding and signing the Apple framework\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-spm-local-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"<Path to the root of the multiplatform project>\"\n./gradlew :<Shared module name>:embedAndSignAppleFrameworkForXcode\n```\n\n----------------------------------------\n\nTITLE: Kotlin to JavaScript Browser Manipulation\nDESCRIPTION: Demonstrates Kotlin code compiled to JavaScript for browser DOM manipulation. Shows integration with browser APIs and interval-based updates.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/interoperable.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport kotlinx.browser.window\n\nfun main() {\n   val body = window.document.body\n\n   body?.innerHTML += \"<b>Hello, <i>Kotlin</i></b>\"\n\n   window.setInterval({\n      body?.innerHTML += \"!\"\n   }, 1000)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin OSGi Bundle Dependency in Maven (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the kotlin-osgi-bundle as a dependency in a Maven project. It requires Maven as the build tool and access to the Maven Central repository. Replace ${kotlin.version} with the desired Kotlin version. The groupId and artifactId specify the correct dependency for OSGi support. Input is a Maven pom.xml file, and the output is inclusion of the OSGi bundle dependency.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-osgi.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\\n    <dependency>\\n        <groupId>org.jetbrains.kotlin</groupId>\\n        <artifactId>kotlin-osgi-bundle</artifactId>\\n        <version>${kotlin.version}</version>\\n    </dependency>\\n</dependencies>\\n\n```\n\n----------------------------------------\n\nTITLE: Run a Kotlin binary with the kotlin script\nDESCRIPTION: This command executes a Kotlin binary using the `kotlin` script, specifying the classpath and main class. `HelloKt` is the class generated for `hello.kt`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkotlin -classpath hello.jar HelloKt\n```\n\n----------------------------------------\n\nTITLE: Solution: Implementing Number-to-Word Map in Kotlin\nDESCRIPTION: This solution demonstrates how to create a map relating numbers 1-3 to their spelled-out form using mapOf(). It then uses this map to spell out the number 2.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val number2word = mapOf(1 to \"one\", 2 to \"two\", 3 to \"three\")\n    val n = 2\n    println(\"$n is spelt as '${number2word[n]}'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Expected and Actual Declarations in Kotlin Multiplatform\nDESCRIPTION: This code demonstrates how Kotlin Multiplatform can handle cases where there are expected and actual declarations. Prior to Kotlin 2.0.0, it was possible for the IDE to raise an error while the code still compiles successfully on the JVM platform. However now the compiler reports the same error as the IDE.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect class Identity {\n    fun confirmIdentity(): String\n}\n\nfun common() {\n    // Before 2.0.0, it triggers an IDE-only error\n    Identity().confirmIdentity()\n    // RESOLUTION_TO_CLASSIFIER : Expected class Identity has no default constructor.\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental @Volatile Support in Kotlin/Native with Gradle (Groovy)\nDESCRIPTION: Groovy DSL configuration for enabling the experimental @Volatile annotation support in Kotlin/Native by setting the language version to 1.9 in a Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_31\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)\n    .configureEach {\n        compilerOptions.languageVersion =\n            org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n    }\n```\n\n----------------------------------------\n\nTITLE: Reading Input in Kotlin/Native Application\nDESCRIPTION: Initial implementation of the main function that reads user input using the readln() function. This code prompts the user to enter their name and captures the input.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Read the input value.\n    println(\"Hello, enter your name:\")\n    val name = readln()\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message Example in Kotlin/Native\nDESCRIPTION: Example showing improved error message format in Kotlin/Native 1.5.30 vs 1.6.0 for klib linkage failures.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ne: java.lang.IllegalStateException: IrTypeAliasSymbol expected: Unbound public symbol for public kotlinx.coroutines/CancellationException|null[0]\n<stack trace>\n```\n\nLANGUAGE: text\nCODE:\n```\ne: The symbol of unexpected type encountered during IR deserialization: IrClassPublicSymbolImpl, kotlinx.coroutines/CancellationException|null[0].\nIrTypeAliasSymbol is expected.\n\nThis could happen if there are two libraries, where one library was compiled against the different version of the other library than the one currently used in the project.\nPlease check that the project configuration is correct and has consistent versions of dependencies.\n\nThe list of libraries that depend on \"org.jetbrains.kotlinx:kotlinx-coroutines-core (org.jetbrains.kotlinx:kotlinx-coroutines-core-macosx64)\" and may lead to conflicts:\n<list of libraries and potential version mismatches>\n\nProject dependencies:\n<dependencies tree>\n```\n\n----------------------------------------\n\nTITLE: Handling Wildcard Extend Bound in KSP\nDESCRIPTION: This Kotlin snippet checks if a type argument has a covariant variance (equivalent to an 'extends' wildcard in Java) and returns the type if true, or null otherwise. This helps in resolving wildcard types in KSP.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nif (ksTypeArgument.variance == Variance.COVARIANT) ksTypeArgument.type else null\n```\n\n----------------------------------------\n\nTITLE: Using Definitely Non-Nullable Types in Kotlin\nDESCRIPTION: This example demonstrates the use of definitely non-nullable types, a new feature in Kotlin 1.6.20 that improves interoperability when extending generic Java classes and interfaces. It requires setting the language version to 1.7.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> elvisLike(x: T, y: T & Any): T & Any = x ?: y\n\nfun main() {\n    // OK\n    elvisLike<String>(\"\", \"\").length\n    // Error: 'null' cannot be a value of a non-null type\n    elvisLike<String>(\"\", null).length\n\n    // OK\n    elvisLike<String?>(null, \"\").length\n    // Error: 'null' cannot be a value of a non-null type\n    elvisLike<String?>(null, null).length\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Build Report Outputs\nDESCRIPTION: This snippet shows how to configure multiple build report outputs, including file, single_file, http, build_scan, and json. The `kotlin.build.report.output` property accepts a comma-separated list of output formats.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n# Required outputs. Any combination is allowed\nkotlin.build.report.output=file,single_file,http,build_scan,json\n```\n\n----------------------------------------\n\nTITLE: JUnit Test for Sum Function (Kotlin) - Fails\nDESCRIPTION: This Kotlin code defines a JUnit test case for the `sum` function in the `Sample` class.  The test is deliberately set up to fail by setting the `expected` variable to 43 when the sum of 40 and 2 is actually 42.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun testSum() {\n    val expected = 43\n    assertEquals(expected, classForTesting.sum(40, 2))\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Invalid Symbols in KSP Multi-Round Processing (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to implement the `process` function within a KSP `SymbolProcessor` to support multiple round processing. It retrieves symbols annotated with `com.example.annotation.Builder`, uses `KSAnnotated.validate()` to filter out symbols that are currently invalid (lacking necessary information), processes the valid symbols (here, using a `BuilderVisitor`), and returns the list of invalid symbols to be deferred to the next processing round. This allows the processor to wait for potentially generated code or resolved types from other processors or previous rounds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-multi-round.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\noverride fun process(resolver: Resolver): List<KSAnnotated> {\n    val symbols = resolver.getSymbolsWithAnnotation(\"com.example.annotation.Builder\")\n    val result = symbols.filter { !it.validate() }\n    symbols\n        .filter { it is KSClassDeclaration && it.validate() }\n        .map { it.accept(BuilderVisitor(), Unit) }\n    return result\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Functions on Dynamic Types in Kotlin\nDESCRIPTION: Demonstrates calling functions with any property or parameters on dynamic type variables in Kotlin, showing how these calls translate directly to JavaScript. This snippet highlights the free chaining of dynamic calls and the necessity of using @JsName annotation for name mangling. The expected result of such calls is always of dynamic type, and there are no constraints on chaining.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/dynamic-type.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndyn.whatever(1, \"foo\", dyn) // 'whatever' is not defined anywhere\ndyn.whatever(*arrayOf(1, 2, 3))\n```\n\n----------------------------------------\n\nTITLE: Interface Inheritance in Kotlin\nDESCRIPTION: This snippet illustrates how an interface can inherit from another, providing implementations for inherited members. It demonstrates the hierarchy with the interfaces Named and Person, and class Employee implementing the interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/interfaces.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Named {\n    val name: String\n}\n\ninterface Person : Named {\n    val firstName: String\n    val lastName: String\n    \n    override val name: String get() = \"$firstName $lastName\"\n}\n\ndata class Employee(\n    // implementing 'name' is not required\n    override val firstName: String,\n    override val lastName: String,\n    val position: Position\n) : Person\n```\n\n----------------------------------------\n\nTITLE: Configuring XCFrameworks in Kotlin Multiplatform (Kotlin DSL)\nDESCRIPTION: Gradle build script (Kotlin DSL) for configuring XCFrameworks in a Kotlin Multiplatform project, enabling support for multiple Apple platforms and architectures.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework\n\nplugins {\n    kotlin(\"multiplatform\")\n}\n\nkotlin {\n    val xcf = XCFramework()\n  \n    ios {\n        binaries.framework {\n            baseName = \"shared\"\n            xcf.add(this)\n        }\n    }\n    watchos {\n        binaries.framework {\n            baseName = \"shared\"\n            xcf.add(this)\n        }\n    }\n    tvos {\n        binaries.framework {\n            baseName = \"shared\"\n            xcf.add(this)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Properties in Inherited Kotlin Classes\nDESCRIPTION: Shows how a subclass can override an open property from a superclass with a property initializer, ensuring type compatibility. Shape declares vertexCount as open, and Rectangle overrides it. Demonstrates property inheritance semantics alongside methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Shape {\n    open val vertexCount: Int = 0\n}\n\nclass Rectangle : Shape() {\n    override val vertexCount = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Class and Object Naming in Kotlin\nDESCRIPTION: Demonstrates the upper camel case naming convention for classes and objects in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nopen class DeclarationProcessor { /*...*/ }\n\nobject EmptyDeclarationProcessor : DeclarationProcessor() { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Lock File Location\nDESCRIPTION: Configuration to customize the location and name of the Yarn lock file for dependency version locking.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().lockFileDirectory =\n        project.rootDir.resolve(\"my-kotlin-js-store\")\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().lockFileName = \"my-yarn.lock\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).lockFileDirectory =\n        file(\"my-kotlin-js-store\")\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).lockFileName = 'my-yarn.lock'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame with temperature data using Kotlin DataFrame\nDESCRIPTION: This code snippet creates a Kotlin DataFrame containing monthly temperature data for three cities: Berlin, Madrid, and Caracas. It uses the `dataFrameOf()` function from the Kotlin DataFrame library to construct the DataFrame with columns for Month, Temperature, and City. The `head(4)` function is then used to display the first four rows of the DataFrame.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// The months variable stores a list with 12 months of the year\nval months = listOf(\n    \"January\", \"February\",\n    \"March\", \"April\", \"May\",\n    \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\",\n    \"December\"\n)\n// The tempBerlin, tempMadrid, and tempCaracas variables store a list with temperature values for each month\nval tempBerlin =\n    listOf(-0.5, 0.0, 4.8, 9.0, 14.3, 17.5, 19.2, 18.9, 14.5, 9.7, 4.7, 1.0)\nval tempMadrid =\n    listOf(6.3, 7.9, 11.2, 12.9, 16.7, 21.1, 24.7, 24.2, 20.3, 15.4, 9.9, 6.6)\nval tempCaracas =\n    listOf(27.5, 28.9, 29.6, 30.9, 31.7, 35.1, 33.8, 32.2, 31.3, 29.4, 28.9, 27.6)\n\n// The df variable stores a DataFrame of three columns, including monthly records, temperature, and cities\nval df = dataFrameOf(\n    \"Month\" to months + months + months,\n    \"Temperature\" to tempBerlin + tempMadrid + tempCaracas,\n    \"City\" to List(12) { \"Berlin\" } + List(12) { \"Madrid\" } + List(12) { \"Caracas\" }\n)\ndf.head(4)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Kotlin/JS Node.js Tests (Groovy)\nDESCRIPTION: This Groovy code demonstrates how to set environment variables for Node.js test execution within the `build.gradle` file. The `environment()` function is used inside the `testTask` block for the `nodejs` target, taking a key-value pair (e.g., \"key\", \"value\") to make variables available to the test runner process.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        nodejs {\n            testTask {\n                environment(\"key\", \"value\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Settings for Kotlin 1.8.20\nDESCRIPTION: Demonstrates how to configure the settings.gradle.kts file to use the Maven Central repository for downloading Kotlin artifacts and dependencies. This ensures proper artifact resolution for Kotlin 1.8.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\npluginManagement {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Library with klib\nDESCRIPTION: Shows how to install a Kotlin/Native library to the default location using the klib utility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ klib install <name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Script Evaluation Function\nDESCRIPTION: Function for evaluating Kotlin scripts using JVM scripting configuration and basic scripting host, returns evaluation results with diagnostics.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun evalFile(scriptFile: File): ResultWithDiagnostics<EvaluationResult> {\n    val compilationConfiguration = createJvmCompilationConfigurationFromTemplate<ScriptWithMavenDeps>()\n    return BasicJvmScriptingHost().eval(scriptFile.toScriptSource(), compilationConfiguration, null)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Null-Safe Collection Reduction Operations in Kotlin\nDESCRIPTION: Shows the reduceOrNull function which returns null on empty collections instead of throwing an exception like its reduce counterpart. This provides a safer way to operate on potentially empty collections.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n     val empty = emptyList<Int>()\n     empty.reduceOrNull { a, b -> a + b }\n     //empty.reduce { a, b -> a + b } // Exception: Empty collection can't be reduced.\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Blank Strings using ifBlank in Kotlin\nDESCRIPTION: Uses the Kotlin standard library function `ifBlank` on the result of `getName()`. This function executes the provided lambda and returns its result ('John Doe') if the original string is blank, otherwise returns the original string. Requires `kotlin.random.Random`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nimport kotlin.random.Random\n\n//sampleStart\nfun main() {\n    val name = getName().ifBlank { \"John Doe\" }\n    println(name)\n}\n\nfun getName(): String =\n    if (Random.nextBoolean()) \"\" else \"David\"\n//sampleEnd\n```\n\n----------------------------------------\n\nTITLE: Using String Templates in Kotlin\nDESCRIPTION: This snippet demonstrates the usage of string templates in Kotlin to print variable values. It shows how to embed variable values using the `$` symbol and how to evaluate expressions within curly braces `{}` after the `$` symbol. It illustrates the use of string templates within the `println()` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-hello-world.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n//sampleStart\n    val customers = 10\n    println(\"There are $customers customers\")\n    // There are 10 customers\n    \n    println(\"There are ${customers + 1} customers\")\n    // There are 11 customers\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Hexadecimal Strings with HexFormat in Kotlin\nDESCRIPTION: This code shows how to parse a hexadecimal string into an integer using the `hexToInt()` extension function and the `HexFormat` class in Kotlin 1.9.0. It demonstrates how to configure the `HexFormat{}` builder to handle a hexadecimal string with a specific prefix, in this case, \"0x\".\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\n// Use HexFormat{} builder to parse a hexadecimal that has prefix: \"0x\".\nprintln(\"0x3a\".hexToInt(HexFormat { number.prefix = \"0x\" })) // \"58\"\n```\n\n----------------------------------------\n\nTITLE: Removing Elements with MutableIterator in Kotlin\nDESCRIPTION: This code demonstrates how to remove elements from a mutable list while iterating using the `MutableIterator` interface. It obtains a `MutableIterator` from the list, moves to the first element, and then removes it using `remove()`. The updated list is then printed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/iterators.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\") \n    val mutableIterator = numbers.iterator()\n    \n    mutableIterator.next()\n    mutableIterator.remove()    \n    println(\"After removal: $numbers\")\n    // After removal: [two, three, four]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Conditional Expressions in Kotlin\nDESCRIPTION: Illustrates how to use if statements for conditionals in Kotlin, both in traditional statement form and as an expression that returns a value. It demonstrates checking for the maximum of two integer values and using concise syntax for conditional logic.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nfun maxOf(a: Int, b: Int): Int {\n    if (a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is \\${maxOf(0, 42)}\")\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n//sampleStart\nfun maxOf(a: Int, b: Int) = if (a > b) a else b\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is \\${maxOf(0, 42)}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Interval Calculation with Fixed Parameters Kotlin\nDESCRIPTION: This snippet demonstrates a basic function to calculate time interval in seconds, given hours, minutes, and seconds. The `main` function then calls this function with different values to print the corresponding second values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun intervalInSeconds(hours: Int, minutes: Int, seconds: Int) =\n    ((hours * 60) + minutes) * 60 + seconds\n\nfun main() {\n    println(intervalInSeconds(1, 20, 15))\n    println(intervalInSeconds(0, 1, 25))\n    println(intervalInSeconds(2, 0, 0))\n    println(intervalInSeconds(0, 10, 0))\n    println(intervalInSeconds(1, 0, 1))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Compilations Groovy DSL\nDESCRIPTION: Shows how to create a custom compilation named `integrationTest` within the `jvm` target, configure its default source set, and register a test task using Groovy DSL. The custom compilation is created using the `compilations.create()` method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm() {\n        compilations.create('integrationTest') {\n            defaultSourceSet {\n                dependencies {\n                    /* ... */\n                }\n            }\n\n            // Create a test task to run the tests produced by this compilation:\n            tasks.register('jvmIntegrationTest', Test) {\n                /* ... */\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KSP API Dependency (Groovy)\nDESCRIPTION: Adding the KSP API dependency to a module's `build.gradle` file. This allows the module to use KSP's symbol processing APIs. The `%kspSupportedKotlinVersion%-%kspVersion%` placeholder should be replaced with the actual supported KSP and Kotlin versions. The `%kotlinVersion%` placeholder should be replaced with the Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_9\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'com.google.devtools.ksp:symbol-processing-api:%kspSupportedKotlinVersion%-%kspVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version in Gradle (Groovy DSL)\nDESCRIPTION: This snippet shows how to update the Kotlin version in a Gradle build script using Groovy DSL. It demonstrates how to specify the Kotlin plugin version, with placeholders for specific target environments like JVM or Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/releases.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    // Replace `<...>` with the plugin name appropriate for your target environment\n    id 'org.jetbrains.kotlin.<...>' version '%kotlinVersion%'\n    // For example, if your target environment is JVM: \n    // id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'\n    // If your target is Kotlin Multiplatform:\n    // id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Support in Kotlin/JS Projects\nDESCRIPTION: This snippet demonstrates the new approach to adding CSS support in Kotlin/JS projects using Gradle KTS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nbrowser {\n    commonWebpackConfig {\n        cssSupport {\n            enabled.set(true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Package Module Import\nDESCRIPTION: Example Swift code showing how to import and use the shared Kotlin module in a local Swift package\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-spm-local-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Shared\n\npublic func greetingsFromSpmLocalPackage() -> String {\n    return Greeting.greet()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to update the Kotlin version in a Gradle build script using Kotlin DSL. It demonstrates how to specify the Kotlin plugin version, with placeholders for specific target environments like JVM or Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/releases.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // Replace `<...>` with the plugin name appropriate for your target environment\n    kotlin(\"<...>\") version \"%kotlinVersion%\"\n    // For example, if your target environment is JVM:\n    // kotlin(\"jvm\") version \"%kotlinVersion%\"\n    // If your target is Kotlin Multiplatform:\n    // kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Underscores for Unused Parameters in Kotlin 1.1\nDESCRIPTION: Demonstrates the use of underscores to replace the names of unused parameters in lambdas. The example shows iterating over a map while only using the value parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val map = mapOf(1 to \"one\", 2 to \"two\")\n\n//sampleStart\n    map.forEach { _, value -> println(\"$value!\") }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Test Method Naming in Kotlin\nDESCRIPTION: Shows how to use spaces (enclosed in backticks) and underscores in test method names in Kotlin. Note that method names with spaces enclosed in backticks are only supported by Android runtime from API level 30.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTestCase {\n     @Test fun `ensure everything works`() { /*...*/ }\n     \n     @Test fun ensureEverythingWorks_onAndroid() { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Integration Test Compilation in Groovy\nDESCRIPTION: This snippet shows how to create a custom compilation for integration tests in a JVM target using Groovy DSL. It sets up dependencies and creates a test task to run the integration tests with the proper classpath.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm() {\n        compilations.create('integrationTest') {\n            defaultSourceSet {\n                dependencies {\n                    def main = compilations.main\n                    // Compile against the main compilation's compile classpath and outputs:\n                    implementation(main.compileDependencyFiles + main.output.classesDirs)\n                    implementation kotlin('test-junit')\n                    /* ... */\n                }\n            }\n           \n            // Create a test task to run the tests produced by this compilation:\n            tasks.register('jvmIntegrationTest', Test) {\n                // Run the tests with the classpath containing the compile dependencies (including 'main'),\n                // runtime dependencies, and the outputs of this compilation:\n                classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs\n                \n                // Run only the tests from this compilation's outputs:\n                testClassesDirs = output.classesDirs\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Naming for Containing Annotations in Kotlin\nDESCRIPTION: Shows how to set a custom name for a containing annotation using @JvmRepeatable and explicitly declaring the containing annotation class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmRepeatable(Tags::class)\nannotation class Tag(val name: String)\n\nannotation class Tags(val value: Array<Tag>)\n```\n\n----------------------------------------\n\nTITLE: Specifying Kotlin Plugin Version (Groovy)\nDESCRIPTION: Snippet for specifying the Kotlin plugin version in the root project's `build.gradle` using Groovy DSL. The `apply false` prevents the plugin from being applied in the root project but makes it available for subprojects. The `%kspSupportedKotlinVersion%` placeholder should be replaced with the actual supported Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_7\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version '%kspSupportedKotlinVersion%' apply false\n}\n\nbuildscript {\n    dependencies {\n        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:%kspSupportedKotlinVersion%'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing kotlin.parallel.tasks.in.project Gradle Property\nDESCRIPTION: Describes the removal of the `kotlin.parallel.tasks.in.project` Gradle property, a source incompatible change in the build tooling. This property, related to parallel task execution within a project, was deprecated with a warning in 1.5.20 and is completely removed in Kotlin version 1.6.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Exporting Dependencies to Binaries in Kotlin DSL\nDESCRIPTION: Demonstrates how to export specific dependencies to Objective-C frameworks or native libraries using the Kotlin DSL, allowing control over which dependencies are included in the binary output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        macosMain.dependencies {\n            // Will be exported.\n            api(project(\":dependency\"))\n            api(\"org.example:exported-library:1.0\")\n            // Will not be exported.\n            api(\"org.example:not-exported-library:1.0\")\n        }\n    }\n    macosX64(\"macos\").binaries {\n        framework {\n            export(project(\":dependency\"))\n            export(\"org.example:exported-library:1.0\")\n        }\n        sharedLib {\n            // It's possible to export different sets of dependencies to different binaries.\n            export(project(':dependency'))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Passing External Interfaces In Kotlin/JS\nDESCRIPTION: Defines a Kotlin external interface to represent a JavaScript object expected to have particular methods, and shows passing this type as a parameter to another external function. This facilitates expressing JavaScript 'duck typing' patterns in static Kotlin with compile-time type checking for specified members.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal interface HasFooAndBar {\n    fun foo()\n\n    fun bar()\n}\n\nexternal fun myFunction(p: HasFooAndBar)\n```\n\n----------------------------------------\n\nTITLE: When Expression (Boolean) Kotlin\nDESCRIPTION: This Kotlin code uses a 'when' expression without a subject to check the 'trafficLightState' variable. It assigns a corresponding traffic action based on the state and prints the action. It requires Kotlin 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val trafficLightState = \"Red\" // This can be \"Green\", \"Yellow\", or \"Red\"\n\n    val trafficAction = when {\n        trafficLightState == \"Green\" -> \"Go\"\n        trafficLightState == \"Yellow\" -> \"Slow down\"\n        trafficLightState == \"Red\" -> \"Stop\"\n        else -> \"Malfunction\"\n    }\n\n    println(trafficAction)\n    // Stop\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Data Classes\nDESCRIPTION: This code snippet defines a data class `Person` with properties like `name`, `address`, and `ownsAPet`. It also requires the declaration of additional data classes for `Name`, `Address`, and `City` to compile. The `main` function creates an instance of `Person`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: Name, val address: Address, val ownsAPet: Boolean = true)\n// Write your code here\n// data class Name(...)\n\nfun main() {\n    val person = Person(\n        Name(\"John\", \"Smith\"),\n        Address(\"123 Fake Street\", City(\"Springfield\", \"US\")),\n        ownsAPet = false\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Returning a Nullable Type in Kotlin\nDESCRIPTION: This snippet shows the function signature for `parseInt`, which takes a `String` as input and returns an `Int?`. The `?` indicates that the function can return either an `Int` or `null`, signifying that the input string might not represent a valid integer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun parseInt(str: String): Int? {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Setup for Browser Target\nDESCRIPTION: Basic HTML file structure required for serving and displaying Kotlin/JS output in a browser environment. This markup includes a script tag referencing the generated JavaScript file, which should correspond to the project build output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/running-kotlin-js.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>JS Client</title>\n</head>\n<body>\n<script src=\"js-tutorial.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Iterating over a List with a while Loop in Kotlin\nDESCRIPTION: This snippet demonstrates how to use a `while` loop and an explicit index variable to iterate through the elements of a `List`. It prints each item along with its index until the end of the list is reached.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    var index = 0\n    while (index < items.size) {\n        println(\"item at $index is ${items[index]}\")\n        index++\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Kotlin Cinterop Between Dependent Pods\nDESCRIPTION: This example demonstrates how to work with dependent APIs across multiple Cocoa Pods. Without proper configuration using useInteropBindingFrom(), the WebImage type would be sourced from different packages, causing compilation errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// The cinterop of pod(\"WebImage\"):\nfun loadImage(): WebImage\n\n// The cinterop of pod(\"Info\"):\nfun printImageInfo(image: WebImage)\n\n// Your code:\nprintImageInfo(loadImage())\n```\n\n----------------------------------------\n\nTITLE: Companion Object Reference Kotlin\nDESCRIPTION: Demonstrates how a class name can be used as a reference to its companion object, regardless of whether the companion object has a name or not.  The `show()` function is called from both named and unnamed companion objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User1 {\n    // Defines a named companion object\n    companion object Named {\n        fun show(): String = \"User1's Named Companion Object\"\n    }\n}\n\n// References the companion object of User1 using the class name\nval reference1 = User1\n\nclass User2 {\n    // Defines an unnamed companion object\n    companion object {\n        fun show(): String = \"User2's Companion Object\"\n    }\n}\n\n// References the companion object of User2 using the class name\nval reference2 = User2\n```\n\n----------------------------------------\n\nTITLE: Context Receivers to Extension Member Functions Migration (Kotlin)\nDESCRIPTION: This Kotlin code demonstrates migrating from context receivers to extension member functions. The 'Before' code utilizes context receivers to define and use a context receiver member function. The 'After' code uses an extension function to achieve the same functionality without context receivers. This is another migration option for context receivers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(ContextReceiverType)\nfun contextReceiverMember() = TODO()\n\ncontext(ContextReceiverType)\nfun someFunction() {\n    contextReceiverMember()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ContextReceiverType {\n    fun contextReceiverMember() = TODO()\n}\n\nfun ContextReceiverType.someFunction() {\n    contextReceiverMember()\n}\n```\n\n----------------------------------------\n\nTITLE: While Loop in Kotlin\nDESCRIPTION: This snippet demonstrates the use of a `while` loop in Kotlin. The loop continues to execute as long as the conditional expression `cakesEaten < 3` is true. Inside the loop, the program prints \"Eat a cake\" and increments the `cakesEaten` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    var cakesEaten = 0\n    while (cakesEaten < 3) {\n        println(\"Eat a cake\")\n        cakesEaten++\n    }\n    // Eat a cake\n    // Eat a cake\n    // Eat a cake\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nullable Types in Kotlin\nDESCRIPTION: This snippet shows how to declare nullable and non-nullable variables in Kotlin, and demonstrates compiler errors when trying to assign null to non-nullable types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // neverNull has String type\n    var neverNull: String = \"This can't be null\"\n\n    // Throws a compiler error\n    neverNull = null\n\n    // nullable has nullable String type\n    var nullable: String? = \"You can keep a null here\"\n\n    // This is OK\n    nullable = null\n\n    // By default, null values aren't accepted\n    var inferredNonNull = \"The compiler assumes non-nullable\"\n\n    // Throws a compiler error\n    inferredNonNull = null\n\n    // notNull doesn't accept null values\n    fun strLength(notNull: String): Int {                 \n        return notNull.length\n    }\n\n    println(strLength(neverNull)) // 18\n    println(strLength(nullable))  // Throws a compiler error\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression Solution 1 in Kotlin\nDESCRIPTION: This is the solution for exercise 1, demonstrating how to use a lambda expression with the `map` function to generate a list of URLs. The lambda expression takes an action as input and uses string interpolation to construct the complete URL, combining the prefix, ID, and action.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val actions = listOf(\"title\", \"year\", \"author\")\n    val prefix = \"https://example.com/book-info\"\n    val id = 5\n    val urls = actions.map { action -> \"$prefix/$id/$action\" }\n    println(urls)\n}\n```\n\n----------------------------------------\n\nTITLE: If Statement Dice Game Kotlin\nDESCRIPTION: This Kotlin code simulates a dice game where the player wins if two dice rolls result in the same number. It uses an 'if' statement to check if the dice match and prints the appropriate message. This snippet requires Kotlin version 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\nfun main() {\n    val firstResult = Random.nextInt(6)\n    val secondResult = Random.nextInt(6)\n    if (firstResult == secondResult)\n        println(\"You win :)\")\n    else\n        println(\"You lose :(\")\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Casting for Callable References\nDESCRIPTION: Demonstrates how Kotlin 1.4 allows accessing member references of smart cast types, which was not possible in earlier versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.reflect.KFunction\n\nsealed class Animal\nclass Cat : Animal() {\n    fun meow() {\n        println(\"meow\")\n    }\n}\n\nclass Dog : Animal() {\n    fun woof() {\n        println(\"woof\")\n    }\n}\n\nfun perform(animal: Animal) {\n    val kFunction: KFunction<*> = when (animal) {\n        is Cat -> animal::meow\n        is Dog -> animal::woof\n    }\n    kFunction.call()\n}\n\nfun main() {\n    perform(Cat())\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Kotlin Dependencies from Maven Library (XML)\nDESCRIPTION: This XML snippet demonstrates how to exclude all Kotlin library dependencies when including an external library in a Maven project. It uses the exclusions tag to prevent transitive Kotlin dependencies from being pulled in. This requires Maven 3 or later (due to star exclusion support) and is intended for use in the pom.xml file. Replace the groupId, artifactId, and version fields with the actual library coordinates.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kotlin-osgi.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n    <groupId>some.group.id</groupId>\\n    <artifactId>some.library</artifactId>\\n    <version>some.library.version</version>\\n\\n    <exclusions>\\n        <exclusion>\\n            <groupId>org.jetbrains.kotlin</groupId>\\n            <artifactId>*</artifactId>\\n        </exclusion>\\n    </exclusions>\\n</dependency>\\n\n```\n\n----------------------------------------\n\nTITLE: Using Data Objects in Sealed Hierarchies with Data Classes\nDESCRIPTION: This example shows how data objects work well in sealed hierarchies alongside data classes, providing consistent toString() behavior without manual overrides. This creates symmetry in the representation of different elements in a sealed hierarchy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface ReadResult\ndata class Number(val number: Int) : ReadResult\ndata class Text(val text: String) : ReadResult\ndata object EndOfFile : ReadResult\n\nfun main() {\n    println(Number(7)) // Number(number=7)\n    println(EndOfFile) // EndOfFile\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pod Library with Default Namespace\nDESCRIPTION: Shows how to import a Pod library using the default cocoapods namespace in Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport cocoapods.FirebaseAuth.*\n```\n\n----------------------------------------\n\nTITLE: Passing Compiler and Linker Options in Kotlin Native C Interop\nDESCRIPTION: This snippet demonstrates how to pass options to the C compiler and linker during the interop process. The `compilerOpts` property passes options to the C compiler for header analysis, while `linkerOpts` passes options to the linker for final executable linking. Target-specific options can also be specified.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\ncompilerOpts = -DFOO=bar\nlinkerOpts = -lpng\n```\n\n----------------------------------------\n\nTITLE: Create Custom Time Source Kotlin\nDESCRIPTION: This code snippet demonstrates creating a custom time source, `RealtimeMonotonicTimeSource`, using `SystemClock.elapsedRealtimeNanos()` which is suitable for Android applications to keep track of time even when the device is in deep sleep. It uses the custom time source to measure the execution time of a code block using the `measureTime` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nobject RealtimeMonotonicTimeSource : AbstractLongTimeSource(DurationUnit.NANOSECONDS) {\n    override fun read(): Long = SystemClock.elapsedRealtimeNanos()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring JS Interop with @JsModule, @JsNonModule, and @JsName (Kotlin)\nDESCRIPTION: Kotlin external function declaration using multiple annotations for JavaScript interoperability. `@JsModule(\"hello\")` indicates the function comes from the 'hello' module. `@JsNonModule` allows this declaration to be used even when the Kotlin code is not compiled as a module (e.g., when using the JS library via a script tag). `@JsName(\"topLevelSayHello\")` maps the Kotlin function `sayHello` to the actual JavaScript function named `topLevelSayHello`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsModule(\"hello\")\n@JsNonModule\n@JsName(\"topLevelSayHello\")\nexternal fun sayHello(name: String)\n```\n\n----------------------------------------\n\nTITLE: Declaring Source Set Specific Dependencies in Groovy DSL\nDESCRIPTION: Shows how to declare dependencies specifically for the `jsMain` source set within the `kotlin { sourceSets {} }` block using Groovy DSL. This allows for more granular dependency management, applying dependencies only where needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        jsMain {\n            dependencies {\n                implementation 'org.example.myproject:1.1.0'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Headers by Globs in Kotlin Native C Interop\nDESCRIPTION: This snippet demonstrates how to filter headers using globs. The `headerFilter` property includes declarations from headers that match any of the specified globs, applied to header paths relative to include path elements. This helps to avoid issues during development environment upgrades.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nheaderFilter = SomeLibrary/**\n```\n\n----------------------------------------\n\nTITLE: DSL Marker Annotation Definition in Kotlin\nDESCRIPTION: Definition of a DSL marker annotation used to control receiver scope in Kotlin DSLs. This annotation helps prevent unintended access to outer receivers in nested DSL blocks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@DslMarker\nannotation class HtmlTagMarker\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options in Kotlin JVM Compile Task\nDESCRIPTION: Demonstrates how to use the new compilerOptions input to set compiler options in a Kotlin JVM compile task using Gradle lazy properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named(\"compileKotlin\", org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile::class.java) {\n    compilerOptions {\n        useK2.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Value Parameters with Trailing Comma in Kotlin\nDESCRIPTION: This example illustrates function value parameters, including constructors and vararg parameters, with trailing commas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nfun powerOf(\n    number: Int, \n    exponent: Int, // trailing comma\n) { /*...*/ }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconstructor(\n    x: Comparable<Number>,\n    y: Iterable<Number>, // trailing comma\n) {}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun print(\n    vararg quantity: Int,\n    description: String, // trailing comma\n) {}\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D density plot with Lets-Plot\nDESCRIPTION: This code creates a 2D density plot with a scatter plot overlay using Lets-Plot. It maps \"x\" and \"y\" to the respective axes.  `geomPoint` creates a scatter plot with black points and an alpha value of 0.1. `geomDensity2D` adds the density contours colored by level. `scaleColorGradient` customizes the color gradient from dark green to yellow, and `theme().legendPositionBottom()` moves the legend to the bottom of the plot. `ggsize(600, 300)` sets the plot size.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval densityPlot = letsPlot(data) { x = \"x\"; y = \"y\" } + ggsize(600, 300) + geomPoint(\n    color = \"black\",\n    alpha = .1\n) + geomDensity2D { color = \"..level..\" } +\n        scaleColorGradient(low = \"dark_green\", high = \"yellow\", guide = guideColorbar(barHeight = 10, barWidth = 300)) +\n        theme().legendPositionBottom()\ndensityPlot\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Properties in Header\nDESCRIPTION: This snippet demonstrates how to define a Kotlin class with properties declared directly within the class header. It shows how to declare read-only (`val`) and mutable (`var`) properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Contact(val id: Int, var email: String)\n```\n\n----------------------------------------\n\nTITLE: Enabling Build Reports Output\nDESCRIPTION: This snippet demonstrates how to enable build reports and specify the output format using the `kotlin.build.report.output` property in `gradle.properties`.  This property defines where the build reports are saved.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nkotlin.build.report.output=file\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function with Lambda\nDESCRIPTION: This Kotlin code defines a function 'foo' that takes a function type (lambda) as a parameter.  The lambda accepts an Int and returns Unit.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(block: (Int) -> Unit) { ... }\n```\n\n----------------------------------------\n\nTITLE: If Statement Kotlin\nDESCRIPTION: This code demonstrates a simple 'if' statement in Kotlin.  It checks a boolean variable and assigns a value to an integer variable based on the result of the check. The code then prints the assigned value.  It requires Kotlin version 1.3 or higher to run.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val d: Int\n    val check = true\n\n    if (check) {\n        d = 1\n    } else {\n        d = 2\n    }\n\n    println(d)\n    // 1\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying all-open Annotations in Gradle with Groovy DSL\nDESCRIPTION: Demonstrates how to specify which annotations should make classes open using the allOpen configuration block in a Groovy DSL Gradle script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nallOpen {\n    annotation(\"com.my.Annotation\")\n    // annotations(\"com.another.Annotation\", \"com.third.Annotation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Cube Root Using cbrt()\nDESCRIPTION: Shows usage of the newly stabilized cbrt() function to compute cube roots of positive and negative numbers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.math.*\n\nfun main() {\n    val num = 27\n    val negNum = -num\n\n    println(\"The cube root of ${num.toDouble()} is: \" +\n            cbrt(num.toDouble()))\n    println(\"The cube root of ${negNum.toDouble()} is: \" +\n            cbrt(negNum.toDouble()))\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect @JsName Usage Causing Compile Error\nDESCRIPTION: Illustrates an incorrect usage of the `@JsName` annotation where the provided name (\"new C()\") is not a valid JavaScript identifier. This will result in a compile-time error.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsName(\"new C()\")   // error here\nexternal fun newC()\n```\n\n----------------------------------------\n\nTITLE: Creating Kotlin DataFrame\nDESCRIPTION: Creates a Kotlin DataFrame with sample sales data for different products and months.  Demonstrates the use of `dataFrameOf()` function to construct the data frame. Requires the `dataframe` library loaded with `%use dataframe`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval months = listOf(\n    \"January\", \"February\",\n    \"March\", \"April\", \"May\",\n    \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\",\n    \"December\"\n)\n\n// Sales data for different products and months:\nval salesLaptop = listOf(120, 130, 150, 180, 200, 220, 240, 230, 210, 190, 160, 140)\nval salesSmartphone = listOf(90, 100, 110, 130, 150, 170, 190, 180, 160, 140, 120, 100)\nval salesTablet = listOf(60, 70, 80, 90, 100, 110, 120, 110, 100, 90, 80, 70)\n \n// A data frame with columns for Month, Sales, and Product\nval dfSales = dataFrameOf(\n    \"Month\" to months + months + months,\n    \"Sales\" to salesLaptop + salesSmartphone + salesTablet,\n    \"Product\" to List(12) { \"Laptop\" } + List(12) { \"Smartphone\" } + List(12) { \"Tablet\" },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Multiplatform Project for XCFramework Export\nDESCRIPTION: This Kotlin code snippet shows how to update the shared/build.gradle.kts file to configure the project for XCFramework export. It sets up iOS targets and defines the XCFramework creation process.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework\n\nkotlin {\n    // Other Kotlin Multiplatform targets\n    // ...\n    // Name of the module to be imported in the consumer project\n    val xcframeworkName = \"Shared\"\n    val xcf = XCFramework(xcframeworkName)\n\n    listOf(\n        iosX64(),\n        iosArm64(),\n        iosSimulatorArm64(),\n    ).forEach { \n        it.binaries.framework {\n            baseName = xcframeworkName\n            \n            // Specify CFBundleIdentifier to uniquely identify the framework\n            binaryOption(\"bundleId\", \"org.example.${xcframeworkName}\")\n            xcf.add(this)\n            isStatic = true\n        }\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Legacy Constructor Function in Kotlin\nDESCRIPTION: Shows how to deprecate a legacy constructor function for binary compatibility when migrating to a functional interface. Uses the @Deprecated annotation with DeprecationLevel.HIDDEN.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Deprecated(message = \"Your message about the deprecation\", level = DeprecationLevel.HIDDEN)\nfun Printer(...) {...}\n```\n\n----------------------------------------\n\nTITLE: Updating VideoPlayer component usage in App component\nDESCRIPTION: Modifies the VideoPlayer component call in the App component to handle state changes when marking videos as watched or unwatched.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nVideoPlayer {\n    video = curr\n    unwatchedVideo = curr in unwatchedVideos\n    onWatchedButtonPressed = {\n        if (video in unwatchedVideos) {\n            unwatchedVideos = unwatchedVideos - video\n            watchedVideos = watchedVideos + video\n        } else {\n            watchedVideos = watchedVideos - video\n            unwatchedVideos = unwatchedVideos + video\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Suspend Function Testing Example\nDESCRIPTION: Demonstrates testing of suspend functions using inline assertion functions in a coroutine context.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun test() = runBlocking<Unit> {\n    val deferred = async { \"Kotlin is nice\" }\n    assertTrue(\"Kotlin substring should be present\") {\n        deferred.await() .contains(\"Kotlin\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Top-Level Elements in a Package in Kotlin\nDESCRIPTION: Demonstrates how to declare functions and classes at the top level directly inside a package. The example shows a package named 'foo' containing a function 'baz' and a class 'Bar'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/visibility-modifiers.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// file name: example.kt\npackage foo\n\nfun baz() { ... }\nclass Bar { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Input Reading Helper Functions in Kotlin 1.6+\nDESCRIPTION: Provides a set of private helper functions for simplifying input reading in competitive programming using Kotlin 1.6+. Functions include `readStr` for reading a single string line, `readInt` for a single integer, `readStrings` for a list of strings split by spaces, and `readInts` for a list of integers. These helpers utilize `readln()`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun readStr() = readln() // string line\nprivate fun readInt() = readStr().toInt() // single int\nprivate fun readStrings() = readStr().split(\" \") // list of strings\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\n```\n\n----------------------------------------\n\nTITLE: Create DataFrame with Temperature Data - Kotlin\nDESCRIPTION: Creates a DataFrame with monthly average temperature data for three cities (Berlin, Madrid, and Caracas) using the Kotlin DataFrame library. The DataFrame includes columns for month, temperature, and city.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-visualization.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// The months variable stores a list with the 12 months of the year\nval months = listOf(\n    \"January\", \"February\",\n    \"March\", \"April\", \"May\",\n    \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\",\n    \"December\"\n)\n// The tempBerlin, tempMadrid, and tempCaracas variables store a list with temperature values for each month\nval tempBerlin =\n    listOf(-0.5, 0.0, 4.8, 9.0, 14.3, 17.5, 19.2, 18.9, 14.5, 9.7, 4.7, 1.0)\nval tempMadrid =\n    listOf(6.3, 7.9, 11.2, 12.9, 16.7, 21.1, 24.7, 24.2, 20.3, 15.4, 9.9, 6.6)\nval tempCaracas =\n    listOf(27.5, 28.9, 29.6, 30.9, 31.7, 35.1, 33.8, 32.2, 31.3, 29.4, 28.9, 27.6)\n\n// The df variable stores a DataFrame of three columns, including records of months, temperature, and cities\nval df = dataFrameOf(\n    \"Month\" to months + months + months,\n    \"Temperature\" to tempBerlin + tempMadrid + tempCaracas,\n    \"City\" to List(12) { \"Berlin\" } + List(12) { \"Madrid\" } + List(12) { \"Caracas\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Groovy Source Sets for KSP\nDESCRIPTION: This Groovy snippet adds the generated KSP code directories to the main and test source sets. This makes the generated code visible to the IDE for code completion and error checking.  It requires the `kotlin` block in the `build.gradle` file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_18\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'\n        test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Strict Boolean Conversion in Kotlin\nDESCRIPTION: New strict boolean conversion functions that only accept 'true' and 'false' literal strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"true\".toBooleanStrict())\n    println(\"1\".toBooleanStrictOrNull())\n    // println(\"1\".toBooleanStrict()) // Exception\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Script Execution\nDESCRIPTION: Main function implementation that handles script file path validation and execution, with basic argument checking and file processing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(vararg args: String) {\n    if (args.size != 1) {\n        println(\"usage: <app> <script file>\")\n    } else {\n        val scriptFile = File(args[0])\n        println(\"Executing script $scriptFile\")\n        evalFile(scriptFile)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options at the target level (Groovy DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for the JVM target using the Groovy DSL.  This setting applies as a default to all compilations within the JVM target, unless overridden at the compilation unit level. Requires Gradle Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_27\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        // Configures all compilations of the JVM target\n        compilerOptions {\n            allWarningsAsErrors = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Collections using joinToString in Kotlin\nDESCRIPTION: Shows the Kotlin approach using extension functions. It filters a list using `filter` and then joins the elements into a string using `joinToString`, specifying a separator and a lambda for transforming elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val numbers = listOf(1, 2, 3, 4, 5, 6)\n    val invertedOddNumbers = numbers\n        .filter { it % 2 != 0 }\n        .joinToString(separator = \";\") {\"${-it}\"}\n    println(invertedOddNumbers)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin test function using produce/consume\nDESCRIPTION: This Kotlin code shows how calling the `produce` and `consume` functions, which utilize the `Node` class (an inaccessible generic type), now triggers an error in Kotlin 2.0.0 when the module dependencies are misconfigured.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module three\nfun test() {\n    // Triggers an error in Kotlin 2.0.0, as generic class Node<V> is \n    // inaccessible\n    consume(produce())\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Data Class Instances in Kotlin\nDESCRIPTION: This snippet demonstrates how to create copies of data class instances using the `copy()` function. It shows how to create an exact copy and how to create a copy with modified property values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val id: Int)\n\nfun main() {\n    //sampleStart\n    val user = User(\"Alex\", 1)\n\n    // Creates an exact copy of user\n    println(user.copy())       \n    // User(name=Alex, id=1)\n\n    // Creates a copy of user with name: \"Max\"\n    println(user.copy(\"Max\"))  \n    // User(name=Max, id=1)\n\n    // Creates a copy of user with id: 3\n    println(user.copy(id = 3)) \n    // User(name=Alex, id=3)\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Interface to Functional Interface Declaration in Kotlin\nDESCRIPTION: This code demonstrates replacing a classic interface implementation with a concise 'fun interface' declaration. The new 'Printer' is marked as a 'fun interface', allowing easy instantiation via lambda and enabling constructor references. This greatly simplifies code usage and migration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface Printer { \n    fun print()\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Call to Kotlin Top-Level Function\nDESCRIPTION: This Swift code shows how to call the Kotlin top-level function `foo()` from the `my.library` package.  The Kotlin file `MyLibraryUtils.kt` is translated into a class named `MyLibraryUtilsKt`, and the function `foo()` becomes a member of this class. Accessing the function requires using the class name followed by the function name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nMyLibraryUtilsKt.foo()\n```\n\n----------------------------------------\n\nTITLE: Loop-Based Fixpoint Calculation in Kotlin\nDESCRIPTION: This code provides an iterative equivalent of the tail recursive version for calculating the fixpoint. It uses a `while` loop instead of recursion. Dependencies include Kotlin's Math.cos function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval eps = 1E-10 // \"good enough\", could be 10^-15\n\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (Math.abs(x - y) < eps) return x\n        x = Math.cos(x)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Source Set Specific Dependencies in Kotlin DSL\nDESCRIPTION: Shows how to declare dependencies specifically for the `jsMain` source set within the `kotlin { sourceSets {} }` block using Kotlin DSL. This allows for more granular dependency management, applying dependencies only where needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val jsMain by getting {\n            dependencies {\n                implementation(\"org.example.myproject:1.1.0\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Area in Kotlin\nDESCRIPTION: This Kotlin code defines a function `circleArea` that calculates the area of a circle given its radius.  It utilizes the `PI` constant from the `kotlin.math` package and returns the area as a `Double`.  The main function calls this function with a radius of 2 and prints the result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.math.PI\n\nfun circleArea(radius: Int): Double {\n    return PI * radius * radius\n}\n\nfun main() {\n    println(circleArea(2)) // 12.566370614359172\n}\n```\n\n----------------------------------------\n\nTITLE: Underscore Operator for Type Arguments\nDESCRIPTION: Demonstration of the new underscore operator for type argument inference when working with generic classes and functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class SomeClass<T> {\n    abstract fun execute(): T\n}\n\nclass SomeImplementation : SomeClass<String>() {\n    override fun execute(): String = \"Test\"\n}\n\nclass OtherImplementation : SomeClass<Int>() {\n    override fun execute(): Int = 42\n}\n\nobject Runner {\n    inline fun <reified S: SomeClass<T>, T> run(): T {\n        return S::class.java.getDeclaredConstructor().newInstance().execute()\n    }\n}\n\nfun main() {\n    // T is inferred as String because SomeImplementation derives from SomeClass<String>\n    val s = Runner.run<SomeImplementation, _>()\n    assert(s == \"Test\")\n\n    // T is inferred as Int because OtherImplementation derives from SomeClass<Int>\n    val n = Runner.run<OtherImplementation, _>()\n    assert(n == 42)\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Container and functions using Node\nDESCRIPTION: This Kotlin code declares another generic class (`Container`) and functions which utilize the `Node` class as a generic type argument. It shows the setup in Module Two before Module Three attempts to use it with incorrect dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module two\nclass Container<C>(vararg val content: C)\n\n// Functions with generic class type that\n// also have a generic class type argument\nfun produce(): Container<Node<Int>> = Container(Node(42))\nfun consume(arg: Container<Node<Int>>) {}\n```\n\n----------------------------------------\n\nTITLE: Function with Multiple Default Arguments - Kotlin\nDESCRIPTION: Provides an example function declaration with several parameters all having default values, simplifying the creation of overloaded signatures. Inputs include a string, booleans, and a char. Defaults cover all parameter types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun reformat(\n    str: String,\n    normalizeCase: Boolean = true,\n    upperCaseFirstLetter: Boolean = true,\n    divideByCamelHumps: Boolean = false,\n    wordSeparator: Char = ' ',\n) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Selecting JavaScript Module Kind with Kotlin Gradle DSL - Kotlin\nDESCRIPTION: This snippet configures the type of JavaScript module to be generated by the Kotlin compiler using the JsModuleKind enum. Required dependencies include the Kotlin Gradle plugin and known module kind constants (e.g., MODULE_ES). Use this in build scripts to control interop and packaging of JS output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\ncompilerOptions.moduleKind.set(JsModuleKind.MODULE_ES)\n```\n\n----------------------------------------\n\nTITLE: Configuring XCFrameworks in Kotlin Multiplatform Project using Kotlin DSL\nDESCRIPTION: Demonstrates how to set up XCFrameworks in a Kotlin Multiplatform project using the Kotlin DSL. This configuration targets iOS platforms (x64, Arm64, and Simulator Arm64) and includes modules from the 'shared' and 'lib' projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinArtifacts {\n    Native.XCFramework(\"sdk\") {\n        targets(iosX64, iosArm64, iosSimulatorArm64)\n        setModules(\n            project(\":shared\"),\n            project(\":lib\")\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring String? Type in Lambda Parameter\nDESCRIPTION: Demonstrates improved type inference in Kotlin 1.4 where the type of lambda parameter 'it' is correctly inferred as String? without explicit specification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval rulesMap: Map<String, (String?) -> Boolean> = mapOf(\n    \"weak\" to { it != null },\n    \"medium\" to { !it.isNullOrBlank() },\n    \"strong\" to { it != null && \"^[a-zA-Z0-9]+$\".toRegex().matches(it) }\n)\n\nfun main() {\n    println(rulesMap.getValue(\"weak\")(\"abc!\"))\n    println(rulesMap.getValue(\"strong\")(\"abc\"))\n    println(rulesMap.getValue(\"strong\")(\"abc!\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Type Arguments with Multiple Builders in One Call\nDESCRIPTION: Demonstrates how builder inference can work with multiple interdependent builder lambdas within a single function call.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <K, V> myBuilder(\n    listBuilder: MutableList<V>.() -> Unit,\n    mapBuilder: MutableMap<K, V>.() -> Unit\n): Pair<List<V>, Map<K, V>> =\n    mutableListOf<V>().apply(listBuilder) to mutableMapOf<K, V>().apply(mapBuilder)\n\nfun main() {\n    val result = myBuilder(\n        { add(1) },\n        { put(\"key\", 2) }\n    )\n    // result has Pair<List<Int>, Map<String, Int>> type\n}\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Targets with Hierarchical Structure Using Target Shortcuts in Kotlin\nDESCRIPTION: Creates iOS device and simulator targets with a shared source set using the 'ios()' target shortcut. This automatically sets up iosMain and iosTest source sets that are shared between the iOS targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    ios() // iOS device and simulator targets; iosMain and iosTest source sets\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Webpack Configuration\nDESCRIPTION: Import statement for Kotlin Webpack configuration needed for debugging setup\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig\n```\n\n----------------------------------------\n\nTITLE: Removing kotlin.useFallbackCompilerSearch Gradle Build Option\nDESCRIPTION: Describes the removal of the `kotlin.useFallbackCompilerSearch` Gradle build option, a source incompatible change in the tooling. This option, previously deprecated with a warning in 1.5.0, is completely removed in Kotlin version 1.6.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Applying Kotlin Multiplatform Plugin in Gradle using Groovy DSL - Groovy\nDESCRIPTION: This Groovy snippet applies the Kotlin Multiplatform plugin in a Gradle build script. Substitute '%kotlinVersion%' with the version you are targeting. The id 'org.jetbrains.kotlin.multiplatform' makes multiplatform functionality available for the build script. Plugin dependency must be present in the Gradle buildscript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_24\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Implicit Superclass (Any) in Kotlin\nDESCRIPTION: Demonstrates how a class in Kotlin implicitly inherits from the common superclass Any when no explicit supertype is declared. No dependencies or external configuration is required. The class contains no members or constructors, serving as the simplest example of default inheritance behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Example // Implicitly inherits from Any\n```\n\n----------------------------------------\n\nTITLE: Inlined Entire Property in Kotlin\nDESCRIPTION: Shows how to annotate an entire property with 'inline', which applies to both getters and setters. The implementation of get/set must not use backing fields or non-inlinable code. Accessors are inlined as regular inline functions at usage sites.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ninline var bar: Bar\n    get() = ...\n    set(v) { ... }\n```\n\n----------------------------------------\n\nTITLE: Uppercase String Lambda Kotlin\nDESCRIPTION: This snippet demonstrates the use of a lambda expression to achieve the same functionality as the `uppercaseString` function in the previous example. The lambda expression is assigned to a variable and then invoked with a string argument.  This showcases how lambda expressions can create concise and functional code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val upperCaseString = { text: String -> text.uppercase() }\n    println(upperCaseString(\"hello\"))\n    // HELLO\n}\n```\n\n----------------------------------------\n\nTITLE: Single-Expression Functions in Kotlin (After)\nDESCRIPTION: This example shows how to define a single-expression function in Kotlin.  By using the assignment operator (`=`) instead of curly braces, you can create a more concise function definition. Kotlin also allows you to omit the return type declaration in this case, as it can be inferred.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun sum(x: Int, y: Int) = x + y\n\nfun main() {\n    println(sum(1, 2))\n    // 3\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Dependencies to Binaries in Groovy DSL\nDESCRIPTION: Shows how to export specific dependencies to Objective-C frameworks or native libraries using the Groovy DSL, providing the same functionality as the Kotlin DSL example.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        macosMain.dependencies {\n            // Will be exported.\n            api project(':dependency')\n            api 'org.example:exported-library:1.0'\n            // Will not be exported.\n            api 'org.example:not-exported-library:1.0'\n        }\n    }\n    macosX64(\"macos\").binaries {\n        framework {\n            export project(':dependency')\n            export 'org.example:exported-library:1.0'\n        }\n        sharedLib {\n            // It's possible to export different sets of dependencies to different binaries.\n            export project(':dependency')\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Parameters and Return Value in Kotlin\nDESCRIPTION: This example demonstrates how to define a function that accepts parameters and returns a value. The function `sum` takes two integer parameters, `x` and `y`, and returns their sum as an integer. The main function calls `sum` and prints the result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun sum(x: Int, y: Int): Int {\n    return x + y\n}\n\nfun main() {\n    println(sum(1, 2))\n    // 3\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KSP Gradle Plugin (Kotlin)\nDESCRIPTION: This snippet demonstrates how to add the KSP Gradle plugin in a Kotlin-based `build.gradle.kts` file.  It specifies the plugin ID and version, which are crucial for KSP to function correctly. The version placeholder should be replaced with the actual supported KSP and Kotlin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    id(\"com.google.devtools.ksp\") version \"%kspSupportedKotlinVersion%-%kspVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Spring Boot Application with Kotlin\nDESCRIPTION: Example of a Spring Boot application written in Kotlin that creates a REST controller serving message resources. Shows integration with JVM frameworks and data class usage.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/interoperable.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array<String>) {\n   runApplication<DemoApplication>(*args)\n}\n\n@RestController\nclass MessageResource {\n   @GetMapping\n   fun index(): List<Message> = listOf(\n      Message(\"1\", \"Hello!\"),\n      Message(\"2\", \"Bonjour!\"),\n      Message(\"3\", \"Privet!\"),\n   )\n}\n\ndata class Message(val id: String?, val text: String)\n```\n\n----------------------------------------\n\nTITLE: Improved Type Inference for Recursive Generic Types in Kotlin 1.6.0\nDESCRIPTION: Demonstrates the type inference improvement for recursive generic types that allows for more concise code without explicitly specifying type arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Before 1.5.30\nval containerA = PostgreSQLContainer<Nothing>(DockerImageName.parse(\"postgres:13-alpine\")).apply {\n  withDatabaseName(\"db\")\n  withUsername(\"user\")\n  withPassword(\"password\")\n  withInitScript(\"sql/schema.sql\")\n}\n\n// With compiler option in 1.5.30 or by default starting with 1.6.0\nval containerB = PostgreSQLContainer(DockerImageName.parse(\"postgres:13-alpine\"))\n  .withDatabaseName(\"db\")\n  .withUsername(\"user\")\n  .withPassword(\"password\")\n  .withInitScript(\"sql/schema.sql\")\n```\n\n----------------------------------------\n\nTITLE: Enabling ES2015 Modules and Classes in Gradle\nDESCRIPTION: This code snippet demonstrates how to enable experimental support for ES2015 modules and classes in Kotlin/JS projects. It shows the necessary configurations within the `build.gradle.kts` file using the Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nkotlin {\n    js(IR) {\n        useEsModules() // Enables ES2015 modules\n        browser()\n    }\n}\n\n// Enables ES2015 classes generation\ntasks.withType<KotlinJsCompile>().configureEach {\n    kotlinOptions {\n        useEsClasses = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression Solution 2 in Kotlin\nDESCRIPTION: This is the solution for exercise 2, demonstrating how to implement the `repeatN` function using a `for` loop to execute the provided action (lambda) `n` times.  The `main` function provides an example of calling `repeatN` to print \"Hello\" 5 times.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun repeatN(n: Int, action: () -> Unit) {\n    for (i in 1..n) {\n        action()\n    }\n}\n\nfun main() {\n    repeatN(5) {\n        println(\"Hello\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single-Expression Functions in Kotlin (Before)\nDESCRIPTION: This is the initial version of a simple function, `sum`, which calculates the sum of two integers.  This version uses a traditional function body with curly braces and a `return` statement, serving as a before state for demonstrating single-expression functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun sum(x: Int, y: Int): Int {\n    return x + y\n}\n\nfun main() {\n    println(sum(1, 2))\n    // 3\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sealed Interfaces for Type Hierarchies in Kotlin\nDESCRIPTION: Demonstrates how to use sealed interfaces to create restricted class hierarchies. This example shows implementing concrete polygon classes and using exhaustive when expressions based on the sealed type hierarchy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface Polygon\n\nclass Rectangle(): Polygon\nclass Triangle(): Polygon\n\n// when() is exhaustive: no other polygon implementations can appear\n// after the module is compiled\nfun draw(polygon: Polygon) = when (polygon) {\n    is Rectangle -> // ...\n    is Triangle -> // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Compiler Option to Disable Generics\nDESCRIPTION: This Kotlin code snippet shows the compiler option to disable generics in the generated framework header.  This can be useful in scenarios where generics cause issues.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries.framework {\n    freeCompilerArgs += \"-Xno-objc-generics\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Initialization Status of Lateinit Variables in Kotlin\nDESCRIPTION: This snippet demonstrates the new isInitialized property reference feature introduced in Kotlin 1.2, which allows checking whether a lateinit variable has been initialized before accessing it.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Foo {\n    lateinit var lateinitVar: String\n\n    fun initializationLogic() {\n        println(\"isInitialized before assignment: \" + this::lateinitVar.isInitialized)\n        lateinitVar = \"value\"\n        println(\"isInitialized after assignment: \" + this::lateinitVar.isInitialized)\n    }\n}\n\nfun main(args: Array<String>) {\n\tFoo().initializationLogic()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Set Operations to Lists in Kotlin\nDESCRIPTION: Shows how set operations (union, intersect, subtract) can be applied to lists, with the result always being a Set. Demonstrates how duplicate elements are merged into one in the resulting set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/set-operations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val list1 = listOf(1, 1, 2, 3, 5, 8, -1)\n    val list2 = listOf(1, 1, 2, 2, 3, 5)\n\n    // result of intersecting two lists is a Set\n    println(list1 intersect list2)\n    // [1, 2, 3, 5]\n\n    // equal elements are merged into one\n    println(list1 union list2)\n    // [1, 2, 3, 5, 8, -1]\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Compilation Task (Groovy)\nDESCRIPTION: Shows how to set the language version to Kotlin 2.1 in a Gradle project using Groovy DSL. This is required to enable Java synthetic property references.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)\n    .configureEach {\n        compilerOptions.languageVersion\n            = org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dependsOn Relation in Kotlin Multiplatform\nDESCRIPTION: Example of setting up a dependsOn relation between iosArm64Main and commonMain source sets in a Kotlin Multiplatform project using Gradle DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-advanced-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // Targets declaration\n    sourceSets {\n        // Example of configuring the dependsOn relation \n        iosArm64Main.dependsOn(commonMain)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Usage of Java Interface\nDESCRIPTION: This Kotlin code demonstrates how the nullability of the Java interface `DataService` is correctly inferred in Kotlin, resulting in `ResultContainer<String?>`. This allows Kotlin to properly handle the potential nullability of the String.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nval dataService: DataService = ... \ndataService.fetchData() // -> ResultContainer<String?>\n```\n\n----------------------------------------\n\nTITLE: Specify Podspec path in Podfile - Ruby\nDESCRIPTION: This code snippet demonstrates how to specify the path to a Podspec file in your Podfile when your project has Git, HTTP, or custom Podspec repository dependencies. The `:path` attribute should contain the filepath to the Pod.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'ios-app' do\n   # ... other dependencies ...\n   pod 'podspecWithFilesExample', :path => 'cocoapods/externalSources/url/podspecWithFilesExample'\nend\n```\n\n----------------------------------------\n\nTITLE: Using cinterop to Create Library Wrappers\nDESCRIPTION: Shows how to generate Kotlin bindings for a C library using the cinterop tool, producing a .klib wrapper file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cinterop -def samples/gitchurn/src/nativeInterop/cinterop/libgit2.def -compiler-option -I/usr/local/include -o libgit2\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options at the compilation unit level (Groovy DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for the `compileKotlinJvm` task using the Groovy DSL.  This provides the most specific level of configuration, overriding any settings at the target or extension level. Requires Gradle Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_29\n\nLANGUAGE: groovy\nCODE:\n```\ntask.named<KotlinJvmCompile>(\"compileKotlinJvm\") {\n    compilerOptions {\n        allWarningsAsErrors = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Hexadecimal Strings with HexFormat in Kotlin\nDESCRIPTION: This code demonstrates how to format a hexadecimal string using the `HexFormat` class in Kotlin 1.9.0. It showcases customizing the format of hexadecimal byte arrays by setting properties such as `byteSeparator`, `bytesPerGroup`, and `groupSeparator` within the `HexFormat{}` builder. The snippet converts a hexadecimal string to a byte array and then back to a formatted hexadecimal string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval macAddress = \"001b638445e6\".hexToByteArray()\n\n// Use HexFormat{} builder to separate the hexadecimal string by colons\nprintln(macAddress.toHexString(HexFormat { bytes.byteSeparator = \":\" }))\n// \"00:1b:63:84:45:e6\"\n\n// Use HexFormat{} builder to:\n// * Make the hexadecimal string uppercase\n// * Group the bytes in pairs\n// * Separate by periods\nval threeGroupFormat = HexFormat { upperCase = true; bytes.bytesPerGroup = 2; bytes.groupSeparator = \".\" }\n\nprintln(macAddress.toHexString(threeGroupFormat))\n// \"001B.6384.45E6\"\n```\n\n----------------------------------------\n\nTITLE: Using Destructuring Declarations in Lambdas in Kotlin 1.1\nDESCRIPTION: Shows how to use destructuring declaration syntax to unpack the arguments passed to a lambda. The example demonstrates the before and after syntax when working with map entries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n//sampleStart\n    val map = mapOf(1 to \"one\", 2 to \"two\")\n    // before\n    println(map.mapValues { entry ->\n      val (key, value) = entry\n      \"$key -> $value!\"\n    })\n    // now\n    println(map.mapValues { (key, value) -> \"$key -> $value!\" })\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Different Visibility Levels of Expect/Actual Declarations - Kotlin\nDESCRIPTION: This code snippet demonstrates how Kotlin 2.0.0 supports different visibility levels for expected and actual declarations, where the actual declaration has a more permissive visibility than the expected declaration.  It illustrates the use of internal and public visibility levels for a class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect internal class Attribute // Visibility is internal\nactual class Attribute          // Visibility is public by default,\n                                // which is more permissive\n```\n\n----------------------------------------\n\nTITLE: Using asReversed for Efficient Reversal in Kotlin\nDESCRIPTION: Shows how to use asReversed() which returns a reversed view of the original collection instead of creating a new copy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val reversedNumbers = numbers.asReversed()\n    println(reversedNumbers)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static and Prototype Members for External Classes in JavaScript\nDESCRIPTION: Provides sample JavaScript showing class/constructor and member assignment styles: static members are assigned directly to the constructor, while instance methods go to the prototype. This context illustrates idiomatic JavaScript class construction relevant for bridging to Kotlin's type system.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyClass() { ... }\nMyClass.sharedMember = function() { /* implementation */ };\nMyClass.prototype.ownMember = function() { /* implementation */ };\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Unit Return Type in Kotlin\nDESCRIPTION: This example demonstrates how to define a function that does not return a useful value. In Kotlin, the return type for such functions is `Unit`. You can optionally omit the `return` keyword and the `Unit` return type declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun printMessage(message: String) {\n    println(message)\n    // `return Unit` or `return` is optional\n}\n\nfun main() {\n    printMessage(\"Hello\")\n    // Hello\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Debug-only Executable in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to declare an executable binary for the debug build type only in a Kotlin/Native project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries {\n    executable(listOf(DEBUG)) {\n        // Binary configuration.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Type Qualifier Default Annotations\nDESCRIPTION: This Java code defines custom annotations `@NonNullApi` and `@NullableApi` which serve as type qualifier defaults. `@NonNullApi` specifies that types are non-nullable by default in the annotated scope (methods and parameters).  `@NullableApi` makes types nullable by default within its scope (methods, parameters, and type uses).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n@Nonnull\n@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})\npublic @interface NonNullApi {\n}\n\n@Nonnull(when = When.MAYBE)\n@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE_USE})\npublic @interface NullableApi {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Instrumented Test Dependencies in Kotlin\nDESCRIPTION: Code snippet showing how to configure the dependency relationship between androidInstrumentedTest and commonTest source sets in build.gradle.kts. This restores the previous default behavior where common tests were available in Android instrumented tests.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-android-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n// ...\n    sourceSets {\n        val commonTest by getting\n        val androidInstrumentedTest by getting {\n            dependsOn(commonTest)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Definition File for Framework Interop\nDESCRIPTION: Example of a .def file that defines the interface between Kotlin and an Objective-C framework. It specifies the framework module name and the package name for the generated Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nmodules = MyFramework\npackage = MyFramework\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Language Version in Gradle (Groovy)\nDESCRIPTION: Gradle configuration using Groovy DSL to enable language version 1.9 for Kotlin compilation tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ntasks\n    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)\n    .configureEach {\n        compilerOptions.languageVersion =\n            org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling Yarn Downloads in Kotlin/JS Gradle Build\nDESCRIPTION: Configuration to disable automatic downloading of Yarn in Kotlin/JS projects using Gradle build scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().download = false // or true for default behavior\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).download = false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Library Dependencies for Source Sets in Kotlin Multiplatform - Groovy\nDESCRIPTION: This Groovy DSL snippet adds an implementation dependency ('com.example:my-library:1.0') to the 'commonMain' source set in a Kotlin Multiplatform project. Place it within the 'kotlin' configuration block of build.gradle for cross-platform dependency declaration. It uses standard Gradle syntax for adding dependencies to a particular source set.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_30\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation 'com.example:my-library:1.0'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a FileVisitor in Kotlin\nDESCRIPTION: Demonstrates how to explicitly create a FileVisitor with custom logic for visiting directories and files, then applying it to a project directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval cleanVisitor = fileVisitor {\n    onPreVisitDirectory { directory, attributes ->\n        // Some logic on visiting directories\n        FileVisitResult.CONTINUE\n    }\n\n    onVisitFile { file, attributes ->\n        // Some logic on visiting files\n        FileVisitResult.CONTINUE\n    }\n}\n\n// Some logic may go here\n\nprojectDirectory.visitFileTree(cleanVisitor)\n```\n\n----------------------------------------\n\nTITLE: KSP Processor Options\nDESCRIPTION: This shows how to define processor options in `build.gradle` files when using KSP. These options are accessible within the symbol processor through `SymbolProcessorEnvironment.options`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_16\n\nLANGUAGE: None\nCODE:\n```\nksp {\n    arg(\"option1\", \"value1\")\n    arg(\"option2\", \"value2\")\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Target with Kotlin Gradle DSL - Kotlin\nDESCRIPTION: This snippet demonstrates how to set the JVM target for Kotlin compilation using the generated JvmTarget enum in the Gradle DSL. It requires the Kotlin Gradle plugin and recognizes JvmTarget constants such as JVM_11. The key parameter is the desired target version, e.g., JvmTarget.JVM_11. No output is produced; the snippet is meant for build script configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compiler-options.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ncompilerOptions.jvmTarget.set(JvmTarget.JVM_11)\n```\n\n----------------------------------------\n\nTITLE: Using a Functional Interface Constructor Reference in Kotlin\nDESCRIPTION: This single-line snippet demonstrates passing a function reference to a SAM constructor to another function, typically for registration or collection. 'documentsStorage.addPrinter(::Printer)' uses the '::Printer' constructor reference, supported from Kotlin 1.6.20+ after migrating 'Printer' to a functional interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/fun-interfaces.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndocumentsStorage.addPrinter(::Printer)\n```\n\n----------------------------------------\n\nTITLE: Calling Member Functions with Dot Notation - Kotlin\nDESCRIPTION: Demonstrates calling a member function using the dot notation on an instantiated object. The 'Stream' class and 'read' method must exist in the current context. Shows how to access methods on a class instance in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nStream().read() // create instance of class Stream and call read()\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies in Shared Source Sets with Groovy DSL\nDESCRIPTION: Shows how to specify a dependency only once in a shared source set. This example adds the kotlinx-coroutines-core dependency to the commonMain source set using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_28\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Configuration for Multiple JVM Targets (Deprecated)\nDESCRIPTION: This snippet demonstrates the complex configuration required when using multiple JVM targets in a single Gradle project. It includes setting up Gradle attributes, creating custom source sets, and managing dependencies for different implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// shared/build.gradle.kts:\nkotlin {\n    jvm(\"jvmKtor\") {\n        attributes.attribute(/* ... */)\n    }\n    jvm(\"jvmOkHttp\") {\n        attributes.attribute(/* ... */)\n    }\n\n    sourceSets {\n        val commonMain by getting\n        val commonJvmMain by sourceSets.creating {\n            dependsOn(commonMain)\n            dependencies {\n                // Shared dependencies\n            }\n        }\n        val jvmKtorMain by getting {\n            dependsOn(commonJvmMain)\n            dependencies {\n                // Ktor dependencies\n            }\n        }\n        val jvmOkHttpMain by getting {\n            dependsOn(commonJvmMain)\n            dependencies {\n                // OkHttp dependencies\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unsigned Integer Literals in Kotlin\nDESCRIPTION: Demonstrates how to use the 'u' and 'U' suffixes to create unsigned integer literals with different types based on expected type or literal size.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/unsigned-integer-types.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval b: UByte = 1u  // UByte, expected type provided\nval s: UShort = 1u // UShort, expected type provided\nval l: ULong = 1u  // ULong, expected type provided\n\nval a1 = 42u // UInt: no expected type provided, constant fits in UInt\nval a2 = 0xFFFF_FFFF_FFFFu // ULong: no expected type provided, constant doesn't fit in UInt\n```\n\n----------------------------------------\n\nTITLE: Kotlin property reference\nDESCRIPTION: Shows how to access properties as first-class objects using the `::` operator. The example demonstrates reading the value and name of a property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval x = 1\n\nfun main() {\n    println(::x.get())\n    println(::x.name) \n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Derived Class with Undefined Nullability\nDESCRIPTION: This Kotlin code defines a `Derived` class that inherits from the `Base` class with type parameter `K`.  Because `K`'s nullability is undefined, inheriting from `Base<@NotNull T>` produces a warning.  `Base` expects a non-nullable type, and `K` does not guarantee that.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Derived<K> : Base<K> {} // warning: K has undefined nullability\n```\n\n----------------------------------------\n\nTITLE: Configuring JPA Plugin with Gradle (Kotlin DSL)\nDESCRIPTION: Shows how to apply the kotlin-jpa plugin (built on top of no-arg) in a Gradle build script using Kotlin DSL. This automatically handles JPA-specific annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.jpa\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Null Check with If Conditional Kotlin\nDESCRIPTION: Illustrates how to use an `if` conditional expression to check for nullability before accessing a property of a nullable variable.  If the variable is not `null`, the `length` property is accessed; otherwise, a default value of -1 is assigned.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/null-safety.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Assigns null to a nullable variable\n    val b: String? = null\n    // Checks for nullability first and then accesses length\n    val l = if (b != null) b.length else -1\n    print(l)\n    // -1\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Kotlin Data Class with Default Values for JVM Parameterless Constructor\nDESCRIPTION: Shows how to specify default values for properties in a data class's primary constructor. This allows the JVM to generate a parameterless constructor, which is often required by libraries and frameworks such as JPA or Jackson for object instantiation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String = \"\", val age: Int = 0)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Generic Class with Type Inference in Kotlin\nDESCRIPTION: Shows how Kotlin's type inference allows omitting explicit type arguments when creating an instance of `Box`. The compiler infers `T` as `Int` from the constructor argument `1`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval box = Box(1) // 1 has type Int, so the compiler figures out that it is Box<Int>\n```\n\n----------------------------------------\n\nTITLE: Hex String Conversion in Kotlin\nDESCRIPTION: This code snippet shows how to convert a numeric value to its hexadecimal string representation using the `toHexString()` extension function, a feature introduced with the experimental `HexFormat` class in Kotlin 1.9.0. It demonstrates the basic conversion of an integer to a hexadecimal string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(93.toHexString()) // \"0000005d\"\n```\n\n----------------------------------------\n\nTITLE: Add JDBC Dependency in Kotlin Notebook\nDESCRIPTION: This snippet demonstrates how to add a JDBC dependency in a Kotlin Notebook using the `USE` block. It's essential for connecting to SQL databases like MariaDB. The `$version` placeholder should be replaced with the actual JDBC driver version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nUSE {\n   dependencies(\"org.mariadb.jdbc:mariadb-java-client:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Building Lazy Sequences with Coroutines in Kotlin\nDESCRIPTION: Shows how to create lazily generated sequences using coroutines with the yield and yieldAll functions. The sequence generates squares of numbers 1-5 followed by a range of numbers 26-28.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.coroutines.experimental.*\n\nfun main(args: Array<String>) {\n    val seq = buildSequence {\n      for (i in 1..5) {\n          // yield a square of i\n          yield(i * i)\n      }\n      // yield a range\n      yieldAll(26..28)\n    }\n\n    // print the sequence\n    println(seq.toList())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/JS Node.js target in Kotlin\nDESCRIPTION: This snippet showcases the configuration of a Kotlin/JS Node.js target within the `kotlin {}` block using the Kotlin DSL. It includes configuration for the `runTask` and `testRuns` blocks.  These blocks are placeholders for more detailed configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    js().nodejs {\n        runTask { /* ... */ }\n        testRuns { /* ... */ }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Daemon JVM Args in Kotlin Extension (Kotlin)\nDESCRIPTION: This snippet demonstrates how to specify JVM arguments for the Kotlin daemon using the `kotlin` extension in a Kotlin DSL Gradle build script. It sets the maximum heap size, initial heap size, and enables parallel garbage collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    kotlinDaemonJvmArgs = listOf(\"-Xmx486m\", \"-Xms256m\", \"-XX:+UseParallelGC\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Podspec repository source - Ruby\nDESCRIPTION: This code snippet shows how to specify the location of the specs repository at the beginning of your Podfile. This is required when adding a library from a custom Podspec repository. The `source` specifies the URL of the repository.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://github.com/Kotlin/kotlin-cocoapods-spec.git'\n\ntarget 'kotlin-cocoapods-xcproj' do\n    # ... other dependencies ...\n    pod 'example'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Symbols in Kotlin/Native with Groovy DSL\nDESCRIPTION: Sets the -Xadd-light-debug compiler flag to enable or disable .dSYM generation for Kotlin/Native targets using Groovy DSL. This controls whether debug symbols are generated for release binaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-ios-symbolication.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {\n        binaries.all {\n            freeCompilerArgs += \"-Xadd-light-debug={enable|disable}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Dynamic Calls in Kotlin\nDESCRIPTION: Illustrates how dynamic calls can be chained together in Kotlin, providing flexibility in linking multiple dynamic type operations. This snippet exemplifies the return of dynamic types for chained calls and the permissibility of freely combining operations without involving Kotlin's operator conventions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/dynamic-type.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndyn.foo().bar.baz()\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Functions in Kotlin\nDESCRIPTION: This code demonstrates how to define generic functions in Kotlin. These functions can take parameters of any type, specified with angle brackets. There are no specific dependencies apart from a basic understanding of Kotlin's generics syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> singletonList(item: T): List<T> { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Referencing Kotlin/Wasm Target in Compiler Subsection\nDESCRIPTION: Code snippet showing the Kotlin/Wasm target identifier used in the compiler development roadmap. This is referenced in the context of promoting the wasm-js target to Beta status.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/roadmap.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwasm-js\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Kotlin Scripting Host (Groovy)\nDESCRIPTION: Gradle dependency configuration for Kotlin scripting host implementation using Groovy DSL, including core scripting components and script definition module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-common'\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm'\n    implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm-host'\n    implementation project(':script-definition') // the script definition module\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path API in Kotlin\nDESCRIPTION: Stable Path API providing extensions for java.nio.file.Path with directory operations and path construction.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// construct path with the div (/) operator\nval baseDir = Path(\"/base\")\nval subDir = baseDir / \"subdirectory\"\n\n// list files in a directory\nval kotlinFiles: List<Path> = Path(\"/home/user\").listDirectoryEntries(\"*.kt\")\n```\n\n----------------------------------------\n\nTITLE: Configuration Names for Test Source Set Dependencies in Kotlin Multiplatform\nDESCRIPTION: Configuration naming pattern for dependencies on the jvmTest source set, which remains unchanged after the breaking change.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\njvmTest<Scope>\n```\n\n----------------------------------------\n\nTITLE: Enabling Incremental Native Compilation in Gradle\nDESCRIPTION: This snippet shows how to enable incremental compilation for Kotlin/Native by adding a property to the `gradle.properties` file. This optimization recompiles only the parts of the klib that have changed, reducing overall compilation time in debug mode.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nkotlin.incremental.native=true\n```\n\n----------------------------------------\n\nTITLE: Suppressing Unchecked Cast Warnings in Kotlin\nDESCRIPTION: Shows how to safely suppress unchecked cast warnings in Kotlin using the @Suppress annotation. Useful when you know the cast is safe but the compiler cannot verify it.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <reified T> List<*>.asListOfType(): List<T>? =\n    if (all { it is T })\n        @Suppress(\"UNCHECKED_CAST\")\n        this as List<T> else\n        null\n```\n\n----------------------------------------\n\nTITLE: Configure KaptGenerateStubs task in Gradle Kotlin DSL\nDESCRIPTION: This code snippet demonstrates how to configure the `KaptGenerateStubs` task in a Gradle `build.gradle.kts` file when a custom configuration is applied to `KotlinJvmCompile`. This ensures that modifications to the compilation task are also applied to the stub generation task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<KaptGenerateStubs>(\"kaptGenerateStubs\") { // Your custom configuration }\n```\n\n----------------------------------------\n\nTITLE: Using ifEmpty Function in Kotlin\nDESCRIPTION: Shows how to use the new ifEmpty function, which allows specifying a fallback value for empty collections or sequences.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    fun printAllUppercase(data: List<String>) {\n        val result = data\n        .filter { it.all { c -> c.isUpperCase() } }\n            .ifEmpty { listOf(\"<no uppercase>\") }\n        result.forEach { println(it) }\n    }\n    \n    printAllUppercase(listOf(\"foo\", \"Bar\"))\n    printAllUppercase(listOf(\"FOO\", \"BAR\"))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using explicit labels with lambda returns in Kotlin\nDESCRIPTION: Demonstrates returning from a lambda expression using an explicit label. This example shows a local return from a forEach lambda that only exits the lambda function, not the outer function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach lit@{\n        if (it == 3) return@lit // local return to the caller of the lambda - the forEach loop\n        print(it)\n    }\n    print(\" done with explicit label\")\n}\n\nfun main() {\n    foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing ArithmeticException and Printing Stack Trace\nDESCRIPTION: This code throws an ArithmeticException with a custom message. When executed in a JVM environment, it will automatically print the stack trace to the console, showcasing the sequence of function calls leading to the exception.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart    \n    throw ArithmeticException(\"This is an arithmetic exception!\")\n//sampleEnd    \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Constraints on Kotlin Standard Library Dependencies in Kotlin Build Script\nDESCRIPTION: Configuration to explicitly require specific versions of kotlin-stdlib-jdk7 and kotlin-stdlib-jdk8 to resolve version conflicts with transitive dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    constraints {\n        add(\"implementation\", \"org.jetbrains.kotlin:kotlin-stdlib-jdk7\") {\n            version {\n                require(\"%kotlinVersion%\")\n            }\n        }\n        add(\"implementation\", \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\") {\n            version {\n                require(\"%kotlinVersion%\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Example\nDESCRIPTION: Defines a JavaScript class named 'Rectangle' with a constructor that takes height and width as arguments, and a method 'area' that calculates the area of the rectangle. This example is used to illustrate how to represent JavaScript classes as external classes in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Rectangle {\n    constructor (height, width) {\n        this.height = height;\n        this.width = width;\n    }\n\n    area () {\n        return this.height * this.width;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP client using libcurl in Kotlin/Native\nDESCRIPTION: Kotlin code demonstrating the use of libcurl to create a simple HTTP client that makes a GET request to example.com.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-app-with-c-and-libcurl.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.cinterop.*\nimport libcurl.*\n\n@OptIn(ExperimentalForeignApi::class)\nfun main(args: Array<String>) {\n    val curl = curl_easy_init()\n    if (curl != null) {\n        curl_easy_setopt(curl, CURLOPT_URL, \"https://example.com\")\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L)\n        val res = curl_easy_perform(curl)\n        if (res != CURLE_OK) {\n            println(\"curl_easy_perform() failed ${curl_easy_strerror(res)?.toKString()}\")\n        }\n        curl_easy_cleanup(curl)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression Exercise 2 in Kotlin\nDESCRIPTION: This exercise involves writing a function `repeatN` that takes an integer `n` and an action (a lambda expression or function with type `() -> Unit`).  The function should repeat the provided action `n` times. The provided example uses this to print \"Hello\" 5 times.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nfun repeatN(n: Int, action: () -> Unit) {\n    // Write your code here\n}\n\nfun main() {\n    // Write your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options at the extension level (Kotlin DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for all targets in the project using the Kotlin DSL. This setting applies as a default to all compilations unless overridden at a lower level. Requires Gradle Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // Configures all compilations of all targets\n    compilerOptions {\n        allWarningsAsErrors.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Value Classes for Type-Safe Values in Kotlin\nDESCRIPTION: This snippet shows how to use inline value classes in Kotlin to create type-safe values.  This helps prevent accidental mixing of different types with the same underlying representation, triggering a compilation error if misused.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class EmployeeId(private val id: String)\n\n@JvmInline\nvalue class CustomerId(private val id: String)\n```\n\n----------------------------------------\n\nTITLE: Fixing Builder Inference Error with Multiple Lambdas in Kotlin\nDESCRIPTION: Shows how to resolve a builder inference error when using multiple lambda blocks. The fix involves explicitly specifying the type argument and ensuring type consistency across lambdas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    buildList<Int>(\n        first = { // this: MutableList<Int>\n            add(0)\n        },\n        second = { // this: MutableList<Int>\n            val i: Int = get(0)\n            println(i)\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving @Metadata Annotation from a Compiled Kotlin Class\nDESCRIPTION: This Kotlin snippet demonstrates how to retrieve the @Metadata annotation from a compiled Kotlin class using reflection. It checks if the class has metadata, indicating it's a Kotlin class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Specifies the fully qualified name of the class\n    val clazz = Class.forName(\"org.example.SampleClass\")\n\n    // Retrieves the @Metadata annotation\n    val metadata = clazz.getAnnotation(Metadata::class.java)\n\n    // Checks if the metadata is present\n    if (metadata != null) {\n        println(\"This is a Kotlin class with metadata.\")\n    } else {\n        println(\"This is not a Kotlin class.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using let() for Chained Operations in Kotlin\nDESCRIPTION: This snippet demonstrates how to use let() to perform operations on the result of chained calls. It maps a list of strings to their lengths, filters lengths greater than 3, and prints the result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    numbers.map { it.length }.filter { it > 3 }.let { \n        println(it)\n        // and more function calls if needed\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings after Last Character using substringAfterLast in Kotlin\nDESCRIPTION: Demonstrates the `substringAfterLast` function in Kotlin, which extracts the portion of a string that follows the *last* occurrence of the specified delimiter (',' in this case).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    // Kotlin\n    val input = \"To be, or not to be, that is the question.\"\n    val question = input.substringAfterLast(\",\")\n    println(question)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Specify framework name in Kotlin - Kotlin\nDESCRIPTION: This code snippet shows how to explicitly specify the framework name in Kotlin when the framework name inside the module doesn't match the Pod name. This helps resolve 'Module not found' errors. The `moduleName` parameter sets the correct module name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\npod(\"SDWebImage/MapKit\") {\n    moduleName = \"SDWebImageMapKit\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Support for Individual Webpack Tasks\nDESCRIPTION: Separate CSS support configuration for webpack, run, and test tasks in Kotlin/JS projects. Allows fine-grained control over CSS processing for different build phases.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nbrowser {\n    webpackTask {\n        cssSupport {\n            enabled.set(true)\n        }\n    }\n    runTask {\n        cssSupport {\n            enabled.set(true)\n        }\n    }\n    testTask {\n        useKarma {\n            // ...\n            webpackConfig.cssSupport {\n                enabled.set(true)\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nbrowser {\n    webpackTask {\n        cssSupport {\n            it.enabled = true\n        }\n    }\n    runTask {\n        cssSupport {\n            it.enabled = true\n        }\n    }\n    testTask {\n        useKarma {\n            // ...\n            webpackConfig.cssSupport {\n                it.enabled = true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Looping with until infix function in Kotlin\nDESCRIPTION: This snippet demonstrates the usage of the `until` infix function to create an open-ended range, iterating from 2 up to (but not including) 10. It prints even numbers within this range.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (number in 2 until 10) {\n        if (number % 2 == 0) {\n            print(\"$number \")\n        }\n    }\n    // 2 4 6 8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Function in Kotlin\nDESCRIPTION: This code demonstrates the basic syntax for defining and calling a function in Kotlin. It includes the use of the `fun` keyword, parameter lists, and the `return` statement. The example shows a function that prints \"Hello, world!\" to the console.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun hello() {\n    return println(\"Hello, world!\")\n}\n\nfun main() {\n    hello()\n    // Hello, world!\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Generic Reflection-Based Parent Finder in Kotlin\nDESCRIPTION: Shows how to call a generic type-based parent finder by passing an explicit class reference, relying on Java reflection. This approach is needed when working with non-inlined or non-reified type parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ntreeNode.findParentOfType(MyTreeNode::class.java)\n```\n\n----------------------------------------\n\nTITLE: Copying Collections in Kotlin with Reference Behavior\nDESCRIPTION: Illustrates shallow copying of collections where changes to elements affect all copies, while adding/removing elements only affects the original collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(var name: String)\nfun main() {\n//sampleStart\n    val alice = Person(\"Alice\")\n    val sourceList = mutableListOf(alice, Person(\"Bob\"))\n    val copyList = sourceList.toList()\n    sourceList.add(Person(\"Charles\"))\n    alice.name = \"Alicia\"\n    println(\"First item's name is: ${sourceList[0].name} in source and ${copyList[0].name} in copy\")\n    println(\"List size is: ${sourceList.size} in source and ${copyList.size} in copy\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Companion Object Interface Kotlin\nDESCRIPTION: Shows how a companion object can implement an interface. The companion object of the `User` class implements the `Factory` interface and provides an implementation for the `create` method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Factory<T> {\n    fun create(name: String): T\n}\n\nclass User(val name: String) {\n    // Defines a companion object that implements the Factory interface\n    companion object : Factory<User> {\n        override fun create(name: String): User = User(name)\n    }\n}\n\nfun main() {\n    // Uses the companion object as a Factory\n    val userFactory: Factory<User> = User\n    val newUser = userFactory.create(\"Example User\")\n    println(newUser.name)\n    // Example User\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiplatform Random in Kotlin\nDESCRIPTION: Demonstrates the usage of the new kotlin.random.Random class, which provides a uniform way to generate random numbers across all platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\nfun main() {\n//sampleStart\n    val number = Random.nextInt(42)  // number is in range [0, limit)\n    println(number)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Make boolean properties nullable - Kotlin\nDESCRIPTION: Shows how to make boolean properties in external interfaces nullable (`Boolean?`). This prevents errors when calling `toString` on a boolean that may be `null` or `undefined` when interfacing with JavaScript code that doesn't guarantee the value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Replace this\nexternal interface SomeExternal {\n    var visible: Boolean\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n// With this\nexternal interface SomeExternal {\n    var visible: Boolean?\n}\n```\n\n----------------------------------------\n\nTITLE: Target-Specific Compiler Options in Kotlin Native C Interop\nDESCRIPTION: This snippet demonstrates how to specify target-specific compiler options using platform-specific suffixes. These options apply only to a certain target during the header analysis phase.  It utilizes `compilerOpts` with suffixes like `.linux_x64` or `.macos_x64`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\ncompilerOpts = -DBAR=bar\ncompilerOpts.linux_x64 = -DFOO=foo1\ncompilerOpts.macos_x64 = -DFOO=foo2\n```\n\n----------------------------------------\n\nTITLE: Suspend Conversion on Callable References\nDESCRIPTION: Example showing how Kotlin 1.4.0 supports suspend conversion on callable references, allowing regular function references to be used where suspend functions are expected.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun call() {}\nfun takeSuspend(f: suspend () -> Unit) {}\n\nfun test() {\n    takeSuspend { call() } // OK before 1.4\n    takeSuspend(::call) // In Kotlin 1.4, it also works\n}\n```\n\n----------------------------------------\n\nTITLE: TimeUnit Conversion Between Java and Kotlin\nDESCRIPTION: Demonstrates the stable TimeUnit conversion functions for Java-Kotlin interoperability using toTimeUnit() and toDurationUnit().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\n\n// For use from Java\nfun wait(timeout: Long, unit: TimeUnit) {\n    val duration: Duration = timeout.toDuration(unit.toDurationUnit())\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Concurrent Sweep Phase in Kotlin/Native Memory Manager\nDESCRIPTION: Demonstrates how to enable the concurrent implementation for the sweep phase in the new Kotlin/Native memory manager using a compiler option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-Xgc=cms\n```\n\n----------------------------------------\n\nTITLE: Adding Local Pod Library Dependency in Kotlin Gradle Build File\nDESCRIPTION: Configures a Kotlin project with dependencies on locally stored Pod libraries using the path() function for source specification. The example shows dependencies on regular Pods and subspecs alongside a repository Pod.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n\n        pod(\"pod_dependency\") {\n            version = \"1.0\"\n            extraOpts += listOf(\"-compiler-option\")\n            source = path(project.file(\"../pod_dependency\"))\n        }\n        pod(\"subspec_dependency/Core\") {\n            version = \"1.0\"\n            extraOpts += listOf(\"-compiler-option\")\n            source = path(project.file(\"../subspec_dependency\"))\n        }\n        pod(\"SDWebImage\") {\n            version = \"5.20.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Property Accessor Names with @JvmName\nDESCRIPTION: Demonstrates how to use @get:JvmName and @set:JvmName annotations to customize the names of generated accessor methods for Kotlin properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n@get:JvmName(\"x\")\n@set:JvmName(\"changeX\")\nvar x: Int = 23\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Flavor Source Sets in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the new invokeWhenCreated() API to configure Android flavor source sets in the new Android source set layout using Gradle KTS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    sourceSets.invokeWhenCreated(\"androidFreeDebug\") {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Helper Functions using readLine()!! in Earlier Kotlin\nDESCRIPTION: Demonstrates defining private helper functions `readStr` and `readInt` for competitive programming using Kotlin versions prior to 1.6.0. These utilize `readLine()!!` to read input, incorporating the not-null assertion. Using `private` prevents declaration conflicts in projects with multiple solution files based on the same template.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun readStr() = readLine()!! // string line\nprivate fun readInt() = readStr().toInt() // single int\n// similar for other types you'd use in your solutions\n```\n\n----------------------------------------\n\nTITLE: Declaring NPM Dependency with Version Range in Kotlin DSL\nDESCRIPTION: Illustrates how to declare an npm dependency (`react`) using the `npm()` function within the `dependencies {}` block in Kotlin DSL. This example specifies a version range using npm's semver syntax ('> 14.0.0 <=16.9.0').\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(npm(\"react\", \"> 14.0.0 <=16.9.0\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Compiler Arguments with compilerarg Element in kotlinc - XML\nDESCRIPTION: This Ant snippet demonstrates how to provide raw compiler arguments to the kotlinc task using <compilerarg> elements. Each argument can be supplied as a value or as a line with multiple flags. This feature enables fine-grained control over the Kotlin compilation process. The sample expects source/output properties to be defined and assumes the kotlinc task is registered via kotlin-ant.jar.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<kotlinc src=\\\"${test.data}/hello.kt\\\" output=\\\"${temp}/hello.jar\\\">\\n    <compilerarg value=\\\"-Xno-inline\\\"/>\\n    <compilerarg line=\\\"-Xno-call-assertions -Xno-param-assertions\\\"/>\\n    <compilerarg value=\\\"-Xno-optimize\\\"/>\\n</kotlinc>\n```\n\n----------------------------------------\n\nTITLE: Using Noinline Modifier for Lambda Parameters in Kotlin\nDESCRIPTION: Demonstrates usage of 'inline' and 'noinline' modifiers for lambda parameters within an inline function. Lambdas marked as 'noinline' are not inlined and can be stored or passed elsewhere, whereas inlined lambdas must be called directly or passed as inlinable arguments. No concrete implementation is provided, but illustrates function signature and modifier purpose.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) { ... }\n```\n\n----------------------------------------\n\nTITLE: Swift Nullability Equivalent\nDESCRIPTION: This Swift code snippet shows how the Kotlin code above translates, where the generic type `T` is implicitly treated as optional (`T?`) in Swift.  This reflects the nullable-by-default nature of generic types in this context.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nclass Sample<T>() {\n    fun myVal(): T?\n}\n```\n\n----------------------------------------\n\nTITLE: Expected and Actual Objects Implementation\nDESCRIPTION: Demonstrates how to implement expected and actual objects for singleton pattern across platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect object IdentityBuilder {\n    fun build(): Identity\n}\n\nclass Identity(\n    val userName: String,\n    val processID: Long\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual object IdentityBuilder {\n    actual fun build() = Identity(\n        System.getProperty(\"user.name\") ?: \"none\",\n        ProcessHandle.current().pid()\n    )\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nactual object IdentityBuilder {\n    actual fun build() = Identity(\n        getlogin()?.toKString() ?: \"None\",\n        getpid().toLong()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting KDoc Comments - Groovy\nDESCRIPTION: This snippet shows how to enable the export of KDoc comments to generated Objective-C headers by adding the `-Xexport-kdoc` compiler option to the `build.gradle` file when using Groovy. This makes the Kotlin documentation visible from Objective-C and Swift. The feature is experimental and requires opt-in.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nkotlin {\n    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {\n        compilations.get(\"main\").compilerOptions.options.freeCompilerArgs.add(\"-Xexport-kdoc\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching at Specific Positions\nDESCRIPTION: Shows usage of matchesAt() and matchAt() functions for checking regular expression matches at particular string positions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val releaseText = \"Kotlin 1.7.0 is on its way!\"\n    val versionRegex = \"\\\\d[.]\\\\d[.]\\\\d+\".toRegex()\n\n    println(versionRegex.matchesAt(releaseText, 0)) // \"false\"\n    println(versionRegex.matchesAt(releaseText, 7)) // \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking fold with Lambdas and Function References in Kotlin\nDESCRIPTION: Demonstrates several invocations of the fold function: using an inline lambda with parameters, using type inference for parameter types, and passing a member function reference. Shows accumulation of values and string concatenation, as well as multiplication using Int::times. Requires a collection of elements and basic understanding of lambda expressions and function references. The inputs are lists of integers and lambdas, and the output is accumulated results printed to standard output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val items = listOf(1, 2, 3, 4, 5)\n    \n    // Lambdas are code blocks enclosed in curly braces.\n    items.fold(0, { \n        // When a lambda has parameters, they go first, followed by '->'\n        acc: Int, i: Int -> \n        print(\"acc = $acc, i = $i, \") \n        val result = acc + i\n        println(\"result = $result\")\n        // The last expression in a lambda is considered the return value:\n        result\n    })\n    \n    // Parameter types in a lambda are optional if they can be inferred:\n    val joinedToString = items.fold(\"Elements:\", { acc, i -> acc + \" \" + i })\n    \n    // Function references can also be used for higher-order function calls:\n    val product = items.fold(1, Int::times)\n    //sampleEnd\n    println(\"joinedToString = $joinedToString\")\n    println(\"product = $product\")\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Type Declaration Kotlin\nDESCRIPTION: This snippet demonstrates the explicit declaration of a Kotlin type for a function returning a platform type (e.g., from Java). This is necessary to avoid unexpected behavior when dealing with nullability and other platform-specific characteristics.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_66\n\nLANGUAGE: kotlin\nCODE:\n```\nfun apiCall(): String = MyJavaApi.getProperty(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Default Property Values\nDESCRIPTION: This snippet demonstrates how to define properties with default values directly in the class definition. It shows a class `Contact` with a default email and category.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Contact(val id: Int, var email: String = \"example@gmail.com\") {\n    val category: String = \"work\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Intermediate Accumulator Values with runningReduce and runningFold - Kotlin\nDESCRIPTION: This snippet shows how runningReduce and runningFold can be used to produce lists of all intermediate accumulator states rather than just the final result. A list of integers is processed: runningReduce accumulates the sum stepwise, while runningFold starts with an initial value. The code maps the results to readable descriptions. The only dependency is the Kotlin Standard Library (runningFold and runningReduce require 1.4 or newer). The result is printed as formatted multi-line strings for each step.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-aggregate.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = listOf(0, 1, 2, 3, 4, 5)\n    val runningReduceSum = numbers.runningReduce { sum, item -> sum + item }\n    val runningFoldSum = numbers.runningFold(10) { sum, item -> sum + item }\n//sampleEnd\n    val transform = { index: Int, element: Int -> \"N = ${index + 1}: $element\" }\n    println(runningReduceSum.mapIndexed(transform).joinToString(\"\\n\", \"Sum of first N elements with runningReduce:\\n\"))\n    println(runningFoldSum.mapIndexed(transform).joinToString(\"\\n\", \"Sum of first N elements with runningFold:\\n\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Type Casting in Java\nDESCRIPTION: Shows the Java approach to safe type casting using the instanceof operator and conditional checks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// Java\nint getStringLength(Object y) {\n    return y instanceof String x ? x.length() : -1;\n}\n\nvoid main() {\n    System.out.println(getStringLength(1)); // Prints `-1`\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Wasm target configuration\nDESCRIPTION: This snippet demonstrates how to configure the `wasmWasi` and `wasmJs` targets in the `build.gradle.kts` file.  The `wasm` target has been deprecated in favor of `wasmJs`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    wasmWasi {\n        // ...\n    }\n    wasmJs {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with DOM using Kotlin/JS\nDESCRIPTION: This snippet demonstrates changing the background color of a webpage using the `document` object from the Kotlin/JS standard library. Dependencies include having a webpage where this script runs, and the primary input is the document object. The snippet sets the `bgColor` property directly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/browser-api-dom.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndocument.bgColor = \"FFAA12\" \n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Kotlin Source Directory for JavaScript Target - Kotlin\nDESCRIPTION: This snippet modifies the main source set in a multiplatform Kotlin project to use 'src/main/myKotlin' as the source directory for Kotlin files. This is useful when organizing mixed Java/Kotlin projects for JavaScript and ensures the plugin processes the correct Kotlin files. Place this within the kotlin block of your build.gradle.kts for custom source directory configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets[\"main\"].apply {\n        kotlin.srcDir(\"src/main/myKotlin\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unlabeled break and continue in when Expressions (Kotlin 1.4+)\nDESCRIPTION: Example showing how Kotlin 1.4.0 allows using unlabeled break and continue inside when expressions in loops, making the code cleaner and more intuitive.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun test(xs: List<Int>) {\n    for (x in xs) {\n        when (x) {\n            2 -> continue\n            17 -> break\n            else -> println(x)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inline Classes with Various Syntax Options\nDESCRIPTION: Shows different ways to declare inline classes in Kotlin, including using the inline modifier, value modifier, and the @JvmInline annotation for JVM backends. The inline and value modifiers are equivalent.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninline class Name(private val s: String)\n\nvalue class Name(private val s: String)\n\n// For JVM backends\n@JvmInline\nvalue class Name(private val s: String)\n```\n\n----------------------------------------\n\nTITLE: Combining Sealed Classes with Enum Classes in Kotlin\nDESCRIPTION: Demonstrates how to use enum classes within sealed classes to provide additional state information. The example uses ErrorSeverity enum to indicate the severity level of different error types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class ErrorSeverity { MINOR, MAJOR, CRITICAL }\n\nsealed class Error(val severity: ErrorSeverity) {\n    class FileReadError(val file: File): Error(ErrorSeverity.MAJOR)\n    class DatabaseError(val source: DataSource): Error(ErrorSeverity.CRITICAL)\n    object RuntimeError : Error(ErrorSeverity.CRITICAL)\n    // Additional error types can be added here\n}\n```\n\n----------------------------------------\n\nTITLE: Suppress Experimental Plugin Warnings (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to suppress warnings related to the experimental status of the Power-assert plugin in a Kotlin build.gradle.kts file. It uses the `@OptIn` annotation with `ExperimentalKotlinGradlePluginApi` before declaring the `powerAssert {}` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi\n\n@OptIn(ExperimentalKotlinGradlePluginApi::class)\npowerAssert {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotlin/JS IR Compiler in Gradle (Groovy)\nDESCRIPTION: This snippet demonstrates how to enable the Kotlin/JS IR compiler in a Gradle build script using Groovy. It shows the different compiler options available (IR, LEGACY, BOTH) and how to configure them within the `js` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nkotlin {\n    js(IR) { // or: LEGACY, BOTH\n        // ...\n        binaries.executable() // not applicable to BOTH, see details below\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Functions with Inline Classes from Java Using @JvmName\nDESCRIPTION: Shows how to use the @JvmName annotation to make functions that accept inline classes callable from Java code by preventing name mangling. This allows for better Java interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ninline class UInt(val x: Int)\n\nfun compute(x: Int) { }\n\n@JvmName(\"computeUInt\")\nfun compute(x: UInt) { }\n```\n\n----------------------------------------\n\nTITLE: Restricting Mutability with Collection References in Kotlin\nDESCRIPTION: Shows how to create an immutable reference to a mutable collection, preventing modification through that reference while still reflecting updates from the original reference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart \n    val sourceList = mutableListOf(1, 2, 3)\n    val referenceList: List<Int> = sourceList\n    //referenceList.add(4)            //compilation error\n    sourceList.add(4)\n    println(referenceList) // shows the current state of sourceList\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Number of Arguments in Function Declaration (vararg) - Kotlin\nDESCRIPTION: Defines a generic function that takes a variable number of arguments using the 'vararg' keyword. Demonstrates how these arguments are accessible as an array inside the function and processed in a loop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> asList(vararg ts: T): List<T> {\n    val result = ArrayList<T>()\n    for (t in ts) // ts is an Array\n        result.add(t)\n    return result\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying JDK Home with UsesKotlinJavaToolchain in Kotlin DSL\nDESCRIPTION: Sets the JDK home for all Kotlin tasks that implement the UsesKotlinJavaToolchain interface. This approach should be used for Gradle versions 6.1 to 6.6.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nproject.tasks\n    .withType<UsesKotlinJavaToolchain>()\n    .configureEach {\n        it.kotlinJavaToolchain.jdk.use(\n            \"/path/to/local/jdk\",\n            JavaVersion.<LOCAL_JDK_VERSION>\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Good and Bad Collection Initialization in Kotlin\nDESCRIPTION: This example demonstrates how to correctly use immutable collection types and factory functions in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_54\n\nLANGUAGE: kotlin\nCODE:\n```\n// Bad: use of a mutable collection type for value which will not be mutated\nfun validateValue(actualValue: String, allowedValues: HashSet<String>) { ... }\n\n// Good: immutable collection type used instead\nfun validateValue(actualValue: String, allowedValues: Set<String>) { ... }\n\n// Bad: arrayListOf() returns ArrayList<T>, which is a mutable collection type\nval allowedValues = arrayListOf(\"a\", \"b\", \"c\")\n\n// Good: listOf() returns List<T>\nval allowedValues = listOf(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Definitely Non-nullable Types Example\nDESCRIPTION: Example demonstrating the use of definitely non-nullable types with the new T & Any syntax for better generic type safety.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> elvisLike(x: T, y: T & Any): T & Any = x ?: y\n\nfun main() {\n    // OK\n    elvisLike<String>(\"\", \"\").length\n    // Error: 'null' cannot be a value of a non-null type\n    elvisLike<String>(\"\", null).length\n\n    // OK\n    elvisLike<String?>(null, \"\").length\n    // Error: 'null' cannot be a value of a non-null type\n    elvisLike<String?>(null, null).length\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Processor File Generation Statistics - Kotlin\nDESCRIPTION: Shows how to configure the kapt Gradle plugin to report the number of files generated by annotation processors by setting `showProcessorStats = true` in the kapt block of a Kotlin build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nkapt {\n    showProcessorStats = true\n}\n```\n\n----------------------------------------\n\nTITLE: Forward Declaration Usage in Objective-C First Library\nDESCRIPTION: An Objective-C library that uses a forward-declared protocol. This library has a function that consumes an object conforming to the forward-declared protocol.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_15\n\nLANGUAGE: objc\nCODE:\n```\n// First objcinterop library\n#import <Foundation/Foundation.h>\n\n@protocol ForwardDeclaredProtocol;\n\nNSString* consumeProtocol(id<ForwardDeclaredProtocol> s) {\n    return [NSString stringWithUTF8String:\"Protocol\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function with JavaScript Block\nDESCRIPTION: Defines a Kotlin function 'setLocalSettings' that uses the `js()` function to execute a block of JavaScript statements that stores a value in the browser's local storage. The JavaScript code is enclosed in curly brackets within the string literal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun setLocalSettings(value: String): Unit = js(\n    \"\"\"{\n        localStorage.setItem('settings', value);\n}\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform in Gradle (Groovy)\nDESCRIPTION: This snippet configures the Gradle `test` task in a Groovy-based `build.gradle` file to use the JUnit Platform. This enables JUnit 5 support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KSP in Kotlin Multiplatform Build Script (Gradle Kotlin DSL)\nDESCRIPTION: This Kotlin code block demonstrates how to configure the Kotlin Multiplatform Gradle plugin with KSP (Kotlin Symbol Processing) for multiple build targets, including JVM and LinuxX64. It shows plugin applications and per-target KSP dependency declarations using Gradle's add() function, enabling symbol processing for common and JVM source sets by referencing the test-processor project. Key dependencies: Gradle with Kotlin DSL, kotlin-multiplatform plugin, com.google.devtools.ksp plugin, and access to the test-processor project. Inputs include target names (like kspCommonMainMetadata, kspJvm) and processor project references. Outputs are generated code via KSP for the specified targets. The Linux x64 main source set is intentionally skipped to illustrate per-target control. Limitations include the lack of processing for targets not explicitly specified and non-standard source set configurations requiring custom handling.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-multiplatform.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\")\n    id(\"com.google.devtools.ksp\")\n}\n\nkotlin {\n    jvm()\n    linuxX64 {\n        binaries {\n            executable()\n        }\n    }\n}\n\ndependencies {\n    add(\"kspCommonMainMetadata\", project(\":test-processor\"))\n    add(\"kspJvm\", project(\":test-processor\"))\n    add(\"kspJvmTest\", project(\":test-processor\")) // Not doing anything because there's no test source set for JVM\n    // There is no processing for the Linux x64 main source set, because kspLinuxX64 isn't specified\n    // add(\"kspLinuxX64Test\", project(\":test-processor\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke Lambda Separately Kotlin\nDESCRIPTION: This snippet demonstrates invoking a lambda expression directly by adding parentheses after the curly braces and providing the necessary parameters. The example calls a lambda that converts a string to uppercase and prints the result.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    println({ text: String -> text.uppercase() }(\"hello\"))\n    // HELLO\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Coroutines Dependency in Kotlin/JS Project\nDESCRIPTION: This snippet shows how to add the Kotlin coroutines dependency to a Kotlin/JS project's build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    // . . .\n\n    // Coroutines & serialization\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Browser Target with Gradle\nDESCRIPTION: Command to start the development server for the browser target of Kotlin/JS projects using the Gradle wrapper. The 'jsBrowserDevelopmentRun' task initializes the webpack-dev-server, serving the HTML and executing the JavaScript in a browser. Ensure that project artifacts are correctly referenced in the HTML.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/running-kotlin-js.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsBrowserDevelopmentRun\n```\n\n----------------------------------------\n\nTITLE: Simplified Tag Builder Functions Using Generic Initializer\nDESCRIPTION: Simplified versions of the HTML tag builder functions that use the generic initTag function. These one-liners create tag instances, initialize them with the provided lambda, and return them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun head(init: Head.() -> Unit) = initTag(Head(), init)\n\nfun body(init: Body.() -> Unit) = initTag(Body(), init)\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods with RVM\nDESCRIPTION: This code snippet demonstrates how to install CocoaPods using the gem package manager after setting up Ruby with RVM. The `-n /usr/local/bin` option ensures the executable is placed in a standard location.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install -n /usr/local/bin cocoapods\n```\n\n----------------------------------------\n\nTITLE: Multiline String Kotlin\nDESCRIPTION: This snippet demonstrates a multiline string in Kotlin, delimited by triple quotes (`\"\"\"`). Multiline strings can contain newlines and arbitrary text without requiring escaping. This provides a clean way to embed blocks of text or code within a string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval text = \"\"\"\n    for (c in \\\"foo\\\")\n        print(c)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function Returning JavaScript Object\nDESCRIPTION: Defines a Kotlin function 'createJsUser' that uses the `js()` function to execute a JavaScript snippet that creates and returns a JavaScript object. The JavaScript code is enclosed in parentheses and curly brackets. JsAny is the return type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun createJsUser(name: String, age: Int): JsAny =\n    js(\"({ name: name, age: age })\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating an Abstract Class in Kotlin\nDESCRIPTION: This snippet demonstrates how to instantiate an abstract class in Kotlin using an anonymous object. This allows you to create an instance of an abstract class by providing implementations for its abstract methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class MyAbstractClass {\n    abstract fun doSomething()\n    abstract fun sleep()\n}\n\nfun main() {\n    val myObject = object : MyAbstractClass() {\n        override fun doSomething() {\n            // ...\n        }\n\n        override fun sleep() { // ...\n        }\n    }\n    myObject.doSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Spread Operator for Arrays - Kotlin\nDESCRIPTION: Demonstrates how to pass an existing array as individual arguments to a vararg parameter by using the spread operator '*'. Useful for combining dynamic arrays with additional arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Spring Boot Application with Kotlin\nDESCRIPTION: The `DemoApplication.kt` file sets up the Spring Boot application by defining the main class `DemoApplication` annotated with `@SpringBootApplication`. The main function uses `runApplication` to launch the application with the given arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-data-class.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// DemoApplication.kt\npackage demo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<DemoApplication>(*args)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Class with Sum Function (Kotlin)\nDESCRIPTION: This Kotlin code defines a simple `Sample` class with a `sum` function that takes two integers as input and returns their sum. It serves as the code to be tested.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-test-using-junit.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Sample() {\n    fun sum(a: Int, b: Int): Int {\n        return a + b\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constructors with Sealed Classes in Kotlin\nDESCRIPTION: Shows how to work with constructors in sealed classes. The example creates a sealed Error class with message parameter and several subclasses that use the constructor.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class Error(val message: String) {\n    class NetworkError : Error(\"Network failure\")\n    class DatabaseError : Error(\"Database cannot be reached\")\n    class UnknownError : Error(\"An unknown error has occurred\")\n}\n\nfun main() {\n    val errors = listOf(Error.NetworkError(), Error.DatabaseError(), Error.UnknownError())\n    errors.forEach { println(it.message) }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin/Native Module Name via Gradle (Kotlin)\nDESCRIPTION: This snippet demonstrates how to set the module name for Kotlin/Native compilation using the `compilerOptions` block in Gradle with the Kotlin DSL. It targets the `compileKotlinLinuxX64` task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile>(\"compileKotlinLinuxX64\") {\n    compilerOptions {\n        moduleName.set(\"my-module-name\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Gradle Plugin Version in Groovy Build Script\nDESCRIPTION: Configuration in Groovy DSL to update the Kotlin Gradle plugin version to match the standard library version. This helps prevent conflicts between the plugin and library versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_38\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    // replace `<...>` with the plugin name\n    id \"org.jetbrains.kotlin.<...>\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Build Report URL Configuration\nDESCRIPTION: This snippet configures the URL for posting HTTP(S)-based build reports using the `kotlin.build.report.http.url` property. This is mandatory if the `http` output option is used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n# Mandatory. Where to post HTTP(S)-based reports\nkotlin.build.report.http.url=http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Skipping Specific Default Arguments in Call - Kotlin\nDESCRIPTION: Shows a function call where only specific default arguments are omitted, after which all following arguments must be named. This ensures clarity when not all defaults are used.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nreformat(\"This is a short String!\", upperCaseFirstLetter = false, wordSeparator = '_')\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Elements from a Mutable Set in Kotlin\nDESCRIPTION: Shows how to modify a mutable set by adding elements with the add() function and removing elements with the remove() function. Displays the set state after each operation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    val fruit: MutableSet<String> = mutableSetOf(\"apple\", \"banana\", \"cherry\", \"cherry\")\n    fruit.add(\"dragonfruit\")    // Add \"dragonfruit\" to the set\n    println(fruit)              // [apple, banana, cherry, dragonfruit]\n    \n    fruit.remove(\"dragonfruit\") // Remove \"dragonfruit\" from the set\n    println(fruit)              // [apple, banana, cherry]\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Code as Incomplete (TODO) in Kotlin\nDESCRIPTION: This snippet demonstrates the use of the `TODO()` function in Kotlin to mark code as incomplete. It always throws a `NotImplementedError`. IntelliJ IDEA's Kotlin plugin recognizes `TODO()` and creates a code pointer in the TODO tool window.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nfun calcTaxes(): BigDecimal = TODO(\"Waiting for feedback from accounting\")\n```\n\n----------------------------------------\n\nTITLE: Updating ExperimentalWasmDsl Import (Kotlin)\nDESCRIPTION: This snippet demonstrates the updated import statement for the `@ExperimentalWasmDsl` annotation in Kotlin Gradle build scripts. This change is necessary due to the relocation of the annotation in Kotlin 2.0.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.ExperimentalWasmDsl\n```\n\n----------------------------------------\n\nTITLE: Creating Video Data Class in Kotlin\nDESCRIPTION: Defines a data class to store video attributes including id, title, speaker and URL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Video(\n    val id: Int,\n    val title: String,\n    val speaker: String,\n    val videoUrl: String\n)\n```\n\n----------------------------------------\n\nTITLE: Including Git Branch in HTTP Build Report\nDESCRIPTION: This snippet configures whether to include the Git branch name in HTTP build reports using the `kotlin.build.report.http.include_git_branch.name` property. This is optional and defaults to `false`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n# Optional. Add a Git branch name of a build to a build report\nkotlin.build.report.http.include_git_branch.name=true|false\n```\n\n----------------------------------------\n\nTITLE: Relative paths in argument files\nDESCRIPTION: Illustrates how to specify relative paths to argument files. Useful for when argument files are located in directories different than the current working directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ kotlinc @options/compiler.options hello.kt\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit-Returning Suspend Functions in Kotlin/Native\nDESCRIPTION: Shows how to set a Gradle property to make the compiler translate Unit-returning suspend functions to async Swift functions with a Void return type for better interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# gradle.properties\nkotlin.native.binary.unitSuspendFunctionObjCExport=proper\n```\n\n----------------------------------------\n\nTITLE: Setting Java Toolchain via Java Extension\nDESCRIPTION: Configures a Java toolchain through the java extension block. Kotlin compilation tasks will use this toolchain configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\njava {\n    toolchain {\n        languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)) // \"8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DOM event listener in 1.9.20\nDESCRIPTION: In Kotlin 1.9.20, DOM event listeners no longer need to explicitly return a value, simplifying the syntax. The return statement can be omitted and inferred by the compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    window.onload = { document.body?.sayHello() }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin EAP Version in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to configure a Kotlin Multiplatform project in Gradle using Kotlin DSL to use an EAP version of Kotlin. It demonstrates setting up the Kotlin plugin with the EAP version in the plugins block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/configure-build-for-eap.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    java\n    kotlin(\"multiplatform\") version \"KOTLIN-EAP-VERSION\"\n}\n\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Module Name in Kotlin and Groovy\nDESCRIPTION: Demonstrates how to specify a custom Objective-C prefix/name for Kotlin framework using both Kotlin and Groovy DSL in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-faq.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += listOf(\"-module-name\", \"TheName\")\n        }\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += [\"-module-name\", \"TheName\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Mixed Kotlin and Java Sources in Maven\nDESCRIPTION: Complex configuration for projects with both Kotlin and Java code, ensuring Kotlin is compiled before Java and both source sets are properly processed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <extensions>true</extensions> <!-- You can set this option \n            to automatically take information about lifecycles -->\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <goals>\n                        <goal>compile</goal> <!-- You can skip the <goals> element \n                        if you enable extensions for the plugin -->\n                    </goals>\n                    <configuration>\n                        <sourceDirs>\n                            <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>\n                            <sourceDir>${project.basedir}/src/main/java</sourceDir>\n                        </sourceDirs>\n                    </configuration>\n                </execution>\n                <execution>\n                    <id>test-compile</id>\n                    <goals> \n                        <goal>test-compile</goal> <!-- You can skip the <goals> element \n                    if you enable extensions for the plugin -->\n                    </goals>\n                    <configuration>\n                        <sourceDirs>\n                            <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>\n                            <sourceDir>${project.basedir}/src/test/java</sourceDir>\n                        </sourceDirs>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.5.1</version>\n            <executions>\n                <!-- Replacing default-compile as it is treated specially by Maven -->\n                <execution>\n                    <id>default-compile</id>\n                    <phase>none</phase>\n                </execution>\n                <!-- Replacing default-testCompile as it is treated specially by Maven -->\n                <execution>\n                    <id>default-testCompile</id>\n                    <phase>none</phase>\n                </execution>\n                <execution>\n                    <id>java-compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n                <execution>\n                    <id>java-test-compile</id>\n                    <phase>test-compile</phase>\n                    <goals>\n                        <goal>testCompile</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Running Self-Contained JAR with Java in Bash\nDESCRIPTION: This command demonstrates how to run the self-contained JAR file created by the Maven Assembly Plugin using Java Runtime Environment (JRE).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/mymodule-0.0.1-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Inspecting Variables in Kotlin/Native with Custom Pretty Printers\nDESCRIPTION: Demonstrates variable inspection for objects in Kotlin/Native debugging using LLDB with the konan_lldb.py script for pretty printing. Shows how to examine object properties and access nested values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    var x = 1\n    var y = 2\n    var p = Point(x, y)\n    println(\"p = $p\")\n}\n \ndata class Point(val x: Int, val y: Int)\n```\n\nLANGUAGE: bash\nCODE:\n```\nλ lldb ./program.kexe -o 'b main.kt:5' -o\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b main.kt:5\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 289 at main.kt:5, address = 0x000000000040af11\n(lldb) r\nProcess 4985 stopped\n* thread #1, name = 'program.kexe', stop reason = breakpoint 1.1\n    frame #0: program.kexe`kfun:main(kotlin.Array<kotlin.String>) at main.kt:5\n   2        var x = 1\n   3        var y = 2\n   4        var p = Point(x, y)\n-> 5        println(\"p = $p\")\n   6    }\n   7   \n   8    data class Point(val x: Int, val y: Int)\n\nProcess 4985 launched: './program.kexe' (x86_64)\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = 0x00000000007643d8\n(lldb) command script import dist/tools/konan_lldb.py\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = [x: ..., y: ...]\n(lldb) p p\n(ObjHeader *) $2 = [x: ..., y: ...]\n(lldb) script lldb.frame.FindVariable(\"p\").GetChildMemberWithName(\"x\").Dereference().GetValue()\n'1'\n(lldb) \n```\n\n----------------------------------------\n\nTITLE: Configuring Android Instrumented Test Dependencies in Kotlin\nDESCRIPTION: This snippet shows how to manually declare a dependency between androidInstrumentedTest and commonTest source sets in the new Android source set layout using Gradle KTS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    sourceSets {\n        val commonTest by getting\n        val androidInstrumentedTest by getting {\n            dependsOn(commonTest)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Report Example Before Enabling Precise Backup\nDESCRIPTION: Sample output from a Kotlin build report before enabling the precise backup optimization, showing the time spent on backup operations during compilation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_25\n\nLANGUAGE: none\nCODE:\n```\nTask ':kotlin-gradle-plugin:compileCommonKotlin' finished in 0.59 s\n<...>\nTime metrics:\n Total Gradle task time: 0.59 s\n Task action before worker execution: 0.24 s\n  Backup output: 0.22 s // Pay attention to this number \n<...>\n```\n\n----------------------------------------\n\nTITLE: Enabling Kapt Verbose Output\nDESCRIPTION: Property configuration to enable verbose output for kapt in gradle.properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\nkapt.verbose=true\n```\n\n----------------------------------------\n\nTITLE: Collection Content Assertion Example\nDESCRIPTION: Shows how to use assertContains() to check for elements in collections and strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun test() {\n    val sampleList = listOf<String>(\"sample\", \"sample2\")\n    val sampleString = \"sample\"\n    assertContains(sampleList, sampleString)  // element in collection\n    assertContains(sampleString, \"amp\")       // substring in string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Version in Kotlin Build Script\nDESCRIPTION: This snippet shows how to set the language version to 1.7 in a Kotlin build script to enable new language features like definitely non-nullable types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings.apply {\n            languageVersion = \"1.7\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Java Compiler's Annotation Processors in Gradle\nDESCRIPTION: Gradle configuration to keep Java compiler's annotation processors like Lombok working alongside kapt.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_28\n\nLANGUAGE: groovy\nCODE:\n```\nkapt {\n    keepJavacAnnotationProcessors = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Binary with Kotlin DSL\nDESCRIPTION: Configures various aspects of binaries including setting the compilation source, linker options, base name, and entry point in Kotlin DSL. It also demonstrates accessing the output file, link task, and run task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries {\n    executable(\"my_executable\", listOf(RELEASE)) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations[\"test\"]\n\n        // Custom command line options for the linker.\n        linkerOpts = mutableListOf(\"-L/lib/search/path\", \"-L/another/search/path\", \"-lmylib\")\n\n        // Base name for the output file.\n        baseName = \"foo\"\n\n        // Custom entry point function.\n        entryPoint = \"org.example.main\"\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(\"my_framework\" listOf(RELEASE)) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java Annotations with Array 'value' Parameter (vararg) in Kotlin\nDESCRIPTION: Defines a Java annotation `AnnWithArrayValue` where the `value` parameter is a `String` array. In Kotlin, this translates to a `vararg` parameter, allowing values to be passed directly separated by commas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic @interface AnnWithArrayValue {\n    String[] value();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\n@AnnWithArrayValue(\"abc\", \"foo\", \"bar\") class C\n```\n\n----------------------------------------\n\nTITLE: Initializing Integer Variables in Kotlin\nDESCRIPTION: Demonstrates how to initialize variables with different integer types in Kotlin, including Int, Long, and Byte. Shows type inference and explicit type specification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval one = 1 // Int\nval threeBillion = 3000000000 // Long\nval oneLong = 1L // Long\nval oneByte: Byte = 1\n```\n\n----------------------------------------\n\nTITLE: Boxing and Caching of Small Numbers in Kotlin\nDESCRIPTION: Demonstrates how the JVM applies memory optimization for small numbers (between -128 and 127) when using nullable references, resulting in referential equality.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val a: Int = 100\n    val boxedA: Int? = a\n    val anotherBoxedA: Int? = a\n    \n    println(boxedA === anotherBoxedA) // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example Using Function Pointers\nDESCRIPTION: Complete Kotlin implementation showing both passing a Kotlin function to C and using a C function pointer in Kotlin. This combines both approaches in a working example.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-function-pointers-from-c.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.invoke\nimport kotlinx.cinterop.staticCFunction\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n\n    val cFunctionPointer = staticCFunction<Int, Int> { it + 1 }\n    accept_fun(cFunctionPointer)\n\n    val funFromC = supply_fun() ?: error(\"No function is returned\")\n    funFromC(42)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Publication for All Targets Except One in Kotlin Multiplatform\nDESCRIPTION: This code shows how to disable source publication for all targets except for a specified one (JVM in this example) in a Kotlin multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-publish-lib.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // Disable sources publication for all targets except for JVM:\n    withSourcesJar(publish = false)\n\n    jvm {\n        withSourcesJar(publish = true)\n    }\n    linuxX64()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Kotlin/Native Library Extension\nDESCRIPTION: Defines a simple Kotlin extension property that adds 'Kotlin' prefix to strings, to be compiled as a library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npackage kotlinizer\nval String.kotlinized\n    get() = \"Kotlin $this\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Kotlin Source Set Configuration (Deprecated)\nDESCRIPTION: Example showing the deprecated way of adding Kotlin source sets directly to Kotlin compilation using the 'source' method, which is no longer recommended.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    js()\n    iosArm64()\n    iosSimulatorArm64()\n    \n    sourceSets {\n        val commonMain by getting\n        val myCustomIntermediateSourceSet by creating {\n            dependsOn(commonMain)\n        }\n        \n        targets[\"jvm\"].compilations[\"main\"].source(myCustomIntermediateSourceSet)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring all-open Plugin in Gradle with Kotlin DSL\nDESCRIPTION: Shows how to add and configure the all-open plugin in a Gradle build script using Kotlin DSL. The plugin makes classes annotated with specified annotations automatically open without requiring the 'open' keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.allopen\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Predefined Source Sets Groovy DSL\nDESCRIPTION: Demonstrates how to access predefined source sets in a Kotlin Multiplatform project using Groovy DSL. The `commonMain` source set is accessed directly within the `sourceSets` block, allowing for its configuration or modification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain { /* ... */ }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Null Safety Exercise in Kotlin\nDESCRIPTION: This exercise involves writing a function that returns an employee's salary by ID, handling potential null values from a database query function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-null-safety.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Employee (val name: String, var salary: Int)\n\nfun employeeById(id: Int) = when(id) {\n    1 -> Employee(\"Mary\", 20)\n    2 -> null\n    3 -> Employee(\"John\", 21)\n    4 -> Employee(\"Ann\", 23)\n    else -> null\n}\n\nfun salaryById(id: Int) = // Write your code here\n\nfun main() {\n    println((1..5).sumOf { id -> salaryById(id) })\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Kotlin/JS Tests with Gradle Check Task (Bash)\nDESCRIPTION: This command executes the standard Gradle `check` lifecycle task. For Kotlin/JS projects, this task triggers the configured test tasks, running browser tests via Karma or Node.js tests via Mocha.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew check\n```\n\n----------------------------------------\n\nTITLE: Java Base Class Definition\nDESCRIPTION: This Java code defines a generic `Base` class with a type parameter `T`. It serves as the base class for `Derived` in the following snippet.  No explicit nullability annotations are present, so the default nullability depends on the context.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class Base<T> {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Set Parameters Kotlin DSL\nDESCRIPTION: Illustrates how to configure parameters like `kotlin.srcDir`, `resources.srcDir`, and dependencies for the `commonMain` source set using Kotlin Gradle DSL.  The `commonMain` source set is accessed using `by getting`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            kotlin.srcDir(\"src\")\n            resources.srcDir(\"res\")\n\n            dependencies {\n                /* ... */\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Callable References to Functions with Default Arguments\nDESCRIPTION: Example demonstrating how Kotlin 1.4.0 supports callable references to functions with default argument values, automatically using those default values when needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(i: Int = 0): String = \"$i!\"\n\nfun apply(func: () -> String): String = func()\n\nfun main() {\n    println(apply(::foo))\n}\n```\n\n----------------------------------------\n\nTITLE: Build Kotlin Native Framework\nDESCRIPTION: Executes a Gradle task via command line to build the debug framework for Kotlin/Native.  This command triggers the `linkDebugFrameworkNative` task, which compiles the Kotlin code into a framework located in the `build/bin/native/debugFramework` directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew linkDebugFrameworkNative\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Operators for Map Modifications in Kotlin\nDESCRIPTION: This snippet demonstrates the use of plusAssign (+=) operator and the [] operator alias for adding or updating entries in mutable maps.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mutableMapOf(\"one\" to 1, \"two\" to 2)\n    numbersMap[\"three\"] = 3     // calls numbersMap.put(\"three\", 3)\n    numbersMap += mapOf(\"four\" to 4, \"five\" to 5)\n    println(numbersMap)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Strings using StringBuilder in Java\nDESCRIPTION: Shows how to construct a string incrementally in Java using the `StringBuilder` class. It appends numbers and newline characters within a loop to build a countdown string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Java\nStringBuilder countDown = new StringBuilder();\nfor (int i = 5; i > 0; i--) {\n    countDown.append(i);\n    countDown.append(\"\\n\");\n}\nSystem.out.println(countDown);\n```\n\n----------------------------------------\n\nTITLE: Displaying Chart in Kotlin\nDESCRIPTION: Demonstrates how to display a chart in a Kotlin Notebook using the DISPLAY() function and a plotting library.  The example creates a bar chart from experiment data. Requires a plotting library like Kandy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval experimentX = experimentData.map { it.key }\nval experimentY = experimentData.map { it.value }\n\nDISPLAY(plot {\n    bars {\n        x(experimentX)\n        y(experimentY)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Inheritance with the open Keyword in Kotlin\nDESCRIPTION: Shows how to make a Kotlin class inheritable by marking it with the open keyword instead of the default final. There are no members or specific initialization logic. No dependencies are required, and the class structure is minimal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Base // Class is open for inheritance\n\n```\n\n----------------------------------------\n\nTITLE: Unit-returning Function with Inferred Return Type - Kotlin\nDESCRIPTION: Presents a function equivalent to the previous example but omits the explicit 'Unit' return type entirely, relying on Kotlin's inference. Syntax is more idiomatic for Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun printHello(name: String?) { ... }\n```\n\n----------------------------------------\n\nTITLE: Swift Initializer Override in Kotlin\nDESCRIPTION: This Swift code demonstrates overriding an initializer from `UIViewController` in Kotlin using the `@OverrideInit` annotation.  The constructor must have the same parameter names and types as the overridden Swift initializer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nclass ViewController : UIViewController {\n    @OverrideInit constructor(coder: NSCoder) : super(coder)\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Mutable Collections in Kotlin\nDESCRIPTION: Demonstrates how to add single and multiple elements to mutable collections using add() and addAll() functions. It also shows the usage of the plusAssign (+=) operator for adding elements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-write.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.add(5)\n    println(numbers)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(1, 2, 5, 6)\n    numbers.addAll(arrayOf(7, 8))\n    println(numbers)\n    numbers.addAll(2, setOf(3, 4))\n    println(numbers)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\")\n    numbers += \"three\"\n    println(numbers)\n    numbers += listOf(\"four\", \"five\")    \n    println(numbers)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Project and System Properties Collection\nDESCRIPTION: This snippet disables the collection of project and system properties in HTTP build reports using the `kotlin.build.report.http.verbose_environment` property. Setting this property prevents sensitive data from being logged.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_22\n\nLANGUAGE: none\nCODE:\n```\nkotlin.build.report.http.verbose_environment\n```\n\n----------------------------------------\n\nTITLE: Disable Compose Feature Flag\nDESCRIPTION: This code snippet demonstrates how to disable a Compose feature flag that is enabled by default by calling the `disabled()` function on it and including it in the `featureFlags` set. The example disables the `StrongSkipping` feature flag.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-options.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nfeatureFlags = setOf(ComposeFeatureFlag.StrongSkipping.disabled())\n```\n\n----------------------------------------\n\nTITLE: Enabling KDoc Export to Objective-C in Gradle (Groovy DSL)\nDESCRIPTION: Gradle configuration using Groovy DSL to enable the experimental feature for exporting KDoc comments to generated Objective-C headers in Kotlin/Native projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {\n        compilations.get(\"main\").kotlinOptions.freeCompilerArgs += \"-Xexport-kdoc\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define and Use a Variable in Kotlin Notebook\nDESCRIPTION: This code snippet shows how to define a variable and then use it in a subsequent calculation within separate Kotlin Notebook cells. The variable 'a' is defined and assigned the value 100, and then printed its square value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-create.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = 100\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(a * a)\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Kotlin Website\nDESCRIPTION: This robots.txt file sets the crawling rules for web robots visiting the Kotlin website. It allows all user agents to access the site and specifies the location of the sitemap for improved indexing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nHost: kotlinlang.org\n\n# Sitemaps\nsitemap: https://kotlinlang.org/sitemap_index.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Upper Bounds for Generic Types in Kotlin\nDESCRIPTION: Shows how to constrain generic type parameters using upper bounds. Demonstrates a generic sort function that requires the type to implement Comparable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T : Comparable<T>> sort(list: List<T>) {  ... }\n```\n\n----------------------------------------\n\nTITLE: Long and Int Division in Kotlin\nDESCRIPTION: This example shows division between Long and Int types, demonstrating that the result maintains the type of the first operand and highlighting type comparison constraints.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val x = 5L / 2\n    println (x == 2)\n    // Error, as Long (x) cannot be compared to Int (2)\n    \n    println(x == 2L)\n    // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Optional Expected Annotation in Kotlin Multiplatform\nDESCRIPTION: Declares an expected annotation class with @OptionalExpectation, which means actual declarations are only required on platforms where the annotation is used. This requires the ExperimentalMultiplatform opt-in.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-expect-actual.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalMultiplatform::class)\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.RUNTIME)\n@OptionalExpectation\nexpect annotation class XmlSerializable()\n```\n\n----------------------------------------\n\nTITLE: Allowing Spread Operator in Signature-Polymorphic Calls (Revert)\nDESCRIPTION: Kotlin compiler flag to temporarily revert the Kotlin 1.5+ error (originally a warning in 1.4) that prohibits using the spread operator (*) in signature-polymorphic calls (KT-35226), restoring the pre-1.4 permissive behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-14.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall\n```\n\n----------------------------------------\n\nTITLE: Unnamed Companion Object Kotlin\nDESCRIPTION: Shows how to define a companion object without a name. When the name is omitted, the default name `Companion` is used to access the companion object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(val name: String) {\n    // Defines a companion object without a name\n    companion object { }\n}\n\n// Accesses the companion object\nval companionUser = User.Companion\n```\n\n----------------------------------------\n\nTITLE: Kotlin Exercise Solution: String Interpolation\nDESCRIPTION: This snippet presents the solution to the Kotlin exercise, demonstrating how to use string templates to print a formatted string with the values of the `name` and `age` variables.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-hello-world.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val name = \"Mary\"\n    val age = 20\n    println(\"$name is $age years old\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specify headers in Kotlin - Kotlin\nDESCRIPTION: This code snippet demonstrates how to explicitly specify the main header in Kotlin when the Pod doesn't contain a `.modulemap` file. This helps resolve 'Module not found' errors. The `headers` parameter specifies the header file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\npod(\"NearbyMessages\") {\n    version = \"1.1.1\"\n    headers = \"GNSMessages.h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling K2 Kapt Implementation in Gradle Properties\nDESCRIPTION: Configuration option to revert to the previous kapt plugin implementation instead of using the new K2 implementation. This property should be added to the gradle.properties file when encountering issues with the K2 kapt plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkapt.use.k2=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilations for JVM Target in Groovy\nDESCRIPTION: This snippet shows how to configure compilations specifically for the JVM target using Groovy DSL. It sets the JVM target version to Java 8 for all compilations of the JVM target.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-configure-compilations.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        compilerOptions {\n            jvmTarget = JvmTarget.JVM_1_8\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Headers in Kotlin Native C Interop\nDESCRIPTION: This snippet shows how to specify the headers that should be imported when a C library consists of a set of headers instead of a Clang module. The `headers` property lists the header files to include in the generated bindings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nheaders = curl/curl.h\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Creation\nDESCRIPTION: Defines a JavaScript function 'createUser' that returns an object with 'name' and 'age' properties. This function is used to demonstrate how to define external interfaces in Kotlin to represent the structure of JavaScript objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createUser (name, age) {\n    return { name: name, age: age };\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Predicates in Kotlin\nDESCRIPTION: Shows how to test predicates on collections in Kotlin using extension functions none(), any(), and all(). It highlights Kotlin's more straightforward syntax for these operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbers.none { it.endsWith(\"e\") })\n    println(numbers.any { it.endsWith(\"e\") })\n    println(numbers.all { it.endsWith(\"e\") })\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Keys and Values in Maps in Kotlin\nDESCRIPTION: Shows how to check if a key or value is present in a map using the 'in' operator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val readOnlyJuiceMenu = mapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(\"orange\" in readOnlyJuiceMenu.keys)\n    // true\n    \n    // Alternatively, you don't need to use the keys property\n    println(\"orange\" in readOnlyJuiceMenu)\n    // true\n    \n    println(200 in readOnlyJuiceMenu.values)\n    // false\n}\n```\n\n----------------------------------------\n\nTITLE: String Template with Expression Kotlin\nDESCRIPTION: This snippet shows a string template with an expression in curly braces `${s.length}`.  The expression calculates the length of the string and embeds it into the output. This allows for more complex string formatting.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val s = \"abc\"\n    println(\"$s.length is ${s.length}\") \n    // abc.length is 3\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Properties in Interfaces in Kotlin\nDESCRIPTION: This snippet demonstrates declaring properties in interfaces, which can be abstract or have accessor implementations. It also shows how a class implements these properties without backing fields.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/interfaces.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MyInterface {\n    val prop: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(prop)\n    }\n}\n\nclass Child : MyInterface {\n    override val prop: Int = 29\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unary Minus Operator in Kotlin\nDESCRIPTION: Complete example demonstrating how to implement the unary minus operator (-) for a Point data class. The operator returns a new Point with negated x and y coordinates.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/operator-overloading.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Point(val x: Int, val y: Int)\n\noperator fun Point.unaryMinus() = Point(-x, -y)\n\nval point = Point(10, 20)\n\nfun main() {\n   println(-point)  // prints \"Point(x=-10, y=-20)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring kapt Plugin Options in Command Line\nDESCRIPTION: Example of passing multiple plugin options to kapt in the Kotlin command line compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n-P plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources\n-P plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes\n-P plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs\n\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar\n\n-P plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=true\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function with JavaScript Snippet\nDESCRIPTION: Defines a Kotlin function 'getCurrentURL' that uses the `js()` function to execute a JavaScript snippet that returns the current URL of the page.  The return type is explicitly set to String. The string literal contains the JavaScript code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun getCurrentURL(): String =\n    js(\"window.location.href\")\n```\n\n----------------------------------------\n\nTITLE: Saving a Plot to SVG in Kotlin\nDESCRIPTION: This snippet demonstrates how to save a Kandy plot to an SVG file.  The `save()` function is used to export the plot in the specified format, in this case, SVG. Requires a Kandy plot object created beforehand.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n// Specify the output format for the plot file:\nsalesPlot.save(\"sales-chart.svg\")\n```\n\n----------------------------------------\n\nTITLE: Enable Multi-Dollar Interpolation Bash\nDESCRIPTION: This snippet shows how to enable the multi-dollar string interpolation feature using the `kotlinc` command-line compiler with the `-Xmulti-dollar-interpolation` option. It specifies how to compile code that uses this experimental feature.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc -Xmulti-dollar-interpolation main.kt\n```\n\n----------------------------------------\n\nTITLE: Destructuring Objects in Kotlin\nDESCRIPTION: This snippet shows how to destructure an object into variables using a destructuring declaration in Kotlin. The `component1()` and `component2()` functions help in achieving this by extracting respective values from the object on the right-hand side.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/destructuring-declarations.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval (name, age) = person\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental @Volatile Support in Kotlin/Native with Gradle\nDESCRIPTION: Kotlin DSL configuration for enabling the experimental @Volatile annotation support in Kotlin/Native by setting the language version to 1.9 in a Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks\n    .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()\n    .configureEach {\n        compilerOptions\n            .languageVersion\n            .set(\n                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n            )\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Toolchain in Groovy DSL\nDESCRIPTION: Sets up a Java toolchain for Kotlin/JVM compilation tasks using the Groovy DSL. This affects the JDK used for compilation and related tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)) // \"8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating in Reverse Order with downTo in Kotlin\nDESCRIPTION: Demonstrates how to iterate over a range in reverse order using the 'downTo' function. This creates a descending progression from the higher value to the lower value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (i in 4 downTo 1) print(i)\n    // 4321\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling KDoc Export to Objective-C in Gradle (Kotlin DSL)\nDESCRIPTION: Gradle configuration using Kotlin DSL to enable the experimental feature for exporting KDoc comments to generated Objective-C headers in Kotlin/Native projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        compilations.get(\"main\").kotlinOptions.freeCompilerArgs += \"-Xexport-kdoc\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Safepoint Signposts for GC Monitoring\nDESCRIPTION: This snippet shows how to enable safepoint signposts for monitoring GC performance using Xcode Instruments by adding a compiler option.  This is useful for debugging GC-related freezes in iOS apps.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n-Xbinary=enableSafepointSignposts=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Buildpacks for Kotlin/JS Project\nDESCRIPTION: These bash commands set up the necessary buildpacks for deploying a Kotlin/JS project on Heroku, including Gradle and static file serving.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:set heroku/gradle\nheroku buildpacks:add https://github.com/heroku/heroku-buildpack-static.git\n```\n\n----------------------------------------\n\nTITLE: Defining libcurl interoperability in Kotlin/Native\nDESCRIPTION: Definition file for libcurl interoperability, specifying headers, filters, and platform-specific compiler and linker options.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-app-with-c-and-libcurl.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nheaders = curl/curl.h\nheaderFilter = curl/*\n\ncompilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu\nlinkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl\nlinkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl\n```\n\n----------------------------------------\n\nTITLE: Creating Classes and Instances in Kotlin\nDESCRIPTION: Illustrates how to define classes, properties, and constructors in Kotlin. It includes an example of class inheritance and demonstrates how a subclass can extend a base class by using the open keyword.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass Shape\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass Rectangle(val height: Double, val length: Double) {\n    val perimeter = (height + length) * 2 \n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass Rectangle(val height: Double, val length: Double) {\n    val perimeter = (height + length) * 2 \n}\nfun main() {\n    val rectangle = Rectangle(5.0, 2.0)\n    println(\"The perimeter is \\${rectangle.perimeter}\")\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nopen class Shape\n\nclass Rectangle(val height: Double, val length: Double): Shape() {\n    val perimeter = (height + length) * 2 \n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Image from URL in Kotlin Notebook\nDESCRIPTION: Displays an image from a URL in a Kotlin Notebook using the `Image` class from the `lib-ext` library. The `embed = false` parameter loads the image directly from the URL. Requires `%use lib-ext(0.11.0-398)`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nImage(\"https://kotlinlang.org/docs/images/kotlin-logo.png\", embed = false).withWidth(300)\n```\n\n----------------------------------------\n\nTITLE: Actual Class Implementation for Expected Class in Kotlin Multiplatform JVM\nDESCRIPTION: This code demonstrates the actual class implementation for an expected class in Kotlin Multiplatform for JVM. It provides the concrete implementation for the expected function confirmIdentity() which returns the string \"expect class fun: jvm\".\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nactual class Identity {\n    actual fun confirmIdentity() = \"expect class fun: jvm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extract and Concatenate Items from DataFrame\nDESCRIPTION: Extracts the `items` column from the DataFrame `df` and concatenates them into a single DataFrame.  This assumes that the YouTube API response contains an `items` field that holds the actual data.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval items = df.items.concat()\nitems\n```\n\n----------------------------------------\n\nTITLE: Configure Compose Compiler Feature Flags (Text)\nDESCRIPTION: Demonstrates how to configure Compose compiler feature flags directly when configuring the Compose compiler. This uses the `-P` flag to set the `featureFlag` property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_21\n\nLANGUAGE: Text\nCODE:\n```\n-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=IntrinsicRemember\n```\n\n----------------------------------------\n\nTITLE: Accessing Kotlin Objects and Companion Objects in Swift\nDESCRIPTION: Demonstrates how to access Kotlin objects and companion objects in Swift using the new 'shared' and 'companion' properties, providing a more intuitive interface for iOS developers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nMyObject.shared\nMyObject.shared.x\nMyClass.companion\nMyClass.Companion.shared\n```\n\n----------------------------------------\n\nTITLE: Swift Variance Casting\nDESCRIPTION: This Swift code snippet demonstrates how to force-cast a generic class from Objective-C to another type due to Swift's lack of variance support. The `variOut` variable of type `GenVarOut<SomeData>` is casted to `GenVarOut<BaseData>`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet variOut = GenVarOut<SomeData>(arg: sd)\nlet variOutAny : GenVarOut<BaseData> = variOut as! GenVarOut<BaseData>\n```\n\n----------------------------------------\n\nTITLE: Duration Arithmetic Kotlin\nDESCRIPTION: This Kotlin code snippet illustrates how to perform basic arithmetic operations with Duration objects. It includes addition, subtraction, multiplication, division, negation, and absolute value calculations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\nimport kotlin.time.Duration.Companion.seconds\n\nfun main() {\n//sampleStart\n    val fiveSeconds: Duration = 5.seconds\n    val thirtySeconds: Duration = 30.seconds\n\n    println(fiveSeconds + thirtySeconds)\n    // 35s\n    println(thirtySeconds - fiveSeconds)\n    // 25s\n    println(fiveSeconds * 2)\n    // 10s\n    println(thirtySeconds / 2)\n    // 15s\n    println(thirtySeconds / fiveSeconds)\n    // 6.0\n    println(-thirtySeconds)\n    // -30s\n    println((-thirtySeconds).absoluteValue)\n    // 30s\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Compiler Execution Strategy in Gradle Properties\nDESCRIPTION: Example showing how to set the Kotlin compiler execution strategy to 'out-of-process' using the kotlin.compiler.execution.strategy property in gradle.properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_23\n\nLANGUAGE: none\nCODE:\n```\n# gradle.properties\nkotlin.compiler.execution.strategy=out-of-process\n```\n\n----------------------------------------\n\nTITLE: Passing Lambda Expressions to Higher-Order Functions in Kotlin\nDESCRIPTION: Passes a lambda expression as a parameter to a higher-order function (max), showing concise in-line function definition for custom logic. Requires the max function accepting a comparator lambda. The lambda in the example compares lengths of two strings. The body illustrates concise syntax for lambdas as function arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nmax(strings, { a, b -> a.length < b.length })\n```\n\n----------------------------------------\n\nTITLE: Enabling Error Type Correction in kapt with Gradle\nDESCRIPTION: Configuration to enable error type inferring in stubs for annotation processors that rely on precise types in declaration signatures.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\nkapt {\n    correctErrorTypes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Superclass Implementation from an Outer Class in Kotlin Inner Classes\nDESCRIPTION: Demonstrates accessing the outer class's superclass implementation from within an inner class using qualified super (super@OuterClass). FilledRectangle contains an inner Filler class, which calls Rectangle's draw via super@FilledRectangle.draw(), and accesses borderColor similarly. main() function showcases instantiation and usage. This advanced pattern supports delegation to superclass logic deep within class hierarchies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Rectangle {\n    open fun draw() { println(\"Drawing a rectangle\") }\n    val borderColor: String get() = \"black\"\n}\n\n//sampleStart\nclass FilledRectangle: Rectangle() {\n    override fun draw() {\n        val filler = Filler()\n        filler.drawAndFill()\n    }\n    \n    inner class Filler {\n        fun fill() { println(\"Filling\") }\n        fun drawAndFill() {\n            super@FilledRectangle.draw() // Calls Rectangle's implementation of draw()\n            fill()\n            println(\"Drawn a filled rectangle with color ${super@FilledRectangle.borderColor}\") // Uses Rectangle's implementation of borderColor's get()\n        }\n    }\n}\n//sampleEnd\n\nfun main() {\n    val fr = FilledRectangle()\n        fr.draw()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kapt Processor Statistics\nDESCRIPTION: Configuration in build.gradle.kts to enable showing annotation processor statistics for kapt.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nkapt {\n    showProcessorStats = true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Granular Workspaces in Kotlin/JS\nDESCRIPTION: Gradle configuration to disable granular workspaces feature in Kotlin/JS projects for parallel build optimization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1420.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<YarnPlugin> {\n    rootProject.the<YarnRootExtension>().disableGranularWorkspaces()\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing When Subject in a Variable\nDESCRIPTION: This code shows how to capture the subject of a when expression in a variable, a new feature in Kotlin 1.3. The response variable is scoped to the when block, preventing namespace pollution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Request.getBody() =\n        when (val response = executeRequest()) {\n            is Success -> response.body\n            is HttpError -> throw HttpException(response.status)\n        }\n```\n\n----------------------------------------\n\nTITLE: Disabling Kotlin Daemon Fallback Strategy (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to disable the Kotlin daemon fallback strategy using the Groovy DSL within the `build.gradle` file. It configures the `compileKotlin` task, setting the `useDaemonFallbackStrategy` property to `false`. This configuration ensures that the build will fail if the Kotlin daemon encounters issues, preventing a silent fallback to a potentially less efficient or reliable compilation method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.named(\"compileKotlin\").configure {\n    useDaemonFallbackStrategy = false\n}\n```\n\n----------------------------------------\n\nTITLE: Printing a Plain Object Declaration\nDESCRIPTION: Demonstrates the default string representation of a plain object declaration in Kotlin. When printing an object without the `data` modifier, the output includes the object's name and its hash code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyObject\n\nfun main() {\n    println(MyObject) \n    // MyObject@hashcode\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dependencies in Groovy DSL\nDESCRIPTION: Example showing how to configure test dependencies using Groovy DSL in a multiplatform project's commonTest source set. Demonstrates automatic JUnit4 dependency inclusion.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_18\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\"test\") // This brings the dependency \n                                              // on JUnit 4 transitively\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Kotlin Suspending Function from Swift\nDESCRIPTION: Shows how to call a Kotlin suspending function from Swift with a completion handler, demonstrating that the completion handler may execute on a background thread.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nfunc test() {\n    print(\"Running test on \\(Thread.current)\")\n    PlatformKt.asyncFunctionExample(completionHandler: { _ in\n        print(\"Running completion handler on \\(Thread.current)\")\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Groups in Regex Replacement in Kotlin\nDESCRIPTION: Shows how to use named group references in replacement expressions with Kotlin's Regex replace() and replaceFirst() functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun dateReplace() {\n    val dateRegex = Regex(\"(?<dd>\\\\d{2})-(?<mm>\\\\d{2})-(?<yyyy>\\\\d{4})\")\n    val input = \"Date of birth: 27-04-2022\"\n    println(dateRegex.replace(input, \"\\${yyyy}-\\${mm}-\\${dd}\")) // \"Date of birth: 2022-04-27\" — by name\n    println(dateRegex.replace(input, \"\\$3-\\$2-\\$1\")) // \"Date of birth: 2022-04-27\" — by number\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Forward Declaration Example (Part 1)\nDESCRIPTION: This Objective-C code defines a protocol `ForwardDeclaredProtocol` and a function `consumeProtocol` that takes an object conforming to the protocol as input. The protocol is forward-declared.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_24\n\nLANGUAGE: objective-c\nCODE:\n```\n// First objcinterop library\n#import <Foundation/Foundation.h>\n\n@protocol ForwardDeclaredProtocol;\n\nNSString* consumeProtocol(id<ForwardDeclaredProtocol> s) {\n    return [NSString stringWithUTF8String:\"Protocol\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler for kapt in Maven\nDESCRIPTION: XML configuration to enable the kapt plugin with the K2 compiler by adding a specific compiler option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n   ...\n   <args>\n      <arg>-Xuse-k2-kapt</arg>\n   </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Manual JVM Target Configuration for Android (Kotlin)\nDESCRIPTION: Manually configures the `sourceCompatibility` and `targetCompatibility` for Android projects using Kotlin DSL, recommended if AGP version is lower than 8.1.0-alpha09. Involves replacing the `<MAJOR_JDK_VERSION>` with a specific JDK version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid {\n    compileOptions {\n        sourceCompatibility = <MAJOR_JDK_VERSION>\n        targetCompatibility = <MAJOR_JDK_VERSION>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Lambdas to Dynamic Calls in Kotlin\nDESCRIPTION: Shows the handling of lambdas with dynamic types in Kotlin, where parameters of lambdas default to dynamic types when interacting with dynamic variables, allowing for dynamic method invocations within the lambda. Key limitation is that all lambda parameters are treated as dynamic, impacting how they may be used or invoked.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/dynamic-type.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndyn.foo {\n    x -> x.bar() // x is dynamic\n}\n```\n\n----------------------------------------\n\nTITLE: When Entry with Trailing Comma in Kotlin\nDESCRIPTION: This example demonstrates how to use a trailing comma in a `when` expression.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isReferenceApplicable(myReference: KClass<*>) = when (myReference) {\n    Comparable::class,\n    Iterable::class,\n    String::class, // trailing comma\n        -> true\n    else -> false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java Annotations (JUnit) in Kotlin\nDESCRIPTION: Illustrates Kotlin's compatibility with Java annotations. It shows applying JUnit's `@Rule` and `@Test` annotations within a Kotlin test class. Specifically, `@get:Rule` targets the getter of the `tempFolder` property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.junit.Test\nimport org.junit.Assert.*\nimport org.junit.Rule\nimport org.junit.rules.*\n\nclass Tests {\n    // apply @Rule annotation to property getter\n    @get:Rule val tempFolder = TemporaryFolder()\n\n    @Test fun simple() {\n        val f = tempFolder.newFile()\n        assertEquals(42, getTheAnswer()) // Assuming getTheAnswer() exists\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Builder with Multiple Type Arguments\nDESCRIPTION: Example of a builder function that supports inferring multiple type arguments for more complex generic types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <K, V> myBuilder(builder: MutableMap<K, V>.() -> Unit): Map<K, V> { ... }\n```\n\n----------------------------------------\n\nTITLE: Inspecting Library Details with klib\nDESCRIPTION: Shows how to inspect the metadata and details of a Kotlin/Native library using the klib utility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ klib info <name>\n```\n\n----------------------------------------\n\nTITLE: File Overwrite Configuration in Directory Copy\nDESCRIPTION: Shows how to set up environment by copying files with overwrite functionality. The code demonstrates copying a common fixture and then overwriting it with specific fixture files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun setUpEnvironment(projectDirectory: Path, fixtureName: String) {\n    fixturesRoot.resolve(COMMON_FIXTURE_NAME)\n        .copyToRecursively(projectDirectory, followLinks = false)\n    fixturesRoot.resolve(fixtureName)\n        .copyToRecursively(projectDirectory, followLinks = false,\n            overwrite = true) // patches the common fixture\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Detection Example\nDESCRIPTION: Kotlin code demonstrating how to check for memory leaks using GC metrics and unit testing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.native.internal.*\nimport kotlin.test.*\n\nclass Resource\n\nval global = mutableListOf<Resource>()\n\n@OptIn(ExperimentalStdlibApi::class)\nfun getUsage(): Long {\n    GC.collect()\n    return GC.lastGCInfo!!.memoryUsageAfter[\"heap\"]!!.totalObjectsSizeBytes\n}\n\nfun run() {\n    global.add(Resource())\n    // The test will fail if you remove the next line\n    global.clear()\n}\n\n@Test\nfun test() {\n    val before = getUsage()\n    // A separate function is used to ensure that all temporary objects are cleared\n    run()\n    val after = getUsage()\n    assertEquals(before, after)\n}\n```\n\n----------------------------------------\n\nTITLE: Looping with Ranges (Incorrect) Kotlin\nDESCRIPTION: This code demonstrates the less preferred (bad) way of looping through a range using `0..n - 1`.  The `..<` operator is recommended instead.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_63\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (i in 0..n - 1) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Java Interface with NotNull Annotations\nDESCRIPTION: Example of a Java interface with generic methods and @NotNull annotations. Shows how Java expresses nullability constraints in generic contexts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nimport org.jetbrains.annotations.*;\n\npublic interface Game<T> {\n    public T save(T x) {}\n    @NotNull\n    public T load(@NotNull T x) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ContentView with Local Package Usage\nDESCRIPTION: Swift UI code demonstrating how to use the local package function in the iOS app's content view\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-spm-local-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport SpmLocalPackage\n\nstruct ContentView: View {\n    var body: some View {\n        Vstack {\n            Image(systemName: \"globe\")\n                .imageScale(.large)\n                .foregroundStyle(.tint)\n            Text(greetingsFromSpmLocalPackage())\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Number Conversions in Kotlin\nDESCRIPTION: Illustrates the need for explicit conversions between number types in Kotlin, showing how to convert a Byte to an Int using the toInt() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val byte: Byte = 1\n    // OK, literals are checked statically\n    \n    val intAssignedByte: Int = byte \n    // Initializer type mismatch\n    \n    val intConvertedByte: Int = byte.toInt()\n    \n    println(intConvertedByte)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Kotlin/JS Browser Development Run Task (Bash)\nDESCRIPTION: This command executes the `jsBrowserDevelopmentRun` Gradle task to run a Kotlin/JS project configured for the browser target. It utilizes the webpack-dev-server to serve the JavaScript artifacts for development.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsBrowserDevelopmentRun\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Replacements in Navigation YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up text replacements using regular expressions within the navigation configuration, allowing for URL modifications and content adjustments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/external/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  replace:\n    - regex: '\\[data class\\]\\(data-classes\\)'\n      with:  '[data class](\\#data-classes)'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating takeIf and takeUnless with Random Numbers in Kotlin\nDESCRIPTION: This snippet shows how to use takeIf and takeUnless to filter even and odd numbers from a randomly generated integer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.*\n\nfun main() {\n    val number = Random.nextInt(100)\n\n    val evenOrNull = number.takeIf { it % 2 == 0 }\n    val oddOrNull = number.takeUnless { it % 2 == 0 }\n    println(\"even: $evenOrNull, odd: $oddOrNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Function Signature Clashes with @JvmName\nDESCRIPTION: Shows how to use the @JvmName annotation to resolve signature clashes caused by type erasure in Kotlin functions when compiled to JVM bytecode.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun List<String>.filterValid(): List<String>\n\n@JvmName(\"filterValidInt\")\nfun List<Int>.filterValid(): List<Int>\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated ExperimentalWasmDsl Import (Kotlin)\nDESCRIPTION: This snippet demonstrates removing the deprecated star import statement for the old package of `@ExperimentalWasmDsl` annotation. This change is necessary due to the relocation of the annotation in Kotlin 2.0.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.targets.js.dsl.*\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Mutable Maps in Kotlin\nDESCRIPTION: Demonstrates how to add new key-value pairs to a mutable map using the indexed access operator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val juiceMenu: MutableMap<String, Int> = mutableMapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    juiceMenu[\"coconut\"] = 150 // Add key \"coconut\" with value 150 to the map\n    println(juiceMenu)\n    // {apple=100, kiwi=190, orange=100, coconut=150}\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Secondary Constructors\nDESCRIPTION: Illustrates the usage of secondary constructors, prefixed with the `constructor` keyword. Secondary constructors must delegate to the primary constructor, either directly or indirectly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(val pets: MutableList<Pet> = mutableListOf())\n\nclass Pet {\n    constructor(owner: Person) {\n        owner.pets.add(this) // adds this pet to the list of its owner's pets\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation File Format in YAML\nDESCRIPTION: This YAML snippet shows the format used in the navigation file referenced by 'nav' parameter, defining how markdown files are mapped to URLs and titles in the website structure.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/external/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- md: IMMUTABILITY.md\n  url: immutability.html\n  title: \"Immutability\"\n```\n\n----------------------------------------\n\nTITLE: Smart casts in Kotlin for automatic type conversion\nDESCRIPTION: Illustrates how Kotlin's smart cast feature automatically casts objects to the appropriate type after a type check, eliminating the need for explicit casts in many scenarios.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/typecasts.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun demo(x: Any) {\n    if (x is String) {\n        print(x.length) // x is automatically cast to String\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings using the + Operator in Java\nDESCRIPTION: Demonstrates basic string concatenation in Java using the `+` operator. It combines literal strings with the value of the `name` variable and its length.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Java\nString name = \"Joe\";\nSystem.out.println(\"Hello, \" + name);\nSystem.out.println(\"Your name is \" + name.length() + \" characters long\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Daemon JVM Arguments in Kotlin DSL\nDESCRIPTION: Specifies JVM arguments for the Kotlin daemon using the kotlin extension block in Kotlin DSL. These settings override default arguments inherited from the Gradle daemon.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    kotlinDaemonJvmArgs = listOf(\"-Xmx486m\", \"-Xms256m\", \"-XX:+UseParallelGC\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Non-Nullable Constraint\nDESCRIPTION: This Kotlin code snippet demonstrates how to define a generic class with a non-nullable type constraint `T : Any`.  This forces the Objective-C header to mark the corresponding method/property as non-nullable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Sample<T : Any>() {\n    fun myVal(): T\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Java Loop for Kotlin Progressions\nDESCRIPTION: Shows the Java equivalent of a Kotlin progression using a traditional indexed for loop. This demonstrates how progressions work under the hood with first, last, and step properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfor (int i = first; i <= last; i += step) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Import Kandy and DataFrame in Kotlin Notebook\nDESCRIPTION: Imports the Kandy and Kotlin DataFrame libraries in a Kotlin Notebook environment using the `%use` magic command. This allows you to use the plotting capabilities of Kandy and the data manipulation features of Kotlin DataFrame.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-visualization.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n%use kandy\n%use dataframe\n```\n\n----------------------------------------\n\nTITLE: Java Container class with getter and setter\nDESCRIPTION: This Java class defines a generic container with a getter and setter for a generic type E. It serves as a base class for illustrating Kotlin's handling of synthetic setters and projected types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class Container<E> {\n    public E getFoo() {\n        return null;\n    }\n    public void setFoo(E foo) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using all-open with Meta-annotations in Kotlin\nDESCRIPTION: Example showing how all-open works with meta-annotations. Classes annotated with an annotation that is itself annotated with an all-open annotation will also become open.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@com.my.Annotation\nannotation class MyFrameworkAnnotation\n\n@MyFrameworkAnnotation\nclass MyClass // will be all-open\n```\n\n----------------------------------------\n\nTITLE: Declaring Debug-only Executable in Groovy\nDESCRIPTION: This Groovy snippet demonstrates how to declare an executable binary for the debug build type only in a Kotlin/Native project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nbinaries {\n    executable([DEBUG]) {\n        // Binary configuration.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Named Binaries in Groovy\nDESCRIPTION: This Groovy snippet shows how to declare binaries with custom names and specific build types in a Kotlin/Native project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nbinaries {\n    executable('foo', [DEBUG]) {\n        // Binary configuration.\n    }\n\n    // It's possible to drop the list of build types\n    // (in this case, all the available build types will be used).\n    executable('bar') {\n        // Binary configuration.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotlin Build Reports in Gradle Properties\nDESCRIPTION: Configuration to enable Kotlin build reports in text file format by adding a property to the gradle.properties file. This helps evaluate the impact of optimizations on compilation time.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_24\n\nLANGUAGE: none\nCODE:\n```\nkotlin.build.report.output=file\n```\n\n----------------------------------------\n\nTITLE: Setting Java Toolchain via Java Extension (Groovy)\nDESCRIPTION: Illustrates specifying a Java toolchain through the Java extension in Groovy for Java projects. Determines the JDK version using `<MAJOR_JDK_VERSION>` as placeholder.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing StableRef to Prevent Memory Leaks\nDESCRIPTION: Demonstrates how to properly dispose of a StableRef instance after it's no longer needed to prevent memory leaks. Once disposed, the reference becomes invalid and can't be unwrapped.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nstableRef.dispose()\n```\n\n----------------------------------------\n\nTITLE: Kotlin Multiline If Condition\nDESCRIPTION: This code demonstrates how to correctly format a multiline `if` condition in Kotlin, including the placement of curly braces and indentation of subsequent lines.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nif (!component.isSyncing &&\n    !hasAnyKotlinRuntimeInScope(module)\n) {\n    return createKotlinNotConfiguredPanel(module)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface in Kotlin\nDESCRIPTION: This snippet defines a basic interface named MyInterface in Kotlin with an abstract method bar and an optional implementation for method foo. It demonstrates how interfaces are structured in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/interfaces.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MyInterface {\n    fun bar()\n    fun foo() {\n      // optional body\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: When with Arbitrary Expression Kotlin\nDESCRIPTION: Demonstrates the use of arbitrary expressions as branch conditions in a 'when' statement. This allows for more complex logic in determining which branch to execute.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (x) {\n    s.toInt() -> print(\"s encodes x\")\n    else -> print(\"s does not encode x\")\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Locale-Agnostic Uppercase Conversion in Kotlin\nDESCRIPTION: Example showing the usage of the new locale-agnostic 'uppercase()' function for string case conversion, compared to the previous 'toUpperCase()' method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// current API\nprintln(\"Needs to be capitalized\".toUpperCase()) // NEEDS TO BE CAPITALIZED\n\n// new API\nprintln(\"Needs to be capitalized\".uppercase()) // NEEDS TO BE CAPITALIZED\n```\n\n----------------------------------------\n\nTITLE: Annotating a File in Kotlin\nDESCRIPTION: Shows how to apply an annotation (`@JvmName`) to the entire file using the `@file:` use-site target. This annotation must be placed at the top level, before the package directive or imports.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JvmName(\"Foo\")\n\npackage org.jetbrains.demo\n```\n\n----------------------------------------\n\nTITLE: When with Subject Capture Kotlin\nDESCRIPTION: Demonstrates capturing the subject of a 'when' expression in a variable using the 'val' keyword.  The scope of this variable is limited to the body of the 'when' expression.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Request.getBody() = \n    when (val response = executeRequest()) {\n        is Success -> response.body\n        is HttpError -> throw HttpException(response.status)\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Compose Compiler Plugin to Root build.gradle.kts (Kotlin)\nDESCRIPTION: This snippet demonstrates how to add the Compose compiler Gradle plugin to the root build.gradle.kts file. It uses the alias function to reference the plugin from the version catalog.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-migration-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    alias(libs.plugins.compose.compiler) apply false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Granularity to Per-File (None)\nDESCRIPTION: This line configures the Kotlin/JS IR compiler to generate one (or two) JavaScript file per each Kotlin file.  Add it to `gradle.properties`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n# gradle.properties\nkotlin.js.ir.output.granularity=per-file // 'per-module' is the default\n```\n\n----------------------------------------\n\nTITLE: Using SAM Interface with Receiver in Kotlin\nDESCRIPTION: Example of using the SAM interface in Kotlin where the first parameter (Task) becomes the receiver (this) inside the lambda block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun test(context: TaskContext) {\n    val runner = TaskRunner {\n        // Here 'this' is an instance of 'Task'\n\n        println(\"$name is started\")\n        context.executeTask(this)\n        println(\"$name is finished\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String and Array Conversions in Kotlin\nDESCRIPTION: Shows conversion operations between CharArray/ByteArray and String using decodeToString(), encodeToByteArray(), concatToString(), and toCharArray() functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n\tval str = \"kotlin\"\n    val array = str.toCharArray()\n    println(array.concatToString())\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation Access via Reflection\nDESCRIPTION: Demonstrates how to access annotations including repeated annotations using the findAnnotations() reflection function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@Repeatable\nannotation class Tag(val name: String)\n\n@Tag(\"First Tag\")\n@Tag(\"Second Tag\")\nfun taggedFunction() {\n    println(\"I'm a tagged function!\")\n}\n\nfun main() {\n    val x = ::taggedFunction\n    val foo = x as KAnnotatedElement\n    println(foo.findAnnotations<Tag>()) // [@Tag(name=First Tag), @Tag(name=Second Tag)]\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Casting for Forward Declarations in Kotlin\nDESCRIPTION: Kotlin code showing how to explicitly cast between forward declarations and actual implementations. This is the new required syntax in Kotlin 1.9.20+.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin code:\nfun test() {\n    consumeProtocol(produceProtocol() as objcnames.protocols.ForwardDeclaredProtocolProtocol)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Kotlin Class with Interop Method\nDESCRIPTION: Defines a Kotlin class with an action method that accepts any type, demonstrating how Swift objects can be passed to Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nclass KotlinExample {\n    fun action(arg: Any) {\n        println(arg)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type-safe Builder Example\nDESCRIPTION: Shows how to use function literals with receiver in type-safe builders pattern.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HTML {\n    fun body() { ... }\n}\n\nfun html(init: HTML.() -> Unit): HTML {\n    val html = HTML()  // create the receiver object\n    html.init()        // pass the receiver object to the lambda\n    return html\n}\n\nhtml {       // lambda with receiver begins here\n    body()   // calling a method on the receiver object\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven for Opt-in\nDESCRIPTION: Shows how to configure opt-in requirements at the module level using Maven.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>...</executions>\n            <configuration>\n                <args>\n                    <arg>-opt-in=org.mylibrary.OptInAnnotation</arg>                    \n                </args>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Objects in Kotlin Gradle Build Script\nDESCRIPTION: Shows how to enable data objects by setting the language version to 1.9 in a Kotlin Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {\n    // ...\n    kotlinOptions.languageVersion = \"1.9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Builder Function with Builder Inference Support\nDESCRIPTION: Example of declaring a builder function with a generic type parameter that supports builder inference. The function takes a lambda with a receiver that contains the type parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <V> buildList(builder: MutableList<V>.() -> Unit) { ... }\n```\n\n----------------------------------------\n\nTITLE: Basic Kotlin Multiplatform Greeting Function\nDESCRIPTION: Simple example of common code that can be shared across platforms, demonstrating a basic greeting function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun greeting() {\n    println(\"Hello, Kotlin Multiplatform!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing a Collection in Kotlin\nDESCRIPTION: Demonstrates how to reverse the order of a collection using the reversed() function, which returns a new collection with elements in reverse order.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbers.reversed())\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting KDoc Comments - Kotlin\nDESCRIPTION: This snippet shows how to enable the export of KDoc comments to generated Objective-C headers by adding the `-Xexport-kdoc` compiler option to the `build.gradle.kts` file. This allows documentation written in Kotlin to be visible in Objective-C and Swift, improving the usability of Kotlin libraries from Swift/Objective-C. The feature is experimental and requires opt-in.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        compilations.get(\"main\").compilerOptions.options.freeCompilerArgs.add(\"-Xexport-kdoc\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Warning message for non-existent source set\nDESCRIPTION: This is the warning message that is shown when the `jvmMain` source set is accessed without the `jvm` target declared. It suggests registering the `jvm` target in the `kotlin{}` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_12\n\nLANGUAGE: None\nCODE:\n```\nw: Accessed 'source set jvmMain' without registering the jvm target:\n  kotlin {\n      jvm() /* <- register the 'jvm' target */\n\n      sourceSets.jvmMain.dependencies {\n\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspending Function as Supertype\nDESCRIPTION: Example showing how to implement a suspending function type as a supertype in Kotlin 1.5.30.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyClass: suspend () -> Unit {\n    override suspend fun invoke() { TODO() }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling a Simple Kotlin/Native Library\nDESCRIPTION: Shows how to compile a simple Kotlin source file into a Kotlin/Native library using the kotlinc-native compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ kotlinc-native kotlinizer.kt -p library -o kotlinizer\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Kotlin\nDESCRIPTION: Demonstrates the usage of both single-line and multi-line comments in Kotlin. Also shows how block comments can be nested inside one another to organize and document code more effectively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n/* The comment starts here\n/* contains a nested comment */     \nand ends here. */\n```\n\n----------------------------------------\n\nTITLE: Initializing a Spring Boot Application in Kotlin\nDESCRIPTION: This Kotlin snippet shows the creation of a Spring Boot application class with the necessary annotations for bootstrapping with Spring. It includes a main function as the application's entry point which invokes Spring Boot's runApplication function. Prerequisites include having Spring Boot and Kotlin set up in the project environment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-create-project-with-spring-boot.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// DemoApplication.kt\npackage demo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<DemoApplication>(*args)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type Aliases for Function Types in Kotlin\nDESCRIPTION: Demonstrates how to define type aliases for function types. The first example creates an alias for a function taking three parameters and returning Unit, while the second creates a generic predicate function type.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-aliases.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias MyHandler = (Int, String, Any) -> Unit\n\ntypealias Predicate<T> = (T) -> Boolean\n```\n\n----------------------------------------\n\nTITLE: Disabling Kotlin/JS Browser Tests (Groovy)\nDESCRIPTION: This Groovy snippet demonstrates how to disable the test task for a Kotlin/JS browser target within the `build.gradle` file. Setting `enabled = false` inside the `testTask` block prevents browser tests from being executed when running tasks like `check`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            testTask {\n                enabled = false\n            }\n        }\n        binaries.executable()\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Derived class inheriting from Java Base\nDESCRIPTION: This Kotlin code defines a class `Derived` that inherits from the Java class `Base` and overrides the fields 'a' and 'b' with Kotlin properties. It demonstrates how Kotlin 2.0.0 resolves name collisions, prioritizing Kotlin properties over Java fields in subclasses.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Derived : Base() {\n    val a = \"aa\"\n\n    // Declares custom get() function\n    val b get() = \"bb\"\n}\n\nfun main() {\n    // Resolves Derived.a\n    println(a)\n    // aa\n\n    // Resolves Base.b\n    println(b)\n    // b\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Predefined Compilations Groovy DSL\nDESCRIPTION: Demonstrates how to access predefined compilations (`main` and `test`) within the `jvm` target and retrieve their outputs and runtime dependencies using Groovy DSL. The main and test compilations are accessed directly through the `compilations` object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Number Comparison in Kotlin\nDESCRIPTION: This snippet illustrates the differences in behavior when comparing floating-point numbers in Kotlin, particularly with NaN and zero values. It shows how the comparison behavior changes depending on whether operands are statically typed as floating-point numbers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    // Operand statically typed as floating-point number\n    println(Double.NaN == Double.NaN)                 // false\n    \n    // Operand NOT statically typed as floating-point number\n    // So NaN is equal to itself\n    println(listOf(Double.NaN) == listOf(Double.NaN)) // true\n\n    // Operand statically typed as floating-point number\n    println(0.0 == -0.0)                              // true\n    \n    // Operand NOT statically typed as floating-point number\n    // So -0.0 is less than 0.0\n    println(listOf(0.0) == listOf(-0.0))              // false\n\n    println(listOf(Double.NaN, Double.POSITIVE_INFINITY, 0.0, -0.0).sorted())\n    // [-0.0, 0.0, Infinity, NaN]\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Enum Value Access Implementation in Kotlin\nDESCRIPTION: Shows how to enumerate values of an enum class generically using reified type parameters. Enables type-safe access to enum values at runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class RGB { RED, GREEN, BLUE }\n\ninline fun <reified T : Enum<T>> printAllValues() {\n    print(enumValues<T>().joinToString { it.name })\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Thread Tracking Example\nDESCRIPTION: Shows the console output from the thread tracking example, demonstrating that initialization and deinitialization happen on the main thread when the object is passed to Kotlin on the main thread.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ninit on <_NSMainThread: 0x600003bc0000>{number = 1, name = main}\nshared.SwiftExample\ndeinit on <_NSMainThread: 0x600003bc0000>{number = 1, name = main}\n```\n\n----------------------------------------\n\nTITLE: Adding Project Dependency in Kotlin Gradle Build Script\nDESCRIPTION: Example showing how to add a dependency on the parent multiplatform project in a subproject using Kotlin DSL syntax in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(project(\":my-main-project\")) // The name of your parent multiplatform project\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Incremental Compilation for Kotlin/Wasm Projects\nDESCRIPTION: This configuration snippet shows how to enable incremental compilation for Kotlin/Wasm targets to improve build performance. Add this property to your project's local.properties or gradle.properties file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nkotlin.incremental.wasm=true\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Content in Kotlin\nDESCRIPTION: Demonstrates how to display HTML content within a Kotlin Notebook using the DISPLAY() function and the HTML() helper function. The HTML content includes inline JavaScript to increment a counter.  Requires the notebook to be marked as Trusted to execute scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nDISPLAY(HTML(\"<h2>Gaussian distribution</h2>\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring JS Browser Target in Groovy DSL\nDESCRIPTION: This snippet shows how to configure a Kotlin/JS project to target the browser environment within the `kotlin {}` block using Groovy DSL. The `browser {}` block specifies the target, and `binaries.executable()` instructs the compiler to generate executable JavaScript files suitable for running in a browser.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n        }\n        binaries.executable()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the AutoCloseable Interface with XML Writer Example\nDESCRIPTION: Example of using the new experimental AutoCloseable interface from the common standard library with an XML writer implementation. Shows how to utilize the use() function to properly manage resources.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface XMLWriter : AutoCloseable {\n    fun document(encoding: String, version: String, content: XMLWriter.() -> Unit)\n    fun element(name: String, content: XMLWriter.() -> Unit)\n    fun attribute(name: String, value: String)\n    fun text(value: String)\n}\n\nfun writeBooksTo(writer: XMLWriter) {\n    writer.use { xml ->\n        xml.document(encoding = \"UTF-8\", version = \"1.0\") {\n            element(\"bookstore\") {\n                element(\"book\") {\n                    attribute(\"category\", \"fiction\")\n                    element(\"title\") { text(\"Harry Potter and the Prisoner of Azkaban\") }\n                    element(\"author\") { text(\"J. K. Rowling\") }\n                    element(\"year\") { text(\"1999\") }\n                    element(\"price\") { text(\"29.99\") }\n                }\n                element(\"book\") {\n                    attribute(\"category\", \"programming\")\n                    element(\"title\") { text(\"Kotlin in Action\") }\n                    element(\"author\") { text(\"Dmitry Jemerov\") }\n                    element(\"author\") { text(\"Svetlana Isakova\") }\n                    element(\"year\") { text(\"2017\") }\n                    element(\"price\") { text(\"25.19\") }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing NullPointerException in Kotlin\nDESCRIPTION: This code snippet demonstrates how a NullPointerException can still occur in Kotlin when using the non-null assertion operator (!!) on a nullable variable that is null. This operator should be used with caution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval text: String? = null\nprintln(text!!.length)  // throws a NullPointerException\n```\n\n----------------------------------------\n\nTITLE: KDoc Comments Export Example in Kotlin\nDESCRIPTION: Example of KDoc documentation comments in Kotlin that can be exported to Objective-C headers using the new experimental feature in Kotlin/Native 1.5.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\n * Prints the sum of the arguments.\n * Properly handles the case when the sum doesn't fit in 32-bit integer.\n */\nfun printSum(a: Int, b: Int) = println(a.toLong() + b)\n```\n\n----------------------------------------\n\nTITLE: Using Toolchain Resolver Plugin for Gradle (Kotlin)\nDESCRIPTION: Integrates a resolver plugin in a Gradle project for toolchain management by specifying repositories. Update the `foojay-resolver-convention` version as necessary.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"org.gradle.toolchains.foojay-resolver-convention\") version(\"%foojayResolver%\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring yarn.lock Reporting in Groovy Gradle Build Script\nDESCRIPTION: This snippet shows how to configure yarn.lock reporting options in a Groovy Gradle build script. It includes settings for mismatch reporting, new yarn.lock file reporting, and automatic yarn.lock replacement.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_35\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.targets.js.yarn.YarnLockMismatchReport\nimport org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension\n\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).yarnLockMismatchReport =\n        YarnLockMismatchReport.WARNING // NONE | FAIL\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).reportNewYarnLock = false // true\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).yarnLockAutoReplace = false // true\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Delegated Properties with Named Object in Kotlin\nDESCRIPTION: Demonstrates an optimization for delegated properties in Kotlin 1.7.20, where the $delegate field is omitted when delegating to a named object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nobject NamedObject {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): String = ...\n}\n\nval s: String by NamedObject\n```\n\n----------------------------------------\n\nTITLE: Applying Java Library Plugin in Groovy Gradle Build Script\nDESCRIPTION: Example showing how to apply the Java Library plugin in a separate subproject using Groovy DSL syntax in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_20\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id('java-library')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Kotlin Multiplatform Projects\nDESCRIPTION: This example shows how to configure a Kotlin multiplatform project to use JUnit Platform for JVM tests. It sets up the kotlin-test dependency in the common test source set and configures the JVM test execution task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm {\n        testRuns[\"test\"].executionTask.configure {\n            useJUnitPlatform()\n        }\n    }\n    sourceSets {\n        commonTest.dependencies {\n            implementation(kotlin(\"test\"))\n        }\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        testRuns[\"test\"].executionTask.configure {\n            useJUnitPlatform()\n        }\n    }\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\"test\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling an XCFramework with Gradle\nDESCRIPTION: This shell command assembles an XCFramework from a Kotlin Multiplatform umbrella module using Gradle, preparing it for distribution to iOS projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew :together:assembleTogetherReleaseXCFramework\n```\n\n----------------------------------------\n\nTITLE: Disable Garbage Collection\nDESCRIPTION: Configuration option to disable garbage collection for testing purposes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nkotlin.native.binary.gc=noop\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Platform-Specific Code\nDESCRIPTION: Implements JavaScript-specific code for UUID generation using the npm uuid package and provides a placeholder for WebSocket implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/multiplatform.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// JS\n// Use the `uuid` package from npm as dependency\nactual fun randomUUID(): String = uuidv4() \n\nactual class PlatformSocket actual constructor(url: String) {\n   // Implementation on top of WebSockets\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Whitespace in Class Declaration\nDESCRIPTION: This example showcases the use of horizontal whitespace within a class and function declaration, specifically around parentheses and binary operators.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A(val x: Int)\n\nfun foo(x: Int) { ... }\n\nfun bar() {\n    foo(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming iOS Framework Configuration\nDESCRIPTION: Shows how to customize the iOS framework name using the baseName option in Gradle configuration. This also sets the module name automatically.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-faq.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64(\"myapp\") {\n       binaries {\n          framework {\n              baseName = \"TheName\"\n          }\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Set from a List in Java\nDESCRIPTION: Demonstrates how to create a Set from a List using Java's Set.copyOf() method. This removes duplicates from the original list.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic void listToSet() {\n    var sourceList = List.of(1, 2, 3, 1);\n    var copySet = Set.copyOf(sourceList);\n    System.out.println(copySet);\n}\n```\n\n----------------------------------------\n\nTITLE: Bit Operations in Kotlin\nDESCRIPTION: Shows usage of new bit manipulation functions including countOneBits(), countTrailingZeroBits(), and takeHighestOneBit().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val number = \"1010000\".toInt(radix = 2)\n    println(number.countOneBits())\n    println(number.countTrailingZeroBits())\n    println(number.takeHighestOneBit().toString(2))\n}\n```\n\n----------------------------------------\n\nTITLE: Importing jQuery as a JavaScript Module in Kotlin\nDESCRIPTION: Demonstrates how to import jQuery as both a JavaScript module and a global object using @JsModule and @JsNonModule annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal interface JQuery {\n    fun toggle(duration: Int = definedExternally): JQuery\n    fun click(handler: (Event) -> Unit): JQuery\n}\n\n@JsModule(\"jquery\")\n@JsNonModule\n@JsName(\"$\")\nexternal fun jquery(selector: String): JQuery\n```\n\n----------------------------------------\n\nTITLE: View First Four Rows of DataFrame - Kotlin\nDESCRIPTION: Displays the first four rows of the DataFrame named `df`. This is useful for quickly inspecting the data and structure of the DataFrame after creation or manipulation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-visualization.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndf.head(4)\n```\n\n----------------------------------------\n\nTITLE: Uninitialized Variable Error Example in Kotlin\nDESCRIPTION: Demonstrates the compiler error that occurs when trying to use an uninitialized variable. Shows proper variable declaration without initialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-basic-types.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Variable declared without initialization\n    val d: Int\n    \n    // Triggers an error\n    println(d)\n    // Variable 'd' must be initialized\n}\n```\n\n----------------------------------------\n\nTITLE: Add Kotlin CocoaPods Gradle plugin to version catalog\nDESCRIPTION: This code snippet demonstrates how to add the Kotlin CocoaPods Gradle plugin to the version catalog in `gradle/libs.versions.toml`. It defines the plugin ID and version reference.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nkotlinCocoapods = { id = \"org.jetbrains.kotlin.native.cocoapods\", version.ref = \"kotlin\" }\n```\n\n----------------------------------------\n\nTITLE: Using Plus Operator with Maps in Kotlin\nDESCRIPTION: This snippet demonstrates the use of the plus operator to combine maps or add entries to maps.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/map-operations.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbersMap = mapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n    println(numbersMap + Pair(\"four\", 4))\n    println(numbersMap + Pair(\"one\", 10))\n    println(numbersMap + mapOf(\"five\" to 5, \"one\" to 11))\n}\n```\n\n----------------------------------------\n\nTITLE: Experimental API Warning Configuration\nDESCRIPTION: Shows how to create an opt-in requirement annotation with warning level and custom message for experimental APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresOptIn(level = RequiresOptIn.Level.WARNING, message = \"This API is experimental. It can be incompatibly changed in the future.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class ExperimentalDateTime\n```\n\n----------------------------------------\n\nTITLE: Using first() Function to Access List Elements in Kotlin\nDESCRIPTION: Demonstrates how to access the first element of a list using the first() extension function, which is an alternative to indexed access.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n    val readOnlyShapes = listOf(\"triangle\", \"square\", \"circle\")\n    println(\"The first item in the list is: ${readOnlyShapes.first()}\")\n    // The first item in the list is: triangle\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Build Script Example (Kotlin)\nDESCRIPTION: This code snippet shows a complete example of a Kotlin build.gradle.kts file with the Power-assert plugin configured. It includes plugin declarations, repository setup, dependencies, test configuration, and Power-assert configuration with custom functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi\n\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\"\n    kotlin(\"plugin.power-assert\") version \"%kotlinVersion%\"\n}\n\ngroup = \"org.example\"\nversion = \"1.0-SNAPSHOT\"\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testImplementation(kotlin(\"test\"))\n}\n\ntasks.test {\n    useJUnitPlatform()\n}\n\n@OptIn(ExperimentalKotlinGradlePluginApi::class)\npowerAssert {\n    functions = listOf(\"kotlin.assert\", \"kotlin.test.assertEquals\", \"kotlin.test.assertTrue\", \"kotlin.test.assertNull\", \"kotlin.require\", \"org.example.AssertScope.assert\")\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling a loop expression in Kotlin\nDESCRIPTION: Demonstrates how to label a for loop in Kotlin using the label@ syntax. Labels can be attached to expressions and referenced by break and continue statements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nloop@ for (i in 1..100) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JVM IR Backend in Gradle\nDESCRIPTION: Configuration to enable the new JVM IR backend in Kotlin projects using Gradle build system. This is currently in Alpha state and requires explicit opt-in.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinOptions.useIR = true\n```\n\n----------------------------------------\n\nTITLE: Multiple argument files\nDESCRIPTION: Demonstrates passing compiler options and source files through separate argument files. This provides more clarity for the kotlinc command.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ kotlinc @compiler.options @classes\n```\n\n----------------------------------------\n\nTITLE: Booting iOS Simulator from CLI\nDESCRIPTION: This shell command shows how to manually boot an iOS simulator from the command line using `xcrun simctl boot`. It requires specifying the device ID (`<DeviceId>`) of the target simulator. This is necessary if standalone mode is disabled for iOS simulator tests in Kotlin/Native.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_9\n\nLANGUAGE: None\nCODE:\n```\n/usr/bin/xcrun simctl boot <DeviceId>\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Processing Mode in Maven\nDESCRIPTION: XML configuration to set the annotation processing mode (stubs, apt, or stubsAndApt) in Maven.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n   ...\n   <aptMode>stubs</aptMode>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence from Elements with sequenceOf() in Kotlin\nDESCRIPTION: Creates a sequence by explicitly listing its elements using the sequenceOf() function. This is useful when you want to construct a sequence with known values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sequences.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval numbersSequence = sequenceOf(\"four\", \"three\", \"two\", \"one\")\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Kotlin/JS Webpack Configuration\nDESCRIPTION: Configuration to enable CSS support in Kotlin/JS projects using the commonWebpackConfig block. This allows processing of CSS files in the project build.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nbrowser {\n    commonWebpackConfig {\n        cssSupport {\n            enabled.set(true)\n        }\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nbrowser {\n    commonWebpackConfig {\n        cssSupport {\n            it.enabled = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Simplified Primary Constructor\nDESCRIPTION: Demonstrates a Kotlin class with a simplified primary constructor syntax. If there are no annotations or visibility modifiers, the `constructor` keyword can be omitted.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(firstName: String) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Creating References to Collections in Kotlin\nDESCRIPTION: Demonstrates creating new references to the same collection instance, where changes through one reference affect all references.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val sourceList = mutableListOf(1, 2, 3)\n    val referenceList = sourceList\n    referenceList.add(4)\n    println(\"Source size: ${sourceList.size}\")\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using Toolchain Resolver Plugin for Gradle (Groovy)\nDESCRIPTION: Adds a toolchain resolver plugin to handle JDK toolchain downloads in Gradle with version compatibility using Groovy.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.gradle.toolchains.foojay-resolver-convention' version '%foojayResolver%'\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin property reference as function parameter\nDESCRIPTION: Demonstrates using a property reference where a function with a single generic parameter is expected, in this case, the `String::length` property reference as a parameter to the `map` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val strs = listOf(\"a\", \"bc\", \"def\")\n    println(strs.map(String::length))\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-installed Yarn Usage\nDESCRIPTION: Configuration to use a pre-installed Yarn instance instead of downloading a new one during build.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().download = false\n    // \"true\" for default behavior\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).download = false\n}\n```\n\n----------------------------------------\n\nTITLE: Mark Time Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to mark a specific moment in time using the TimeSource interface and the markNow() function to create a TimeMark.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\n\nfun main() {\n   val timeSource = TimeSource.Monotonic\n   val mark = timeSource.markNow()\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Mutable Maps in Kotlin\nDESCRIPTION: Shows how to remove items from a mutable map using the .remove() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val juiceMenu: MutableMap<String, Int> = mutableMapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    juiceMenu.remove(\"orange\")    // Remove key \"orange\" from the map\n    println(juiceMenu)\n    // {apple=100, kiwi=190}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring External JavaScript Classes in Kotlin\nDESCRIPTION: Shows how to declare an external JavaScript class (DOM Node) in Kotlin using the external modifier for type-safe access.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal class Node {\n    val firstChild: Node\n\n    fun appendChild(child: Node): Node\n\n    fun removeChild(child: Node): Node\n\n    // etc\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Watched Videos in Kotlin DSL\nDESCRIPTION: Uses a for loop to iterate over watched videos and display them using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (video in watchedVideos) {\n    p {\n        +\"${video.speaker}: ${video.title}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Java Static Members in Kotlin\nDESCRIPTION: Shows how to access static members of Java classes through their companion objects or, for mapped types, using the full qualified name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nif (Character.isLetter(a)) { ... }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\njava.lang.Integer.bitCount(foo)\n```\n\n----------------------------------------\n\nTITLE: Accessing Keys and Values in Maps in Kotlin\nDESCRIPTION: Demonstrates how to obtain collections of keys and values from a map using the keys and values properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val readOnlyJuiceMenu = mapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(readOnlyJuiceMenu.keys)\n    // [apple, kiwi, orange]\n    println(readOnlyJuiceMenu.values)\n    // [100, 190, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Aggregate Operations in Kotlin\nDESCRIPTION: Demonstrates Kotlin's concise syntax for performing aggregate operations on collections, such as finding the maximum value or null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nval numbers = listOf<Int>()\nprintln(\"Max: ${numbers.maxOrNull()}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Comparator in Kotlin\nDESCRIPTION: Shows how to create a custom Comparator for sorting strings by their length instead of the default lexicographical order.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val lengthComparator = Comparator { str1: String, str2: String -> str1.length - str2.length }\n    println(listOf(\"aaa\", \"bb\", \"c\").sortedWith(lengthComparator))\n}\n```\n\n----------------------------------------\n\nTITLE: Using compareBy for Simplified Comparator Creation in Kotlin\nDESCRIPTION: Demonstrates the use of the compareBy() function to create a comparator more concisely, sorting strings by their length.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-ordering.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(listOf(\"aaa\", \"bb\", \"c\").sortedWith(compareBy { it.length }))\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Top-Level Kotlin Extension Function\nDESCRIPTION: Shows how to declare an extension function (`getLongestString` for `List<String>`) at the top level, directly under a package.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.example.declarations\n\nfun List<String>.getLongestString() { /*...*/}\n```\n\n----------------------------------------\n\nTITLE: Declaring Additional Maven Repositories\nDESCRIPTION: Adds external repositories to the Maven configuration to access artifacts not available in Maven Central.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<repositories>\n    <repository>\n        <id>spring-repo</id>\n        <url>https://repo.spring.io/release</url>\n    </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Disabling Kotlin Daemon Fallback Strategy\nDESCRIPTION: Demonstrates how to disable the Kotlin daemon fallback strategy using a Gradle property, which can help prevent resource consumption issues and non-deterministic builds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.daemon.useFallbackStrategy=false\n```\n\n----------------------------------------\n\nTITLE: Declaring Named Binaries in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to declare binaries with custom names and specific build types in a Kotlin/Native project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbinaries {\n    executable(\"foo\", listOf(DEBUG)) {\n        // Binary configuration.\n    }\n\n    // It's possible to drop the list of build types\n    // (in this case, all the available build types will be used).\n    executable(\"bar\") {\n        // Binary configuration.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths in Klibs with Groovy DSL\nDESCRIPTION: Groovy DSL example for configuring the Kotlin compiler to use relative paths in klib artifacts for better security when publishing libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_18\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach {\n    kotlinOptions {\n        // $base is a base path of source files\n        freeCompilerArgs += \"-Xklib-relative-path-base=$base\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Toolchain for Kotlin Gradle Plugin (Groovy)\nDESCRIPTION: Configures the Kotlin Gradle plugin to employ a specific JVM toolchain using Groovy DSL, affecting related Java tasks. Replace `<MAJOR_JDK_VERSION>` with the selected JDK version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        languageVersion = JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)\n    }\n    // Or shorter:\n    jvmToolchain(<MAJOR_JDK_VERSION>)\n    // For example:\n    jvmToolchain(%jvmLTSVersionSupportedByKotlin%)\n}\n```\n\n----------------------------------------\n\nTITLE: External Enum Deprecation Example\nDESCRIPTION: This code snippet shows the deprecation of external enums and the recommended replacement using an external sealed class with object subclasses.  It provides both the old and the new implementation, highlighting the structure change.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n// Before\nexternal enum class ExternalEnum { A, B }\n\n// After\nexternal sealed class ExternalEnum {\n    object A: ExternalEnum\n    object B: ExternalEnum\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding an Operator Function in Kotlin\nDESCRIPTION: Example showing how to override an operator function in a subclass. When overriding an operator function, the 'operator' modifier can be omitted as it's inherited from the parent class or interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/operator-overloading.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass OrdersList: IndexedContainer {\n    override fun get(index: Int) { /*...*/ }   \n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Values in Kotlin\nDESCRIPTION: Shows how to access values in a map using the indexed access operator with its key.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Read-only map\n    val readOnlyJuiceMenu = mapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(\"The value of apple juice is: ${readOnlyJuiceMenu[\"apple\"]}\")\n    // The value of apple juice is: 100\n}\n```\n\n----------------------------------------\n\nTITLE: Using Underscores in Destructuring Declarations in Kotlin 1.1\nDESCRIPTION: Shows how to use underscores in destructuring declarations to ignore specific components. The example demonstrates ignoring the first component of a Result object.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Result(val value: Any, val status: String)\n\nfun getResult() = Result(42, \"ok\").also { println(\"getResult() returns $it\") }\n\nfun main(args: Array<String>) {\n//sampleStart\n    val (_, status) = getResult()\n//sampleEnd\n    println(\"status is '$status'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Disable DCE in Kotlin/JS with Gradle\nDESCRIPTION: This Groovy code snippet shows how to disable Dead Code Elimination (DCE) completely in a Kotlin/JS project using Gradle. Setting `dceOptions.devMode` to `true` within the `dceTask` block will prevent DCE from being performed during the build process. This is useful for development builds where faster compilation times are desired, as DCE can be a time-consuming process. Requires the kotlin gradle plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/javascript-dce.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            dceTask {\n                dceOptions.devMode = true\n            }\n        }\n        binaries.executable()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Android Target Kotlin\nDESCRIPTION: Configures the Android target in a Kotlin Multiplatform project. It demonstrates how to publish specific library variants using the `publishLibraryVariants` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget {\n        publishLibraryVariants(\"release\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Compiled Node.js Output File\nDESCRIPTION: Specifies the typical directory path within the project's build output where the compiled JavaScript file for the Node.js target can be found after running the 'build' Gradle task. 'your-module' should be replaced with the actual module name.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nbuild/js/packages/your-module/kotlin/\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotlin/Native New Inlining Optimization Pass\nDESCRIPTION: Compiler option for enabling the experimental inlining optimization pass in Kotlin/Native. This optimization is performed before code generation and can improve runtime performance of generated code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n-Xbinary=preCodegenInlineThreshold=40\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple CommonJS Module in JavaScript\nDESCRIPTION: A basic JavaScript example defining a CommonJS module named \"hello\". It exports a single function `sayHello` using the `module.exports` syntax. This function accepts a name parameter and displays an alert message.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.sayHello = function (name) { alert(\"Hello, \" + name); }\n```\n\n----------------------------------------\n\nTITLE: Disabling Hierarchical Structure Support in Kotlin Multiplatform Projects\nDESCRIPTION: Configuration to opt out of hierarchical structure support in Kotlin multiplatform projects by setting a Gradle property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_12\n\nLANGUAGE: Gradle\nCODE:\n```\n# gradle.properties\nkotlin.mpp.hierarchicalStructureSupport=false\n```\n\n----------------------------------------\n\nTITLE: Configure CInterops with Groovy DSL\nDESCRIPTION: Configures C interop settings for a specific target in Groovy DSL. This includes specifying the definition file, package name, compiler options, include directories, and header files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                    definitionFile = project.file(\"def-file.def\")\n\n                    // Package to place the Kotlin API generated.\n                    packageName 'org.sample'\n\n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts '-Ipath/to/headers'\n\n                    // Directories for header search (an analogue of the -I<path> compiler option).\n                    includeDirs.allHeaders(\"path1\", \"path2\")\n\n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(\"include/directory\", \"another/directory\")\n\n                    // Header files to be included in the bindings.\n                    header(\"path/to/header.h\")\n                    headers(\"path/to/header1.h\", \"path/to/header2.h\")\n                }\n\n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Representation of Kotlin Function\nDESCRIPTION: This Swift code shows how the Kotlin function 'foo' (which accepts a lambda) is represented in Swift. The Int is mapped to KotlinInt, and Unit is mapped to KotlinUnit.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(block: (KotlinInt) -> KotlinUnit)\n```\n\n----------------------------------------\n\nTITLE: Type Alias Visibility - Kotlin\nDESCRIPTION: This code snippet demonstrates the use of type aliases in actual declarations and how the visibility of the underlying type must be the same or more permissive than the expected declaration. It shows an example using an internal expected class and a public underlying class for the type alias.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect internal class Attribute                 // Visibility is internal\ninternal actual typealias Attribute = Expanded\n\nclass Expanded                                  // Visibility is public by default,\n                                                // which is more permissive\n```\n\n----------------------------------------\n\nTITLE: Kotlin Compiler Output for Delegating to Another Property\nDESCRIPTION: This snippet presents the compiler-generated code for a property delegated to another property reference (such as ::impl). The get and set functions access impl directly, bypassing the getValue/setValue operator mechanism and eliminating the need for KProperty objects. In addition, a getProp$delegate method is generated to provide reflection support. This is an important optimization for efficient code generation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C<Type> {\n    private var impl: Type = ...\n\n    var prop: Type\n        get() = impl\n        set(value) {\n            impl = value\n        }\n    \n    fun getProp$delegate(): Type = impl // This method is needed only for reflection\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Map.minus() Operator in Kotlin\nDESCRIPTION: Shows how to use the new minus operator to remove a key from a map, producing a new map without modifying the original.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val map = mapOf(\"key\" to 42)\n    val emptyMap = map - \"key\"\n    \n    println(\"map: $map\")\n    println(\"emptyMap: $emptyMap\")\n}\n```\n\n----------------------------------------\n\nTITLE: Log Message Indicating Custom Value Limit Exceeded\nDESCRIPTION: This snippet shows the log message that appears when the maximum number of custom values for Gradle Build Scan is exceeded. This indicates a need to reduce the number of custom values produced by the Kotlin plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nMaximum number of custom values (1,000) exceeded\n```\n\n----------------------------------------\n\nTITLE: Extracting Kotlin Metadata from Bytecode using ASM\nDESCRIPTION: This snippet demonstrates how to extract Kotlin metadata from bytecode using the ASM library. It includes helper functions for processing annotations, reading metadata, and converting class files to ClassNode objects for inspection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports the necessary libraries\nimport kotlin.metadata.jvm.*\nimport kotlin.metadata.*\nimport org.objectweb.asm.*\nimport org.objectweb.asm.tree.*\nimport java.io.File\n\n// Checks if an annotation refers to a specific name\nfun AnnotationNode.refersToName(name: String) =\n    desc.startsWith('L') && desc.endsWith(';') && desc.regionMatches(1, name, 0, name.length)\n\n// Retrieves annotation values by key\nprivate fun List<Any>.annotationValue(key: String): Any? {\n    for (index in (0 until size / 2)) {\n        if (this[index * 2] == key) {\n            return this[index * 2 + 1]\n        }\n    }\n    return null\n}\n\n// Defines a custom extension function to locate an annotation by its name in a ClassNode\nfun ClassNode.findAnnotation(annotationName: String, includeInvisible: Boolean = false): AnnotationNode? {\n    val visible = visibleAnnotations?.firstOrNull { it.refersToName(annotationName) }\n    if (!includeInvisible) return visible\n    return visible ?: invisibleAnnotations?.firstOrNull { it.refersToName(annotationName) }\n}\n\n// Operator to simplify retrieving annotation values\noperator fun AnnotationNode.get(key: String): Any? = values.annotationValue(key)\n\n// Extracts Kotlin metadata from a class node\nfun ClassNode.readMetadataLenient(): KotlinClassMetadata? {\n    val metadataAnnotation = findAnnotation(\"kotlin/Metadata\", false) ?: return null\n    @Suppress(\"UNCHECKED_CAST\")\n    val metadata = Metadata(\n        kind = metadataAnnotation[\"k\"] as Int?,\n        metadataVersion = (metadataAnnotation[\"mv\"] as List<Int>?)?.toIntArray(),\n        data1 = (metadataAnnotation[\"d1\"] as List<String>?)?.toTypedArray(),\n        data2 = (metadataAnnotation[\"d2\"] as List<String>?)?.toTypedArray(),\n        extraString = metadataAnnotation[\"xs\"] as String?,\n        packageName = metadataAnnotation[\"pn\"] as String?,\n        extraInt = metadataAnnotation[\"xi\"] as Int?\n    )\n    return KotlinClassMetadata.readLenient(metadata)\n}\n\n// Converts a file to a ClassNode for bytecode inspection\nfun File.toClassNode(): ClassNode {\n    val node = ClassNode()\n    this.inputStream().use { ClassReader(it).accept(node, ClassReader.SKIP_CODE) }\n    return node\n}\n\nfun main() {\n    val classFilePath = \"build/classes/kotlin/main/org/example/SampleClass.class\"\n    val classFile = File(classFilePath)\n\n    // Reads the bytecode and processes it into a ClassNode object\n    val classNode = classFile.toClassNode()\n\n    // Locates the @Metadata annotation and reads it leniently\n    val metadata = classNode.readMetadataLenient()\n    if (metadata != null && metadata is KotlinClassMetadata.Class) {\n        // Inspects the parsed metadata\n        val kmClass = metadata.kmClass\n\n        // Prints class details\n        println(\"Class name: ${kmClass.name}\")\n        println(\"Functions:\")\n        kmClass.functions.forEach { function ->\n            println(\"- ${function.name}, Visibility: ${function.visibility}\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Native Project with Gradle Groovy DSL\nDESCRIPTION: A Gradle Groovy DSL build script that configures a Kotlin Multiplatform project targeting native platforms. It sets up the Kotlin plugin, repository sources, and native target configuration for building executable binaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\n// build.gradle\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    macosArm64('native') {  // on macOS\n    // linuxArm64('native') // on Linux\n    // mingwX64('native')   // on Windows\n        binaries {\n            executable()\n        }\n    }\n}\n\nwrapper {\n    gradleVersion = '%gradleVersion%'\n    distributionType = 'BIN'\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin generic class Node\nDESCRIPTION: This Kotlin code defines a generic class `Node` with a type parameter `V`. It serves as a base class for demonstrating the issue of inaccessible generic types in multi-module projects and how Kotlin 2.0.0 handles them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n// Module one\nclass Node<V>(val value: V)\n```\n\n----------------------------------------\n\nTITLE: Referencing Kotlinx-datetime Library in Ecosystem Roadmap\nDESCRIPTION: Code snippet referencing the kotlinx-datetime library, which is mentioned in the roadmap as being promoted to Beta status.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/roadmap.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinx-datetime\n```\n\n----------------------------------------\n\nTITLE: Checking for Keys in Maps in Kotlin\nDESCRIPTION: Shows how to check if a specific key is included in a map using the .containsKey() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val readOnlyJuiceMenu = mapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(readOnlyJuiceMenu.containsKey(\"kiwi\"))\n    // true\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Documentation Comment in Kotlin\nDESCRIPTION: This example shows how to write a multiline documentation comment in Kotlin. Each line should start with an asterisk.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\n * This is a documentation comment\n * on multiple lines.\n */\n```\n\n----------------------------------------\n\nTITLE: Using KotlinBasePlugin Interface\nDESCRIPTION: Example of using the new KotlinBasePlugin interface to configure actions that should run when any Kotlin Gradle plugin is applied.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nproject.plugins.withType<org.jetbrains.kotlin.gradle.plugin.KotlinBasePlugin>() {\n    // Configure your action here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JDK 17 for Kotlin Maven Plugin\nDESCRIPTION: JVM configuration options needed when using JDK 17 with the Kotlin Maven plugin, to be placed in the .mvn/jvm.config file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n--add-opens=java.base/java.lang=ALL-UNNAMED\n--add-opens=java.base/java.io=ALL-UNNAMED\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Objects in Groovy Gradle Build Script\nDESCRIPTION: Shows how to enable data objects by setting the language version to 1.9 in a Groovy Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ncompileKotlin {\n    // ...\n    kotlinOptions.languageVersion = '1.9'\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Swift Package Manifest\nDESCRIPTION: This shell command validates the Swift package manifest by resetting the package and showing its dependencies in JSON format.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswift package reset && swift package show-dependencies --format json\n```\n\n----------------------------------------\n\nTITLE: Counting Items in Maps in Kotlin\nDESCRIPTION: Demonstrates how to get the number of items in a map using the .count() function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Read-only map\n    val readOnlyJuiceMenu = mapOf(\"apple\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(\"This map has ${readOnlyJuiceMenu.count()} key-value pairs\")\n    // This map has 3 key-value pairs\n}\n```\n\n----------------------------------------\n\nTITLE: Command-line Configuration for SAM-with-receiver Plugin\nDESCRIPTION: Command-line options for using the SAM-with-receiver plugin with the Kotlin compiler, specifying both the plugin JAR and annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=$KOTLIN_HOME/lib/sam-with-receiver-compiler-plugin.jar\n-P plugin:org.jetbrains.kotlin.samWithReceiver:annotation=com.my.SamWithReceiver\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/Wasm Application in Node.js\nDESCRIPTION: Gradle command to build and run the Kotlin/Wasm application in Node.js environment, which executes the WebAssembly binary with WASI compatibility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmWasiNodeRun\n```\n\n----------------------------------------\n\nTITLE: Using kapt in Kotlin Command Line Compiler\nDESCRIPTION: Bash command showing how to attach the kapt compiler plugin using the Xplugin option with the Kotlin compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=$KOTLIN_HOME/lib/kotlin-annotation-processing.jar\n```\n\n----------------------------------------\n\nTITLE: Using Duration API in Kotlin\nDESCRIPTION: Experimental Duration API for representing time durations with improved precision using Long values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.ExperimentalTime\n\n@ExperimentalTime\nfun main() {\n    val duration = Duration.milliseconds(120000)\n    println(\"There are ${duration.inWholeSeconds} seconds in ${duration.inWholeMinutes} minutes\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Granularity to Whole Program (None)\nDESCRIPTION: This line compiles the whole Kotlin/JS project into a single `.js` file.  Add it to `gradle.properties`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nkotlin.js.ir.output.granularity=whole-program // 'per-module' is the default\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces with Kotlin Inline Classes\nDESCRIPTION: Shows that Kotlin inline classes can implement interfaces. The `Name` inline class implements the `Printable` interface and overrides the `prettyPrint` function. Calls to interface methods on inline class instances are still generally optimized, often invoked as static methods.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Printable {\n    fun prettyPrint(): String\n}\n\n@JvmInline\nvalue class Name(val s: String) : Printable {\n    override fun prettyPrint(): String = \"Let's $s!\"\n}\n\nfun main() {\n    val name = Name(\"Kotlin\")\n    println(name.prettyPrint()) // Still called as a static method\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Library Configuration (Kotlin DSL)\nDESCRIPTION: Complete example of configuring a native library with all available options in Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinArtifacts {\n    Native.Library(\"myslib\") {\n        target = linuxX64\n        isStatic = false\n        modes(DEBUG)\n        addModule(project(\":lib\"))\n        kotlinOptions {\n            verbose = false\n            freeCompilerArgs += \"-Xmen=pool\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for Lombok with kapt\nDESCRIPTION: This XML snippet demonstrates how to configure the Maven Compiler Plugin to use Lombok's annotation processor when using kapt.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.5.1</version>\n    <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <annotationProcessorPaths>\n            <annotationProcessorPath>\n                <groupId>org.projectlombok</groupId>\n                <artifactId>lombok</artifactId>\n                <version>${lombok.version}</version>\n            </annotationProcessorPath>\n        </annotationProcessorPaths>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Overriding finalize() in Kotlin\nDESCRIPTION: Demonstrates how to override the `finalize()` method in Kotlin without using the `override` keyword. The function must not be private.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nclass C {\n    protected fun finalize() {\n        // finalization logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VideoList with Props\nDESCRIPTION: Updates VideoList component to use props for video data.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nval VideoList = FC<VideoListProps> { props ->\n    for (video in props.videos) {\n        p {\n            key = video.id.toString()\n            +\"${video.speaker}: ${video.title}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Propagating Opt-in Requirements in Kotlin\nDESCRIPTION: Shows how to propagate opt-in requirements to API consumers by marking declarations with the opt-in requirement annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@MyDateTime\nfun getDate(): Date {\n    // OK: the function requires opt-in as well\n    val dateProvider: DateProvider\n    // ...\n}\n\nfun displayDate() {\n    println(getDate())\n    // Error: getDate() requires opt-in\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler in Groovy Gradle Build Script\nDESCRIPTION: Shows how to enable the experimental K2 compiler in a Groovy Gradle build script by setting the kotlinOptions.useK2 property to true.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncompileKotlin {\n    kotlinOptions.useK2 = true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Incremental Compilation in Kotlin Maven\nDESCRIPTION: Adds a property to enable incremental compilation, which improves build speed by only recompiling changed files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Declaring External Property Getters/Setters in Kotlin\nDESCRIPTION: Demonstrates how to declare property getters and setters as `external`, indicating they are implemented in native code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nvar myProperty: String\n    external get\n    external set\n```\n\n----------------------------------------\n\nTITLE: Calling wait() on Java Object in Kotlin\nDESCRIPTION: Shows how to call the `wait()` method, which is not directly available on `Any` in Kotlin, by casting to `java.lang.Object`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\n(foo as java.lang.Object).wait()\n```\n\n----------------------------------------\n\nTITLE: Declaring External Function for JNI in Kotlin\nDESCRIPTION: Shows how to declare a function that is implemented in native code (C or C++) using the `external` modifier.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal fun foo(x: Int): Double\n```\n\n----------------------------------------\n\nTITLE: Accessing KClass from Java\nDESCRIPTION: Demonstrates how to convert a Java Class object to a Kotlin KClass when calling Kotlin methods that require KClass parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin.jvm.JvmClassMappingKt.getKotlinClass(MainView.class)\n```\n\n----------------------------------------\n\nTITLE: Creating Sets from Elements in Kotlin\nDESCRIPTION: Demonstrates how to create different types of sets in Kotlin by providing elements as arguments or creating empty sets with type specification.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval numbersSet = setOf(\"one\", \"two\", \"three\", \"four\")\nval emptySet = mutableSetOf<String>()\n```\n\n----------------------------------------\n\nTITLE: Configuration Names for Compilation Dependencies in Kotlin Multiplatform (After)\nDESCRIPTION: The new naming pattern for dependencies on the jvm compilation after the breaking change, adding 'Compilation' postfix.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\njvmCompilation<Scope>\n```\n\n----------------------------------------\n\nTITLE: Declaring Repeatable Annotations in Kotlin\nDESCRIPTION: Demonstrates how to declare a repeatable annotation in Kotlin using @Repeatable, which automatically generates a containing annotation class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Repeatable \nannotation class Tag(val name: String)\n\n// The compiler generates @Tag.Container containing annotation\n```\n\n----------------------------------------\n\nTITLE: Serializing Unsigned Types in Kotlin\nDESCRIPTION: Demonstration of serializing unsigned primitive types (UByte in this case) using kotlinx.serialization library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\nclass Counter(val counted: UByte, val description: String)\nfun main() {\n   val counted = 239.toUByte()\n   println(Json.encodeToString(Counter(counted, \"tries\")))\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic JavaScript Module Loading in Kotlin\nDESCRIPTION: Demonstrates how to dynamically load JavaScript modules at runtime using the import statement within js blocks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval myPackage = js(\"import('my-package')\")\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Code for C Interoperability in Kotlin/Native\nDESCRIPTION: This snippet demonstrates how to update Kotlin code to work with C definitions. It imports the necessary interop module, uses the ExperimentalForeignApi annotation, and calls C-defined functions with various data types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-primitive-data-types-from-c.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n  \n    ints(1, 2, 3, 4)\n    uints(5u, 6u, 7u, 8u)\n    doubles(9.0f, 10.0)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Inline Class in Kotlin\nDESCRIPTION: Demonstrates how to define an inline class with a single property. Inline classes are a new feature in Kotlin 1.3 that allow for more efficient runtime representation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ninline class Name(val s: String)\n```\n\n----------------------------------------\n\nTITLE: Defining Kotlin Extension Function for Nullable Receiver\nDESCRIPTION: Provides an example of defining an extension function (`toString`) for a nullable receiver type (`Any?`). It includes a null check using `this == null` within the function body to handle null values gracefully, returning \"null\" if the receiver is null, otherwise calling the standard `toString()`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/extensions.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Any?.toString(): String {\n    if (this == null) return \"null\"\n    // After the null check, 'this' is autocast to a non-nullable type, so the toString() below\n    // resolves to the member function of the Any class\n    return toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collections with Filtering Operations in Kotlin\nDESCRIPTION: Demonstrates creating a new collection by filtering elements from an existing collection based on a predicate.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart \n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")  \n    val longerThan3 = numbers.filter { it.length > 3 }\n    println(longerThan3)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Integration in Kotlin Multiplatform Projects\nDESCRIPTION: Example of using the Kotlin CocoaPods Gradle plugin to configure CocoaPod name, version, and additional Podspec attributes in a Kotlin multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    cocoapods {\n        version = \"1.0\"\n        name = \"MyCocoaPod\"\n        extraSpecAttributes[\"social_media_url\"] = 'https://twitter.com/kotlin'\n        extraSpecAttributes[\"vendored_frameworks\"] = 'CustomFramework.xcframework'\n        extraSpecAttributes[\"libraries\"] = 'xml'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Example Showing Object Reclamation Differences\nDESCRIPTION: Demonstrates how Swift objects are reclaimed differently when used directly in Swift versus when passed to Kotlin, showing that objects passed to Kotlin are reclaimed only during garbage collection.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nclass SwiftExample {\n    deinit {\n        print(\"SwiftExample deinit\")\n    }\n}\n\nfunc test() {\n    swiftTest()\n    kotlinTest()\n}\n\nfunc swiftTest() {\n    print(SwiftExample())\n    print(\"swiftTestFinished\")\n}\n\nfunc kotlinTest() {\n    KotlinExample().action(arg: SwiftExample())\n    print(\"kotlinTest finished\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/JS Browser Task with Continuous Build (Bash)\nDESCRIPTION: Executes the `jsBrowserDevelopmentRun` task with Gradle's continuous build feature enabled using the `--continuous` flag. This automatically rebuilds the application and refreshes the browser when source files change.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsBrowserDevelopmentRun --continuous\n```\n\n----------------------------------------\n\nTITLE: Prohibiting suspend Calls with Trailing Lambdas in Kotlin\nDESCRIPTION: Describes an incompatible source change in Kotlin's core language starting from version 1.6. Calls to functions literally named `suspend` which have a single functional type argument passed as a trailing lambda (e.g., `suspend { ... }`) are no longer allowed. This was previously a warning since 1.3.0 and becomes an error in 1.6.0. Future versions (>= 1.7.0) will parse `suspend {` as the suspend keyword itself.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/JS IR Backend in Gradle\nDESCRIPTION: Gradle configuration to enable the IR backend for Kotlin/JS projects. Shows how to set up executable binaries using the new Gradle DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js(IR) { // or: LEGACY, BOTH\n        // ...\n    }\n    binaries.executable()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Aliases for Collection Types in Kotlin\nDESCRIPTION: Creates type aliases for complex collection types to improve code readability. The example shows how to create a simpler name for a Set of Network.Node objects and a generic MutableMap with nested MutableList values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-aliases.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias NodeSet = Set<Network.Node>\n\ntypealias FileTable<K> = MutableMap<K, MutableList<File>>\n```\n\n----------------------------------------\n\nTITLE: Float Comparison with Tolerance\nDESCRIPTION: Demonstrates how to compare floating-point numbers with a specified tolerance using assertEquals().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun test() {\n    val x = sin(PI)\n\n    // precision parameter\n    val tolerance = 0.000001\n\n    assertEquals(0.0, x, tolerance)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting 2D data to Map for density plot\nDESCRIPTION: This code snippet converts the generated 2D data points (xy0, xy1, xy2) into a `Map` format suitable for use with Lets-Plot. It combines the x and y coordinates from each distribution into two lists and then creates a map with keys \"x\" and \"y\", where the values are the combined lists of x and y coordinates, respectively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/lets-plot.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = mapOf(\n    \"x\" to (xy0.map { it[0] } + xy1.map { it[0] } + xy2.map { it[0] }).toList(),\n    \"y\" to (xy0.map { it[1] } + xy1.map { it[1] } + xy2.map { it[1] }).toList()\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Superclass in KSP\nDESCRIPTION: This Kotlin snippet shows how to access the superclass of a class declaration using KSP. It filters through 'superTypes' to identify superclass declarations without requiring type resolution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nksClassDeclaration.superTypes\n    .map { it.resolve() }\n    .filter { (it?.declaration as? KSClassDeclaration)?.classKind == ClassKind.CLASS }\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library Configuration in Kotlin\nDESCRIPTION: Shows how to configure a static library build for iOS Arm64 platform using Kotlin DSL in Gradle. This generates platform-specific static objects with C language headers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-faq.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64(\"mylib\") {\n        binaries.staticLib()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Language Version in Gradle (Kotlin DSL)\nDESCRIPTION: Gradle configuration using Kotlin DSL to enable language version 1.9 for Kotlin compilation tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks\n    .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()\n    .configureEach {\n        compilerOptions\n            .languageVersion\n            .set(\n                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9\n            )\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Compiler for Both Backends in Gradle (Groovy)\nDESCRIPTION: This code snippet shows how to configure the Kotlin compiler to generate artifacts for both the default backend and the IR compiler backend in a Gradle build script. This is achieved by setting the compiler option to `BOTH` within the `js` block. This setting ensures compatibility with both types of Kotlin projects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    js(BOTH) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiler options from file\nDESCRIPTION: Shows the usage of an argument file to pass compiler options. The file contains options and source file paths separated by whitespace. Values with whitespace should be surrounded by quotes, with quotation marks escaped by a backslash.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n-include-runtime -d hello.jar hello.kt\n```\n\n----------------------------------------\n\nTITLE: Equality Semantics and Value Comparisons in Kotlin/JS\nDESCRIPTION: Demonstrates how the Kotlin referential equality operator (===) is mapped to the JavaScript strict equality operator. Shows differences in boolean results for substring and number comparisons on Kotlin/JS versus other platforms due to JavaScript's underlying type model (all numeric types as Number) and string interning. Highlights platform-specific behavior relevant for correctness in cross-platform Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val name = \"kotlin\"\n    val value1 = name.substring(0, 1)\n    val value2 = name.substring(0, 1)\n\n    println(if (value1 === value2) \"yes\" else \"no\")\n    // Prints 'yes' on Kotlin/JS\n    // Prints 'no' on other platforms\n}\n\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(1.0 as Any === 1 as Any)\n    // Prints 'true' on Kotlin/JS\n    // Prints 'false' on other platforms\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining C Function Prototypes\nDESCRIPTION: C header file defining function prototypes with various primitive data types as parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-primitive-data-types-from-c.md#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifndef LIB2_H_INCLUDED\n#define LIB2_H_INCLUDED\n\nvoid ints(char c, short d, int e, long f);\nvoid uints(unsigned char c, unsigned short d, unsigned int e, unsigned long f);\nvoid doubles(float a, double b);\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: String Iteration Kotlin\nDESCRIPTION: This snippet iterates over the characters of a string using a `for` loop and prints each character to the console. The example uses the indexing operation s[i] to access each character in the string.  This provides a basic way to process strings character by character.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val str = \"abcd\" \n//sampleStart\n    for (c in str) {\n        println(c)\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Compiler Execution Strategy in Properties\nDESCRIPTION: Example of setting the compiler execution strategy in gradle.properties file\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_24\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.compiler.execution.strategy=out-of-process\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Integer Conversions in Kotlin/Native\nDESCRIPTION: This snippet illustrates the use of implicit integer conversions in Kotlin/Native for C interop. It demonstrates how a signed integer value can be assigned to an unsigned integer type, which is enabled by a compiler option. Requires the `-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion` compiler option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval today = NSDate()\nval tomorrow = NSCalendar.currentCalendar.dateByAddingUnit(\n    unit = NSCalendarUnitDay,\n    value = 1,\n    toDate = today,\n    options = 0\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Java Generic Invariance and Runtime Safety\nDESCRIPTION: Demonstrates why Java generic types like `List` are invariant (`List<String>` is not a subtype of `List<Object>`). It shows the compile-time error Java provides and hypothetically illustrates the `ClassCastException` that would occur at runtime if the assignment were allowed, preventing unsafe operations like adding an `Integer` to a `List<String>`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Java\nList<String> strs = new ArrayList<String>();\n\n// Java reports a type mismatch here at compile-time.\nList<Object> objs = strs;\n\n// What if it didn't?\n// We would be able to put an Integer into a list of Strings.\nobjs.add(1);\n\n// And then at runtime, Java would throw\n// a ClassCastException: Integer cannot be cast to String\nString s = strs.get(0); \n```\n\n----------------------------------------\n\nTITLE: Setting Webpack Major Version in gradle.properties (Properties)\nDESCRIPTION: This line, when added to the project's `gradle.properties` file, instructs the Kotlin Multiplatform Gradle plugin to use a specific major version of webpack (version 4 in this example). This can be necessary for compatibility with projects created with older plugin versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_22\n\nLANGUAGE: none\nCODE:\n```\nkotlin.js.webpack.major.version=4\n```\n\n----------------------------------------\n\nTITLE: Referencing Kotlin/Wasm WASI Target in Compiler Roadmap\nDESCRIPTION: Code snippet showing the Kotlin/Wasm WASI target identifier used in the compiler development roadmap, specifically for switching libraries to WASI Preview 2.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/roadmap.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwasm-wasi\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories for Kotlin Projects\nDESCRIPTION: Defines the source and test source directories for Kotlin code in the Maven build configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>\n    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Gradle Old Backend Configuration (Groovy)\nDESCRIPTION: Gradle configuration using Groovy to enable the old JVM backend instead of the new IR backend.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile) {\n  kotlinOptions.useOldBackend = true\n}\n```\n\n----------------------------------------\n\nTITLE: Get Kotlin compiler help\nDESCRIPTION: This command displays all available options for the Kotlin compiler, providing information on how to use the compiler effectively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc -help\n```\n\n----------------------------------------\n\nTITLE: Framework Configuration (Groovy DSL)\nDESCRIPTION: Example of configuring an Objective-C framework in Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinArtifacts {\n    it.native.Framework(\"myframe\") {\n        modes(DEBUG, RELEASE)\n        target = iosArm64\n        it.static = false\n        kotlinOptions {\n            verbose = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Addition in Kotlin Notebook\nDESCRIPTION: This code snippet demonstrates a simple addition operation within a Kotlin Notebook cell. It calculates the sum of 10 and 10.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-create.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n10 + 10\n```\n\n----------------------------------------\n\nTITLE: Serializing Inline Classes in Kotlin\nDESCRIPTION: Example of making an inline class serializable using the @Serializable annotation from kotlinx.serialization library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ninline class Color(val rgb: Int)\n```\n\n----------------------------------------\n\nTITLE: Kotlin Translation of Java NotNull Set\nDESCRIPTION: This Kotlin code shows the equivalent signature when the Java code from the previous example is used in Kotlin.  The `@NotNull` annotations from Java are translated to non-nullable types in Kotlin. The return type and parameter are both collections of non-nullable strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun toSet(elements: (Mutable)Collection<String>) : (Mutable)Set<String> { ... }\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output in Kotlin\nDESCRIPTION: Demonstrates how to output plain text in a Kotlin Notebook. Any variable value or expression can be implicitly output as text. Uses string interpolation to include variable values in the output string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval a1: Int = 1\nval a2: Int = 2\nvar a3: Int? = a1 + a2\n\n\"My answer is $a3\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SAM-with-receiver Annotations in Gradle\nDESCRIPTION: Configuration to specify which annotations should be treated as SAM-with-receiver annotations in the Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nsamWithReceiver {\n    annotation(\"com.my.SamWithReceiver\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Standard Library Dependency\nDESCRIPTION: Adds the Kotlin standard library as a dependency to the Maven project, referencing the version defined in properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.jetbrains.kotlin</groupId>\n        <artifactId>kotlin-stdlib</artifactId>\n        <version>${kotlin.version}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Gradle Old Backend Configuration (Kotlin DSL)\nDESCRIPTION: Gradle configuration using Kotlin DSL to enable the old JVM backend instead of the new IR backend.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile> {\n   kotlinOptions.useOldBackend = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Sets in Gradle\nDESCRIPTION: Example of source set configuration in a Kotlin Multiplatform project's Gradle build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // Targets declaration:\n    // …\n\n    // Source set declaration:\n    sourceSets {\n        commonMain {\n            // Configure the commonMain source set\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Registry\nDESCRIPTION: Example of Yarn configuration using .yarnrc file to specify a custom npm registry.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nregistry \"http://my.registry/api/npm/\"\n```\n\n----------------------------------------\n\nTITLE: Overriding clone() from Java's Cloneable\nDESCRIPTION: Shows how to override the `clone()` method in Kotlin by extending the `kotlin.Cloneable` interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Example : Cloneable {\n    override fun clone(): Any { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JvmSuppressWildcards Annotation in Kotlin\nDESCRIPTION: Example of suppressing wildcard generation using the @JvmSuppressWildcards annotation in Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun unboxBase(box: Box<@JvmSuppressWildcards Base>): Base = box.value\n```\n\n----------------------------------------\n\nTITLE: System Memory Allocator Configuration\nDESCRIPTION: Compiler option to switch to system memory allocator for memory consumption optimization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n-Xallocator=std\n```\n\n----------------------------------------\n\nTITLE: SAM Conversion Example in Kotlin\nDESCRIPTION: Demonstrates how Kotlin supports SAM conversions for Java interfaces with a single non-default method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nval runnable = Runnable { println(\"This runs in a runnable\") }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval executor = ThreadPoolExecutor()\n// Java signature: void execute(Runnable command)\nexecutor.execute { println(\"This runs in a thread pool\") }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nexecutor.execute(Runnable { println(\"This runs in a thread pool\") })\n```\n\n----------------------------------------\n\nTITLE: Named Library Configuration (Groovy DSL)\nDESCRIPTION: Configuring a named native library using Groovy DSL syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinArtifacts {\n    it.native.Library(\"mylib\") {\n        // Binary configuration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Suspending Function in Kotlin\nDESCRIPTION: Example of defining a suspending function in Kotlin that can be called from Swift or Objective-C code. This function takes an integer ID and returns a string asynchronously.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun queryData(id: Int): String = ...\n```\n\n----------------------------------------\n\nTITLE: Sample Script with Maven Dependencies\nDESCRIPTION: Example Kotlin script that demonstrates using external Maven dependencies with custom annotations for repository and dependency declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:Repository(\"https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven\")\n@file:DependsOn(\"org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.3\")\n\nimport kotlinx.html.*; import kotlinx.html.stream.*; import kotlinx.html.attributes.*\n\nval addressee = \"World\"\n\nprint(\n    createHTML().html {\n        body {\n            h1 { +\"Hello, $addressee!\" }\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings using String.split() with Regex Escaping in Java\nDESCRIPTION: Shows how to split a string in Java using `String.split()`. Because `split` takes a regular expression, the literal period character (`.`) must be escaped with backslashes (`\\\\.`). `Arrays.toString` is used to print the resulting array.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Java\nSystem.out.println(Arrays.toString(\"Sometimes.text.should.be.split\".split(\"\\\\.\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring JS IR Member Name Minification in Kotlin\nDESCRIPTION: Shows how to disable member name minification in Kotlin/JS IR compiler using the -Xir-minimized-member-names compiler flag in the build configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js(IR) {\n        compilations.all {\n            compileKotlinTask.kotlinOptions.freeCompilerArgs += listOf(\"-Xir-minimized-member-names=false\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Reverting to Pre-1.7 Java Type Nullability Enhancement (Kotlin)\nDESCRIPTION: This Kotlin compiler flag allows temporary reversion to the type nullability interpretation rules present before Kotlin 1.7. It prevents the compiler from inferring more precise nullability from Java type annotations, which could otherwise lead to new errors in Kotlin 1.7+.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-TypeEnhancementImprovementsInStrictMode\n```\n\n----------------------------------------\n\nTITLE: Defining C String Functions Header\nDESCRIPTION: C header file defining functions for string manipulation between C and Kotlin\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-strings-from-c.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#ifndef LIB2_H_INCLUDED\n#define LIB2_H_INCLUDED\n\nvoid pass_string(char* str);\nchar* return_string();\nint copy_string(char* str, int size);\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Array Interoperability Example (Kotlin)\nDESCRIPTION: Illustrates how to convert between Kotlin's `List` and JavaScript's `JsArray` using adapter functions. The example shows how to convert a `List<JsString>` to `JsArray<JsString>` and back to Kotlin types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nval list: List<JsString> =\n    listOf(\"Kotlin\", \"Wasm\").map { it.toJsString() }\n\n// Uses .toJsArray() to convert List or Array to JsArray\nval jsArray: JsArray<JsString> = list.toJsArray()\n\n// Uses .toArray() and .toList() to convert it back to Kotlin types \nval kotlinArray: Array<JsString> = jsArray.toArray()\nval kotlinList: List<JsString> = jsArray.toList()\n```\n\n----------------------------------------\n\nTITLE: Configuring Lombok Plugin in Gradle (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to apply the Kotlin Lombok plugin and the Lombok plugin in a Gradle build script using the Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.plugin.lombok' version '%kotlinVersion%'\n    id 'io.freefair.lombok' version '%lombokVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Cache for kapt Tasks in Gradle - Groovy\nDESCRIPTION: Shows how to completely disable use of the Gradle build cache for kapt tasks by setting `useBuildCache = false` in the kapt configuration block. This is important when annotation processors' caching can lead to incorrect builds.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nkapt {\n    useBuildCache = false\n}\n```\n\n----------------------------------------\n\nTITLE: Manual JVM Target Configuration for Android (Groovy)\nDESCRIPTION: Sets `sourceCompatibility` and `targetCompatibility` for Android projects via Groovy DSL for AGP versions below 8.1.0-alpha09. Replace `<MAJOR_JDK_VERSION>` with the desired JDK version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n    compileOptions {\n        sourceCompatibility = <MAJOR_JDK_VERSION>\n        targetCompatibility = <MAJOR_JDK_VERSION>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between Collections and Sequences in Kotlin\nDESCRIPTION: Shows how to use flatMap to convert between different collection types. New overloads allow transformations from Iterable to Sequence and vice versa, making it easier to work with different collection types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val list = listOf(\"kot\", \"lin\")\n    val lettersList = list.flatMap { it.asSequence() }\n    val lettersSeq = list.asSequence().flatMap { it.toList() }    \n//sampleEnd\n    println(lettersList)\n    println(lettersSeq.toList())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator with vararg and Named Arguments - Kotlin\nDESCRIPTION: Displays how to declare a function using 'vararg' and how to call it by passing an array with the spread operator and a named argument. Useful when handling variable argument lists dynamically.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/functions.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(vararg strings: String) { /*...*/ }\n\nfoo(strings = *arrayOf(\"a\", \"b\", \"c\"))\n```\n\n----------------------------------------\n\nTITLE: Generating Production Artifacts for Kotlin/Wasm Application\nDESCRIPTION: Command to build production-ready artifacts for the Kotlin/Wasm Compose Multiplatform application using Gradle from the command line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-get-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmJsBrowserDistribution\n```\n\n----------------------------------------\n\nTITLE: Using JvmWildcard Annotation in Kotlin\nDESCRIPTION: Example of forcing wildcard generation using the @JvmWildcard annotation in Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nfun boxDerived(value: Derived): Box<@JvmWildcard Derived> = Box(value)\n```\n\n----------------------------------------\n\nTITLE: Swift Method Declaration\nDESCRIPTION: These Swift code snippets demonstrate calling the `moveTo` method on a `player` object with different arguments. These functions will be translated to kotlin requiring named parameters due to the collision on method name\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n[player moveTo:LEFT byMeters:17]\n[player moveTo:UP byInches:42]\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Podspec Repository Library in Kotlin Code\nDESCRIPTION: Shows how to import a Pod library from a custom Podspec repository in Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport cocoapods.example.*\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Operator for Type Inference in Kotlin Generics\nDESCRIPTION: This example demonstrates how to use the underscore operator (_) to automatically infer type arguments in Kotlin. The code showcases a generic class hierarchy with different implementations and a runner object that uses reified type parameters to create instances and execute methods, while allowing type inference with the underscore operator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/generics.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class SomeClass<T> {\n    abstract fun execute() : T\n}\n\nclass SomeImplementation : SomeClass<String>() {\n    override fun execute(): String = \"Test\"\n}\n\nclass OtherImplementation : SomeClass<Int>() {\n    override fun execute(): Int = 42\n}\n\nobject Runner {\n    inline fun <reified S: SomeClass<T>, T> run() : T {\n        return S::class.java.getDeclaredConstructor().newInstance().execute()\n    }\n}\n\nfun main() {\n    // T is inferred as String because SomeImplementation derives from SomeClass<String>\n    val s = Runner.run<SomeImplementation, _>()\n    assert(s == \"Test\")\n\n    // T is inferred as Int because OtherImplementation derives from SomeClass<Int>\n    val n = Runner.run<OtherImplementation, _>()\n    assert(n == 42)\n}\n```\n\n----------------------------------------\n\nTITLE: Making Kotlin/Native Frameworks Static with Kotlin DSL\nDESCRIPTION: Configures Kotlin/Native frameworks to be static instead of dynamic using Kotlin DSL. This is necessary when rebuilding from bitcode to ensure proper symbolication, as App Store may discard .dSYM files for dynamic frameworks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-ios-symbolication.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.withType<org.jetbrains.kotlin.gradle.plugin.mpp.Framework> {\n            isStatic = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ki shell with Homebrew on macOS\nDESCRIPTION: This command installs the Kotlin Interactive Shell (ki shell) using Homebrew package manager on macOS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/run-code-snippets.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ki\n```\n\n----------------------------------------\n\nTITLE: Printing Collection Elements in Kotlin\nDESCRIPTION: Shows a function to print all elements from a Collection<String> using a for loop, highlighting the flexibility of passing different collection types to the function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collections-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun printAll(strings: Collection<String>) {\n    for(s in strings) print(\"$s \")\n    println()\n}\n\nfun main() {\n    val stringList = listOf(\"one\", \"two\", \"one\")\n    printAll(stringList)\n\n    val stringSet = setOf(\"one\", \"two\", \"three\")\n    printAll(stringSet)\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Annotation Classes in Kotlin\nDESCRIPTION: Demonstrates the new experimental feature of instantiating annotation classes directly in code, which covers similar use cases as Java's annotation interface implementation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class InfoMarker(val info: String)\n\nfun processInfo(marker: InfoMarker) = ...\n\nfun main(args: Array<String>) {\n    if (args.size != 0)\n        processInfo(getAnnotationReflective(args))\n    else\n        processInfo(InfoMarker(\"default\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Support for Functions with Large Arity\nDESCRIPTION: This snippet illustrates Kotlin 1.3's support for functions with a large number of parameters, extending beyond the previous limit of 22 parameters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun trueEnterpriseComesToKotlin(block: (Any, Any, ... /* 42 more */, Any) -> Any) {\n    block(Any(), Any(), ..., Any())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Multiplatform Library Dependency in Groovy\nDESCRIPTION: This snippet shows how to add a shared multiplatform library dependency in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation 'io.ktor:ktor-client-core:%ktorVersion%'\n            }\n        }\n        androidMain {\n            dependencies {\n                // dependency to platform part of ktor-client will be added automatically\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Target HTML Structure for Web App Draft\nDESCRIPTION: This HTML snippet shows the intended static structure for the initial draft of the \"KotlinConf Explorer\" web application. It includes sections for displaying videos to watch, videos already watched, and a placeholder for the currently selected video player. This structure will be recreated using Kotlin's type-safe HTML DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>KotlinConf Explorer</h1>\n<div>\n    <h3>Videos to watch</h3>\n    <p>John Doe: Building and breaking things</p>\n    <p>Jane Smith: The development process</p>\n    <p>Matt Miller: The Web 7.0</p>\n    <h3>Videos watched</h3>\n    <p>Tom Jerry: Mouseless development</p>\n</div>\n<div>\n    <h3>John Doe: Building and breaking things</h3>\n    <img src=\"https://via.placeholder.com/640x360.png?text=Video+Player+Placeholder\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuration Names for Compilation Dependencies in Kotlin Multiplatform (Before)\nDESCRIPTION: The old naming pattern for dependencies on the jvm compilation before the breaking change.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\njvm<Scope>\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Formatters\nDESCRIPTION: Gradle configuration to enable custom formatters for Kotlin/Wasm debugging in production builds\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-debugging.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    wasmJs {\n        // ...\n\n        compilerOptions {\n            freeCompilerArgs.add(\"-Xwasm-debugger-custom-formatters\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Kotlin Multiplatform Targets (Groovy)\nDESCRIPTION: Basic configuration of Android and iOS targets in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Class Declaration\nDESCRIPTION: Shows the declaration of an inline class using the value modifier and @JvmInline annotation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class Password(val s: String)\n```\n\n----------------------------------------\n\nTITLE: Removing a Library with klib\nDESCRIPTION: Shows how to remove a Kotlin/Native library from the default repository using the klib utility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ klib remove <name>\n```\n\n----------------------------------------\n\nTITLE: Using JSpecify Nullness Annotations in Java\nDESCRIPTION: Example showing how to use JSpecify nullness annotations in Java code to provide nullability information that Kotlin can interpret correctly. The example demonstrates defining nullable and non-nullable return types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// JavaClass.java\nimport org.jspecify.nullness.*;\n\n@NullMarked\npublic class JavaClass {\n  public String notNullableString() { return \"\"; }\n  public @Nullable String nullableString() { return \"\"; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Old JVM Backend with Kotlin Gradle DSL\nDESCRIPTION: Code snippet showing how to configure a Kotlin project in Gradle (Kotlin DSL) to use the old JVM backend instead of the new IR-based backend introduced in Kotlin 1.5.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-15.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile> {\n  kotlinOptions.useOldBackend = true\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying KSP Command-Line Plugin JAR for kotlinc\nDESCRIPTION: This snippet shows the command-line argument `-Xplugin` used to specify the path to the KSP command-line processing JAR (`symbol-processing-cmdline-*.jar`) when invoking the `kotlinc` compiler. This specific JAR is required for command-line usage.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-command-line.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=/path/to/symbol-processing-cmdline-%kspSupportedKotlinVersion%-%kspVersion%.jar\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Example in Kotlin Tests\nDESCRIPTION: Demonstrates usage of the new assertIs<T> function for type checking in Kotlin tests.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun testFunction() {\n    val s: Any = \"test\"\n    assertIs<String>(s)  // throws AssertionError mentioning the actual type of s if the assertion fails\n    // can now print s.length because of contract in assertIs\n    println(\"${s.length}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GC Logging in Gradle\nDESCRIPTION: Compiler option to enable garbage collection logging for monitoring GC performance.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n-Xruntime-logs=gc=info\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Kotlin Multiplatform Targets\nDESCRIPTION: Basic configuration of Android and iOS targets in a Kotlin Multiplatform project using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Library Contents with klib\nDESCRIPTION: Shows how to use the klib utility to list the contents of a Kotlin/Native library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ klib contents <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Symbols in Kotlin/Native with Kotlin DSL\nDESCRIPTION: Sets the -Xadd-light-debug compiler flag to enable or disable .dSYM generation for Kotlin/Native targets using Kotlin DSL. This controls whether debug symbols are generated for release binaries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-ios-symbolication.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.all {\n            freeCompilerArgs += \"-Xadd-light-debug={enable|disable}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Objective-C Header with Exported KDoc\nDESCRIPTION: Example showing how KDoc comments from Kotlin are exported to Objective-C headers, making documentation available to Objective-C and Swift consumers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n/**\n * Prints the sum of the arguments.\n * Properly handles the case when the sum doesn't fit in 32-bit integer.\n */\n+ (void)printSumA:(int32_t)a b:(int32_t)b __attribute__((swift_name(\"printSum(a:b:)\")));\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin (JVM) Source with Multiple Roots using kotlinc Ant Task - XML\nDESCRIPTION: This XML Ant build script shows how to use the kotlinc Ant task to compile multiple Kotlin source roots into a single JAR. Each <src> element specifies a different source directory. It requires kotlin-ant.jar and expects the ${kotlin.lib} property to locate it. The <kotlinc> task's output attribute sets the destination JAR. This is ideal for projects with split source trees.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\\\"Ant Task Test\\\" default=\\\"build\\\">\\n    <typedef resource=\\\"org/jetbrains/kotlin/ant/antlib.xml\\\" classpath=\\\"${kotlin.lib}/kotlin-ant.jar\\\"/>\\n\\n    <target name=\\\"build\\\">\\n        <kotlinc output=\\\"hello.jar\\\">\\n            <src path=\\\"root1\\\"/>\\n            <src path=\\\"root2\\\"/>\\n        </kotlinc>\\n    </target>\\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuration Names for Test Compilation Dependencies in Kotlin Multiplatform (After)\nDESCRIPTION: The new naming pattern for dependencies on the jvmTest compilation after the breaking change, adding 'Compilation' postfix.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\njvmTestCompilation<Scope>\n```\n\n----------------------------------------\n\nTITLE: Aligning Regex.replace Behavior in Kotlin/JS with JVM\nDESCRIPTION: Documents a behavioral incompatible change in the `Regex.replace` function for Kotlin/JS standard library, starting from version 1.6.0. When using a replacement pattern string containing group references (like `$1`), Kotlin/JS will now follow the same syntax and behavior as Kotlin/JVM, ensuring consistency across platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Executing HTTP Requests with IntelliJ IDEA's HTTP Client\nDESCRIPTION: This snippet demonstrates how to create and execute HTTP POST and GET requests using IntelliJ IDEA's built-in HTTP client. It includes requests to add messages to the database and retrieve all messages.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_11\n\nLANGUAGE: http\nCODE:\n```\n### Post 'Hello!\"\nPOST http://localhost:8080/\nContent-Type: application/json\n\n{\n  \"text\": \"Hello!\"\n}\n\n### Post \"Bonjour!\"\n\nPOST http://localhost:8080/\nContent-Type: application/json\n\n{\n  \"text\": \"Bonjour!\"\n}\n\n### Post \"Privet!\"\n\nPOST http://localhost:8080/\nContent-Type: application/json\n\n{\n  \"text\": \"Privet!\"\n}\n\n### Get all the messages\nGET http://localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Handling Wildcard Super Bound in KSP\nDESCRIPTION: This Kotlin snippet checks for contravariant variance, representing a 'super' wildcard in Java, and returns the type if matched, otherwise null. It aids in resolving wildcard types with super bounds in KSP.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nif (ksTypeArgument.variance == Variance.CONTRAVARIANT) ksTypeArgument.type else null\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in Java\nDESCRIPTION: Shows how to filter elements from a Map in Java using the Stream API. It filters entries based on key and value conditions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npublic void filterEndsWith() {\n    var numbers = Map.of(\"key1\", 1, \"key2\", 2, \"key3\", 3, \"key11\", 11);\n    var filteredNumbers = numbers.entrySet().stream()\n        .filter(entry -> entry.getKey().endsWith(\"1\") && entry.getValue() > 10)\n        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    System.out.println(filteredNumbers);\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Property Accessors in Kotlin\nDESCRIPTION: Illustrates how to apply an annotation (`@Inject`) to the setter (`set`) of a Kotlin property (`x`). Use-site targets like `@set:` are used for this purpose.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Foo {\n    var x: MyDependency? = null\n        @Inject set\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Source Sets with Custom Hierarchy\nDESCRIPTION: Example of creating additional source sets while using the default hierarchy template in Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    macosArm64()\n    iosArm64()\n    iosSimulatorArm64()\n\n    // Apply the default hierarchy again. It'll create, for example, the iosMain source set:\n    applyDefaultHierarchyTemplate()\n\n    sourceSets {\n        // Create an additional jvmAndMacos source set:\n        val jvmAndMacos by creating {\n            dependsOn(commonMain.get())\n        }\n\n        macosArm64Main.get().dependsOn(jvmAndMacos)\n        jvmMain.get().dependsOn(jvmAndMacos)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Kotlin/JS Console - Text\nDESCRIPTION: This output sample demonstrates expected results from running the previous Kotlin/JS code. It shows the greeting and the boolean output from the 'sorted' function, corresponding to whether the arrays are sorted. Intended output should match for successful interop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/using-packages-from-npm.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHello, Kotlin/JS!\ntrue\nfalse\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Ranges in Kotlin\nDESCRIPTION: Shows how to use a range with a for loop to iterate over a sequence of numbers. This example demonstrates the simple syntax for iterating from 1 to 4 inclusively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    for (i in 1..4) print(i)\n    // 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Compilations in Kotlin Multiplatform\nDESCRIPTION: Example of accessing the main compilation for the JVM target in a Kotlin Multiplatform project. This demonstrates how compilations can be referenced in build scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-advanced-project-structure.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // Declare and configure the JVM target\n    jvm {\n        val mainCompilation: KotlinJvmCompilation = compilations.getByName(\"main\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Git Repository Pod Libraries in Kotlin Code\nDESCRIPTION: Shows how to import Pod libraries from Git repositories in Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport cocoapods.SDWebImage.*\nimport cocoapods.JSONModel.*\nimport cocoapods.CocoaLumberjack.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for Linkage Issues in Gradle\nDESCRIPTION: This snippet demonstrates how to configure compiler options within a Gradle build file to manage linkage issues in Kotlin/Native. It shows how to set the `-Xpartial-linkage-loglevel` option to `WARNING` to report linkage issues as warnings and to `ERROR` to raise them to compilation errors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// An example of passing compiler options in a Gradle build file:\nkotlin {\n    macosX64(\"native\") {\n        binaries.executable()\n\n        compilations.configureEach {\n            compilerOptions.configure {\n                // To report linkage issues as warnings:\n                freeCompilerArgs.add(\"-Xpartial-linkage-loglevel=WARNING\")\n\n                // To raise linkage warnings to errors:\n                freeCompilerArgs.add(\"-Xpartial-linkage-loglevel=ERROR\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PropertyDelegateProvider for Anonymous Delegate Providers in Kotlin\nDESCRIPTION: This snippet demonstrates the creation of anonymous delegate providers via the PropertyDelegateProvider interface from the Kotlin standard library. The provider is instantiated as a lambda, returning a ReadOnlyProperty instance with specified getValue logic. This facilitates highly flexible and anonymous delegation mechanisms, ideal for property wrappers and lightweight delegation patterns. Dependencies include Kotlin's PropertyDelegateProvider and ReadOnlyProperty interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nval provider = PropertyDelegateProvider { thisRef: Any?, property ->\n    ReadOnlyProperty<Any?, Int> {_, property -> 42 }\n}\nval delegate: Int by provider\n```\n\n----------------------------------------\n\nTITLE: Making Kotlin/Native Frameworks Static with Groovy DSL\nDESCRIPTION: Configures Kotlin/Native frameworks to be static instead of dynamic using Groovy DSL. This is necessary when rebuilding from bitcode to ensure proper symbolication, as App Store may discard .dSYM files for dynamic frameworks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-ios-symbolication.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {\n        binaries.withType(org.jetbrains.kotlin.gradle.plugin.mpp.Framework) {\n            isStatic = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing Ranges in Kotlin\nDESCRIPTION: Demonstrates how to create closed-ended ranges using '..' and open-ended ranges using '..<', along with testing value membership using the 'in' operator. A closed-ended range includes both start and end values, while an open-ended range excludes the end value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ranges.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Closed-ended range: includes both 1 and 4\n    println(4 in 1..4)\n    // true\n    \n    // Open-ended range: includes 1, excludes 4\n    println(4 in 1..<4)\n    // false\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin class reference\nDESCRIPTION: Obtains a runtime reference to a Kotlin class using the class literal syntax `MyClass::class`. The reference is a `KClass` type value, representing the class's metadata.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval c = MyClass::class\n```\n\n----------------------------------------\n\nTITLE: Accessing Binaries in Groovy Build Scripts\nDESCRIPTION: This Groovy snippet demonstrates various ways to access binaries in Kotlin/Native build scripts, including by name and using typed getters.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\n// Fails if there is no such binary.\nbinaries['fooDebugExecutable']\nbinaries.fooDebugExecutable\nbinaries.getByName('fooDebugExecutable')\n\n// Returns null if there is no such binary.\nbinaries.findByName('fooDebugExecutable')\n\n// Fails if there is no such binary.\nbinaries.getExecutable('foo', DEBUG)\nbinaries.getExecutable(DEBUG)          // Skip the first argument if the name prefix isn't set.\nbinaries.getExecutable('bar', 'DEBUG') // You also can use a string for build type.\n\n// Similar getters are available for other binary kinds:\n// getFramework, getStaticLib and getSharedLib.\n\n// Returns null if there is no such binary.\nbinaries.findExecutable('foo', DEBUG)\n\n// Similar getters are available for other binary kinds:\n// findFramework, findStaticLib and findSharedLib.\n```\n\n----------------------------------------\n\nTITLE: Converting Java Optionals to Collections in Kotlin\nDESCRIPTION: Demonstrates new extension functions for converting Java Optionals to lists, sets, and sequences in Kotlin 1.7.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval presentOptional = Optional.of(\"I'm here!\")\nval absentOptional = Optional.empty<String>()\nprintln(presentOptional.toList() + \",\" + absentOptional.toList())\n// [\"I'm here!\"], []\nprintln(presentOptional.toSet() + \",\" + absentOptional.toSet())\n// [\"I'm here!\"], []\nval myCollection = mutableListOf<String>()\nabsentOptional.toCollection(myCollection)\nprintln(myCollection)\n// []\npresentOptional.toCollection(myCollection)\nprintln(myCollection)\n// [\"I'm here!\"]\nval list = listOf(presentOptional, absentOptional).flatMap { it.asSequence() }\nprintln(list)\n// [\"I'm here!\"]\n```\n\n----------------------------------------\n\nTITLE: Type Mismatch with External Type Constraints\nDESCRIPTION: Example showing how external type constraints can override builder inference, potentially causing type mismatches when the constraints are incompatible.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun someMap() = mutableMapOf<CharSequence, String>()\n\nfun <E> MutableMap<E, String>.f(x: MutableMap<E, String>) { ... }\n\nfun main() {\n    val x: Map<in String, String> = buildMap {\n        put(\"\", \"\")\n        f(someMap()) // Type mismatch (required String, found CharSequence)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle's Isolated Projects Feature for Kotlin Multiplatform\nDESCRIPTION: Shows how to opt out of the new Kotlin Gradle plugin behavior for Isolated Projects in multiplatform projects. This configuration is necessary if developers encounter issues after upgrading and need to disable the feature.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nkotlin.kmp.isolated-projects.support=disable\n```\n\n----------------------------------------\n\nTITLE: Multiple Sealed Interface Implementation\nDESCRIPTION: Demonstrates how a class can implement multiple sealed interfaces.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FilledRectangle: Polygon, Fillable\n```\n\n----------------------------------------\n\nTITLE: Plugin Management Repository (Kotlin)\nDESCRIPTION: Configuring the pluginManagement block in `settings.gradle.kts` file to include Gradle Plugin Portal repository. This allows resolving plugins from the Gradle Plugin Portal.  Useful when using custom processors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-quickstart.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\npluginManagement { \n    repositories { \n        gradlePluginPortal()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler Support for kapt in Gradle - Kotlin\nDESCRIPTION: Shows how to enable the experimental kapt plugin support for the K2 compiler in Kotlin by adding a property to `gradle.properties`. This opt-in flag must be set to true for testing K2 support, and only works with Kotlin 1.9.20+.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkapt.use.k2=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Gradle Composite Builds Support in Kotlin Multiplatform\nDESCRIPTION: Gradle property configuration to enable the preview of improved Gradle composite builds support in Kotlin Multiplatform projects. This setting enables the new import mode for better composite build integration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_20\n\nLANGUAGE: gradle\nCODE:\n```\nkotlin.mpp.import.enableKgpDependencyResolution=true\n```\n\n----------------------------------------\n\nTITLE: Using Regex.matchAt() in Kotlin\nDESCRIPTION: Shows the experimental Regex.matchAt() function which returns the match result or null when attempting to match a regular expression at a specific position in a string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(){\n//sampleStart\n    val releaseText = \"Kotlin 1.5.30 is released!\"\n    val versionRegex = \"\\\\d[.]\\\\d[.]\\\\d+\".toRegex()\n    println(versionRegex.matchAt(releaseText, 0)) // \"null\"\n    println(versionRegex.matchAt(releaseText, 7)?.value) // \"1.5.30\"\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Delegated Properties with Final Val Property in Kotlin\nDESCRIPTION: Shows an optimization for delegated properties in Kotlin 1.7.20, where the $delegate field is omitted when delegating to a final val property with a backing field and default getter in the same module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval impl: ReadOnlyProperty<Any?, String> = ...\n\nclass A {\n    val s: String by impl\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence in a Collection using in Operator in Kotlin\nDESCRIPTION: This snippet demonstrates using the `in` operator within a `when` expression to check if specific elements (\"orange\", \"apple\") are present in a `Set` of strings. Corresponding messages are printed based on the presence check.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val items = setOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SAM with Receiver Plugin\nDESCRIPTION: Configuration showing how to apply the sam-with-receiver compiler plugin using the Gradle plugins DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"org.jetbrains.kotlin.plugin.sam.with.receiver\") version \"$kotlin_version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin to JavaScript with MetaInfo Option using kotlin2js - XML\nDESCRIPTION: This script uses the kotlin2js Ant task with the metaInfo attribute to generate and distribute additional JavaScript metadata, enabling the output to function as a Kotlin/JS library. The Ant <typedef> registers the Kotlin tasks. The metaInfo flag ensures a .meta.js file with binary module descriptors is produced alongside the main JS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\\\"Ant Task Test\\\" default=\\\"build\\\">\\n    <typedef resource=\\\"org/jetbrains/kotlin/ant/antlib.xml\\\" classpath=\\\"${kotlin.lib}/kotlin-ant.jar\\\"/>\\n\\n    <target name=\\\"build\\\">\\n        <!-- out.meta.js will be created, which contains binary metadata -->\\n        <kotlin2js src=\\\"root1\\\" output=\\\"out.js\\\" metaInfo=\\\"true\\\"/>\\n    </target>\\n</project>\n```\n\n----------------------------------------\n\nTITLE: Character Case Detection in Kotlin\nDESCRIPTION: Shows unified implementation of character case detection across platforms using both Unicode general category and Other_Uppercase/Other_Lowercase properties.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val latinCapitalA = 'A' // has \"Lu\" general category\n    val circledLatinCapitalA = 'Ⓐ' // has \"Other_Uppercase\" property\n    println(latinCapitalA.isUpperCase() && circledLatinCapitalA.isUpperCase())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Literals in Kotlin Annotations\nDESCRIPTION: This snippet shows the new array literal syntax for annotation arguments introduced in Kotlin 1.2. Instead of using the arrayOf function, array arguments can be passed directly using square brackets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@CacheConfig(cacheNames = [\"books\", \"default\"])\npublic class BookRepositoryImpl {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ES Modules (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to enable ECMAScript modules in the `build.gradle.kts` file for per-file compilation mode.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n// build.gradle.kts\nkotlin {\n    js(IR) {\n        useEsModules() // Enables ES2015 modules\n        browser()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Messages Table Schema with SQL\nDESCRIPTION: This SQL snippet sets up a messages table with a VARCHAR ID column and primary key, using `RANDOM_UUID()` for automatic ID generation. The text column is a required field. This schema supports the application by providing a structure for storing `Message` objects with a unique identifier.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- schema.sql \nCREATE TABLE IF NOT EXISTS messages (\n    id      VARCHAR(60)  DEFAULT RANDOM_UUID() PRIMARY KEY,\n    text    VARCHAR      NOT NULL\n);\n\n```\n\n----------------------------------------\n\nTITLE: Iterating through array indices in Kotlin\nDESCRIPTION: This snippet iterates through the indices of an array and modifies the array elements, demonstrating that even navigating with an index does not introduce any overhead.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (i in array.indices) { // no iterator created\n    array[i] += 2\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Declarations with Trailing Comma in Kotlin\nDESCRIPTION: This example illustrates how to use trailing commas with destructuring declarations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Car(val manufacturer: String, val model: String, val year: Int)\nval myCar = Car(\"Tesla\", \"Y\", 2019)\nval (\n    manufacturer,\n    model,\n    year, // trailing comma\n) = myCar\nval cars = listOf<Car>()\nfun printMeanValue() {\n    var meanValue: Int = 0\n    for ((\n        _,\n        _,\n        year, // trailing comma\n    ) in cars) {\n        meanValue += year\n    }\n    println(meanValue/cars.size)\n}\nprintMeanValue()\n```\n\n----------------------------------------\n\nTITLE: Create a Bar Chart Grouped by City - Kotlin\nDESCRIPTION: Creates a bar chart visualizing temperature data grouped by city using the Kandy library.  It accesses columns from a DataFrame for x-axis (Month), y-axis (Temperature), and color-coding (City). The chart is grouped by the 'City' column and custom hexadecimal color codes are used for the bars.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-visualization.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Groups by cities  \ndf.groupBy { City }.plot {\n    // Adds a chart heading\n    layout.title = \"Temperature per month\"\n    bars {\n        // Accesses the DataFrame's columns used for the X and Y axes \n        x(Month)\n        y(Temperature)\n        // Accesses the DataFrame's column used for categories and sets colors for these categories \n        fillColor(City) {\n            scale = categorical(\n                \"Berlin\" to Color.hex(\"#6F4E37\"),\n                \"Madrid\" to Color.hex(\"#C2D4AB\"),\n                \"Caracas\" to Color.hex(\"#B5651D\")\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Fields from CValue Structs in Kotlin/Native\nDESCRIPTION: Example of accessing fields from a CValue<T> structure using the useContents extension method, which temporarily stores the structure in memory and provides access to its fields.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-c-interop.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval fieldValue = structValue.useContents { field }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kapt Classloader Caching in Gradle Properties\nDESCRIPTION: Configuration properties for enabling kapt annotation processor classloader caching. Requires setting cache size and disabling compile classpath inclusion.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# positive value will enable caching\n# use the same value as the number of modules that use kapt\nkapt.classloaders.cache.size=5\n\n# disable for caching to work\nkapt.include.compile.classpath=false\n```\n\n----------------------------------------\n\nTITLE: Kotlin Else/Catch/Finally Placement\nDESCRIPTION: Illustrates the placement of `else`, `catch`, and `finally` keywords on the same line as the preceding curly brace.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nif (condition) {\n    // body\n} else {\n    // else part\n}\n\ntry {\n    // body\n} finally {\n    // cleanup\n}\n```\n\n----------------------------------------\n\nTITLE: Solving Long Number Problem with Functional Operators in Earlier Kotlin Versions\nDESCRIPTION: Implements a greedy algorithm for the Codeforces 'Long Number' problem (1157B) using Kotlin syntax compatible with versions before 1.6. It reads the input size `n`, the number string `s`, and the mapping list `fl`. A local function `f` maps characters based on `fl`. It uses `indexOfFirst` and `takeIf` with the elvis operator `?:` to find the start index `i` and end index `j` for replacement. The final answer is constructed by concatenating substrings and the mapped middle part, then printed. This version uses `readLine()!!` for input.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // read input\n    val n = readLine()!!.toInt()\n    val s = readLine()!!\n    val fl = readLine()!!.split(\" \").map { it.toInt() }\n    // define local function f\n    fun f(c: Char) = '0' + fl[c - '1']\n    // greedily find first and last indices\n    val i = s.indexOfFirst { c -> f(c) > c }\n        .takeIf { it >= 0 } ?: s.length\n    val j = s.withIndex().indexOfFirst { (j, c) -> j > i && f(c) < c }\n        .takeIf { it >= 0 } ?: s.length\n    // compose and write the answer\n    val ans =\n        s.substring(0, i) +\n        s.substring(i, j).map { c -> f(c) }.joinToString(\"\") + \n        s.substring(j)\n    println(ans)\n}\n```\n\n----------------------------------------\n\nTITLE: Postponed Type Variables in buildList Example\nDESCRIPTION: Shows how postponed type variables work during builder inference analysis, with a value of undetermined type that will be resolved later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = buildList {\n    val x = get(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Linkage Warnings in Kotlin/Native\nDESCRIPTION: This snippet demonstrates the warnings that the Kotlin/Native compiler reports when it detects issues with library linkage. These warnings provide information about missing functions, singleton instances, and unlinked class symbols. They appear in compilation logs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nNo function found for symbol 'org.samples/MyRemovedClass.doSomething|3657632771909858561[0]'\n\nCan not get instance of singleton 'MyEnumClass.REMOVED_ENTRY': No enum entry found for symbol 'org.samples/MyEnumClass.REMOVED_ENTRY|null[0]'\n\nFunction 'getMyRemovedClass' can not be called: Function uses unlinked class symbol 'org.samples/MyRemovedClass|null[0]'\n```\n\n----------------------------------------\n\nTITLE: Delegating via the this Reference in Kotlin\nDESCRIPTION: This code example shows how delegation can be performed using the this reference as the delegate, with getValue() implemented on the class itself. This pattern is rare but allows the class instance to provide delegation for its own properties, enabling highly customized logic or property-by-property behaviors. No extra fields are generated, maximizing memory efficiency.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A {\n    operator fun getValue(thisRef: Any?, property: KProperty<*>) ...\n \n    val s by this\n}\n```\n\n----------------------------------------\n\nTITLE: Building Universal (Fat) Frameworks in Groovy DSL\nDESCRIPTION: Shows how to create a fat framework task in Groovy DSL to merge frameworks for different platforms (watchOS 32-bit and 64-bit) into a single universal binary.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-build-native-binaries.md#2025-04-22_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask\n\nkotlin {\n    // Create and configure the targets.\n    targets {\n        watchosArm32(\"watchos32\")\n        watchosArm64(\"watchos64\")\n        configure([watchos32, watchos64]) {\n            binaries.framework {\n                baseName = \"my_framework\"\n            }\n        }\n    }\n    // Create a task building a fat framework.\n    tasks.register(\"debugFatFramework\", FatFrameworkTask) {\n        // The fat framework must have the same base name as the initial frameworks.\n        baseName = \"my_framework\"\n        // The default destination directory is \"<build directory>/fat-framework\".\n        destinationDir = file(\"$buildDir/fat-framework/debug\")\n        // Specify the frameworks to be merged.\n        from(\n            targets.watchos32.binaries.getFramework(\"DEBUG\"),\n            targets.watchos64.binaries.getFramework(\"DEBUG\")\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Mixed Kotlin and Java Source with withKotlin Ant Task - XML\nDESCRIPTION: This Ant script demonstrates integrating the withKotlin task into the javac step for projects containing both Kotlin and Java code. The withKotlin task handles invocation of the Kotlin compiler as part of a standard javac call, avoiding repetition of parameters. The snippet makes use of directory management and packaging tasks. It requires kotlin-ant.jar and the withKotlin task to be registered via typedef.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\\\"Ant Task Test\\\" default=\\\"build\\\">\\n    <typedef resource=\\\"org/jetbrains/kotlin/ant/antlib.xml\\\" classpath=\\\"${kotlin.lib}/kotlin-ant.jar\\\"/>\\n\\n    <target name=\\\"build\\\">\\n        <delete dir=\\\"classes\\\" failonerror=\\\"false\\\"/>\\n        <mkdir dir=\\\"classes\\\"/>\\n        <javac destdir=\\\"classes\\\" includeAntRuntime=\\\"false\\\" srcdir=\\\"src\\\">\\n            <withKotlin/>\\n        </javac>\\n        <jar destfile=\\\"hello.jar\\\">\\n            <fileset dir=\\\"classes\\\"/>\\n        </jar>\\n    </target>\\n</project>\n```\n\n----------------------------------------\n\nTITLE: File Output Directory Configuration\nDESCRIPTION: This snippet configures the output directory for file-based build reports using the `kotlin.build.report.file.output_dir` property. This is optional and defaults to `build/reports/kotlin-build/`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-compilation-and-caches.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n# Optional. Output directory for file-based reports. Default: build/reports/kotlin-build/\nkotlin.build.report.file.output_dir=kotlin-reports\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using an Inline Class in Kotlin\nDESCRIPTION: Illustrates how an instance of an inline class is created and used. Critically, it explains that at runtime, the `securePassword` variable holds the underlying `String` directly, avoiding the overhead of a wrapper object instantiation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// No actual instantiation of class 'Password' happens\n// At runtime 'securePassword' contains just 'String'\nval securePassword = Password(\"Don't try this in production\") \n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths in klibs with Gradle (Kotlin DSL)\nDESCRIPTION: Shows how to configure the Kotlin compiler in a Gradle build using Kotlin DSL to use relative paths in klib libraries for better reproducibility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named<KotlinCompilationTask<*>>(\"compileKotlin\").configure {\n    // $base is a base path of source files\n    compilerOptions.freeCompilerArgs.add(\"-Xklib-relative-path-base=$base\")\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin to JavaScript with Prefix/Postfix and Sourcemap using kotlin2js - XML\nDESCRIPTION: This build script demonstrates advanced kotlin2js options, including setting JS output prefix, postfix, and enabling sourcemap generation. The <taskdef> is used to ensure the Ant task is registered. This enables detailed control over the resulting JS and debugging artifacts. Requires kotlin-ant.jar and appropriate source/output paths.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\\\"Ant Task Test\\\" default=\\\"build\\\">\\n    <taskdef resource=\\\"org/jetbrains/kotlin/ant/antlib.xml\\\" classpath=\\\"${kotlin.lib}/kotlin-ant.jar\\\"/>\\n\\n    <target name=\\\"build\\\">\\n        <kotlin2js src=\\\"root1\\\" output=\\\"out.js\\\" outputPrefix=\\\"prefix\\\" outputPostfix=\\\"postfix\\\" sourcemap=\\\"true\\\"/>\\n    </target>\\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Interop in Kotlin DSL Build Script\nDESCRIPTION: Configuration for Kotlin Multiplatform build script using Kotlin DSL to set up cinterop with an iOS framework. It includes compiler and linker options to reference the framework.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64() {\n        compilations.getByName(\"main\") {\n            val DateTools by cinterops.creating {\n                // Path to the .def file\n                definitionFile.set(project.file(\"src/nativeInterop/cinterop/DateTools.def\"))\n\n                compilerOpts(\"-framework\", \"MyFramework\", \"-F/path/to/framework/\")\n            }\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n\n        binaries.all {\n            // Tell the linker where the framework is located.\n            linkerOpts(\"-framework\", \"MyFramework\", \"-F/path/to/framework/\")\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DWARF Debugging Support for Kotlin/Wasm\nDESCRIPTION: Compiler option to enable DWARF debugging support in Kotlin/Wasm. This allows the compiler to embed debugging information into WebAssembly binaries, which enables stepping through code and variable inspection in compatible Wasm VMs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-Xwasm-generate-dwarf\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Multiplatform Plugin with Groovy DSL\nDESCRIPTION: This code snippet demonstrates applying the Kotlin Multiplatform Gradle plugin using the Groovy Gradle DSL.  It uses the `id` keyword to specify the plugin's fully qualified name and version. The `%kotlinVersion%` is a placeholder for the actual Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Letters in a Name in Kotlin/Native\nDESCRIPTION: Enhanced main function that reads a name, removes spaces, and counts the total number of letters. It demonstrates string manipulation and the use of scope functions in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Read the input value.\n    println(\"Hello, enter your name:\")\n    val name = readln()\n    // Count the letters in the name.\n    name.replace(\" \", \"\").let {\n        println(\"Your name contains ${it.length} letters\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Target Validation Mode\nDESCRIPTION: This snippet configures the JVM target validation mode in build scripts for Gradle projects. It sets the validation mode to `warning` for all tasks using the `KotlinJvmCompile` class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile>().configureEach {\n    jvmTargetValidationMode.set(org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING)\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile.class).configureEach {\n    jvmTargetValidationMode = org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING\n}\n```\n\n----------------------------------------\n\nTITLE: KType to Java Type Conversion in Kotlin\nDESCRIPTION: Demonstrates the conversion between Kotlin types and Java types using the new KType.javaType extension property.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.reflect.javaType\nimport kotlin.reflect.typeOf\n\n@OptIn(ExperimentalStdlibApi::class)\ninline fun <reified T> accessReifiedTypeArg() {\n   val kType = typeOf<T>()\n   println(\"Kotlin type: $kType\")\n   println(\"Java type: ${kType.javaType}\")\n}\n\n@OptIn(ExperimentalStdlibApi::class)\nfun main() {\n   accessReifiedTypeArg<String>()\n   accessReifiedTypeArg<List<String>>()\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Derived Class and Base Class Initialization Order in Kotlin\nDESCRIPTION: This comprehensive example walks through instance creation, base and derived initializers, property initializations, and value propagation using println statements. open members and the order of evaluation are highlighted, with usage shown in main(). The pattern provides insight into initialization sequence and property shadowing. Requires println and basic Kotlin runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inheritance.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\nopen class Base(val name: String) {\n\n    init { println(\"Initializing a base class\") }\n\n    open val size: Int = \n        name.length.also { println(\"Initializing size in the base class: $it\") }\n}\n\nclass Derived(\n    name: String,\n    val lastName: String,\n) : Base(name.replaceFirstChar { it.uppercase() }.also { println(\"Argument for the base class: $it\") }) {\n\n    init { println(\"Initializing a derived class\") }\n\n    override val size: Int =\n        (super.size + lastName.length).also { println(\"Initializing size in the derived class: $it\") }\n}\n//sampleEnd\n\nfun main() {\n    println(\"Constructing the derived class(\\\"hello\\\", \\\"world\\\")\")\n    Derived(\"hello\", \"world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Compilation Tasks in Gradle using Kotlin DSL - Kotlin\nDESCRIPTION: This snippet demonstrates how to manually associate a custom 'integrationTest' compilation with the 'main' compilation in a Gradle Kotlin DSL build script. Doing so grants 'integrationTest' access to internal declarations from the 'main' compilation, which is important for functional testing. No extra dependencies are required beyond the kotlin plugin, and the association is handled via the associateWith function. The key parameter is the name of the compilation to associate, and the code is to be placed in the build.gradle.kts file within an appropriate block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval integrationTestCompilation = kotlin.target.compilations.create(\"integrationTest\") {\n    associateWith(kotlin.target.compilations.getByName(\"main\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring compiler options for a specific compilation (Groovy DSL)\nDESCRIPTION: This snippet configures the `allWarningsAsErrors` compiler option for the main Kotlin compilation using the Groovy DSL. It demonstrates how to configure options within a compilation's `compileTaskProvider`. Requires Gradle Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_31\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    jvm {\n        compilations.named(KotlinCompilation.MAIN_COMPILATION_NAME) {\n            compileTaskProvider.configure {\n                // Configures the 'main' compilation:\n                compilerOptions {\n                    allWarningsAsErrors = true\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Dependencies in Groovy\nDESCRIPTION: This snippet shows how to add test dependencies to all source sets in a Kotlin Multiplatform project using Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-add-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\"test\") // Brings all the platform dependencies automatically\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring kapt in Maven POM\nDESCRIPTION: XML configuration for using kapt with Maven, specifying source directories and annotation processor paths.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<execution>\n    <id>kapt</id>\n    <goals>\n        <goal>kapt</goal> <!-- You can skip the <goals> element \n        if you enable extensions for the plugin -->\n    </goals>\n    <configuration>\n        <sourceDirs>\n            <sourceDir>src/main/kotlin</sourceDir>\n            <sourceDir>src/main/java</sourceDir>\n        </sourceDirs>\n        <annotationProcessorPaths>\n            <!-- Specify your annotation processors here -->\n            <annotationProcessorPath>\n                <groupId>com.google.dagger</groupId>\n                <artifactId>dagger-compiler</artifactId>\n                <version>2.9</version>\n            </annotationProcessorPath>\n        </annotationProcessorPaths>\n    </configuration>\n</execution>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Main Function with C Interop\nDESCRIPTION: Kotlin main function demonstrating usage of imported C functions with experimental foreign API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-primitive-data-types-from-c.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\n\n@OptIn(ExperimentalForeignApi::class)\nfun main() {\n    println(\"Hello Kotlin/Native!\")\n  \n    ints(/* fix me*/)\n    uints(/* fix me*/)\n    doubles(/* fix me*/)\n}\n```\n\n----------------------------------------\n\nTITLE: Private Companion Members Kotlin\nDESCRIPTION: Illustrates how class members can access private members of their corresponding companion object. `defaultGreeting` is a private variable in the companion object and can be accessed by the `sayHi` method in the `User` class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/object-declarations.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass User(val name: String) {\n    companion object {\n        private val defaultGreeting = \"Hello\"\n    }\n\n    fun sayHi() {\n        println(defaultGreeting)\n    }\n}\nUser(\"Nick\").sayHi()\n// Hello\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Data Object Equality in Kotlin\nDESCRIPTION: Shows how data objects handle equality comparison and reflection-based instantiation. Illustrates the behavior of equals() and === operators when comparing data object instances.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.lang.reflect.Constructor\n\ndata object MySingleton\n\nfun main() {\n    val evilTwin = createInstanceViaReflection()\n\n    println(MySingleton) // MySingleton\n    println(evilTwin) // MySingleton\n\n    // Even when a library forcefully creates a second instance of MySingleton, its `equals` method returns true:\n    println(MySingleton == evilTwin) // true\n\n    // Do not compare data objects via ===.\n    println(MySingleton === evilTwin) // false\n}\n\nfun createInstanceViaReflection(): MySingleton {\n    // Kotlin reflection does not permit the instantiation of data objects.\n    // This creates a new MySingleton instance \"by force\" (i.e., Java platform reflection)\n    // Don't do this yourself!\n    return (MySingleton.javaClass.declaredConstructors[0].apply { isAccessible = true } as Constructor<MySingleton>).newInstance()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Kotlin Script with Maven Dependency\nDESCRIPTION: Example of a Kotlin script that uses a Maven dependency (kotlinx-html-jvm) to generate HTML content. It demonstrates the use of @Repository and @DependsOn annotations for dependency management.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scripting/custom-script-deps-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:Repository(\"https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven\")\n@file:DependsOn(\"org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.3\")\n\nimport kotlinx.html.*\nimport kotlinx.html.stream.*\nimport kotlinx.html.attributes.*\n\nval addressee = \"World\"\n\nprint(\n    createHTML().html {\n        body {\n            h1 { +\"Hello, $addressee!\" }\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty Kotlin Class\nDESCRIPTION: Shows how to declare an empty Kotlin class. If a class has no body, the curly braces can be omitted.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Empty\n```\n\n----------------------------------------\n\nTITLE: Objective-C Declaration Example\nDESCRIPTION: This snippet shows the Objective-C declaration generated from the Kotlin code with a KDoc comment, before enabling the `-Xexport-kdoc` compiler option.  Notice that the KDoc comments are not present in the Objective-C declaration by default.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\n+ (void)printSumA:(int32_t)a b:(int32_t)b __attribute__((swift_name(\"printSum(a:b:)\")));\n```\n\n----------------------------------------\n\nTITLE: C Interop Definition File Example\nDESCRIPTION: This code snippet showcases a typical .def file used for Kotlin/Native C interop. It defines the header files to include, the package name, and platform-specific compiler and linker options for macOS and Linux. The properties within the file are used by the cinterop tool to generate the Kotlin bindings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-definition-file.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nheaders = png.h\nheaderFilter = png.h\npackage = png\n\ncompilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu\nlinkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/png/lib -lpng\nlinkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lpng\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Initialization of Top-Level Properties in Kotlin/JS\nDESCRIPTION: Example of lazy initialization for top-level properties in Kotlin/JS, which is now the default behavior with the IR compiler to improve startup time.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\n// lazy initialization\nval a = run {\n    val result = // intensive computations\n        println(result)\n    result\n} // run is executed upon the first usage of the variable\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin NoArg Plugin\nDESCRIPTION: Shows plugin configuration for Kotlin and Groovy build scripts to enable the Kotlin NoArg plugin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/test-page.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.noarg\") version \"1.9.23\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.plugin.noarg\" version \"1.9.23\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Gradle daemon - Shell\nDESCRIPTION: This shell command demonstrates how to stop the Gradle daemon process. This is a solution to the `rsync error` issue, as the Gradle daemon might have been sandboxed, causing issues with file transfers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew --stop\n```\n\n----------------------------------------\n\nTITLE: Java Interface with Nullable Primitive Array\nDESCRIPTION: This Java interface defines a method `fetchData` that returns a nullable int array using TYPE_USE annotations. This illustrates the scenario where previous Kotlin versions incorrectly handled nullability.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\ninterface DataProvider {\n    int @Nullable [] fetchData();\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Cast Improvements with Safe Call Receiver in Kotlin\nDESCRIPTION: This code demonstrates the smart cast improvements in Kotlin 1.2, where the compiler can now smart cast the receiver of a safe call when the result of the safe call is checked for null.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun countFirst(s: Any): Int {\n    val firstChar = (s as? CharSequence)?.firstOrNull()\n    if (firstChar != null)\n    return s.count { it == firstChar } // s: Any is smart cast to CharSequence\n\n    val firstItem = (s as? Iterable<*>)?.firstOrNull()\n    if (firstItem != null)\n    return s.count { it == firstItem } // s: Any is smart cast to Iterable<*>\n    return -1\n}\n\nfun main(args: Array<String>) {\n  val string = \"abacaba\"\n  val countInString = countFirst(string)\n  println(\"called on \\\"$string\\\": $countInString\")\n\n  val list = listOf(1, 2, 3, 1, 2)\n  val countInList = countFirst(list)\n  println(\"called on $list: $countInList\")\n}\n```\n\n----------------------------------------\n\nTITLE: Forward Declaration Implementation in Objective-C Second Library\nDESCRIPTION: An Objective-C library that provides the actual implementation of the previously forward-declared protocol, including a function that produces an object conforming to the protocol.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_16\n\nLANGUAGE: objc\nCODE:\n```\n// Second objcinterop library\n// Header:\n#import <Foundation/Foundation.h>\n@protocol ForwardDeclaredProtocol\n@end\n// Implementation:\n@interface ForwardDeclaredProtocolImpl : NSObject <ForwardDeclaredProtocol>\n@end\n\nid<ForwardDeclaredProtocol> produceProtocol() {\n    return [ForwardDeclaredProtocolImpl new];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring all-open Plugin in Maven\nDESCRIPTION: Shows how to configure the all-open compiler plugin in a Maven project using the kotlin-maven-plugin. Specifies annotations that will make classes open automatically.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <artifactId>kotlin-maven-plugin</artifactId>\n    <groupId>org.jetbrains.kotlin</groupId>\n    <version>${kotlin.version}</version>\n\n    <configuration>\n        <compilerPlugins>\n            <!-- Or \"spring\" for the Spring support -->\n            <plugin>all-open</plugin>\n        </compilerPlugins>\n\n        <pluginOptions>\n            <!-- Each annotation is placed on its own line -->\n            <option>all-open:annotation=com.my.Annotation</option>\n            <option>all-open:annotation=com.their.AnotherAnnotation</option>\n        </pluginOptions>\n    </configuration>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-allopen</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Gradle property to expose JAR artifact instead of class files\nDESCRIPTION: This is a Gradle property, applicable for Java-only projects, that enforces the usage of compressed JAR artifacts instead of directories containing compiled `.class` files during compilation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\norg.gradle.java.compile-classpath-packaging=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Plugin Dependencies Resolution\nDESCRIPTION: Demonstrates how to align transitive dependencies versions for Kotlin Gradle plugins using dependency constraints. This workaround helps resolve version conflicts between different plugin variants.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    constraints {\n        implementation(\"org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Output File and Library Target (Groovy)\nDESCRIPTION: This Groovy snippet, placed within the Gradle build file, configures common webpack settings using the `webpackTask` block. It sets a custom output filename (`mycustomfilename.js`) using `outputFileName` and specifies the module system for the output bundle (`commonjs2`) using `output.libraryTarget`. These settings affect the generated JavaScript file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_23\n\nLANGUAGE: groovy\nCODE:\n```\nwebpackTask {\n    outputFileName = \"mycustomfilename.js\"\n    output.libraryTarget = \"commonjs2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Composable Function with Default Modifier (Kotlin)\nDESCRIPTION: Example of an abstract composable function with a default `Modifier` value. This showcases the ability to include default parameters in abstract composable functions in Kotlin 2.0.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nabstract class Composables {\n    @Composable\n    abstract fun Composable(modifier: Modifier = Modifier)\n}\n```\n\n----------------------------------------\n\nTITLE: Run Kotlin script with custom definition\nDESCRIPTION: This command compiles and executes a Kotlin script with a custom script definition.  The `-script-templates` option specifies the fully qualified name of the custom script definition class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc -script-templates org.example.CustomScriptDefinition -script custom.script1.kts\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Non-Constant Parameter with js() in Kotlin\nDESCRIPTION: Illustrates a compilation error when attempting to pass a non-constant computed string to the js() function. Demonstrates that js() only accepts string literals evaluated at compile time, reinforcing constraints on inlining raw JavaScript code in Kotlin/JS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-interop.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun jsTypeOf(o: Any): String {\n    return js(getTypeof() + \" o\") // error reported here\n}\n\nfun getTypeof() = \"typeof\"\n```\n\n----------------------------------------\n\nTITLE: Adding kotlin-metadata-jvm Dependency in Gradle (Groovy)\nDESCRIPTION: This snippet demonstrates how to add the kotlin-metadata-jvm library as a dependency in a Gradle project using Groovy. It includes the necessary repository and dependency configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// build.gradle\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-metadata-jvm:%kotlinVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function with Type Inference\nDESCRIPTION: Example of anonymous function where parameter types can be inferred from context.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nints.filter(fun(item) = item > 0)\n```\n\n----------------------------------------\n\nTITLE: Executing Kotlin/JS Browser Tests via Gradle Wrapper (Bash)\nDESCRIPTION: This command uses the Gradle wrapper (`./gradlew`) to execute the `jsBrowserTest` task from the command line. This task runs the Kotlin/JS tests configured in the build script (e.g., using Karma and specified browsers). Output and reports are generated by Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-running-tests.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsBrowserTest\n```\n\n----------------------------------------\n\nTITLE: Suppress warnings using command-line\nDESCRIPTION: Demonstrates how to suppress specific warnings globally across a project using the `-Xsuppress-warning` option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compiler-reference.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nkotlinc -Xsuppress-warning=NOTHING_TO_INLINE -Xsuppress-warning=NO_TAIL_CALLS_FOUND main.kt\n```\n\n----------------------------------------\n\nTITLE: Setting Lombok Configuration File in Gradle (Groovy DSL)\nDESCRIPTION: This snippet illustrates how to specify the path to the Lombok configuration file in a Gradle build script using the Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinLombok {\n    lombokConfigurationFile file(\"lombok.config\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Annotations and Visibility Modifiers\nDESCRIPTION: Demonstrates how to include annotations and visibility modifiers in the primary constructor declaration. When these are present, the `constructor` keyword becomes mandatory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Customer public @Inject constructor(name: String) { /*...*/ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Interop in Groovy Build Script\nDESCRIPTION: Configuration for Kotlin Multiplatform build script using Groovy DSL to set up cinterop with a native iOS library. It includes setting the definition file path, include directories, and linker options.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-ios-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    iosArm64 {\n        compilations.main {\n            cinterops {\n                DateTools {\n                    // Path to the .def file\n                    definitionFile = project.file(\"src/nativeInterop/cinterop/DateTools.def\")\n\n                    // Directories for header search (an analogue of the -I<path> compiler option)\n                    includeDirs(\"include/this/directory\", \"path/to/another/directory\")\n                }\n                anotherInterop { /* ... */ }\n            }\n        }\n\n        binaries.all {\n            // Linker options required to link to the library.\n            linkerOpts \"-L/path/to/library/binaries\", \"-lbinaryname\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Transitive Kotlin Standard Library Dependency in Kotlin Build Script\nDESCRIPTION: Configuration to exclude a transitive kotlin-stdlib dependency from a third-party library. This is useful when you need to resolve version conflicts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"com.example:lib:1.0\") {\n        exclude(group = \"org.jetbrains.kotlin\", module = \"kotlin-stdlib\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IntRange Class with OpenEndRange Implementation\nDESCRIPTION: Shows how the IntRange class will implement both ClosedRange<Int> and OpenEndRange<Int> interfaces to support both types of ranges.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1720.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntRange : IntProgression(...), ClosedRange<Int>, OpenEndRange<Int> {\n    override val start: Int\n    override val endInclusive: Int\n    override val endExclusive: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Annotations on Same Line\nDESCRIPTION: Illustrates placing annotations without arguments on the same line as the declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsonExclude @JvmField\nvar x: String\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Literal Example\nDESCRIPTION: Defines a JavaScript object literal named 'Counter' with properties 'value', 'step', and a method 'increment'. This object is used to demonstrate how to declare external objects in Kotlin that correspond to JavaScript object literals.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet Counter = {\n    value: 0,\n    step: 1,\n    increment () {\n        this.value += this.step;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Service with Spring Boot\nDESCRIPTION: Implements a Spring Boot service class for handling messages with CRUD operations using a repository.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/test-page.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n    import java.util.*\n\n@Service\nclass MessageService(val db: MessageRepository) {\n    fun findMessages(): List<Message> = db.findAll().toList()\n\n    fun findMessageById(id: String): List<Message> = db.findById(id).toList()\n\n    fun save(message: Message) {\n        db.save(message)\n    }\n\n    fun <T : Any> Optional<out T>.toList(): List<T> =\n        if (isPresent) listOf(get()) else emptyList()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/Native Project with Gradle\nDESCRIPTION: Command to run the Kotlin/Native executable using Gradle, which executes the debug version of the native application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew runDebugExecutableNative\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Kotlin\nDESCRIPTION: This snippet demonstrates how to declare read-only variables using `val` and mutable variables using `var` in Kotlin. It shows how to assign values to variables using the `=` operator and reassign values to mutable variables. The example showcases variable usage within the `main` function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-hello-world.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { \n//sampleStart\n    val popcorn = 5    // There are 5 boxes of popcorn\n    val hotdog = 7     // There are 7 hotdogs\n    var customers = 10 // There are 10 customers in the queue\n    \n    // Some customers leave the queue\n    customers = 8\n    println(customers)\n    // 8\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotlin Version Property in Maven\nDESCRIPTION: Configures the Kotlin version property in the Maven POM file, which will be referenced throughout the project configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <kotlin.version>%kotlinVersion%</kotlin.version>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Kotlin Exercise: String Interpolation\nDESCRIPTION: This snippet shows an incomplete Kotlin program and requires the user to complete the code to print a specific string using string interpolation. The user needs to use string templates to include the values of `name` and `age` variables in the output string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-hello-world.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val name = \"Mary\"\n    val age = 20\n    // Write your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Background Test Launcher Implementation\nDESCRIPTION: Workaround implementation for running unit tests in the background when not using kotlinx.coroutines.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-memory-manager.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage testlauncher\n\nimport platform.CoreFoundation.*\nimport kotlin.native.concurrent.*\nimport kotlin.native.internal.test.*\nimport kotlin.system.*\n\nfun mainBackground(args: Array<String>) {\n    val worker = Worker.start(name = \"main-background\")\n    worker.execute(TransferMode.SAFE, { args.freeze() }) {\n        val result = testLauncherEntryPoint(it)\n        exitProcess(result)\n    }\n    CFRunLoopRun()\n    error(\"CFRunLoopRun should never return\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collections firstNotNullOf Function in Kotlin\nDESCRIPTION: New collection functions that combine mapNotNull with first/firstOrNull operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val data = listOf(\"Kotlin\", \"1.5\")\n    println(data.firstNotNullOf(String::toDoubleOrNull))\n    println(data.firstNotNullOfOrNull(String::toIntOrNull))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Property Accessor in Kotlin\nDESCRIPTION: Demonstrates how to create an inline property accessor for a List's lastIndex property. The getter is inlined at compile time for better performance when no backing field is needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npublic val <T> List<T>.lastIndex: Int\n    inline get() = this.size - 1\n```\n\n----------------------------------------\n\nTITLE: Java Interface with Nullable String Result\nDESCRIPTION: This Java interface defines a method `fetchData` that returns a `ResultContainer` containing a nullable String. This showcases how nullability annotations are applied in Java and how they should be interpreted in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\ninterface DataService {\n    @NotNull ResultContainer<@Nullable String> fetchData();\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Java Code for Interface Companion with Static Members\nDESCRIPTION: This Java code snippet shows the equivalent representation of a Kotlin interface with static members marked with @JvmStatic and @JvmField. The static members are directly accessible from the interface.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ninterface Foo {\n    public static int answer = 42;\n    public static void sayHello() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin library dependency to Xcode Podfile (Single Target)\nDESCRIPTION: This Ruby snippet shows how to add a Kotlin Multiplatform library as a dependency in an Xcode project's `Podfile` with a single target.  It includes the `use_frameworks!` directive, specifies the platform and deployment target, and declares a dependency on the `kotlin_library` by providing the path to the Kotlin project. This enables the Xcode project to use the compiled Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-xcode.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nuse_frameworks!\n\nplatform :ios, '16.0'\n\ntarget 'ios-app' do\n        pod 'kotlin_library', :path => '../kotlin-library'\nend\n```\n\n----------------------------------------\n\nTITLE: Kotlin Property with Long Initializer\nDESCRIPTION: Shows how to format a property with a long initializer, adding a line break after the `=` sign and indenting the initializer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val defaultCharset: Charset? =\n    EncodingRegistry.getInstance().getDefaultCharsetForPropertiesFiles(file)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Multiplatform targets (Kotlin 1.9.0 and earlier)\nDESCRIPTION: This Kotlin code snippet demonstrates the standard setup for configuring Kotlin Multiplatform targets (Android and iOS) in Kotlin versions 1.9.0 and earlier. It involves manually creating source sets and defining dependencies between them using `dependsOn()`. This setup requires explicitly defining `iosMain`, `iosArm64Main`, and `iosSimulatorArm64Main` source sets, adding boilerplate code to the project configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n\n    sourceSets {\n        val commonMain by getting\n\n        val iosMain by creating {\n            dependsOn(commonMain)\n        }\n\n        val iosArm64Main by getting {\n            dependsOn(iosMain)\n        }\n\n        val iosSimulatorArm64Main by getting {\n            dependsOn(iosMain)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Collection Declaration in Java\nDESCRIPTION: Demonstrates how to declare a mutable list in Java. It uses Java's List interface to create a mutable list of Customers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Java\\n// This list is mutable!\\npublic List<Customer> getCustomers() { ... }\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements in Java\nDESCRIPTION: Illustrates how to group elements in a List using Java's Stream API and Collectors.groupingBy() method. It groups Request objects by their URL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npublic void analyzeLogs() {\n    var requests = List.of(\n        new Request(\"https://kotlinlang.org/docs/home.html\", 200),\n        new Request(\"https://kotlinlang.org/docs/home.html\", 400),\n        new Request(\"https://kotlinlang.org/docs/comparison-to-java.html\", 200)\n    );\n    var urlsAndRequests = requests.stream().collect(\n            Collectors.groupingBy(Request::getUrl));\n    System.out.println(urlsAndRequests);\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Entries Usage Example Kotlin\nDESCRIPTION: This Kotlin code demonstrates the use of the `enumEntries<T>()` function as a replacement for `enumValues<T>()` for improved performance. It requires opting in to the `ExperimentalStdlibApi` and a language version of 1.9 or later. The function `printAllValues` uses `enumEntries` to get a list of enum values and prints their names.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nenum class RGB { RED, GREEN, BLUE }\n\n@OptIn(ExperimentalStdlibApi::class)\ninline fun <reified T : Enum<T>> printAllValues() {\n    print(enumEntries<T>().joinToString { it.name })\n}\n\nprintAllValues<RGB>()\n// RED, GREEN, BLUE\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/JS Browser Task with Continuous Build Alias (Bash)\nDESCRIPTION: Executes the `jsBrowserDevelopmentRun` task with Gradle's continuous build feature enabled using the `-t` shorthand flag. This achieves the same result as `--continuous`, triggering automatic rebuilds on source changes.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jsBrowserDevelopmentRun -t\n```\n\n----------------------------------------\n\nTITLE: Overriding Kotlin/Native Compiler Download URL\nDESCRIPTION: Gradle property to customize the base download URL for the Kotlin/Native compiler distribution. This is useful for CI environments where external links may be restricted.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_5\n\nLANGUAGE: Properties\nCODE:\n```\nkotlin.native.distribution.baseDownloadUrl=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Output of Suspending Function Thread Example\nDESCRIPTION: Shows the console output from calling a Kotlin suspending function from Swift, demonstrating that the completion handler runs on a background thread while the test itself runs on the main thread.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nRunning test on <_NSMainThread: 0x600001b100c0>{number = 1, name = main}\nHello\nWorld!\nRunning completion handler on <NSThread: 0x600001b45bc0>{number = 7, name = (null)}\n```\n\n----------------------------------------\n\nTITLE: Chunking Collections with Transformation in Kotlin\nDESCRIPTION: Shows using the `chunked()` extension function with an additional transformation lambda. The collection is split into chunks of a specified size (3 in this example), and the provided lambda (`{ it.sum() }`) is applied to each chunk immediately. The result is a list containing the results of the transformation applied to each chunk.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-parts.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList() \n    println(numbers.chunked(3) { it.sum() })  // `it` is a chunk of the original collection\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases in Kotlin 1.1\nDESCRIPTION: Demonstrates the use of type aliases to create alternative names for existing types. The example defines an OscarWinners type alias for a Map<String, String> and shows how the types are interchangeable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n//sampleStart\ntypealias OscarWinners = Map<String, String>\n\nfun countLaLaLand(oscarWinners: OscarWinners) =\n        oscarWinners.count { it.value.contains(\"La La Land\") }\n\n// Note that the type names (initial and the type alias) are interchangeable:\nfun checkLaLaLandIsTheBestMovie(oscarWinners: Map<String, String>) =\n        oscarWinners[\"Best picture\"] == \"La La Land\"\n//sampleEnd\n\nfun oscarWinners(): OscarWinners {\n    return mapOf(\n            \"Best song\" to \"City of Stars (La La Land)\",\n            \"Best actress\" to \"Emma Stone (La La Land)\",\n            \"Best picture\" to \"Moonlight\" /* ... */)\n}\n\nfun main(args: Array<String>) {\n    val oscarWinners = oscarWinners()\n\n    val laLaLandAwards = countLaLaLand(oscarWinners)\n    println(\"LaLaLandAwards = $laLaLandAwards (in our small example), but actually it's 6.\")\n\n    val laLaLandIsTheBestMovie = checkLaLaLandIsTheBestMovie(oscarWinners)\n    println(\"LaLaLandIsTheBestMovie = $laLaLandIsTheBestMovie\")\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Library File\nDESCRIPTION: Shows how to remove a local library file after it has been installed to the repository.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ rm kotlinizer.klib\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Annotations with the Same Use-Site Target in Kotlin\nDESCRIPTION: Demonstrates a shorthand syntax for applying multiple annotations (`@Inject`, `@VisibleForTesting`) to the same use-site target (`@set:`). Brackets `[]` are used after the target to group the annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Example {\n     @set:[Inject VisibleForTesting] // Assuming Inject and VisibleForTesting are defined annotations\n     var collaborator: Collaborator // Assuming Collaborator is a defined type\n}\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Requests with cURL\nDESCRIPTION: This snippet shows how to use cURL commands to send HTTP POST and GET requests to the Kotlin Spring Boot application. It demonstrates adding messages to the database and retrieving all messages using the command line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-restful.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --location \"http://localhost:8080\" -H \"Content-Type: application/json\" -d \"{ \\\"text\\\": \\\"Hello!\\\" }\"\n\ncurl -X POST --location \"http://localhost:8080\" -H \"Content-Type: application/json\" -d \"{ \\\"text\\\": \\\"Bonjour!\\\" }\"\n\ncurl -X POST --location \"http://localhost:8080\" -H \"Content-Type: application/json\" -d \"{ \\\"text\\\": \\\"Privet!\\\" }\"\n\ncurl -X GET --location \"http://localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Defining Input Helper Functions using readln() in Kotlin 1.6+\nDESCRIPTION: Shows how to define private utility functions `readStr` and `readInt` for competitive programming templates in Kotlin 1.6.0 and later. These functions simplify reading a line of string and a single integer from standard input using `readln()`. The `private` modifier helps avoid naming conflicts when using the template for multiple solutions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun readStr() = readln() // string line\nprivate fun readInt() = readStr().toInt() // single int\n// similar for other types you'd use in your solutions\n```\n\n----------------------------------------\n\nTITLE: Behavior of Data Class Functions with Body-Declared Properties in Kotlin\nDESCRIPTION: Demonstrates the runtime behavior of a data class where some properties are declared in the body. The example shows that two `Person` instances are considered equal (`person1 == person2` is true) if their primary constructor properties (`name`) match, even if their body-declared properties (`age`) differ. It also shows that the generated `toString()` method only includes the primary constructor property (`name`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String) {\n    var age: Int = 0\n}\nfun main() {\n//sampleStart\n    val person1 = Person(\"John\")\n    val person2 = Person(\"John\")\n    person1.age = 10\n    person2.age = 20\n\n    println(\"person1 == person2: ${person1 == person2}\")\n    // person1 == person2: true\n  \n    println(\"person1 with age ${person1.age}: ${person1}\")\n    // person1 with age 10: Person(name=John)\n  \n    println(\"person2 with age ${person2.age}: ${person2}\")\n    // person2 with age 20: Person(name=John)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating an Extension Function Receiver Parameter in Kotlin\nDESCRIPTION: Shows the syntax for annotating the receiver parameter (`String`) of an extension function (`myExtension`) using the `@receiver:` use-site target followed by the annotation (`@Fancy`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun @receiver:Fancy String.myExtension() { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Code Style Property in Maven pom.xml - XML\nDESCRIPTION: This snippet demonstrates how to explicitly set the Kotlin code style to \\\"official\\\" within the Maven build system by specifying it in the project's pom.xml file. No additional dependencies are required, but the project must use the Kotlin Maven plugin, and the <kotlin.code.style> property must be placed inside the <properties> block. This ensures the project adheres to the official Kotlin code formatting conventions during build and IDE project import, but will not affect projects not using Maven or those where the property is set elsewhere.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/code-style-migration-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\\n  <kotlin.code.style>official</kotlin.code.style>\\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Executing kotlinc with KSP using a Bash Script\nDESCRIPTION: This comprehensive Bash script demonstrates running `kotlinc` with KSP. It defines variables for paths and the KSP plugin ID, specifies plugin JARs using `-Xplugin`, creates an output directory, and configures KSP options (processor classpath, output directories, custom options `apoption`) using `-P`. It passes any script arguments (`$*`) to `kotlinc`, typically source files.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-command-line.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nKSP_PLUGIN_ID=com.google.devtools.ksp.symbol-processing\nKSP_PLUGIN_OPT=plugin:$KSP_PLUGIN_ID\n\nKSP_PLUGIN_JAR=./com/google/devtools/ksp/symbol-processing-cmdline/%kspSupportedKotlinVersion%-%kspVersion%/symbol-processing-cmdline-%kspSupportedKotlinVersion%-%kspVersion%.jar\nKSP_API_JAR=./com/google/devtools/ksp/symbol-processing-api/%kspSupportedKotlinVersion%-%kspVersion%/symbol-processing-api-%kspSupportedKotlinVersion%-%kspVersion%.jar\nKOTLINC=./kotlinc/bin/kotlinc\n\nAP=/path/to/your-processor.jar\n\nmkdir out\n$KOTLINC \\\n        -Xplugin=$KSP_PLUGIN_JAR \\\n        -Xplugin=$KSP_API_JAR \\\n        -Xallow-no-source-files \\\n        -P $KSP_PLUGIN_OPT:apclasspath=$AP \\\n        -P $KSP_PLUGIN_OPT:projectBaseDir=. \\\n        -P $KSP_PLUGIN_OPT:classOutputDir=./out \\\n        -P $KSP_PLUGIN_OPT:javaOutputDir=./out \\\n        -P $KSP_PLUGIN_OPT:kotlinOutputDir=./out \\\n        -P $KSP_PLUGIN_OPT:resourceOutputDir=./out \\\n        -P $KSP_PLUGIN_OPT:kspOutputDir=./out \\\n        -P $KSP_PLUGIN_OPT:cachesDir=./out \\\n        -P $KSP_PLUGIN_OPT:incremental=false \\\n        -P $KSP_PLUGIN_OPT:apoption=key1=value1 \\\n        -P $KSP_PLUGIN_OPT:apoption=key2=value2 \\\n        $*\n```\n\n----------------------------------------\n\nTITLE: Importing Another Nested JS Package with @JsModule and @JsQualifier (Kotlin)\nDESCRIPTION: Kotlin code, in a separate file from the previous example, showing how to import members from another nested JavaScript package (`mylib.pkg2`) within the same module (`extModule`). It uses `@file:JsModule(\"extModule\")` and `@file:JsQualifier(\"mylib.pkg2\")` to map the JavaScript function `baz` to an external Kotlin function within the `extlib.pkg2` package.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@file:JsModule(\"extModule\")\n@file:JsQualifier(\"mylib.pkg2\")\n\npackage extlib.pkg2\n\nexternal fun baz()\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit API Mode in Groovy Gradle Build Scripts\nDESCRIPTION: Configuration examples for enabling explicit API mode in Kotlin projects using Gradle with Groovy build scripts. Shows both strict and warning modes for the Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {    \n    // for strict mode\n    explicitApi() \n    // or\n    explicitApi = 'strict'\n    \n    // for warning mode\n    explicitApiWarning()\n    // or\n    explicitApi = 'warning'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Names in Kotlin/JS\nDESCRIPTION: Configuration for adding Kotlin variable and function names to source maps using sourceMapNamesPolicy in Gradle build file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile>().configureEach {\n    compilercompileOptions.sourceMapNamesPolicy.set(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) // or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Annotations in Kotlin\nDESCRIPTION: Demonstrates how to apply the previously defined `@Fancy` annotation to various Kotlin code elements: a class (`Foo`), a function (`baz`), a function parameter (`foo`), and an expression (`1`).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Fancy class Foo {\n    @Fancy fun baz(@Fancy foo: Int): Int {\n        return (@Fancy 1)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ULong Literals with Explicit Suffix in Kotlin\nDESCRIPTION: Shows how to use 'uL' and 'UL' suffixes to explicitly specify that a literal should be treated as an unsigned long.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/unsigned-integer-types.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = 1UL // ULong, even though no expected type provided and the constant fits into UInt\n```\n\n----------------------------------------\n\nTITLE: Configuring XCFrameworks in Kotlin Multiplatform (Groovy DSL)\nDESCRIPTION: Gradle build script (Groovy DSL) for configuring XCFrameworks in a Kotlin Multiplatform project, enabling support for multiple Apple platforms and architectures.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig\n\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform'\n}\n\nkotlin {\n    def xcf = new XCFrameworkConfig(project)\n\n    ios {\n        binaries.framework {\n            baseName = \"shared\"\n            xcf.add(it)\n        }\n    }\n    watchos {\n        binaries.framework {\n            baseName = \"shared\"\n            xcf.add(it)\n        }\n    }\n    tvos {\n        binaries.framework {\n            baseName = \"shared\"\n            xcf.add(it)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Names for Dependencies on Source Sets in Kotlin Multiplatform\nDESCRIPTION: Configuration naming pattern for dependencies on the jvmMain source set, which remains unchanged after the breaking change.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\njvmMain<Scope>\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in Kotlin Build Script\nDESCRIPTION: Kotlin build script configuration to enable language version 1.6 and optional progressive mode.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings.apply {\n            languageVersion = \"1.6\"\n            //progressiveMode = true // false by default\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @JvmStatic and @JvmField in Companion Objects of Interfaces\nDESCRIPTION: This example shows how to use @JvmStatic and @JvmField annotations in companion objects of interfaces in Kotlin 1.3. These annotations tell the compiler to lift the members to the interface level as static members.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Foo {\n    companion object {\n        @JvmField\n        val answer: Int = 42\n\n        @JvmStatic\n        fun sayHello() {\n            println(\"Hello, world!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Lombok Configuration File in Gradle (Kotlin DSL)\nDESCRIPTION: This code shows how to specify the path to the Lombok configuration file in a Gradle build script using the Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lombok.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlinLombok {\n    lombokConfigurationFile(file(\"lombok.config\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Multiplatform targets in Groovy\nDESCRIPTION: This code snippet illustrates how to configure different targets (JVM, iOS ARM64, macOS X64, and JavaScript) within the `kotlin {}` block using the Groovy DSL.  Each target is defined with a function call, e.g., `jvm()`, `iosArm64()`. For JavaScript, the `browser()` execution environment is specified.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nkotlin {\n    jvm()\n    iosArm64()\n    macosX64()\n    js().browser()\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Kotlin Metadata using kotlin-metadata-jvm Library\nDESCRIPTION: This snippet shows how to modify Kotlin metadata using the kotlin-metadata-jvm library. It demonstrates parsing metadata, removing private functions, and serializing the modified metadata back.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// Imports the necessary libraries\nimport kotlin.metadata.jvm.*\nimport kotlin.metadata.*\n\nfun main() {\n    // Specifies the fully qualified class name\n    val className = \"org.example.SampleClass\"\n\n    try {\n        // Retrieves the class object for the specified name\n        val clazz = Class.forName(className)\n\n        // Retrieves the @Metadata annotation\n        val metadataAnnotation = clazz.getAnnotation(Metadata::class.java)\n        if (metadataAnnotation != null) {\n            println(\"Kotlin Metadata found for class: $className\")\n\n            // Parses metadata using the readStrict() function\n            val metadata = KotlinClassMetadata.readStrict(metadataAnnotation)\n            if (metadata is KotlinClassMetadata.Class) {\n                val kmClass = metadata.kmClass\n\n                // Removes private functions from the class metadata\n                kmClass.functions.removeIf { it.visibility == Visibility.PRIVATE }\n                println(\"Removed private functions. Remaining functions: ${kmClass.functions.map { it.name }}\")\n\n                // Serializes the modified metadata back\n                val newMetadata = metadata.write()\n                // After modifying the metadata, you need to write it into the class file\n                // To do so, you can use a bytecode manipulation framework such as ASM\n                \n                println(\"Modified metadata: ${newMetadata}\")\n            } else {\n                println(\"The metadata is not a class.\")\n            }\n        } else {\n            println(\"No Kotlin Metadata found for class: $className\")\n        }\n    } catch (e: ClassNotFoundException) {\n        println(\"Class not found: $className\")\n    } catch (e: Exception) {\n        println(\"Error processing metadata: ${e.message}\")\n        e.printStackTrace()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Kotlin with javax.script API\nDESCRIPTION: Demonstrates how to use Kotlin with the javax.script API (JSR-223) to evaluate snippets of code at runtime.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nval engine = ScriptEngineManager().getEngineByExtension(\"kts\")!!\nengine.eval(\"val x = 3\")\nprintln(engine.eval(\"x + 2\"))  // Prints out 5\n```\n\n----------------------------------------\n\nTITLE: Using Text Blocks for Multiline Strings in Java 15\nDESCRIPTION: Shows the usage of text blocks (introduced in Java 15) for creating multiline strings, demonstrating the potential extra line behavior when triple-quotes are on a new line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nString result = \"\"\"\n    Kotlin\n       Java\n    \"\"\";\nSystem.out.println(result);\n```\n\n----------------------------------------\n\nTITLE: Enabling K2 Compiler in Kotlin/JVM\nDESCRIPTION: Command line option to enable the new K2 compiler for JVM projects to achieve performance improvements.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-Xuse-k2\n```\n\n----------------------------------------\n\nTITLE: Basic Kotlin Artifacts Library Configuration (Groovy DSL)\nDESCRIPTION: Basic setup for configuring a native library using the Kotlin Artifacts DSL with Groovy syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinArtifacts {\n    it.native.Library {\n        target = iosX64 // Define your target instead\n        modes(DEBUG, RELEASE)\n        // Binary configuration\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterate over Range using For Loop in Kotlin\nDESCRIPTION: This snippet demonstrates how to iterate over a numerical range using a `for` loop in Kotlin. The loop iterates from 1 to 5, printing each number in the range. The `in` keyword is used to specify the range for the iterator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-control-flow.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    for (number in 1..5) { \n        // number is the iterator and 1..5 is the range\n        print(number)\n    }\n    // 12345\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Project Settings in Groovy DSL\nDESCRIPTION: Shows the basic structure of the `kotlin {}` block in a Groovy DSL (`build.gradle`) file. This block is used to configure various aspects of the Kotlin project managed by the Kotlin Multiplatform Gradle plugin, such as targets, source sets, and dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: When Expression No Subject Kotlin\nDESCRIPTION: Shows how to use 'when' without a subject, requiring an 'else' branch to ensure all cases are covered. The 'else' branch is executed when none of the preceding conditions are met.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen {\n    a > b -> \"a is greater than b\"\n    a < b -> \"a is less than b\"\n    else -> \"a is equal to b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Serialization with Companion Object in Kotlin\nDESCRIPTION: Demonstrates the deprecated way of declaring a custom serializer for a class using the @Serializable and @Serializer annotations on the companion object. This approach is no longer recommended due to potential confusion.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.*\n\n@Serializable\nclass Foo(val a: Int) {\n    @Serializer(Foo::class)\n    companion object {\n        // Custom implementation of KSerializer<Foo>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Solving Reachable Numbers with HashSet and readln() in Kotlin 1.6+\nDESCRIPTION: Implements the main logic for the \"Reachable Numbers\" problem for Kotlin 1.6.0 and later. It reads the initial integer `n` using `readln().toInt()`, uses a `HashSet` called `reached` to store unique numbers generated by repeatedly applying the function `f` (defined separately), and continues until a number is repeated. Finally, it prints the total count of unique numbers reached.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    var n = readln().toInt() // read integer from the input\n    val reached = HashSet<Int>() // a mutable hash set \n    while (reached.add(n)) n = f(n) // iterate function f\n    println(reached.size) // print answer to the output\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring kotlin-spring Plugin in Gradle with Groovy DSL\nDESCRIPTION: Shows how to add the kotlin-spring plugin in a Gradle build script using Groovy DSL. This plugin is a wrapper over all-open that automatically configures it with Spring-specific annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.plugin.spring\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Compiler Options in kapt with Gradle\nDESCRIPTION: Example of passing arbitrary options to the Java compiler used by kapt, such as increasing the maximum count of errors from annotation processors.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_20\n\nLANGUAGE: groovy\nCODE:\n```\nkapt {\n    javacOptions {\n        // Increase the max count of errors from annotation processors.\n        // Default is 100.\n        option(\"-Xmaxerrs\", 500)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uppercase String Function Kotlin\nDESCRIPTION: This example shows a standard function that takes a string as input and returns the uppercase version of the string. The main function calls this function and prints the result to the console.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-functions.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfun uppercaseString(text: String): String {\n    return text.uppercase()\n}\nfun main() {\n    println(uppercaseString(\"hello\"))\n    // HELLO\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying JDK Home with UsesKotlinJavaToolchain in Groovy DSL\nDESCRIPTION: Sets the JDK home for all Kotlin tasks that implement the UsesKotlinJavaToolchain interface using Groovy DSL. Used for Gradle versions 6.1 to 6.6.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\nproject.tasks\n    .withType(UsesKotlinJavaToolchain.class)\n    .configureEach {\n        it.kotlinJavaToolchain.jdk.use(\n            '/path/to/local/jdk',\n            JavaVersion.<LOCAL_JDK_VERSION>\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Swift Storage Implementation for Object Chain Example\nDESCRIPTION: Implements the Storage interface in Swift to demonstrate garbage collection behavior with chains of Kotlin and Swift objects, highlighting how deinitializers are called across multiple GC cycles.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nclass SwiftStorage : Storage {\n\n    let name: String\n\n    var field: Any? = nil\n\n    init(_ name: String) {\n        self.name = name\n    }\n\n    func store(arg: Any) {\n        field = arg\n    }\n\n    deinit {\n        print(\"deinit SwiftStorage \\(name)\")\n    }\n}\n\nfunc test() {\n    KotlinExample().action(\n        firstSwiftStorage: SwiftStorage(\"first\"),\n        secondSwiftStorage: SwiftStorage(\"second\")\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Build configuration with kotlin-js plugin\nDESCRIPTION: Shows the original build.gradle.kts configuration using the deprecated kotlin-js plugin, including plugin application, dependencies declaration, and JS configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts:\nplugins {\n    kotlin(\"js\") version \"1.9.0\"\n}\n\ndependencies {\n    testImplementation(kotlin(\"test\"))\n    implementation(\"org.jetbrains.kotlinx:kotlinx-html:0.8.0\")\n}\n\nkotlin {\n    js {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function f Imperatively with a While Loop in Kotlin\nDESCRIPTION: Provides an imperative implementation of the function `f(x)` for the \"Reachable Numbers\" problem. It increments `x` by 1 and then uses a `while` loop and a mutable variable `cur` to repeatedly divide by 10 as long as the number is divisible by 10, effectively removing trailing zeros.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun f(x: Int): Int {\n    var cur = x + 1\n    while (cur % 10 == 0) cur /= 10\n    return cur\n}\n```\n\n----------------------------------------\n\nTITLE: Convert classes and interfaces to external - Kotlin\nDESCRIPTION: Converts Kotlin interfaces and classes that derive from pure JS classes (like React's State and Props) to external interfaces to avoid ClassCastExceptions. This ensures the compiler correctly handles objects coming from JS.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Replace this\ninterface AppState : State { }\ninterface AppProps : Props { }\ndata class CustomComponentState(var name: String) : State\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n// With this\nexternal interface AppState : State { }\nexternal interface AppProps : Props { }\nexternal interface CustomComponentState : State {\n   var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Standard Library JDK Variants Version Alignment in Gradle Properties\nDESCRIPTION: Configuration property to disable automatic version alignment for kotlin-stdlib-jdk7 and kotlin-stdlib-jdk8 dependencies. Add this to your gradle.properties file when you want to control versions manually.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_32\n\nLANGUAGE: none\nCODE:\n```\nkotlin.stdlib.jdk.variants.version.alignment=false\n```\n\n----------------------------------------\n\nTITLE: Using Lateinit with Top-level Properties and Local Variables in Kotlin\nDESCRIPTION: This example demonstrates how to use the lateinit modifier with local variables, which was introduced in Kotlin 1.2. It creates a cycle of three nodes where one node references another that hasn't been defined yet.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew12.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Node<T>(val value: T, val next: () -> Node<T>)\n\nfun main(args: Array<String>) {\n    // A cycle of three nodes:\n    lateinit var third: Node<Int>\n\n    val second = Node(2, next = { third })\n    val first = Node(1, next = { second })\n\n    third = Node(3, next = { first })\n\n    val nodes = generateSequence(first) { it.next() }\n    println(\"Values in the cycle: ${nodes.take(7).joinToString { it.value.toString() }}, ...\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin/Native Executable with Gradle\nDESCRIPTION: This command demonstrates how to run the Kotlin/Native executable using Gradle. It uses the runDebugExecutableNative task to build and run the application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-primitive-data-types-from-c.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew runDebugExecutableNative\n```\n\n----------------------------------------\n\nTITLE: Basic Types Exercise in Kotlin\nDESCRIPTION: Practice exercise demonstrating variable declaration with explicit types for different data types including Int, String, Double, Long, Boolean, and Char.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-basic-types.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val a: Int = 1000 \n    val b = \"log message\"\n    val c = 3.14\n    val d = 100_000_000_000_000\n    val e = false\n    val f = '\\n'\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val a: Int = 1000\n    val b: String = \"log message\"\n    val c: Double = 3.14\n    val d: Long = 100_000_000_000_000\n    val e: Boolean = false\n    val f: Char = '\\n'\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin When Statement with Multiline Branch\nDESCRIPTION: Demonstrates the formatting for a `when` statement, where a branch spanning multiple lines is separated from adjacent case blocks with a blank line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun parsePropertyValue(propName: String, token: Token) {\n    when (token) {\n        is Token.ValueToken ->\n            callback.visitValue(propName, token.value)\n\n        Token.LBRACE -> { // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Old Kotlin Backend for Numeric Downcast Behavior\nDESCRIPTION: This Kotlin compiler flag forces the use of the older compiler backend, reverting to the pre-1.5.30 behavior regarding implicit numeric downcasts, specifically in generated property delegate accessors. This can be used as a temporary measure if the fix introduced in 1.5.30 causes issues.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n-Xuse-old-backend\n```\n\n----------------------------------------\n\nTITLE: Temporarily Allowing Super Calls from Public Inline Functions (Kotlin)\nDESCRIPTION: This Kotlin compiler flag disables the error introduced in Kotlin 1.6 that prohibits calling functions using the `super` qualifier from within public or protected inline functions or property accessors. It allows temporarily reverting to the pre-1.6 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-ProhibitSuperCallsFromPublicInline\n```\n\n----------------------------------------\n\nTITLE: Disabling Yarn for NPM Dependency Management\nDESCRIPTION: Shows the configuration property to set in `gradle.properties` to disable the default Yarn package manager for handling npm dependencies. Setting `kotlin.js.yarn=false` instructs the Kotlin Multiplatform plugin to use the npm package manager instead.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_13\n\nLANGUAGE: none\nCODE:\n```\nkotlin.js.yarn=false\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions in a Kotlin Test\nDESCRIPTION: This code demonstrates the usage of the `assertSoftly` function within a Kotlin test. It imports the function, defines a data class, and then uses `assertSoftly` to wrap assertions within a test function.  Assertions that fail will not immediately throw an exception; instead, the failures are collected and reported at the end of the `assertSoftly` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// Import the assertSoftly() function\nimport org.example.assertSoftly\n        \nclass SoftAssertExampleTest1 {\n\n    data class Employee(val name: String, val age: Int, val salary: Int)\n\n    @Test\n    fun `test employees data`() {\n        val employees = listOf(\n            Employee(\"Alice\", 30, 60000),\n            Employee(\"Bob\", 45, 80000),\n            Employee(\"Charlie\", 55, 40000),\n            Employee(\"Dave\", 150, 70000)\n        )\n\n        assertSoftly {\n            for (employee in employees) {\n                assert(employee.age < 100) { \"${employee.name} has an invalid age: ${employee.age}\" }\n                assert(employee.salary > 50000) { \"${employee.name} has an invalid salary: ${employee.salary}\" }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Short Words in Kotlin\nDESCRIPTION: This snippet extends List<String> with a custom method to filter words based on their length and removes articles. It demonstrates mutability with MutableList and requires Kotlin 1.3 or higher.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collections-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun List<String>.getShortWordsTo(shortWords: MutableList<String>, maxLength: Int) {\n    this.filterTo(shortWords) { it.length <= maxLength }\n    // throwing away the articles\n    val articles = setOf(\"a\", \"A\", \"an\", \"An\", \"the\", \"The\")\n    shortWords -= articles\n}\n\nfun main() {\n    val words = \"A long time ago in a galaxy far far away\".split(\" \")\n    val shortWords = mutableListOf<String>()\n    words.getShortWordsTo(shortWords, 3)\n    println(shortWords)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kotlinx-browser Dependency in Kotlin\nDESCRIPTION: This code snippet shows how to add the `kotlinx-browser` library as a dependency in a Kotlin project's build configuration file. This library provides access to JavaScript browser APIs. It assumes the use of a Gradle-based Kotlin project configuration. The snippet configures the `wasmJsMain` source set to include the dependency.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nval wasmJsMain by getting {\n    dependencies {\n        implementation(\"org.jetbrains.kotlinx:kotlinx-browser:0.3\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Compiler Warning Level in Command Line\nDESCRIPTION: Demonstrates the syntax for the new -Xwarning-level compiler option, which allows fine-tuning of warning severity levels for specific diagnostics.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew-eap.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-Xwarning-level=DIAGNOSTIC_NAME:(error|warning|disabled)\n```\n\n----------------------------------------\n\nTITLE: Building a Kotlin Native Project with Gradle\nDESCRIPTION: A Gradle command to build native binaries for the Kotlin/Native project. This generates both debug and release executables in the build directory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew nativeBinaries\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Native Runtime Declarations in Objective-C\nDESCRIPTION: Shows the Objective-C header file containing Kotlin runtime declarations for interoperability. Includes definitions for KotlinBase, KotlinMutableSet, KotlinMutableDictionary, and NSError extensions for Kotlin exceptions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\nNS_ASSUME_NONNULL_BEGIN\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wunknown-warning-option\"\n#pragma clang diagnostic ignored \"-Wincompatible-property-type\"\n#pragma clang diagnostic ignored \"-Wnullability\"\n\n#pragma push_macro(\"_Nullable_result\")\n#if !__has_feature(nullability_nullable_result)\n#undef _Nullable_result\n#define _Nullable_result _Nullable\n#endif\n\n__attribute__((swift_name(\"KotlinBase\")))\n@interface DemoBase : NSObject\n- (instancetype)init __attribute__((unavailable));\n+ (instancetype)new __attribute__((unavailable));\n+ (void)initialize __attribute__((objc_requires_super));\n@end\n\n@interface DemoBase (DemoBaseCopying) <NSCopying>\n@end\n\n__attribute__((swift_name(\"KotlinMutableSet\")))\n@interface DemoMutableSet<ObjectType> : NSMutableSet<ObjectType>\n@end\n\n__attribute__((swift_name(\"KotlinMutableDictionary\")))\n@interface DemoMutableDictionary<KeyType, ObjectType> : NSMutableDictionary<KeyType, ObjectType>\n@end\n\n@interface NSError (NSErrorDemoKotlinException)\n@property (readonly) id _Nullable kotlinException;\n@end\n```\n\n----------------------------------------\n\nTITLE: Using takeIf with Safe Call Operator in Kotlin\nDESCRIPTION: This example demonstrates the use of takeIf with a safe call operator to perform a null-safe operation on a string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val str = \"Hello\"\n    val caps = str.takeIf { it.isNotEmpty() }?.uppercase()\n   //val caps = str.takeIf { it.isNotEmpty() }.uppercase() //compilation error\n    println(caps)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stdlib dependency (old way)\nDESCRIPTION: Prior to Kotlin 1.9.20, configuring the standard library dependency required specifying it for each source set individually. This snippet shows how to configure stdlib dependencies for `commonMain`, `jvmMain`, and `jsMain` source sets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        // For the common source set\n        val commonMain by getting {\n            dependencies {\n                implementation(\"org.jetbrains.kotlin:kotlin-stdlib-common:1.9.10\")\n            }\n        }\n\n        // For the JVM source set\n        val jvmMain by getting {\n            dependencies {\n                implementation(\"org.jetbrains.kotlin:kotlin-stdlib:1.9.10\")\n            }\n        }\n\n        // For the JS source set\n        val jsMain by getting {\n            dependencies {\n                implementation(\"org.jetbrains.kotlin:kotlin-stdlib-js:1.9.10\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin to JavaScript with kotlin2js Ant Task (Single Source) - XML\nDESCRIPTION: This Ant script configures the kotlin2js task to compile Kotlin code from a single source directory (root1) into a JavaScript output file (out.js). The task is defined via typedef referencing kotlin-ant.jar. This is used for projects targeting JavaScript where all code is in one folder.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ant.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<project name=\\\"Ant Task Test\\\" default=\\\"build\\\">\\n    <typedef resource=\\\"org/jetbrains/kotlin/ant/antlib.xml\\\" classpath=\\\"${kotlin.lib}/kotlin-ant.jar\\\"/>\\n\\n    <target name=\\\"build\\\">\\n        <kotlin2js src=\\\"root1\\\" output=\\\"out.js\\\"/>\\n    </target>\\n</project>\n```\n\n----------------------------------------\n\nTITLE: Declaring Sealed Interfaces and Classes in Kotlin\nDESCRIPTION: Demonstrates how to declare sealed interfaces and classes, and how to define subclasses that extend them. The example shows a hierarchy of error classes with various implementations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Create a sealed interface\nsealed interface Error\n\n// Create a sealed class that implements sealed interface Error\nsealed class IOError(): Error\n\n// Define subclasses that extend sealed class 'IOError'\nclass FileReadError(val file: File): IOError()\nclass DatabaseError(val source: DataSource): IOError()\n\n// Create a singleton object implementing the 'Error' sealed interface \nobject RuntimeError : Error\n```\n\n----------------------------------------\n\nTITLE: Simple Lambda Without Parameters\nDESCRIPTION: Shows how parentheses can be omitted when lambda is the only argument in a function call.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/lambdas.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nrun { println(\"...\") }\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods with Link-Only Mode\nDESCRIPTION: Kotlin Gradle configuration for using CocoaPods dependencies in link-only mode, which enables linking without generating cinterop bindings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ncocoapods {\n    summary = \"CocoaPods test library\"\n    homepage = \"https://github.com/JetBrains/kotlin\"\n\n    pod(\"Alamofire\", linkOnly = true) {\n        version = \"5.7.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Collection Types in Kotlin\nDESCRIPTION: Shows how to convert between collection types (list to set) while creating a mutable copy that can be modified independently.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/constructing-collections.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val sourceList = mutableListOf(1, 2, 3)    \n    val copySet = sourceList.toMutableSet()\n    copySet.add(3)\n    copySet.add(4)    \n    println(copySet)\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JS IR Output Granularity in Gradle Properties\nDESCRIPTION: Configuration property for controlling whether the JS IR compiler generates one file per module or a single file for the whole project. The default is now per-module output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n# gradle.properties\nkotlin.js.ir.output.granularity=whole-program // `per-module` is the default\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class Header Formatting - Single Line\nDESCRIPTION: Demonstrates the recommended formatting for class headers with a small number of constructor parameters, fitting the declaration on a single line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Person(id: Int, name: String)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Context Receivers in Kotlin/JVM\nDESCRIPTION: This snippet shows how to use the new context receivers feature to make functions context-dependent. It requires the -Xcontext-receivers compiler option and is currently a prototype for Kotlin/JVM.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface LoggingContext {\n    val log: Logger // This context provides a reference to a logger \n}\n\ncontext(LoggingContext)\nfun startBusinessOperation() {\n    // You can access the log property since LoggingContext is an implicit receiver\n    log.info(\"Operation has started\")\n}\n\nfun test(loggingContext: LoggingContext) {\n    with(loggingContext) {\n        // You need to have LoggingContext in a scope as an implicit receiver\n        // to call startBusinessOperation()\n        startBusinessOperation()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SAM Interface with Annotation in Java\nDESCRIPTION: Example of creating a Java SAM interface annotated with @SamWithReceiver, which tells the compiler to treat the first parameter as a receiver in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic @interface SamWithReceiver {}\n\n@SamWithReceiver\npublic interface TaskRunner {\n    void run(Task task);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring kotlin-spring Plugin in Gradle with Kotlin DSL\nDESCRIPTION: Shows how to add the kotlin-spring plugin in a Gradle build script using Kotlin DSL. This plugin is a wrapper over all-open that automatically configures it with Spring-specific annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"org.jetbrains.kotlin.plugin.spring\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function f Functionally with Tail Recursion in Kotlin\nDESCRIPTION: Defines the function `f(x)` required by the \"Reachable Numbers\" problem. It first adds 1 to `x` and then recursively removes trailing zeros using a helper tail-recursive function `removeZeroes`. This demonstrates a functional approach in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/competitive-programming.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntailrec fun removeZeroes(x: Int): Int =\n    if (x % 10 == 0) removeZeroes(x / 10) else x\n\nfun f(x: Int) = removeZeroes(x + 1)\n```\n\n----------------------------------------\n\nTITLE: Kotlin File Annotations\nDESCRIPTION: This snippet shows where to place file annotations in relation to the file comment and package statement, emphasizing the separation with a blank line.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n/** License, copyright and whatever */\n@file:JvmName(\"FooBar\")\n\npackage foo.bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Version in Groovy Build Script\nDESCRIPTION: This snippet demonstrates how to set the language version to 1.7 in a Groovy build script to enable new language features like definitely non-nullable types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = '1.7'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assert Function Example (Kotlin)\nDESCRIPTION: This code snippet showcases a basic test using the `assert()` function in Kotlin. The Power-assert plugin, when enabled, provides detailed failure messages including variable values and sub-expression results.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/power-assert.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.test.Test\n\nclass SampleTest {\n\n    @Test\n    fun testFunction() {\n        val hello = \"Hello\"\n        val world = \"world!\"\n        assert(hello.length == world.substring(1, 4).length) { \"Incorrect length\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Properties and Parameters with Trailing Comma in Kotlin\nDESCRIPTION: This example illustrates class properties and constructor parameters with trailing commas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Customer(\n    val name: String,\n    val lastName: String, // trailing comma\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Customer(\n    val name: String,\n    lastName: String, // trailing comma\n)\n```\n\n----------------------------------------\n\nTITLE: Temporarily Allowing Self-Calls in Nested Object Super Constructors (Kotlin)\nDESCRIPTION: This Kotlin compiler flag allows developers to temporarily revert to the pre-1.6 behavior, permitting access to containing class members within the super constructor call of its companion and nested objects. This flag disables the error introduced in Kotlin 1.6.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-ProhibitSelfCallsInNestedObjects\n```\n\n----------------------------------------\n\nTITLE: Removing noReflect and includeRuntime Compiler Options\nDESCRIPTION: Outlines the removal of the deprecated `noReflect` and `includeRuntime` compiler options, a source incompatible change affecting build configurations. These options were raised to an error deprecation level in 1.5.0 and are removed entirely in Kotlin version 1.6.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Enabling Annotation Processor Classloader Caching - Properties File\nDESCRIPTION: Provides `gradle.properties` key-value settings to enable annotation processor classloader caching and disable compile classpath inclusion, which can boost kapt build performance with multiple modules. The `cache.size` value should match the module count.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n# positive value will enable caching\n# use the same value as the number of modules that use kapt\nkapt.classloaders.cache.size=5\n\n# disable for caching to work\nkapt.include.compile.classpath=false\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Strings Using String.join() in Java\nDESCRIPTION: Demonstrates how to create multiline strings in Java versions before Java 15 using the String.join() method with a system-specific line separator.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nString lineSeparator = System.getProperty(\"line.separator\");\nString result = String.join(lineSeparator,\n       \"Kotlin\",\n       \"Java\");\nSystem.out.println(result);\n```\n\n----------------------------------------\n\nTITLE: Locking with Inlined Higher-Order Function in Kotlin\nDESCRIPTION: Shows how a typical locking pattern using a higher-order function can be optimized by inlining, removing the creation of function/lambda objects at runtime. Instead of invoking a lambda, lock and unlock calls are moved directly into the call site, improving performance. Requires the presence of a Lock interface and proper definition of 'foo()' and 'l' for demonstration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/inline-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlock(l) { foo() }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nl.lock()\ntry {\n    foo()\n} finally {\n    l.unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Kotlin/Wasm Application in Node.js\nDESCRIPTION: Gradle command to run tests for the Kotlin/Wasm application in Node.js environment, verifying that the WebAssembly binary works correctly with WASI APIs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-wasi.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew wasmWasiNodeTest\n```\n\n----------------------------------------\n\nTITLE: Setting Task-Specific Kotlin Daemon JVM Arguments in Kotlin DSL\nDESCRIPTION: Configures JVM arguments for the Kotlin daemon for a specific compile task in Kotlin DSL. This may start a new Kotlin daemon instance for the task execution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks\n    .matching { it.name == \"compileKotlin\" && it is CompileUsingKotlinDaemon }\n    .configureEach {\n        (this as CompileUsingKotlinDaemon).kotlinDaemonJvmArguments.set(listOf(\"-Xmx486m\", \"-Xms256m\", \"-XX:+UseParallelGC\"))\n    }\n```\n\n----------------------------------------\n\nTITLE: Declaring Read-only and Mutable Sets in Kotlin\nDESCRIPTION: Demonstrates creating read-only sets with setOf() and mutable sets with mutableSetOf(). Shows how sets automatically eliminate duplicate elements when created.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-collections.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Read-only set\n    val readOnlyFruit = setOf(\"apple\", \"banana\", \"cherry\", \"cherry\")\n    // Mutable set with explicit type declaration\n    val fruit: MutableSet<String> = mutableSetOf(\"apple\", \"banana\", \"cherry\", \"cherry\")\n    \n    println(readOnlyFruit)\n    // [apple, banana, cherry]\n}\n```\n\n----------------------------------------\n\nTITLE: Read CSV File into DataFrame in Kotlin (Saving Example)\nDESCRIPTION: This snippet demonstrates reading a CSV file named `movies.csv` into a DataFrame named `moviesDf`. It sets up the dataframe for filtering and saving later in the example.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval moviesDf = DataFrame.read(\"movies.csv\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Mode for iOS Simulator Tests\nDESCRIPTION: This Kotlin code snippet demonstrates how to disable standalone mode for iOS simulator tests in Kotlin/Native using the `standalone` property within a Gradle task configuration. By setting `standalone.set(false)`, the `--standalone` flag is not used, requiring manual booting of the simulator.  The task type is `org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeSimulatorTest`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ntasks.withType<org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeSimulatorTest>().configureEach {\n    standalone.set(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Repository in Navigation YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable an external repository in the '_nav.yml' file, specifying the path, navigation file, base URL, branch, and repository URL for proper integration with the Kotlin website.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/external/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - title: Native\n    external:\n      path: kotlin-native\n      nav: _nav_reference.yml\n      base: /docs/reference/native\n      branch: master\n      repo: https://github.com/JetBrains/kotlin-native\n```\n\n----------------------------------------\n\nTITLE: Kotlin Variance Example\nDESCRIPTION: This Kotlin code snippet shows a data class `SomeData` inheriting from `BaseData` and a generic class `GenVarOut` with an `out` variance modifier.  The example prepares the ground for a variance example to be used in Swift.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class SomeData(val num: Int = 42) : BaseData()\nclass GenVarOut<out T : Any>(val arg: T)\n```\n\n----------------------------------------\n\nTITLE: Fetch and Create DataFrame from YouTube API\nDESCRIPTION: Calls the `load` function to fetch data from the YouTube API related to Kotlin videos.  It specifies the query parameters, maximum results per page (50), and the number of pages to fetch (5).  The resulting DataFrame is stored in the `df` variable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval df = load(\"search?q=kotlin&maxResults=50&part=snippet\", 5)\ndf\n```\n\n----------------------------------------\n\nTITLE: Resolving KSTypeReference to KSDeclaration in KSP (Kotlin)\nDESCRIPTION: This code demonstrates how to resolve a KSTypeReference to its associated KSType, and then access the KSDeclaration of the type within KSP. Calling resolve() on a KSTypeReference performs explicit, potentially costly type resolution, and accessing .declaration retrieves the original symbol declaration. This pattern is foundational within KSP processors that require deep inspection of type structure. Resolution requires appropriate project and API context, and the output depends on the referenced symbol.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-additional-details.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval ksType: KSType = ksTypeReference.resolve()\nval ksDeclaration: KSDeclaration = ksType.declaration\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Multiplatform Plugin in Groovy DSL\nDESCRIPTION: This snippet demonstrates how to apply the `org.jetbrains.kotlin.multiplatform` Gradle plugin to a project using the Groovy DSL (`build.gradle`). The `%kotlinVersion%` placeholder should be replaced with the desired Kotlin version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Init Blocks in Inline Classes for Validation\nDESCRIPTION: Demonstrates how to use init blocks in inline classes to validate constructor parameters. This example ensures that the value passed to the Negative class is always less than zero.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1430.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmInline\nvalue class Negative(val x: Int) {\n  init {\n      require(x < 0) { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases for Inner and Nested Classes in Kotlin\nDESCRIPTION: Shows how to create type aliases for inner classes to simplify references to them. This example creates aliases for inner classes from two different outer classes, making the code more concise.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-aliases.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass A {\n    inner class Inner\n}\nclass B {\n    inner class Inner\n}\n\ntypealias AInner = A.Inner\ntypealias BInner = B.Inner\n```\n\n----------------------------------------\n\nTITLE: Defining an Operator Function Interface in Kotlin\nDESCRIPTION: Example of defining an interface with an indexed access operator function that is marked with the 'operator' modifier. This allows implementations of the interface to support the square bracket notation for element access.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/operator-overloading.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedContainer {\n    operator fun get(index: Int)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-installed Node.js Usage\nDESCRIPTION: Configuration to use a pre-installed Node.js instance instead of downloading a new one during build.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nproject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin) {\n    // Set to `true` for default behavior\n    project.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec).download = false\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nproject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin> {\n    // Set to `true` for default behavior\n    project.the<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec>().download = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JPA Plugin with Gradle (Groovy DSL)\nDESCRIPTION: Shows how to apply the kotlin-jpa plugin (built on top of no-arg) in a Gradle build script using Groovy DSL. This automatically handles JPA-specific annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/no-arg-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.plugin.jpa\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAM-with-receiver Plugin in Gradle (Groovy DSL)\nDESCRIPTION: Configuration for the SAM-with-receiver plugin using Gradle with Groovy DSL. This adds the plugin to the build script.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.kotlin.plugin.sam.with.receiver\" version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tier 2 Platform Support Table\nDESCRIPTION: Details for Tier 2 supported platforms with regular compile testing but not guaranteed runtime testing. Lists Gradle target names, target triples, test running capability, and descriptions for Linux and Apple platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-target-support.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Gradle target name      | Target triple                     | Running tests | Description                                        |\n|-------------------------|-----------------------------------|---------------|----------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Deintegration Command\nDESCRIPTION: Command to remove CocoaPods integration from the iOS project\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-direct-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npod deintegrate\n```\n\n----------------------------------------\n\nTITLE: Setting Kotlin Compiler Properties in Maven POM XML\nDESCRIPTION: This XML snippet demonstrates how to configure Kotlin compiler options through properties in the Maven POM file. It shows an example of setting the language version.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<project ...>\n    <properties>\n        <kotlin.compiler.languageVersion>%languageVersion%</kotlin.compiler.languageVersion>\n    </properties>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Objective-C Forward Declaration Example (Part 2)\nDESCRIPTION: This Objective-C code provides the actual implementation of the forward-declared protocol `ForwardDeclaredProtocol` with a class `ForwardDeclaredProtocolImpl` conforming to it and a function `produceProtocol` that creates an instance of the class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_25\n\nLANGUAGE: objective-c\nCODE:\n```\n// Second objcinterop library\n// Header:\n#import <Foundation/Foundation.h>\n@protocol ForwardDeclaredProtocol\n@end\n// Implementation:\n@interface ForwardDeclaredProtocolImpl : NSObject <ForwardDeclaredProtocol>\n@end\n\nid<ForwardDeclaredProtocol> produceProtocol() {\n    return [ForwardDeclaredProtocolImpl new];\n}\n```\n\n----------------------------------------\n\nTITLE: Set Ruby version with rbenv\nDESCRIPTION: This code snippet demonstrates how to set a specific Ruby version as the global default using rbenv, ensuring that CocoaPods uses the correct Ruby environment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrbenv global 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Disabling Incremental Compilation (None)\nDESCRIPTION: This line disables incremental compilation for development binaries in Kotlin/JS IR compiler. Add it to the project's `gradle.properties` or `local.properties`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nkotlin.incremental.js.ir=false // true by default\n```\n\n----------------------------------------\n\nTITLE: Using Dependencies with New Configuration Names in Kotlin Multiplatform\nDESCRIPTION: Example showing the transition from old dependency configuration names to new names with 'Compilation' postfix for the jvmImplementation scope.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    add(\"jvmImplementation\",\n        \"foo.bar.baz:1.2.3\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    add(\"jvmCompilationImplementation\",\n        \"foo.bar.baz:1.2.3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying LaTeX Formula in Kotlin\nDESCRIPTION: Demonstrates how to display LaTeX formatted mathematical formulas and equations in a Kotlin Notebook using the DISPLAY() function and the LATEX() helper function. This requires the `lib-ext` library to be loaded.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nDISPLAY(LATEX(\"f(x) = \\\\frac{1}{\\\\sigma \\\\sqrt{2\\\\pi}} \\\\cdot e^{-\\\\frac{(x - \\\\mu)^2}{2\\\\sigma^2}}\"))\n```\n\n----------------------------------------\n\nTITLE: Generate TypeScript Definitions (Kotlin)\nDESCRIPTION: Configures the Kotlin/Wasm build to generate TypeScript definitions for `@JsExport` declarations.  This configuration is added to the `build.gradle.kts` file within the `wasmJs{}` block.  `generateTypeScriptDefinitions()` function enables the generation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    wasmJs {\n        binaries.executable()\n        browser {\n        }\n        generateTypeScriptDefinitions()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Name Validation without provideDelegate in Kotlin\nDESCRIPTION: This snippet illustrates explicit property name validation during delegate binding without using provideDelegate. The bindResource function is enhanced with an extra parameter for the property name, which is manually passed from the property declaration. While this provides similar validation capabilities, it is less elegant than using provideDelegate and introduces the risk of mismatches between property and string names.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegated-properties.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n// Checking the property name without \"provideDelegate\" functionality\nclass MyUI {\n    val image by bindResource(ResourceID.image_id, \"image\")\n    val text by bindResource(ResourceID.text_id, \"text\")\n}\n\nfun <T> MyUI.bindResource(\n        id: ResourceID<T>,\n        propertyName: String\n): ReadOnlyProperty<MyUI, T> {\n    checkProperty(this, propertyName)\n    // create delegate\n}\n```\n\n----------------------------------------\n\nTITLE: Single-line Documentation Comment in Kotlin\nDESCRIPTION: This example shows how to write a single-line documentation comment in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_51\n\nLANGUAGE: kotlin\nCODE:\n```\n/** This is a short documentation comment. */\n```\n\n----------------------------------------\n\nTITLE: Inheritance with Sealed Classes and Interfaces\nDESCRIPTION: Shows inheritance rules for sealed classes and interfaces. Demonstrates how direct subclasses must be in the same package, while indirect subclasses have fewer restrictions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sealed-classes.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Sealed interface 'Error' has implementations only in the same package and module\nsealed interface Error\n\n// Sealed class 'IOError' extends 'Error' and is extendable only within the same package\nsealed class IOError(): Error\n\n// Open class 'CustomError' extends 'Error' and can be extended anywhere it's visible\nopen class CustomError(): Error\n```\n\n----------------------------------------\n\nTITLE: Adding Project Dependency in Groovy Gradle Build Script\nDESCRIPTION: Example showing how to add a dependency on the parent multiplatform project in a subproject using Groovy DSL syntax in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_22\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation project(':my-main-project') // The name of your parent multiplatform project\n}\n```\n\n----------------------------------------\n\nTITLE: Array Content Assertion Example\nDESCRIPTION: Shows how to use assertContentEquals() to compare array contents in Kotlin tests.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun test() {\n    val expectedArray = arrayOf(1, 2, 3)\n    val actualArray = Array(3) { it + 1 }\n    assertContentEquals(expectedArray, actualArray)\n}\n```\n\n----------------------------------------\n\nTITLE: When Statement Incomplete Coverage Kotlin\nDESCRIPTION: Illustrates that when using 'when' as a statement, it's not mandatory to cover all possible cases. Shows an example where some cases are not handled, resulting in no action being performed for those values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    //sampleStart\n    val x = 3\n    when (x) {\n        // Not all cases are covered\n        1 -> print(\"x == 1\")\n        2 -> print(\"x == 2\")\n    }\n    //sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using Target Presets API (Deprecated)\nDESCRIPTION: Example of the deprecated target presets API which used the 'fromPreset' syntax to create targets from presets. This approach is now deprecated in favor of using direct target creation functions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets {\n        fromPreset(presets.iosArm64, 'ios')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java method accepting varargs\nDESCRIPTION: This Java code shows a method declaration that accepts a variable number of integer arguments (varargs). It's used to illustrate how to call this method from Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\npublic class JavaArrayExample {\n\n    public void removeIndicesVarArg(int... indices) {\n        // code here...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Translation with Missing NotNull\nDESCRIPTION: This Kotlin code shows the signature when the `@NotNull` annotation is missing from the type argument in Java. The resulting type in Kotlin is a platform type (`String!`) which indicates that nullability is unknown.  The return type and parameter are both collections of platform type strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfun toSet(elements: (Mutable)Collection<String!>) : (Mutable)Set<String!> { ... }\n```\n\n----------------------------------------\n\nTITLE: Using Regex.splitToSequence() in Kotlin\nDESCRIPTION: Demonstrates the experimental Regex.splitToSequence() function which lazily splits a string around regex matches, allowing for efficient processing of large strings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(){\n//sampleStart\n    val colorsText = \"green, red , brown&blue, orange, pink&green\"\n    val regex = \"[,\\\\s]+\".toRegex()\n    val mixedColor = regex.splitToSequence(colorsText)\n        .onEach { println(it) }\n        .firstOrNull { it.contains('&') }\n    println(mixedColor) // \"brown&blue\"\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple JVM Targets in Kotlin Multiplatform (Deprecated)\nDESCRIPTION: This snippet shows the deprecated practice of declaring multiple similar JVM targets in a single Gradle project for Kotlin Multiplatform. This approach is no longer recommended due to configuration complexity.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm(\"jvmKtor\")\n    jvm(\"jvmOkHttp\") // Not recommended and produces a deprecation warning\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Division in Kotlin\nDESCRIPTION: This snippet demonstrates how division between integers in Kotlin always returns an integer result with the fractional part discarded. It shows type comparison between the result and different numeric types.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val x = 5 / 2\n    println(x == 2.5) \n    // Operator '==' cannot be applied to 'Int' and 'Double'\n    \n    println(x == 2)   \n    // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Digit Conversion Example in Kotlin\nDESCRIPTION: Demonstrates the enhanced Unicode digit support in Char.digitToInt() for Kotlin/Native and Kotlin/JS platforms, showing conversion of Arabic-Indic and standard digits.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1520.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val ten = '\\u0661'.digitToInt() + '\\u0039'.digitToInt() // ARABIC-INDIC DIGIT ONE + DIGIT NINE\n    println(ten)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Yarn Lock Directory with Groovy DSL\nDESCRIPTION: Groovy DSL configuration for changing the directory and filename for yarn.lock in Kotlin/JS projects to customize the lockfile management.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_20\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).lockFileDirectory =\n        file(\"my-kotlin-js-store\")\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).lockFileName = 'my-yarn.lock'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Blank Strings using Ternary Operator in Java\nDESCRIPTION: Demonstrates checking if a string obtained from `getName()` is blank using `isBlank()` and assigning a default value ('John Doe') using the ternary operator if it is. Requires `java.util.Random` for the helper method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-idioms-strings.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic void defaultValueIfStringIsBlank() {\n    String nameValue = getName();\n    String name = nameValue.isBlank() ? \"John Doe\" : nameValue;\n    System.out.println(name);\n}\n\npublic String getName() {\n    Random rand = new Random();\n    return rand.nextBoolean() ? \"\" : \"David\";\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating KotlinGradleSubplugin Class in Kotlin Gradle Plugin\nDESCRIPTION: Documents the deprecation of the `KotlinGradleSubplugin` class within the Kotlin Gradle plugin tooling, representing a source incompatible change. This class is being replaced by the `KotlinCompilerPluginSupportPlugin`. The deprecation level was raised to an error in version 1.6.0, with removal planned for 1.7.0 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating Type Alias Interchangeability in Kotlin\nDESCRIPTION: Illustrates how type aliases are interchangeable with their underlying types. The example shows that a Predicate<Int> type alias is equivalent to (Int) -> Boolean, allowing them to be used interchangeably in function parameters and variable assignments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-aliases.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntypealias Predicate<T> = (T) -> Boolean\n\nfun foo(p: Predicate<Int>) = p(42)\n\nfun main() {\n    val f: (Int) -> Boolean = { it > 0 }\n    println(foo(f)) // prints \"true\"\n\n    val p: Predicate<Int> = { it > 0 }\n    println(listOf(1, -2).filter(p)) // prints \"[1]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle task with K2 compiler enabled\nDESCRIPTION: This command shows how to enable the K2 compiler for a Gradle project by setting the `kotlin.experimental.tryK2` property to `true` when running the `assemble` task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew assemble -Pkotlin.experimental.tryK2=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Annotation Processors in Gradle\nDESCRIPTION: Setup to define and inherit annotation processors from a common Gradle configuration across subprojects using Dagger as an example.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval commonAnnotationProcessors by configurations.creating\nconfigurations.named(\"kapt\") { extendsFrom(commonAnnotationProcessors) }\n\ndependencies {\n    implementation(\"com.google.dagger:dagger:2.48.1\")\n    commonAnnotationProcessors(\"com.google.dagger:dagger-compiler:2.48.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: When Expression with Else If and Guard Condition Kotlin\nDESCRIPTION: Illustrates using `else if` with a guard condition inside a `when` expression. This example combines type checking with boolean conditions, providing more flexible control flow. It uses `animal.eatsPlants` as a condition in the `else if` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (animal) {\n    // Checks if `animal` is `Dog`\n    is Animal.Dog -> feedDog()\n    // Guard condition that checks if `animal` is `Cat` and not `mouseHunter`\n    is Animal.Cat if !animal.mouseHunter -> feedCat()\n    // Calls giveLettuce() if none of the above conditions match and animal.eatsPlants is true\n    else if animal.eatsPlants -> giveLettuce()\n    // Prints \"Unknown animal\" if none of the above conditions match\n    else -> println(\"Unknown animal\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve SQL Table Schemas in Kotlin\nDESCRIPTION: This snippet retrieves the schema information for all tables in the database using the `getSchemaForAllSqlTables()` function from the Kotlin DataFrame library.  It iterates through the schemas and prints them to the console. Requires a valid `dbConfig` object created using `DatabaseConfiguration`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-connect-to-db.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval dataschemas = DataFrame.getSchemaForAllSqlTables(dbConfig)\n\ndataschemas.forEach { \n    println(\"---Yet another table schema---\")\n    println(it)\n    println()\n}\n```\n\n----------------------------------------\n\nTITLE: Translation of Nothing Type to Java\nDESCRIPTION: Demonstrates how Kotlin's Nothing type is translated to a raw type in Java due to lack of direct equivalent.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-interop.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nfun emptyList(): List<Nothing> = listOf()\n```\n\n----------------------------------------\n\nTITLE: Previous Target Configuration Approach in Kotlin Multiplatform\nDESCRIPTION: The old approach to configuring multiple targets in Kotlin Multiplatform, which is no longer supported as of Kotlin 1.7.20.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets {\n        configure(['windows',\n            'linux']) {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Classes (Solution)\nDESCRIPTION: This code snippet provides a complete solution to the previous exercise by declaring the required data classes `Name`, `Address`, and `City`, in addition to `Person`. It demonstrates how to define data classes with constructor parameters. The `main` function creates an instance of `Person`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: Name, val address: Address, val ownsAPet: Boolean = true)\ndata class Name(val first: String, val last: String)\ndata class Address(val street: String, val city: City)\ndata class City(val name: String, val countryCode: String)\n\nfun main() {\n    val person = Person(\n        Name(\"John\", \"Smith\"),\n        Address(\"123 Fake Street\", City(\"Springfield\", \"US\")),\n        ownsAPet = false\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Names for Test Compilation Dependencies in Kotlin Multiplatform (Before)\nDESCRIPTION: The old naming pattern for dependencies on the jvmTest compilation before the breaking change.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-compatibility-guide.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\njvmTest<Scope>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for JS Test Runners\nDESCRIPTION: Shows how to specify environment variables for Node.js test runners in Kotlin/JS build configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js {\n        nodejs {\n            testTask {\n                environment(\"key\", \"value\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameters in Lambdas with Trailing Comma in Kotlin\nDESCRIPTION: This example illustrates parameters in lambdas using trailing commas.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val x = {\n            x: Comparable<Number>,\n            y: Iterable<Number>, // trailing comma\n        ->\n        println(\"1\")\n    }\n    println(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Java Package-Level Default Nullability\nDESCRIPTION: This Java code snippet shows how to declare package-level default nullability using the `@NonNullApi` annotation in the `package-info.java` file. This annotation marks all types within the `test` package as non-nullable by default.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n// FILE: test/package-info.java\n@NonNullApi // declaring all types in package 'test' as non-nullable by default\npackage test;\n```\n\n----------------------------------------\n\nTITLE: Enable Kotlin Build Reports - Gradle\nDESCRIPTION: This code snippet shows how to enable Kotlin build reports in a Gradle project by specifying the output location in the `gradle.properties` file. It enables saving build reports to a local file in human-readable format.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\nkotlin.build.report.output=file\n```\n\n----------------------------------------\n\nTITLE: Copying Array Elements in Kotlin\nDESCRIPTION: Shows how to use the new copyInto() function to copy elements between existing arrays, which is useful for implementing array-based containers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val sourceArr = arrayOf(\"k\", \"o\", \"t\", \"l\", \"i\", \"n\")\n    val targetArr = sourceArr.copyInto(arrayOfNulls<String>(6), 3, startIndex = 3, endIndex = 6)\n    println(targetArr.contentToString())\n    \n    sourceArr.copyInto(targetArr, startIndex = 0, endIndex = 3)\n    println(targetArr.contentToString())\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-dollar String Interpolation Kotlin\nDESCRIPTION: This snippet illustrates multi-dollar string interpolation in Kotlin, using `$$` to specify that two consecutive dollar signs are required to trigger interpolation. Single dollar signs are treated as literal characters.  This is an experimental feature that requires opting in.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval KClass<*>.jsonSchema : String\n    get() = $$\"\"\"\n    {\n      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n      \"$id\": \"https://example.com/product.schema.json\",\n      \"$dynamicAnchor\": \"meta\"\n      \"title\": \"$${simpleName ?: qualifiedName ?: \\\"unknown\\\"}\",\n      \"type\": \"object\"\n    }\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic JVM Variant Resolution\nDESCRIPTION: This configuration option disables the automatic resolution of kotlin-test variants for JVM projects. Add this to the gradle.properties file when you want to specify test framework dependencies explicitly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_45\n\nLANGUAGE: text\nCODE:\n```\nkotlin.test.infer.jvm.variant=false\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods with Definitely Non-Nullable Generics - Java\nDESCRIPTION: Shows a Java interface with methods demonstrating use of JetBrains @NotNull annotation to indicate that parameter and return types must never be null. This is pertinent for interoperability with languages like Kotlin, which can recognize these annotations for safe type mapping.\nDependencies: org.jetbrains.annotations.*; Required: proper annotation dependency included in project. Input/Output: Generic type T. Limitations: Does not prevent null at runtime, only for consumers recognizing annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.jetbrains.annotations.*;\\n\\npublic interface Game<T> {\\n  public T save(T x) {}\\n  @NotNull\\n  public T load(@NotNull T x) {}\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying KSP API JAR for kotlinc\nDESCRIPTION: This snippet illustrates the `-Xplugin` command-line argument required to provide the path to the KSP API JAR (`symbol-processing-api-*.jar`) to the `kotlinc` compiler. This JAR is necessary alongside the command-line plugin JAR.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-command-line.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=/path/to/symbol-processing-api-%kspSupportedKotlinVersion%-%kspVersion%.jar\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Stack Trace Example in Kotlin\nDESCRIPTION: Simple code example demonstrating stack trace generation in Kotlin Native\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = bar()\nfun bar() = baz()\ninline fun baz() {\n    error(\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KSP Type Reference Interfaces in Kotlin\nDESCRIPTION: These interfaces define core abstractions in the KSP API for representing function declarations and type references. The KSFunctionDeclaration interface includes a possible returnType of KSTypeReference, while KSTypeReference combines annotation and modifier ownership and encapsulates a KSReferenceElement. These interfaces provide the foundation for modeling Kotlin program structure within a processor, and are integral dependencies for creating custom KSP analysis tools. Inputs and outputs depend on concrete implementations, while all type references provide access to structural and annotation information.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-additional-details.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface KSFunctionDeclaration : ... {\n  val returnType: KSTypeReference?\n  // ...\n}\n\ninterface KSTypeReference : KSAnnotated, KSModifierListOwner {\n  val type: KSReferenceElement\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Message by Specific ID\nDESCRIPTION: This HTTP request retrieves a specific message by its unique ID from the Spring Boot application. It sends a GET request to a URL constructed with a particular message ID. Ensure to replace the placeholder ID (f16c1d2e-08dc-455c-abfe-68440229b84f) with the actual ID of the message you intend to retrieve.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-add-db-support.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\n### Get the message by its id\nGET http://localhost:8080/f16c1d2e-08dc-455c-abfe-68440229b84f\n```\n\n----------------------------------------\n\nTITLE: Measure Time with Custom Source Kotlin\nDESCRIPTION: This code snippet uses the previously defined custom time source, `RealtimeMonotonicTimeSource` to measure the execution time of sleeping thread. The measured time is then printed to console. Requires the custom time source to be defined.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/time-measurement.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val elapsed: Duration = RealtimeMonotonicTimeSource.measureTime {\n        Thread.sleep(100)\n    }\n    println(elapsed) // e.g. 103 ms\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BufferedImage in Kotlin\nDESCRIPTION: Generates a BufferedImage in Kotlin and renders it within a Kotlin Notebook. The code creates a simple image with a black background and a white rectangle. This utilizes the AWT library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.awt.Color\nimport java.awt.image.BufferedImage\n\nval width = 300\nval height = width\n\nval image = BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)\n\nval graphics = image.createGraphics()\ngraphics.background = Color.BLACK\ngraphics.clearRect(0, 0, width, height)\ngraphics.setRenderingHint(\n    java.awt.RenderingHints.KEY_ANTIALIASING,\n    java.awt.RenderingHints.VALUE_ANTIALIAS_ON\n)\ngraphics.color = Color.WHITE\ngraphics.fillRect(width / 10, height * 8 / 10, width * 10 / 20, height / 10)\ngraphics.dispose()\n```\n\n----------------------------------------\n\nTITLE: Configuring JAR Tasks for Non-default Compilation Destination Directory\nDESCRIPTION: Groovy code for explicitly adding Kotlin class directories to JAR output when overriding the default destination directory. Required when using a non-default location for compile tasks' destinationDirectory.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_27\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.jar(type: Jar) {\n    from sourceSets.main.outputs\n    from sourceSets.main.kotlin.classesDirectories\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Kotlin Native Program\nDESCRIPTION: A basic Kotlin/Native program that prints a greeting message. This is the entry point for the application with a main function that will be compiled to a native executable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"Hello, Kotlin/Native!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JsException details\nDESCRIPTION: This Kotlin code snippet demonstrates how to configure the Kotlin/Wasm compiler to include the original error message and stack trace from JavaScript exceptions in the `JsException` type. It involves adding a compiler option to the `build.gradle.kts` file within the `wasmJs` block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    wasmJs {\n        compilerOptions {\n            freeCompilerArgs.add(\"-Xwasm-attach-js-exception\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration of Hierarchical Structure in Kotlin DSL\nDESCRIPTION: Demonstrates how to manually create a hierarchical source set structure using the dependsOn relation. This example sets up a desktop platform source set that's shared across Linux, Windows, and macOS targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin{\n    sourceSets {\n        val desktopMain by creating {\n            dependsOn(commonMain)\n        }\n        val linuxX64Main by getting {\n            dependsOn(desktopMain)\n        }\n        val mingwX64Main by getting {\n            dependsOn(desktopMain)\n        }\n        val macosX64Main by getting {\n            dependsOn(desktopMain)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterless Main Function\nDESCRIPTION: This runnable example shows the new parameterless main function introduced in Kotlin 1.3, which simplifies the entry point for applications that don't need command-line arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Inner Classes Accessing Outer Class Members in Kotlin\nDESCRIPTION: This example shows how inner classes in Kotlin can access members of their outer class. Inner classes carry a reference to an object of the outer class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/nested-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n\n----------------------------------------\n\nTITLE: Reverting Kotlin 1.4 ConstantValue Attribute Generation\nDESCRIPTION: Kotlin compiler flag to temporarily revert the Kotlin 1.4 change that stopped generating the `ConstantValue` JVM attribute for non-`const` `val` properties (KT-16615), restoring the pre-1.4 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-14.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n-XXLanguage:-NoConstantValueAttributeForNonConstVals\n```\n\n----------------------------------------\n\nTITLE: Named Backreferencing in Kotlin Regex\nDESCRIPTION: Demonstrates how to use named backreferences in regular expressions in Kotlin 1.7.0.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun backRef() {\n    val regex = \"(?<title>\\\\w+), yes \\\\k<title>\".toRegex()\n    val match = regex.find(\"Do you copy? Sir, yes Sir!\")!!\n    println(match.value) // \"Sir, yes Sir\"\n    println(match.groups[\"title\"]?.value) // \"Sir\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample kapt Annotation Processor Performance Report - Text\nDESCRIPTION: An example output listing timing statistics for each annotation processor, including initialization and round times. Useful for identifying build performance hotspots. No code, informational only.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/kapt.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nKapt Annotation Processing performance report:\ncom.example.processor.TestingProcessor: total: 133 ms, init: 36 ms, 2 round(s): 97 ms, 0 ms\ncom.example.processor.AnotherProcessor: total: 100 ms, init: 6 ms, 1 round(s): 93 ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for kotlinx.html in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to configure a project's build.gradle.kts to include the kotlinx.html library for JavaScript targets. It shows the addition of Maven Central as a repository source and specifies both the Kotlin Standard Library for JS and kotlinx.html-js as dependencies. Required for enabling statically typed HTML building in Kotlin/JS projects. The key parameters involve the repository URLs and dependency coordinates. This code should be placed in the build.gradle.kts file and does not directly produce runtime behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/typesafe-html-dsl.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    // ...\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib-js\"))\n    implementation(\"org.jetbrains.kotlinx:kotlinx-html-js:0.8.0\")\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Random.nextLong Value Generation Algorithm in Kotlin Stdlib\nDESCRIPTION: Documents a behavioral incompatible change in the `Random.nextLong` function within the Kotlin standard library, effective from version 1.6.0. The algorithm for generating `Long` values has been modified to prevent producing values outside the specified range, fixing a previous potential issue.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Creating Kotlin/Native Project Configuration\nDESCRIPTION: Gradle build file for setting up a Kotlin/Native project with C interop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-primitive-data-types-from-c.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    macosArm64(\"native\") {\n        val main by compilations.getting\n        val interop by main.cinterops.creating\n    \n        binaries {\n            executable()\n        }\n    }\n}\n\ntasks.wrapper {\n    gradleVersion = \"%gradleVersion%\"\n    distributionType = Wrapper.DistributionType.BIN\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Supported Browsers - Bash\nDESCRIPTION: This Bash command uses NPX to download and install supported browsers (Chromium, Firefox, WebKit) required for running Playwright end-to-end and screenshot tests locally. Playwright automates browser actions for testing web applications. Prerequisites include having Node.js installed and Playwright present in the project's dependencies. The command should be run from the root folder of the repository prior to executing any Playwright-based tests.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright install\\n\n```\n\n----------------------------------------\n\nTITLE: Reading Input from Standard Input in Kotlin\nDESCRIPTION: Demonstrates reading user input from the standard input using the readln function in Kotlin. The code snippet shows how to prompt for input, read a line entered by the user, and then display it back.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/basic-syntax.md#2025-04-22_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Prints a message to request input\nprintln(\"Enter any word: \")\n\n// Reads and stores the user input. For example: Happiness\nval yourWord = readln()\n\n// Prints a message with the input\nprint(\"You entered the word: \")\nprint(yourWord)\n```\n\n----------------------------------------\n\nTITLE: Associating Elements in Java\nDESCRIPTION: Shows how to associate elements with their characteristics in Java using the Stream API and Collectors.toMap(). It creates a map of words and their lengths.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\npublic void associate() {\n    var numbers = List.of(\"one\", \"two\", \"three\", \"four\");\n    var wordAndLength = numbers.stream()\n        .collect(toMap(number -> number, String::length));\n    System.out.println(wordAndLength);\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Groovy dependency for kotlin-reflect\nDESCRIPTION: Adds the `kotlin-reflect` dependency to a Gradle project using Groovy DSL.  This is required to use Kotlin reflection features on the JVM. The `implementation` configuration is used to include the library in the project's runtime classpath.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-reflect:%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing CocoaPods Deintegration Command\nDESCRIPTION: Command to remove CocoaPods integration from the project during migration\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-spm-local-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npod deintegrate\n```\n\n----------------------------------------\n\nTITLE: Creating JsReference from Kotlin class\nDESCRIPTION: This Kotlin function `createUser` takes a `name` as input, creates a `User` object, converts it to a `JsReference<User>`, and returns it. The `@JsExport` annotation makes this function accessible from JavaScript. It relies on the `toJsReference()` extension function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-js-interop.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsExport\nfun createUser(name: String): JsReference<User> {\n    return User(name).toJsReference()\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting an Object with Members in a JS Module\nDESCRIPTION: A JavaScript code example where a module exports a single object via `module.exports`. This object contains members (`foo` and `C`), effectively creating a namespace or package-like structure within the JavaScript module.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-modules.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  foo: { /* some code here */ },\n  C: { /* some code here */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Kotlin 1.4 New Type Inference Behavior\nDESCRIPTION: Kotlin compiler flag to temporarily revert multiple type inference changes introduced in Kotlin 1.4 back to the pre-1.4 behavior. This flag disables several new language features associated with the new inference system, including fixes for subtyping (KT-35487), unchecked casts (KT-37280), builder inference (KT-32126, KT-34975), overload resolution (KT-31670), and eager type variable fixation (KT-25175).\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-14.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-XXLanguage:-NewInference\n```\n\n----------------------------------------\n\nTITLE: Run a compiled Kotlin application\nDESCRIPTION: This command executes the compiled `hello.jar` file using the Java runtime environment. It requires that Java is installed and configured correctly.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njava -jar hello.jar\n```\n\n----------------------------------------\n\nTITLE: String Templates in Kotlin\nDESCRIPTION: This example demonstrates string templates in Kotlin. Curly braces are only required for longer expressions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_52\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(\"$name has ${children.size} children\")\n```\n\n----------------------------------------\n\nTITLE: Using androidTarget Block for Dependencies - Groovy\nDESCRIPTION: Alternative approach to add Android dependencies inside the androidTarget block using Groovy DSL. This method is useful for migrating from traditional Android projects, as it handles non-trivial configuration names.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-android-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nandroidTarget {\n    //...\n    dependencies {\n        implementation 'com.example.android:app-magic:12.3'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Daemon JVM Arguments in Groovy DSL\nDESCRIPTION: Specifies JVM arguments for the Kotlin daemon using the kotlin extension block in Groovy DSL. These settings override default arguments inherited from the Gradle daemon.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    kotlinDaemonJvmArgs = [\"-Xmx486m\", \"-Xms256m\", \"-XX:+UseParallelGC\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pod Dependency with Custom Cinterop Options\nDESCRIPTION: Configures a Kotlin project with a Pod dependency that uses custom cinterop options through extraOpts and packageName parameters. This example sets up FirebaseAuth with compiler options for fmodules support.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-libraries.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    iosArm64()\n\n    cocoapods {\n        version = \"2.0\"\n        summary = \"CocoaPods test library\"\n        homepage = \"https://github.com/JetBrains/kotlin\"\n        ios.deploymentTarget = \"16.0\"\n\n        pod(\"FirebaseAuth\") {\n            packageName = \"FirebaseAuthWrapper\"\n            version = \"11.7.0\"\n            extraOpts += listOf(\"-compiler-option\", \"-fmodules\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kotlin-metadata-jvm Dependency in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to add the kotlin-metadata-jvm library as a dependency in a Gradle project using the Kotlin DSL. It includes the necessary repository and dependency configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"org.jetbrains.kotlin:kotlin-metadata-jvm:%kotlinVersion%\")\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Java Toolchain Configuration with Type Cast\nDESCRIPTION: Deprecated way of configuring Java toolchain in Kotlin DSL requiring explicit type cast\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        (this as JavaToolchainSpec).languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Compiler Execution Strategy in Kotlin Gradle Build Script\nDESCRIPTION: Example demonstrating how to configure the compilerExecutionStrategy task property to use in-process execution strategy in a Kotlin Gradle build script. This requires importing the necessary classes and setting the property for all Kotlin compile tasks.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.dsl.KotlinCompile\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy\n\n// ...\n\ntasks.withType<KotlinCompile>().configureEach {\n    compilerExecutionStrategy.set(KotlinCompilerExecutionStrategy.IN_PROCESS)\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing to Inference via Expected Type Specification\nDESCRIPTION: Demonstrates how specifying the expected type for expressions can contribute to builder inference analysis.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = buildList {\n    // Type argument is inferred into Float based on the expected type\n    val x: Float = get(0)\n} // result has the List<Float> type\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Report Output Location\nDESCRIPTION: Configuration property to specify where Kotlin build reports should be saved. Can be set to 'file', 'build_scan', or 'http'.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_19\n\nLANGUAGE: properties\nCODE:\n```\nkotlin.build.report.output=file\n```\n\n----------------------------------------\n\nTITLE: Run a Kotlin script\nDESCRIPTION: This command compiles and executes a Kotlin script file (`list_folders.kts`) using the `-script` option. It passes the `-d` argument and the path to the script as parameters to the compiler and script respectively.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/command-line.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkotlinc -script list_folders.kts -- -d <path_to_folder_to_inspect>\n```\n\n----------------------------------------\n\nTITLE: Tier 3 Platform Support Table\nDESCRIPTION: Details for Tier 3 supported platforms with minimal testing guarantees. Lists Gradle target names, target triples, test running capability, and descriptions for Android NDK, Windows MinGW, and Apple platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-target-support.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Gradle target name      | Target triple                   | Running tests | Description                                                                             |\n|-------------------------|---------------------------------|---------------|-----------------------------------------------------------------------------------------|\n| `androidNativeArm32`    | `arm-unknown-linux-androideabi` |               | [Android NDK](https://developer.android.com/ndk) on ARM32 platforms                     |\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies the exact versions of Python packages required for the project. Includes web framework Flask, static site generators, content processors, and various utility libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflask==2.3.3\nflask-flatpages==0.7.3\nfrozen-flask==0.18\nPygments==2.12.0\npython-frontmatter==1.0.0\nbeautifulsoup4==4.11.1\nxmltodict==0.13.0\ngeocoder==1.38\nruamel.yaml==0.17.21\nalgoliasearch==1.20.0\nWerkzeug==2.3.8\n```\n\n----------------------------------------\n\nTITLE: Declare API Key in Kotlin Notebook\nDESCRIPTION: Declares and initializes a variable `apiKey` with your actual API key.  This key is necessary to authenticate and authorize requests to the YouTube Data API. Store the API key securely and avoid exposing it in public repositories.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-api.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval apiKey = \"YOUR-API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Generated Kotlin API for C Functions\nDESCRIPTION: The Kotlin API signatures generated by cinterop tool for the C functions. Shows how C function pointers are represented as CPointer<CFunction<...>> in Kotlin.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-function-pointers-from-c.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun myFun(i: kotlin.Int): kotlin.Int\nfun accept_fun(f: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Int) -> kotlin.Int>>? /* from: interop.MyFun? */)\nfun supply_fun(): kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Int) -> kotlin.Int>>? /* from: interop.MyFun? */\n```\n\n----------------------------------------\n\nTITLE: Checking Local Declarations in Kotlin\nDESCRIPTION: Determines if a given class or function declaration is local by checking its parent declaration. The function returns true if the parent declaration is not null and is not a KSClassDeclaration, indicating it is local. No additional dependencies are required.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/ksp/ksp-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun KSDeclaration.isLocal(): Boolean =\n    parentDeclaration != null && parentDeclaration !is KSClassDeclaration\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Properties in CocoaPods\nDESCRIPTION: Shows how to configure framework settings inside the cocoapods block, including setting the base name, linking type, and enabling transitive export of dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-dsl-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    cocoapods {\n        version = \"2.0\"\n        framework {\n            baseName = \"MyFramework\"\n            isStatic = false\n            export(project(\":anotherKMMModule\"))\n            transitiveExport = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Do-While Loop Kotlin\nDESCRIPTION: Demonstrates a `do-while` loop in Kotlin, which executes the code block at least once before checking the condition. Retrieves data until the value is null. Demonstrates variable visibility after the loop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ndo {\n    val y = retrieveData()\n} while (y != null) // y is visible here!\n```\n\n----------------------------------------\n\nTITLE: Adding kotlin-metadata-jvm Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the kotlin-metadata-jvm library as a dependency in a Maven project. It includes the necessary dependency configuration in the pom.xml file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/metadata-jvm.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-metadata-jvm</artifactId>\n            <version>%kotlinVersion%</version>\n        </dependency>\n    </dependencies>\n    ...\n</project>\n```\n\n----------------------------------------\n\nTITLE: Using Local Delegated Properties with Lazy Evaluation in Kotlin\nDESCRIPTION: Shows how to use property delegation for local variables with lazy initialization. The example demonstrates lazy evaluation of a variable that is only computed when needed.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval answer by lazy {\n    println(\"Calculating the answer...\")\n    42\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Kotlin 1.4 Initialization Order for Tail-Recursive Functions\nDESCRIPTION: Kotlin compiler flag to temporarily revert the Kotlin 1.4 change that adjusted the initialization order of default parameters in tail-recursive functions to match regular functions (KT-31540), restoring the pre-1.4 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-14.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n-XXLanguage:-ProperComputationOrderOfTailrecDefaultParameters\n```\n\n----------------------------------------\n\nTITLE: Temporarily Allowing Protected Constructor Calls from Public Inline Functions (Kotlin)\nDESCRIPTION: This Kotlin compiler flag disables the error introduced in Kotlin 1.6 that prohibits calling protected constructors from within public or protected inline functions or property accessors. It allows temporarily reverting to the pre-1.6 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-ProhibitProtectedConstructorCallFromPublicInline\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Target in Android Kotlin Options\nDESCRIPTION: Shows how to set the JVM target in Android Kotlin options using the existing KotlinJvmOptions DSL, which is still supported but may change in future versions.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid { \n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class with Properties in Body\nDESCRIPTION: This snippet demonstrates how to define properties within the class body using curly braces. It shows how to initialize properties with default values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Contact(val id: Int, var email: String) {\n    val category: String = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Gradle Kotlin Script Extension in Tooling Roadmap\nDESCRIPTION: Code snippet showing the file extension for Gradle Kotlin Script files, mentioned in the context of improving Kotlin scripting and developer experience with Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/roadmap.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n.gradle.kts\n```\n\n----------------------------------------\n\nTITLE: Reverting Kotlin 1.4 Proper Finally Behavior\nDESCRIPTION: Kotlin compiler flag to temporarily revert the Kotlin 1.4 fix for computing catch intervals in nested try/catch blocks with finally clauses (KT-31923) back to the pre-1.4 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-14.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-XXLanguage:-ProperFinally\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Target Hierarchy in Kotlin Multiplatform\nDESCRIPTION: Code demonstrates how to set up the new default target hierarchy in a Kotlin Multiplatform project. The example shows declaring Android and iOS targets while enabling the experimental target hierarchy feature.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1820.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalKotlinGradlePluginApi::class)\nkotlin {\n    // Enable the default target hierarchy:\n    targetHierarchy.default()\n\n    android()\n    iosArm64()\n    iosSimulatorArm64()\n}\n```\n\n----------------------------------------\n\nTITLE: Running WebHelp Tests Locally\nDESCRIPTION: This snippet outlines the steps required to run WebHelp regression tests locally, which are crucial for maintaining the documentation components on kotlinlang.org. It involves downloading build artifacts to the `dist` folder and running tests using yarn and docker.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n  1. Create the `dist` folder in the project.\n  2. Open the last successful build of [Reference Docs](https://buildserver.labs.intellij.net/buildConfiguration/Kotlin_KotlinSites_KotlinlangTeamcityDsl_BuildReferenceDocs?branch=&mode=builds#all-projects) on TeamCity.\n  3. Download the artifacts of this build and place them in the `dist` folder.\n  4. Run the tests locally with the following command `yarn run test:e2e`\n  5. Run the tests in docker container with the following command `docker compose -f docker-compose-e2e-statics.yml up --build  --exit-code-from playwright`\n```\n\n----------------------------------------\n\nTITLE: Project-Level Compiler Options Configuration\nDESCRIPTION: This code snippet shows how to configure project-level compiler options for Kotlin/JVM using the new `compilerOptions` block within the `kotlin` configuration in `build.gradle.kts`. It sets the JVM target to version 11.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew19.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    compilerOptions {\n        jvmTarget.set(JVM.Target_11)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Standard Input in Kotlin/Native\nDESCRIPTION: Gradle configuration that sets up standard input for the native application's run task, enabling the application to read user input when executed through Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    //...\n    nativeTarget.apply {\n        binaries {\n            executable {\n                entryPoint = \"main\"\n                runTask?.standardInput = System.`in`\n            }\n        }\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Umbrella Module for XCFramework in Gradle\nDESCRIPTION: This Kotlin Gradle script configures an umbrella module that combines multiple Kotlin Multiplatform modules into a single XCFramework for iOS. It shows how to export dependencies and set up iOS targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-spm.md#2025-04-22_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    val frameworkName = \"together\"\n    val xcf = XCFramework(frameworkName)\n\n    listOf(\n        iosX64(),\n        iosArm64(),\n        iosSimulatorArm64()\n    ).forEach { iosTarget ->\n        // Same as in the example above,\n        // with added export calls for dependencies\n        iosTarget.binaries.framework {\n            export(projects.network)\n            export(projects.database)\n\n            baseName = frameworkName\n            xcf.add(this)\n        }\n    }\n\n    // Dependencies set as \"api\" (as opposed to \"implementation\") to export underlying modules\n    sourceSets {\n        commonMain.dependencies {\n            api(projects.network)\n            api(projects.database)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CValue<T> to Pointer in Kotlin/Native\nDESCRIPTION: This snippet demonstrates how to create a struct as a CValue and convert it to a pointer using memScoped and the ptr extension property. The ptr is only valid within the memScoped block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.cValue\nimport kotlinx.cinterop.memScoped\n\n@OptIn(ExperimentalForeignApi::class)\nfun callMix_ref() {\n    val cStruct = cValue<MyStruct> {\n        a = 42\n        b = 3.14\n    }\n\n    memScoped {\n        struct_by_pointer(cStruct.ptr)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling npm Lifecycle Scripts with Kotlin DSL\nDESCRIPTION: Configuration to enable the execution of lifecycle scripts during npm dependency installation, which is disabled by default for security reasons.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>().ignoreScripts = false\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Complex Generic Class Properties\nDESCRIPTION: Shows how builder inference works with properties of complex generic classes, using expected types to determine type arguments.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/using-builders-with-builder-inference.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Foo<T> {\n    val items = mutableListOf<T>()\n}\n\nfun <K> myBuilder(builder: Foo<K>.() -> Unit): Foo<K> = Foo<K>().apply(builder)\n\nfun main() {\n    val result = myBuilder {\n        val x: List<CharSequence> = items\n        // ...\n    } // result has the Foo<CharSequence> type\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Function References with Variable Arguments\nDESCRIPTION: Example showing how Kotlin 1.4.0 allows adapting callable references to functions with variable arguments (vararg parameters) based on the number of arguments expected.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo(x: Int, vararg y: String) {}\n\nfun use0(f: (Int) -> Unit) {}\nfun use1(f: (Int, String) -> Unit) {}\nfun use2(f: (Int, String, String) -> Unit) {}\n\nfun test() {\n    use0(::foo) \n    use1(::foo) \n    use2(::foo) \n}\n```\n\n----------------------------------------\n\nTITLE: Using Old JVM Backend with Maven\nDESCRIPTION: Code snippet showing how to configure a Kotlin project in Maven to use the old JVM backend instead of the new IR-based backend introduced in Kotlin 1.5.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-15.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <args>\n        <arg>-Xuse-old-backend</arg>\n    </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Embedding Image in Kotlin Notebook\nDESCRIPTION: Embeds an image from a URL directly into a Kotlin Notebook using the `Image` class from the `lib-ext` library. The `embed = true` parameter embeds the image data into the notebook. Requires `%use lib-ext(0.11.0-398)`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval kotlinMascot = Image(\"https://blog.jetbrains.com/wp-content/uploads/2023/04/DSGN-16174-Blog-post-banner-and-promo-materials-for-post-about-Kotlin-mascot_3.png\", embed = true).withWidth(400)\nkotlinMascot\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Sets with Dependencies\nDESCRIPTION: Example of configuring source sets with dependencies and showing warning for undefined targets in Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-hierarchy.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget()\n    iosArm64()\n    iosSimulatorArm64()\n\n    sourceSets {\n        iosMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n        // Warning: accessing source set without declaring the target\n        linuxX64Main { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Declarations in Annotation Classes\nDESCRIPTION: This example demonstrates the new ability to define nested classes, interfaces, objects, and companion objects within annotation classes in Kotlin 1.3.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew13.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class Foo {\n    enum class Direction { UP, DOWN, LEFT, RIGHT }\n    \n    annotation class Bar\n\n    companion object {\n        fun foo(): Int = 42\n        val bar: Int = 42\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration of Hierarchical Structure in Groovy DSL\nDESCRIPTION: Shows how to manually create a hierarchical source set structure using the dependsOn relation in Groovy DSL. This example creates a shared desktop source set used by Linux, Windows, and macOS targets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_26\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets {\n        desktopMain {\n            dependsOn(commonMain)\n        }\n        linuxX64Main {\n            dependsOn(desktopMain)\n        }\n        mingwX64Main {\n            dependsOn(desktopMain)\n        }\n        macosX64Main {\n            dependsOn(desktopMain)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Common Code Example\nDESCRIPTION: Example showing code that won't compile in commonMain due to platform-specific dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-discover-project.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// commonMain/kotlin/common.kt\n// Doesn't compile in common code\nfun greeting() {\n    java.io.File(\"greeting.txt\").writeText(\"Hello, Multiplatform!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using klib to View Library Contents\nDESCRIPTION: Shows how to examine the contents of a Kotlin/Native library using the klib contents command.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ klib contents kotlinizer\n```\n\n----------------------------------------\n\nTITLE: Running API References Tests\nDESCRIPTION: Instructions for running tests that secure the HTML markup of API references against Dokka template extension corruption. Steps include creating a libs folder, downloading relevant build artifacts, and executing docker scripts to run tests.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n  1. Create the `libs` folder in the project.\n  2. Open the last successful build of each API reference on TeamCity.\n  3. Download the artifacts of these builds and place them in the `libs` folder by their name, for example, `kotlinx.coroutines`.\n  4. Up containers `./scripts/dokka/up.sh`.\n  5. Run test inside container `./scripts/dokka/run.sh` or on the host with one of the scripts below.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exhaustive When Statements in Kotlin\nDESCRIPTION: Example showing how non-exhaustive when statements with sealed classes and Boolean subjects will trigger warnings in Kotlin 1.5.30.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed class Mode {\n    object ON : Mode()\n    object OFF : Mode()\n}\n\nfun main() {\n    val x: Mode = Mode.ON\n    when (x) { \n        Mode.ON -> println(\"ON\")\n    }\n// WARNING: Non exhaustive 'when' statements on sealed classes/interfaces \n// will be prohibited in 1.7, add an 'OFF' or 'else' branch instead\n\n    val y: Boolean = true\n    when (y) {  \n        true -> println(\"true\")\n    }\n// WARNING: Non exhaustive 'when' statements on Booleans will be prohibited \n// in 1.7, add a 'false' or 'else' branch instead\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling npm Lifecycle Scripts with Groovy DSL\nDESCRIPTION: Groovy DSL configuration to enable the execution of lifecycle scripts during npm dependency installation, which is disabled by default for security reasons.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_22\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension).ignoreScripts = false\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend and Backend Local Development Setup Commands - Bash\nDESCRIPTION: This set of Bash commands outlines the step-by-step procedures for setting up the local development environment for the Kotlin Website project. Includes installing frontend dependencies (Yarn), building static assets for Next.js (next-build-static), running the Next.js development server (next-dev), starting the generic webpack dev server, installing Python server dependencies via pip, and launching the Python backend server. Requires Node.js, Yarn, Python 3, and all specified Python dependencies. Each command must be run in sequence in a terminal from the repository root. The expected outcome is a locally running version of the website available at http://localhost:9000.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# install frontend dependencies\\nyarn install\\n\\n# at first start you need to build the static\\nyarn run next-build-static\\n\\n# run NextJS server\\nyarn run next-dev\\n\\n# run webpack dev server for everything else\\nyarn start\\n\\n# install dependencies for the python server\\npip  install --no-build-isolation -r requirements.txt\\n\\n# run python server\\npython3 kotlin-website.py\\n\n```\n\n----------------------------------------\n\nTITLE: Using all-open Plugin with Command-line Compiler\nDESCRIPTION: Demonstrates how to use the all-open compiler plugin with the Kotlin command-line compiler. Shows how to attach the plugin JAR and specify annotations or presets.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/all-open-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-Xplugin=$KOTLIN_HOME/lib/allopen-compiler-plugin.jar\n```\n\nLANGUAGE: bash\nCODE:\n```\n# The plugin option format is: \"-P plugin:<plugin id>:<key>=<value>\". \n# Options can be repeated.\n\n-P plugin:org.jetbrains.kotlin.allopen:annotation=com.my.Annotation\n-P plugin:org.jetbrains.kotlin.allopen:preset=spring\n```\n\n----------------------------------------\n\nTITLE: Assigning a Label to a Lambda in Kotlin\nDESCRIPTION: This snippet shows how to assign a label to a lambda expression. There should be no space between the label and the opening curly brace. This is often used with `forEach` and other similar constructs.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() {\n    ints.forEach lit@{\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stdlib dependency (1.9.20+)\nDESCRIPTION: From Kotlin 1.9.20 onward, the standard library dependency only needs to be configured once in the `commonMain` source set.  Gradle automatically resolves the appropriate artifact for other source sets from the metadata.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(\"org.jetbrains.kotlin:kotlin-stdlib:1.9.20\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convert functions with receivers to regular functions - Kotlin\nDESCRIPTION: Converts functions with receivers (extension functions) in external interfaces to regular functions. This is required because external declarations cannot contain functions with receivers; the receiver object is added as an argument.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-migration.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Replace this\nexternal interface ButtonProps : Props {\n   var inside: StyledDOMBuilder<BUTTON>.() -> Unit\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nexternal interface ButtonProps : Props {\n   var inside: (StyledDOMBuilder<BUTTON>) -> Unit\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin main function accessing Java field\nDESCRIPTION: This Kotlin code demonstrates how accessing the 'a' field in the Java `Derived` class, which inherits from a Kotlin `Base` class with a property named 'a', resolves to the Java field in Kotlin 2.0.0, reflecting the precedence of subclass members in name resolution.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // Resolves Derived.a\n    println(a)\n    // a\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths in klibs with Gradle (Groovy DSL)\nDESCRIPTION: Shows how to configure the Kotlin compiler in a Gradle build using Groovy DSL to use relative paths in klib libraries for better reproducibility.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-libraries.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask\n// ...\n\ntasks.named('compileKotlin', KotlinCompilationTask) {\n    compilerOptions {\n        // $base is a base path of source files\n        freeCompilerArgs.add(\"-Xklib-relative-path-base=$base\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin constructor reference\nDESCRIPTION: Demonstrates referencing a constructor using the `::` operator and passing it as a function parameter. This is used to create instances of the class.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Foo\n\nfun function(factory: () -> Foo) {\n    val x: Foo = factory()\n}\n\nfunction(::Foo)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Compiler Plugin in Gradle Version Catalog (TOML)\nDESCRIPTION: This snippet shows how to add the Compose compiler Gradle plugin to the Gradle version catalog. It defines the Kotlin version and includes plugin declarations for Kotlin Android and Compose compiler.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compose-compiler-migration-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[versions]\n# ...\nkotlin = \"%kotlinVersion%\"\n\n[plugins]\n# ...\norg-jetbrains-kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\ncompose-compiler = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\n```\n\n----------------------------------------\n\nTITLE: Reading Input with Java Scanner\nDESCRIPTION: Demonstrates how to read various data types from standard input using Java Scanner class. Shows reading strings and integers with proper scanner initialization and cleanup.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/standard-input.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Reads a single line of input. For example: Hi there!\n        System.out.print(\"Enter a line: \");\n        String line = scanner.nextLine();\n        System.out.println(\"You entered: \" + line);\n        // You entered: Hi there!\n\n        // Reads an integer. For example: 08081990\n        System.out.print(\"Enter an integer: \");\n        int number = scanner.nextInt();\n        System.out.println(\"You entered: \" + number);\n        // You entered: 08081990\n\n        scanner.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Type in Java\nDESCRIPTION: Illustrates how to filter elements by type in Java using instanceof and type casting. It filters String elements and converts them to uppercase.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\npublic void objectIsInstance() {\n    var numbers = new ArrayList<>();\n    numbers.add(null);\n    numbers.add(1);\n    numbers.add(\"two\");\n    numbers.add(3.0);\n    numbers.add(\"four\");\n    System.out.println(\"All String elements in upper case:\");\n    numbers.stream().filter(it -> it instanceof String)\n        .forEach( it -> System.out.println(((String) it).toUpperCase()));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoPlayerProps interface in Kotlin\nDESCRIPTION: Expands the VideoPlayerProps interface to include properties for handling watched/unwatched state and button press events.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nexternal interface VideoPlayerProps : Props {\n    var video: Video\n    var onWatchedButtonPressed: (Video) -> Unit\n    var unwatchedVideo: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Resolution Error Output Example - None\nDESCRIPTION: This is an example error message that occurs when attributes for a custom configuration are not set correctly in a Gradle build. It illustrates the unresolved variant selection between gradle70RuntimeElements and runtimeElements for the org.jetbrains.kotlin:kotlin-gradle-plugin. This output is meant for diagnostic and guidance purposes only—no inputs or outputs are expected.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-plugin-variants.md#2025-04-22_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n > Could not resolve all files for configuration ':customConfiguration'.\n      > Could not resolve org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0.\n        Required by:\n            project :\n         > Cannot choose between the following variants of org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0:\n             - gradle70RuntimeElements\n             - runtimeElements\n           All of them match the consumer attributes:\n             - Variant 'gradle70RuntimeElements' capability org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0:\n                 - Unmatched attributes:\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Lock Mismatch Reporting in Kotlin\nDESCRIPTION: This snippet shows how to configure new Gradle settings for reporting yarn.lock file updates using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew18.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.targets.js.yarn.YarnLockMismatchReport\nimport org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension\n\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin::class.java) {\n    rootProject.the<YarnRootExtension>().yarnLockMismatchReport =\n        YarnLockMismatchReport.WARNING // NONE | FAIL\n    rootProject.the<YarnRootExtension>().reportNewYarnLock = false // true\n    rootProject.the<YarnRootExtension>().yarnLockAutoReplace = false // true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Dependency Resolutions\nDESCRIPTION: Gradle configuration for setting up selective yarn dependency resolutions in a Kotlin/JS project.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1420.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<YarnPlugin> {\n    rootProject.the<YarnRootExtension>().apply {\n        resolution(\"react\", \"16.0.0\")\n        resolution(\"processor/decamelize\", \"3.0.0\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Heroku Deployment Commands for Kotlin/JS Project\nDESCRIPTION: This set of bash commands initializes a Git repository, creates a Heroku app, and deploys the Kotlin/JS project to Heroku.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-react.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ngit init\nheroku create\ngit add .\ngit commit -m \"initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build Variants in Kotlin\nDESCRIPTION: Example of using the new invokeWhenCreated API to configure Android build variants in build.gradle.kts. This approach replaces the previous eager source set creation method for handling debug, release, and custom flavor variants.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-android-layout.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n// ...\n    @OptIn(ExperimentalKotlinGradlePluginApi::class)\n    sourceSets.invokeWhenCreated(\"androidFreeDebug\") {\n// ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @JsStatic for Static Members in Kotlin\nDESCRIPTION: Defines a Kotlin class `C` with a companion object. The `@JsStatic` annotation is applied to the `callStatic` function within the companion object, instructing the compiler to generate an additional static method directly on the `C` class in JavaScript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-to-kotlin-interop.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nclass C {\n    companion object {\n        @JsStatic\n        fun callStatic() {}\n        fun callNonStatic() {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JDK Version for Specific Tasks Using DSL (Groovy)\nDESCRIPTION: Defines a JDK version for designated tasks in Gradle using Groovy DSL, applicable for tasks implementing `UsesKotlinJavaToolchain`. Input `<MAJOR_JDK_VERSION>` for desired settings.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/gradle/gradle-configure-project.md#2025-04-22_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nJavaToolchainService service = project.getExtensions().getByType(JavaToolchainService.class)\nProvider<JavaLauncher> customLauncher = service.launcherFor {\n    it.languageVersion = JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)\n}\ntasks.withType(UsesKotlinJavaToolchain::class).configureEach { task ->\n    task.kotlinJavaToolchain.toolchain.use(customLauncher)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in Groovy DSL\nDESCRIPTION: This snippet demonstrates how to configure language settings for all Kotlin source sets within the `kotlin` block of a Gradle build script using the Groovy DSL.  It allows setting `languageVersion`, `apiVersion`, enabling language features with `enableLanguageFeature`, opting in to experimental APIs with `optIn`, and enabling `progressiveMode`. The settings are applied to all source sets using `sourceSets.all`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-dsl-reference.md#_snippet_37\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = '%languageVersion%' // possible values: '1.8', '1.9', '2.0', '2.1'\n            apiVersion = '%apiVersion%' // possible values: '1.8', '1.9', '2.0', '2.1'\n            enableLanguageFeature('InlineClasses') // language feature name\n            optIn('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name\n            progressiveMode = true // false by default\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Base class with public fields\nDESCRIPTION: This Java class defines a base class with public fields 'a' and 'b'. It serves as the base for illustrating the changes in how Kotlin resolves name collisions between Kotlin properties and Java fields in inheritance scenarios.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/k2-compiler-migration-guide.md#_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npublic class Base {\n    public String a = \"a\";\n\n    public String b = \"b\";\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Testing Frameworks in Gradle Groovy Script\nDESCRIPTION: This Groovy code snippet illustrates how to exclude a testing framework, such as JUnit 4, from the test configuration in Gradle. This is necessary when reducing conflicts caused by mutually exclusive 'kotlin-test' variants brought in by transitive dependencies from Kotlin 1.5 onwards. The code is compatible with Groovy-based build scripts in Gradle.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-15.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nconfigurations { \n    testImplementation.get().exclude(\"org.jetbrains.kotlin\", \"kotlin-test-junit\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Top-Level Function Definition\nDESCRIPTION: This Kotlin code defines a top-level function named `foo` within the `my.library` package. Top-level functions are translated into members of a special class when accessed from Swift/Objective-C. This example demonstrates a simple function declaration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-objc-interop.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// MyLibraryUtils.kt\npackage my.library\n\nfun foo() {}\n```\n\n----------------------------------------\n\nTITLE: Hello World in Kotlin/JS\nDESCRIPTION: Simple Kotlin/JS 'Hello, World!' application to be executed in a browser or Node.js environment using Kotlin Multiplatform Gradle plugin. Requires Kotlin/JS configured in the project with a sample main function logging to the console.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/running-kotlin-js.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    console.log(\"Hello, Kotlin/JS!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Test Dependency in Gradle (Groovy DSL)\nDESCRIPTION: This snippet shows how to add the `kotlin-test` dependency to the `commonTest` source set within a Kotlin Multiplatform project using the Gradle Groovy DSL (`build.gradle`). Adding this dependency here ensures that test annotations and functionalities are accessible across different targets, including JavaScript.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-running-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// build.gradle\n\nkotlin {\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\"test\") // This makes test annotations and functionality available in JS\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Test Libraries in Kotlin\nDESCRIPTION: Imports necessary libraries for testing in Kotlin. This includes JUnit for test annotations and kotlin.test for assertions and other testing utilities.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/ideal-for-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.junit.Test                   // Tests\nimport kotlin.test.*                    // The following example works for JVM only\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Kotlin Class\nDESCRIPTION: This snippet shows how to declare a simple class in Kotlin using the `class` keyword. It creates an empty class named `Customer`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-classes.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Customer\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application Setup\nDESCRIPTION: Basic Spring Boot application setup with a REST controller implementing a simple greeting endpoint.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/test-page.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.demo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.RestController\n\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<DemoApplication>(*args)\n}\n\n@RestController\nclass MessageController {\n    @GetMapping(\"/\")\n    fun index(@RequestParam(\"name\") name: String) = \"Hello, $name!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths in Klibs with Kotlin DSL\nDESCRIPTION: Example showing how to configure the Kotlin compiler to use relative paths in klib artifacts instead of absolute paths for better security when publishing libraries.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1620.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile::class).configureEach {\n    // $base is a base path of source files\n    kotlinOptions.freeCompilerArgs += \"-Xklib-relative-path-base=$base\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Modes for -Xjvm-default Compiler Option (Kotlin)\nDESCRIPTION: Refers to the Kotlin compiler option `-Xjvm-default` and its `enable` and `compatibility` modes. Usage of these specific modes will trigger a warning starting from Kotlin 1.6.20 and is planned to become an error in version 1.8.0 or later.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n-Xjvm-default\n```\n\n----------------------------------------\n\nTITLE: Cloning Kotlin/Native Project Template Repository URL\nDESCRIPTION: URL used to clone the Kotlin/Native project template from GitHub via IntelliJ IDEA's 'Project from Version Control' option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/Kotlin/kmp-native-wizard\n```\n\n----------------------------------------\n\nTITLE: Null Check Before Dereferencing in Java - Java\nDESCRIPTION: Demonstrates the Java pattern of testing a function result for nullity before accessing its members. Ensures safe property access of the 'Order' object by checking 'order' is not null before calling processCustomer. This prevents NullPointerException on order.getCustomer().\nDependencies: order must be obtained from findOrder(). Input: Order. Output: Result of processCustomer invoked on retrieved customer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-nullability-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Java\\nOrder order = findOrder();\\n\\nif (order != null) {\\n    processCustomer(order.getCustomer());\\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline String with trimMargin Kotlin\nDESCRIPTION: This snippet shows how to use the `trimMargin()` function to remove leading whitespace from a multiline string in Kotlin.  It uses the pipe symbol `|` as the margin prefix by default. The function cleans up multiline strings by removing unnecessary indentation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n```\n\n----------------------------------------\n\nTITLE: Defining Geo-Position for a User Group - YAML\nDESCRIPTION: This YAML snippet provides the structure for specifying the geographic position of a Kotlin User Group in the user-groups.yml configuration file. The 'position' key contains the latitude ('lat') and longitude ('lng') required for mapping. Both values are floating-point numbers representing the group's coordinates. This configuration is typically inserted manually but can also be generated by a geolocation script. No dependencies beyond the YAML schema enforcement and consuming tooling.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nposition:\\n  lat: 1.1111111\\n  lng: 1.1111111\\n\n```\n\n----------------------------------------\n\nTITLE: Print Hello World in Kotlin Notebook\nDESCRIPTION: This code snippet prints \"Hello, this is a Kotlin Notebook!\" to the output of a Kotlin Notebook cell. It demonstrates basic output functionality within a notebook environment.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/kotlin-notebook-create.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nprintln(\"Hello, this is a Kotlin Notebook!\")\n```\n\n----------------------------------------\n\nTITLE: Using minOf() and maxOf() Functions in Kotlin\nDESCRIPTION: Demonstrates the usage of minOf() and maxOf() functions to find the lowest and greatest values among primitive numbers or Comparable objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val list1 = listOf(\"a\", \"b\")\n    val list2 = listOf(\"x\", \"y\", \"z\")\n    val minSize = minOf(list1.size, list2.size)\n    val longestList = maxOf(list1, list2, compareBy { it.size })\n    \n    println(\"minSize = $minSize\")\n    println(\"longestList = $longestList\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kandy dependency in Kotlin Notebook\nDESCRIPTION: This snippet demonstrates how to add the Kandy plotting library as a dependency to your Kotlin Notebook using the `%use` magic command. This command configures the notebook environment to use the Kandy library for plotting.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-notebooks-output-formats.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n%use kandy\n```\n\n----------------------------------------\n\nTITLE: Collection Grouping with groupingBy in Kotlin\nDESCRIPTION: Shows how to use groupingBy() to efficiently group collection elements and perform aggregation operations like counting. Demonstrates grouping words by their first letter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval frequencies = words.groupingBy { it.first() }.eachCount()\n```\n\n----------------------------------------\n\nTITLE: Indexing Suffix with Trailing Comma in Kotlin\nDESCRIPTION: This example shows how to use trailing commas in indexing suffixes for custom indexing operators.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Surface {\n    operator fun get(x: Int, y: Int) = 2 * x + 4 * y - 10\n}\nfun getZValue(mySurface: Surface, xValue: Int, yValue: Int) =\n    mySurface[\n        xValue,\n        yValue, // trailing comma\n    ]\n```\n\n----------------------------------------\n\nTITLE: Generating Number Sequences in Java using IntStream\nDESCRIPTION: This Java snippet demonstrates generating a sequence of integers using `IntStream.iterate`. It starts with 1 and generates subsequent elements by adding 3 (`e -> e + 3`). The `.limit(10)` method restricts the sequence to the first 10 elements, and `.sum()` calculates their total.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Java\nint sum = IntStream.iterate(1, e -> e + 3)\n    .limit(10).sum();\nSystem.out.println(sum); // Prints 145\n```\n\n----------------------------------------\n\nTITLE: Accessing Java Getters and Setters\nDESCRIPTION: Illustrates how Java getter and setter methods are represented as properties in Kotlin. It demonstrates accessing and modifying Java properties using Kotlin's property syntax.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-interop.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.Calendar\n\nfun calendarDemo() {\n    val calendar = Calendar.getInstance()\n    if (calendar.firstDayOfWeek == Calendar.SUNDAY) { // call getFirstDayOfWeek()\n        calendar.firstDayOfWeek = Calendar.MONDAY // call setFirstDayOfWeek()\n    }\n    if (!calendar.isLenient) { // call isLenient()\n        calendar.isLenient = true // call setLenient()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Annotation with Constructor Parameters in Kotlin\nDESCRIPTION: Defines a Kotlin annotation `Special` that accepts a `String` parameter named `why` in its constructor. It then shows how to apply this annotation to a class `Foo`, providing a value for the parameter.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class Special(val why: String)\n\n@Special(\"example\") class Foo {}\n```\n\n----------------------------------------\n\nTITLE: Collection Literals in Annotations with Trailing Comma in Kotlin\nDESCRIPTION: This example shows using a trailing comma in an annotation with a collection literal.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/coding-conventions.md#_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nannotation class ApplicableFor(val services: Array<String>)\n@ApplicableFor([\n    \"serializer\",\n    \"balancer\",\n    \"database\",\n    \"inMemoryCache\", // trailing comma\n])\nfun run() {}\n```\n\n----------------------------------------\n\nTITLE: Converting Pointer to CValue<T> in Kotlin/Native\nDESCRIPTION: This snippet shows how to allocate a struct in memory and then convert it back to a by-value representation using the readValue() extension function within a memScoped block.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport interop.*\nimport kotlinx.cinterop.alloc\nimport kotlinx.cinterop.ExperimentalForeignApi\nimport kotlinx.cinterop.memScoped\nimport kotlinx.cinterop.readValue\n\n@OptIn(ExperimentalForeignApi::class)\nfun callMix_value() {\n    memScoped {\n        val cStruct = alloc<MyStruct>()\n        cStruct.a = 42\n        cStruct.b = 3.14\n\n        struct_by_value(cStruct.readValue())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Code Using Kotlin Framework\nDESCRIPTION: Illustrates how to call Kotlin classes and functions directly from Objective-C code. Demonstrates usage of Kotlin objects via `<object name>.shared`, instantiation of Kotlin classes, and invocation of global Kotlin functions through the `DemoLibKt` class. This snippet uses alloc/init, class methods, and blocks to interact with Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/apple-framework.md#_snippet_9\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <Demo/Demo.h>\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        [DemoObject.shared field];\n        \n        DemoClazz* clazz = [[ DemoClazz alloc] init];\n        [clazz memberP:42];\n        \n        [DemoLibKt forIntegersB:1 s:1 i:3 l:[DemoULong numberWithUnsignedLongLong:4]];\n        [DemoLibKt forIntegersB:1 s:1 i:3 l:nil];\n        \n        [DemoLibKt forFloatsF:2.71 d:[DemoDouble numberWithDouble:2.71]];\n        [DemoLibKt forFloatsF:2.71 d:nil];\n        \n        NSString* ret = [DemoLibKt acceptFunF:^NSString * _Nullable(NSString * it) {\n            return [it stringByAppendingString:@\" Kotlin is fun\"];\n        }];\n        \n        NSLog(@\"%@\", ret);\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Opt-in Requirements in Kotlin Multiplatform\nDESCRIPTION: Example of using optIn() to enable experimental APIs in a multiplatform project's source sets\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew17.md#2025-04-22_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceSets {\n    all {\n        languageSettings.optIn(\"org.mylibrary.OptInAnnotation\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating Interface Implementation in Kotlin\nDESCRIPTION: This Kotlin snippet shows how a class `Derived` can implement an interface `Base` by delegating its public members to an instance of another class `BaseImpl`. The `by` keyword simplifies the delegation, allowing `Derived` to pass method calls to the delegate instance `b`. Dependencies include Kotlin standard library and interface `Base`. Key parameters are `b` which is the delegate instance. Inputs include the integer to `BaseImpl`. Output is the value being printed to standard output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/delegation.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Base {\n    fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override fun print() { print(x) }\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main() {\n    val base = BaseImpl(10)\n    Derived(base).print()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C Struct and Union Types\nDESCRIPTION: C code defining a struct MyStruct with integer and double fields, and a union MyUnion that can hold either an integer, MyStruct, or float. Includes function declarations for handling these types by value and pointer.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/mapping-struct-union-types-from-c.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n  int a;\n  double b;\n} MyStruct;\n\nvoid struct_by_value(MyStruct s) {}\nvoid struct_by_pointer(MyStruct* s) {}\n\ntypedef union {\n  int a;\n  MyStruct b;\n  float c;\n} MyUnion;\n\nvoid union_by_value(MyUnion u) {}\nvoid union_by_pointer(MyUnion* u) {}\n```\n\n----------------------------------------\n\nTITLE: Simulating break with non-local returns in Kotlin\nDESCRIPTION: Demonstrates how to simulate a break statement in nested lambdas by adding another nesting lambda with the run function and using a non-local return. This technique can be used when break is needed but not directly available.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/returns.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun foo() {\n    run loop@{\n        listOf(1, 2, 3, 4, 5).forEach {\n            if (it == 3) return@loop // non-local return from the lambda passed to run\n            print(it)\n        }\n    }\n    print(\" done with nested loop\")\n}\n\nfun main() {\n    foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Using require() for Input Validation in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to use the require() function to validate input arguments. If the condition within require() is not met, an IllegalArgumentException is thrown with a custom message. The example shows a function getIndices() which throws an exception if the input count is negative.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/exceptions.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getIndices(count: Int): List<Int> {\n    require(count >= 0) { \"Count must be non-negative. You set count to $count.\" }\n    return List(count) { it + 1 }\n}\n\nfun main() {\n    // This fails with an IllegalArgumentException\n    println(getIndices(-1))\n    \n    // Uncomment the line below to see a working example\n    // println(getIndices(3))\n    // [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Printing \"Hello, World!\" in Kotlin\nDESCRIPTION: This snippet shows the simplest Kotlin program that prints \"Hello, world!\" to the standard output. It demonstrates the `fun` keyword for function declaration, the `main()` function as the entry point, and the `println()` function for output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/tour/kotlin-tour-hello-world.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    println(\"Hello, world!\")\n    // Hello, world!\n}\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods with Default Ruby\nDESCRIPTION: This code snippet demonstrates how to install CocoaPods using the default Ruby installation on macOS. This method might not work on devices with Apple M chips.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Toolchain in Kotlin DSL\nDESCRIPTION: Sets up a Java toolchain for Kotlin/JVM compilation tasks using the Kotlin DSL. This configuration affects JDK version, jvmTarget compatibility, and kapt workers.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvmToolchain {\n        (this as JavaToolchainSpec).languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)) // \"8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations in Kotlin\nDESCRIPTION: This example shows how to use bitwise operations in Kotlin, which operate directly on the binary representation of integer numbers. The snippet demonstrates shift left and bitwise AND operations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val x = 1\n    val xShiftedLeft = (x shl 2)\n    println(xShiftedLeft)  \n    // 4\n    \n    val xAnd = x and 0x000FF000\n    println(xAnd)          \n    // 0\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Allowing @JvmField on Overriding Properties in Primary Constructor (Kotlin)\nDESCRIPTION: This Kotlin compiler flag disables the error introduced in Kotlin 1.6 that prohibits using the @JvmField annotation on a property in the primary constructor when that property overrides one from an interface. It allows temporarily reverting to the pre-1.6 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-ProhibitJvmFieldOnOverrideFromInterfaceInPrimaryConstructor\n```\n\n----------------------------------------\n\nTITLE: Using Running Fold and Reduce in Kotlin Collections\nDESCRIPTION: Demonstrates the runningFold and runningReduce functions which apply operations sequentially to collection elements and return the sequence of all intermediate results, not just the final value.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(0, 1, 2, 3, 4, 5)\n    val runningReduceSum = numbers.runningReduce { sum, item -> sum + item }\n    val runningFoldSum = numbers.runningFold(10) { sum, item -> sum + item }\n//sampleEnd\n    println(runningReduceSum.toString())\n    println(runningFoldSum.toString())\n}\n```\n\n----------------------------------------\n\nTITLE: Conceptual Implementation of the `copy()` Function in Kotlin Data Classes\nDESCRIPTION: Provides a conceptual representation of the `copy()` function that the Kotlin compiler automatically generates for a data class (`User` in this case). This function creates a new instance, taking values from the current instance (`this`) by default, but allowing specific properties (`name`, `age`) to be overridden with new values.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-classes.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)\n```\n\n----------------------------------------\n\nTITLE: Multi-dollar String Interpolation with Literals Kotlin\nDESCRIPTION: This snippet showcases multi-dollar string interpolation with `$$$` to allow `$` and `$$` as literal characters while enabling interpolation with `$$$`. This provides more flexibility when including literal dollar signs in strings. This example shows the usage of the new string interpolation.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/strings.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval productName = \"carrot\"\nval requestedData =\n    $$$\"\"\"{\n      \"currency\": \"$\",\n      \"enteredAmount\": \"42.45 $$\",\n      \"$$serviceField\": \"none\",\n      \"product\": \"$$$productName\"\n    }\n    \"\"\n\nprintln(requestedData)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Indices in a For Loop Kotlin\nDESCRIPTION: Shows how to iterate through an array using its indices in a `for` loop.  The example demonstrates accessing array elements by their index and printing them.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/control-flow.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\nval array = arrayOf(\"a\", \"b\", \"c\")\n//sampleStart\n    for (i in array.indices) {\n        print(array[i])\n    }\n    // abc\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin extension property reference\nDESCRIPTION: Demonstrates how to access an extension property using the `::` operator. The example uses `String::lastChar` to get the last character of a string.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/reflection.md#_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval String.lastChar: Char\n    get() = this[length - 1]\n\nfun main() {\n    println(String::lastChar.get(\"abc\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Multiplatform Project (Groovy)\nDESCRIPTION: This code snippet demonstrates how to add a dependency on the parent multiplatform project from a subproject using the Groovy DSL in Gradle. This is necessary when using Java plugins in a separate subproject due to compatibility issues with Kotlin Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation project(':my-main-project') // The name of your parent multiplatform project\n}\n```\n\n----------------------------------------\n\nTITLE: Using apply() for Object Configuration in Kotlin\nDESCRIPTION: This snippet demonstrates how to use apply() for object configuration. It's particularly useful for initializing objects with multiple properties, as it returns the object itself after applying the specified modifications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/scope-functions.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(var name: String, var age: Int = 0, var city: String = \"\")\n\nfun main() {\n    val adam = Person(\"Adam\").apply {\n        age = 32\n        city = \"London\"        \n    }\n    println(adam)\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Opt-in Approaches\nDESCRIPTION: Shows different ways to implement opt-in requirements using @OptIn annotation and experimental marker annotations.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/opt-in-requirements.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// Client code\n// With @OptIn annotation\n@OptInRequired(UnstableApi::class)\ninterface SomeImplementation : CoreLibraryApi\n\n// With annotation referencing annotation class\n// Propagates the opt-in requirement further\n@UnstableApi\ninterface SomeImplementation : CoreLibraryApi\n```\n\n----------------------------------------\n\nTITLE: Sorting Collections in Kotlin\nDESCRIPTION: Illustrates the difference between in-place sorting with sort() and creating new sorted collections with sorted().\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/collection-operations.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    val sortedNumbers = numbers.sorted()\n    println(numbers == sortedNumbers)  // false\n    numbers.sort()\n    println(numbers == sortedNumbers)  // true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Framework Selection\nDESCRIPTION: Example showing how to configure TestNG or JUnit5 as the testing framework using Gradle task configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\ntasks {\n    test {\n        // enable TestNG support\n        useTestNG()\n        // or\n        // enable JUnit Platform (a.k.a. JUnit 5) support\n        useJUnitPlatform()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Boxing of Large Numbers in Kotlin\nDESCRIPTION: Shows how numbers outside the small number cache range (-128 to 127) are boxed as separate objects but remain structurally equal when using nullable references.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n//sampleStart\n    val b: Int = 10000\n    val boxedB: Int? = b\n    val anotherBoxedB: Int? = b\n    \n    println(boxedB === anotherBoxedB) // false\n    println(boxedB == anotherBoxedB) // true\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Reading string input from standard input in Kotlin\nDESCRIPTION: Demonstrates how to read string input from the standard input using the readln() function. The examples show reading input into a variable and directly printing it without storing.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/read-standard-input.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Reads and stores the user input in a variable. For example: Hi there!\nval myInput = readln()\n\nprintln(myInput)\n// Hi there!\n\n// Reads and prints the user input without storing it in a variable. For example: Hi, Kotlin!\nprintln(readln())\n// Hi, Kotlin!\n```\n\n----------------------------------------\n\nTITLE: Parsing Duration from Strings in Kotlin\nDESCRIPTION: Demonstrates using Duration.parse() and Duration.parseOrNull() to parse different duration string formats including ISO, default, and single unit formats.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1530.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.Duration\nimport kotlin.time.ExperimentalTime\n\n@ExperimentalTime\nfun main() {\n//sampleStart\n    val isoFormatString = \"PT1H30M\"\n    val defaultFormatString = \"1h 30m\"\n    val singleUnitFormatString = \"1.5h\"\n    val invalidFormatString = \"1 hour 30 minutes\"\n    println(Duration.parse(isoFormatString)) // \"1h 30m\"\n    println(Duration.parse(defaultFormatString)) // \"1h 30m\"\n    println(Duration.parse(singleUnitFormatString)) // \"1h 30m\"\n    //println(Duration.parse(invalidFormatString)) // throws exception\n    println(Duration.parseOrNull(invalidFormatString)) // \"null\"\n//sampleEnd\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Time Tracking Functionality in Kotlin\nDESCRIPTION: Shows how to use the new Instant and Clock classes for precise time tracking. Demonstrates getting the current time, parsing a specific instant, and calculating duration between two points in time. Requires opting in to the experimental time API.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2120.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.time.*\n\n@OptIn(ExperimentalTime::class)\nfun main() {\n\n    // Get the current moment in time\n    val currentInstant = Clock.System.now()\n    println(\"Current time: $currentInstant\")\n\n    // Find the difference between two moments in time\n    val pastInstant = Instant.parse(\"2023-01-01T00:00:00Z\")\n    val duration = currentInstant - pastInstant\n\n    println(\"Time elapsed since 2023-01-01: $duration\")\n}\n```\n\n----------------------------------------\n\nTITLE: Export DataFrame to HTML and Open in Browser\nDESCRIPTION: This code converts the `refinedMoviesDf` DataFrame to a standalone HTML table and opens it in the default web browser.  The `DisplayConfiguration` is used to specify that there's no row limit, meaning all rows should be included in the HTML table.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nrefinedMoviesDf.toStandaloneHTML(DisplayConfiguration(rowsLimit = null)).openInBrowser()\n```\n\n----------------------------------------\n\nTITLE: Detailed Library Configuration (Groovy DSL)\nDESCRIPTION: Complete example of configuring a native library with all available options in Groovy DSL.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-native-artifacts.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkotlinArtifacts {\n    it.native.Library(\"myslib\") {\n        target = linuxX64\n        it.static = false\n        modes(DEBUG)\n        addModule(project(\":lib\"))\n        kotlinOptions {\n            verbose = false\n            freeCompilerArgs += \"-Xmen=pool\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure CocoaPods Plugin in Kotlin\nDESCRIPTION: This code snippet demonstrates the configuration of the CocoaPods plugin within the `kotlin` block of a `build.gradle.kts` file. It sets essential properties like `version`, `summary`, `homepage`, and `baseName` for the generated Podspec file. It also configures the framework name, static linking, dependency exports, and maps Xcode configurations to NativeBuildType. `isStatic = false` means dynamic linking.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n    kotlin(\"native.cocoapods\") version \"%kotlinVersion%\"\n}\n\nkotlin {\n    cocoapods {\n        // Required properties\n        // Specify the required Pod version here\n        // Otherwise, the Gradle project version is used\n        version = \"1.0\"\n        summary = \"Some description for a Kotlin/Native module\"\n        homepage = \"Link to a Kotlin/Native module homepage\"\n   \n        // Optional properties\n        // Configure the Pod name here instead of changing the Gradle project name\n        name = \"MyCocoaPod\"\n\n        framework {\n            // Required properties              \n            // Framework name configuration. Use this property instead of deprecated 'frameworkName'\n            baseName = \"MyFramework\"\n                \n            // Optional properties\n            // Specify the framework linking type. It's dynamic by default. \n            isStatic = false\n            // Dependency export\n            // Uncomment and specify another project module if you have one:\n            // export(project(\":<your other KMP module>\"))\n            transitiveExport = false // This is default.\n        }\n\n        // Maps custom Xcode configuration to NativeBuildType\n        xcodeConfigurationToNativeBuildType[\"CUSTOM_DEBUG\"] = NativeBuildType.DEBUG\n        xcodeConfigurationToNativeBuildType[\"CUSTOM_RELEASE\"] = NativeBuildType.RELEASE\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functions to Be Tested in Kotlin\nDESCRIPTION: Defines the functions that are being tested in the test class. Includes a sum function that adds two integers, a setup function with empty implementation, and a compute function that returns true.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/blocks/main/why-kotlin/code-examples/ideal-for-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun sum(a: Int, b: Int) = a + b         // Sources\nfun setup() {}\nfun compute() = true\n```\n\n----------------------------------------\n\nTITLE: Enabling the Kotlin CocoaPods Gradle Plugin\nDESCRIPTION: Shows how to apply the CocoaPods plugin in a Kotlin Multiplatform project by adding it to the plugins block in the build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-dsl-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   kotlin(\"multiplatform\") version \"%kotlinVersion%\"\n   kotlin(\"native.cocoapods\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints in GDB with Kotlin/Native\nDESCRIPTION: Shows various methods to set breakpoints in GDB when debugging Kotlin/Native applications, including using regex patterns, location-based breakpoints, and memory addresses.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) rbreak main(\nBreakpoint 1 at 0x1000109b4\nstruct ktype:kotlin.Unit &kfun:main(kotlin.Array<kotlin.String>);\n```\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) b kfun:main(kotlin.Array<kotlin.String>)\nNo source file named kfun.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (kfun:main(kotlin.Array<kotlin.String>)) pending\n```\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) b hello.kt:1\nBreakpoint 2 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 1.\n```\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) b *0x100001704\nNote: breakpoint 2 also set at pc 0x100001704.\nBreakpoint 3 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 2.\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven JAR Plugin for Kotlin Applications\nDESCRIPTION: Sets up the Maven JAR plugin to create an executable JAR with a specified main class for Kotlin applications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/maven.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.6</version>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>${main.class}</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Builder Implementation in Kotlin\nDESCRIPTION: An example of using a type-safe DSL builder to create HTML markup in Kotlin. The code generates an HTML document with nested elements including head, body, paragraphs, and links.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/type-safe-builders.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.example.html.* // see declarations below\n\nfun result() =\n    html {\n        head {\n            title {+\"XML encoding with Kotlin\"}\n        }\n        body {\n            h1 {+\"XML encoding with Kotlin\"}\n            p  {+\"this format can be used as an alternative markup to XML\"}\n\n            // an element with attributes and text content\n            a(href = \"https://kotlinlang.org\") {+\"Kotlin\"}\n\n            // mixed content\n            p {\n                +\"This is some\"\n                b {+\"mixed\"}\n                +\"text. For more see the\"\n                a(href = \"https://kotlinlang.org\") {+\"Kotlin\"}\n                +\"project\"\n            }\n            p {+\"some text\"}\n\n            // content generated by\n            p {\n                for (arg in args)\n                    +arg\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete Kotlin/Wasm Webpack Configuration\nDESCRIPTION: Full configuration block for Kotlin/Wasm including Webpack DevServer setup in build.gradle.kts\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/wasm/wasm-debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    @OptIn(ExperimentalWasmDsl::class)\n    wasmJs {\n        moduleName = \"composeApp\"\n        browser {\n            commonWebpackConfig {\n                outputFileName = \"composeApp.js\"\n                devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {\n                    static = (static ?: mutableListOf()).apply { \n                        // Serve sources to debug inside browser\n                        add(project.rootDir.path)\n                        add(project.projectDir.path)\n                    }\n                } \n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sealed Interface Declaration\nDESCRIPTION: Demonstrates the declaration of a sealed interface in Kotlin which restricts implementations to be known at compile time.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew15.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nsealed interface Polygon\n```\n\n----------------------------------------\n\nTITLE: Disabling Node.js Downloads in Kotlin/JS Gradle Build\nDESCRIPTION: Configuration to disable automatic downloading of Node.js in Kotlin/JS projects using Gradle build scripts.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew16.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin> {\n    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension>().download = false // or true for default behavior\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin) {\n    rootProject.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension).download = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Symbol Generation for Apple Targets\nDESCRIPTION: Gradle configuration to toggle the generation of debug symbol files (.dSYMs) for release binaries on Apple platforms. This can be enabled or disabled using the -Xadd-light-debug compiler option.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew14.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.all {\n            freeCompilerArgs += \"-Xadd-light-debug={enable|disable}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Android Library Variants in Kotlin Multiplatform\nDESCRIPTION: This code shows how to specify which Android build variants should be published for a Kotlin multiplatform library. It publishes the 'release' variant.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/multiplatform-publish-lib.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    androidTarget {\n        publishLibraryVariants(\"release\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Java Annotations with Named Arguments in Kotlin\nDESCRIPTION: Shows a Java annotation `Ann` with `intValue` and `stringValue` parameters and how to apply it in Kotlin using the named argument syntax (`@Ann(intValue = 1, stringValue = \"abc\")`), as Java doesn't guarantee parameter order.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/annotations.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// Java\npublic @interface Ann {\n    int intValue();\n    String stringValue();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\n@Ann(intValue = 1, stringValue = \"abc\") class C\n```\n\n----------------------------------------\n\nTITLE: Configuring SAM-with-receiver Plugin in Maven\nDESCRIPTION: Maven configuration for the SAM-with-receiver plugin, including the plugin declaration and annotation configuration.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/sam-with-receiver-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <artifactId>kotlin-maven-plugin</artifactId>\n    <groupId>org.jetbrains.kotlin</groupId>\n    <version>${kotlin.version}</version>\n\n    <configuration>\n        <compilerPlugins>\n            <plugin>sam-with-receiver</plugin>\n        </compilerPlugins>\n\n        <pluginOptions>\n            <option>\n                sam-with-receiver:annotation=com.my.SamWithReceiver\n            </option>\n        </pluginOptions>\n    </configuration>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-sam-with-receiver</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Distribution Directory in Kotlin Gradle Build Script\nDESCRIPTION: This snippet demonstrates how to set a custom output directory for the distribution files of a Kotlin/JS project in a Kotlin Gradle build script. It configures the browser target to use a specific directory for output.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-project-setup.md#2025-04-22_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    js {\n        browser {\n            distribution {\n                outputDirectory.set(projectDir.resolve(\"output\"))\n            }\n        }\n        binaries.executable()\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin library dependency to Xcode Podfile (Multiple Targets)\nDESCRIPTION: This Ruby snippet demonstrates how to add the Kotlin library as a dependency for multiple targets in an Xcode `Podfile`.  It defines separate targets for `iosApp` and `TVosApp`, each with its own platform and deployment target settings. The `pod` directive then specifies the dependency on the Kotlin library for each target, using the relative path to the Kotlin project. This setup enables the Kotlin library to be integrated into both iOS and tvOS applications.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods-xcode.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ntarget 'iosApp' do\n  use_frameworks!\n  platform :ios, '16.0'\n  # Pods for iosApp\n  pod 'kotlin_library', :path => '../kotlin-library'\nend\n\ntarget 'TVosApp' do\n  use_frameworks!\n  platform :tvos, '16.0'\n\n  # Pods for TVosApp\n  pod 'kotlin_library', :path => '../kotlin-library'\nend\n```\n\n----------------------------------------\n\nTITLE: Kotlin Examples for Memory Usage Optimization\nDESCRIPTION: Demonstrates how to use autoreleasepool to prevent growing memory usage when creating temporary objects that cross the Swift/Objective-C interop boundary in a long-running loop.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-arc-integration.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nfun growingMemoryUsage() {\n    repeat(Int.MAX_VALUE) {\n        NSLog(\"$it\\n\")\n    }\n}\n\nfun steadyMemoryUsage() {\n    repeat(Int.MAX_VALUE) {\n        autoreleasepool {\n            NSLog(\"$it\\n\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Array-like Instantiation Functions in Kotlin\nDESCRIPTION: Shows how to use new functions to create List and MutableList instances, initializing each element by calling a lambda function.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew11.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val squares = List(10) { index -> index * index }\n    val mutable = MutableList(10) { 0 }\n\n    println(\"squares: $squares\")\n    println(\"mutable: $mutable\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin/Native TryK2 Build Report Results Example\nDESCRIPTION: This example demonstrates the structure of the Kotlin/Native TryK2 build report results. It shows which tasks were compiled with Kotlin 2.0 and provides an overview of the language version used for each task.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew1920.md#_snippet_22\n\nLANGUAGE: None\nCODE:\n```\n##### 'kotlin.experimental.tryK2' results #####\n:lib:compileCommonMainKotlinMetadata: 2.0 language version\n:lib:compileKotlinJvm: 2.0 language version\n:lib:compileKotlinIosArm64: 2.0 language version\n:lib:compileKotlinIosSimulatorArm64: 2.0 language version\n:lib:compileKotlinLinuxX64: 2.0 language version\n:lib:compileTestKotlinJvm: 2.0 language version\n:lib:compileTestKotlinIosSimulatorArm64: 2.0 language version\n:lib:compileTestKotlinLinuxX64: 2.0 language version\n##### 100% (8/8) tasks have been compiled with Kotlin 2.0 #####\n```\n\n----------------------------------------\n\nTITLE: Applying Kotlin Serialization Plugin in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to apply the Kotlin serialization plugin in a Gradle build script using the Kotlin DSL. It includes the necessary plugin declarations for Kotlin JVM and serialization.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/serialization.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"%kotlinVersion%\"\n    kotlin(\"plugin.serialization\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Member Name Minification (Kotlin)\nDESCRIPTION: This Kotlin snippet disables member name minification in production builds. It is configured within the `build.gradle.kts` file by adding a free compiler argument.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/js/js-ir-compiler.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    js(IR) {\n        compilations.all {\n            compileTaskProvider.configure {\n                compilerOptions.freeCompilerArgs.add(\"-Xir-minimized-member-names=false\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Overriding Open Member with Abstract\nDESCRIPTION: Demonstrates overriding a non-abstract open member with an abstract member. Subclasses of WildShape need to provide their own implementation of the draw() method.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/classes.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class Polygon {\n    open fun draw() {\n        // some default polygon drawing method\n    }\n}\n\nabstract class WildShape : Polygon() {\n    // Classes that inherit WildShape need to provide their own\n    // draw method instead of using the default on Polygon\n    abstract override fun draw()\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Objects by Multiple Criteria in Kotlin using compareBy\nDESCRIPTION: This Kotlin snippet shows how to sort a list of objects based on multiple properties using the `compareBy` function. It defines a `Person` data class. The `persons` list is sorted using `sortedWith` and `compareBy`, specifying the properties (`Person::name`, `Person::age`) directly as arguments to define the primary and secondary sorting criteria.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/java-to-kotlin-collections-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n    val name: String,\n    val age: Int\n)\n\nfun main() {\n    val persons = listOf(Person(\"Jack\", 35), Person(\"David\", 30), \n        Person(\"Jack\", 25))\n    println(persons.sortedWith(compareBy(Person::name, Person::age)))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Floating-Point Variables in Kotlin\nDESCRIPTION: Shows how to initialize Double and Float variables in Kotlin. Demonstrates type inference for fractional numbers and explicit Float specification using the 'f' suffix.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/numbers.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval pi = 3.14          // Double\n\nval one: Double = 1    // Int is inferred\n// Initializer type mismatch\n\nval oneDouble = 1.0    // Double\n```\n\n----------------------------------------\n\nTITLE: Making Regex.replace Function Non-Inline in Kotlin/JS Stdlib\nDESCRIPTION: Explains a source incompatible change in the Kotlin/JS standard library effective from version 1.6.0. The `Regex.replace` function that accepts a functional `transform` parameter will no longer have the `inline` modifier. This can affect code relying on the inlining behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Set CocoaPods installation path in local.properties - Text\nDESCRIPTION: This code snippet shows how to explicitly set the CocoaPods installation path in the `local.properties` file. This can be useful if the default path discovery is inconsistent.  The path should point to the `pod` executable.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/multiplatform/native-cocoapods.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nkotlin.apple.cocoapods.bin=/Users/Jane.Doe/.rbenv/shims/pod\n```\n\n----------------------------------------\n\nTITLE: Tier 1 Platform Support Table\nDESCRIPTION: Details for Tier 1 supported platforms with highest level of testing and compatibility guarantees. Lists Gradle target names, target triples, test running capability, and descriptions for macOS and iOS platforms.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/native/native-target-support.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Gradle target name      | Target triple                 | Running tests | Description                                    |\n|-------------------------|-------------------------------|---------------|------------------------------------------------|\n| Apple macOS hosts only: |                               |               |                                                |\n| `macosX64`              | `x86_64-apple-macos`          | ✅             | Apple macOS on x86_64 platforms                |\n| `macosArm64`            | `aarch64-apple-macos`         | ✅             | Apple macOS on Apple Silicon platforms         |\n| `iosSimulatorArm64`     | `aarch64-apple-ios-simulator` | ✅             | Apple iOS simulator on Apple Silicon platforms |\n| `iosX64`                | `x86_64-apple-ios-simulator`  | ✅             | Apple iOS simulator on x86-64 platforms        |\n| `iosArm64`              | `aarch64-apple-ios`           |               | Apple iOS and iPadOS on ARM64 platforms        |\n```\n\n----------------------------------------\n\nTITLE: Kotlin Multiplatform Source Set Access (Kotlin)\nDESCRIPTION: This Kotlin code demonstrates accessing source sets in a Kotlin Multiplatform project using the new static accessors introduced in Kotlin 2.0.20.  It shows how to configure language settings for `commonMain` and access platform-specific source sets like `jvmMain`, `linuxX64Main`, and `linuxArm64Main`.  It also highlights the warning issued when accessing a source set without declaring the corresponding target.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/whatsnew/whatsnew2020.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    jvm()\n    linuxX64()\n    linuxArm64()\n    mingwX64()\n  \n    sourceSets {\n        commonMain.languageSettings {\n            progressiveMode = true\n        }\n\n\n        jvmMain { }\n        linuxX64Main { }\n        linuxArm64Main { }\n        // Warning: accessing source set without registering the target\n        iosX64Main { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Write DataFrame to JSON File in Kotlin\nDESCRIPTION: This code snippet demonstrates how to save the `refinedMoviesDf` DataFrame to a JSON file named `movies.json`. It utilizes the `writeJson()` function from the Kotlin DataFrame library.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/data-analysis/data-analysis-work-with-data-sources.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nrefinedMoviesDf.writeJson(\"movies.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class, Singleton, and Main Function in Kotlin\nDESCRIPTION: This snippet demonstrates creating a data class 'Employee', a singleton object 'MyCompany', and a main function that instantiates an Employee and prints it. It showcases Kotlin's concise syntax for defining classes and objects.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/kotlin-features/concise.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Employee(\n   val name: String,\n   val email: String,\n   val company: String\n) // + automatically generated equals(), hashCode(), toString(), and copy()\n\nobject MyCompany {                                // A singleton\n   const val name: String = \"MyCompany\"\n}\n\nfun main() {                                      // Function at the top level\n   val employee = Employee(\"Alice\",               // No `new` keyword\n      \"alice@mycompany.com\", MyCompany.name)\n   println(employee)\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Allowing Exposure of Private Nested Types from Private-in-File Types (Kotlin)\nDESCRIPTION: This Kotlin compiler flag disables the error introduced in Kotlin 1.6 that prohibits exposing private nested types and inner classes from types marked as private-in-file. It allows temporarily reverting to the pre-1.6 behavior.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/compatibility-guides/compatibility-guide-16.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n-XXLanguage:-PrivateInFileEffectiveVisibility\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Range in Kotlin\nDESCRIPTION: This snippet demonstrates various ways to iterate over a range in Kotlin. It showcases closed-ended ranges (inclusive), open-ended ranges (exclusive), stepping, counting down, and using `forEach`.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/idioms.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfor (i in 1..100) { ... }  // closed-ended range: includes 100\nfor (i in 1..<100) { ... } // open-ended range: does not include 100\nfor (x in 2..10 step 2) { ... }\nfor (x in 10 downTo 1) { ... }\n(1..10).forEach { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Database Properties in Kotlin\nDESCRIPTION: This configuration snippet specifies database connection details such as driver, URL, and credentials in a `application.properties` file. It points to an H2 database, detailing the schema initialization settings. Dependencies include the H2 database driver. Proper setup is necessary for connecting and configuring the database correctly in the application.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/jvm/jvm-spring-boot-using-crudrepository.md#2025-04-22_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nspring.application.name=demo\nspring.datasource.driver-class-name=org.h2.Driver\nspring.datasource.url=jdbc:h2:file:./data/testdb2\nspring.datasource.username=name\nspring.datasource.password=password\nspring.sql.init.schema-locations=classpath:schema.sql\nspring.sql.init.mode=always\n\n```\n\n----------------------------------------\n\nTITLE: Safely handling standard input in Kotlin\nDESCRIPTION: Shows how to safely handle user input using methods like toIntOrNull() and readlnOrNull() which return null instead of throwing exceptions when input is invalid or the end of input is reached.\nSOURCE: https://github.com/jetbrains/kotlin-web-site/blob/master/docs/topics/read-standard-input.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Returns null if the input is invalid. For example: Hello!\nval wrongInt = readln().toIntOrNull()\nprintln(wrongInt)\n// null\n\n// Converts a valid input from a string to an integer. For example: 13\nval correctInt = readln().toIntOrNull()\nprintln(correctInt)\n// 13\n```"
  }
]