[
  {
    "owner": "schultek",
    "repo": "dart_mappable",
    "content": "TITLE: Basic Dart Mappable Class Definition\nDESCRIPTION: Example showing how to define a basic mappable class with the required annotation and mixin\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// This file is \"model.dart\"\nimport 'package:dart_mappable/dart_mappable.dart';\n\n// Will be generated by dart_mappable\npart 'model.mapper.dart';\n\n@MappableClass()\nclass MyClass with MyClassMappable {\n  final int myValue;\n\n  MyClass(this.myValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Person Model Implementation with dart_mappable\nDESCRIPTION: Shows a typical model class implementation using dart_mappable with required fields and optional static factory methods for deserialization.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/models.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// This file is \"model.dart\"\nimport 'package:dart_mappable/dart_mappable.dart';\n\n// required: associates our `models.dart` with the code generated by dart_mappable\npart 'model.mapper.dart';\n\n@MappableClass()\nclass Person with PersonMappable {\n  \n  const Person({\n    required this.firstName, \n    required this.lastName, \n    required this.age,\n  });\n\n  final String firstName;\n  final String lastName;\n  final int age;\n\n  // optional: links deserialization factories from the generated [PersonMapper] class\n  static final fromMap = PersonMapper.fromMap;\n  static final fromJson = PersonMapper.fromJson;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Mappers\nDESCRIPTION: Example demonstrating how to use the generated mapper classes and mixin methods\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Decode a [Map] using the [MyClassMapper] class:\n  MyClass myClass = MyClassMapper.fromMap({'myValue': 123});\n  \n  // Or decode directly from json:\n  MyClass myClass2 = MyClassMapper.fromJson('{\"myValue\": 123}');\n  \n  // Encode an instance of your class using the methods provided by the mixin:\n  Map<String, dynamic> map = myClass.toMap();\n  String json = myClass.toJson();\n  \n  // There are also implementations generated for [operator ==], [hashCode] and [toString]:\n  bool thisIsTrue = (myClass == myClass2);\n  print(myClass);\n  \n  // Last you can use [copyWith] to create a copy of an object:\n  MyClass myClass3 = myClass.copyWith(myValue: 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic MapperContainer Usage with Class Mappers\nDESCRIPTION: Shows how to use MapperContainer with two example classes A and B, demonstrating initialization, container creation, mapper usage, and container linking.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/container.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Suppose we have two classes and their respective mappers\nclass A {}\nclass B {}\n\nclass AMapper extends MapperBase<A> {} // generated\nclass BMapper extends MapperBase<B> {} // generated\n\nvoid main() {\n  \n  AMapper.ensureInitialized();\n  \n  // succeeds - AMapper was added to the globals container.\n  MapperContainer.globals.toJson(A());\n  \n  // fails - B is not initialized yet.\n  MapperContainer.globals.toJson(A());\n\n  BMapper.ensureInitialized();\n  \n  // creates a new empty container\n  var containerX = MapperContainer();\n\n  // fails - no mappers were added yet\n  containerX.toJson(A());\n\n  // succeeds - added the respective mapper\n  containerX.use(AMapper());\n  containerX.toJson(A());\n  \n  var containerY = MapperContainer();\n  containerY.use(BMapper());\n\n  // succeeds - added the respective mapper\n  containerY.toJson(B());\n  // fails - missing mapper for type A\n  containerY.toJson(A());\n  \n  // links containerX to containerY\n  containerY.link(containerX);\n\n  // succeeds - mapper is resolved through linked containerX\n  containerY.toJson(A());\n  \n  // fails - linking is one-directional\n  containerX.toJson(B());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mappable Classes and Enums\nDESCRIPTION: Examples of various annotations and configurations for mappable classes and enums\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass MyClass with MyClassMappable { ... }\n\n@MappableEnum()\nenum MyEnum { ... }\n```\n\n----------------------------------------\n\nTITLE: Full Type-Agnostic Serialization and Deserialization Cycle in Dart\nDESCRIPTION: A complete example of serializing and deserializing objects without knowing their type at compile time, showcasing how dart_mappable preserves type information through the __type field.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/generics.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Initializes all required mappers (see section above)\n  initializeMappers();\n  \n  dynamic someObject = ...;\n  \n  String json = MapperContainer.globals.toJson(someObject);\n  \n  // do something in between, or even send the json between server and client\n  \n  dynamic newObject = MapperContainer.globals.fromJson(json);\n  \n  assert(someObject.runtimeType == newObject.runtimeType);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dart_mappable Dependencies\nDESCRIPTION: Shell commands to add dart_mappable and its required dependencies to a Flutter project\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub add dart_mappable\nflutter pub add build_runner --dev\nflutter pub add dart_mappable_builder --dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Typeless Deserialization with __type Field in Dart\nDESCRIPTION: Example of typeless deserialization where the type information is embedded in the JSON data via a __type field. This allows deserializing objects without knowing their type at compile time.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/generics.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {  \n  // Initializes all required mappers (see section above)\n  initializeMappers();\n  \n  var json = '{\"__type\": \"Person\", \"name\": \"Bob\"}';\n  \n  // notice the static type 'dynamic', no 'Person.fromJson' or 'container.fromJson<Person>' needed\n  dynamic object = MapperContainer.globals.fromJson(json);\n  \n  // this is actually a [Person] instance\n  assert(object.runtimeType == Person);\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects with Type Information in Dart\nDESCRIPTION: Demonstrates how to use dart_mappable to serialize objects with type information included, showing different scenarios where the __type field is added automatically based on type parameters.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/generics.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Initializes all required mappers (see section above)\n  initializeMappers();\n  \n  // this will encode normal without '__type'\n\n  MapperContainer.globals.toValue<MyClass>>(myClassInstance);\n  MapperContainer.globals.toValue(MyClass()); // works because of type inference\n  MapperContainer.globals.toValue<MyGenericClass<int>>(myGenericClassInstance);\n\n  // this will add the '__type' property\n\n  MapperContainer.globals.toValue<dynamic>(myClassInstance);\n  MapperContainer.globals.toValue(someDynamicVariable); // where type inference does not work\n  MapperContainer.globals.toValue<MyGenericClass<dynamic>(myGenericClassInstance); // because the instance has a specific type\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleMapper for Uri Type in Dart\nDESCRIPTION: Example of creating a custom mapper for the Uri type by extending SimpleMapper and implementing decode and encode methods. The decode method parses a string into a Uri, while the encode method converts a Uri to a string.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass UriMapper extends SimpleMapper<Uri> {\n  const UriMapper();\n  \n  @override\n  Uri decode(dynamic value) {\n    return Uri.parse(value as String);\n  }\n\n  @override\n  dynamic encode(Uri self) {\n    return self.toString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using UnmappedPropertiesHook to Capture Additional JSON Fields\nDESCRIPTION: Example showing how to use the built-in UnmappedPropertiesHook to collect any properties from the JSON that aren't explicitly mapped to class fields into a separate Map field.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/hooks.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass(hook: UnmappedPropertiesHook('unmappedProps'))\nclass Game with GameMappable{\n  String id;\n  Map<String, dynamic> unmappedProps;\n\n  Game(this.id, this.unmappedProps);\n}\n\nvoid main() {\n  Game game = GameMapper.fromJson('{\"id\": 1, \"type\": \"pacman\", \"score\": 100}');\n  print(game.id); // 1\n  print(game.unmappedProps); // {type: pacman, score: 100}\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Constructor Usage Examples\nDESCRIPTION: Demonstrates various constructor patterns for handling default values, ignored fields, renamed arguments, and computed values.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/models.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass Person with PersonMappable {\n  String name;\n  int age;\n    \n  // basic example, nothing special going on\n  Person.base(this.name, this.age);\n  \n  // setting default values for some parameters\n  Person.opt(this.name, [this.age = 18]);\n\n  // renamed argument, will be {\"years\": ...} in json\n  Person.renamed(this.name, int years) : age = years;\n  \n  // ignores the age field completely\n  Person.ignored(this.name);\n \n  // computed name value\n  Person.computed(String firstName, String lastName, this.age) : name = '$firstName $lastName';\n  // IMPORTANT: have matching getters for all unassigned arguments, reversing the computed value (*)\n  String get firstName => name.split(' ')[0];\n  String get lastName => name.split(' ')[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mapper via Class Annotation in Dart\nDESCRIPTION: Shows how to add a custom mapper to a class using the MappableClass annotation. The includeCustomMappers property globally registers the custom mapper for use with all models when the class is initialized.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass(includeCustomMappers: [UriMapper()])\nclass Domain {\n  final Uri uri;\n\n  const Domain(this.uri);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleMapper for Generic Types in Dart\nDESCRIPTION: Example of creating a custom mapper for a generic class using SimpleMapper1. Includes implementation of decode and encode methods with generic type parameters and a typeFactory for handling generic type construction.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass GenericBox<T> {\n  T content;\n  \n  GenericBox(this.content);\n}\n\nclass CustomBoxMapper extends SimpleMapper1<GenericBox> {\n\n  @override\n  // use the type parameter [T] in the return type [GenericBox<T>]\n  GenericBox<T> decode<T>(dynamic value) { \n    // use the type parameter [T] in your decoding logic\n    T content = container.fromValue<T>(value);\n    return GenericBox<T>(container.fromValue<T>(value)); \n  }\n\n  @override\n  // use the type parameter [T] in the parameter type [GenericBox<T>]\n  dynamic encode<T>(GenericBox<T> self) {\n    // use the type parameter [T] in your encoding logic\n    return container.toValue<T>(self.content); \n  }\n\n  // In case of generic types, we also must specify a type factory. This is a special type of \n  // function used internally to construct generic instances of your type.\n  // Specify any type arguments in alignment to the decode/encode functions.\n  @override\n  Function get typeFactory => <T>(f) => f<GenericBox<T>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Options in build.yaml\nDESCRIPTION: Example showing how to configure global options for dart_mappable in build.yaml including case styles, enum styles, null handling, and method generation.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_options:\n  dart_mappable_builder:\n    options:\n      # the case style for the map keys, defaults to 'none'\n      caseStyle: none # or 'camelCase', 'snakeCase', etc.\n      # the case style for stringified enum values, defaults to 'none'\n      enumCaseStyle: none # or 'camelCase', 'snakeCase', etc.\n      # if true removes all map keys with null values\n      ignoreNull: false # or true\n      # used as property name for type discriminators\n      discriminatorKey: type\n      # used to specify which methods to generate (all by default)\n      generateMethods: [decode, encode, copy, stringify, equals]\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Decoding Function in Dart\nDESCRIPTION: A simple example showing how to implement a generic decoding function using dart_mappable's container system. This demonstrates how types can be provided as type parameters rather than being hardcoded.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/generics.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nT decodeModel<T>(String json) {\n  return container.fromJson<T>();\n}\n```\n\n----------------------------------------\n\nTITLE: Field Annotation for Custom JSON Keys\nDESCRIPTION: Shows how to customize JSON key names for specific fields using the @MappableField annotation.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/models.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass MyClass with MyClassMappable {\n  MyClass(this.value);\n\n  @MappableField(key: 'my_key')\n  String value;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MappingHook Classes in Dart Mappable\nDESCRIPTION: Example showing how to create custom hook classes by extending MappingHook and applying them to a class and field using the hook parameter in MappableClass and MappableField annotations.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/hooks.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass GameHook extends MappingHook {\n  const GameHook();\n}\n\nclass PlayerHook extends MappingHook {\n  const PlayerHook();\n}\n\n@MappableClass(hook: GameHook())\nclass Game {\n  @MappableField(hook: PlayerHook())\n  Player player;\n\n  Game(this.player);\n}\n\nclass Player {\n  String id;\n  Player(this.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Using MappableLib Annotation for Automatic Mapper Initialization in Dart\nDESCRIPTION: Shows how to use the @MappableLib annotation to generate an initializer that discovers and initializes all mappers in a specified scope, eliminating the need to manually call ensureInitialized() for each mapper.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/generics.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableLib(generateInitializerForScope: InitializerScope.package)\nlibrary main;\n```\n\n----------------------------------------\n\nTITLE: Field Key Customization\nDESCRIPTION: Example of customizing JSON keys for fields using MappableField annotation\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass MyClass with MyClassMappable {\n  MyClass(this.value);\n\n  @MappableField(key: 'my_key')\n  String value;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CopyWith Usage in Dart Mappable\nDESCRIPTION: Demonstrates basic usage of copyWith method for modifying class properties while preserving unspecified values and handling null assignments.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/copywith.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass Person with PersonMappable {\n  String name;\n  int? age;\n    \n  Person(this.name, this.age);\n}\n\nvoid main() {\n  var person = Person('Tom', 20);\n\n  // `age` not passed, its value is preserved\n  print(person.copyWith(name: 'Max')); // Person(name: Max, age: 24)\n  // `age` is set to `null`\n  print(person.copyWith(age: null)); // Person(name: Tom, age: null)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Record Fields in dart_mappable\nDESCRIPTION: Example of defining a class with record fields using dart_mappable. The class contains both a positional record field (name) and a named record field (coordinates) that will be automatically included in serialization.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/records.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass Location with LocationMappable {\n  \n  const Location({\n    required this.name,\n    required this.coordinates, \n  });\n\n  final (String, String) name;\n  final ({double lat, double lng}) coordinates;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mappers for Generic Decoding in Dart\nDESCRIPTION: Example of how to properly initialize mappers to support generic decoding. This shows the pattern of creating an initialization function that ensures all required mappers are available before using generic decoding.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/generics.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid initMappers() {\n  PersonMapper.ensureInitialized();\n  CarMapper.ensureInitialized();\n}\n\nvoid main() {\n  // Init all required mappers.\n  initMappers();\n  \n  // You can now call this anywhere.\n  MapperContainer.globals.fromJson<Person>(...);\n  \n  // This won't work, since `ensureInitialize()` wasn't called on `AnimalMapper`.\n  MapperContainer.globals.fromJson<Animal>(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Collections with MapperContainer\nDESCRIPTION: Shows how MapperContainer handles various collection types including Lists, Sets, and generic classes.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/container.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass Dog with DogMappable {\n  String name;\n  Dog(this.name);\n}\n\n@MappableClass()\nclass Box<T> with BoxMappable<T> {\n  T content;\n  Box(this.content);\n}\n\nvoid main() {\n  // Case 1: Simple list.\n  // We use the default container since we only use core types.\n  List<int> nums = MapperContainer.globals.fromJson('[2, 4, 105]');\n  print(nums); // [2, 4, 105]\n\n  // Case 2: Set of objects.\n  // We use the generated container for [Dog], but with a set of objects.\n  DogMapper.ensureInitialized();\n  Set<Dog> dogs = MapperContainer.globals.fromJson('[{\"name\": \"Thor\"}, {\"name\": \"Lasse\"}, {\"name\": \"Thor\"}]');\n  print(dogs); // {Dog(name: Thor), Dog(name: Lasse)}\n\n  // Case 3: More complex lists, like generics.\n  // We use the generated container for [Box], but with a list of generic objects.\n  BoxMapper.ensureInitialized();\n  List<Box<double>> boxes = MapperContainer.globals.fromJson('[{\"content\": 0.1}, {\"content\": 12.34}]');\n  print(boxes); // [Box(content: 0.1), Box(content: 12.34)]\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Copy Implementation with Nested Classes\nDESCRIPTION: Shows how to perform deep copies on nested class structures using dot syntax for accessing nested properties and working with lists.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/copywith.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass Person with PersonMappable {\n  String name;\n\n  Person(this.name);\n}\n\n@MappableClass()\nclass Company with CompanyMappable {\n  Person manager;\n  List<Person> employees;\n  \n  Company(this.manager, this.employees);\n}\n\nvoid main() {\n  var company = Company(Person('Anna'), [Person('Max'), Person('Tom')]);\n  \n  // access nested object using the 'dot' syntax\n  print(company.copyWith.manager(name: 'Laura')); \n  // prints: Company(manager: Person(name: 'Laura'), ...)\n  \n  // this also works with lists or maps\n  print(company.copyWith.employees.at(0)(name: 'John')); \n  // prints: Company(..., employees: [Person(name: 'John), Person(name: 'Tom')])\n  \n  // you can also use 'apply' with a custom function to transform a value\n  print(company.copyWith.manager.apply((manager) => Person(manager.name.toUpperCase())));\n  // prints: Company(manager: Person(name: 'ANNA'), ...)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Declaration with Dart Mappable\nDESCRIPTION: Shows the basic syntax for annotating an enum with @MappableEnum to make it compatible with dart_mappable. By default, enum values are serialized to their names as strings.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/enums.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@MappableEnum()\nenum MyEnum { ... }\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Value Serialization with ValuesMode and MappableValue\nDESCRIPTION: Demonstrates how to customize enum value serialization using ValuesMode.indexed and @MappableValue annotations. This example shows a mixture of indexed values and custom values of different types.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/enums.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@MappableEnum(mode: ValuesMode.indexed)\nenum Status {\n  zero,                         // encodes to 0\n  @MappableValue(200) success,  // encodes to 200\n  @MappableValue('error') error // encodes to 'error'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Mappers for Special Collections in Dart\nDESCRIPTION: Demonstrates using the built-in IterableMapper and MapMapper to handle special collection types like HashSet and HashMap. Shows how to provide factory functions and type factories to convert between standard and specialized collections.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  MapperContainer.globals.use(IterableMapper<HashSet>(\n    <T>(Iterable<T> i) => HashSet.of(i),\n    <T>(f) => f<HashSet<T>>(),\n  ));\n\n  MapperContainer.globals.use(MapMapper<HashMap>(\n    <K, V>(Map<K, V> m) => HashMap.of(m),\n    <K, V>(f) => f<HashMap<K, V>>(),\n  ));\n\n  HashSet<String> brands = MapperContainer.globals.fromJson('[\"Toyota\", \"Audi\", \"Audi\"]');\n  print(String); // {\"Toyota\", \"Audi\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Generation\nDESCRIPTION: Command to generate the mapper code using build_runner\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart pub run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Constructor Selection with MappableConstructor Annotation\nDESCRIPTION: Demonstrates how to specify which constructor should be used for deserialization using the @MappableConstructor annotation.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/models.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass MyClass with MyClassMappable {\n  MyClass(); // Don't use this\n  \n  @MappableConstructor()\n  MyClass.special(); // Use this\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mapper Manually with MapperContainer in Dart\nDESCRIPTION: Demonstrates manually adding a custom mapper to the global mapper container. This approach registers the mapper for all models without needing to use the class annotation method.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Add this as the global [Uri] mapper for all models.\n  MapperContainer.globals.use(UriMapper());\n}\n```\n\n----------------------------------------\n\nTITLE: Using MappingHook for Custom JSON Decoding in Dart\nDESCRIPTION: Example demonstrating how to use the beforeDecode hook method to handle alternative input formats. The PlayerHook converts a string value to a map with an id field before decoding.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/hooks.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass PlayerHook extends MappingHook {\n  const PlayerHook();\n\n  @override\n  Object? beforeDecode(Object? value) {\n    if (value is String) {\n      return {'id': value};\n    }\n    return value;\n  }\n}\n\n...\n\nvoid main() {\n  // This works as usual\n  Game game = GameMapper.fromJson('{\"player\": {\"id\": \"Tom\"}}');\n  print(game.player.id); // Tom;\n\n  // Special case: 'player' is a string instead of an object\n  Game game2 = GameMapper.fromJson('{\"player\": \"John\"}');\n  print(game.player.id); // John\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Container with Custom Mapper\nDESCRIPTION: Demonstrates how to use the defaults container to make a custom mapper available globally to all other containers.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/container.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// suppose we have a class and a custom mapper for it\nclass MyClass {}\nclass MyClassMapper extends SimpleMapper<MyClass> { ... }\n\nvoid main() {\n  \n  var container = MapperContainer();\n  // this doen't work, since the mapper for type [MyClass] wasn't added yet to this container\n  container.toJson(MyClass());\n  \n  // we add the mapper as a global default\n  MapperContainer.defaults.use(MyClassMapper());\n\n  // now this works, since all containers are linked to the default container\n  container.toJson(MyClass());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Custom Mapper with MapperBase in Dart\nDESCRIPTION: Example of implementing a custom mapper by extending the low-level MapperBase class. Shows the structure for full control over decoding, encoding, equality checking, hashing, and string representation with optional override methods.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// extend [MapperBase] and provide your type\nclass MyClassMapper extends MapperBase<MyClass> {\n  \n  // If your type is generic, specify a type factory. Else this can be skipped.\n  @override\n  Function get typeFactory => <T>(f) => f<MyClass<T>>();\n  \n  // all the following overrides are optional\n  \n  @override\n  MyClass decoder(DecodingContext<Object> context) {\n    // your decoding logic here\n    // you can access the encoded value using 'context.value'\n    throw UnimplementedError();\n  }\n  \n  @override\n  Object? encoder(EncodingContext<Object> context) {\n    // your encoding logic here\n    // you can access the decoded value using 'context.value'\n    throw UnimplementedError();\n  }\n  \n  @override\n  bool equals(MappingContext<Object> context, MyClass other) {\n    // your equals logic here\n    throw UnimplementedError();\n  }\n  \n  @override\n  int hash(MappingContext<Object> context) {\n    // your hashcode logic here\n    throw UnimplementedError();\n  }\n\n  @override\n  String stringify(MappingContext<Object> context) {\n    // your stringify logic here\n    throw UnimplementedError();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting a freezed class for dart_mappable compatibility in Dart\nDESCRIPTION: This Dart code shows how to modify a freezed class to make it compatible with dart_mappable. It demonstrates the use of @MappableClass and @MappableField annotations.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/migration.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\npart 'myfile.freezed.dart';\npart 'myfile.mapper.dart';\n\n@freezed\n@MappableClass(discriminatorKey: 'type')\nclass Union with _$Union {\n  @MappableClass(discriminatorValue: 'data')\n  const factory Union.data(@MappableField(key: 'mykey') int value) = Data;\n  @MappableClass(discriminatorValue: 'loading')\n  const factory Union.loading() = Loading;\n  @MappableClass(discriminatorValue: 'error')\n  const factory Union.error([String? message]) = ErrorDetails;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Factory Methods\nDESCRIPTION: Example of adding static factory methods to a mappable class\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with MyClassMappable {\n  ...\n\n static final fromMap = MyClassMapper.fromMap;\n static final fromJson = MyClassMapper.fromJson;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Record Field Serialization with Annotations\nDESCRIPTION: Example of how to customize serialization of record fields by annotating individual components of a record type alias. This allows renaming fields or adding hooks for specific record components.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/records.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@MappableRecord()\ntypedef FullName = (@MappableField(key: 'firstName') String, @MappableField(hook: MyHook()) String);\n```\n\n----------------------------------------\n\nTITLE: Creating SerializableMappers for fast_immutable_collections in Dart\nDESCRIPTION: This Dart code shows how to create SerializableMappers for IList and IMap from the fast_immutable_collections package, enabling compatibility with dart_mappable.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/migration.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal iListMapper = SerializableMapper<IList, dynamic>.arg1(\n  decode: IList.fromJson,\n  encode: (list) => list.toJson,\n  type: <E>(f) => f<IList<E>>(),\n);\n\nfinal iMapMapper = SerializableMapper<IMap, Map<String, dynamic>.arg2(\ndecode: IMap.fromJson,\nencode: (map) => map.toJson,\ntype: <Key, Val>(f) => f<IMap<Key, Val>>(),\n);\n```\n\n----------------------------------------\n\nTITLE: Constructor and Field Annotations\nDESCRIPTION: Examples showing how to use constructor and field annotations\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass MyClass with MyClassMappable {\n  MyClass(); // Don't use this\n\n  @MappableConstructor()\n  MyClass.special(); // Use this\n}\n```\n\n----------------------------------------\n\nTITLE: Library Level Configuration\nDESCRIPTION: Example showing how to configure mappable settings at the library level\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@MappableLib(caseStyle: CaseStyle.camelCase) // will be applied to all classes\nlibrary model;\n\npart 'model.mapper.dart';\n\n@MappableClass() // no need to set caseStyle here\nclass MyClass with MyClassMappable {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Object Merging with CopyWith\nDESCRIPTION: Demonstrates how to merge objects using the copyWith.$merge() extension where non-null properties override existing values.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/copywith.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass A with AMappable {\n  A(this.a, this.b);\n  \n  String? a;\n  String? b;\n}\n\nvoid main() {\n  var a = A('a', null);\n  var b = A(null, 'b');\n  \n  var c = a.copyWith.$merge(b);\n  assert(c == A('a', 'b'));\n}\n```\n\n----------------------------------------\n\nTITLE: Delta Copy Implementation\nDESCRIPTION: Shows how to apply delta changes to objects using copyWith.$delta where map values can override existing properties including setting nulls.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/copywith.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass A with AMappable {\n  A(this.a, this.b, this.c);\n  \n  String? a;\n  String? b;\n  String? c;\n}\n\nvoid main() {\n  var a = A('a', null, 'c');\n  var delta = {'b': 'b', 'c': null};\n  \n  var c = a.copyWith.$delta(delta);\n  assert(c == A('a', 'b', null));\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Record Fields in dart_mappable\nDESCRIPTION: Shows how an instance of a class with record fields is encoded to JSON. Positional record fields are serialized with numeric keys ($1, $2), while named record fields use their field names.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/records.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\n    \"$1\": \"John\",\n    \"$2\": \"Doe\"\n  },\n  \"coordinates\": {\n    \"lat\": 123,\n    \"lng\": 456\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Record Type Aliases with dart_mappable\nDESCRIPTION: Shows how to create record type aliases using annotated typedefs. This enables serialization of standalone record types and improves code readability.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/records.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableRecord()\ntypedef Coordinates = ({double lat, double lng});\n```\n\n----------------------------------------\n\nTITLE: Using Generated Mapper Classes for Record Types\nDESCRIPTION: Demonstrates how to use the generated mapper class and extension methods to serialize and deserialize record types. This works for record aliases that have been annotated with @MappableRecord().\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/records.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Using the generated mapper class.\n  Coordinates coords  = CoordinatesMapper.fromJson('{\"lat\": 123, \"lng\": 456}');\n  \n  // Using the generated extension methods.\n  String json = coords.toJson();\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Iterables with MapperContainer\nDESCRIPTION: Demonstrates using MapperContainer.fromIterable to convert lists of dynamic values to typed lists.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/container.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nList<double> myNumbers = MapperContainer.globals.fromIterable([2.312, '1.32', 500, '1e4']);\nprint(myNumbers); // [2.312, 1.32, 500.0, 10000.0]\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Maps with Non-String Keys\nDESCRIPTION: Shows how to use MapperContainer with maps that have complex objects as keys.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/container.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar encodedMap = {\n  {'name': 'Bonny'}: 1,\n  {'name': 'Clyde'}: 5,\n};\n\nDogMapper.ensureInitialized();\nMap<Dog, int> treatsPerDog = MapperContainer.globals.fromValue(encodedMap);\nprint(treatsPerDog[Dog('Clyde')]!); // 5\n\nvar myMap = MapperContainer.globals.toValue(treatsPerDog);\nprint(myMap); // {{name: Bonny}: 1, {name: Clyde}: 5}\n```\n\n----------------------------------------\n\nTITLE: Creating a SerializableMapper for json_serializable compatibility in Dart\nDESCRIPTION: This Dart code demonstrates how to create a SerializableMapper to make classes using json_serializable compatible with dart_mappable. It includes the setup for both encoding and decoding.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/migration.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // Create a compatibe mapper for your class.\n  var myClassMapper = SerializableMapper<MyClass, Map<String, dynamic>>(\n    // Pass the 'fromJson' method (without parenteses!).\n    decode: MyClass.fromJson,\n    // Pass an arrow function returning the 'toJson' method (without parenteses!).\n    encode: (myClass) => myClass.toJson,\n  );\n  \n  // Make it accessible by all other mappers (Including being used as fields on other classes).\n  MapperContainer.globals.use(myClassMapper);\n}\n```\n\n----------------------------------------\n\nTITLE: Using CopyWith Methods in Dart\nDESCRIPTION: Demonstrates the usage of copyWith methods for merging and updating object instances in Dart.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable_builder/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass A with AMappable {\n  A(this.a, this.b);\n  \n  int? a;\n  int? b;\n}\n\nvoid main() {\n  var a = A(1, null);\n  \n  var c = a.copyWith.$merge(A(null, 2));\n  assert(c == A(1, 2));\n\n  var d = a.copyWith.$delta({'b': 2});\n  assert(d == A(1, 2));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleMapper for Bounded Generic Types in Dart\nDESCRIPTION: Shows how to create a custom mapper for a generic class with bounded type parameters using SimpleMapper1Bounded. The example handles a NumberBox class where type T is constrained to extend num.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/custom.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass NumberBox<T extends num> {\n  NumberBox(this.content);\n\n  final T content;\n}\n\nclass NumberBoxMapper extends SimpleMapper1Bounded<NumberBox, num> {\n  const NumberBoxMapper();\n\n  @override\n  NumberBox<A> decode<A extends num>(Object value) {\n    return NumberBox<A>(container.fromValue<A>(value));\n  }\n\n  @override\n  Object? encode<A extends num>(NumberBox<A> self) {\n    return container.toValue(self.content);\n  }\n\n  @override\n  Function get typeFactory => <T extends num>(f) => f<NumberBox<T>>();\n}\n```\n\n----------------------------------------\n\nTITLE: Object Cloning with CopyWith\nDESCRIPTION: Demonstrates how to use copyWith for object cloning, noting the behavior of equality comparison versus object identity.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/copywith.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nclass Foo with FooMappable {\n  Foo(this.value);\n   \n  final int value;\n}\n\nvoid main() {\n  var foo1 = Foo(1);\n  var foo2 = foo1.copyWith();\n\n  assert(foo1 == foo2);\n  assert(!identical(foo1, foo2));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discriminator Functions in Dart\nDESCRIPTION: Shows how to use custom predicate functions as discriminator values for subclasses in Dart.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable_builder/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@MappableClass()\nabstract class A with AMappable {\n  A();\n}\n\n@MappableClass(discriminatorValue: B.checkType)\nclass B extends A with BMappable {\n  B();\n  \n  /// checks if [value] should be decoded to [B]\n  static bool checkType(value) {\n    return value is Map && value['isB'] == true;\n  }\n}\n\n@MappableClass(discriminatorValue: C.checkType)\nclass C extends A with CMappable {\n  C();\n  \n  /// checks if [value] should be decoded to [C]\n  static bool checkType(value) {\n    return value is Map && value['isWhat'] == 'C';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dart_mappable for json_serializable compatibility in YAML\nDESCRIPTION: This YAML configuration renames dart_mappable methods to match json_serializable naming conventions, facilitating easier migration and compatibility with other packages.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/migration.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_options:\n  dart_mappable_builder:\n    options:\n      # ... other dart_mappable options\n      renameMethods:\n        fromJson: fromJsonString\n        toJson: toJsonString\n        fromMap: fromJson\n        toMap: toJson\n```\n\n----------------------------------------\n\nTITLE: Initializing Mappers in Dart\nDESCRIPTION: Example of initializing mappers in a Dart application using the @MappableLib annotation and generated initializer function.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable_builder/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@MappableLib(generateInitializerForScope: InitializerScope.package)\nlibrary main;\n\nimport 'main.init.dart';\n\nvoid main() {\n  initializeMappers();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using a freezed class adapted for dart_mappable in Dart\nDESCRIPTION: This Dart code demonstrates how to use a freezed class that has been adapted for dart_mappable compatibility. It shows serialization and deserialization examples.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/migration.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var data = Union.data(42);\n\n  var dataJson = data.toJson();\n  print(dataJson); // {\"mykey\":42,\"type\":\"data\"}\n\n  var parsedData = UnionMapper.fromJson(dataJson);\n  print(parsedData); // Union.data(value: 42)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Extensions in build.yaml\nDESCRIPTION: Example demonstrating how to customize the output paths for generated files using build_extensions configuration in build.yaml.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      # only to resolve build_runner conflicts\n      dart_mappable_builder:\n        options:\n          build_extensions:\n            'lib/{{path}}/{{file}}.dart':\n              - 'lib/{{path}}/generated/{{file}}.mapper.dart'\n              - 'lib/{{path}}/generated/{{file}}.init.dart'\n```\n\n----------------------------------------\n\nTITLE: Configuring build order for dart_mappable in YAML\nDESCRIPTION: This YAML configuration ensures dart_mappable code generator runs before other package generators, which is necessary for compatibility with packages like retrofit or chopper.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/migration.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_options:\n  dart_mappable_builder:\n    runs_before:\n      # list the generator packages you depend on, e.g.\n      - retrofit_generator\n      - chopper_generator\n    options:\n      # ... other dart_mappable options, including 'renameMethods'\n```\n\n----------------------------------------\n\nTITLE: Inline Package Reference in Markdown\nDESCRIPTION: Demonstrates the markdown syntax for referencing the dart_mappable package name with code formatting.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable/doc/intro.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`dart_mappable`\n```\n\n----------------------------------------\n\nTITLE: Defining Mappable Records in Dart\nDESCRIPTION: Example of annotating a top-level record typedef for use with dart_mappable.\nSOURCE: https://github.com/schultek/dart_mappable/blob/main/packages/dart_mappable_builder/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@MappableRecord()\ntypedef Coordinates = ({double latitude, double longitude});\n```"
  }
]