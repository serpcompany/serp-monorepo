[
  {
    "owner": "pmndrs",
    "repo": "uikit",
    "content": "TITLE: Creating a Basic Two-Container Layout with React Three UIKit\nDESCRIPTION: Implementation of a simple App component that uses UIKit to create a 3D user interface with two containers arranged horizontally in a Root element. The layout uses flexbox principles and defines sizes in three.js units.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/first-layout.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <OrbitControls />\n      <Root backgroundColor=\"red\" sizeX={8} sizeY={4} flexDirection=\"row\">\n        <Container flexGrow={1} margin={32} backgroundColor=\"green\" />\n        <Container flexGrow={1} margin={32} backgroundColor=\"blue\" />\n      </Root>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber UIKit Dependencies\nDESCRIPTION: NPM installation command for the core dependencies needed to use UIKit with React Three Fiber\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/introduction.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber @react-three/uikit\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for UIKit Layout\nDESCRIPTION: Importing essential components from React Three Fiber, Drei, and UIKit to create a 3D user interface layout.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/first-layout.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport { Root, Container } from '@react-three/uikit'\n```\n\n----------------------------------------\n\nTITLE: Basic UIKit Layout Example with React Three Fiber\nDESCRIPTION: Sample React component demonstrating basic UIKit usage with a Canvas setup and Fullscreen container with two child containers having flex layout and hover effects\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/introduction.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen, Container } from \"@react-three/uikit\";\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <Fullscreen flexDirection=\"row\" padding={10} gap={10}>\n        <Container flexGrow={1} backgroundOpacity={0.5} hover={{ backgroundOpacity: 1 }} backgroundColor=\"red\" />\n        <Container flexGrow={1} backgroundOpacity={0.5} hover={{ backgroundOpacity: 1 }} backgroundColor=\"blue\" />\n      </Fullscreen>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a basic 3D UI with React Three Fiber and uikit\nDESCRIPTION: Example of creating a simple 3D user interface using React Three Fiber and uikit components. It demonstrates a fullscreen layout with two containers that change opacity on hover.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client'\nimport React from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { Fullscreen, Container } from '@react-three/uikit'\n\ncreateRoot(document.getElementById('root')).render(\n  <Canvas>\n    <Fullscreen flexDirection=\"row\" padding={10} gap={10}>\n      <Container flexGrow={1} backgroundOpacity={0.5} hover={{ backgroundOpacity: 1 }} backgroundColor=\"red\" />\n      <Container flexGrow={1} backgroundOpacity={0.5} hover={{ backgroundOpacity: 1 }} backgroundColor=\"blue\" />\n    </Fullscreen>\n  </Canvas>,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Three UIKit\nDESCRIPTION: Command to install the necessary packages for working with React Three UIKit, including Three.js, React Three Fiber, UIKit, and Drei (optional for OrbitControls).\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/first-layout.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i three @react-three/fiber @react-three/uikit @react-three/drei\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for UI Element Sizing\nDESCRIPTION: Comprehensive documentation explaining the relationship between Three.js units and pixel units, including configuration of element sizes through pixelSize, sizeX, and sizeY parameters. Default pixelSize of 0.002 means 500px equals 1 Three.js unit.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/sizing.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Sizing\ndescription: How to size elements and use pixelSize, sizeX, and sizeY.\nnav: 8\n---\n\n**TLDR**: The size of the Root element is defined in three.js units through the optional `sizeX` and `sizeY` parameters. The `pixelSize` parameter allows you to define how big one pixel in the UI is in relation to one three.js unit.\n\n**Important**\n\nThe `pixelSize` should be set so that the default font height (`16px`) is reasonably sized. All pre-built components adhere to this sizing concept.\n\n<details>\n  <summary>In Depth Explanation</summary>\n\n  The root element size is specified in three.js units using the optional `sizeX` and `sizeY` parameters.\n  \n  Declaring the size of elements inside the root element using parameters, such as the `width` of an image or the `fontSize` of a text element, is based on `pixel` units, which strongly relate to the `px` unit in CSS. The relation between three.js units and pixel units can be set using the `pixelSize` property. The property expresses the size of one pixel in three.js units and defaults to `0.002`. With this default, `500px` is equal to 1 three.js unit. To make interoperability between code bases and different component libraries easier, we encourage to use the intuition of pixel sizes from the web. For instance, the default text height relates to 16 pixels. If these pixel sizes appear too small or too high in the szene, the `pixelSize` should be increased or decreased respectively.\n</details>\n```\n\n----------------------------------------\n\nTITLE: Rendering Container Component in React Three Fiber\nDESCRIPTION: Demonstrates the usage of the Container component to wrap children elements and apply background styling. The Container corresponds to an HTML div element and supports flexbox properties.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Container backgroundColor=\"red\">\n  <Text>...</Text>\n  <Image src=\"...\" />\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Installing uikit and dependencies with npm\nDESCRIPTION: Command to install the uikit library along with its required dependencies three and @react-three/fiber using npm.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber @react-three/uikit\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component with React Three Fiber\nDESCRIPTION: A comprehensive example showing how to create a tabbed interface with account and password management functionality using @react-three/uikit-default components. The implementation includes card layouts, form elements, and responsive styling within a 3D canvas.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/tabs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { Button } from \"@react-three/uikit-default\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@react-three/uikit-default\"\nimport { Label } from \"@react-three/uikit-default\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@react-three/uikit-default\"\n\nfunction TabsDemo() {\n  return (\n    <Tabs defaultValue=\"account\" width={400}>\n      <TabsList width=\"100%\">\n        <TabsTrigger flexGrow={1} value=\"account\">\n          <Text>Account</Text>\n        </TabsTrigger>\n        <TabsTrigger flexGrow={1} value=\"password\">\n          <Text>Password</Text>\n        </TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"account\">\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              <Text>Account</Text>\n            </CardTitle>\n            <CardDescription>\n              <Text>Make changes to your account here. Click save when you're done.</Text>\n            </CardDescription>\n          </CardHeader>\n          <CardContent flexDirection=\"column\" gap={8}>\n            <Container flexDirection=\"column\" gap={4}>\n              <Label>\n                <Text>Name</Text>\n              </Label>\n              <Text>Pedro Duarte</Text>\n            </Container>\n            <Container flexDirection=\"column\" gap={4}>\n              <Label>\n                <Text>Username</Text>\n              </Label>\n              <Text>@peduarte</Text>\n            </Container>\n          </CardContent>\n          <CardFooter>\n            <Button>\n              <Text>Save changes</Text>\n            </Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n      <TabsContent value=\"password\">\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              <Text>Password</Text>\n            </CardTitle>\n            <CardDescription>\n              <Text>Change your password here. After saving, you'll be logged out.</Text>\n            </CardDescription>\n          </CardHeader>\n          <CardContent flexDirection=\"column\" gap={8}>\n            <Container flexDirection=\"column\" gap={4}>\n              <Label>\n                <Text>Current password</Text>\n              </Label>\n              <Text>password</Text>\n            </Container>\n            <Container flexDirection=\"column\" gap={4}>\n              <Label>\n                <Text>New password</Text>\n              </Label>\n              <Text>password</Text>\n            </Container>\n          </CardContent>\n          <CardFooter>\n            <Button>\n              <Text>Save password</Text>\n            </Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating 3D Content with Content Component in React Three Fiber\nDESCRIPTION: Demonstrates how to use the Content component to include R3F/Three.js elements in the layout. The Content component allows for 3D objects with configurable z-axis alignment and aspect ratio preservation.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Content width={100}>\n    <Gltf src=\"...\">\n  </Content>\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover and Active States with R3F UIKit\nDESCRIPTION: This example demonstrates how to apply interactive states to a Root element. The element has a default black background that changes to red when hovered and green when clicked (active state).\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/interactivity.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Root\n  backgroundColor=\"black\"\n  hover={{ backgroundColor: 'red' }}\n  active={{ backgroundColor: 'green' }}\n  sizeX={1}\n  sizeY={1}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Images with Image Component in React Three Fiber\nDESCRIPTION: Shows how to use the Image component to display images. It supports URL or three.js texture as source and automatically sets aspect ratio. Additional properties control image fitting and aspect ratio preservation.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Image src=\"example.jpg\" width={100} />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Layout with Root Component in React Three Fiber\nDESCRIPTION: Shows how to use the Root component to start a layout. The Root component has Container properties and additional options for sizing and anchoring in the three.js scene.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Root sizeX={2} sizeY={1} flexDirection=\"row\">\n  <Container flexGrow={1} backgroundColor=\"red\" />\n  <Container flexGrow={1} backgroundColor=\"green\" />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component with React Three Fiber\nDESCRIPTION: A complete implementation of an Accordion component using React Three Fiber and UI Kit. The code demonstrates a fully functional accordion with three items, proper styling, and accessibility features. It includes a Canvas setup with lighting and proper viewport configuration.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/accordion.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@react-three/uikit-default\"\n\n//TODO: type=\"single\" collapsible\nfunction AccordionDemo() {\n  return (\n    <Container flexDirection=\"column\" width={300}>\n      <Accordion>\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger>\n            <Text>Is it accessible?</Text>\n          </AccordionTrigger>\n          <AccordionContent>\n            <Text>Yes. It adheres to the WAI-ARIA design pattern.</Text>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger>\n            <Text>Is it styled?</Text>\n          </AccordionTrigger>\n          <AccordionContent>\n            <Text>Yes. It comes with default styles that matches the other components&apos; aesthetic.</Text>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger>\n            <Text>Is it animated?</Text>\n          </AccordionTrigger>\n          <AccordionContent>\n            <Text>Yes. It&apos;s animated by default, but you can disable it if you prefer.</Text>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><AccordionDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React Three Fiber Canvas\nDESCRIPTION: This snippet demonstrates how to set up a React Three Fiber canvas with a Button component from the UIKit library. It includes Canvas setup, lighting, and a Fullscreen component for layout.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/button.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { ChevronRight } from '@react-three/uikit-lucide'\nimport { Button } from \"@react-three/uikit-default\"\n\nfunction ButtonDemo() {\n  return (\n    <Button variant=\"outline\" size=\"icon\">\n      <ChevronRight width={16} height={16} />\n    </Button>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><ButtonDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fullscreen Layout in React Three Fiber\nDESCRIPTION: Demonstrates the use of the Fullscreen component to create a viewport-bound layout. It automatically sets correct sizing properties on the Root component and supports Container properties.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Fullscreen flexDirection=\"row\">\n  <Container flexGrow={1} backgroundColor=\"red\" />\n  <Container flexGrow={1} backgroundColor=\"green\" />\n</Fullscreen>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Component within React Three Fiber\nDESCRIPTION: A complete example showing how to implement the Input component from uikit-apfel in a React Three Fiber application. The code demonstrates setting up a Canvas with proper configurations, using the Input component inside a Card, and managing input state with React hooks.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/input.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Input } from \"@react-three/uikit-apfel\"\nimport { useState } from 'react'\n\nfunction InputsOnCard() {\n  const [text, setText] = useState('')\n  return (\n    <Card flexDirection=\"column\" borderRadius={32} padding={16}>\n      <Input value={text} onValueChange={setText} variant=\"rect\" placeholder=\"Placeholder\" />\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <InputsOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Layouts with Conditional Properties in React Three Fiber UIKit\nDESCRIPTION: Demonstrates how to use conditional properties to create responsive layouts in UIKit. This example shows a layout that changes from column to row orientation when the screen size reaches the medium (md) breakpoint.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Fullscreen flexDirection=\"column\" md={{ flexDirection: 'row' }}>\n  <Container flexGrow={1} backgroundColor=\"red\" />\n  <Container flexGrow={1} backgroundColor=\"green\" />\n</Fullscreen>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic UI with UIKit in Three.js\nDESCRIPTION: A complete example demonstrating how to set up a basic UI with two containers using UIKit in Three.js. The containers are horizontally aligned and change opacity when hovered. The code includes camera setup, scene creation, renderer configuration, and animation loop implementation.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/uikit/README.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PerspectiveCamera, Scene, WebGLRenderer } from 'three'\nimport { reversePainterSortStable, Container, Root } from '@pmndrs/uikit'\n\nconst camera = new PerspectiveCamera(70, 1, 0.01, 100)\ncamera.position.z = 10\n\nconst scene = new Scene()\n\nconst canvas = document.getElementById('root') as HTMLCanvasElement\n\nconst renderer = new WebGLRenderer({ antialias: true, canvas })\n\nconst root = new Root(camera, renderer, {\n    flexDirection: \"row\",\n    padding: 10,\n    gap: 10,\n    width: 1000,\n    height: 500\n})\nscene.add(root)\nconst c1 = new Container({\n    flexGrow: 1,\n    backgroundOpacity: 0.5,\n    hover: { backgroundOpacity: 1 }\n    backgroundColor: \"red\"\n})\nroot.add(c1)\nconst c2 = new Container({\n    flexGrow: 1,\n    backgroundOpacity: 0.5,\n    hover: { backgroundOpacity: 1 },\n    backgroundColor: \"blue\"\n})\nroot.add(c2)\n\nrenderer.setAnimationLoop(animation)\nrenderer.localClippingEnabled = true\nrenderer.setTransparentSort(reversePainterSortStable)\n\nfunction updateSize() {\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  renderer.setPixelRatio(window.devicePixelRatio)\n  camera.aspect = window.innerWidth / window.innerHeight\n  camera.updateProjectionMatrix()\n}\n\nupdateSize()\nwindow.addEventListener('resize', updateSize)\n\nlet prev: number | undefined\nfunction animation(time: number) {\n  const delta = prev == null ? 0 : time - prev\n  prev = time\n\n  root.update(delta)\n\n  renderer.render(scene, camera)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group Component in React Three Fiber\nDESCRIPTION: A complete React Three Fiber application demonstrating how to implement a Radio Group component with multiple selectable options. The example includes proper Canvas setup, UI container configuration with Fullscreen component, and a RadioGroupDemo with three radio options (Default, Comfortable, and Compact).\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/radio-group.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text } from '@react-three/uikit'\nimport { Label } from \"@react-three/uikit-default\"\nimport { RadioGroup, RadioGroupItem } from \"@react-three/uikit-default\"\n\nfunction RadioGroupDemo() {\n  return (\n    <RadioGroup defaultValue=\"comfortable\">\n      <RadioGroupItem value=\"default\">\n        <Label>\n          <Text>Default</Text>\n        </Label>\n      </RadioGroupItem>\n      <RadioGroupItem value=\"comfortable\">\n        <Label>\n          <Text>Comfortable</Text>\n        </Label>\n      </RadioGroupItem>\n      <RadioGroupItem value=\"compact\">\n        <Label>\n          <Text>Compact</Text>\n        </Label>\n      </RadioGroupItem>\n    </RadioGroup>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><RadioGroupDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Container with Breakpoints in React JSX\nDESCRIPTION: This code defines a Container component that changes its layout orientation based on the viewport width. It uses a column layout by default and switches to a row layout when the viewport exceeds the 'md' breakpoint (768px).\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/responsive.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Container\n    flexDirection=\"column\"\n    md={{ flexDirection: \"row\" }}\n>\n```\n\n----------------------------------------\n\nTITLE: Complete UIKit Interactive Element Example in React\nDESCRIPTION: A complete React component that renders a Canvas with an interactive Root element from UIKit. The example shows how to set up the Canvas with proper configuration for UIKit and implement interactive states on a UI element.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/interactivity.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Root, Container } from \"@react-three/uikit\";\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <OrbitControls />\n      <Root\n        backgroundColor=\"black\"\n        hover={{ backgroundColor: 'red' }}\n        active={{ backgroundColor: 'green' }}\n        sizeX={1}\n        sizeY={1}\n    />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font with FontFamilyProvider (React TSX)\nDESCRIPTION: This React TSX code snippet demonstrates how to use the FontFamilyProvider component to implement a custom font (Roboto) with different weights (medium and bold) in a UI Kit application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-fonts.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<FontFamilyProvider\n  roboto={{\n    medium: \"url-to-medium.json\",\n    bold: \"url-to-bold.json\",\n  }}\n>\n  <Text fontFamily=\"roboto\">Test123</Text>\n</FontFamilyProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Notification Card with React Three Fiber and UIKIT\nDESCRIPTION: A complete example of creating a notification card interface using React Three Fiber with the UIKIT library. The component displays a list of notifications with toggle switches and formatting options, all rendered within a 3D Canvas.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/card.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { BellRing, Check } from '@react-three/uikit-lucide'\nimport { colors } from \"@react-three/uikit-default\"\nimport { Button } from \"@react-three/uikit-default\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@react-three/uikit-default\"\nimport { Switch } from \"@react-three/uikit-default\"\n\nconst notifications = [\n  {\n    title: 'Your call has been confirmed.',\n    description: '1 hour ago',\n  },\n  {\n    title: 'You have a new message!',\n    description: '1 hour ago',\n  },\n  {\n    title: 'Your subscription is expiring soon!',\n    description: '2 hours ago',\n  },\n]\n\nfunction CardDemo() {\n  return (\n    <Card width={380}>\n      <CardHeader>\n        <CardTitle>\n          <Text>Notifications</Text>\n        </CardTitle>\n        <CardDescription>\n          <Text>You have 3 unread messages.</Text>\n        </CardDescription>\n      </CardHeader>\n      <CardContent flexDirection=\"column\" gap={16}>\n        <Container flexDirection=\"row\" alignItems=\"center\" gap={16} borderRadius={6} borderWidth={1} padding={16}>\n          <BellRing />\n          <Container flexDirection=\"column\" gap={4}>\n            <Text fontSize={14} lineHeight=\"100%\">\n              Push Notifications\n            </Text>\n            <Text fontSize={14} lineHeight={20} color={colors.mutedForeground}>\n              Send notifications to device.\n            </Text>\n          </Container>\n          <Switch />\n        </Container>\n        <Container flexDirection=\"column\">\n          {notifications.map((notification, index) => (\n            <Container\n              key={index}\n              marginBottom={index === notifications.length - 1 ? 0 : 16}\n              paddingBottom={index === notifications.length - 1 ? 0 : 16}\n              alignItems=\"flex-start\"\n              flexDirection=\"row\"\n              gap={17}\n            >\n              <Container height={8} width={8} transformTranslateY={4} borderRadius={1000} backgroundColor={0x0ea5e9} />\n              <Container flexDirection=\"column\" gap={4}>\n                <Text fontSize={14} lineHeight=\"100%\">\n                  {notification.title}\n                </Text>\n                <Text fontSize={14} lineHeight={20} color={colors.mutedForeground}>\n                  {notification.description}\n                </Text>\n              </Container>\n            </Container>\n          ))}\n        </Container>\n      </CardContent>\n      <CardFooter>\n        <Button flexDirection=\"row\" width=\"100%\">\n          <Check marginRight={8} height={16} width={16} />\n          <Text>Mark all as read</Text>\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><CardDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component in React Three Fiber UIKit\nDESCRIPTION: A complete implementation of a React Three Fiber application using the Alert component from the UIKit Default package. The example creates a fullscreen canvas with a styled alert containing an icon, title, and description.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/alert.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text } from '@react-three/uikit'\nimport { Terminal } from '@react-three/uikit-lucide'\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@react-three/uikit-default\"\n\nfunction AlertDemo() {\n  return (\n    <Alert maxWidth={500}>\n      <AlertIcon>\n        <Terminal width={16} height={16} />\n      </AlertIcon>\n      <AlertTitle>\n        <Text>Error</Text>\n      </AlertTitle>\n      <AlertDescription>\n        <Text>You can add components to your app using the cli.</Text>\n      </AlertDescription>\n    </Alert>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><AlertDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Component in React Three Fiber\nDESCRIPTION: This snippet shows a complete React component implementing a Video element within a React Three Fiber canvas. It uses various components from @react-three/uikit and @react-three/uikit-default to create a fullscreen layout with a video player.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/video.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Video } from \"@react-three/uikit-default\"\n\nfunction VideoDemo() {\n  return (\n    <Video\n      crossOrigin=\"anonymous\"\n      src=\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n      controls\n      width={500}\n    />\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><VideoDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component with React Three Fiber\nDESCRIPTION: A complete implementation of a Dialog component with edit profile functionality. The component includes a trigger button, dialog content with header, form fields, and footer. Uses React Three Fiber Canvas and various UI components from @react-three/uikit-default.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/dialog.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { Button } from \"@react-three/uikit-default\"\nimport { Label } from \"@react-three/uikit-default\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@react-three/uikit-default\"\n\nfunction DialogDemo() {\n  return (\n    <Dialog>\n      <DialogTrigger>\n        <Button variant=\"outline\">\n          <Text>Edit Profile</Text>\n        </Button>\n      </DialogTrigger>\n      <DialogContent sm={{ maxWidth: 425 }}>\n        <DialogHeader>\n          <DialogTitle>\n            <Text>Edit profile</Text>\n          </DialogTitle>\n          <DialogDescription>\n            <Text>Make changes to your profile here. Click save when you're done.</Text>\n          </DialogDescription>\n        </DialogHeader>\n        <Container flexDirection=\"column\" alignItems=\"center\" gap={16} paddingY={16}>\n          <Container alignItems=\"center\" gap={16}>\n            <Label>\n              <Text textAlign=\"right\">Name</Text>\n            </Label>\n          </Container>\n          <Container alignItems=\"center\" gap={16}>\n            <Label>\n              <Text textAlign=\"right\">Username</Text>\n            </Label>\n          </Container>\n        </Container>\n        <DialogFooter>\n          <Button>\n            <Text>Save changes</Text>\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><DialogDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in React Three Fiber\nDESCRIPTION: A complete example showing how to implement a tooltip UI component in a React Three Fiber application. The implementation includes a Canvas setup with proper rendering configuration, the Defaults provider, and a tooltip demo component that displays text on hover.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/tooltip.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text } from '@react-three/uikit'\nimport { Button } from \"@react-three/uikit-default\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@react-three/uikit-default\"\n\nfunction TooltipDemo() {\n  return (\n    <Tooltip>\n      <TooltipTrigger>\n        <Button variant=\"outline\">\n          <Text>Hover</Text>\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <Text>Add to library</Text>\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><TooltipDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UI Layout with Root and Containers\nDESCRIPTION: Defines the UI layout structure using Root element and Container components with flex properties and styling.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/vanilla.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = new Root(camera, renderer, undefined, {\n    flexDirection: \"row\",\n    padding: 10,\n    gap: 10\n})\nscene.add(root)\n\nconst defaultProperties = {\n    backgroundOpacity: 0.5,\n}\n\nconst container1 = new Container(\n    {\n        flexGrow: 1,\n        hover: { backgroundOpacity: 1 }\n        backgroundColor: \"red\"\n    },\n    defaultProperties\n)\nroot.add(container1)\n\nconst container2 = new Container(\n    {\n        flexGrow: 1,\n        backgroundOpacity: 0.5,\n        hover: { backgroundOpacity: 1 },\n        backgroundColor: \"blue\"\n    },\n    defaultProperties\n)\nroot.add(container2)\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Implementation with React Three Fiber\nDESCRIPTION: A complete implementation of an Alert Dialog component using @react-three/uikit-default. The code demonstrates a dialog with a trigger button, header, description, and action buttons, all rendered within a 3D Canvas environment.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/alert-dialog.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text } from '@react-three/uikit'\nimport { Button } from \"@react-three/uikit-default\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@react-three/uikit-default\"\n\nfunction AlertDialogDemo() {\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger>\n        <Button variant=\"outline\">\n          <Text>Show Dialog</Text>\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>\n            <Text>Are you absolutely sure?</Text>\n          </AlertDialogTitle>\n          <AlertDialogDescription>\n            <Text>\n              This action cannot be undone. This will permanently delete your account and remove your data from our\n              servers.\n            </Text>\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>\n            <Text>Cancel</Text>\n          </AlertDialogCancel>\n          <AlertDialogAction>\n            <Text>Continue</Text>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Label Component Implementation with React Three Fiber\nDESCRIPTION: A complete React Three Fiber application showcasing the Label component implementation with Checkbox in a 3D canvas. The code sets up a fullscreen canvas with proper lighting and includes UI components from @react-three/uikit-default.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/label.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { Checkbox } from \"@react-three/uikit-default\"\nimport { Label } from \"@react-three/uikit-default\"\n\nfunction LabelDemo() {\n  return (\n    <Container flexDirection=\"row\" gap={8} alignItems=\"center\">\n      <Checkbox />\n      <Label>\n        <Text>Accept terms and conditions</Text>\n      </Label>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><LabelDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SuspendingImage for Controlled Image Loading in React Three Fiber\nDESCRIPTION: Demonstrates the use of SuspendingImage component with React Suspense for controlled image loading behavior. It allows displaying a fallback component while the image is loading.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Suspense fallback={\n    <Container width={200} aspectRatio={1} alignItems=\"center\" justifyContent=\"center\">\n      <LoadingSpinner/>\n    </Container>\n  }\n>\n  <SuspendingImage src=\"...\" width={200}>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tabs Component with React Three Fiber UI Kit\nDESCRIPTION: This code demonstrates a complete React Three Fiber application that implements a tabbed interface using the Apfel UI kit. It shows how to structure tabs within a card, set default values, and configure the rendering environment.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/tabs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Text } from '@react-three/uikit'\nimport { BoxSelect } from '@react-three/uikit-lucide'\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Tabs, TabsButton } from \"@react-three/uikit-apfel\"\n\nfunction TabsOnCard() {\n  return (\n    <Card borderRadius={32} padding={16} flexDirection=\"column\" alignItems=\"flex-start\" gapRow={16}>\n      <Tabs defaultValue=\"1\">\n        <TabsButton value=\"1\">\n          <Text>Label</Text>\n        </TabsButton>\n        <TabsButton value=\"2\">\n          <Text>Label</Text>\n        </TabsButton>\n        <TabsButton value=\"3\">\n          <Text>Label</Text>\n        </TabsButton>\n        <TabsButton value=\"4\">\n          <Text>Long Label</Text>\n        </TabsButton>\n        <TabsButton value=\"5\" disabled>\n          <Text>Disabled</Text>\n        </TabsButton>\n      </Tabs>\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <TabsOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component in React Three Fiber\nDESCRIPTION: A complete implementation of an Avatar component within a React Three Fiber Canvas. The code sets up necessary lighting, styling, and structure to properly display an Avatar with a sample image URL. It demonstrates proper usage of Container, Fullscreen, and DialogAnchor components.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/avatar.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Container } from '@react-three/uikit'\nimport { Avatar } from \"@react-three/uikit-default\"\n\nfunction AvatarDemo() {\n  return (\n    <Container alignItems=\"center\">\n      <Avatar src=\"https://picsum.photos/100/100\" />\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><AvatarDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying an Inline SVG Icon with React in pmndrs/uikit\nDESCRIPTION: This snippet shows how to use the Icon component to display an inline SVG icon. The Icon component requires the SVG source code as text and the dimensions of the SVG viewport.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Icon text=\"...\" svgWidth={16} svgHeight={16} width={20} />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Checkbox Demo with React Three Fiber\nDESCRIPTION: This snippet demonstrates how to set up a 3D canvas using React Three Fiber and implement a checkbox component with a label. It utilizes various components from @react-three/uikit and @react-three/uikit-default libraries to create a fullscreen, scrollable interface.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/checkbox.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { Checkbox } from \"@react-three/uikit-default\"\nimport { Label } from \"@react-three/uikit-default\"\n\nfunction CheckboxDemo() {\n  return (\n    <Container flexDirection=\"row\" gap={8} alignItems=\"center\">\n      <Checkbox />\n      <Label>\n        <Text>Accept terms and conditions</Text>\n      </Label>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><CheckboxDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme to React Three Fiber Canvas\nDESCRIPTION: This code creates a 3D canvas using React Three Fiber and applies the custom theme to a Button component. It sets the preferred color scheme to light and renders a red button with text inside the 3D scene.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/advanced/theming.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Root, Text, setPreferredColorScheme } from \"@react-three/uikit\";\nimport { createRoot } from \"react-dom/client\";\nimport { Button } from \"./components/button\";\nimport { Defaults } from \"./components/theme\";\n\nsetPreferredColorScheme(\"light\");\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <Canvas camera={{ position: [0, 0, 0.5] }}>\n    <OrbitControls />\n    <Root>\n      <Defaults>\n        <Button>\n          <Text>I am red.</Text>\n        </Button>\n      </Defaults>\n    </Root>\n  </Canvas>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bold Input Field with React in pmndrs/uikit\nDESCRIPTION: This example shows how to use the Input component, which extends the Text component, to create a bold input field with a default value. The Input component allows for text formatting and user interaction.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Input fontWeight=\"bold\" defaultValue=\"Hello World\" />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component Demo in React Three Fiber\nDESCRIPTION: A complete implementation showing how to set up a Switch component with proper Canvas configuration, lighting, and layout containers. Includes dependency setup and styling configuration for both light and dark themes.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/switch.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text, Container } from '@react-three/uikit'\nimport { Label } from \"@react-three/uikit-default\"\nimport { Switch } from \"@react-three/uikit-default\"\n\nfunction SwitchDemo() {\n  return (\n    <Container flexDirection=\"row\" alignItems=\"center\" gap={8}>\n      <Switch />\n      <Label>\n        <Text>Airplane Mode</Text>\n      </Label>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><SwitchDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React Three Fiber with UIKit Apfel\nDESCRIPTION: This code snippet demonstrates how to create a React component that renders various Button components from the Apfel kit within a Card layout. It showcases different button variants including icon, rectangular, and disabled buttons with varying sizes.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/button.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Container, Text } from '@react-three/uikit'\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Button } from \"@react-three/uikit-apfel\"\nimport { BoxSelect } from '@react-three/uikit-lucide'\n\nfunction ButtonsOnCard() {\n  return (\n    <Container flexDirection=\"column\" md={{ flexDirection: 'row' }} alignItems=\"center\" gap={32}>\n      <Card borderRadius={32} padding={16}>\n        <Container flexDirection=\"column\" justifyContent=\"space-between\" alignItems=\"center\" gapRow={16}>\n          <Button variant=\"icon\" size=\"xs\">\n            <BoxSelect />\n          </Button>\n          <Button variant=\"rect\" size=\"sm\" platter>\n            <Text>Label</Text>\n          </Button>\n          <Button variant=\"rect\" size=\"lg\" disabled>\n            <Text>Label</Text>\n          </Button>\n        </Container>\n      </Card>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <ButtonsOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Pointer Events in Vanilla UI Kit\nDESCRIPTION: Example of manually dispatching pointer events to UI elements for interactivity in the vanilla version of UI Kit.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/vanilla.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuiElement.dispatchEvent({\n    type: 'pointerover',\n    distance: 0,\n    nativeEvent: {} as any,\n    object: x,\n    point: new Vector3(),\n    pointerId: -1,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Component with React Three Fiber\nDESCRIPTION: A complete example showing how to set up a Progress component within a React Three Fiber Canvas. The code demonstrates state management for progress updates and proper component hierarchy with Defaults and Fullscreen containers.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/progress.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { useEffect, useState } from 'react'\nimport { Progress } from \"@react-three/uikit-default\"\n\nfunction ProgressDemo() {\n  const [progress, setProgress] = useState(13)\n\n  useEffect(() => {\n    const timer = setTimeout(() => setProgress(66), 500)\n    return () => clearTimeout(timer)\n  }, [])\n\n  return <Progress value={progress} width={200} />\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><ProgressDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in React Three Fiber with UIKit\nDESCRIPTION: This code demonstrates a complete implementation of a pagination UI within a React Three Fiber Canvas. It uses various pagination-related components from @react-three/uikit-default to create a navigation interface with previous/next buttons, numbered pages, and ellipsis for skipped page numbers.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/pagination.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text } from '@react-three/uikit'\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@react-three/uikit-default\"\n\nfunction PaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationPrevious />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink>\n            <Text>1</Text>\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink isActive>\n            <Text>2</Text>\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink>\n            <Text>3</Text>\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationEllipsis />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><PaginationDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Material Class\nDESCRIPTION: Extension of MeshPhongMaterial class to create a custom material with specific specular and shininess properties for enhanced visual effects\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-materials.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nclass FancyMaterial extends MeshPhongMaterial {\n  constructor() {\n    super({\n      specular: 0x111111,\n      shininess: 100,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Component in React Three Fiber\nDESCRIPTION: A complete example showing how to set up a React Three Fiber canvas with a UIKit Slider component. The example includes configuration for Canvas, Fullscreen layout, and a simple SliderDemo component with customizable properties.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/slider.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Slider } from \"@react-three/uikit-default\"\n\nfunction SliderDemo() {\n  return <Slider defaultValue={50} max={100} step={1} width={300} />\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><SliderDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Checkbox Interface with React Three Fiber\nDESCRIPTION: Demonstrates setting up a 3D canvas with checkbox components inside a card layout. Includes configuration for lighting, defaults, and fullscreen container with scroll capabilities. Shows both disabled and enabled checkbox states.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/checkbox.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Checkbox } from \"@react-three/uikit-apfel\"\n\nfunction CheckboxOnCard() {\n  return (\n    <Card borderRadius={32} padding={16} flexDirection=\"column\" gapRow={16}>\n      <Checkbox disabled defaultSelected={false} />\n      <Checkbox defaultSelected={true} />\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <CheckboxOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n```\n\n----------------------------------------\n\nTITLE: Converting Tailwind Border Radius to uikit\nDESCRIPTION: Demonstrates how to convert Tailwind's border radius classes to uikit's equivalent pixel values, using the specific example of rounded-md being converted to borderRadius={6}.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-tailwind.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nborderRadius={6}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Component in React Three Fiber Application\nDESCRIPTION: A complete example showing how to implement the Toggle component from the @react-three/uikit-default package within a React Three Fiber application. The example includes setting up the Canvas with proper GL properties, using the Defaults wrapper, and implementing a toggle button with a Bold icon.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/toggle.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Bold } from '@react-three/uikit-lucide'\nimport { Toggle } from \"@react-three/uikit-default\"\n\nfunction ToggleDemo() {\n  return (\n    <Toggle>\n      <Bold height={16} width={16} />\n    </Toggle>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><ToggleDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Skeleton Component Demo in React Three Fiber\nDESCRIPTION: A complete example showing how to set up a Skeleton component demo with React Three Fiber. Includes Canvas setup, lighting, and a demo component showcasing different Skeleton variations with customizable dimensions and styling.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/skeleton.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Container } from '@react-three/uikit'\nimport { Skeleton } from \"@react-three/uikit-default\"\n\nfunction SkeletonDemo() {\n  return (\n    <Container flexDirection=\"row\" alignItems=\"center\" gap={16}>\n      <Skeleton borderRadius={1000} height={48} width={48} />\n      <Container flexDirection=\"column\" gap={8}>\n        <Skeleton height={16} width={250} />\n        <Skeleton height={16} width={200} />\n      </Container>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><SkeletonDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing UIKit with npm\nDESCRIPTION: Command to install the Three.js and @pmndrs/uikit packages using npm.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/uikit/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @pmndrs/uikit\n```\n\n----------------------------------------\n\nTITLE: React Three Fiber Application with Slider Components\nDESCRIPTION: A complete React Three Fiber application that demonstrates different slider sizes and configurations within a card layout. The application includes a custom component SlidersOnCard that renders sliders of various sizes with optional icons and default values.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/slider.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Container } from '@react-three/uikit'\nimport { BoxSelect } from '@react-three/uikit-lucide'\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Slider } from \"@react-three/uikit-apfel\"\n\nfunction SlidersOnCard() {\n  return (\n    <Card\n      borderRadius={32}\n      padding={16}\n      flexDirection=\"column\"\n      md={{ flexDirection: 'row' }}\n      gapColumn={16}\n      gapRow={32}\n    >\n      <Container flexDirection=\"column\" gapRow={16} width={250}>\n        <Slider size=\"xs\" defaultValue={25} />\n        <Slider size=\"sm\" defaultValue={50} />\n        <Slider size=\"md\" defaultValue={75} icon={<BoxSelect />} />\n        <Slider size=\"lg\" defaultValue={100} icon={<BoxSelect />} />\n      </Container>\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <SlidersOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab-bar Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to create a custom TabBarWithText component using the TabBar and TabBarItem components from @react-three/uikit-apfel. It sets up a tab bar with four items, each containing an icon and a text label.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/tab-bar.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TabBarWithText() {\n  return (\n    <TabBar defaultValue=\"1\">\n      <TabBarItem value=\"1\" icon={<BoxSelect />}>\n        <Text>Label</Text>\n      </TabBarItem>\n      <TabBarItem value=\"2\" icon={<BoxSelect />}>\n        <Text>Label</Text>\n      </TabBarItem>\n      <TabBarItem value=\"3\" icon={<BoxSelect />}>\n        <Text>Label</Text>\n      </TabBarItem>\n      <TabBarItem value=\"4\" icon={<BoxSelect />}>\n        <Text>Label</Text>\n      </TabBarItem>\n    </TabBar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component from UIKit Default\nDESCRIPTION: This snippet shows how to import the Button component from the @react-three/uikit-default package. This import is necessary to use the Button component in your React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/button.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Button } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars with React Three Fiber using uikit-apfel\nDESCRIPTION: This code demonstrates how to create a 3D interface with multiple progress bars using React Three Fiber and the Progress component from uikit-apfel. The example shows progress bars with different values (0, 0.25, 0.5, 0.75, 1) rendered inside a Card component within a fullscreen 3D canvas.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/progress.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Progress } from \"@react-three/uikit-apfel\"\n\nfunction ProgressBarsOnCard() {\n  return (\n    <Card width={200} borderRadius={32} padding={16} flexDirection=\"column\" gapRow={16}>\n      <Progress value={0} />\n      <Progress value={0.25} />\n      <Progress value={0.5} />\n      <Progress value={0.75} />\n      <Progress value={1} />\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <ProgressBarsOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Component in React Three Fiber\nDESCRIPTION: This snippet shows a complete React component using the List and ListItem components from @react-three/uikit-apfel. It demonstrates creating a list within a Card component, with various list item configurations including subtitles, trailing accessories, and selected states.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Text, Container } from '@react-three/uikit'\nimport { BoxSelect, ChevronRight, Info } from '@react-three/uikit-lucide'\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { List, ListItem } from \"@react-three/uikit-apfel\"\nimport { Button } from \"@react-three/uikit-apfel\"\n\nfunction ListsOnCard() {\n  return (\n    <Container flexDirection=\"column\" gapRow={32} alignItems=\"center\">\n      <Container flexDirection=\"column\" md={{ flexDirection: 'row' }} gap={32}>\n        <Card flexDirection=\"column\" borderRadius={32} padding={16}>\n          <List type=\"plain\" width={400}>\n            <ListItem\n              subtitle={<Text>Subtitle</Text>}\n              trailingAccessory={<ChevronRight height={18} width={18} opacity={0.3} />}\n            >\n              <Text>Title</Text>\n            </ListItem>\n            <ListItem trailingAccessory={<ChevronRight height={18} width={18} opacity={0.3} />}>\n              <Text>Title</Text>\n            </ListItem>\n            <ListItem\n              subtitle={<Text>Subtitle</Text>}\n              selected\n              trailingAccessory={<ChevronRight height={18} width={18} opacity={0.3} />}\n            >\n              <Text>Title</Text>\n            </ListItem>\n          </List>\n        </Card>\n      </Container>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <ListsOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component from UIKit Default\nDESCRIPTION: The basic import statement needed to use the Input component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/input.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Input } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle-group Component in React Three Fiber\nDESCRIPTION: Full implementation example of a Toggle-group component within a React Three Fiber Canvas. The code demonstrates creating a group of toggle buttons for text formatting controls (bold, italic, underline) using the UIKit Default package along with Lucide icons.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/toggle-group.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Bold, Italic, Underline } from '@react-three/uikit-lucide'\nimport { ToggleGroup, ToggleGroupItem } from \"@react-three/uikit-default\"\n\nfunction ToggleGroupDemo() {\n  return (\n    <ToggleGroup>\n      <ToggleGroupItem aria-label=\"Toggle bold\">\n        <Bold height={16} width={16} />\n      </ToggleGroupItem>\n      <ToggleGroupItem aria-label=\"Toggle italic\">\n        <Italic height={16} width={16} />\n      </ToggleGroupItem>\n      <ToggleGroupItem aria-label=\"Toggle underline\">\n        <Underline width={16} height={16} />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><ToggleGroupDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Component with React Three Fiber\nDESCRIPTION: A complete example showing how to set up an Input component within a React Three Fiber Canvas. It demonstrates proper positioning, styling, and context providers needed for the Input to work correctly.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/input.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Input } from \"@react-three/uikit-default\"\n\nfunction InputDemo() {\n  return <Input width={200} placeholder=\"Email\" />\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><InputDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component from React Three UIKit Default\nDESCRIPTION: A simple import statement showing how to import the Slider component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/slider.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Slider } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Separator Component in React Three Fiber\nDESCRIPTION: A complete example showcasing how to set up a 3D UI with the Separator component using React Three Fiber and uikit. It demonstrates both horizontal and vertical separators in a layout with text elements.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/separator.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { DefaultProperties, Text, Container } from '@react-three/uikit'\nimport { colors } from \"@react-three/uikit-default\"\nimport { Separator } from \"@react-three/uikit-default\"\n\nfunction SeparatorDemo() {\n  return (\n    <Container width={300} flexDirection=\"column\">\n      <Container flexDirection=\"column\" gap={4}>\n        <Text fontSize={14} lineHeight=\"100%\">\n          Radix Primitives\n        </Text>\n        <Text fontSize={14} lineHeight={20} color={colors.mutedForeground}>\n          An open-source UI component library.\n        </Text>\n      </Container>\n      <Separator marginY={16} />\n      <Container flexDirection=\"row\" height={20} alignItems=\"center\" gap={16}>\n        <DefaultProperties fontSize={14} lineHeight={20}>\n          <Text>Blog</Text>\n          <Separator orientation=\"vertical\" />\n          <Text>Docs</Text>\n          <Separator orientation=\"vertical\" />\n          <Text>Source</Text>\n        </DefaultProperties>\n      </Container>\n    </Container>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><SeparatorDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Text in React Three Fiber\nDESCRIPTION: A complete React Three Fiber application that demonstrates how to use the Card component from the Apfel kit. It showcases a card with custom styling containing text elements in a 3D Canvas environment.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/card.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Text } from '@react-three/uikit'\nimport { Card } from \"@react-three/uikit-apfel\"\n\nfunction TextOnCard() {\n  return (\n    <Card borderRadius={32} padding={32} gap={8} flexDirection=\"column\">\n      <Text fontSize={32}>Hello World!</Text>\n      <Text fontSize={24} opacity={0.7}>\n        This is the apfel kit.\n      </Text>\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <TextOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component\nDESCRIPTION: Simple import statement showing how to import the Tabs component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/tabs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Tabs } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Creating Portals with Portal Component in React Three Fiber\nDESCRIPTION: Shows how to use the Portal component to render children into a render target displayed on its surface. The Portal's size is controlled through flexbox properties and its resolution is determined by the dpr property.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Portal width={200} aspectRatio={1}>\n    <mesh>\n      <boxGeometry />\n      <meshBasicMaterial color=\"red\" />\n    </mesh>\n  </Portal>\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Properties for Child Components in React Three Fiber UIKit\nDESCRIPTION: Demonstrates how to use the DefaultProperties component to override default properties for all children, similar to CSS inheritance. This allows explicitly expressing which properties are inherited by child components.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <DefaultProperties color=\"red\" fontWeight=\"bold\">\n    <Text>1</Text>\n    <Container>\n      <Text>2</Text>\n    </Container>\n    <Text>3</Text>\n  </DefaultProperties>\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component\nDESCRIPTION: Basic import statement showing how to import the Switch component from the UI kit default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/switch.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Switch } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Managing Color Schemes for Light and Dark Modes in React Three Fiber UIKit\nDESCRIPTION: Shows how to control and respond to color scheme preferences using UIKit's color scheme functions. Demonstrates setting a preferred scheme and creating theme objects that change based on the active color scheme.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nsetPreferredColorScheme(\"light\")\n\nconst theme = basedOnPreferredColorScheme({\n  light: {\n    primary: \"red\"\n  },\n  dark: {\n    primary: \"green\"\n  }\n})\n\n<Container backgroundColor={theme.primary} width={100} height={100} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Families with FontFamilyProvider in React Three Fiber\nDESCRIPTION: Shows how to use the FontFamilyProvider component to specify font families for child components. Requires MSDF-compiled font textures and JSON glyph information for proper rendering.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<FontFamilyProvider\n  roboto={{\n    light: 'url-to-json',\n    medium: 'url-to-json',\n    bold: 'url-to-json',\n  }}\n  otherFont={{...}}\n>\n  {...children}\n</FontFamilyProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing the Toggle Component\nDESCRIPTION: The command for importing the Toggle component from the @react-three/uikit-default package. This is the basic import statement needed to use the Toggle component in your React application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/toggle.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Toggle } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Material Panels with CustomContainer in React Three Fiber\nDESCRIPTION: Shows how to use the CustomContainer component to integrate a 2D panel with a custom material into the UI. The component provides complete control over the panel material without instancing.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <CustomContainer width={200} height={200}>\n    <shaderMaterial fragmentShader=\"\" vertexShader=\"\" />\n  </CustomContainer>\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Spinners in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to create a React component that renders a card with three loading spinners of different sizes using the Loading component from @react-three/uikit-apfel. It's set up within a Three.js scene using React Three Fiber.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/loading.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults } from \"@react-three/uikit-apfel\";\nimport { Card } from \"@react-three/uikit-apfel\"\nimport { Loading } from \"@react-three/uikit-apfel\"\n\nfunction LoadingSpinnersOnCard() {\n  return (\n    <Card borderRadius={32} padding={16} flexDirection=\"row\" gapColumn={16}>\n      <Loading size=\"sm\" />\n      <Loading size=\"md\" />\n      <Loading size=\"lg\" />\n    </Card>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <LoadingSpinnersOnCard />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component from @react-three/uikit-default\nDESCRIPTION: This snippet shows how to import the Badge component from the @react-three/uikit-default package. This import is necessary to use the Badge component in your React Three Fiber project.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/badge.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Badge } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Videos with Video Component in React Three Fiber\nDESCRIPTION: Demonstrates the use of the Video component to display videos. It supports various properties for video setup and playback control, and can even play media streams.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Video src=\"example.mp4\" autoplay width={100} />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to set up a React Three Fiber canvas and use the Badge component from @react-three/uikit-default. It includes canvas configuration, lighting setup, and the implementation of a BadgeDemo component.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/badge.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\nimport { Fullscreen } from \"@react-three/uikit\";\nimport { Defaults, DialogAnchor } from \"@react-three/uikit-default\";\nimport { Text } from '@react-three/uikit'\nimport { Badge } from \"@react-three/uikit-default\"\n\nfunction BadgeDemo() {\n  return (\n    <Badge>\n      <Text>Badge</Text>\n    </Badge>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <DialogAnchor><BadgeDemo /></DialogAnchor>\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Label Component Import Statement\nDESCRIPTION: Basic import statement for the Label component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/label.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Label } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Bold Text with React in pmndrs/uikit\nDESCRIPTION: This snippet demonstrates how to use the Text component to render bold text within a Root container. The Text component inherits properties from the Container component and allows for text styling.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Text fontWeight=\"bold\">Hello World!</Text>\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Rendering an SVG Image with React in pmndrs/uikit\nDESCRIPTION: This code demonstrates how to use the Svg component to render an SVG file within a Root container. The Svg component allows for styling and transformation of the SVG appearance.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/components-and-properties.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Root>\n  <Svg src=\"...\" width={100} />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Import Statement\nDESCRIPTION: Basic import statement for the Dialog component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/dialog.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Dialog } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for React Three UI Kit\nDESCRIPTION: Essential imports needed for setting up a React Three Fiber scene with UI Kit components and Three.js materials\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-materials.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport { Root, Text } from '@react-three/uikit'\nimport { MeshPhongMaterial } from 'three'\n```\n\n----------------------------------------\n\nTITLE: Setting up React Three Fiber Canvas with Apfel UI Kit\nDESCRIPTION: This snippet shows the main App component setup, including the React Three Fiber Canvas configuration, lighting, and integration of the custom TabBarWithText component within a fullscreen layout using components from @react-three/uikit and @react-three/uikit-apfel.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/tab-bar.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return (\n    <Canvas style={{ position: \"absolute\", inset: \"0\", touchAction: \"none\" }} gl={{ localClippingEnabled: true }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[-5, 5, 10]} />\n      <Defaults>\n        <Fullscreen\n          overflow=\"scroll\"\n          scrollbarColor=\"black\"\n          backgroundColor=\"white\"\n          dark={{ backgroundColor: \"black\" }}\n          flexDirection=\"column\"\n          gap={32}\n          paddingX={32}\n          alignItems=\"center\"\n          padding={32}\n        >\n          <TabBarWithText />\n        </Fullscreen>\n      </Defaults>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component from @react-three/uikit-default\nDESCRIPTION: This snippet shows how to import the Video component from the @react-three/uikit-default package. This import is necessary to use the Video component in your React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/video.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Video } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Three.js Scene with UI Kit\nDESCRIPTION: Initial setup of Three.js scene including camera, renderer, and basic dependencies for UI Kit implementation.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/vanilla.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PerspectiveCamera, Scene, WebGLRenderer } from 'three'\nimport { reversePainterSortStable, Container, Root } from '@pmndrs/uikit'\n\nconst camera = new PerspectiveCamera(70, 1, 0.01, 100)\ncamera.position.z = 10\nconst scene = new Scene()\nconst canvas = document.getElementById('root') as HTMLCanvasElement\nconst renderer = new WebGLRenderer({ antialias: true, canvas })\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MSDF Fonts with React Three Fiber UIKit\nDESCRIPTION: Example showing how to import the Inter font from @pmndrs/msdfonts package and use it with the FontFamilyProvider component in React Three Fiber UIKit.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/msdfonts/README.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { inter } from '@pmndrs/msdfonts'\n\n;<FontFamilyProvider inter={inter}>{...children}</FontFamilyProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component from UIKit Default\nDESCRIPTION: A simple import statement showing how to import the Pagination component from the @react-three/uikit-default package. This is the basic requirement to use the pagination functionality in a React Three Fiber project.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/pagination.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Pagination } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Inlining MSDF Texture in JSON (TypeScript)\nDESCRIPTION: This TypeScript script generates an MSDF font and inlines the texture data as a base64-encoded string in the JSON file. It uses the msdf-bmfont-xml package and handles file writing asynchronously.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-fonts.md#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { writeFile } from \"fs/promises\";\nimport generateBMFont from \"msdf-bmfont-xml\";\n\nconst charset =\n  \"'|Wj@$()[]{}/\\\\w%MQm0fgipqy!#&123456789?ABCDEFGHIJKLNOPRSTUVXYZbdhkl;t<>aceos:nruvxz~+=_^*-\\\"\\'`,`. €£\";\n\ngenerateBMFont(\n  \"src/assets/fonts/Inter-Bold.woff\",\n  {\n    smallSize: true,\n    charset,\n    outputType: \"json\",\n  },\n  async (\n    error: Error | undefined,\n    textures: { filename: string; texture: Buffer }[],\n    font: { filename: string; data: string }\n  ) => {\n    if (error) {\n      throw error;\n    }\n    const pages = await Promise.all(\n      textures.map((texture) => \"data:image/png;base64,\" + texture.texture.toString(\"base64\"))\n    );\n    const json = JSON.parse(font.data);\n\n    json.pages = pages;\n    await writeFile(font.filename, JSON.stringify(json));\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring three.js Canvas for Clipping in uikit\nDESCRIPTION: This code demonstrates how to configure a three.js Canvas to support visual clipping in uikit. The localClippingEnabled option must be set to true in the gl props of the Canvas component.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/scroll.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas gl={{ localClippingEnabled: true }}>\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component\nDESCRIPTION: Shows how to import the Progress component from the UIKit default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/progress.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Progress } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Generating MSDF Font with msdf-bmfont\nDESCRIPTION: This bash command uses msdf-bmfont to convert a TTF file to MSDF format, generating a JSON file and a texture. It specifies the charset, output dimensions, and font size.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-fonts.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx msdf-bmfont -f json fixed-roboto.ttf -i charset.txt -m 256,512 -o public/roboto -s 48\n```\n\n----------------------------------------\n\nTITLE: Modifying Primary Color in Theme File\nDESCRIPTION: This snippet shows how to modify the primary color in the theme file generated by the uikit cli. It changes the primary color to red for the light color scheme.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/advanced/theming.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const colors = basedOnPreferredColorScheme({\n  light: {\n    ...\n    primary: \"red\"\n    ...\n  },\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component for React Three Fiber\nDESCRIPTION: A simple import statement showing how to import the Avatar component from the @react-three/uikit-default package for use in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/avatar.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Avatar } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Updated Font Families Declaration in uikit\nDESCRIPTION: Demonstrates the new syntax for declaring font families in uikit, which now uses a nested object structure with normal and bold properties instead of separate properties for each weight variant.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-koestlich.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FontFamilies roboto={{ normal: \"{url}\", bold: \"{url}\" }}>\n```\n\n----------------------------------------\n\nTITLE: Animating UIKit Container Opacity with ref.current.setStyle\nDESCRIPTION: This snippet demonstrates how to animate a Container's background opacity on every frame using ref.current.setStyle to avoid React re-renders. It uses useFrame from @react-three/fiber to update the opacity based on elapsed time.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/advanced/performance.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from '@react-three/uikit'\nimport { useMemo } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport { signal } from '@preact/signals-core'\n\nexport function AnimateBackground() {\n    const ref = useRef()\n    useFrame(({ clock }) => {\n        //continuously animate between 0 and 1\n        ref.current.setStyle({ opacity: Math.sin(clock.getElapsedTime()) / 2 + 0.5 })\n    })\n    return <Container ref={ref} backgroundOpacity={0}></Container>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component from React Three UI Kit Apfel\nDESCRIPTION: Simple import statement for the Slider component from the @react-three/uikit-apfel package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/slider.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { Slider } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Updated Font Usage in Text Components\nDESCRIPTION: Demonstrates how to apply fonts in uikit using the new fontFamily and fontWeight properties instead of specifying both in the fontFamily property as was done in Koestlich.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-koestlich.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontFamily=\"roboto\" fontWeight=\"bold\">\n```\n\n----------------------------------------\n\nTITLE: Animating UIKit Container Opacity with Signals\nDESCRIPTION: This snippet shows how to animate a Container's background opacity using signals from @preact/signals-core. This approach allows modifying component properties without React's property diffing, similar to react-spring.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/advanced/performance.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from '@react-three/uikit'\nimport { useMemo } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport { signal } from '@preact/signals-core'\n\nexport function AnimateBackground() {\n    const opacity = useMemo(() => signal(0), []);\n    useFrame(({ clock }) => {\n        //continuously animate between 0 and 1\n        opacity.value = Math.sin(clock.getElapsedTime()) / 2 + 0.5\n    })\n    return <Container backgroundOpacity={opacity}></Container>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Card Component\nDESCRIPTION: A basic import statement showing how to import the Card component from the Apfel UI kit package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/card.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Card } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Converting Tailwind Padding to uikit\nDESCRIPTION: Shows how to convert Tailwind's padding values (e.g., p-3) to uikit's pixel-based system by multiplying the Tailwind value by 4.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-tailwind.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\npadding={16}\n```\n\n----------------------------------------\n\nTITLE: Correct Async Content Implementation in UIKit\nDESCRIPTION: Shows the proper implementation of asynchronous content where the Suspense boundary wraps the Content component, ensuring correct measurement of content when loaded.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/advanced/pitfalls.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Suspense>\n    <Content>\n        <Gltf src=\"...\">\n    </Content>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Previous Font Families Declaration in Koestlich\nDESCRIPTION: Shows the old syntax for declaring font families in Koestlich for comparison, where each font weight had its own dedicated property.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-koestlich.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FontFamilies robotoNormal=\"url\" robotoBold=\"bold\">\n```\n\n----------------------------------------\n\nTITLE: Object to Content Migration Pattern\nDESCRIPTION: Demonstrates the complete pattern for migrating from the Object component to the Content component in uikit, including proper handling of nested objects.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-koestlich.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Content>\n    <primitive object={...}>\n<Content>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Material in React Component\nDESCRIPTION: React component setup showing how to use the custom FancyMaterial with Text component, including styling properties and border effects\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-materials.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return (\n    <Canvas>\n      <OrbitControls />\n      <Root>\n        <Text\n          backgroundColor=\"black\"\n          color=\"white\"\n          padding={24}\n          borderRadius={32}\n          fontSize={32}\n          borderColor=\"black\"\n          borderBend={0.3}\n          borderWidth={8}\n          panelMaterialClass={FancyMaterial}\n        >\n          I look fancy\n        </Text>\n      </Root>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Font Overlaps with FontForge (Linux)\nDESCRIPTION: This bash command uses FontForge to remove overlaps from a TTF font file, which is necessary to prevent artifacts when converting to MSDF format.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-fonts.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfontforge -lang=ff -c 'Open($1); SelectAll(); RemoveOverlap(); Generate($2)' roboto.ttf fixed-roboto.ttf\n```\n\n----------------------------------------\n\nTITLE: Animation Loop and Renderer Setup\nDESCRIPTION: Implementation of the animation loop, window resize handling, and renderer configuration for UI Kit.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/vanilla.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrenderer.setAnimationLoop(animation)\nrenderer.localClippingEnabled = true\nrenderer.setTransparentSort(reversePainterSortStable)\n\nfunction updateSize() {\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  renderer.setPixelRatio(window.devicePixelRatio)\n  camera.aspect = window.innerWidth / window.innerHeight\n  camera.updateProjectionMatrix()\n}\n\nupdateSize()\nwindow.addEventListener('resize', updateSize)\n\nlet prev: number | undefined\nfunction animation(time: number) {\n  const delta = prev == null ? 0 : time - prev\n  prev = time\n  root.update(delta)\n  renderer.render(scene, camera)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout with Example Links in Markdown\nDESCRIPTION: This snippet demonstrates how to create a responsive grid layout in Markdown, showcasing multiple examples of uikit implementations with linked images. It uses custom Markdown syntax for grid creation and image linking.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/examples.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Grid cols={2}>\n  <li>\n    [![Screenshot from Card example](./example-card.png)](https://pmndrs.github.io/uikit/examples/card/)\n  </li>\n  <li>\n    [![Screenshot from Dashboard example](./example-dashboard.png)](https://pmndrs.github.io/uikit/examples/dashboard/)\n  </li>\n  <li>\n    [![Screenshot from Market example](./example-market.png)](https://pmndrs.github.io/uikit/examples/market/)\n  </li>\n  <li>\n    [![Screenshot from Lucide example](./example-lucide.png)](https://pmndrs.github.io/uikit/examples/lucide/)\n  </li>\n  <li>\n    [![Screenshot from Auth example](./example-auth.png)](https://pmndrs.github.io/uikit/examples/auth/)\n  </li>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for pmndrs/uikit\nDESCRIPTION: Commands to install dependencies, generate necessary files, and build the libraries for the pmndrs/uikit project. This setup requires Node.js and PNPM version 10 to be installed.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm -r convert\npnpm -r generate\npnpm -r build\n```\n\n----------------------------------------\n\nTITLE: Running Example Applications in pmndrs/uikit\nDESCRIPTION: Commands to run the dashboard example application locally for development testing. This allows developers to see their changes in action within a sample implementation.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/dashboard\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Migrating Object Component to Content Component in React Three Fiber\nDESCRIPTION: Shows how to replace the deprecated Object component with the new Content component in uikit. This allows any R3F component to be placed inside, using the primitive object pattern to maintain similar functionality.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-koestlich.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Content>\n    <primitive object={'...'}>\n</Content>\n```\n\n----------------------------------------\n\nTITLE: Building MSDF Fonts with Docker (ARM Architecture)\nDESCRIPTION: Docker commands for building MSDF fonts on ARM architecture systems like Apple M-series chips. Includes platform specification for compatibility.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/msdfonts/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docker-volume\ndocker build . --platform linux/x86_64 -t msdfonts\ndocker run -v ./docker-volume:/data/:rw -e GOOGLE_FONTS_API_KEY='<insert-api-key>'  --platform linux/x86_64 msdfonts\n```\n\n----------------------------------------\n\nTITLE: Example Charset for MSDF Font Generation\nDESCRIPTION: This is a sample charset file containing characters to be included in the MSDF font generation process.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/tutorials/custom-fonts.md#2025-04-14_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n !\\\"#$%&'()*+,-./0123456789:;<=>?@ÄÖÜABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`äöüabcdefghijklmnopqrstuvwxyz{|}~ß§\n```\n\n----------------------------------------\n\nTITLE: Building MSDF Fonts with Docker (Standard Architecture)\nDESCRIPTION: Docker commands for building MSDF fonts on standard x86/x64 architecture systems. Requires a Google Fonts API key to download fonts.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/msdfonts/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docker-volume\ndocker build . -t msdfonts\ndocker run -v ./docker-volume:/data/:rw -e GOOGLE_FONTS_API_KEY='<insert-api-key>' msdfonts\n```\n\n----------------------------------------\n\nTITLE: Previous Font Usage in Koestlich\nDESCRIPTION: Shows the old way of applying fonts in Koestlich where the font family and weight were combined in a single property.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/migration/from-koestlich.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontFamily=\"robotoBold\">\n```\n\n----------------------------------------\n\nTITLE: Installing @react-three/uikit-lucide Package\nDESCRIPTION: Command to install the @react-three/uikit-lucide package via npm, which adds Lucide icons support to the React Three Fiber UI toolkit.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/icons/lucide/react/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @react-three/uikit-lucide\n```\n\n----------------------------------------\n\nTITLE: HTML Template Setup\nDESCRIPTION: Basic HTML template for setting up the Three.js canvas with proper viewport settings.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/vanilla.md#2025-04-14_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script type=\"module\" src=\"index.jsx\"></script>\n  </head>\n  <body style=\"margin: 0;\">\n    <div id=\"root\" style=\"width: 100dvw; height: 100dvh;\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing @pmndrs/uikit-lucide Package with npm\nDESCRIPTION: Command to install the @pmndrs/uikit-lucide package via npm to integrate Lucide icons with v3/uikit.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/packages/icons/lucide/vanilla/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @pmndrs/uikit-lucide\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Import Statement\nDESCRIPTION: Simple import statement showing how to import the Alert-dialog component from @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/alert-dialog.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Alert-dialog } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup in UI Kit\nDESCRIPTION: Example of proper resource cleanup by destroying UI elements.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/getting-started/vanilla.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nroot.destroy()\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle-group Component\nDESCRIPTION: Simple import statement for the Toggle-group component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/toggle-group.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Toggle-group } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component from UIKit Default\nDESCRIPTION: A simple import statement showing how to import the Alert component from the @react-three/uikit-default package. This is the basic requirement for using the Alert in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/alert.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Alert } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Async Content Implementation in UIKit\nDESCRIPTION: Demonstrates the incorrect way of implementing asynchronous content within a Content component, where the Suspense boundary is placed inside the Content component leading to incorrect measurements.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/advanced/pitfalls.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Content>\n    <Suspense>\n        <Gltf src=\"...\">\n    </Suspense>\n</Content>\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component from uikit-apfel\nDESCRIPTION: A simple import statement showing how to import the Input component from the @react-three/uikit-apfel package. This is the basic requirement to use the Input component in your project.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/input.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Input } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Separator from UI Kit Default\nDESCRIPTION: A simple import statement showing how to import the Separator component from the @react-three/uikit-default package for use in React Three Fiber projects.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/separator.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Separator } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component\nDESCRIPTION: Shows the import statement for including the Checkbox component from the UIKit Apfel library.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/checkbox.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Checkbox } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Radio-group Component from Default Kit\nDESCRIPTION: A simple import statement showing how to import the Radio-group component from the @react-three/uikit-default package for use in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/radio-group.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Radio-group } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component\nDESCRIPTION: Simple import statement for the Accordion component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/accordion.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Accordion } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from UIKIT Default\nDESCRIPTION: This snippet shows how to import the Checkbox component from the @react-three/uikit-default package. This import is necessary to use the Checkbox component in your React Three Fiber project.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/checkbox.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Checkbox } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from UIKIT Default\nDESCRIPTION: Simple import statement for the Card component from the @react-three/uikit-default package, which is used to create card UI elements in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/card.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Card } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component from UIKit Apfel\nDESCRIPTION: This code snippet shows how to import the Button component from the @react-three/uikit-apfel package. This import is necessary to use the Button component in your React Three Fiber project.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/button.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Button } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component from Apfel UI Kit\nDESCRIPTION: Simple import statement for the Tabs component from the @react-three/uikit-apfel package. This is the basic requirement to use the Tabs component in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/tabs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Tabs } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing List Component from Apfel Kit\nDESCRIPTION: This snippet shows how to import the List component from the @react-three/uikit-apfel package. This import is necessary to use the List component in your React Three Fiber project.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/list.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { List } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab-bar Component from Apfel Kit\nDESCRIPTION: This snippet shows how to import the Tab-bar component from the @react-three/uikit-apfel package. This import statement is crucial for using the Tab-bar component in your React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/tab-bar.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nimport { Tab-bar } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component from uikit-apfel\nDESCRIPTION: Simple import statement for the Progress component from the @react-three/uikit-apfel package. This is the bare minimum needed to use the Progress component in your React Three Fiber application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/progress.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Progress } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Loading Component from @react-three/uikit-apfel\nDESCRIPTION: This snippet shows how to import the Loading component from the @react-three/uikit-apfel package. This import is necessary to use the Loading component in your React application.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/apfel-kit/loading.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Loading } from \"@react-three/uikit-apfel\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component\nDESCRIPTION: A simple import statement showing how to import the Tooltip component from the @react-three/uikit-default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/tooltip.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Tooltip } from \"@react-three/uikit-default\";\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component\nDESCRIPTION: Simple import statement showing how to import the Skeleton component from the UI Kit default package.\nSOURCE: https://github.com/pmndrs/uikit/blob/main/docs/default-kit/skeleton.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport { Skeleton } from \"@react-three/uikit-default\";\n```"
  }
]