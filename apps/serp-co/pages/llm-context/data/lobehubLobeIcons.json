[
  {
    "owner": "lobehub",
    "repo": "lobe-icons",
    "content": "TITLE: Using getLobeIconCDN to Display Lobe Icons in React\nDESCRIPTION: This snippet demonstrates how to use the getLobeIconCDN function to retrieve and display different variants of a Lobe icon (color, mono, and text) in a React component. It utilizes the Grid component from @lobehub/ui and the useThemeMode hook for dark mode detection.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/cdn-utils.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLobeIconCDN } from '@lobehub/icons';\nimport { Grid } from '@lobehub/ui';\nimport { useThemeMode } from 'antd-style';\n\nexport default () => {\n  const { isDarkMode } = useThemeMode();\n  const color = getLobeIconCDN('Claude');\n  const mono = getLobeIconCDN('Claude', { type: 'mono', isDarkMode });\n  const text = getLobeIconCDN('Claude', { type: 'text', isDarkMode });\n  return (\n    <Grid>\n      <img height={48} src={color} alt=\"Claude\" />\n      <img height={48} src={mono} alt=\"Claude\" />\n      <img height={48} src={text} alt=\"Claude\" />\n    </Grid>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading OpenAI Icon from CDN using HTML\nDESCRIPTION: Shows specific examples of loading the OpenAI icon and OpenAI text icon from CDN using HTML img tags. Demonstrates the actual icon slugs to use for these specific icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-svg/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/openai.svg\" />\n\n<!--ALIYUN-->\n<img\n  height=\"64\"\n  src=\"https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openai.svg\"\n/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/openai-text.svg\" />\n\n<!--ALIYUN-->\n<img\n  height=\"64\"\n  src=\"https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openai-text.svg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying LLaVA Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the LLaVA icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It leverages media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/llava\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/llava-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/llava-color.png\\\" /></picture><br/>LLaVA                          \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Dark/Light Mode Icons in Markdown Table\nDESCRIPTION: HTML implementation of responsive icons that switch between dark and light mode variants using the prefers-color-scheme media query. Each icon includes a link to its detail page and a caption.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://lobehub.com/icons/infinigence\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/infinigence-color.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/infinigence-color.png\" /></picture><br/>Infinigence (无问芯穹)\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Dark/Light Mode Support using HTML\nDESCRIPTION: This code snippet uses the HTML `<picture>` element along with `<source>` elements to provide different image sources based on the user's preferred color scheme (dark or light). The `media` attribute specifies the condition for selecting a particular source, and the `srcset` attribute provides the URL for the image. The `<img>` element is used as a fallback if the browser does not support the `<picture>` element.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n\"<picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/baichuan-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/baichuan-color.png\\\" /></picture>\"\n```\n\n----------------------------------------\n\nTITLE: Accessing and Previewing Microsoft Copilot Brand Colors\nDESCRIPTION: This code demonstrates how to access the primary brand color associated with Microsoft Copilot from the icon package. It uses a custom ColorPreview component to display the color value stored in Copilot.colorPrimary.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Copilot/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Copilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Copilot.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined OpenAI Icon\nDESCRIPTION: This example demonstrates the usage of the `OpenAI.Combine` component to display a combined icon, optionally with additional text. It imports `OpenAI` from `@lobehub/icons` and `Flexbox` from `react-layout-kit` to arrange the icons. The example shows two `OpenAI.Combine` icons, one with default settings and another with a custom `extra` text and `showText` prop set to false.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <OpenAI.Combine size={64} />\n    <OpenAI.Combine size={64} extra={'ChatGPT'} showText={false} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LeptonAI Icons with Flexbox in TypeScript\nDESCRIPTION: Demonstrates the usage of LeptonAI icons within a Flexbox layout using the 'react-layout-kit'. The snippet showcases two icons with different styles, helping in visual consistency across a UI layout. Dependencies include React and 'react-layout-kit' package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LeptonAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LeptonAI } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <LeptonAI size={64} />\\n    <LeptonAI.Color size={64} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Default ModelIcon Implementation in React TSX\nDESCRIPTION: Basic implementation of the ModelIcon component showing default rendering\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/model-icon.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/model-icon/index.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Using PNG Icons with Dark/Light Mode Support via CDN\nDESCRIPTION: This snippet shows how to implement theme-aware PNG icons using the picture element with source media queries. It provides syntax for both UNPKG and Aliyun CDNs to serve different images based on user's color scheme preference.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-png@latest/dark/[ICON SLUG].png\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-png@latest/light/[ICON SLUG].png\" />\n</picture>\n\n<!--ALIYUN-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/dark/[ICON SLUG].png\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/[ICON SLUG].png\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenAI Icon\nDESCRIPTION: This snippet demonstrates how to display the base OpenAI icon using the `OpenAI` component from the `@lobehub/icons` library.  It imports the `OpenAI` component and renders it with a specified size of 64. The `Flexbox` component from `react-layout-kit` is also imported, although not used in this specific snippet.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <OpenAI size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering LangSmith Icons with Multiple Styles\nDESCRIPTION: Demonstrates rendering LangSmith icons in default and color variants using the Flexbox layout component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangSmith/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangSmith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LangSmith size={64} />\n    <LangSmith.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Icon with Light/Dark Mode Support in HTML\nDESCRIPTION: HTML code example showing how to implement the OpenAI icon using both UNPKG and ALIYUN CDN sources. This snippet demonstrates the use of the <picture> element to provide different images based on user color scheme preferences.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-webp@latest/dark/openai.webp\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-webp@latest/light/openai.webp\" />\n</picture>\n\n<!--ALIYUN-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/dark/openai.webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/light/openai.webp\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: OpenAI SVG Icon Implementation Example\nDESCRIPTION: An example implementation of loading the OpenAI icon as an SVG from CDN services. This shows the concrete usage with the actual icon slug 'openai' replacing the placeholder.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/openai.svg\" />\n\n<!--ALIYUN-->\n<img\n  height=\"64\"\n  src=\"https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openai.svg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using WEBP Icons with Dark/Light Mode Support via CDN\nDESCRIPTION: This snippet demonstrates how to implement theme-aware WEBP format icons using the picture element. It provides examples for both UNPKG and Aliyun CDNs to serve responsive images with the more efficient WEBP format.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-webp@latest/dark/[ICON SLUG].webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://unpkg.com/@lobehub/icons-static-webp@latest/light/[ICON SLUG].webp\"\n  />\n</picture>\n\n<!--ALIYUN-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/dark/[ICON SLUG].webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/light/[ICON SLUG].webp\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Displaying Hailuo Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Hailuo icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/hailuo\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/hailuo-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/hailuo-color.png\\\" /></picture><br/>Hailuo (海螺)                     \"\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenAI Colors\nDESCRIPTION: This snippet shows how to display the OpenAI color palette using the provided color variables.  It imports `OpenAI` from `@lobehub/icons`, `Flexbox` from `react-layout-kit`, and a custom `ColorPreview` component.  The example uses the `ColorPreview` component to display `OpenAI.colorPrimary`, `OpenAI.colorGpt3`, `OpenAI.colorGpt4`, and `OpenAI.colorO1`.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={OpenAI.colorPrimary} />\n    <ColorPreview color={OpenAI.colorGpt3} />\n    <ColorPreview color={OpenAI.colorGpt4} />\n    <ColorPreview color={OpenAI.colorO1} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Lobe Icons from CDN using HTML\nDESCRIPTION: Demonstrates how to load Lobe Icons from CDN (unpkg or aliyun) using an HTML img tag. The example shows how to specify the icon slug and set the image height.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-svg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/[ICON SLUG].svg\" />\n\n<!--ALIYUN-->\n<img\n  height=\"64\"\n  src=\"https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/[ICON SLUG].svg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined GithubCopilot Icon in React\nDESCRIPTION: This snippet illustrates the usage of the combined version of the GithubCopilot icon within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GithubCopilot/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GithubCopilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <GithubCopilot.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying HuggingFace Avatars in TypeScript\nDESCRIPTION: This snippet shows the rendering of HuggingFace avatars in a Flexbox layout with specific gaps and optional square shapes. Dependencies include \\'@lobehub/icons\\' for avatar components and \\'react-layout-kit\\'. The avatar component accepts size and shape attributes and outputs corresponding avatar elements.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/HuggingFace/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HuggingFace } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <HuggingFace.Avatar size={64} />\n    <HuggingFace.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering n8n Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates the use of n8n icons within a Flexbox layout using react-layout-kit. It imports the N8n component from the @lobehub/icons library and renders two icons with a size of 64px. The Flexbox component is used for horizontal arrangement with a gap of 16px between icons. No additional configuration is needed, making it ideal for simple icon display scenarios.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/N8n/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { N8n } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <N8n size={64} />\n    <N8n.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combined ProviderIcon Implementation\nDESCRIPTION: Demonstrates how to combine multiple provider icons together\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provder-icon.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/provider-icon/Combine.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Copilot Icons in Regular and Color Variants\nDESCRIPTION: This snippet demonstrates how to import and render both regular and colored versions of the Microsoft Copilot icon from the @lobehub/icons package. The icons are displayed in a horizontal flexbox layout with a specified size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Copilot/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Copilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Copilot size={64} />\n    <Copilot.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic LlamaIndex Icons in TSX\nDESCRIPTION: This snippet demonstrates how to render the basic LlamaIndex icon and its colored variant using the `LlamaIndex` component from the `@lobehub/icons` library. It utilizes `Flexbox` from `react-layout-kit` to arrange the icons horizontally with a gap of 16 pixels. The size of the icons is set to 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LlamaIndex/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LlamaIndex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LlamaIndex size={64} />\n    <LlamaIndex.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PPIO Avatars using Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates the rendering of avatar icons from the PPIO set within a Flexbox layout. It provides an example of customizing avatar shape and size, utilizing the horizontal alignment feature of Flexbox for a clean arrangement. This setup requires the react-layout-kit for the flexible layout and the PPIO icons from @lobehub/icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PPIO/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PPIO } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <PPIO.Avatar size={64} />\n    <PPIO.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Stepfun Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates how to display Stepfun icons using React with the Flexbox layout component from react-layout-kit. It imports the Stepfun component from '@lobehub/icons' and displays icons with different configurations. Dependencies include '@lobehub/icons' and 'react-layout-kit'. The icons have a consistent size of 64, and the Flexbox is configured with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stepfun/index.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Stepfun } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Stepfun size={64} />\n    <Stepfun.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Tencent Icons\nDESCRIPTION: This snippet imports the Tencent icon from the '@lobehub/icons' library and renders two variations of the icon: the default and the color version.  It utilizes the Flexbox component from 'react-layout-kit' to arrange the icons horizontally with a gap of 16 pixels. The size of each icon is set to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tencent/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tencent } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Tencent size={64} />\n    <Tencent.Color size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering HuggingFace Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet imports and renders the HuggingFace icons within a Flexbox layout. Dependency includes the \\'@lobehub/icons\\' package and \\'react-layout-kit\\'. The icons are displayed in their default and colored forms with a specified size. Expected inputs are configuration settings for the icon components, and outputs are the rendered icon elements.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/HuggingFace/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HuggingFace } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <HuggingFace size={64} />\n    <HuggingFace.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Sync Icon in React Component\nDESCRIPTION: Illustrates the import and rendering of a Sync icon from '@lobehub/icons' in a React component with a specific size. Requires React as a prerequisite. The main parameter is the 'size' which determines the icon's display size. No inputs are expected; the output is a React element displaying the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Sync/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sync } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Sync size={64} />;\n```\n\n----------------------------------------\n\nTITLE: OpenAI Text PNG Icon with Dark/Light Mode Implementation Example\nDESCRIPTION: An example implementation of the OpenAI Text icon variant in PNG format with theme awareness. This demonstrates how to use the text variant with automatic switching between dark and light versions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-png@latest/dark/openai-text.png\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-png@latest/light/openai-text.png\" />\n</picture>\n\n<!--ALIYUN-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"\n      https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/dark/openai-text.png\n    \"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/openai-text.png\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: OpenAI Text Icon Implementation Example using Aliyun Mirror\nDESCRIPTION: Practical example demonstrating the OpenAI text icon implementation using Aliyun NPM mirror CDN with dark mode support.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-webp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/dark/openai-text.webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/light/openai-text.webp\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Serving Lobe Icons from CDN with Light/Dark Mode Support (HTML)\nDESCRIPTION: This snippet demonstrates how to serve Lobe Icons from CDN (unpkg or npmmirror) with support for light and dark color schemes using the <picture> element. It includes placeholders for icon slugs.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-png@latest/dark/[ICON SLUG].png\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-png@latest/light/[ICON SLUG].png\" />\n</picture>\n\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/dark/[ICON SLUG].png\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/[ICON SLUG].png\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperlink with Icon\nDESCRIPTION: This snippet creates a hyperlink to a specific icon page on the LobeHub website.  It includes the icon image with dark/light mode support and the icon name, all wrapped within an anchor tag to navigate to the icon's dedicated page.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/baichuan\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/baichuan-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/baichuan-color.png\\\" /></picture><br/>Baichuan (百川)</a>\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Microsoft Bing Brand Colors\nDESCRIPTION: This snippet demonstrates how to use the predefined brand colors associated with the Microsoft Bing icon. It uses a custom ColorPreview component to display both the primary color and gradient color values.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bing/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bing } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Bing.colorPrimary} />\n    <ColorPreview color={Bing.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Kluster Components with Flexbox in React\nDESCRIPTION: Demonstrates the combination of Kluster components within a Flexbox container using Kluster's Combine subcomponent. Dependencies include '@lobehub/icons' and 'react-layout-kit'. This example arranges the components in a Flexbox with a gap of 16 pixels and aligns them to the flex-start position. Usage of the Combine component is shown with different configuration options for size and type.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kluster/index.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Kluster } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Kluster.Combine size={64} />\n    <Kluster.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring NextJS for LobeHub Icons Transpilation\nDESCRIPTION: JavaScript configuration example for NextJS to properly transpile the @lobehub/icons package. This is necessary for correct server-side rendering when using the icons library in a NextJS project.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst nextConfig = {\n  // ...other config\n\n  transpilePackages: ['@lobehub/icons'],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Greptile Avatars with Flexbox in TSX\nDESCRIPTION: This snippet illustrates the use of Greptile Avatar components with Flexbox to manage horizontal layout, with different shapes and sizes. Dependencies are '@lobehub/icons' and 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Greptile/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Greptile } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Greptile.Avatar size={64} />\n    <Greptile.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Import and Render Basic Railway Icon in React\nDESCRIPTION: This snippet demonstrates how to import the Railway icon from the @lobehub/icons library and render it within a React component.  The size prop is used to control the icon's dimensions. It utilizes the `Flexbox` component from `react-layout-kit` for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Railway/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Railway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Railway size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Hunyuan Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Hunyuan icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It leverages media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/hunyuan\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/hunyuan-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/hunyuan-color.png\\\" /></picture><br/>Hunyuan (腾讯混元)       \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Snowflake Icons with Flexbox - React\nDESCRIPTION: This snippet imports the Snowflake component from the '@lobehub/icons' package and renders it alongside another Snowflake icon using Flexbox for layout management. The icons are displayed with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Snowflake/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Snowflake } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Snowflake size={64} />\n    <Snowflake.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Github Icon\nDESCRIPTION: Demonstrates how to render the basic Github icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Github/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Github } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Github size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Combining IFlyTekCloud Icons in React\nDESCRIPTION: The snippet displays combined variants of the IFlyTekCloud icons in different formats using the IFlyTekCloud package and Flexbox from react-layout-kit. It includes both default and colored type icons. Dependencies include \\'@lobehub/icons\\' and \\'react-layout-kit\\'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/IFlyTekCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IFlyTekCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <IFlyTekCloud.Combine size={64} />\n    <IFlyTekCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Perplexity Avatars\nDESCRIPTION: This snippet shows how to render the avatar version of the Perplexity icon using `Perplexity.Avatar`. It also demonstrates setting the shape of the avatar to 'square'. The Flexbox component is used for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Perplexity/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Perplexity } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Perplexity.Avatar size={64} />\n    <Perplexity.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Ai360 Icons in React\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the Ai360 icon using the @lobehub/icons package with flexible sizing options.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai360/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai360 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Ai360 size={64} />\n    <Ai360.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Perplexity Icons\nDESCRIPTION: This example demonstrates how to render the combined version of the Perplexity icon using `Perplexity.Combine`. It also showcases how to set different types for the combined icon, such as 'color'. The `Flexbox` component is used for layout and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Perplexity/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Perplexity } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Perplexity.Combine size={64} />\n    <Perplexity.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Combining Mistral Icons with Different Types\nDESCRIPTION: This snippet demonstrates how to import the Mistral icon component from the '@lobehub/icons' library and combine different icon types (default and color) with a specified size using React and react-layout-kit. It showcases the use of `Mistral.Combine` to display different icon combinations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Mistral/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Mistral } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Mistral.Combine size={64} />\n    <Mistral.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Monica Avatars with Flexbox Layout - TSX\nDESCRIPTION: This snippet illustrates how to render various Monica avatar icons using a Flexbox layout. The avatars are displayed horizontally, and it includes examples of avatar icons with different properties such as default shape, square shape, and a specified background color using the Monica.colorPrimary.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Monica/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monica } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Monica.Avatar size={64} background={Monica.colorPrimary} />\n    <Monica.Avatar size={64} />\n    <Monica.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Create Railway Avatars with Different Styles in React\nDESCRIPTION: This snippet demonstrates creating different Railway avatars using the `Railway.Avatar` component. It showcases the usage of props such as `size`, `background`, and `shape` to customize the avatar's appearance. The `Flexbox` component arranges the avatars horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Railway/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Railway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Railway.Avatar size={64} background={Railway.colorPrimary} />\n    <Railway.Avatar size={64} />\n    <Railway.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Gemini Avatar Icons in React\nDESCRIPTION: This snippet shows how to use the Gemini.Avatar component to display Gemini avatar icons with different backgrounds and shapes in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemini/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemini } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Gemini.Avatar size={64} background={Gemini.colorPrimary} />\n    <Gemini.Avatar size={64} />\n    <Gemini.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ByteDance Icons\nDESCRIPTION: Demonstrates how to use basic ByteDance icons with both regular and colored variants. Uses Flexbox for horizontal layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ByteDance/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ByteDance } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ByteDance size={64} />\n    <ByteDance.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Icons in React\nDESCRIPTION: This snippet shows how to render a text-based icon from the LangChain set using React. It imports LangChain from '@lobehub/icons' and displays a text icon with a specified size. No additional dependencies besides React are necessary. The component renders a 48-pixel icon effortlessly.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangChain/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangChain } from '@lobehub/icons';\\n\\nexport default () => <LangChain.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering LLaVA Icons with Color\nDESCRIPTION: This snippet demonstrates how to render the basic LLaVA icon and its colored variant. It imports the LLaVA component from the @lobehub/icons library and uses Flexbox from react-layout-kit to arrange the icons horizontally with a gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LLaVA/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LLaVA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LLaVA size={64} />\n    <LLaVA.Color size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ModelTag Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the ModelTag component in a TypeScript React application. It includes the default usage of the component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/model-tag.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModelTag } from '@lobehub/icons';\n\nconst Demo = () => {\n  return <ModelTag />;\n};\n\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Default Provider Combine Demo\nDESCRIPTION: Demo implementation showing the default usage of the ProviderCombine component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provider-combine.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./demos/provider-combine/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Icons with React\nDESCRIPTION: Demonstrates avatar creation using LangChain icons with React and Flexbox. This example shows rendering avatars in various shapes using the size property. The Flexbox component from 'react-layout-kit' helps manage spacing and layout. Suitable for applications needing icons with intricate layout control.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangChain/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangChain } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <LangChain.Avatar size={64} />\\n    <LangChain.Avatar size={64} shape={'square'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules\nDESCRIPTION: Standard robots.txt directives that specify crawler permissions and site metadata. Allows all user agents full access and points to the sitemap location.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-Agent: *\nAllow: /\n\nHost: https://icons.lobehub.com\nSitemap: https://icons.lobehub.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with HTML Image Elements\nDESCRIPTION: A markdown table containing HTML picture elements that display company logos with dark/light mode support via media queries. Each cell includes a clickable link to the icon's detail page and responsive image display.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n| | <a href=\"https://lobehub.com/icons/upstage\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/upstage-color.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/upstage-color.png\" /></picture><br/>Upstage | |\n| | <a href=\"https://lobehub.com/icons/vercel\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/vercel.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/vercel.png\" /></picture><br/>Vercel | |\n```\n\n----------------------------------------\n\nTITLE: Colored ModelIcon Implementation\nDESCRIPTION: Implementation of ModelIcon component with color styling\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/model-icon.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/model-icon/Color.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Displaying Infermatic Icons in React with Flexbox\nDESCRIPTION: Illustrates rendering of Infermatic icons within a Flexbox container from react-layout-kit. The Infermatic library needs to be installed. Adjust the size of icons using the size prop. Outputs are Infermatic and Infermatic.Color components. Ensure the Flexbox component is compatible with the used React version.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infermatic/index.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Infermatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Infermatic size={64} />\n    <Infermatic.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combined Colored ModelIcon Implementation\nDESCRIPTION: Implementation showing combined usage of ModelIcon components with color styling\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/model-icon.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/model-icon/CombineColor.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Text Icon with Light/Dark Mode Support in HTML\nDESCRIPTION: HTML code example for implementing the OpenAI text icon with support for light and dark mode. The code shows implementation options using both UNPKG and ALIYUN CDN providers for the WEBP image format.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-webp@latest/dark/openai-text.webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://unpkg.com/@lobehub/icons-static-webp@latest/light/openai-text.webp\"\n  />\n</picture>\n\n<!--ALIYUN-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"\n      https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/dark/openai-text.webp\n    \"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/light/openai-text.webp\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Rendering AzureAI Avatars in React\nDESCRIPTION: This snippet shows how to use the AzureAI icon as an avatar, demonstrating both circular and square shapes. It uses the Avatar subcomponent of AzureAI.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AzureAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AzureAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AzureAI.Avatar size={64} />\n    <AzureAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars with LeptonAI in Flexbox using TypeScript\nDESCRIPTION: Displays avatar components using the LeptonAI library, integrated within a Flexbox from 'react-layout-kit'. Avatars are shown in different shapes, providing an example of how layout properties can influence component rendering.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LeptonAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LeptonAI } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <LeptonAI.Avatar size={64} />\\n    <LeptonAI.Avatar size={64} shape={'square'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: OpenAI PNG Icon with Dark/Light Mode Implementation Example\nDESCRIPTION: An example implementation of the OpenAI icon in PNG format with theme awareness. The picture element switches between dark and light mode versions based on user preferences for optimal visibility.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-png@latest/dark/openai.png\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-png@latest/light/openai.png\" />\n</picture>\n\n<!--ALIYUN-->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/dark/openai.png\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/openai.png\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Implementing CrewAI Avatars\nDESCRIPTION: Demonstrates how to use CrewAI avatar components with different shapes and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CrewAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CrewAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CrewAI.Avatar size={64} />\n    <CrewAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Qwen Icons\nDESCRIPTION: Demonstrates rendering default and color variants of Qwen icons with configurable sizes using React Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qwen/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qwen } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Qwen size={64} />\n    <Qwen.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CDN-based Icons with Dark Mode Support using Aliyun NPM Mirror\nDESCRIPTION: HTML code snippet showing implementation using Aliyun NPM mirror CDN with dark mode support through the picture element and media queries. Includes placeholders for icon slugs.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-webp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/dark/[ICON SLUG].webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-webp/latest/files/light/[ICON SLUG].webp\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Using Yuanbao Combined Components\nDESCRIPTION: Demonstrates the Combine variant of Yuanbao icons, which combines icon and text. Shows both the default and color types with vertical alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yuanbao/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yuanbao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Yuanbao.Combine size={64} />\n    <Yuanbao.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Groq Text Icon\nDESCRIPTION: Shows how to render a Groq Text icon with a specified size. Uses the '@lobehub/icons' package. The 'size' parameter controls the text icon size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Groq/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Groq } from '@lobehub/icons';\n\nexport default () => <Groq.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenAI Avatars\nDESCRIPTION: This snippet illustrates the use of the `OpenAI.Avatar` component to display various avatar styles. It imports `OpenAI` from `@lobehub/icons` and `Flexbox` from `react-layout-kit` for layout. The example showcases different `type` options (`gpt3`, `gpt4`, `o1`) and the `shape` prop to display square avatars.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <OpenAI.Avatar size={64} />\n    <OpenAI.Avatar size={64} type={'gpt3'} />\n    <OpenAI.Avatar size={64} type={'gpt4'} />\n    <OpenAI.Avatar size={64} type={'o1'} />\n    <OpenAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Kluster Icons in React with Flexbox\nDESCRIPTION: This snippet demonstrates the use of Kluster icons within a Flexbox layout in a React application. It imports Kluster from '@lobehub/icons' and Flexbox from 'react-layout-kit'. The icons are displayed with a size of 64 pixels and arranged horizontally with a gap of 16 pixels between them. The example highlights the basic usage of Kluster's icon components along with color variations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kluster/index.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Kluster } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kluster size={64} />\n    <Kluster.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepMind Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both the standard and color versions of the DeepMind icon. It uses the Flexbox component from react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepMind/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepMind } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepMind size={64} />\n    <DeepMind.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Copilot Avatar Variants\nDESCRIPTION: This snippet shows how to render the Microsoft Copilot icon as an avatar in both circle (default) and square shapes. Both avatars are rendered with a size of 64 pixels in a horizontal flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Copilot/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Copilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Copilot.Avatar size={64} />\n    <Copilot.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Primary Color with React\nDESCRIPTION: This snippet demonstrates how to display the primary color associated with the Google icon using a ColorPreview component. It imports the Google icon from @lobehub/icons and the ColorPreview component from a local file. The Google.colorPrimary value is passed to the ColorPreview component to render the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Google/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Google } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Google.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Minimax Icons with Flexbox in React\nDESCRIPTION: This snippet demonstrates how to use the Flexbox layout in a React component to combine multiple Minimax icons, setting their sizes and types. It highlights the versatility of the Minimax icon set.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Minimax/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Minimax } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Minimax.Combine size={64} />\n    <Minimax.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vidu Avatars in React\nDESCRIPTION: Shows how to use the Avatar variant of the Vidu icon with different customization options. The example demonstrates setting a custom background color, using the default background, and creating a square-shaped avatar.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vidu/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Vidu.Avatar size={64} background={Vidu.colorPrimary} />\n    <Vidu.Avatar size={64} />\n    <Vidu.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Icon from Lobe Icons (HTML)\nDESCRIPTION: This example shows how to use the OpenAI icon from Lobe Icons, serving it from CDN (unpkg or npmmirror) with support for light and dark color schemes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-png@latest/dark/open-ai.png\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-png@latest/light/openai.png\" />\n</picture>\n\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/dark/openai.png\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/openai.png\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Implementing CDN-based Icons with Dark Mode Support using UNPKG\nDESCRIPTION: HTML code snippet demonstrating how to implement icons using UNPKG CDN with dark mode support through the picture element and media queries. Includes placeholders for icon slugs.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-webp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-webp@latest/dark/[ICON SLUG].webp\"\n  />\n  <img\n    height=\"64\"\n    src=\"https://unpkg.com/@lobehub/icons-static-webp@latest/light/[ICON SLUG].webp\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Rendering Github Avatar Icons\nDESCRIPTION: Shows how to implement Github avatars in both circular and square shapes using horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Github/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Github } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Github.Avatar size={64} />\n    <Github.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Ollama Icon\nDESCRIPTION: Displays the standard Ollama icon with customizable size using the @lobehub/icons library\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ollama/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ollama } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Ollama size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Sync Avatar Icons with Flexbox\nDESCRIPTION: Illustrates rendering of Sync avatar icons using '@lobehub/icons' with a Flexbox layout from 'react-layout-kit'. It relies on React and 'react-layout-kit'. Key parameters include 'size' and 'shape', affecting the icon size and shape, respectively. Outputs a horizontal Flexbox with avatar icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Sync/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sync } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Sync.Avatar size={64} />\n    <Sync.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Meta Color Previews\nDESCRIPTION: Demonstrates the primary and gradient color palette of Meta icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Meta/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Meta.colorPrimary} />\n    <ColorPreview color={Meta.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering GithubCopilot Avatar Icons in React\nDESCRIPTION: This example demonstrates how to use the avatar version of the GithubCopilot icon in both circular and square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GithubCopilot/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GithubCopilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <GithubCopilot.Avatar size={64} />\n    <GithubCopilot.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Brand Icons with React\nDESCRIPTION: This snippet illustrates how to render Google brand icons, including the standard and colored versions.  It utilizes React and react-layout-kit's Flexbox to align the brand icons with a gap of 16 pixels. The icons are configured with a size of 64 pixels and aligned to the start of the flex container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Google/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Google } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Google.Brand size={64} />\n    <Google.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: ProviderIcon as Avatar\nDESCRIPTION: Demonstrates the usage of ProviderIcon in avatar format\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provder-icon.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/provider-icon/Avatar.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Using WorkersAI Combined Icon and Text\nDESCRIPTION: Demonstrates how to use the Combine component which shows both icon and text together. Supports regular and colored variants through the type prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/WorkersAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WorkersAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <WorkersAI.Combine size={64} />\n    <WorkersAI.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ProviderIcon - Basic Example\nDESCRIPTION: Demonstrates the default usage of the ProviderIcon component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provder-icon.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/provider-icon/index.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Alibaba Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render the Alibaba icon component in both standard and color variants. It uses the Flexbox component from react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Alibaba/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alibaba } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Alibaba size={64} />\n    <Alibaba.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Stability Icons with Flexbox in TSX\nDESCRIPTION: This snippet demonstrates rendering two variants of the 'Stability' icon using the 'Flexbox' component from 'react-layout-kit'. The 'Flexbox' props allow customization of spacing and alignment, and the 'Stability' component supports size customization. This integration facilitates flexible and responsive design layouts.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stability/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stability } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Stability size={64} />\n    <Stability.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ComfyUI Avatars in React\nDESCRIPTION: Example showing how to use ComfyUI avatar icons with different shapes (default circle and square) in a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ComfyUI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComfyUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ComfyUI.Avatar size={64} />\n    <ComfyUI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: OpenAI Icon Implementation Example using UNPKG\nDESCRIPTION: Practical example showing how to implement the OpenAI icon using UNPKG CDN with dark mode support.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-webp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-webp@latest/dark/openai.webp\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-webp@latest/light/openai.webp\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Import and Render Pika Avatar Icons (tsx)\nDESCRIPTION: This snippet demonstrates how to import the Pika icon component and render its avatar variant. It showcases rendering avatars with different shapes using the shape prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pika/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pika } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Pika.Avatar size={64} />\n    <Pika.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lightricks Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the Lightricks icon at a specified size within a functional React component. It utilizes the '@lobehub/icons' library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lightricks/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lightricks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Lightricks size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Importing IconAvatar Component Demo\nDESCRIPTION: A code reference that imports and demonstrates the IconAvatar component functionality\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/icon-avatar.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/IconAvatar.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenRouter Primary Color in React\nDESCRIPTION: This snippet shows how to access and display the primary color associated with the OpenRouter icon. It imports the OpenRouter component from `@lobehub/icons` and displays a color preview using the `OpenRouter.colorPrimary` property within a Flexbox layout arranged horizontally with a gap of 16 pixels. The component requires the `@lobehub/icons`, `react-layout-kit`, and `ColorPreview` component dependencies.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenRouter/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenRouter } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={OpenRouter.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Nvidia Text Icon\nDESCRIPTION: This snippet showcases how to render the text version of the Nvidia icon. It imports the Nvidia component from @lobehub/icons and displays the text variant with a specified size. This example focuses on rendering the Nvidia logo as text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nvidia/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nvidia } from '@lobehub/icons';\n\nexport default () => <Nvidia.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Mono Provider Combine Demo\nDESCRIPTION: Demo implementation showing the mono variant of the ProviderCombine component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provider-combine.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n./demos/provider-combine/Mono.tsx\n```\n\n----------------------------------------\n\nTITLE: Using VertexAI Combined Icon and Text Component\nDESCRIPTION: Demonstrates how to use the VertexAI.Combine component which displays both the icon and text together. The type prop can be used to specify 'color' variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VertexAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VertexAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <VertexAI.Combine size={64} />\n    <VertexAI.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Avatar Icons with React\nDESCRIPTION: This code snippet showcases how to display Google avatar icons using the @lobehub/icons library. It renders two avatar icons, one with the default circular shape and another with a square shape. The icons are displayed horizontally using Flexbox from react-layout-kit with a gap of 16 pixels, and are sized to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Google/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Google } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Google.Avatar size={64} />\n    <Google.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: LobeIconCdnConfig Interface Definition\nDESCRIPTION: This snippet defines the LobeIconCdnConfig interface, which specifies the configuration options for the getLobeIconCDN function. It includes options for CDN provider, image format, dark mode, and icon type.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/cdn-utils.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport interface LobeIconCdnConfig {\n  cdn?: 'aliyun' | 'unpkg';\n  format?: 'svg' | 'png' | 'webp';\n  isDarkMode?: boolean;\n  type?: 'mono' | 'color' | 'text' | 'text-cn' | 'brand' | 'brand-color';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Ai21 Avatar Icons with Different Styles in React\nDESCRIPTION: This snippet demonstrates how to use Ai21 avatar icons with various configurations, including custom background color and shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai21/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai21 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Ai21.Avatar size={64} background={Ai21.colorPrimary} />\n    <Ai21.Avatar size={64} />\n    <Ai21.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: ProviderIcon with Color Customization\nDESCRIPTION: Shows how to implement colored variations of the ProviderIcon\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provder-icon.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/provider-icon/Color.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Using SVG Icons via CDN with HTML\nDESCRIPTION: This snippet demonstrates how to load SVG icons from both UNPKG and Aliyun CDNs. The code shows the basic syntax for embedding SVG icons with a consistent height of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/[ICON SLUG].svg\" />\n\n<!--ALIYUN-->\n<img\n  height=\"64\"\n  src=\"https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/[ICON SLUG].svg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using ByteDance Brand Colors\nDESCRIPTION: Demonstrates how to use ByteDance's primary brand color with a color preview component. Uses horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ByteDance/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ByteDance } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={ByteDance.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RSSHub Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement RSSHub icons using Flexbox from the react-layout-kit package. The icons are displayed horizontally with specified gaps and sizes. The component showcases both the standard and colored versions of the RSSHub icon. Dependencies include RSSHub from the '@lobehub/icons' package and Flexbox from 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/RSSHub/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RSSHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <RSSHub size={64} />\n    <RSSHub.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Together.ai Icons\nDESCRIPTION: This snippet imports the Together component from '@lobehub/icons' and renders two icons using the <Together> component. The first uses the default icon, and the second renders the color variant. Flexbox is used to arrange the icons horizontally with a gap of 16.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Together/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Together } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Together size={64} />\n    <Together.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimax Avatars Using Flexbox in React\nDESCRIPTION: This snippet illustrates the use of multiple Minimax Avatar icons arranged horizontally within a Flexbox layout. It showcases different configurations such as size and shape for the avatars.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Minimax/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Minimax } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Minimax.Avatar size={64} background={Minimax.colorPrimary} />\n    <Minimax.Avatar size={64} />\n    <Minimax.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: LangSmith Avatar Icons with Shape Variations\nDESCRIPTION: Demonstrates LangSmith avatar icons in different sizes and shapes using Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangSmith/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangSmith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LangSmith.Avatar size={64} />\n    <LangSmith.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining CogVideo Icon Variants\nDESCRIPTION: Demonstrates how to use the combined version of CogVideo icons with different types and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogVideo/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogVideo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CogVideo.Combine size={64} />\n    <CogVideo.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Together.ai Brand Icons\nDESCRIPTION: This snippet imports the Together component from '@lobehub/icons' and displays two brand icons. One is the standard brand icon, and the other is the color version.  Flexbox is used to arrange these icons with a gap and aligned to the start.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Together/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Together } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Together.Brand size={64} />\n    <Together.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Gemini Brand Icons in React\nDESCRIPTION: This example demonstrates how to use Gemini.Brand and Gemini.BrandColor components to render Gemini brand icons in a React application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemini/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemini } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Gemini.Brand size={64} />\n    <Gemini.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons Flexbox React\nDESCRIPTION: This TypeScript snippet illustrates how to use the Search1API components from the @lobehub/icons package within a React layout using Flexbox from react-layout-kit. The key elements include rendering icons with a specific size and color. Dependencies are the @lobehub/icons and react-layout-kit packages.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Search1API/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Search1API } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Search1API size={64} />\n    <Search1API.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Midjourney Avatar Icons\nDESCRIPTION: This snippet shows how to render Avatar icons using Midjourney components within a Flexbox. It includes both circular and square avatars, each with a size of 64 pixels, laid out horizontally with a gap of 16 pixels between them.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Midjourney/index.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Midjourney } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Midjourney.Avatar size={64} />\n    <Midjourney.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Adobe Icons\nDESCRIPTION: Demonstrates the combined version of Adobe icons with both default and color variants using vertical Flexbox layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Adobe/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Adobe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Adobe.Combine size={64} />\n    <Adobe.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo and Title in Markdown\nDESCRIPTION: This snippet shows how to display the project logo, title, and description using HTML within a Markdown file. It includes image tags for logos and a brief project description with links.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div align=\"center\">\n\n<img height=\"120\" src=\"https://registry.npmmirror.com/@lobehub/assets-logo/1.0.0/files/assets/logo-3d.webp\">\n<img height=\"120\" src=\"https://gw.alipayobjects.com/zos/kitchen/qJ3l3EPsdW/split.svg\">\n<img height=\"120\" src=\"https://registry.npmmirror.com/@lobehub/fluent-emoji-3d/1.1.0/files/assets/1f968.webp\">\n\n<h1>Lobe Icons</h1>\n\nPopular AI / LLM Model Brand SVG Logo and Icon Collection. See them all on one page at [lobehub.com/icons](https://lobehub.com/icons).<br/>\nContributions, corrections & requests can be made on GitHub.\n\n[Documents](https://icons.lobehub.com) · [Changelog](./CHANGELOG.md) · [Report Bug][github-issues-link] · [Request Feature][github-issues-link]\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Notion Avatar Component with Flexbox in React\nDESCRIPTION: This example uses the Notion.Avatar component to render avatar icons of the Notion element, arranging them horizontally with a Flexbox layout. The snippet allows for multiple avatar shapes, such as square, demonstrating layout flexibility with a specified size of 64 pixels and a horizontal gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Notion/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notion } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Notion.Avatar size={64} />\n    <Notion.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Bedrock Avatars\nDESCRIPTION: Shows different ways to use Bedrock avatars with custom backgrounds and shapes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bedrock/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bedrock } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Bedrock.Avatar size={64} background={Bedrock.colorPrimary} />\n    <Bedrock.Avatar size={64} />\n    <Bedrock.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Display Railway Colors using ColorPreview Component in React\nDESCRIPTION: This snippet demonstrates how to display the primary and gradient colors associated with the Railway icon. It imports the `Railway` icon and a custom `ColorPreview` component (assumed to be defined elsewhere). The `Flexbox` component arranges the color previews horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Railway/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Railway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Railway.colorPrimary} />\n    <ColorPreview color={Railway.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepMind Avatar Icons in React\nDESCRIPTION: This snippet shows how to use the Avatar subcomponent of the DeepMind icon, demonstrating both circular and square shapes. It uses Flexbox for horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepMind/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepMind } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepMind.Avatar size={64} />\n    <DeepMind.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Vercel Avatars in Different Shapes\nDESCRIPTION: Shows how to use the Avatar subcomponent to create Vercel brand avatars in both default (circular) and square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vercel/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vercel } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Vercel.Avatar size={64} />\n    <Vercel.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Groq Avatars\nDESCRIPTION: Demonstrates how to display Groq avatar icons with different shapes or sizes using Flexbox for layout. Requires '@lobehub/icons' and 'react-layout-kit'. Key parameters include 'size' and 'shape' for dimensions and form.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Groq/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Groq } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Groq.Avatar size={64} />\n    <Groq.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined AiStudio Icons\nDESCRIPTION: Demonstrates the combined version of the AiStudio icon with support for both default and colored variants.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiStudio/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AiStudio.Combine size={64} />\n    <AiStudio.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Cohere Combined Logo Components in TSX\nDESCRIPTION: Demonstrates the combined logo component with different type and color configurations. The Combine component allows displaying the icon with various styling options.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cohere/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cohere } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Cohere.Combine size={64} />\n    <Cohere.Combine size={64} type={'color'} />\n    <Cohere.Combine size={64} type={'color'} color={Cohere.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Civitai Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render the Civitai icon component in both default and color variants using React and the react-layout-kit package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Civitai/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Civitai } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Civitai size={64} />\n    <Civitai.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using CrewAI Combined Icons\nDESCRIPTION: Shows how to implement combined CrewAI icons with options for both regular and colored variants.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CrewAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CrewAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CrewAI.Combine size={64} />\n    <CrewAI.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Tencent Brand Icons\nDESCRIPTION: This snippet imports the Tencent icon and displays two brand-related variations: `Tencent.Brand` and `Tencent.BrandColor`. The icons are arranged using Flexbox with a gap of 16 pixels and aligned to the flex-start.  The size of each brand icon is set to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tencent/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tencent } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Tencent.Brand size={64} />\n    <Tencent.BrandColor size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Novita Icons in Flexbox - JavaScript (TSX)\nDESCRIPTION: This snippet demonstrates how to render Novita icons using the Flexbox layout from the react-layout-kit package. It imports Novita from @lobehub/icons and uses it to render both standard and colored icons. Dependencies include React and react-layout-kit. Key parameter sizes for Novita icons are specified and the layout is horizontally oriented.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Novita/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Novita } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Novita size={64} />\n    <Novita.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: This snippet demonstrates how to display various project badges using shield.io links. The badges include information about releases, downloads, contributors, and more.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![][npm-release-shield]][npm-release-link]\n[![][vercel-shield]][vercel-link]\n[![][discord-shield]][discord-link]\n[![][npm-downloads-shield]][npm-downloads-link]<br/>\n[![][github-releasedate-shield]][github-releasedate-link]\n[![][github-action-test-shield]][github-action-test-link]\n[![][github-action-release-shield]][github-action-release-link]<br/>\n[![][github-contributors-shield]][github-contributors-link]\n[![][github-forks-shield]][github-forks-link]\n[![][github-stars-shield]][github-stars-link]\n[![][github-issues-shield]][github-issues-link]\n[![][github-license-shield]][github-license-link]\n```\n\n----------------------------------------\n\nTITLE: Combining RWKV Icons with Flexbox - TypeScript React\nDESCRIPTION: This snippet showcases how to combine multiple Rwkv.Combine icon components with specified sizes and types inside a Flexbox layout. The components are arranged with a gap and aligned to the start of the container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Rwkv/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rwkv } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Rwkv.Combine size={64} />\n    <Rwkv.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering NotebookLM Icon\nDESCRIPTION: This code snippet demonstrates how to import the NotebookLM icon component from the '@lobehub/icons' library and render it within a React component. The size prop is used to control the icon's dimensions. It utilizes React and the Lobe Icons library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NotebookLM/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotebookLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <NotebookLM size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Notion Icon Component in React\nDESCRIPTION: Demonstrates rendering a Notion icon at a specific size using the Notion component from the @lobehub/icons library. No additional dependencies are needed beyond what's imported from the specified libraries. The function returns a JSX element containing the Notion component with a set size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Notion/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notion } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Notion size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Bing Icons in Standard and Color Variants\nDESCRIPTION: This snippet demonstrates how to render both standard and color variants of the Microsoft Bing icon. It uses the Flexbox component from react-layout-kit to arrange the icons horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bing/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bing } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Bing size={64} />\n    <Bing.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Icons with Flexbox\nDESCRIPTION: This code displays the usage of the avatar components from Search1API in a Flexbox layout, utilizing different shapes and sizes. Requires @lobehub/icons and react-layout-kit packages.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Search1API/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Search1API } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Search1API.Avatar size={64} />\n    <Search1API.Avatar shape=\"square\" size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AWS Icons\nDESCRIPTION: Demonstrates how to render both regular and colored AWS icons using the Aws component. Uses Flexbox for horizontal layout with 16px gap between icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aws/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aws } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Aws size={64} />\n    <Aws.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Hunyuan Avatars in React\nDESCRIPTION: This code snippet demonstrates how to render the Hunyuan.Avatar icon using the @lobehub/icons library. It imports the Hunyuan component and utilizes the Flexbox component from react-layout-kit for layout. Two avatar icons are displayed, one with the default shape and another with the 'square' shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hunyuan/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hunyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hunyuan.Avatar size={64} />\n    <Hunyuan.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with ModelScope in React\nDESCRIPTION: This snippet demonstrates using the ModelScope library to render avatar components with different background colors and shapes. It employs the react-layout-kit for organizing the layout, allowing for customization with primary colors and shape alterations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ModelScope/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModelScope } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ModelScope.Avatar size={64} background={ModelScope.colorPrimary} />\n    <ModelScope.Avatar size={64} />\n    <ModelScope.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CogView Avatar Icons with Different Shapes in TSX\nDESCRIPTION: Shows how to use the CogView.Avatar component with different shape options. The example displays two avatars horizontally with a size of 64 pixels each - one with the default circular shape and one with a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogView/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogView } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CogView.Avatar size={64} />\n    <CogView.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering vLLM Icons in Standard and Color Variants\nDESCRIPTION: Demonstrates how to import and display both the standard and color versions of the vLLM icon side by side. Uses the Flexbox component from react-layout-kit to create a horizontal layout with proper spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vllm/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vllm } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Vllm size={64} />\n    <Vllm.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Hailuo Icons\nDESCRIPTION: This snippet demonstrates how to combine different types of Hailuo icons using the `Hailuo.Combine` component. It showcases the usage of the `type` prop to specify whether to use the colored version. `Flexbox` is used to arrange the combined icons with a gap and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hailuo/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hailuo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Hailuo.Combine size={64} />\n    <Hailuo.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Qwen Avatars with Variations\nDESCRIPTION: Displays Qwen avatars with different sizes, backgrounds, and shape configurations\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qwen/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qwen } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Qwen.Avatar size={64} background={Qwen.colorGradient} />\n    <Qwen.Avatar size={64} />\n    <Qwen.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LlamaIndex Avatars in TSX\nDESCRIPTION: This snippet showcases how to render the LlamaIndex icon as avatars using the `LlamaIndex.Avatar` component from the `@lobehub/icons` library. It demonstrates rendering two avatars: one with the default circular shape and another with a square shape. The size of both avatars is set to 64, and `Flexbox` from `react-layout-kit` is used for horizontal arrangement.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LlamaIndex/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LlamaIndex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LlamaIndex.Avatar size={64} />\n    <LlamaIndex.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Replit Avatar Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet uses Flexbox from React Layout Kit to display Replit avatar icons with custom shapes and sizes. Avatars are displayed with a gap of 16 and can have different shapes, such as 'square'. It requires the React Layout Kit and LobeHub icon library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replit/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Replit.Avatar size={64} />\n    <Replit.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Yi Icons in Standard and Color Variants\nDESCRIPTION: Demonstrates how to import and render both the standard Yi icon and its color variant using the @lobehub/icons package with React. The example uses Flexbox for horizontal layout and sets both icons to 64px size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yi/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Yi size={64} />\n    <Yi.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Voyage Icons in React\nDESCRIPTION: Demonstrates how to import and display both the standard Voyage icon and its color variant. The example uses Flexbox from react-layout-kit to arrange the icons horizontally with a gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Voyage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Voyage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Voyage size={64} />\n    <Voyage.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering RWKV Icons in Flexbox Component - TypeScript React\nDESCRIPTION: This snippet imports the Rwkv icon from '@lobehub/icons' and utilizes the Flexbox component from 'react-layout-kit' to render a set of RWKV icons with specified sizes within a horizontal flex layout. The Rwkv.Color component is also displayed in this configuration.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Rwkv/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rwkv } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Rwkv size={64} />\n    <Rwkv.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Zeabur Icons in Standard and Color Variants in React\nDESCRIPTION: This snippet demonstrates how to import and display both the standard and color variants of the Zeabur icon. It uses the Flexbox component from react-layout-kit to arrange the icons horizontally with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zeabur/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zeabur } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Zeabur size={64} />\n    <Zeabur.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering WorkersAI Icons in React\nDESCRIPTION: Demonstrates how to import and display the WorkersAI icon in both regular and colored versions. Uses Flexbox from react-layout-kit for horizontal arrangement with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/WorkersAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WorkersAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <WorkersAI size={64} />\n    <WorkersAI.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Text Icon\nDESCRIPTION: Shows how to render a Microsoft text-based icon with size configuration\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Microsoft/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Microsoft } from '@lobehub/icons';\n\nexport default () => <Microsoft.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Icons with React\nDESCRIPTION: This code snippet demonstrates how to import and display the basic Google icon and its colored variant using the @lobehub/icons library. It uses the Flexbox component from react-layout-kit to arrange the icons horizontally with a gap of 16 pixels. The size of the icons is set to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Google/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Google } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Google size={64} />\n    <Google.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Wenxin Icons in Standard and Color Variants\nDESCRIPTION: Demonstrates how to import and display both the standard and color variants of the Wenxin icon. Uses Flexbox from react-layout-kit to arrange the icons horizontally with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Wenxin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wenxin } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Wenxin size={64} />\n    <Wenxin.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AdobeFirefly Icons\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the AdobeFirefly icon using the @lobehub/icons package. Uses Flexbox for horizontal layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AdobeFirefly/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdobeFirefly } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AdobeFirefly size={64} />\n    <AdobeFirefly.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering FishAudio Avatar Icons in React\nDESCRIPTION: Demonstrates how to use the avatar version of the FishAudio icon in both circular and square shapes within a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/FishAudio/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FishAudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <FishAudio.Avatar size={64} />\n    <FishAudio.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Adobe Icons\nDESCRIPTION: Demonstrates how to render basic Adobe icons in both default and color variants using Flexbox layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Adobe/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Adobe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Adobe size={64} />\n    <Adobe.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Friendli Avatars\nDESCRIPTION: Shows how to use Friendli avatar components with different shapes and sizes in a horizontal layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Friendli/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Friendli } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Friendli.Avatar size={64} />\n    <Friendli.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Icons with Stepfun in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the creation of Stepfun avatars in a Flexbox layout using React. The examples showcase avatar creation with different parameters such as size, background, and shape, all enclosed in a horizontal Flexbox with a gap of 16 pixels. Key dependencies include '@lobehub/icons' and 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stepfun/index.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Stepfun } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Stepfun.Avatar size={64} background={Stepfun.colorPrimary} />\n    <Stepfun.Avatar size={64} />\n    <Stepfun.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Flexbox in TypeScript\nDESCRIPTION: This code snippet demonstrates how to render a set of icons ('Poe' and 'Poe.Color') using the Flexbox component from 'react-layout-kit'. Icons are displayed horizontally with a gap between them. The 'Poe' icon and its color variant are shown with a fixed size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Poe/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Poe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Poe size={64} />\n    <Poe.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Exa Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both standard and colored Exa icons using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Exa/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Exa } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Exa size={64} />\n    <Exa.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars Using Novita Icons - JavaScript (TSX)\nDESCRIPTION: This snippet illustrates the rendering of avatar icons using Novita.Avatar. Various properties like size, background color, and shape (default and square) are demonstrated. React-layout-kit is used for horizontal alignment and spacing control. Important parameters include size and optional properties for background color and shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Novita/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Novita } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Novita.Avatar size={64} background={Novita.colorPrimary} />\n    <Novita.Avatar size={64} />\n    <Novita.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AdobeFirefly Avatars\nDESCRIPTION: Shows how to use AdobeFirefly avatar components with different shapes and sizes. Includes both circular and square avatar variants.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AdobeFirefly/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdobeFirefly } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AdobeFirefly.Avatar size={64} />\n    <AdobeFirefly.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cursor Avatar Icons with Different Shapes\nDESCRIPTION: This example demonstrates how to render Cursor avatar icons with different sizes and shapes using a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cursor/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cursor } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cursor.Avatar size={64} />\n    <Cursor.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Baidu Text Icons in React\nDESCRIPTION: Shows how to use Baidu text icons in both English and Chinese variants. The components are stacked vertically with left alignment and a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baidu/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Baidu.Text size={48} />\n    <Baidu.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AlibabaCloud Icons in React\nDESCRIPTION: Demonstrates how to import and use the AlibabaCloud icon component from @lobehub/icons. It shows both the default icon and the colored version.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlibabaCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlibabaCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AlibabaCloud size={64} />\n    <AlibabaCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons Using Flexbox\nDESCRIPTION: Illustrates how to combine different LangChain icon variants within a Flexbox layout. The example shows importing necessary components, aligning them flex-start, and rendering combined icons with a color type. Requires Flexbox from 'react-layout-kit' for layout management.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangChain/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangChain } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} align={'flex-start'}>\\n    <LangChain.Combine size={64} />\\n    <LangChain.Combine size={64} type={'color'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Combining MyShell Icons with Flexbox in React\nDESCRIPTION: This code snippet imports MyShell icons and displays them using the Flexbox layout from react-layout-kit, showing usage of the MyShell.Combine component with different props. It allows for alignment and size customization of the icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MyShell/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyShell } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <MyShell.Combine size={64} />\n    <MyShell.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Icons Using React Component\nDESCRIPTION: This snippet demonstrates how to display LangChain icons by importing them from the '@lobehub/icons' package and utilizing the Flexbox component from the 'react-layout-kit'. The example shows rendering standard and colored LangChain icons side by side with a gap of 16 pixels. It assumes the availability of required packages and components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangChain/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangChain } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <LangChain size={64} />\\n    <LangChain.Color size={64} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AssemblyAI Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both standard and colored AssemblyAI icons using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AssemblyAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssemblyAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AssemblyAI size={64} />\n    <AssemblyAI.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SiliconCloud Avatars with Flexbox in React\nDESCRIPTION: This snippet demonstrates rendering two instances of SiliconCloud avatars using the Flexbox layout, with options for size and shape, ensuring customizable avatar display within a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SiliconCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SiliconCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <SiliconCloud.Avatar size={64} />\n    <SiliconCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons with Flexbox in React\nDESCRIPTION: This snippet illustrates how to combine multiple LobeHub icons using Flexbox in a React component. It demonstrates the use of types for the combine icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LobeHub/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LobeHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LobeHub.Combine size={64} />\n    <LobeHub.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Gemini Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both standard and colored Gemini icons using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemini/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemini } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Gemini size={64} />\n    <Gemini.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Avatars with InternLM Icons - TSX\nDESCRIPTION: This snippet demonstrates the creation of avatar components using the InternLM icon set within a Flexbox layout, allowing customization of size and shape for the avatars.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/InternLM/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InternLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <InternLM.Avatar size={64} />\n    <InternLM.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Tiangong Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render basic Tiangong icons with different sizes. It utilizes the `Tiangong` component from `@lobehub/icons` and the `Flexbox` component from `react-layout-kit` for layout purposes. Two icon variations are displayed: the default icon and the colored icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tiangong/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tiangong } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Tiangong size={64} />\n    <Tiangong.Color size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Doubao Avatars\nDESCRIPTION: Shows how to implement Doubao avatars with different shapes (default circular and square) using horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doubao/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doubao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Doubao.Avatar size={64} />\n    <Doubao.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Azure Text Icon\nDESCRIPTION: Shows how to implement the text-only version of the Azure icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Azure/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Azure } from '@lobehub/icons';\n\nexport default () => <Azure.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combined ModelIcon Implementation\nDESCRIPTION: Implementation showing combined usage of ModelIcon components\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/model-icon.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/model-icon/Combine.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Displaying Hailuo Icon as Avatars\nDESCRIPTION: This snippet illustrates how to render the Hailuo icon as avatars using the `Hailuo.Avatar` component. It showcases the usage of the `shape` prop to specify the avatar shape (e.g., square). `Flexbox` is used to arrange the avatars horizontally with a gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hailuo/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hailuo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hailuo.Avatar size={64} />\n    <Hailuo.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Pollinations Avatars with Flexbox\nDESCRIPTION: This snippet imports the Pollinations avatar icons and arranges them horizontally using Flexbox. It includes two avatars, demonstrating variation in size and shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pollinations/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pollinations } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Pollinations.Avatar size={64} />\n    <Pollinations.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Color Preview with Flexbox in React (Colors)\nDESCRIPTION: This snippet shows how to integrate a ColorPreview component to display a primary color from the Make library within a Flexbox layout, allowing for effective color visualizations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Make/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Make } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Make.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Luma Icons\nDESCRIPTION: This code snippet demonstrates how to import and render the Luma icon and its colored version using the `@lobehub/icons` library. It uses `Flexbox` from `react-layout-kit` to arrange the icons horizontally with a gap of 16 pixels. The size of both icons is set to 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Luma/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Luma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Luma size={64} />\n    <Luma.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Dify Avatar Components\nDESCRIPTION: Shows implementation of Dify avatars with different shapes (circular and square) and customizable sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dify/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dify } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Dify.Avatar size={64} />\n    <Dify.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepSeek Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both standard and colored DeepSeek icons using the @lobehub/icons package. It uses the Flexbox component from react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepSeek/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepSeek } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepSeek size={64} />\n    <DeepSeek.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AlephAlpha Avatar Components\nDESCRIPTION: Shows how to use AlephAlpha avatar components with different shapes and sizes in a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlephAlpha/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlephAlpha } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AlephAlpha.Avatar size={64} />\n    <AlephAlpha.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Anthropic Icon in React\nDESCRIPTION: Shows how to import and render the basic Anthropic icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anthropic/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anthropic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Anthropic size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Gemma Icons in React\nDESCRIPTION: This example shows how to use the combined version of the Gemma icon, including both standard and colored variants. It uses Flexbox for layout and demonstrates different size and type props.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemma/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Gemma.Combine size={64} />\n    <Gemma.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined TencentCloud Icons in Flexbox\nDESCRIPTION: This snippet demonstrates how to render combined TencentCloud icons in a Flexbox layout with specified alignment. It shows two icons of different types, both sized at 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TencentCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TencentCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <TencentCloud.Combine size={64} />\n    <TencentCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering StateCloud Icons in React\nDESCRIPTION: This TypeScript snippet demonstrates how to render the StateCloud icons in a React environment using the Flexbox layout from react-layout-kit. Dependencies include @lobehub/icons for icon components and react-layout-kit for layout structure. The StateCloud and StateCloud.Color icons are both displayed with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/StateCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StateCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <StateCloud size={64} />\n    <StateCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Langfuse Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates how to import Langfuse icons and use them with Flexbox from the 'react-layout-kit' package. It shows the rendering of 'Langfuse' and 'Langfuse.Color' icons in a horizontal Flexbox layout with a gap of 16. Dependencies include '@lobehub/icons' for icons and 'react-layout-kit' for Flexbox. The Flexbox layout arranges icons with specified sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Langfuse/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Langfuse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Langfuse size={64} />\n    <Langfuse.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Render MCP Avatar Variant with Shapes in React\nDESCRIPTION: This snippet demonstrates using the `Avatar` variant of the MCP icon (`MCP.Avatar`). It shows how to render the avatar with a default circular shape and a square shape using the `shape` prop. The Flexbox component is used for horizontal layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MCP/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MCP } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <MCP.Avatar size={64} />\n    <MCP.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Colors in React Components\nDESCRIPTION: This component shows how to use a color previewer alongside LangChain's primary colors. It integrates components needed for color visualization, utilizing Flexbox for layout management. Requires 'ColorPreview' component and is designed to work seamlessly with LangChain's color palette.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangChain/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangChain } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nimport ColorPreview from '../components/ColorPreview';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <ColorPreview color={LangChain.colorPrimary} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Grok Text Component\nDESCRIPTION: Displays the Grok text component with a size of 48 pixels from the @lobehub/icons library\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Grok/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grok } from '@lobehub/icons';\n\nexport default () => <Grok.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Combined Icons\nDESCRIPTION: Displays Microsoft combined icons with default and color type variations\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Microsoft/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Microsoft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Microsoft.Combine size={64} />\n    <Microsoft.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Xinference Color Constants\nDESCRIPTION: Demonstrates how to access and use the primary color constant defined for Xinference using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xinference/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xinference } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Xinference.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined DeepMind Icons in React\nDESCRIPTION: This example demonstrates the use of the Combined version of the DeepMind icon, showing both standard and color types. It uses Flexbox for layout and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepMind/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepMind } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <DeepMind.Combine size={64} />\n    <DeepMind.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cohere Icons in TSX\nDESCRIPTION: Demonstrates how to render standard Cohere icons with both monochrome and color variants. Uses the Flexbox component from react-layout-kit to arrange icons horizontally with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cohere/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cohere } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cohere size={64} />\n    <Cohere.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cloudflare Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both the standard and colored versions of the Cloudflare icon using the @lobehub/icons package and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cloudflare/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cloudflare } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cloudflare size={64} />\n    <Cloudflare.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Monochrome ModelIcon Implementation\nDESCRIPTION: Implementation of ModelIcon component with monochrome styling\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/model-icon.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/model-icon/Mono.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandA Avatars\nDESCRIPTION: Shows how to create CommandA avatars with different shapes and sizes in a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CommandA/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommandA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CommandA.Avatar size={64} />\n    <CommandA.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Icons with Flexbox in React (Avatars)\nDESCRIPTION: This snippet demonstrates the rendering of Avatar icons from the Make library, featuring square and circular shapes, aligned horizontally in a Flexbox layout, ensuring consistent spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Make/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Make } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Make.Avatar size={64} />\n    <Make.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Kling Avatars in Flexbox\nDESCRIPTION: This snippet imports the Kling icon component and Flexbox layout to render two avatars with different shapes. It demonstrates how to customize avatars within a flexible UI layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kling/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kling } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kling.Avatar size={64} />\n    <Kling.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Import and Render Basic Pika Icon (tsx)\nDESCRIPTION: This snippet demonstrates how to import the Pika icon component from the @lobehub/icons library and render it within a React component. It includes setting the size of the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pika/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pika } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Pika size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Together.ai Colors\nDESCRIPTION: This snippet imports the Together component from '@lobehub/icons' and displays a color preview. The ColorPreview component is used to display the primary color defined in the Together component. Flexbox is used to arrange the color preview horizontally with a gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Together/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Together } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Together.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering BAAI Avatar Components\nDESCRIPTION: Shows how to use BAAI avatar components in both circular and square shapes with specified sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BAAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BAAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <BAAI.Avatar size={64} />\n    <BAAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Gemini Colors in React\nDESCRIPTION: This example demonstrates how to use Gemini color constants (colorPrimary and colorGradient) with a custom ColorPreview component to display Gemini-specific colors.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemini/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemini } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Gemini.colorPrimary} />\n    <ColorPreview color={Gemini.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: OpenChat Avatar Icon Variants\nDESCRIPTION: Shows multiple avatar icon rendering options with different sizes, backgrounds, and shapes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenChat/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenChat } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <OpenChat.Avatar size={64} background={OpenChat.colorPrimary} />\n    <OpenChat.Avatar size={64} />\n    <OpenChat.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Volcengine Icons in React\nDESCRIPTION: Demonstrates how to import and display the basic Volcengine icon in both standard and color variants. The example shows icons rendered at 64px size in a horizontal flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Volcengine/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Volcengine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Volcengine size={64} />\n    <Volcengine.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Tiangong Icons in React\nDESCRIPTION: This snippet demonstrates combining the Tiangong icon with different styles.  It imports the `Tiangong` component from `@lobehub/icons` and uses `Flexbox` from `react-layout-kit` for layout. Two combined icons are rendered: the default combined icon and the colored combined icon, both with a size of 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tiangong/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tiangong } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Tiangong.Combine size={64} />\n    <Tiangong.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Previews with Flexbox Layout - TSX\nDESCRIPTION: This snippet showcases how to render color previews based on Monica colors using the Flexbox component. It displays two ColorPreview components side by side, demonstrating the primary color and gradient color defined in the Monica library, both with a horizontal alignment and a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Monica/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monica } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Monica.colorPrimary} />\n    <ColorPreview color={Monica.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AiStudio Icons\nDESCRIPTION: Demonstrates how to render the basic AiStudio icon in both default and colored variants using the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiStudio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AiStudio size={64} />\n    <AiStudio.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TencentCloud Icons in Flexbox\nDESCRIPTION: This snippet demonstrates how to render TencentCloud icons in a horizontal Flexbox layout with a specified gap between icons. The component uses the TencentCloud icon with a size of 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TencentCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TencentCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <TencentCloud size={64} />\n    <TencentCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Wenxin Avatar Icons with Different Styles\nDESCRIPTION: Shows how to use the Wenxin.Avatar component with different customization options including background color, size, and shape variations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Wenxin/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wenxin } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Wenxin.Avatar size={64} background={Wenxin.colorPrimary} />\n    <Wenxin.Avatar size={64} />\n    <Wenxin.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Magic Text Icon\nDESCRIPTION: This example shows how to render the text variant of the Magic icon, accessed via `Magic.Text`. It imports the `Magic` component and sets the size to 48 pixels. This renders an icon specifically designed for displaying text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Magic/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Magic } from '@lobehub/icons';\n\nexport default () => <Magic.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars with Flexbox in React\nDESCRIPTION: This snippet provides an example of how to display LobeHub avatars using Flexbox in a React functional component, including different sizes and shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LobeHub/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LobeHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LobeHub.Avatar size={64} />\n    <LobeHub.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenWebUI Avatars\nDESCRIPTION: This snippet demonstrates how to render multiple OpenWebUI avatar components within a horizontal Flexbox layout. It shows the ability to customize avatar sizes and shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenWebUI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenWebUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <OpenWebUI.Avatar size={64} />\n    <OpenWebUI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars with Liquid and Flexbox in TypeScript\nDESCRIPTION: This snippet showcases how to display avatars using the Liquid.Avatar component within a flexbox layout. It demonstrates both circular and square avatar shapes with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Liquid/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Liquid } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Liquid.Avatar size={64} />\n    <Liquid.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PixVerse Icons with Flexbox in React\nDESCRIPTION: This snippet demonstrates how to render multiple PixVerse icons using the Flexbox layout. It imports the necessary components from lobehub/icons and react-layout-kit. The size of the icons is defined as 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PixVerse/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PixVerse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <PixVerse size={64} />\n    <PixVerse.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Responsive Dark/Light Mode Image with Link in HTML\nDESCRIPTION: HTML markup pattern for displaying responsive images that adapt to system dark/light mode preferences, with links to the icon details page. Each image component includes a source media query for dark mode and a default light mode image.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_28\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://lobehub.com/icons/lobehub\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/lobehub-color.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/lobehub-color.png\" /></picture><br/>LobeHub\n```\n\n----------------------------------------\n\nTITLE: Combining Stepfun Components with Flexbox in TypeScript\nDESCRIPTION: This example shows how to combine Stepfun components using the React Flexbox layout. It integrates the Stepfun.Combine component, demonstrating variations in display by altering the type parameter. Dependencies include '@lobehub/icons' and 'react-layout-kit', ensuring consistent alignment 'flex-start' with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stepfun/index.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Stepfun } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Stepfun.Combine size={64} />\n    <Stepfun.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Gradio Avatars in React\nDESCRIPTION: This code snippet illustrates the rendering of Gradio Avatar components using Flexbox for horizontal layout. The Avatars are displayed with varying shapes, providing an example of how to customize Gradio icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gradio/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gradio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Gradio.Avatar size={64} />\n    <Gradio.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Azure Avatar Components\nDESCRIPTION: Shows implementation of Azure avatars in both circular and square shapes using horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Azure/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Azure } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Azure.Avatar size={64} />\n    <Azure.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Flux Icon in React\nDESCRIPTION: This snippet shows how to import and render the basic Flux icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flux/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flux } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Flux size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Tencent Avatar Icons\nDESCRIPTION: This snippet imports the Tencent icon and renders two avatar variations. One avatar is the default shape, while the other is a square. They are arranged horizontally using Flexbox with a gap of 16 pixels. The size of both avatars is set to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tencent/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tencent } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Tencent.Avatar size={64} />\n    <Tencent.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering DALL·E Avatar Icons in React\nDESCRIPTION: This example demonstrates how to use the avatar variant of the DALL·E icon, with options for circular and square shapes, using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dalle/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dalle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Dalle.Avatar size={64} />\n    <Dalle.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vercel Combined Icon and Text in React\nDESCRIPTION: Demonstrates how to use the Combine subcomponent which renders both the Vercel icon and text together in a flexible layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vercel/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vercel } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Vercel.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PixVerse Avatars with Flexbox in React\nDESCRIPTION: This snippet displays how to render multiple PixVerse avatars using Flexbox, including examples of different shapes and backgrounds such as the primary color. The size for each avatar is set to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PixVerse/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PixVerse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <PixVerse.Avatar size={64} background={PixVerse.colorPrimary} />\n    <PixVerse.Avatar size={64} />\n    <PixVerse.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic BAAI Icon in React\nDESCRIPTION: Demonstrates how to import and render the basic BAAI icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BAAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BAAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <BAAI size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Upstage Avatar Components with Different Styles\nDESCRIPTION: Shows how to use the Upstage.Avatar component with various customization options including size, background color, and shape (circular or square).\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Upstage/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Upstage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Upstage.Avatar size={64} background={Upstage.colorPrimary} />\n    <Upstage.Avatar size={64} />\n    <Upstage.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing HuggingFace Colors in TypeScript\nDESCRIPTION: The snippet explains how to preview a specific color of HuggingFace using the ColorPreview component. It requires \\'@lobehub/icons\\', \\'react-layout-kit\\', and a ColorPreview component from the project. The expected input is a color variable, resulting in a color preview display output.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/HuggingFace/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HuggingFace } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={HuggingFace.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SearchApi Icon in React\nDESCRIPTION: This snippet imports the SearchApi icon from the '@lobehub/icons' package and renders it in a React functional component with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SearchApi/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchApi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <SearchApi size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Targon Icons with Flexbox in TSX\nDESCRIPTION: This code snippet demonstrates how to import Targon components and render them using the Flexbox system from react-layout-kit, showcasing an icon and its color variant. It requires react-layout-kit and @lobehub/icons libraries to function properly and accepts a 'size' parameter to define the dimensions of the icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Targon/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Targon } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Targon size={64} />\n    <Targon.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering the Yandex Icon Component\nDESCRIPTION: This snippet demonstrates how to import the Yandex icon component from @lobehub/icons and render it with a specified size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yandex/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yandex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Yandex size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering NotebookLM Avatar Variant\nDESCRIPTION: This snippet showcases rendering the 'Avatar' variant of the NotebookLM icon with different shapes.  It imports the NotebookLM component from '@lobehub/icons' and utilizes the Avatar property. Flexbox from 'react-layout-kit' arranges the avatars horizontally with a specified gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NotebookLM/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotebookLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <NotebookLM.Avatar size={64} />\n    <NotebookLM.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Claude Icons in React\nDESCRIPTION: Demonstrates how to import and render the standard Claude icon and its color variant. Uses Flexbox from react-layout-kit for horizontal arrangement with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Claude/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Claude } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Claude size={64} />\n    <Claude.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Magic Icon\nDESCRIPTION: This snippet demonstrates how to render a combined variant of the Magic icon using `Magic.Combine`. It imports the `Magic` component and `Flexbox` from `react-layout-kit` for layout.  The `Flexbox` component provides spacing and alignment for the combined icon element, with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Magic/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Magic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Magic.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with ModelScope in React\nDESCRIPTION: This snippet demonstrates rendering icon components using the ModelScope library within a Flexbox layout. It specifically highlights how different variations of the ModelScope icon can be displayed with a specified size and alignment using the react-layout-kit library to manage layout styling.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ModelScope/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModelScope } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ModelScope size={64} />\n    <ModelScope.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Voyage Brand Colors\nDESCRIPTION: Shows how to access and display the primary brand color of Voyage. This example imports the Voyage component and uses a custom ColorPreview component to display the color value stored in Voyage.colorPrimary.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Voyage/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Voyage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Voyage.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Kling Icons in Flexbox\nDESCRIPTION: This snippet imports the Kling icon component and Flexbox layout from react-layout-kit, rendering two Kling icons with a gap of 16 pixels in a horizontal layout. It facilitates an adaptable UI design through Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kling/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kling } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kling size={64} />\n    <Kling.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Groq Icons\nDESCRIPTION: Illustrates combining multiple Groq icons in a Flexbox layout. It requires '@lobehub/icons' and 'react-layout-kit' packages. 'size' and 'type' are key parameters revealing icon dimensions and style. Utilizes Flexbox for spacing and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Groq/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Groq } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Groq.Combine size={64} />\n    <Groq.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Cloudflare Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Cloudflare icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/cloudflare\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/cloudflare-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/cloudflare-color.png\\\" /></picture><br/>Cloudflare                        \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Together.ai Icons\nDESCRIPTION: This snippet imports the Together component from '@lobehub/icons' and displays two combined icons. The first is the default combined icon, and the second is the color variant. Flexbox is used to arrange the icons with a specified gap and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Together/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Together } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Together.Combine size={64} />\n    <Together.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Icons in Flexbox using React\nDESCRIPTION: This snippet renders avatar icons from the Qingyan library within a Flexbox layout. The Flexbox component organizes the avatars horizontally with a gap of 16 pixels. Two variations of the avatar are displayed: one is the default shape, while the other is displayed as a square shape, both at a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qingyan/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qingyan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Qingyan.Avatar size={64} />\n    <Qingyan.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ZeroOne Avatar Components\nDESCRIPTION: Shows how to use the Avatar subcomponent of ZeroOne with different shape options. The example displays circular and square avatar variants with a specified size in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ZeroOne/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ZeroOne } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ZeroOne.Avatar size={64} />\n    <ZeroOne.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Doubao Icons\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the Doubao icon using the @lobehub/icons package with Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doubao/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doubao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Doubao size={64} />\n    <Doubao.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Inflection Combined Icon\nDESCRIPTION: Shows how to use the Inflection combined icon with a layout container\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inflection/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inflection } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Inflection.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Inference Avatars\nDESCRIPTION: Presents a method to render multiple Inference avatars with different shapes using Flexbox for horizontal arrangement. Requires '@lobehub/icons' and 'react-layout-kit'. This component renders two 'Inference.Avatar' icons with a size of 64, one with a default shape and one with a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inference/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inference } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <Inference.Avatar size={64} />\\n    <Inference.Avatar size={64} shape={'square'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Higress Icons within Flexbox - TypeScript\nDESCRIPTION: This snippet shows how to import Higress icons from the '@lobehub/icons' package and render them within a horizontal Flexbox layout using the 'react-layout-kit'. It includes both the basic and the colored versions of the Higress icon, each displayed at a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Higress/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Higress } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Higress size={64} />\n    <Higress.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Ollama Avatars\nDESCRIPTION: Shows Ollama avatars with different sizes and shape configurations\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ollama/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ollama } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Ollama.Avatar size={64} />\n    <Ollama.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SenseNova Icons\nDESCRIPTION: Demonstrates rendering default and color variants of SenseNova icons with configurable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SenseNova/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SenseNova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <SenseNova size={64} />\n    <SenseNova.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Volcengine Combined Icons in React\nDESCRIPTION: Demonstrates the combined icon variant which likely includes both the icon and text. The example shows both standard and color types at 64px size in a vertical flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Volcengine/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Volcengine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Volcengine.Combine size={64} />\n    <Volcengine.Combine type={'color'} size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Layouts with Flexbox in TSX\nDESCRIPTION: This snippet provides a way to render 'Stability.Avatar' icons using varied shapes and styles via the 'Flexbox' layout. It demonstrates effective use of props for design specificity like background color and shape, resulting in a dynamic, resizable design.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stability/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stability } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Stability.Avatar size={64} background={Stability.colorPrimary} />\n    <Stability.Avatar size={64} />\n    <Stability.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenRouter Text Icon in React\nDESCRIPTION: This snippet demonstrates how to render the Text variant of the OpenRouter icon. It imports the OpenRouter component from `@lobehub/icons` and renders the `OpenRouter.Text` sub-component with a size of 48 pixels. The component requires the `@lobehub/icons` dependency.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenRouter/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenRouter } from '@lobehub/icons';\n\nexport default () => <OpenRouter.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: TII Avatar Icon Styles\nDESCRIPTION: Demonstrates TII avatar icons with different shapes and configurable sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TII/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TII } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <TII.Avatar size={64} />\n    <TII.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Gemini Icons in React\nDESCRIPTION: This snippet illustrates the usage of Gemini.Combine component to display combined Gemini icons, including both standard and colored versions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemini/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemini } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Gemini.Combine size={64} />\n    <Gemini.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Meta Brand Icons\nDESCRIPTION: Displays Meta brand icons in monochrome and color variants\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Meta/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Meta.Brand size={64} />\n    <Meta.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Baidu Icons in React\nDESCRIPTION: Demonstrates how to use the standard Baidu icon and its colored variant in a React component. The icons are arranged horizontally with a gap of 16 pixels between them.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baidu/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Baidu size={64} />\n    <Baidu.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying CrewAI Brand Components\nDESCRIPTION: Demonstrates the implementation of CrewAI brand icons in both regular and colored variants with flexible alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CrewAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CrewAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CrewAI.Brand size={48} />\n    <CrewAI.BrandColor size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining StateCloud Icons in React\nDESCRIPTION: This TypeScript example shows how to display the StateCloud.Combine icon in a React app, applying different sizes and types. It uses the Flexbox component for layout, and StateCloud.Combine is displayed twice with different properties. The required packages are @lobehub/icons and react-layout-kit.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/StateCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StateCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <StateCloud.Combine size={64} />\n    <StateCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Doc2X Icons in React\nDESCRIPTION: This example demonstrates the use of the combined variant of the Doc2X icon, showing both standard and color types with custom sizing and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doc2X/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doc2X } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Doc2X.Combine size={64} />\n    <Doc2X.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: OpenAI Text SVG Icon Implementation Example\nDESCRIPTION: An example implementation of loading the OpenAI Text icon variant as an SVG from CDN services. This demonstrates how to use variant icons with the slug 'openai-text'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<!--UNPKG-->\n<img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/openai-text.svg\" />\n\n<!--ALIYUN-->\n<img\n  height=\"64\"\n  src=\"https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openai-text.svg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Combining Pollinations Icons with Flexbox Layout\nDESCRIPTION: This example imports Pollinations icons along with Flexbox for creating a layout. It demonstrates how to use the Combine feature of Pollinations within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pollinations/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pollinations } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Pollinations.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Goose Avatars\nDESCRIPTION: This snippet illustrates how to display Goose avatars in a Flexbox layout. It includes two avatars, one default and one with a 'square' shape, arranged horizontally with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Goose/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Goose } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Goose.Avatar size={64} />\n    <Goose.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Zeabur Avatar Icons with Different Shapes\nDESCRIPTION: This snippet shows how to implement Zeabur avatars with both circle (default) and square shapes. It uses the Avatar subcomponent with size and shape properties arranged horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zeabur/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zeabur } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Zeabur.Avatar size={64} />\n    <Zeabur.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Hedra Icon\nDESCRIPTION: Demonstrates how to import and render a basic Hedra icon with custom size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hedra/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hedra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Hedra size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic CommandA Icons\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the CommandA icon using the basic component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CommandA/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommandA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CommandA size={64} />\n    <CommandA.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Luma Avatars\nDESCRIPTION: This snippet shows how to use the avatar version of the Luma icon. It imports `Luma` from `@lobehub/icons` and uses `Flexbox` from `react-layout-kit` to display two `Luma.Avatar` components.  One avatar has the default shape, and the other has a 'square' shape, both with a size of 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Luma/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Luma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Luma.Avatar size={64} />\n    <Luma.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined AionLabs Icons\nDESCRIPTION: Demonstrates the combined version of AionLabs icons in both default and color types, arranged vertically with Flexbox and a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AionLabs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AionLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AionLabs.Combine size={64} />\n    <AionLabs.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Yi Combined Icons\nDESCRIPTION: Demonstrates how to use the Yi.Combine component which combines icon and text elements. The example shows two variants - the default combined icon and a color version using the type prop, both with size 64px and arranged vertically.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yi/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Yi.Combine size={64} />\n    <Yi.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepSeek Avatars in React\nDESCRIPTION: This example shows how to use the Avatar subcomponent of DeepSeek to render circular and square avatar icons. It demonstrates setting the size and shape properties of the avatar.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepSeek/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepSeek } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepSeek.Avatar size={64} />\n    <DeepSeek.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenAI Text Icon\nDESCRIPTION: This snippet shows how to display the text variant of the OpenAI icon using the `OpenAI.Text` component. The example imports the `OpenAI` component from `@lobehub/icons` and renders the `OpenAI.Text` variant with a size of 48.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenAI } from '@lobehub/icons';\n\nexport default () => <OpenAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined AzureAI Icons in React\nDESCRIPTION: This snippet demonstrates how to use the combined version of the AzureAI icon, showing both standard and color types. It uses the Combine subcomponent of AzureAI.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AzureAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AzureAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AzureAI.Combine size={64} />\n    <AzureAI.Combine type={'color'} size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with V0 in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to render multiple avatars using the V0 component, including customization of size and shape within a Flexbox layout. It imports both the V0 and Flexbox components and uses them to display avatars with specified properties.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/V0/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { V0 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <V0.Avatar size={64} />\n    <V0.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Cloudflare Icons in React\nDESCRIPTION: This example demonstrates the usage of the combined Cloudflare icon, including both standard and colored versions, using the @lobehub/icons package and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cloudflare/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cloudflare } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Cloudflare.Combine size={64} />\n    <Cloudflare.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering n8n Avatars in TypeScript\nDESCRIPTION: This snippet demonstrates rendering of n8n avatars using the N8n component in a Flexbox layout. The Avatar property is utilized to produce two avatars with differing shapes (default and square). The layout is set to horizontal, spacing the avatars 16px apart.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/N8n/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { N8n } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <N8n.Avatar size={64} />\n    <N8n.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined DeepSeek Icons in React\nDESCRIPTION: This snippet demonstrates the use of the Combine subcomponent of DeepSeek, which allows for rendering both standard and colored versions of the combined icon. It uses Flexbox for layout and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepSeek/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepSeek } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <DeepSeek.Combine size={64} />\n    <DeepSeek.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Azure Icons in React\nDESCRIPTION: Demonstrates how to render basic Azure icons in both default and color variants using Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Azure/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Azure } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Azure size={64} />\n    <Azure.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DocSearch Icons in React\nDESCRIPTION: This snippet demonstrates how to render both regular and colored DocSearch icons using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DocSearch/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocSearch } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DocSearch size={64} />\n    <DocSearch.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cerebras Avatar Icons\nDESCRIPTION: Demonstrates the implementation of Cerebras avatars with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cerebras/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cerebras } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cerebras.Avatar size={64} />\n    <Cerebras.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Targon Elements with Flexbox in TSX\nDESCRIPTION: This snippet illustrates the combination of Targon elements using the Flexbox layout, supporting configuration such as element size and type. Dependencies are @lobehub/icons and react-layout-kit. Key parameters include 'size' and 'type', facilitating customization of the appearance.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Targon/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Targon } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Targon.Combine size={64} />\n    <Targon.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Tripo Icons in React\nDESCRIPTION: This snippet demonstrates how to render the combined variant of the `Tripo` icon with different types using React and react-layout-kit. It imports the `Tripo` component from `@lobehub/icons` and uses the `Flexbox` component from `react-layout-kit` to display the icons.  The `type` prop specifies the color variant of the combined icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tripo/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tripo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Tripo.Combine size={64} />\n    <Tripo.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering ZeroOne Base Icons in React\nDESCRIPTION: Demonstrates how to import and use the basic ZeroOne icon component from @lobehub/icons. The example shows how to render the icon with a specified size inside a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ZeroOne/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ZeroOne } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ZeroOne size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Greptile Icons with Flexbox in TSX\nDESCRIPTION: This code integrates Greptile Combine icons with Flexbox for vertical alignment, specifying size and type variants. Dependencies include '@lobehub/icons' and 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Greptile/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Greptile } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Greptile.Combine size={64} />\n    <Greptile.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining DBRX Icon Variants\nDESCRIPTION: Demonstrates the combined version of DBRX icons with both default and colored types using vertical Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dbrx/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dbrx } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Dbrx.Combine size={64} />\n    <Dbrx.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Notion Text Component in React\nDESCRIPTION: This snippet showcases the use of the Notion.Text component, allowing the rendering of text associated with the Notion icon. The Notion.Text component is imported and used with a specified size of 48 pixels. It serves as a simple React functional component that returns a JSX element displaying the text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Notion/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notion } from '@lobehub/icons';\n\nexport default () => <Notion.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Featherless Icons\nDESCRIPTION: Demonstrates how to render basic Featherless icons in both default and color variants using the @lobehub/icons package. Uses Flexbox for horizontal layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Featherless/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Featherless } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Featherless size={64} />\n    <Featherless.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AzureAI Icons in React\nDESCRIPTION: This snippet demonstrates how to render both the standard and color versions of the AzureAI icon using the @lobehub/icons package and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AzureAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AzureAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AzureAI size={64} />\n    <AzureAI.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DreamMachine Icon in React\nDESCRIPTION: This snippet demonstrates how to render a DreamMachine icon with a specific size in a React component. It requires the 'DreamMachine' component from '@lobehub/icons'. The 'size' parameter is used to define the icon size, set to 64 in this example.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DreamMachine/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DreamMachine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <DreamMachine size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering IFlyTekCloud Icons in React\nDESCRIPTION: This snippet demonstrates how to display the IFlyTekCloud icons using the IFlyTekCloud package and the Flexbox component from react-layout-kit. It shows how to render both regular and color-themed icons side by side. It requires \\'@lobehub/icons\\' and \\'react-layout-kit\\' packages.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/IFlyTekCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IFlyTekCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <IFlyTekCloud size={64} />\n    <IFlyTekCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Hunyuan Icons in React\nDESCRIPTION: This code snippet demonstrates how to import and render the basic Hunyuan icon and the Hunyuan.Color variant using the @lobehub/icons library. It utilizes the Flexbox component from react-layout-kit for layout purposes. The icons are displayed with a specified size and gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hunyuan/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hunyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hunyuan size={64} />\n    <Hunyuan.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Colab Brand Colors\nDESCRIPTION: Demonstrates how to access and preview the Colab brand colors including primary color and gradient. Uses a custom ColorPreview component to visualize the colors.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Colab/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Colab } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Colab.colorPrimary} />\n    <ColorPreview color={Colab.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining LiveKit Icons with Color Options\nDESCRIPTION: Shows how to render LiveKit Combine icons in default and color variations with flexible layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LiveKit/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LiveKit.Combine size={64} />\n    <LiveKit.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Alibaba Brand Icons in React\nDESCRIPTION: This example illustrates the usage of Alibaba brand icons, including both standard and color versions. The components are vertically aligned using Flexbox with a specified gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Alibaba/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alibaba } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Alibaba.Brand size={64} />\n    <Alibaba.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Together.ai Avatars\nDESCRIPTION: This snippet imports the Together component from '@lobehub/icons' and renders two avatar icons. The first is the default avatar icon, and the second has a square shape. Flexbox is used to arrange the avatars horizontally with a gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Together/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Together } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Together.Avatar size={64} />\n    <Together.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying HuggingFace Text Icon in TypeScript\nDESCRIPTION: This snippet showcases how to display the HuggingFace Text icon with a specific size using TypeScript. The primary dependency is on the \\'@lobehub/icons\\' library. This component requires size parameters and outputs a textual icon element.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/HuggingFace/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HuggingFace } from '@lobehub/icons';\n\nexport default () => <HuggingFace.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Coqui Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both standard and colored versions of the Coqui icon. It uses the Flexbox component for layout and sets the size of the icons to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coqui/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coqui } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Coqui size={64} />\n    <Coqui.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining PPIO Icons using Flexbox in TypeScript\nDESCRIPTION: This code demonstrates the usage of PPIO.Combine components within a styled Flexbox container. It shows flexibility by accepting different icon types and sizes, using the 'flex-start' alignment property for layout management. The snippet relies on react-layout-kit and imports PPIO from @lobehub/icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PPIO/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PPIO } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <PPIO.Combine size={64} />\n    <PPIO.Combine type={'color'} size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with LeptonAI in TypeScript\nDESCRIPTION: Illustrates how to render text using the LeptonAI.Text component. The snippet creates a text element with a specified size, highlighting the simplicity of rendering typography using LeptonAI's text components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LeptonAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LeptonAI } from '@lobehub/icons';\\n\\nexport default () => <LeptonAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering RWKV Avatars in Flexbox - TypeScript React\nDESCRIPTION: This snippet demonstrates rendering multiple Rwkv.Avatar components with different properties such as size and shape, organized within a horizontal Flexbox layout. The first avatar uses a specific background color from Rwkv.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Rwkv/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rwkv } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Rwkv.Avatar size={64} background={Rwkv.colorPrimary} />\n    <Rwkv.Avatar size={64} />\n    <Rwkv.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combined Meta Icons\nDESCRIPTION: Shows different variations of combined Meta icons with size and type customization\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Meta/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Meta.Combine size={64} />\n    <Meta.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Magic Avatars\nDESCRIPTION: This snippet demonstrates how to render the avatar variant of the Magic icon using `Magic.Avatar`. It imports the `Magic` component and `Flexbox` from `react-layout-kit` for horizontal layout. Two avatars are created: one with the default shape and another with a square shape, both sized at 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Magic/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Magic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Magic.Avatar size={64} />\n    <Magic.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic OpenChat Icons\nDESCRIPTION: Demonstrates rendering standard and color variants of OpenChat icons with configurable sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenChat/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenChat } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <OpenChat size={64} />\n    <OpenChat.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Preview of Ideogram\nDESCRIPTION: This snippet demonstrates how to display a color preview using the primary color from Ideogram. It imports the ColorPreview component and renders it within a Flexbox layout with a horizontal orientation and a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ideogram/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ideogram } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Ideogram.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Kimi Icons\nDESCRIPTION: Demonstrates rendering default and color variations of Kimi icons with different sizes using Flexbox layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kimi/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kimi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kimi size={64} />\n    <Kimi.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Combined Google Colab Icons with Multiple Variants\nDESCRIPTION: Demonstrates the Combined icon variant which likely combines the logo and text. Shows both the default and color types arranged vertically with Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Colab/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Colab } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Colab.Combine size={64} />\n    <Colab.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Zeabur Combined Icons with Different Types\nDESCRIPTION: This example demonstrates how to use the Combine subcomponent of Zeabur icons, which combines icon and text. It shows both the default and color variants arranged vertically with Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zeabur/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zeabur } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Zeabur.Combine size={64} />\n    <Zeabur.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Greptile Icons with Flexbox in TSX\nDESCRIPTION: This snippet imports Greptile and Flexbox components to display Greptile icons with a specified size in a horizontal Flexbox layout. This setup requires '@lobehub/icons' and 'react-layout-kit' as dependencies.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Greptile/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Greptile } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Greptile size={64} />\n    <Greptile.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Github Icon\nDESCRIPTION: Demonstrates how to use the combined Github icon variant within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Github/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Github } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Github.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text - React\nDESCRIPTION: This snippet imports LmStudio icons and renders a text component from LmStudio with a size of 48.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LmStudio/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LmStudio } from '@lobehub/icons';\n\nexport default () => <LmStudio.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Icons\nDESCRIPTION: Demonstrates basic rendering of Meta icons with different sizes and variations\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Meta/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Meta size={64} />\n    <Meta.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Mistral Icons with Size and Color\nDESCRIPTION: This snippet demonstrates how to import the Mistral icon component from the '@lobehub/icons' library and render it with different sizes and color variations using React and react-layout-kit. It utilizes Flexbox for arranging the icons horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Mistral/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Mistral } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Mistral size={64} />\n    <Mistral.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Ollama Color Palette\nDESCRIPTION: Renders a color preview of the primary Ollama brand color using a custom ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ollama/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ollama } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Ollama.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Xuanyuan Icons in React\nDESCRIPTION: Demonstrates how to import and render both monochrome and colored versions of the Xuanyuan icon. Uses react-layout-kit for flexbox layout management.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xuanyuan/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xuanyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Xuanyuan size={64} />\n    <Xuanyuan.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Preview with V0 Colors in React (TypeScript)\nDESCRIPTION: This snippet shows how to render a color preview using the primary color from the V0 component. It imports necessary components and formats them within a Flexbox layout for displaying the color along with the ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/V0/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { V0 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={V0.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering BaiduCloud Icons in React\nDESCRIPTION: This snippet shows how to import and render both the default BaiduCloud icon and its colored version using the @lobehub/icons package. It uses the Flexbox component from react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BaiduCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaiduCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <BaiduCloud size={64} />\n    <BaiduCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Midjourney Icon using React\nDESCRIPTION: This snippet shows how to import and render the Midjourney icon from the '@lobehub/icons' library. The icon is rendered with a size of 64 pixels using a functional React component. The only dependency required is the '@lobehub/icons' package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Midjourney/index.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Midjourney } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Midjourney size={64} />;\n```\n\n----------------------------------------\n\nTITLE: OpenChat Color Preview\nDESCRIPTION: Demonstrates how to preview the primary color of the OpenChat icon component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenChat/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenChat } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={OpenChat.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Vidu Icons in React\nDESCRIPTION: Demonstrates the Combine variant of the Vidu icon, which includes both the icon and text. The example shows two versions - the default combined icon and a color variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vidu/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Vidu.Combine size={64} />\n    <Vidu.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Anthropic Avatar Components\nDESCRIPTION: Shows how to use Anthropic avatar components with different sizes and shapes, including both circular and square variants.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anthropic/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anthropic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Anthropic.Avatar size={64} />\n    <Anthropic.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Grok Combined Component\nDESCRIPTION: Displays the Grok combined icon component within a flexible layout using Flexbox with a gap of 16 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Grok/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grok } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Grok.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Import and Render MCP Icon in React\nDESCRIPTION: This snippet demonstrates how to import the MCP icon component from the `@lobehub/icons` library and render it within a React component. The `size` prop is used to control the icon's dimensions. The Flexbox component from `react-layout-kit` is used for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MCP/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MCP } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <MCP size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Color Preview with LeptonAI in TypeScript\nDESCRIPTION: This snippet showcases how to render a color preview using LeptonAI's primary color attribute. It employs the 'ColorPreview' component to create a visually distinct color sample within a layout structure from 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LeptonAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LeptonAI } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nimport ColorPreview from '../components/ColorPreview';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <ColorPreview color={LeptonAI.colorPrimary} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Ai360 Text Icon\nDESCRIPTION: Shows how to implement the text-only version of the Ai360 icon with custom sizing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai360/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai360 } from '@lobehub/icons';\n\nexport default () => <Ai360.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Adobe Text Icon\nDESCRIPTION: Shows how to implement the text version of the Adobe icon with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Adobe/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Adobe } from '@lobehub/icons';\n\nexport default () => <Adobe.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Version of xAI Icon\nDESCRIPTION: Demonstrates how to use the text variant of the XAI icon with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/XAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XAI } from '@lobehub/icons';\n\nexport default () => <XAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying AdobeFirefly Text Icon\nDESCRIPTION: Shows how to use the text variant of the AdobeFirefly icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AdobeFirefly/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdobeFirefly } from '@lobehub/icons';\n\nexport default () => <AdobeFirefly.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Inflection Avatars\nDESCRIPTION: Demonstrates rendering Inflection avatars with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inflection/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inflection } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Inflection.Avatar size={64} />\n    <Inflection.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Combined xAI Icon Format with Flexbox Layout\nDESCRIPTION: Shows how to render the combined version of the XAI icon within a Flexbox container with specific alignment and spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/XAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <XAI.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined LlamaIndex Icon in TSX\nDESCRIPTION: This snippet demonstrates how to render a combined version of the LlamaIndex icon using the `LlamaIndex.Combine` component from the `@lobehub/icons` library. It utilizes `Flexbox` from `react-layout-kit` to align the icon to the flex-start. The size of the combined icon is set to 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LlamaIndex/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LlamaIndex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LlamaIndex.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Baichuan Icons\nDESCRIPTION: Demonstrates how to render basic Baichuan icons in both regular and colored variants using the @lobehub/icons package. Uses Flexbox for horizontal layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baichuan/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baichuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Baichuan size={64} />\n    <Baichuan.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Colors in IFlyTekCloud Using React\nDESCRIPTION: This snippet uses the ColorPreview component to display a color preview from the IFlyTekCloud icon set. It utilizes the Flexbox for layout, relying on the \\'@lobehub/icons\\' and \\'react-layout-kit\\' packages. The snippet also requires the ColorPreview component from the local path.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/IFlyTekCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IFlyTekCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={IFlyTekCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined DeepInfra Icons\nDESCRIPTION: Examples of using combined icon variations with different types and sizes, arranged in a vertical flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepInfra/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepInfra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <DeepInfra.Combine size={64} />\n    <DeepInfra.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Exa Icons in React\nDESCRIPTION: This snippet illustrates the usage of Exa.Combine component to render combined icons, including both standard and colored versions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Exa/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Exa } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Exa.Combine size={64} />\n    <Exa.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Standard Zhipu Icons in React\nDESCRIPTION: Demonstrates how to import and render both the standard and color versions of the Zhipu icon. Uses the Flexbox component from react-layout-kit to arrange the icons horizontally with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zhipu/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zhipu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Zhipu size={64} />\n    <Zhipu.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Zhipu Icon with Text in React\nDESCRIPTION: Demonstrates the combined icon and text representation of the Zhipu brand. Shows both the default and color variants arranged vertically using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zhipu/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zhipu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Zhipu.Combine size={64} />\n    <Zhipu.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Fal Combine Component\nDESCRIPTION: Illustrates the usage of Fal.Combine component within a Flexbox container with specified gap and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fal/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fal } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Fal.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Glif Text Component\nDESCRIPTION: Shows how to use the Glif.Text variant of the component with a size of 48 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Glif/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Glif } from '@lobehub/icons';\n\nexport default () => <Glif.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Ollama Combined Logo\nDESCRIPTION: Displays the combined Ollama logo within a flexible container with gap and alignment settings\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ollama/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ollama } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Ollama.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic DBRX Icons\nDESCRIPTION: Demonstrates how to render the basic DBRX icon in both standard and colored variants using Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dbrx/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dbrx } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Dbrx size={64} />\n    <Dbrx.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Replit Icons with Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and display Replit icons using the Flexbox from React Layout Kit. The displayed icons are of size 64 and include both standard and colored variants. Dependencies include the React Layout Kit and LobeHub icon library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replit/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Replit size={64} />\n    <Replit.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Bedrock Icons\nDESCRIPTION: Demonstrates how to display both regular and colored versions of the Bedrock icon using the @lobehub/icons package\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bedrock/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bedrock } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Bedrock size={64} />\n    <Bedrock.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining ModelScope Components in React\nDESCRIPTION: The snippet guides on how to combine different ModelScope components together using react-layout-kit for layout management. It showcases creating a flexible UI with variations in styles and types, such as using different size and types like 'color'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ModelScope/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModelScope } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <ModelScope.Combine size={64} />\n    <ModelScope.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Gradio Icons with Flexbox in React\nDESCRIPTION: This snippet demonstrates how to render the Gradio icon and its color variation using Flexbox from 'react-layout-kit' for layout purposes. The components are imported and used in a default React function component, showcasing both standard and colored Gradio icons with a defined size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gradio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gradio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Gradio size={64} />\n    <Gradio.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TII Icons with Multiple Variants\nDESCRIPTION: Displays default and color variants of TII icons using React Flexbox for layout with configurable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TII/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TII } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <TII size={64} />\n    <TII.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CogView Combined Variants in TSX\nDESCRIPTION: Demonstrates the use of the CogView.Combine component with different types. The example shows two combined icons vertically aligned with a size of 64 pixels each - the default type and the color type.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogView/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogView } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CogView.Combine size={64} />\n    <CogView.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lambda Avatars\nDESCRIPTION: Shows multiple Lambda avatar variants with different sizes and shapes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lambda/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lambda } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Lambda.Avatar size={64} />\n    <Lambda.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Dify Icons\nDESCRIPTION: Demonstrates rendering both regular and colored versions of the Dify icon using the @lobehub/icons package with size customization.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dify/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dify } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Dify size={64} />\n    <Dify.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing RSSHub Colors in TypeScript\nDESCRIPTION: This snippet previews the primary color of the RSSHub icon using a custom ColorPreview component. It aligns components horizontally with Flexbox, requiring dependencies like '@lobehub/icons', 'react-layout-kit', and a custom '../components/ColorPreview' module.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/RSSHub/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RSSHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={RSSHub.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Anyscale Icon Variants\nDESCRIPTION: Demonstrates how to use the combined version of Anyscale icons with both default and color types in a vertical layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anyscale/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anyscale } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Anyscale.Combine size={64} />\n    <Anyscale.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Azure Icons\nDESCRIPTION: Demonstrates how to use the combined version of Azure icons with both default and color variants using vertical Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Azure/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Azure } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Azure.Combine size={64} />\n    <Azure.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Notion Elements using Flexbox in React\nDESCRIPTION: This code demonstrates the use of Flexbox from react-layout-kit to align and space Notion components vertically, utilizing the Notion.Combine component for rendering. It aligns the component with a flexible layout and sets a gap of 16 pixels. This setup requires importing both Notion and Flexbox components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Notion/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notion } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Notion.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Kimi Combine Icons\nDESCRIPTION: Demonstrates rendering combine icons with default and color variations using Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kimi/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kimi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Kimi.Combine size={64} />\n    <Kimi.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combined OpenChat Icon Rendering\nDESCRIPTION: Demonstrates rendering combined OpenChat icons with different styles and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenChat/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenChat } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <OpenChat.Combine size={64} />\n    <OpenChat.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying VectorizerAI Combine Icon\nDESCRIPTION: This snippet demonstrates how to render the Combine variant of the VectorizerAI icon within a Flexbox layout. It imports the VectorizerAI component from @lobehub/icons and uses react-layout-kit for the Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VectorizerAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VectorizerAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <VectorizerAI.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying IFlyTekCloud Avatars in React\nDESCRIPTION: The snippet shows how to render avatar versions of the IFlyTekCloud icons using IFlyTekCloud and Flexbox. It demonstrates the default and square-shaped avatars. The \\'@lobehub/icons\\' and \\'react-layout-kit\\' packages are required.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/IFlyTekCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IFlyTekCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <IFlyTekCloud.Avatar size={64} />\n    <IFlyTekCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Claude Combine Icons in React\nDESCRIPTION: Demonstrates the Combine variant of Claude icons which likely combines the logo with text. Shows both the default and color type variations arranged vertically.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Claude/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Claude } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Claude.Combine size={64} />\n    <Claude.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Mistral Avatar Icons with Different Shapes\nDESCRIPTION: This snippet demonstrates how to import the Mistral icon component from the '@lobehub/icons' library and render its avatar variation with different shapes and sizes using React and react-layout-kit. It showcases the use of `Mistral.Avatar` to display the icon as an avatar.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Mistral/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Mistral } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Mistral.Avatar size={64} />\n    <Mistral.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Xinference Icons\nDESCRIPTION: Demonstrates how to import and display the basic Xinference icon components in both regular and color variants using the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xinference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xinference } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Xinference size={64} />\n    <Xinference.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying ColorPreview with Recraft Styles in React\nDESCRIPTION: This snippet demonstrates the usage of a ColorPreview component to display colors from the Recraft library. A horizontal Flexbox layout from react-layout-kit is used for alignment. The ColorPreview component assumes the presence of a colorPrimary property in Recraft.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Recraft/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Recraft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Recraft.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Crusoe Avatar Icons in React\nDESCRIPTION: This code shows how to render Crusoe avatar icons in both circular and square shapes. It uses the Avatar subcomponent of the Crusoe icon and the Flexbox component for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Crusoe/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Crusoe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Crusoe.Avatar size={64} />\n    <Crusoe.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vidu Icons in React\nDESCRIPTION: Demonstrates how to import and use the standard Vidu icon and its color variant. The example shows two icons rendered side by side using the Flexbox component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vidu/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Vidu size={64} />\n    <Vidu.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CogView Icons with Basic and Color Variants in TSX\nDESCRIPTION: Demonstrates how to import and render both the basic CogView icon and its colored variant using the @lobehub/icons package. The example displays both icons horizontally with a size of 64 pixels and a gap of 16 pixels between them.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogView/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogView } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CogView size={64} />\n    <CogView.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Nova Icons\nDESCRIPTION: This snippet demonstrates how to render the combined versions of the Nova icon component, with default and colored types. It uses Flexbox from react-layout-kit for layout, aligning items to the start and setting a gap of 16 pixels. The size of the icons is set to 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nova/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Nova.Combine size={64} />\n    <Nova.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Copilot Combined Icon Variants\nDESCRIPTION: This code demonstrates how to use the combined format of the Microsoft Copilot icon, which likely includes both the icon and text elements together. It shows both the default and color variants in a vertical flexbox layout, each with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Copilot/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Copilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Copilot.Combine size={64} />\n    <Copilot.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LlamaIndex Text Icon in TSX\nDESCRIPTION: This snippet showcases how to render the text representation of the LlamaIndex icon using the `LlamaIndex.Text` component from the `@lobehub/icons` library. The size of the text icon is set to 48. This example demonstrates how to display the LlamaIndex icon as text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LlamaIndex/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LlamaIndex } from '@lobehub/icons';\n\nexport default () => <LlamaIndex.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Automatic1111 Icons\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the Automatic1111 icon using the @lobehub/icons package. Uses Flexbox for horizontal layout with 16px gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Automatic/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Automatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Automatic size={64} />\n    <Automatic.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying ComfyUI Icons in React\nDESCRIPTION: Example showing how to display regular and colored ComfyUI icons in a horizontal layout using the Flexbox component from react-layout-kit.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ComfyUI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComfyUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ComfyUI size={64} />\n    <ComfyUI.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Yuanbao Avatar Components\nDESCRIPTION: Shows how to use the Yuanbao.Avatar component with different shapes. Renders both circular (default) and square avatars with customizable size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yuanbao/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yuanbao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Yuanbao.Avatar size={64} />\n    <Yuanbao.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: SenseNova Combine Icons\nDESCRIPTION: Shows different variations of SenseNova combine icons with monochrome and color options\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SenseNova/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SenseNova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <SenseNova.Combine size={64} />\n    <SenseNova.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing GithubCopilot Icon Primary Color in React\nDESCRIPTION: This snippet shows how to access and display the primary color of the GithubCopilot icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GithubCopilot/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GithubCopilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={GithubCopilot.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering GithubCopilot Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the GithubCopilot icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GithubCopilot/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GithubCopilot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <GithubCopilot size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Crusoe Icons in React\nDESCRIPTION: This snippet demonstrates how to render both standard and colored Crusoe icons using the @lobehub/icons package. It uses the Flexbox component from react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Crusoe/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Crusoe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Crusoe size={64} />\n    <Crusoe.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Cline Component\nDESCRIPTION: Demonstrates the combined version of the Cline icon within a flexible box layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cline/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cline } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Cline.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Recraft Component with Flexbox in React\nDESCRIPTION: This code demonstrates combining the Recraft component with a Flexbox layout from react-layout-kit. It shows how to display the Recraft.Combine component with a size of 64 pixels and align it flex-start using Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Recraft/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Recraft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Recraft.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Volcengine Avatar Icons in React\nDESCRIPTION: Shows how to use the Volcengine avatar components in both circular (default) and square shapes. Both avatars are rendered at 64px size in a horizontal flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Volcengine/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Volcengine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Volcengine.Avatar size={64} />\n    <Volcengine.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering VertexAI Icons in React\nDESCRIPTION: Demonstrates how to render the standard and colorized versions of the VertexAI icon. The component accepts a size prop to control the dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VertexAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VertexAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <VertexAI size={64} />\n    <VertexAI.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Gemma Avatars in React\nDESCRIPTION: This snippet demonstrates various ways to render Gemma avatars, including different backgrounds, sizes, and shapes. It uses the Avatar subcomponent of the Gemma icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemma/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Gemma.Avatar size={64} background={Gemma.colorPrimary} />\n    <Gemma.Avatar size={64} />\n    <Gemma.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining AWS Icons\nDESCRIPTION: Demonstrates combined AWS icons implementation with regular and colored variants using vertical Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aws/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aws } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Aws.Combine size={64} />\n    <Aws.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Hedra Avatar Icons\nDESCRIPTION: Demonstrates multiple Hedra avatar icon styles with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hedra/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hedra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hedra.Avatar size={64} />\n    <Hedra.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CodeGeeX Combined Icon Variants\nDESCRIPTION: Demonstrates how to use the Combine subcomponent of CodeGeeX which displays both the icon and text together. The example shows two variants arranged vertically - the default combined icon and a color version specified by the type prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CodeGeeX/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeGeeX } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CodeGeeX.Combine size={64} />\n    <CodeGeeX.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Meta Avatar Icons\nDESCRIPTION: Renders Meta avatar icons with different sizes, backgrounds, and shape configurations\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Meta/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Meta.Avatar size={64} background={Meta.colorPrimary} />\n    <Meta.Avatar size={64} />\n    <Meta.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering xAI Icon in React\nDESCRIPTION: Shows how to import and render the basic XAI icon component with a specified size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/XAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <XAI size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Using DBRX Color Preview\nDESCRIPTION: Shows how to implement a color preview component using the DBRX primary color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dbrx/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dbrx } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Dbrx.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Doc2X Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render the Doc2X icon component in both standard and color variants using React and the react-layout-kit Flexbox component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doc2X/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doc2X } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Doc2X size={64} />\n    <Doc2X.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Hyperbolic Icons with Flexbox in React\nDESCRIPTION: This snippet imports the Hyperbolic icon from '@lobehub/icons' and uses Flexbox from 'react-layout-kit' to arrange two Hyperbolic icons horizontally with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hyperbolic/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hyperbolic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hyperbolic size={64} />\n    <Hyperbolic.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering NotebookLM Text Variant\nDESCRIPTION: This code snippet shows how to render the 'Text' variant of the NotebookLM icon.  It imports the NotebookLM component from '@lobehub/icons' and then accesses the Text property to render this specific variant. The size prop customizes the rendered text size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NotebookLM/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotebookLM } from '@lobehub/icons';\n\nexport default () => <NotebookLM.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Fireworks Icons\nDESCRIPTION: Demonstrates rendering basic Fireworks icons in both standard and color variants using the @lobehub/icons package with react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fireworks/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fireworks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Fireworks size={64} />\n    <Fireworks.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Hunyuan Icons in React\nDESCRIPTION: This code snippet showcases how to combine different Hunyuan icons using the Hunyuan.Combine variant from the @lobehub/icons library. It imports the Hunyuan component and utilizes the Flexbox component from react-layout-kit for layout. Two combined icons are displayed, one with the default type and another with the 'color' type.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hunyuan/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hunyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Hunyuan.Combine size={64} />\n    <Hunyuan.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Qwen Text Icon\nDESCRIPTION: Displays the Qwen text icon with a specified size using the Text subcomponent\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qwen/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qwen } from '@lobehub/icons';\n\nexport default () => <Qwen.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Fal Icon Component\nDESCRIPTION: Demonstrates the basic usage of the Fal icon component with a specified size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fal/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fal } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Fal size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Infinigence Icons\nDESCRIPTION: Demonstrates rendering default and color variants of Infinigence icons with customizable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infinigence/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Infinigence } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Infinigence size={64} />\n    <Infinigence.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Nvidia Icons\nDESCRIPTION: This snippet demonstrates how to import and render the Nvidia icon component and its color variant from the @lobehub/icons library. It utilizes React and Typescript. The icons are displayed side-by-side within a Flexbox layout for visual comparison.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nvidia/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nvidia } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Nvidia size={64} />\n    <Nvidia.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Ideogram Icons\nDESCRIPTION: This snippet illustrates how to combine the Ideogram icon with the Flexbox layout. It uses a gap of 16 pixels and aligns the items to the start of the Flexbox, rendering the combined Ideogram icon with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ideogram/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ideogram } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Ideogram.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Github Brand Colors\nDESCRIPTION: Demonstrates how to use the Github brand color constant with a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Github/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Github } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Github.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined LLaVA Icons\nDESCRIPTION: This snippet renders combined LLaVA icons with different configurations. It imports LLaVA from @lobehub/icons and Flexbox from react-layout-kit. It showcases setting the type to 'color' for one of the combined icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LLaVA/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LLaVA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LLaVA.Combine size={64} />\n    <LLaVA.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Standard SiliconCloud Icons with Flexbox in React\nDESCRIPTION: This snippet showcases how to render SiliconCloud icons using the Flexbox component from the react-layout-kit. It includes two instances of SiliconCloud icons with a fixed size of 64 pixels, positioned horizontally with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SiliconCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SiliconCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <SiliconCloud size={64} />\n    <SiliconCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Claude Brand Colors in React\nDESCRIPTION: Demonstrates how to access and display the primary brand color of Claude. Uses a custom ColorPreview component to visualize the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Claude/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Claude } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Claude.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining AiHubMix Icons in React\nDESCRIPTION: Illustrates the use of the combined version of AiHubMix icons. It shows both the default and colored combined icons in a vertical flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiHubMix/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiHubMix } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AiHubMix.Combine size={64} />\n    <AiHubMix.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Spark Icons\nDESCRIPTION: This snippet demonstrates how to display combined variations of the Spark icon using the `Spark.Combine` component. It shows how to customize the type with the `type` prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Spark/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spark } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Spark.Combine size={64} />\n    <Spark.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Perplexity Icons\nDESCRIPTION: This snippet demonstrates how to import the Perplexity icon from the @lobehub/icons library and render it with different sizes. It also uses the Flexbox component from react-layout-kit for layout. The `Perplexity.Color` variant is also showcased.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Perplexity/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Perplexity } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Perplexity size={64} />\n    <Perplexity.Color size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Combining PixVerse Icons with Flexbox in React\nDESCRIPTION: This snippet combines multiple PixVerse icons with a specific type setting using Flexbox layout. It shows how to define gaps and alignments for the icons in a responsive manner.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PixVerse/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PixVerse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <PixVerse.Combine size={64} />\n    <PixVerse.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: AWS Brand Icons\nDESCRIPTION: Shows implementation of AWS brand icons in both regular and colored versions using vertical Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aws/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aws } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Aws.Brand size={64} />\n    <Aws.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AiStudio Avatar Icons\nDESCRIPTION: Shows how to use the AiStudio avatar component with different shapes and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiStudio/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AiStudio.Avatar size={64} />\n    <AiStudio.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating vLLM Avatar Components\nDESCRIPTION: Shows how to create avatar components using the vLLM icon in both circular (default) and square shapes. Uses Flexbox to arrange avatars horizontally with appropriate spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vllm/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vllm } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Vllm.Avatar size={64} />\n    <Vllm.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Jina Color Preview in Flexbox - React TSX\nDESCRIPTION: This snippet showcases how to integrate a color preview component with the Jina color scheme using Flexbox layout. It imports the ColorPreview component and displays it with the primary Jina color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Jina/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Jina } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Jina.colorPrimary} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering StateCloud Avatars in React\nDESCRIPTION: This TypeScript snippet details rendering of StateCloud.Avatar components in a React application using the Flexbox for layout. Two avatars are shown, one with the default round shape and another with a square shape, both at a size of 64 pixels. Dependencies are @lobehub/icons for avatars and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/StateCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StateCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <StateCloud.Avatar size={64} />\n    <StateCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatar Icons with Flexbox in TypeScript\nDESCRIPTION: Here, 'Poe.Avatar' icons are rendered with Flexbox in a horizontal layout. Two avatar styles are demonstrated: circular and square, both set to a size of 64 pixels. The snippet illustrates avatar customization using size and shape properties.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Poe/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Poe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Poe.Avatar size={64} />\n    <Poe.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AionLabs Avatars\nDESCRIPTION: Shows how to implement AionLabs avatars in both circular and square shapes, arranged horizontally with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AionLabs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AionLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AionLabs.Avatar size={64} />\n    <AionLabs.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Xuanyuan Avatar Components\nDESCRIPTION: Shows how to use Xuanyuan as an avatar in both circle (default) and square shapes with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xuanyuan/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xuanyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Xuanyuan.Avatar size={64} />\n    <Xuanyuan.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using AdobeFirefly Combined Icon\nDESCRIPTION: Demonstrates the usage of the combined variant of the AdobeFirefly icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AdobeFirefly/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdobeFirefly } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <AdobeFirefly.Combine size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering LangGraph Avatar Icons\nDESCRIPTION: Shows how to render LangGraph avatar icons with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangGraph/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangGraph } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LangGraph.Avatar size={64} />\n    <LangGraph.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Nova Icons\nDESCRIPTION: This snippet demonstrates how to import and render the basic and colored versions of the Nova icon component. It utilizes the Flexbox component from react-layout-kit to arrange the icons horizontally with a gap of 16 pixels. The size of the icons is set to 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nova/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Nova size={64} />\n    <Nova.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using CommandA Colors\nDESCRIPTION: Demonstrates how to use the primary color of the CommandA icon with a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CommandA/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommandA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={CommandA.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Goose with Flexbox\nDESCRIPTION: This snippet demonstrates how to combine the Goose icon with a Flexbox layout, allowing for multiple components to be arranged with spacing. It shows the Goose.Combine component in a Flexbox with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Goose/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Goose } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Goose.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic PaLM Icons\nDESCRIPTION: Demonstrates rendering default and color variations of PaLM icons with configurable sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PaLM/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PaLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <PaLM size={64} />\n    <PaLM.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons with Flexbox in TSX\nDESCRIPTION: This snippet shows how to render 'Stability.Combine' icons in a React component using the 'Flexbox' layout for flexible spacing. Different 'type' props offer visual variations, enhancing design options.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stability/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stability } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Stability.Combine size={64} />\n    <Stability.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Baidu Brand Logos in React\nDESCRIPTION: Demonstrates the usage of Baidu brand logos in standard and colored variants. The logos are arranged vertically with left alignment and a 16-pixel gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baidu/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Baidu.Brand size={64} />\n    <Baidu.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Viggle Combined Component in React\nDESCRIPTION: Demonstrates using the Viggle.Combine component within a Flexbox layout with a specified size and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Viggle/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Viggle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Viggle.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering RSSHub Text Icon in TypeScript\nDESCRIPTION: This snippet illustrates rendering a text variant of the RSSHub icon with a specific size. The implementation is straightforward and only depends on the RSSHub package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/RSSHub/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RSSHub } from '@lobehub/icons';\n\nexport default () => <RSSHub.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Flowith Icon in React\nDESCRIPTION: This snippet shows how to import and render the Flowith icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flowith/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flowith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Flowith size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering AzureAI Text Icon in React\nDESCRIPTION: This snippet shows how to use the text version of the AzureAI icon. It imports the AzureAI component and renders its Text subcomponent.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AzureAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AzureAI } from '@lobehub/icons';\n\nexport default () => <AzureAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining DreamMachine Component in React\nDESCRIPTION: This code snippet demonstrates how to use the DreamMachine.Combine component to create a combined element with a size of 64. It utilizes 'Flexbox' from 'react-layout-kit' for layout flexibility and requires the 'DreamMachine' component from '@lobehub/icons'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DreamMachine/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DreamMachine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <DreamMachine.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic MyShell Icons Using Flexbox in React\nDESCRIPTION: This snippet imports MyShell icon components and uses the Flexbox layout from react-layout-kit to render them with a specified gap. The icons are displayed side by side and utilize a size prop for scaling.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MyShell/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyShell } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <MyShell size={64} />\n    <MyShell.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Grok Icon in React\nDESCRIPTION: Displays the standard Grok icon with a specified size of 64 pixels using the @lobehub/icons library\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Grok/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grok } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Grok size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Tencent Text Icons\nDESCRIPTION: This snippet imports the Tencent icon and renders two text-based variations: `Tencent.Text` and `Tencent.TextCn`. It uses the Flexbox component to arrange these icons with a gap of 16 pixels and aligns them to the flex-start. The size of both text icons is set to 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tencent/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tencent } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Tencent.Text size={48} />\n    <Tencent.TextCn size={48} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Nvidia Color Preview\nDESCRIPTION: This snippet showcases how to display a color preview using the `Nvidia.colorPrimary` variable from the `@lobehub/icons` library.  It uses a custom `ColorPreview` component to display the color. This demonstrates accessing and utilizing the primary color defined for the Nvidia icon within the library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nvidia/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nvidia } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Nvidia.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Clipdrop Icon in React\nDESCRIPTION: This code shows how to use the combined version of the Clipdrop icon within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Clipdrop/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Clipdrop } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Clipdrop.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using AlephAlpha Combined Component\nDESCRIPTION: Demonstrates the combined version of the AlephAlpha icon within a flex container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlephAlpha/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlephAlpha } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AlephAlpha.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering NPLCloud Icons in Horizontal Layout\nDESCRIPTION: Displays default and color variations of NPLCloud icons using Flexbox with size configuration\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NPLCloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NPLCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <NPLCloud size={64} />\n    <NPLCloud.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Hyperbolic Icons with Flexbox\nDESCRIPTION: In this snippet, Hyperbolic Combine icons are displayed using Flexbox, allowing for horizontal alignment with varied types and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hyperbolic/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hyperbolic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Hyperbolic.Combine size={64} />\n    <Hyperbolic.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Nebius Avatars with Flexbox\nDESCRIPTION: This code snippet describes importing Nebius Avatar components and organizing them in a Flexbox layout for horizontal alignment, enabling custom sizing and shape through props. It relies on react-layout-kit for layout management and lobe-icons for component access.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nebius/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Nebius } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Nebius.Avatar size={64} />\n    <Nebius.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Render MCP Combined Variant in React\nDESCRIPTION: This example demonstrates how to render the `Combine` variant of the MCP icon. The `Combine` variant, accessed as `MCP.Combine`, likely represents a combination of visual elements. The Flexbox component is used to add spacing around the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MCP/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MCP } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <MCP.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combine Railway Icon with Flexbox in React\nDESCRIPTION: This snippet shows how to render the `Railway.Combine` variant of the Railway icon within a Flexbox layout. The `Flexbox` component from `react-layout-kit` is used to manage the layout and spacing.  The `size` prop is used to control the icon's dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Railway/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Railway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Railway.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Langfuse Avatars in Flexbox in TypeScript\nDESCRIPTION: This snippet demonstrates rendering 'Langfuse.Avatar' icons within a Flexbox layout. It illustrates horizontal arrangement with gap and different shapes ('default' and 'square') of avatars. It uses '@lobehub/icons' for icons and 'react-layout-kit' for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Langfuse/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Langfuse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Langfuse.Avatar size={64} />\n    <Langfuse.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Anyscale Icons\nDESCRIPTION: Demonstrates how to render basic Anyscale icons in both default and color variants using the @lobehub/icons package with react-layout-kit's Flexbox component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anyscale/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anyscale } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Anyscale size={64} />\n    <Anyscale.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Runway Color Palette\nDESCRIPTION: Shows how to access and preview the primary Runway brand color using a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Runway/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Runway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Runway.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Glif Avatars with Different Shapes\nDESCRIPTION: Demonstrates rendering multiple Glif avatars with different shapes (default and square) in a horizontal layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Glif/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Glif } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Glif.Avatar size={64} />\n    <Glif.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nebius Icon Component in React\nDESCRIPTION: This code snippet demonstrates how to import and use the Nebius icon component from lobe-icons in a React function component. The component is rendered at a specified size using its 'size' prop. No additional dependencies are required beyond React and lobe-icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nebius/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Nebius } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Nebius size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Moonshot Icons\nDESCRIPTION: This snippet demonstrates how to combine multiple Moonshot icons using a Flexbox layout while controlling gaps and alignment. It illustrates rendering icons with different types and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Moonshot/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moonshot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Moonshot.Combine size={64} />\n    <Moonshot.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Automatic1111 Icons\nDESCRIPTION: Demonstrates the combined version of Automatic1111 icons with both default and colored variants, arranged vertically with Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Automatic/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Automatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Automatic.Combine size={64} />\n    <Automatic.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Lightricks Icons with Flexbox Layout\nDESCRIPTION: In this snippet, multiple Lightricks icons are combined within a Flexbox layout to create a structured output with custom gap and alignment. The functional component leverages both the icon library and the layout kit.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lightricks/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lightricks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Lightricks.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Runway Combined Icon\nDESCRIPTION: Displays a combined Runway icon within a flexible layout container\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Runway/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Runway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Runway.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ComfyUI Combined Icons in React\nDESCRIPTION: Example demonstrating how to use the ComfyUI.Combine component with both default and color variants, arranged in a vertical layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ComfyUI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComfyUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <ComfyUI.Combine size={64} />\n    <ComfyUI.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Suno Primary Color Preview\nDESCRIPTION: This snippet demonstrates how to access and display the primary color associated with the Suno icon. It imports the Suno component from the @lobehub/icons library and uses its colorPrimary property.  It uses a ColorPreview component (presumably defined elsewhere) to render the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Suno/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suno } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Suno.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Coqui Combined Icons in React\nDESCRIPTION: This example illustrates the usage of combined Coqui icons. It shows how to render both standard and colored versions of the combined icon, each with a size of 64 pixels, within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coqui/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coqui } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Coqui.Combine size={64} />\n    <Coqui.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Vercel Text Component in React\nDESCRIPTION: Shows how to implement the text variant of the Vercel brand using the Text subcomponent.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vercel/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vercel } from '@lobehub/icons';\n\nexport default () => <Vercel.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying SambaNova Avatars\nDESCRIPTION: This snippet demonstrates how to render different variants of SambaNova avatars in a horizontal Flexbox layout, allowing for customization of size and shape attributes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SambaNova/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SambaNova } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <SambaNova.Avatar size={64} />\\n    <SambaNova.Avatar size={64} shape={'square'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying FishAudio Primary Color in React\nDESCRIPTION: Shows how to access and display the primary color of the FishAudio icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/FishAudio/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FishAudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={FishAudio.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying AzureAI Color Preview in React\nDESCRIPTION: This snippet demonstrates how to access and display the primary color of the AzureAI icon. It uses a custom ColorPreview component to showcase the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AzureAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AzureAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AzureAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined NPLCloud Icons\nDESCRIPTION: Shows different styling options for combined NPLCloud icons using Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NPLCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NPLCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <NPLCloud.Combine size={64} />\n    <NPLCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Friendli Icon in React\nDESCRIPTION: Demonstrates how to import and render the basic Friendli icon component with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Friendli/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Friendli } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Friendli size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic and Colored Hailuo Icons\nDESCRIPTION: This snippet demonstrates how to import and render the basic and colored versions of the Hailuo icon using the `Hailuo` component from the `@lobehub/icons` library. It utilizes `Flexbox` from `react-layout-kit` to arrange the icons horizontally with a gap of 16 pixels. The `size` prop controls the dimensions of the icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hailuo/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hailuo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hailuo size={64} />\n    <Hailuo.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Hyperbolic Avatars with Flexbox\nDESCRIPTION: This snippet showcases the use of Flexbox to display two Hyperbolic Avatar icons, one being a standard circle and the other in a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hyperbolic/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hyperbolic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Hyperbolic.Avatar size={64} />\n    <Hyperbolic.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: AWS Avatar Components\nDESCRIPTION: Demonstrates AWS avatar implementations in both circular and square shapes using horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aws/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aws } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Aws.Avatar size={64} />\n    <Aws.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Midjourney Icons with Flexbox\nDESCRIPTION: The snippet illustrates combining the Midjourney.Combine icon with Flexbox for layout management. It uses '@lobehub/icons' for the icon and 'react-layout-kit' for the Flexbox component, showing a layout with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Midjourney/index.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Midjourney } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Midjourney.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Ai360 Icon Variants\nDESCRIPTION: Demonstrates how to use the combined version of the Ai360 icon with both default and colored types in a vertical layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai360/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai360 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Ai360.Combine size={64} />\n    <Ai360.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lightricks Avatars with Flexbox\nDESCRIPTION: This snippet demonstrates how to render multiple Lightricks avatar components within a horizontal Flexbox layout. It includes options for specifying avatar size and shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lightricks/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lightricks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Lightricks.Avatar size={64} />\n    <Lightricks.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Brand Icons with Flexbox in TSX\nDESCRIPTION: This snippet demonstrates the rendering of 'Stability.Brand' icons within a 'Flexbox' layout. The example illustrates how different 'Brand' themes can be incorporated for more diverse icon presentations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stability/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stability } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Stability.Brand size={64} />\n    <Stability.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using CentML Color Previews\nDESCRIPTION: Shows how to use the primary color constant from CentML with a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CentML/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CentML } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={CentML.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nova Avatars\nDESCRIPTION: This snippet showcases how to render different variations of Nova avatars, including setting a background color (using `Nova.colorPrimary`), and changing the shape to 'square'.  Flexbox is used for horizontal layout with a gap of 16.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nova/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Nova.Avatar size={64} background={Nova.colorPrimary} />\n    <Nova.Avatar size={64} />\n    <Nova.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Moonshot Icon\nDESCRIPTION: This snippet imports the Moonshot icon component and renders it with a specified size. It demonstrates how to use a basic icon in a React functional component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Moonshot/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moonshot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Moonshot size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic and Color LangGraph Icons\nDESCRIPTION: Demonstrates rendering default and color variants of LangGraph icons with different sizes using Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangGraph/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangGraph } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LangGraph size={64} />\n    <LangGraph.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined AssemblyAI Icons in React\nDESCRIPTION: This snippet illustrates how to use the combined version of AssemblyAI icons, including both standard and colored variants, in a React component using the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AssemblyAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssemblyAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AssemblyAI.Combine size={64} />\n    <AssemblyAI.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Kera Icon\nDESCRIPTION: Displays a combined Kera icon with a specific size inside a flexible layout container\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kera/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kera } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Kera.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LangGraph Combine Icons\nDESCRIPTION: Demonstrates rendering default and color variants of LangGraph combine icons using Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangGraph/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangGraph } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LangGraph.Combine size={64} />\n    <LangGraph.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Featherless Avatars\nDESCRIPTION: Shows how to use Featherless avatar components with different shapes (circle and square) and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Featherless/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Featherless } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Featherless.Avatar size={64} />\n    <Featherless.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Cloudflare Brand Colors in React\nDESCRIPTION: This code demonstrates how to access and display the primary brand color of Cloudflare using the @lobehub/icons package, react-layout-kit, and a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cloudflare/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cloudflare } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Cloudflare.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Haiper Combined Icon\nDESCRIPTION: Displays the Haiper combined icon within a flexible layout with spacing\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Haiper/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Haiper } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Haiper.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Replit Primary Color in TypeScript\nDESCRIPTION: This snippet previews the primary color of Replit icons using the ColorPreview component. It showcases how to extract and display icon-specific colors within a Flexbox layout. It imports extra components which must be defined or available in the same project.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replit/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Replit.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple SearchApi Avatars in Flexbox\nDESCRIPTION: This snippet renders multiple SearchApi avatars with different shapes using a Flexbox layout, specifying the size for each avatar.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SearchApi/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchApi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <SearchApi.Avatar size={64} />\n    <SearchApi.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying VectorizerAI Icon\nDESCRIPTION: This snippet demonstrates how to import and render the base VectorizerAI icon component with a specified size within a Flexbox layout. It uses the @lobehub/icons library for the icon and react-layout-kit for the Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VectorizerAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VectorizerAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <VectorizerAI size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Spark Color Preview\nDESCRIPTION: This snippet showcases how to display a color preview using the `Spark.colorPrimary` variable and a `ColorPreview` component. This assumes the existence of a `ColorPreview` component in the relative path.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Spark/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spark } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Spark.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons in Flexbox React\nDESCRIPTION: Demonstrates the combination of Search1API components in a Flexbox layout, allowing specification of size and type. This snippet needs the @lobehub/icons and react-layout-kit packages.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Search1API/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Search1API } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Search1API.Combine size={64} />\n    <Search1API.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Flora Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the Flora icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flora/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flora } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Flora size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic DeepInfra Icons\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the DeepInfra icon using the @lobehub/icons package. Shows usage with size customization and horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepInfra/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepInfra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepInfra size={64} />\n    <DeepInfra.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Perplexity Colors\nDESCRIPTION: This code snippet shows how to access and render the primary color associated with the Perplexity icon using `Perplexity.colorPrimary`. It utilizes a `ColorPreview` component (defined elsewhere) to display the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Perplexity/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Perplexity } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Perplexity.colorPrimary} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using the Yandex Combine Component\nDESCRIPTION: This example demonstrates the Combine variant of the Yandex icon, which likely combines both icon and text elements. It's rendered within a Flexbox container with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yandex/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yandex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Yandex.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Copilot Text-Only Variant\nDESCRIPTION: This snippet shows how to render the text-only version of the Microsoft Copilot icon. The component is imported from @lobehub/icons and displayed with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Copilot/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Copilot } from '@lobehub/icons';\n\nexport default () => <Copilot.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepAI Avatar Icons in React\nDESCRIPTION: This example shows how to use the avatar version of the DeepAI icon, including both circular and square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepAI.Avatar size={64} />\n    <DeepAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TopazLabs Avatars in Flexbox\nDESCRIPTION: This snippet demonstrates the rendering of multiple TopazLabs Avatar icons within a horizontal Flexbox layout, showcasing the ability to specify different shapes and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TopazLabs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TopazLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <TopazLabs.Avatar size={64} />\n    <TopazLabs.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fireworks Avatars\nDESCRIPTION: Shows how to use Fireworks avatars with different shapes and sizes in a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fireworks/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fireworks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Fireworks.Avatar size={64} />\n    <Fireworks.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Cursor Icon in React Flexbox\nDESCRIPTION: This snippet illustrates how to use the combined version of the Cursor icon within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cursor/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cursor } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Cursor.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Kera Icon\nDESCRIPTION: Displays a Kera icon with a specified size using the default icon component from @lobehub/icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kera/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kera } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Kera size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Snowflake Icons with Flexbox - React\nDESCRIPTION: This snippet demonstrates the combination of Snowflake icons rendered in a Flexbox container. It includes a color variant of the Snowflake icon, both with a specified size of 64 pixels, allowing for variations in design.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Snowflake/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Snowflake } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Snowflake.Combine size={64} />\n    <Snowflake.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Combined Xuanyuan Icon Variants\nDESCRIPTION: Demonstrates the combined icon version of Xuanyuan in both default and color types. Vertically stacks the icons using Flexbox with alignment set to flex-start.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xuanyuan/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xuanyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Xuanyuan.Combine size={64} />\n    <Xuanyuan.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LangSmith Text Icon\nDESCRIPTION: Displays the LangSmith text icon with a specified size using the text variant\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangSmith/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangSmith } from '@lobehub/icons';\n\nexport default () => <LangSmith.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining HuggingFace Icons in Flexbox Using TypeScript\nDESCRIPTION: The code demonstrates how to vertically align HuggingFace icon combinations using Flexbox. It relies on \\'@lobehub/icons\\' and \\'react-layout-kit\\' packages. The combine component accepts size and type attributes, producing mixed type icons as output.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/HuggingFace/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HuggingFace } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <HuggingFace.Combine size={64} />\n    <HuggingFace.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkersAI Avatars\nDESCRIPTION: Shows how to use the Avatar component for WorkersAI with different shapes. Supports both circular (default) and square shapes through the shape prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/WorkersAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WorkersAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <WorkersAI.Avatar size={64} />\n    <WorkersAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PaLM Avatar Icons\nDESCRIPTION: Demonstrates PaLM avatar icons with different shape configurations\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PaLM/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PaLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <PaLM.Avatar size={64} />\n    <PaLM.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Spark Avatar Icons\nDESCRIPTION: This snippet illustrates how to display Spark avatar icons using the `Spark.Avatar` component and customize the shape using the `shape` prop. It's leveraging `react-layout-kit` for styling.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Spark/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spark } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Spark.Avatar size={64} />\n    <Spark.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Civitai Avatars in React\nDESCRIPTION: This snippet shows how to use the avatar variant of the Civitai icon in both circular and square shapes within a React component, utilizing the react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Civitai/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Civitai } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Civitai.Avatar size={64} />\n    <Civitai.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Parasail Avatar Icons\nDESCRIPTION: This snippet demonstrates how to use the Avatar variant of the Parasail icon. It imports the necessary components and renders two `Parasail.Avatar` components within a `Flexbox` layout, setting the size and shape properties for customization.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Parasail/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Parasail } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Parasail.Avatar size={64} />\n    <Parasail.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenRouter Avatar Icons in React\nDESCRIPTION: This snippet demonstrates how to render the Avatar variant of the OpenRouter icon with different shapes within a Flexbox layout.  It imports the OpenRouter component from `@lobehub/icons` and renders two `OpenRouter.Avatar` sub-components, one with the default circular shape and another with a square shape, setting the size to 64 pixels and arranging them horizontally with a gap of 16 pixels. The component requires the `@lobehub/icons` and `react-layout-kit` dependencies.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenRouter/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenRouter } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <OpenRouter.Avatar size={64} />\n    <OpenRouter.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PPIO Icons using Flexbox in TypeScript\nDESCRIPTION: This snippet shows how to import and use PPIO components from LobeHub to render icons within a Flexbox layout. It demonstrates adjusting icon size and alignment using Flexbox properties, offering a reusable UI component with customizable styles. Dependencies include react-layout-kit for Flexbox handling and PPIO from @lobehub/icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PPIO/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PPIO } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <PPIO size={64} />\n    <PPIO.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Groq Icon\nDESCRIPTION: Demonstrates how to render a Groq icon with a specific size in a React component. Requires the '@lobehub/icons' package. The key parameter is 'size' which sets the dimensions of the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Groq/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Groq } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Groq size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Kluster Avatars in React with Flexbox\nDESCRIPTION: Provides an example of using Kluster avatar components within a React Flexbox. By importing necessary components, it renders Kluster.Avatar subcomponent with a size of 64 pixels and demonstrates variations in shape, such as default and square. Arranged in a horizontal layout with a specified gap, this snippet emphasizes avatar configuration.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kluster/index.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Kluster } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kluster.Avatar size={64} />\n    <Kluster.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Color Preview in React Using Udio Colors\nDESCRIPTION: This snippet shows how to visualize Udio's primary color using a ColorPreview component within a Flexbox layout. The snippet imports the necessary components and arranges them for a clean presentation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Udio/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Udio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Udio.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Zhipu Brand Colors in React\nDESCRIPTION: Demonstrates how to access and preview the primary brand color for Zhipu. Uses a custom ColorPreview component to display the color value stored in Zhipu.colorPrimary.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zhipu/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zhipu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Zhipu.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Yi Color Constants\nDESCRIPTION: Demonstrates how to access and preview the primary color defined for the Yi icon. This example imports the ColorPreview component and uses it to display the Yi.colorPrimary constant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yi/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Yi.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Grok Avatar Components\nDESCRIPTION: Demonstrates two Grok avatar variants with different shapes and a size of 64 pixels, arranged horizontally\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Grok/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grok } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Grok.Avatar size={64} />\n    <Grok.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Bing Combined Icons\nDESCRIPTION: This snippet demonstrates how to use the Combine variant of the Bing icon, which likely combines the icon and text. It shows both default and color type options for the combined icons, arranged vertically using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bing/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bing } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Bing.Combine size={64} />\n    <Bing.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Vidu Color Constants in React\nDESCRIPTION: Demonstrates how to access and use the color constants provided by the Vidu component. The example shows both the primary color and gradient color being previewed with a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vidu/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Vidu.colorPrimary} />\n    <ColorPreview color={Vidu.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Cline Color Preview\nDESCRIPTION: Demonstrates how to use the primary color of the Cline icon in a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cline/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cline } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Cline.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Automatic1111 Color Preview\nDESCRIPTION: Demonstrates how to use the primary color of the Automatic1111 icon with a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Automatic/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Automatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Automatic.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing ZeroOne Brand Colors\nDESCRIPTION: Demonstrates how to access and preview the primary brand color of ZeroOne. This example uses a custom ColorPreview component to display the predefined colorPrimary value from the ZeroOne component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ZeroOne/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ZeroOne } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={ZeroOne.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing xAI Brand Colors\nDESCRIPTION: Shows how to access and display the primary brand color of xAI using a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/XAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={XAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Yandex Brand Colors\nDESCRIPTION: This example demonstrates how to access and preview the primary color associated with the Yandex brand using the ColorPreview component and Yandex.colorPrimary property.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yandex/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yandex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Yandex.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Monica Icons with Flexbox Layout - TSX\nDESCRIPTION: This snippet displays how to render combined Monica icons using the Flexbox component. It demonstrates the ability to render the Monica.Combine component with two instances: one with the default type and another with a color type, both set to a size of 64 pixels and aligned at the start of the container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Monica/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monica } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Monica.Combine size={64} />\n    <Monica.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CodeGeeX Icons in Standard and Color Variants\nDESCRIPTION: Demonstrates how to import and render the CodeGeeX icon in both standard and color variants using the @lobehub/icons package. The example shows both icons placed horizontally in a Flexbox container with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CodeGeeX/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeGeeX } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CodeGeeX size={64} />\n    <CodeGeeX.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Flux Avatar Icons in React\nDESCRIPTION: This snippet illustrates how to use Flux avatar icons with different shapes and sizes in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flux/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flux } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Flux.Avatar size={64} />\n    <Flux.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Infermatic Avatars with Flexbox\nDESCRIPTION: Renders Infermatic.Avatar icons inside a Flexbox layout from react-layout-kit, showcasing different shapes. Requires 'lobehub/icons'. Adjust size and shape using size and shape props. Outputs avatar components in a Flexbox. Ensure Flexbox support for horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infermatic/index.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Infermatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Infermatic.Avatar size={64} />\n    <Infermatic.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Automatic1111 Avatars\nDESCRIPTION: Shows how to implement avatar versions of the Automatic1111 icon in both circular and square shapes with specified sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Automatic/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Automatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Automatic.Avatar size={64} />\n    <Automatic.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Qwen Icons with Different Styles\nDESCRIPTION: Renders Qwen combine icons in both default and color variations using React Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qwen/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qwen } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Qwen.Combine size={64} />\n    <Qwen.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TopazLabs Icon\nDESCRIPTION: This snippet imports the TopazLabs icon and renders it with a specified size of 64 pixels using a stateless functional component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TopazLabs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TopazLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <TopazLabs size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Phidata Icons\nDESCRIPTION: This snippet imports the Phidata icon from the @lobehub/icons library and renders two instances of it using react-layout-kit's Flexbox for layout.  It demonstrates the basic usage of the Phidata icon with different sizes and also showcases the colored variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Phidata/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Phidata } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Phidata size={64} />\n    <Phidata.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Featherless Icon Variants\nDESCRIPTION: Demonstrates the combined view of Featherless icons with support for both default and color types, arranged vertically with flex-start alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Featherless/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Featherless } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Featherless.Combine size={64} />\n    <Featherless.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Coze Text Icon\nDESCRIPTION: Shows how to use the text variant of the Coze icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coze/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coze } from '@lobehub/icons';\n\nexport default () => <Coze.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Bedrock Icons\nDESCRIPTION: Illustrates how to use the Combine variant of Bedrock icons with different types\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bedrock/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bedrock } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Bedrock.Combine size={64} />\n    <Bedrock.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CentML Brand Icons\nDESCRIPTION: Shows how to use the brand variants of CentML icons in both regular and color versions\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CentML/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CentML } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CentML.Brand size={64} />\n    <CentML.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: SenseNova Avatar Icons\nDESCRIPTION: Demonstrates SenseNova avatar icons with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SenseNova/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SenseNova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <SenseNova.Avatar size={64} />\n    <SenseNova.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying xAI Avatars in Different Shapes\nDESCRIPTION: Demonstrates rendering xAI avatar icons in both default (circular) and square shapes with a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/XAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { XAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <XAI.Avatar size={64} />\n    <XAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Magic Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Magic icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It employs media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/magic\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/magic.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/magic.png\\\" /></picture><br/>Magic                                      \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Moonshot Text\nDESCRIPTION: This snippet showcases how to render the Moonshot text component with a defined size in a React component. It provides a simple way to display the Moonshot text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Moonshot/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moonshot } from '@lobehub/icons';\n\nexport default () => <Moonshot.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Icon with Flexbox in React (Text)\nDESCRIPTION: This snippet illustrates how to use the Make library to render a Text icon of size 48 pixels within a vertically aligned Flexbox layout, providing consistent spacing through the gap property.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Make/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Make } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Make.Text size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Ai21 Icon in React\nDESCRIPTION: This snippet shows how to import and render the basic Ai21 icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai21/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai21 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Ai21 size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vercel Icon in React\nDESCRIPTION: Demonstrates how to import and use the basic Vercel icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vercel/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vercel } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Vercel size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Using AiMass Color in React\nDESCRIPTION: This snippet demonstrates how to use the primary color of the AiMass icon with a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiMass/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiMass } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AiMass.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Vercel Brand Colors in React\nDESCRIPTION: Demonstrates how to access and display the primary brand color of Vercel using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vercel/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vercel } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Vercel.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons - React\nDESCRIPTION: This snippet imports LmStudio icons and renders a single icon using the Flexbox component for layout. The icon size is set to 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LmStudio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LmStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LmStudio size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Jina Icon in Flexbox - React TSX\nDESCRIPTION: This snippet demonstrates how to import and render the Jina icon using a Flexbox layout from the react-layout-kit library. The Jina icon is displayed with a size of 64 pixels within a horizontal layout, featuring a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Jina/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Jina } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Jina size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using Vidu Text Icon in React\nDESCRIPTION: Shows how to implement the text variant of the Vidu icon. This example renders only the textual representation of the Vidu brand.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vidu/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vidu } from '@lobehub/icons';\n\nexport default () => <Vidu.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Gradio Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Gradio icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/gradio\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/gradio-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/gradio-color.png\\\" /></picture><br/>Gradio                            \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Hedra Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Hedra icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It utilizes media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/hedra\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/hedra.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/hedra.png\\\" /></picture><br/>Hedra                                            \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Grok Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Grok icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It employs media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/grok\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/grok.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/grok.png\\\" /></picture><br/>Grok (xAI)                                    \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Inflection Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Inflection icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It utilizes media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/inflection\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/inflection.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/inflection.png\\\" /></picture><br/>Inflection                  \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Wenxin Icons with Various Options\nDESCRIPTION: Demonstrates the Wenxin.Combine component which can display different variants including standard, color, and with additional text. Components are arranged vertically with Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Wenxin/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wenxin } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Wenxin.Combine size={64} />\n    <Wenxin.Combine size={64} type={'color'} />\n    <Wenxin.Combine size={64} type={'color'} extra={'一言'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AiMass Icons in React\nDESCRIPTION: This snippet shows how to render both the regular and colored versions of the AiMass icon using the @lobehub/icons package and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiMass/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiMass } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AiMass size={64} />\n    <AiMass.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Flora Avatar Icons in React\nDESCRIPTION: This example demonstrates how to use Flora avatar icons with different sizes and shapes within a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flora/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flora } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Flora.Avatar size={64} />\n    <Flora.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering MyShell Avatars with Flexbox in React\nDESCRIPTION: This snippet renders MyShell avatar components using the Flexbox layout component from react-layout-kit. It demonstrates the use of different size and shape props for customizing the avatars.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MyShell/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyShell } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <MyShell.Avatar size={64} />\n    <MyShell.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons - React\nDESCRIPTION: This snippet imports LmStudio icons and renders a combination of two icons using Flexbox for layout. The first icon is rendered at size 64, while the second icon is rendered at size 64 with a type property set to 'color'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LmStudio/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LmStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LmStudio.Combine size={64} />\n    <LmStudio.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining SambaNova Icons\nDESCRIPTION: This snippet illustrates how to combine multiple instances of the SambaNova icon component in a Flexbox layout. It features two icons, one with a specified color type, showcasing combination usage.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SambaNova/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SambaNova } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} align={'flex-start'}>\\n    <SambaNova.Combine size={64} />\\n    <SambaNova.Combine size={64} type={'color'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cursor Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the main Cursor icon component with a specific size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cursor/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cursor } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Cursor size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying AssemblyAI Avatar Icons in React\nDESCRIPTION: This code demonstrates how to render AssemblyAI avatar icons in both circular and square shapes using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AssemblyAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssemblyAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AssemblyAI.Avatar size={64} />\n    <AssemblyAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Cerebras Icons\nDESCRIPTION: Demonstrates the usage of combined Cerebras icons with different types and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cerebras/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cerebras } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Cerebras.Combine size={64} />\n    <Cerebras.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandA Text Variant\nDESCRIPTION: Shows how to use the text variant of the CommandA icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CommandA/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommandA } from '@lobehub/icons';\n\nexport default () => <CommandA.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Icons in Flexbox using React\nDESCRIPTION: This code snippet shows how to combine multiple Qingyan icon types within a Flexbox layout. It uses the same Flexbox component to align the combined icons vertically while specifying a flex-start alignment. Each icon is set to a size of 64 pixels with an additional type parameter for one of the icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qingyan/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qingyan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Qingyan.Combine size={64} />\n    <Qingyan.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Zeabur Text-Only Icon in React\nDESCRIPTION: This snippet shows how to use the text-only variant of the Zeabur icon. It imports the Zeabur component and uses the Text subcomponent with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zeabur/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zeabur } from '@lobehub/icons';\n\nexport default () => <Zeabur.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Flux Text Icon in React\nDESCRIPTION: This snippet demonstrates how to use the text variant of the Flux icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flux/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flux } from '@lobehub/icons';\n\nexport default () => <Flux.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Goose Icon\nDESCRIPTION: This snippet demonstrates how to import and use the Goose icon in a React component, setting its size to 64 pixels. It showcases the basic implementation of the Goose icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Goose/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Goose } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Goose size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Infermatic Icons in React\nDESCRIPTION: Shows how to use the Infermatic.Combine icon component within a Flexbox from react-layout-kit, with optional color type. Requires 'lobehub/icons'. The size prop sets the icon size and the type prop specifies the variant. Returns a Flexbox containing two Combine icons with one having color. Ensure layout compatibility.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infermatic/index.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Infermatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Infermatic.Combine size={64} />\n    <Infermatic.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying ComfyUI Text Icon in React\nDESCRIPTION: Example showing how to display the ComfyUI text icon variant with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ComfyUI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComfyUI } from '@lobehub/icons';\n\nexport default () => <ComfyUI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Yuanbao Color Palette\nDESCRIPTION: Demonstrates accessing and previewing the primary color of the Yuanbao brand through the colorPrimary property. Uses a custom ColorPreview component to display the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yuanbao/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yuanbao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Yuanbao.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Viggle Color Palette in React\nDESCRIPTION: Demonstrates how to access and display the Viggle primary color using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Viggle/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Viggle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Viggle.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SambaNova Icons\nDESCRIPTION: This snippet imports the SambaNova icon component and the Flexbox layout component, displaying two different variants of the icon in a horizontal Flexbox layout. It showcases the usage of icons with specified sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SambaNova/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SambaNova } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <SambaNova size={64} />\\n    <SambaNova.Color size={64} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Combined OpenRouter Icon in React\nDESCRIPTION: This snippet demonstrates how to render the Combined variant of the OpenRouter icon within a Flexbox layout. It imports the OpenRouter component from `@lobehub/icons` and renders the `OpenRouter.Combine` sub-component with a size of 64 pixels, setting a gap of 16 pixels and aligning items to the start. The component requires the `@lobehub/icons` and `react-layout-kit` dependencies.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenRouter/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenRouter } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <OpenRouter.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined DocSearch Icons in React\nDESCRIPTION: This snippet illustrates how to display combined DocSearch icons, including both regular and colored versions, using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DocSearch/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocSearch } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <DocSearch.Combine size={64} />\n    <DocSearch.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining n8n Icons in TypeScript\nDESCRIPTION: This snippet illustrates how to combine different n8n icon styles using the Flexbox layout. It employs the Combine property of the N8n component to render different combinations of the icon including a color type setting. This modular approach allows for versatile icon styling and presentation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/N8n/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { N8n } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <N8n.Combine size={64} />\n    <N8n.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Monica Icons with Flexbox Layout - TSX\nDESCRIPTION: This snippet demonstrates how to render the Monica icon and its color variant using the Flexbox component from the react-layout-kit library. It showcases the arrangement of icons laid out horizontally with a gap of 16 pixels. The Monica icon is rendered with a specified size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Monica/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monica } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Monica size={64} />\n    <Monica.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Langfuse Icons with Flexbox in TypeScript\nDESCRIPTION: This code snippet illustrates how to use the 'Langfuse.Combine' icons in a Flexbox layout. It demonstrates the alignment of two icons with different types ('default' and 'color') and specifies a gap and alignment for Flexbox. Dependencies include '@lobehub/icons' and 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Langfuse/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Langfuse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Langfuse.Combine size={64} />\n    <Langfuse.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Tiangong Avatars in React\nDESCRIPTION: This snippet demonstrates how to render Tiangong avatars with different styles and shapes. It imports the `Tiangong` component and `Flexbox` from `react-layout-kit`. Three avatar variations are displayed: one with a custom background color, one with the default background, and one with a square shape, all with a size of 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tiangong/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tiangong } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Tiangong.Avatar size={64} background={Tiangong.colorPrimary} />\n    <Tiangong.Avatar size={64} />\n    <Tiangong.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Combining OpenWebUI Icons with Flexbox\nDESCRIPTION: This snippet showcases how to combine the OpenWebUI icon within a Flexbox layout. It demonstrates the usage of gaps and alignment settings in the layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenWebUI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenWebUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <OpenWebUI.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cerebras Brand Icons\nDESCRIPTION: Shows how to implement both standard and colored versions of the Cerebras brand icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cerebras/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cerebras } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Cerebras.Brand size={64} />\n    <Cerebras.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Glif Icon in React\nDESCRIPTION: Demonstrates how to import and render a basic Glif icon component with a specified size of 64 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Glif/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Glif } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Glif size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Viggle Avatar Components in React\nDESCRIPTION: Shows how to use Viggle.Avatar components with different shapes (default circular and square) in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Viggle/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Viggle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Viggle.Avatar size={64} />\n    <Viggle.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Friendli Combine Component\nDESCRIPTION: Demonstrates how to use the combined version of the Friendli icon within a flex container\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Friendli/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Friendli } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Friendli.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Upstage Text Component\nDESCRIPTION: Shows how to use the Upstage.Text component to render the textual representation of the Upstage logo with custom sizing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Upstage/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Upstage } from '@lobehub/icons';\n\nexport default () => <Upstage.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining RSSHub Icons in TypeScript using Flexbox\nDESCRIPTION: This snippet shows how to combine multiple RSSHub icons in a flex layout. Different types of the combine variant are displayed with alignments specified using Flexbox. Key dependencies are '@lobehub/icons' for RSSHub and 'react-layout-kit' for Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/RSSHub/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RSSHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <RSSHub.Combine size={64} />\n    <RSSHub.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Together.ai Text\nDESCRIPTION: This snippet imports the Together component from '@lobehub/icons' and renders the text variant of the Together.ai icon. The <Together.Text> component displays the text representation of the icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Together/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Together } from '@lobehub/icons';\n\nexport default () => <Together.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing AlephAlpha Text Component\nDESCRIPTION: Shows how to use the text variant of the AlephAlpha icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlephAlpha/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlephAlpha } from '@lobehub/icons';\n\nexport default () => <AlephAlpha.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Featherless Text Component\nDESCRIPTION: Shows how to use the text variant of the Featherless icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Featherless/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Featherless } from '@lobehub/icons';\n\nexport default () => <Featherless.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Bing Text Icon\nDESCRIPTION: This snippet shows how to render the text version of the Microsoft Bing icon. The Text variant displays the Bing logo as a text representation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bing/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bing } from '@lobehub/icons';\n\nexport default () => <Bing.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Snowflake Text Icons - React\nDESCRIPTION: This snippet imports the Snowflake component and renders a Snowflake text icon, specifying a size of 48 pixels. This is useful for displaying text-based representations of icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Snowflake/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Snowflake } from '@lobehub/icons';\n\nexport default () => <Snowflake.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Github Text Icon\nDESCRIPTION: Shows implementation of the Github text icon variant with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Github/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Github } from '@lobehub/icons';\n\nexport default () => <Github.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Greptile Text Icon in TSX\nDESCRIPTION: This code snippet demonstrates how to render a Greptile text component by specifying a size. The '@lobehub/icons' package is a required dependency.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Greptile/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Greptile } from '@lobehub/icons';\n\nexport default () => <Greptile.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Clipdrop Primary Color in React\nDESCRIPTION: This code demonstrates how to access and preview the primary color of the Clipdrop icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Clipdrop/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Clipdrop } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Clipdrop.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying DBRX Brand Icons\nDESCRIPTION: Shows how to implement the brand versions of DBRX icons in both standard and colored variants.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dbrx/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dbrx } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Dbrx.Brand size={64} />\n    <Dbrx.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Text Icon\nDESCRIPTION: Displays the Meta text logo icon with custom sizing\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Meta/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from '@lobehub/icons';\n\nexport default () => <Meta.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering the Suno Icon\nDESCRIPTION: This snippet demonstrates how to render the basic Suno icon component with a specified size. It imports the Suno component from the @lobehub/icons library and uses it within a React functional component.  The size prop determines the rendered size of the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Suno/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suno } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Suno size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Viggle Icon in React\nDESCRIPTION: Demonstrates how to import and render the basic Viggle icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Viggle/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Viggle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Viggle size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Colors with Novita and Flexbox - JavaScript (TSX)\nDESCRIPTION: This code snippet showcases how to use the ColorPreview component to display a color property from Novita. Flexbox from react-layout-kit manages layout orientation and spacing. Essential imports include the Novita icons and the ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Novita/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Novita } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Novita.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing SambaNova Colors\nDESCRIPTION: This snippet showcases how to use the ColorPreview component in conjunction with the primary color from the SambaNova icons, arranged in a horizontal Flexbox. It provides a visual representation of the SambaNova primary color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SambaNova/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SambaNova } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nimport ColorPreview from '../components/ColorPreview';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <ColorPreview color={SambaNova.colorPrimary} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Creating DBRX Avatars\nDESCRIPTION: Demonstrates how to create DBRX avatars in both circular and square shapes using horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dbrx/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dbrx } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Dbrx.Avatar size={64} />\n    <Dbrx.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing vLLM Combined Icon Variants\nDESCRIPTION: Illustrates how to use the combined icon variant which integrates both the icon and text. Shows examples with both default and color type options, arranged vertically using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vllm/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vllm } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Vllm.Combine size={64} />\n    <Vllm.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepInfra Avatar Components\nDESCRIPTION: Shows how to use DeepInfra avatar components with different shapes and sizes in a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepInfra/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepInfra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DeepInfra.Avatar size={64} />\n    <DeepInfra.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Kling Icons in Flexbox\nDESCRIPTION: This snippet utilizes the Kling icon component and Flexbox to render a combination of Kling icons with specified sizes and types. It showcases the ability to manage alignment and layout flexibly.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kling/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kling } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Kling.Combine size={64} />\n    <Kling.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Runway Avatars\nDESCRIPTION: Demonstrates rendering multiple Runway avatar variants with different sizes and shapes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Runway/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Runway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Runway.Avatar size={64} />\n    <Runway.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Luma Icons\nDESCRIPTION: This code snippet demonstrates how to display the combined version of the Luma icon. It imports the `Luma` component and `Flexbox` from `react-layout-kit`. It displays two `Luma.Combine` icons within a Flexbox, one with the default type and one with the 'color' type, both with a size of 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Luma/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Luma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Luma.Combine size={64} />\n    <Luma.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LLaVA Avatars\nDESCRIPTION: This snippet demonstrates how to render LLaVA avatars with different styles, including a colored background and a square shape. It imports LLaVA from @lobehub/icons and Flexbox from react-layout-kit.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LLaVA/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LLaVA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LLaVA.Avatar size={64} background={LLaVA.colorPrimary} />\n    <LLaVA.Avatar size={64} />\n    <LLaVA.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Combining Xinference Icon Components\nDESCRIPTION: Demonstrates the Xinference.Combine component which combines icon and text elements, with options to display in regular or color mode.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xinference/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xinference } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Xinference.Combine size={64} />\n    <Xinference.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Aya Icons\nDESCRIPTION: Demonstrates how to render both regular and colored versions of the Aya icon with size specification using the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aya/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aya } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Aya size={64} />\n    <Aya.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Haiper Icon\nDESCRIPTION: Displays the primary Haiper icon with a specified size of 64 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Haiper/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Haiper } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Haiper size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Targon Avatars with Flexbox in TSX\nDESCRIPTION: This code demonstrates the use of Targon avatars within a Flexbox layout, highlighting the rendering of different avatar shapes and sizes. It requires both @lobehub/icons and react-layout-kit. Key parameters include 'size' and 'shape' to define avatar characteristics.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Targon/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Targon } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Targon.Avatar size={64} />\n    <Targon.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining LeptonAI Components in a Flexbox in TypeScript\nDESCRIPTION: Demonstrates the combination of LeptonAI components in a Flexbox layout, using alignment and size properties. This example highlights the versatility of LeptonAI's Combine component to output varied styles, including colored variations. Requires 'react-layout-kit' for layout management.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LeptonAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LeptonAI } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} align={'flex-start'}>\\n    <LeptonAI.Combine size={64} />\\n    <LeptonAI.Combine size={64} type={'color'} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying DeepInfra Text Icon\nDESCRIPTION: Shows how to implement the text version of the DeepInfra icon with custom sizing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepInfra/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepInfra } from '@lobehub/icons';\n\nexport default () => <DeepInfra.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining BaiduCloud Icons in React\nDESCRIPTION: This snippet shows how to use the Combine subcomponent of BaiduCloud to render combined versions of the icon. It demonstrates both default and colored types, using Flexbox for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BaiduCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaiduCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <BaiduCloud.Combine size={64} />\n    <BaiduCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: TII Combine Icon Variants\nDESCRIPTION: Renders combine icon variants with default and color types using Flexbox for layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TII/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TII } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <TII.Combine size={64} />\n    <TII.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Novita Icons with Flexbox - JavaScript (TSX)\nDESCRIPTION: This example shows how to integrate Novita icons in a combination format using the Flexbox component. The layout is controlled by Flexbox with an alignment set to flex-start. Dependencies are similar to other examples focusing on React and react-layout-kit usage.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Novita/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Novita } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Novita.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Flora Icon in React\nDESCRIPTION: This snippet illustrates how to use the combined version of the Flora icon within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flora/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flora } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Flora.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering NotebookLM Combine Variant\nDESCRIPTION: This snippet demonstrates how to render the 'Combine' variant of the NotebookLM icon. It imports the NotebookLM component from '@lobehub/icons' and uses the Combine property. It also uses the Flexbox component from 'react-layout-kit' for layout, providing spacing and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NotebookLM/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotebookLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <NotebookLM.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Flowith Icon and Text in React\nDESCRIPTION: This snippet shows how to use the Flowith.Combine component to render both icon and text together.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flowith/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flowith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Flowith.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying ByteDance Brand Logos\nDESCRIPTION: Implements ByteDance brand logos in both regular and colored variants. Uses vertical Flexbox layout with start alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ByteDance/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ByteDance } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <ByteDance.Brand size={64} />\n    <ByteDance.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Baichuan Icon Variations\nDESCRIPTION: Demonstrates the combined version of Baichuan icons with different types and color configurations, arranged vertically using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baichuan/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baichuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Baichuan.Combine size={64} />\n    <Baichuan.Combine size={64} type={'color'} />\n    <Baichuan.Combine size={64} type={'color'} color={Baichuan.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Unstructured Icons with Flexbox in React\nDESCRIPTION: This snippet demonstrates how to combine multiple Unstructured icons using Flexbox for layout. It showcases two instances of the Unstructured.Combine component, where one shows a default icon and another with a specific type set to 'color'. This is particularly useful for icon variations and grouping them visually.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Unstructured/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unstructured } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Unstructured.Combine size={64} />\n    <Unstructured.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Combined CommandA Icons\nDESCRIPTION: Illustrates the usage of combined CommandA icons with different types and sizes in a vertical layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CommandA/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommandA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CommandA.Combine size={64} />\n    <CommandA.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Gradio Icons in a React Flexbox Layout\nDESCRIPTION: This example shows how to use the Gradio.Combine component within a Flexbox layout, allowing for variant rendering with different types displayed alongside each other. The 'align' property in Flexbox enhances layout management.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gradio/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gradio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Gradio.Combine size={64} />\n    <Gradio.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: SenseNova Brand Icons\nDESCRIPTION: Renders SenseNova brand icons in default and color variants\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SenseNova/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SenseNova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <SenseNova.Brand size={64} />\n    <SenseNova.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Xinference Text Component\nDESCRIPTION: Shows how to use the Xinference.Text component which renders a text-based version of the Xinference logo with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xinference/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xinference } from '@lobehub/icons';\n\nexport default () => <Xinference.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying VertexAI Text Component\nDESCRIPTION: Shows how to use the VertexAI.Text component which displays the text version of the VertexAI logo. The size prop controls the dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VertexAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VertexAI } from '@lobehub/icons';\n\nexport default () => <VertexAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying AiHubMix Text Icon in React\nDESCRIPTION: Shows how to use the text version of the AiHubMix icon. This example renders the text icon with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiHubMix/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiHubMix } from '@lobehub/icons';\n\nexport default () => <AiHubMix.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying vLLM Text Representation\nDESCRIPTION: Shows how to render the text-only variant of the vLLM icon. This variant displays the vLLM name in the appropriate styling and can be sized as needed.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vllm/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vllm } from '@lobehub/icons';\n\nexport default () => <Vllm.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Baichuan Text Component\nDESCRIPTION: Shows how to use the text variant of the Baichuan icon with a specified size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baichuan/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baichuan } from '@lobehub/icons';\n\nexport default () => <Baichuan.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Anthropic Color Constants\nDESCRIPTION: Demonstrates how to access and display the primary color constant from the Anthropic icon component using a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anthropic/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anthropic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Anthropic.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TencentCloud Avatars in Flexbox\nDESCRIPTION: This snippet illustrates how to use TencentCloud avatar icons within a Flexbox layout. It supports customizing the shape of the avatar and provides two examples, both sized at 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TencentCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TencentCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <TencentCloud.Avatar size={64} />\n    <TencentCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenWebUI Icon\nDESCRIPTION: This snippet renders the OpenWebUI icon with a specified size of 64 pixels. It imports necessary components from the @lobehub/icons library and renders an icon directly.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenWebUI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenWebUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <OpenWebUI size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Creating ByteDance Avatars\nDESCRIPTION: Shows how to implement ByteDance avatars with different shapes (default circular and square). Uses horizontal Flexbox layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ByteDance/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ByteDance } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ByteDance.Avatar size={64} />\n    <ByteDance.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined SiliconCloud Icons with Flexbox in React\nDESCRIPTION: This snippet illustrates how to create a layout of combined SiliconCloud icons within a Flexbox container, allowing for different types of the same icon. The icons are aligned to the start of the Flexbox with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SiliconCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SiliconCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <SiliconCloud.Combine size={64} />\n    <SiliconCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars Using DreamMachine in React\nDESCRIPTION: This snippet showcases how to render Avatar components with different properties, such as size and shape, using DreamMachine.Avatar. It leverages 'Flexbox' from 'react-layout-kit' for horizontal layout. The avatars are rendered with a size of 64, and one avatar has a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DreamMachine/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DreamMachine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DreamMachine.Avatar size={64} />\n    <DreamMachine.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Manus Icon\nDESCRIPTION: Displays the combined Manus icon using a Flexbox layout with gap and alignment\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Manus/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manus } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Manus.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Bing Avatar Icons\nDESCRIPTION: This snippet demonstrates how to create Bing avatars in different styles. It shows three avatar variants: one with a custom background color, one with default styling, and one with a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bing/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bing } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Bing.Avatar size={64} background={Bing.colorPrimary} />\n    <Bing.Avatar size={64} />\n    <Bing.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined FishAudio Icon in React\nDESCRIPTION: Illustrates the usage of the combined version of the FishAudio icon within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/FishAudio/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FishAudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <FishAudio.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimax Icons Using Flexbox in React\nDESCRIPTION: This snippet creates a React functional component that utilizes Minimax icons and arranges them horizontally using the Flexbox layout. It employs spacing between icons via the 'gap' property.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Minimax/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Minimax } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Minimax size={64} />\n    <Minimax.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Lambda Icon\nDESCRIPTION: Displays the Lambda icon with a specified size of 64 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lambda/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lambda } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Lambda size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Phidata Avatars\nDESCRIPTION: This snippet imports the Phidata icon and renders its avatar variant. It demonstrates how to display Phidata as an avatar using the `Phidata.Avatar` component with different shapes (default and square) and sizes, arranged horizontally with react-layout-kit's Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Phidata/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Phidata } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Phidata.Avatar size={64} />\n    <Phidata.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Gemma Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both the standard Gemma icon and its colored version using the @lobehub/icons library. It uses the Flexbox component for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemma/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Gemma size={64} />\n    <Gemma.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Hunyuan Text Icon in React\nDESCRIPTION: This code snippet demonstrates how to render the Hunyuan.Text icon using the @lobehub/icons library. It imports the Hunyuan component and renders the Hunyuan.Text variant with a specified size. The code focuses on displaying the text representation of the Hunyuan icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hunyuan/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hunyuan } from '@lobehub/icons';\n\nexport default () => <Hunyuan.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering AntGroup Avatars\nDESCRIPTION: Shows how to use AntGroup avatar components with different shapes (circular and square) in a horizontal layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AntGroup/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AntGroup } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AntGroup.Avatar size={64} />\n    <AntGroup.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying BAAI Brand Colors\nDESCRIPTION: Example of accessing and displaying the primary brand color of BAAI using a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BAAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BAAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={BAAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Pollinations Text Icon\nDESCRIPTION: This snippet shows how to import and render the Pollinations text icon with a designated size. It serves to illustrate how to integrate text icons alongside graphic icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pollinations/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pollinations } from '@lobehub/icons';\n\nexport default () => <Pollinations.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Ideogram Text\nDESCRIPTION: This snippet shows how to render the text version of the Ideogram icon, allowing for a different size specification. The size is set to 48 pixels in this case.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ideogram/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ideogram } from '@lobehub/icons';\n\nexport default () => <Ideogram.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Cursor Text Icon in React\nDESCRIPTION: This example shows how to use the text variant of the Cursor icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cursor/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cursor } from '@lobehub/icons';\n\nexport default () => <Cursor.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Manus Icon\nDESCRIPTION: Demonstrates how to import and render a basic Manus icon with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Manus/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manus } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Manus size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering AWS Text Icon\nDESCRIPTION: Shows implementation of AWS text icon component with specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aws/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aws } from '@lobehub/icons';\n\nexport default () => <Aws.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Anyscale Avatars\nDESCRIPTION: Shows how to implement Anyscale avatars in both circular and square shapes using the Avatar component variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anyscale/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anyscale } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Anyscale.Avatar size={64} />\n    <Anyscale.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CentML Avatar Icons\nDESCRIPTION: Demonstrates avatar usage with different shapes (default circular and square) and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CentML/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CentML } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CentML.Avatar size={64} />\n    <CentML.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Civitai Icons in React Components\nDESCRIPTION: This example illustrates how to use the combined version of the Civitai icon, with options for both default and color types, in a React component using the react-layout-kit package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Civitai/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Civitai } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Civitai.Combine size={64} />\n    <Civitai.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Doc2X Avatars in React\nDESCRIPTION: This snippet shows how to use the avatar variant of the Doc2X icon, demonstrating both circular and square shapes with custom sizing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doc2X/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doc2X } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Doc2X.Avatar size={64} />\n    <Doc2X.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined GiteeAI Icon in React\nDESCRIPTION: This example demonstrates how to use the combined version of the GiteeAI icon within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GiteeAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GiteeAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <GiteeAI.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Moonshot Avatars\nDESCRIPTION: This snippet illustrates how to render Moonshot avatar components within a horizontal Flexbox layout. Different sizes and shapes of avatars can be utilized.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Moonshot/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moonshot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Moonshot.Avatar size={64} />\n    <Moonshot.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined DeepAI Icon in React\nDESCRIPTION: This snippet shows how to use the combined version of the DeepAI icon within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <DeepAI.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Nvidia Avatar Icons\nDESCRIPTION: This snippet demonstrates the usage of the `Nvidia.Avatar` component to render the Nvidia icon as an avatar. It showcases displaying the avatar with the default circular shape and a square shape. The avatars are arranged horizontally within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nvidia/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nvidia } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Nvidia.Avatar size={64} />\n    <Nvidia.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Sync Combine Icon with Flexbox\nDESCRIPTION: Shows how to render a combined Sync icon using '@lobehub/icons' with a Flexbox layout from 'react-layout-kit'. Requires both React and 'react-layout-kit'. It features a single 'size' parameter to define the icon's size, and aligns its content flexibly. Outputs a React element.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Sync/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sync } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Sync.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Pollinations Icon\nDESCRIPTION: This snippet imports the Pollinations icon from the Lobehub icons package and renders it with a specified size. It demonstrates a simple use case for including an icon in a component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pollinations/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pollinations } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Pollinations size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Kluster Colors in React with Flexbox\nDESCRIPTION: Showcases the use of a Kluster color feature within a Flexbox layout in a React component. The snippet imports Kluster and utilizes its color property to showcase color features displayed through a custom ColorPreview component. This structure illustrates arranging components horizontally with defined spacing and highlights primary color usage.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kluster/index.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Kluster } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Kluster.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Clipdrop Avatar Icons in React\nDESCRIPTION: This snippet illustrates how to use Clipdrop avatar icons with different shapes and sizes in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Clipdrop/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Clipdrop } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Clipdrop.Avatar size={64} />\n    <Clipdrop.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Microsoft Icons\nDESCRIPTION: Demonstrates rendering default and color versions of Microsoft icons with customizable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Microsoft/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Microsoft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Microsoft size={64} />\n    <Microsoft.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Viggle Text Component in React\nDESCRIPTION: Shows how to use the text variant of the Viggle component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Viggle/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Viggle } from '@lobehub/icons';\n\nexport default () => <Viggle.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Baichuan Avatar Components\nDESCRIPTION: Shows different avatar variations of the Baichuan icon, including custom background, default style, and square shape options.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baichuan/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baichuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Baichuan.Avatar size={64} background={Baichuan.colorGradient} />\n    <Baichuan.Avatar size={64} />\n    <Baichuan.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Featherless Color Constants\nDESCRIPTION: Demonstrates how to access and preview the primary color constant from the Featherless icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Featherless/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Featherless } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Featherless.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing WorkersAI Brand Colors\nDESCRIPTION: Demonstrates how to access and display the primary brand color associated with WorkersAI. Uses a ColorPreview component to visualize the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/WorkersAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WorkersAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={WorkersAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Parasail Primary Color\nDESCRIPTION: This snippet demonstrates how to access and use the primary color defined for the Parasail icon. It imports the Parasail component and a `ColorPreview` component to display the `Parasail.colorPrimary` value.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Parasail/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Parasail } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Parasail.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Inference Colors\nDESCRIPTION: Describes how to use the 'ColorPreview' component to display the primary color from the Inference icons palette. The code snippet imports '@lobehub/icons', 'react-layout-kit', and a custom 'ColorPreview' component. It renders a 'ColorPreview' inside a 'Flexbox', displaying the primary color of Inference icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inference/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inference } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nimport ColorPreview from '../components/ColorPreview';\\n\\nexport default () => (\\n  <Flexbox gap={16} horizontal>\\n    <ColorPreview color={Inference.colorPrimary} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Wenxin Brand Colors\nDESCRIPTION: Demonstrates how to access and display the brand colors associated with Wenxin, including the primary color and gradient color. Uses a custom ColorPreview component to visualize the colors.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Wenxin/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wenxin } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Wenxin.colorPrimary} />\n    <ColorPreview color={Wenxin.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Color Previews with Hyperbolic Colors\nDESCRIPTION: This snippet demonstrates how to render a color preview using a specific Hyperbolic color within a Flexbox layout, importing the ColorPreview component for visualization.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hyperbolic/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hyperbolic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Hyperbolic.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Previews in React\nDESCRIPTION: This snippet illustrates how to display color previews for PixVerse color options using a Flexbox layout. It creates instances of ColorPreview components for primary and gradient colors.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PixVerse/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PixVerse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={PixVerse.colorPrimary} />\n    <ColorPreview color={PixVerse.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Civitai Icon Colors in React\nDESCRIPTION: This code demonstrates how to access and display the primary color of the Civitai icon using a custom ColorPreview component within a React component, utilizing the react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Civitai/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Civitai } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Civitai.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Using DreamMachine in React\nDESCRIPTION: This snippet demonstrates the usage of DreamMachine's color property by rendering a color preview with ColorPreview component. It utilizes 'Flexbox' from 'react-layout-kit' for layout management. The primary color used here is DreamMachine.colorPrimary.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DreamMachine/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DreamMachine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={DreamMachine.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Tencent Colors\nDESCRIPTION: This snippet imports the Tencent icon and a `ColorPreview` component (presumably defined elsewhere in the project). It displays a preview of the primary color associated with the Tencent brand (`Tencent.colorPrimary`). The `ColorPreview` component likely takes a color value as a prop and renders a visual representation of it, arranged using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tencent/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tencent } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Tencent.colorPrimary} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AionLabs Icons\nDESCRIPTION: Demonstrates how to render the basic AionLabs icon in both default and color variants using the @lobehub/icons package. Uses Flexbox for horizontal layout with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AionLabs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AionLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AionLabs size={64} />\n    <AionLabs.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Udio Text in React\nDESCRIPTION: This snippet demonstrates how to display Udio's text component within a React functional component. The Udio.Text component is shown with a size of 48.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Udio/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Udio } from '@lobehub/icons';\n\nexport default () => <Udio.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying DocSearch Text Icon in React\nDESCRIPTION: This code shows how to render the text version of the DocSearch icon using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DocSearch/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocSearch } from '@lobehub/icons';\n\nexport default () => <DocSearch.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Civitai Text Icons in React\nDESCRIPTION: This code snippet shows how to use the text variants of the Civitai icon, including both regular and color versions, within a React component using the react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Civitai/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Civitai } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Civitai.Text size={48} />\n    <Civitai.TextColor size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DALL·E Text Icon in React\nDESCRIPTION: This example shows how to use the text variant of the DALL·E icon from the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dalle/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dalle } from '@lobehub/icons';\n\nexport default () => <Dalle.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying WorkersAI Text Representation\nDESCRIPTION: Shows how to render the text-only version of the WorkersAI icon. This component displays the name or text associated with the WorkersAI branding.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/WorkersAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WorkersAI } from '@lobehub/icons';\n\nexport default () => <WorkersAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing AlibabaCloud Avatar Icons in React\nDESCRIPTION: Demonstrates the use of AlibabaCloud avatar icons, including circular and square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlibabaCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlibabaCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AlibabaCloud.Avatar size={64} />\n    <AlibabaCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Suno Icon\nDESCRIPTION: This snippet demonstrates how to render the Suno Combined icon component with a specified size. It imports the Suno component from the @lobehub/icons library and accesses its Combine property.  The example uses react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Suno/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suno } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Suno.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Nvidia Icons\nDESCRIPTION: This snippet shows how to use the `Nvidia.Combine` component to render combined variations of the Nvidia icon. It demonstrates displaying both the default combined icon and the colored combined icon. The icons are aligned to the start within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nvidia/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nvidia } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Nvidia.Combine size={64} />\n    <Nvidia.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: LiveKit Avatar Icon Rendering\nDESCRIPTION: Demonstrates rendering LiveKit avatar icons with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LiveKit/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LiveKit.Avatar size={64} />\n    <LiveKit.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Tiangong Colors in React\nDESCRIPTION: This snippet shows how to render and display the Tiangong color palette.  It imports the `Tiangong` component from `@lobehub/icons`, `Flexbox` from `react-layout-kit`, and `ColorPreview` which is assumed to be a local component for displaying colors. Two colors are displayed: `Tiangong.colorPrimary` and `Tiangong.colorGradient`.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tiangong/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tiangong } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Tiangong.colorPrimary} />\n    <ColorPreview color={Tiangong.colorGradient} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Unstructured Avatars with Flexbox in React\nDESCRIPTION: This snippet illustrates how to render Unstructured Avatar icons. It utilizes Flexbox for arranging two avatars horizontally with a gap. The avatars may have different shapes, enhancing the visual representation in user profile contexts or application interfaces.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Unstructured/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unstructured } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Unstructured.Avatar size={64} />\n    <Unstructured.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Lambda Icon\nDESCRIPTION: Displays the Lambda combined icon variant within a Flexbox layout with gap and alignment\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lambda/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lambda } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Lambda.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering BaiduCloud Avatars in React\nDESCRIPTION: This example illustrates how to use the Avatar subcomponent of BaiduCloud to create avatar icons. It shows both circular and square shapes, using Flexbox for horizontal alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BaiduCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaiduCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <BaiduCloud.Avatar size={64} />\n    <BaiduCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Flux Icon in React\nDESCRIPTION: This code shows how to use the combined version of the Flux icon within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flux/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flux } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Flux.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Icons\nDESCRIPTION: Displays text-based icons in both default and Chinese language variants with configurable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infinigence/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Infinigence } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Infinigence.Text size={48} />\n    <Infinigence.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Notion Colors with Flexbox in React\nDESCRIPTION: This snippet illustrates using colors defined in the Notion component with a custom ColorPreview component. It arranges the display using a horizontal Flexbox layout with a color preview gap of 16 pixels. Requires importing the ColorPreview component to demonstrate the primary color property of Notion.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Notion/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notion } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Notion.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AiMass Avatars in React\nDESCRIPTION: This example shows how to use the AiMass icon as an avatar, with options for circular and square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiMass/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiMass } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AiMass.Avatar size={64} />\n    <AiMass.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Cerebras Icons\nDESCRIPTION: Demonstrates how to render both standard and colored versions of the Cerebras icon using the @lobehub/icons package\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cerebras/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cerebras } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cerebras size={64} />\n    <Cerebras.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepSeek Text Icon in React\nDESCRIPTION: This example shows how to use the text version of the DeepSeek icon. It imports the DeepSeek component and renders its Text subcomponent with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepSeek/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepSeek } from '@lobehub/icons';\n\nexport default () => <DeepSeek.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying DocSearch Avatars in React\nDESCRIPTION: This code demonstrates how to render DocSearch avatars in both circular and square shapes using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DocSearch/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocSearch } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <DocSearch.Avatar size={64} />\n    <DocSearch.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying ZeroOne Text Representation\nDESCRIPTION: Shows how to use the text variant of the ZeroOne icon. This example imports the ZeroOne component and renders its Text subcomponent with a specific size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ZeroOne/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ZeroOne } from '@lobehub/icons';\n\nexport default () => <ZeroOne.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Goose Text\nDESCRIPTION: This snippet shows how to import and use the Goose text component in a React component, setting its size to 48 pixels. It focuses on the text representation of the Goose icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Goose/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Goose } from '@lobehub/icons';\n\nexport default () => <Goose.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fal Text Variant\nDESCRIPTION: Shows how to use the text variant of the Fal icon with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fal/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fal } from '@lobehub/icons';\n\nexport default () => <Fal.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Gemma Icon in React\nDESCRIPTION: This example shows how to use the simple version of the Gemma icon. It imports the Gemma component from @lobehub/icons and renders the Simple variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemma/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Gemma.Simple size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Lambda Text Icon\nDESCRIPTION: Renders the Lambda text variant with a size of 48 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lambda/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lambda } from '@lobehub/icons';\n\nexport default () => <Lambda.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Nebius Text Component in React\nDESCRIPTION: This snippet shows how to render a text component from Nebius within a React component. It specifies the text size using a 'size' prop. No layout dependencies are utilized here, only lobe-icons for the Nebius component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nebius/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Nebius } from '@lobehub/icons';\n\nexport default () => <Nebius.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Claude Avatar Icons in React\nDESCRIPTION: Shows how to use Claude avatars in both default (circular) and square shapes. Uses Flexbox for horizontal arrangement with appropriate spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Claude/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Claude } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Claude.Avatar size={64} />\n    <Claude.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icon Styles with Flexbox in TypeScript\nDESCRIPTION: This example combines different 'Poe.Combine' styles using Flexbox to align icons vertically. It shows two variants: the default and color type, both rendered with a size of 64 pixels. Flexbox alignment is defined as 'flex-start'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Poe/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Poe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Poe.Combine size={64} />\n    <Poe.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Dify Text Icons\nDESCRIPTION: Shows how to use text-based variations of the Dify icon in both regular and colored formats with custom sizing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dify/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dify } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Dify.Text size={48} />\n    <Dify.TextColor size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering GiteeAI Avatar Icons in React\nDESCRIPTION: This snippet shows how to use the avatar version of the GiteeAI icon, including both circular and square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GiteeAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GiteeAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <GiteeAI.Avatar size={64} />\n    <GiteeAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Utilizing Xuanyuan Primary Color\nDESCRIPTION: Demonstrates how to access and use the primary brand color associated with the Xuanyuan model through a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xuanyuan/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xuanyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Xuanyuan.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Aya Avatars\nDESCRIPTION: Shows how to create Aya avatars with different shapes and sizes using the Avatar component variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aya/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aya } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Aya.Avatar size={64} />\n    <Aya.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Combined AlibabaCloud Icons in React\nDESCRIPTION: Illustrates the usage of combined AlibabaCloud icons, showcasing both default and colored versions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlibabaCloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlibabaCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AlibabaCloud.Combine size={64} />\n    <AlibabaCloud.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Phidata Icons\nDESCRIPTION: This snippet imports the Phidata icon and uses its `Combine` variant to display combined icons. It showcases how to use different types (default and color) of combined Phidata icons with specified sizes, arranged using react-layout-kit's Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Phidata/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Phidata } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Phidata.Combine size={64} />\n    <Phidata.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Aya Icon Variants\nDESCRIPTION: Illustrates how to use the combined version of Aya icons with different types and sizes in a vertical layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aya/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aya } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Aya.Combine size={64} />\n    <Aya.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Colors - React\nDESCRIPTION: This snippet imports LmStudio icons along with a ColorPreview component, rendering previews of two different color properties from LmStudio within a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LmStudio/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LmStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LmStudio.colorPrimary} />\n    <ColorPreview color={LmStudio.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Grok Color Preview\nDESCRIPTION: Displays the primary color of the Grok icon using a ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Grok/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grok } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Grok.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Manus Avatars\nDESCRIPTION: Demonstrates rendering Manus avatars with different sizes and shapes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Manus/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manus } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Manus.Avatar size={64} />\n    <Manus.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohere Avatar Components in TSX\nDESCRIPTION: Shows how to use Cohere avatar components with different shapes. The Avatar component can be configured with circular (default) or square shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cohere/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cohere } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cohere.Avatar size={64} />\n    <Cohere.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Recraft Text Component in React\nDESCRIPTION: This snippet illustrates importing and using the Recraft.Text component. It demonstrates setting the text size to 48 pixels. Dependency on the @lobehub/icons library is required.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Recraft/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Recraft } from '@lobehub/icons';\n\nexport default () => <Recraft.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Ai21 Brand Icons in React\nDESCRIPTION: This code shows how to render both the standard and color versions of the Ai21 brand icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai21/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai21 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Ai21.Brand size={48} />\n    <Ai21.BrandColor size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Kimi Color Palette\nDESCRIPTION: Demonstrates how to preview primary color for Kimi icons using a custom ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kimi/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kimi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Kimi.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nova Text Icon\nDESCRIPTION: This snippet demonstrates how to render the text version of the Nova icon component.  The size of the text icon is set to 48.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nova/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nova } from '@lobehub/icons';\n\nexport default () => <Nova.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Doubao Text Icon\nDESCRIPTION: Shows how to implement the text version of the Doubao icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doubao/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doubao } from '@lobehub/icons';\n\nexport default () => <Doubao.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Higress Icons in Flexbox - TypeScript\nDESCRIPTION: This example illustrates the usage of combined Higress icons inside a Flexbox layout. It shows how to display multiple combined Higress icons, including a color variant, using the 'react-layout-kit'. Each icon is rendered with a size of 64 pixels, showcasing their use in vertical alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Higress/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Higress } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Higress.Combine size={64} />\n    <Higress.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Volcengine Text Icon in React\nDESCRIPTION: Shows how to use the text variant of the Volcengine icon. This renders the Volcengine text logo at 48px size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Volcengine/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Volcengine } from '@lobehub/icons';\n\nexport default () => <Volcengine.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Clipdrop Icon in React\nDESCRIPTION: This snippet shows how to import and render the basic Clipdrop icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Clipdrop/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Clipdrop } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Clipdrop size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Cline Avatar Components\nDESCRIPTION: Shows how to implement Cline avatars in both circular and square shapes with specified sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cline/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cline } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cline.Avatar size={64} />\n    <Cline.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Search1API Text Component\nDESCRIPTION: This snippet shows how to render a text component from the Search1API in a React component with a specified size. The @lobehub/icons package is required for this implementation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Search1API/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Search1API } from '@lobehub/icons';\n\nexport default () => <Search1API.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Render MCP Text Variant in React\nDESCRIPTION: This snippet shows how to render the `Text` variant of the MCP icon. This variant is accessed as a property of the main MCP component (`MCP.Text`). The `size` prop controls the size of the text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MCP/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MCP } from '@lobehub/icons';\n\nexport default () => <MCP.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Combining Dify Icon Variations\nDESCRIPTION: Illustrates how to use the combined version of Dify icons with options for regular and colored types.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dify/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dify } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Dify.Combine size={64} />\n    <Dify.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Previews of Moonshot\nDESCRIPTION: This snippet shows how to create a color preview component that utilizes a specific color from the Moonshot icons. It helps to visualize color usage within the application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Moonshot/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moonshot } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Moonshot.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CodeGeeX Avatar Icon Variants\nDESCRIPTION: Shows how to use the Avatar subcomponent of CodeGeeX with different styling options. The example displays three avatar variants: one with a custom background color using the component's primary color, one with default styling, and one with a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CodeGeeX/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeGeeX } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CodeGeeX.Avatar size={64} background={CodeGeeX.colorPrimary} />\n    <CodeGeeX.Avatar size={64} />\n    <CodeGeeX.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Doubao Icons\nDESCRIPTION: Demonstrates the combined version of Doubao icons with both default and colored variations using vertical Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doubao/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doubao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Doubao.Combine size={64} />\n    <Doubao.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Inference Icon\nDESCRIPTION: Illustrates rendering a combined Inference icon inside a Flexbox layout with alignment and gap properties. Utilizes '@lobehub/icons' and 'react-layout-kit'. The code creates a 'Flexbox' component that holds an 'Inference.Combine' icon with a size of 64 and aligns it to the flex-start with a gap of 16.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inference/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inference } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => (\\n  <Flexbox gap={16} align={'flex-start'}>\\n    <Inference.Combine size={64} />\\n  </Flexbox>\\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Gemma Text Icon in React\nDESCRIPTION: This snippet demonstrates the usage of the text version of the Gemma icon. It imports the Gemma component and renders its Text variant with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemma/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemma } from '@lobehub/icons';\n\nexport default () => <Gemma.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimax Text Icon in React\nDESCRIPTION: This snippet defines a React functional component that imports the Minimax icon and displays the Minimax Text icon at a specified size. It serves to showcase the usage of the Minimax text representation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Minimax/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Minimax } from '@lobehub/icons';\n\nexport default () => <Minimax.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Color Preview Using Goose\nDESCRIPTION: This snippet shows how to display a color preview of the primary Goose icon color inside a Flexbox layout. It uses a custom ColorPreview component to visualize the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Goose/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Goose } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Goose.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined BAAI Icon\nDESCRIPTION: Demonstrates using the combined version of the BAAI icon within a flex container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BAAI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BAAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <BAAI.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Exa Avatars in React\nDESCRIPTION: This example demonstrates how to use the Exa.Avatar component to create avatar icons with different shapes and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Exa/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Exa } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Exa.Avatar size={64} />\n    <Exa.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Replicate Icons\nDESCRIPTION: Demonstrates basic usage of the Replicate icon component with size configuration in a horizontal flexbox layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replicate/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replicate } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Replicate size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Hedra Color Preview\nDESCRIPTION: Shows how to access and preview the primary color of Hedra icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hedra/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hedra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Hedra.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cline Text Component\nDESCRIPTION: Shows how to use the text variant of the Cline icon with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cline/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cline } from '@lobehub/icons';\n\nexport default () => <Cline.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Higress Text Icon - TypeScript\nDESCRIPTION: This snippet imports the Higress icon from the '@lobehub/icons' package and renders its text version in a size of 48 pixels. It is a simple demonstration of using the text variant of the Higress icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Higress/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Higress } from '@lobehub/icons';\n\nexport default () => <Higress.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Cohere Text Logo in TSX\nDESCRIPTION: Shows how to use the text version of the Cohere logo. This renders the Cohere brand text at a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cohere/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cohere } from '@lobehub/icons';\n\nexport default () => <Cohere.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AlephAlpha Icon in React\nDESCRIPTION: Demonstrates how to import and render the basic AlephAlpha icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlephAlpha/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlephAlpha } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <AlephAlpha size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering AiHubMix Avatars in React\nDESCRIPTION: Demonstrates the usage of AiHubMix avatar components. It displays both circular and square avatars in a horizontal flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiHubMix/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiHubMix } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AiHubMix.Avatar size={64} />\n    <AiHubMix.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Flora Text Icon in React\nDESCRIPTION: This example shows how to use the text version of the Flora icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flora/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flora } from '@lobehub/icons';\n\nexport default () => <Flora.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Upstage Combined Icon and Text Components\nDESCRIPTION: Demonstrates how to use the Upstage.Combine component which combines the icon and text in one component, with options to use either standard or color variants.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Upstage/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Upstage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Upstage.Combine size={64} />\n    <Upstage.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Dify Color Previews\nDESCRIPTION: Demonstrates how to access and display Dify's primary and gradient colors using a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dify/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dify } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Dify.colorPrimary} />\n    <ColorPreview color={Dify.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing OpenWebUI Colors\nDESCRIPTION: This snippet shows how to use the OpenWebUI color constants in a layout. It includes a ColorPreview component to visualize the primary color used in the OpenWebUI theme.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenWebUI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenWebUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={OpenWebUI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Yandex Avatar Components\nDESCRIPTION: This snippet shows how to use the Avatar variant of the Yandex icon in both circular (default) and square shapes, with both rendered at 64 pixels in size within a horizontal Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yandex/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yandex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Yandex.Avatar size={64} />\n    <Yandex.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons with Liquid and Flexbox in TypeScript\nDESCRIPTION: This example combines the Liquid icon with Flexbox for layout. The Liquid.Combine component is displayed with a size of 64 pixels and is aligned using Flexbox, with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Liquid/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Liquid } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Liquid.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Fireworks Icons\nDESCRIPTION: Demonstrates the usage of combined Fireworks icons with different types and sizes, arranged in a vertical layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fireworks/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fireworks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Fireworks.Combine size={64} />\n    <Fireworks.Combine type={'color'} size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining InternLM Icons in a Flexbox - TSX\nDESCRIPTION: This snippet combines different types of InternLM icons in a Flexbox layout. It showcases the use of multiple icons with various types and sizes, arranged with specified alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/InternLM/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InternLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <InternLM.Combine size={64} />\n    <InternLM.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Anyscale Text Icon\nDESCRIPTION: Shows how to use the text variant of the Anyscale icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anyscale/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anyscale } from '@lobehub/icons';\n\nexport default () => <Anyscale.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying NotebookLM Primary Color\nDESCRIPTION: This code snippet demonstrates how to access and display the primary color associated with the NotebookLM icon. It utilizes a ColorPreview component (defined elsewhere) to render the color. Flexbox from 'react-layout-kit' provides horizontal layout.  The component retrieves color from `NotebookLM.colorPrimary`.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NotebookLM/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotebookLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={NotebookLM.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ZeroOne Combined Icons\nDESCRIPTION: Demonstrates the Combine subcomponent of ZeroOne which allows for different display variants. The example shows both the default and color variants with a specified size, arranged in a vertical Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ZeroOne/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ZeroOne } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <ZeroOne.Combine size={64} />\n    <ZeroOne.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Baidu Avatar Icons in React\nDESCRIPTION: Shows how to use Baidu avatars with different shapes (default circular and square). The avatars are arranged horizontally with a gap of 16 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baidu/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Baidu.Avatar size={64} />\n    <Baidu.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DALL·E Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render both the standard DALL·E icon and its colored variant using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dalle/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dalle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Dalle size={64} />\n    <Dalle.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Baichuan Color Preview\nDESCRIPTION: Demonstrates how to display and use Baichuan's primary color using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baichuan/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baichuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Baichuan.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LLaVA Text Icon\nDESCRIPTION: This snippet showcases how to render the text-based LLaVA icon.  It imports the LLaVA component and renders the LLaVA.Text variant with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LLaVA/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LLaVA } from '@lobehub/icons';\n\nexport default () => <LLaVA.Text size={48} />;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering PPIO Text Components using Flexbox in TypeScript\nDESCRIPTION: This snippet illustrates how to use PPIO.Text and PPIO.TextCn components alongside Flexbox. It sets up a Flexbox with 'flex-start' alignment, positioning text icons of the PPIO API at a specified size, indicating style control and multi-language support. Requires react-layout-kit for Flexbox integration and the PPIO package from @lobehub/icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PPIO/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PPIO } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <PPIO.Text size={48} />\n    <PPIO.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepAI Text Icon in React\nDESCRIPTION: This example demonstrates how to use the text version of the DeepAI icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepAI } from '@lobehub/icons';\n\nexport default () => <DeepAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying VectorizerAI Avatar Icon\nDESCRIPTION: This snippet shows how to render the Avatar variant of the VectorizerAI icon, with and without a specified shape, within a Flexbox layout. It uses the @lobehub/icons library for the icon and react-layout-kit for the Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VectorizerAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VectorizerAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <VectorizerAI.Avatar size={64} />\n    <VectorizerAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Icon with React\nDESCRIPTION: This snippet shows how to use the LobeHub text icon in a React component. The icon is displayed with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LobeHub/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LobeHub } from '@lobehub/icons';\n\nexport default () => <LobeHub.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying RSSHub Avatars with Flexbox in TypeScript\nDESCRIPTION: Demonstrates how to display RSSHub avatar icons in different shapes using Flexbox. This example includes square and default shapes with set sizes. It relies on the '@lobehub/icons' for icon components and 'react-layout-kit' for Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/RSSHub/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RSSHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <RSSHub.Avatar size={64} />\n    <RSSHub.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining AiMass Icons in React\nDESCRIPTION: This snippet shows how to use the combined version of the AiMass icon, with options for regular and colored types.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiMass/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiMass } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AiMass.Combine size={64} />\n    <AiMass.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying Zeabur Brand Colors\nDESCRIPTION: This snippet demonstrates how to access the primary color of the Zeabur brand from the icon component. It uses a ColorPreview component to display the color value from Zeabur.colorPrimary.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zeabur/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zeabur } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Zeabur.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Yi Avatars with Different Shapes\nDESCRIPTION: Shows how to implement Yi.Avatar components with different shape options. The example includes a circular avatar (default) and a square avatar, both sized at 64px and arranged horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yi/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Yi.Avatar size={64} />\n    <Yi.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Icons with Flexbox in React (Combine)\nDESCRIPTION: This snippet shows how to render multiple Combine icons using the Make library, set to size 64 pixels, in a Flexbox layout with vertical alignment and customized types for color variations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Make/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Make } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Make.Combine size={64} />\n    <Make.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined DALL·E Icons in React\nDESCRIPTION: This snippet illustrates how to use the combined version of the DALL·E icon, including an option to add extra elements, using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dalle/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dalle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Dalle.Combine size={64} />\n    <Dalle.Combine size={64} extra={3} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons in Flexbox using React\nDESCRIPTION: This snippet demonstrates how to import and render the Qingyan icons within a Flexbox layout. It uses the Flexbox component for layout management, providing a horizontal arrangement with a gap of 16 pixels. The Qingyan icon is rendered twice, showcasing its default size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qingyan/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qingyan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Qingyan size={64} />\n    <Qingyan.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Bedrock Text Icon\nDESCRIPTION: Shows how to render the text version of the Bedrock icon with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bedrock/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bedrock } from '@lobehub/icons';\n\nexport default () => <Bedrock.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Accessing GiteeAI Icon Primary Color in React\nDESCRIPTION: This example demonstrates how to access and display the primary color of the GiteeAI icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GiteeAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GiteeAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={GiteeAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Yuanbao Icons in TSX\nDESCRIPTION: Demonstrates how to import and render basic Yuanbao icons from @lobehub/icons package. Shows both the standard icon and colored version with size customization.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yuanbao/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yuanbao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Yuanbao size={64} />\n    <Yuanbao.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Suno Avatar Icons\nDESCRIPTION: This snippet demonstrates how to render the Suno Avatar icon component with different shapes. It imports the Suno component from the @lobehub/icons library and accesses its Avatar property. The example uses react-layout-kit for horizontal layout and showcases the 'square' shape prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Suno/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suno } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Suno.Avatar size={64} />\n    <Suno.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Magic Icon\nDESCRIPTION: This snippet demonstrates how to import and render the basic Magic icon component from the @lobehub/icons library in a React application.  It uses the `Magic` component and sets the size to 64 pixels. The component is rendered within a default export function.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Magic/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Magic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Magic size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Qwen Color Palette\nDESCRIPTION: Showcases the primary and gradient color options for Qwen using a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qwen/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qwen } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Qwen.colorPrimary} />\n    <ColorPreview color={Qwen.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Icons with Flexbox in React\nDESCRIPTION: This snippet demonstrates how to import and display LobeHub icons using Flexbox layout. It shows a horizontal arrangement with specified size for each icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LobeHub/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LobeHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LobeHub size={64} />\n    <LobeHub.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Colors with Liquid and Flexbox in TypeScript\nDESCRIPTION: This snippet uses the ColorPreview component to display a preview of the Liquid primary color inside a flexbox layout. The primary color is accessed from the Liquid library, and the layout is managed using Flexbox with a horizontal arrangement.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Liquid/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Liquid } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Liquid.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Hailuo Icon as Text\nDESCRIPTION: This snippet shows how to render the Hailuo icon as a text representation using the `Hailuo.Text` component. The `size` prop determines the font size of the text. This component is imported from the `@lobehub/icons` library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hailuo/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hailuo } from '@lobehub/icons';\n\nexport default () => <Hailuo.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Avatar Icons\nDESCRIPTION: Demonstrates Microsoft avatar icons with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Microsoft/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Microsoft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Microsoft.Avatar size={64} />\n    <Microsoft.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Suno Text Icon\nDESCRIPTION: This snippet demonstrates how to render the Suno Text icon component with a specified size. It imports the Suno component from the @lobehub/icons library and accesses its Text property. The size prop determines the rendered size of the text icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Suno/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suno } from '@lobehub/icons';\n\nexport default () => <Suno.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Icons with Flexbox in React\nDESCRIPTION: This snippet imports the Udio icon component and uses the Flexbox layout to display two Udio icons of size 64. It provides a visual arrangement of icons, utilizing spacing between them.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Udio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Udio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Udio size={64} />\n    <Udio.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Inference Text Icon\nDESCRIPTION: Shows how to render the 'Text' variant of the Inference icon with a customizable size. Depends on the '@lobehub/icons' package. The component returns an 'Inference.Text' icon with a size of 48.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inference/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inference } from '@lobehub/icons';\\n\\nexport default () => <Inference.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Color Preview in React Flexbox\nDESCRIPTION: Illustrates previewing color using the Search1API within a React component. Relies on @lobehub/icons, react-layout-kit, and a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Search1API/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Search1API } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16}>\n    <ColorPreview color={Search1API.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ai360 Avatar Components\nDESCRIPTION: Shows different implementations of the Ai360 avatar component with various shapes and background options.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai360/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai360 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Ai360.Avatar size={64} background={Ai360.colorPrimary} />\n    <Ai360.Avatar size={64} />\n    <Ai360.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Jina Avatars in Flexbox - React TSX\nDESCRIPTION: This snippet illustrates the rendering of multiple Jina avatar components using a Flexbox layout, where each avatar is displayed with a size of 64 pixels. The second avatar demonstrates a square shape, emphasizing versatility in display.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Jina/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Jina } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Jina.Avatar size={64} />\n    <Jina.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined PaLM Icons\nDESCRIPTION: Shows combined PaLM icon variants with default and color types\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PaLM/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PaLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <PaLM.Combine size={64} />\n    <PaLM.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Ideogram Icon\nDESCRIPTION: This snippet demonstrates how to render the main Ideogram icon with a specified size in a React component. It imports the Ideogram icon from the '@lobehub/icons' package and sets the size to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ideogram/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ideogram } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Ideogram size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic CentML Icons\nDESCRIPTION: Demonstrates rendering basic CentML icons in default and color variants using the size prop\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CentML/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CentML } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CentML size={64} />\n    <CentML.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Color Preview with PPIO Colors in TypeScript\nDESCRIPTION: This snippet showcases the integration of color constants from PPIO with a ColorPreview component within a Flexbox layout. It highlights rendering of primary PPIO colors through an interactive preview, employing horizontal Flexbox alignment for aesthetic arrangement. Dependencies include a custom ColorPreview component, react-layout-kit, and the PPIO icons from @lobehub/icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PPIO/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PPIO } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={PPIO.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Standard Runway Icon\nDESCRIPTION: Displays the standard Runway icon with a specified size using the @lobehub/icons library\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Runway/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Runway } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Runway size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Kera Avatar Icons\nDESCRIPTION: Shows multiple Kera avatar variants with different sizes and shapes using the Avatar component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kera/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kera } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kera.Avatar size={64} />\n    <Kera.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Spark Icons\nDESCRIPTION: This snippet demonstrates how to import and display the Spark icon and its colored variant using the `Spark` component from the `@lobehub/icons` library. It utilizes `react-layout-kit` for arranging the icons in a horizontal flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Spark/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spark } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Spark size={64} />\n    <Spark.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Previews with Stepfun in TypeScript\nDESCRIPTION: This code demonstrates how to display a color preview using a Stepfun color within a React Flexbox. It imports ColorPreview component and Stepfun color from '../components/ColorPreview' and '@lobehub/icons' respectively, wrapped inside a horizontal Flexbox with a gap of 16 pixels. Necessary dependencies are defined for seamless integration.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stepfun/index.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Stepfun } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Stepfun.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AntGroup Icons\nDESCRIPTION: Demonstrates basic usage of AntGroup icons, showing both regular and colored versions in a horizontal flex layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AntGroup/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AntGroup } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AntGroup size={64} />\n    <AntGroup.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Preview of SearchApi Icons\nDESCRIPTION: This snippet integrates the ColorPreview component to showcase the primary color of SearchApi icons in a Flexbox layout, highlighting the aesthetic integration in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SearchApi/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchApi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={SearchApi.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Sync Text in React Component\nDESCRIPTION: Demonstrates how to render text associated with the Sync icon from '@lobehub/icons' in a React component. React is a prerequisite. The size of the text icon is controlled by the 'size' parameter. The code does not take inputs and outputs a React element with the text icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Sync/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sync } from '@lobehub/icons';\n\nexport default () => <Sync.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Zhipu Avatar Components in React\nDESCRIPTION: Shows how to use the Zhipu icon as an avatar with both circular (default) and square shapes. Uses Flexbox for horizontal arrangement with appropriate spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zhipu/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zhipu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Zhipu.Avatar size={64} />\n    <Zhipu.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Runway Text Icon\nDESCRIPTION: Renders the Runway text-based icon with a custom size specification\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Runway/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Runway } from '@lobehub/icons';\n\nexport default () => <Runway.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing VertexAI Avatar Components\nDESCRIPTION: Shows how to use the VertexAI.Avatar component which displays the icon in an avatar format. The shape prop allows customization between circular and square avatars.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VertexAI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VertexAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <VertexAI.Avatar size={64} />\n    <VertexAI.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering NPLCloud Avatar Icons\nDESCRIPTION: Demonstrates different avatar shape configurations for NPLCloud icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NPLCloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NPLCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <NPLCloud.Avatar size={64} />\n    <NPLCloud.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Preview with Flexbox - TypeScript React\nDESCRIPTION: This snippet imports the Rwkv icon and a ColorPreview component to render a layout that displays the primary color from Rwkv within a Flexbox container. It serves to visually showcase the color configuration associated with RWKV icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Rwkv/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rwkv } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Rwkv.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Adobe Avatar Components\nDESCRIPTION: Shows how to implement Adobe avatars with different shapes (default and square) using horizontal Flexbox layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Adobe/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Adobe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Adobe.Avatar size={64} />\n    <Adobe.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic CogVideo Icons\nDESCRIPTION: Demonstrates how to render the basic CogVideo icon and its color variant using the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogVideo/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogVideo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CogVideo size={64} />\n    <CogVideo.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Replicate Avatar Icons\nDESCRIPTION: Demonstrates Replicate avatar icons with different shapes and sizes in a horizontal layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replicate/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replicate } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Replicate.Avatar size={64} />\n    <Replicate.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Coze Icon in React\nDESCRIPTION: Demonstrates how to import and render the basic Coze icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coze/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coze } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Coze size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Color Preview in TSX\nDESCRIPTION: This snippet shows how to render color previews using 'ColorPreview' components within a 'Flexbox' layout. The code demonstrates the use of global color constants from the 'Stability' object, enabling consistent visual themes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stability/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stability } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Stability.colorPrimary} />\n    <ColorPreview color={Stability.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Higress Colors in Flexbox - TypeScript\nDESCRIPTION: Demonstrates rendering color previews using Higress's primary and gradient colors from the '@lobehub/icons'. It uses a custom 'ColorPreview' component within a horizontal Flexbox layout to display color samples provided by Higress.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Higress/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Higress } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Higress.colorPrimary} />\n    <ColorPreview color={Higress.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Replit Text Icon in TypeScript\nDESCRIPTION: This snippet shows how to render a Replit text icon with a specified size using the LobeHub icon library. The icon size is set to 48. This is useful for displaying text-based icons in a React application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replit/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replit } from '@lobehub/icons';\n\nexport default () => <Replit.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Gemini Text Icon in React\nDESCRIPTION: This example shows how to use the Gemini.Text component to render a text-based Gemini icon in a React application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemini/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemini } from '@lobehub/icons';\n\nexport default () => <Gemini.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic OpenRouter Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the basic OpenRouter icon component from the `@lobehub/icons` library. It sets the size of the icon to 64 pixels.  The component requires the `@lobehub/icons` and `react-layout-kit` dependencies.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenRouter/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenRouter } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <OpenRouter size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Nova Colors\nDESCRIPTION: This snippet demonstrates how to display color previews using the `Nova.colorPrimary` and `Nova.colorGradient` properties. It imports a `ColorPreview` component (defined elsewhere) and uses Flexbox for horizontal layout. This showcases how to access and use the color palette associated with the Nova icon set.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nova/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Nova.colorPrimary} />\n    <ColorPreview color={Nova.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Aya Color Values\nDESCRIPTION: Demonstrates how to access and display the primary color value of the Aya icon using a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aya/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aya } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Aya.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Tripo Color Preview in React\nDESCRIPTION: This snippet demonstrates how to display a color preview using the `Tripo.colorPrimary` value from the `@lobehub/icons` library, with react-layout-kit for horizontal layout.  It imports the `Tripo` component and a custom `ColorPreview` component to render the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tripo/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tripo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Tripo.colorPrimary} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Monica Text Icon with Flexbox Layout - TSX\nDESCRIPTION: This snippet demonstrates how to render the Monica text icon using a Flexbox layout. The icon is aligned at the start of the flex container and is set to a size of 48 pixels. This showcases how to use the Monica icon specifically for text representation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Monica/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monica } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Monica.Text size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Anthropic Text Icon in React\nDESCRIPTION: Demonstrates the usage of Anthropic text icon variant with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anthropic/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anthropic } from '@lobehub/icons';\n\nexport default () => <Anthropic.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering SambaNova Text\nDESCRIPTION: This snippet imports the SambaNova icon component and renders a text variant of the SambaNova icon with a specified size. It provides a simple usage example without complex layouts.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SambaNova/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SambaNova } from '@lobehub/icons';\\n\\nexport default () => <SambaNova.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying AlibabaCloud Text Icons in React\nDESCRIPTION: Shows how to use the text versions of the AlibabaCloud icon, including both English and Chinese text icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlibabaCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlibabaCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AlibabaCloud.Text size={48} />\n    <AlibabaCloud.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Parasail Icon\nDESCRIPTION: This snippet demonstrates how to use the combined variant of the Parasail icon. It imports the necessary components and renders `Parasail.Combine` within a `Flexbox` layout, setting the icon size to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Parasail/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Parasail } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Parasail.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Kera Color Preview\nDESCRIPTION: Demonstrates color preview functionality by accessing and displaying the primary Kera color\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kera/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kera } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Kera.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CogVideo Avatar Icons\nDESCRIPTION: Shows how to implement CogVideo avatars with different shapes and sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogVideo/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogVideo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CogVideo.Avatar size={64} />\n    <CogVideo.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Inference Icon\nDESCRIPTION: Demonstrates how to render a basic Inference icon with a specified size using React. Requires the '@lobehub/icons' package. The component returns an 'Inference' icon with a size parameter of 64.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inference } from '@lobehub/icons';\\nimport { Flexbox } from 'react-layout-kit';\\n\\nexport default () => <Inference size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Icons\nDESCRIPTION: Showcases combined icon variants with monochrome and color options\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infinigence/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Infinigence } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Infinigence.Combine size={64} />\n    <Infinigence.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering FishAudio Icon in React\nDESCRIPTION: Demonstrates how to import and render the standard FishAudio icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/FishAudio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FishAudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <FishAudio size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying NPLCloud Primary Color\nDESCRIPTION: Renders the primary color of NPLCloud using a custom ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NPLCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NPLCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={NPLCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Color Preview with Unstructured Icons in React\nDESCRIPTION: This snippet combines the Unstructured icons with a ColorPreview component. It demonstrates how to render a primary color from the Unstructured set alongside a color preview component using Flexbox. This is valuable for designing applications that require color thematic consistency.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Unstructured/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unstructured } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Unstructured.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PixVerse Text in React\nDESCRIPTION: This snippet showcases how to render PixVerse text as a React component, setting its size to 48 pixels. It provides a simple example of using PixVerse text within a React application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PixVerse/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PixVerse } from '@lobehub/icons';\n\nexport default () => <PixVerse.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering GithubCopilot Text Icon in React\nDESCRIPTION: This example shows how to use the text version of the GithubCopilot icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GithubCopilot/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GithubCopilot } from '@lobehub/icons';\n\nexport default () => <GithubCopilot.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic CrewAI Icons\nDESCRIPTION: Demonstrates how to render basic CrewAI icons in both regular and colored variants using the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CrewAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CrewAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <CrewAI size={64} />\n    <CrewAI.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Cohere Brand Colors in TSX\nDESCRIPTION: Demonstrates how to access and use the Cohere brand colors through the colorPrimary constant. Uses a ColorPreview component to display the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cohere/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cohere } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Cohere.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering BAAI Text Icon\nDESCRIPTION: Shows how to use the text variant of the BAAI icon with specified dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BAAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BAAI } from '@lobehub/icons';\n\nexport default () => <BAAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Coqui Avatars in React\nDESCRIPTION: This snippet shows how to create Coqui avatars. It demonstrates rendering circular and square avatars, both with a size of 64 pixels, using the Coqui.Avatar component within a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coqui/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coqui } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Coqui.Avatar size={64} />\n    <Coqui.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Replit Icon Variants Flexbox Layout TypeScript\nDESCRIPTION: This snippet illustrates how to combine different variants of Replit icons using a Flexbox layout. It includes standard and color-type combined icons with a size of 64. Dependencies are the React Layout Kit and LobeHub icon library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replit/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Replit.Combine size={64} />\n    <Replit.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Zhipu Text Icon in React\nDESCRIPTION: Shows how to use the text variant of the Zhipu icon. This renders the textual representation of the Zhipu brand at a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Zhipu/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Zhipu } from '@lobehub/icons';\n\nexport default () => <Zhipu.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering DreamMachine Text in React\nDESCRIPTION: This snippet shows how to render text using the DreamMachine.Text component in a React application. Like the icon example, it allows size customization through the 'size' parameter, set to 48 here. It requires '@lobehub/icons'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DreamMachine/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DreamMachine } from '@lobehub/icons';\n\nexport default () => <DreamMachine.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering ByteDance Text Logos\nDESCRIPTION: Shows implementation of ByteDance text logos in both default and Chinese versions. Uses vertical Flexbox layout with start alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ByteDance/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ByteDance } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <ByteDance.Text size={48} />\n    <ByteDance.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Parasail Icon Text\nDESCRIPTION: This snippet shows how to render the text variant of the Parasail icon. It imports the Parasail component and renders the `Parasail.Text` sub-component with a specified size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Parasail/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Parasail } from '@lobehub/icons';\n\nexport default () => <Parasail.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Preview with TopazLabs Color\nDESCRIPTION: This snippet shows how to use the TopazLabs primary color within a Flexbox layout and renders a ColorPreview component that takes the primary color as a prop.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TopazLabs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TopazLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={TopazLabs.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Tripo Avatar Icons in React\nDESCRIPTION: This snippet demonstrates how to render the avatar variant of the `Tripo` icon with different shapes using React and react-layout-kit. It imports the `Tripo` component from `@lobehub/icons` and uses the `Flexbox` component from `react-layout-kit` to display the icons horizontally. The `shape` prop allows customizing the shape of the avatar.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tripo/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tripo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Tripo.Avatar size={64} />\n    <Tripo.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepAI Icon in React\nDESCRIPTION: This snippet shows how to import and render the DeepAI icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <DeepAI size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying AssemblyAI Text Icon in React\nDESCRIPTION: This code shows how to render the text version of the AssemblyAI icon using the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AssemblyAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssemblyAI } from '@lobehub/icons';\n\nexport default () => <AssemblyAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying InternLM Icons with Flexbox - TSX\nDESCRIPTION: This snippet demonstrates how to use the InternLM icon components within a Flexbox layout to arrange multiple icons horizontally with a gap between them. The 'size' prop is utilized to define the icon's dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/InternLM/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InternLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <InternLM size={64} />\n    <InternLM.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Bedrock Colors\nDESCRIPTION: Demonstrates how to use Bedrock's predefined colors for primary and gradient styles\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Bedrock/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bedrock } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Bedrock.colorPrimary} />\n    <ColorPreview color={Bedrock.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Greptile Colors with Flexbox in TSX\nDESCRIPTION: This example uses Flexbox to display a color preview of Greptile's primary color using a ColorPreview component. It requires '@lobehub/icons', 'react-layout-kit', and a local ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Greptile/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Greptile } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Greptile.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Yi Text Component\nDESCRIPTION: Shows how to use the Yi.Text component from @lobehub/icons package. This example renders the text-only version of the Yi icon with a specified size of 48px.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yi/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yi } from '@lobehub/icons';\n\nexport default () => <Yi.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Mistral Text Icon\nDESCRIPTION: This snippet demonstrates how to import the Mistral icon component from the '@lobehub/icons' library and render its text variation with a specified size using React.  It showcases the use of `Mistral.Text` to display the icon as text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Mistral/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Mistral } from '@lobehub/icons';\n\nexport default () => <Mistral.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Flux Icon Colors in React\nDESCRIPTION: This code demonstrates how to preview the primary color of the Flux icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flux/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flux } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Flux.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using AionLabs Color Preview\nDESCRIPTION: Demonstrates how to use the primary color of the AionLabs icon with a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AionLabs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AionLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AionLabs.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Yuanbao Text Component\nDESCRIPTION: Shows how to use the Text variation of the Yuanbao icon, which renders the icon as text. The example sets a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yuanbao/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yuanbao } from '@lobehub/icons';\n\nexport default () => <Yuanbao.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Haiper Avatars\nDESCRIPTION: Shows two Haiper avatars with different shapes and a size of 64 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Haiper/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Haiper } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Haiper.Avatar size={64} />\n    <Haiper.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering n8n Text Icon with Flexbox in TypeScript\nDESCRIPTION: This snippet shows how to render a text version of the n8n icon within a Flexbox layout. It imports the N8n component and utilizes its Text property to display the icon at 48px size. Alignment is set to flex-start for non-horizontal arrangements, highlighting the flexibility in positioning the icon text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/N8n/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { N8n } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <N8n.Text size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Icon with Novita - JavaScript (TSX)\nDESCRIPTION: This snippet highlights how to render a text version of the Novita icon using Novita.Text with a specified size. No additional layout packages are required other than the React library. Key parameter includes the size which determines the rendered text icon dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Novita/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Novita } from '@lobehub/icons';\n\nexport default () => <Novita.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Inflection Text Icon\nDESCRIPTION: Displays the Inflection text variant with a custom size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inflection/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inflection } from '@lobehub/icons';\n\nexport default () => <Inflection.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Coze Avatar Variants\nDESCRIPTION: Shows how to use Coze avatar components in both circular and square shapes with specified sizes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coze/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coze } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Coze.Avatar size={64} />\n    <Coze.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Import and Render Combined Pika Icon (tsx)\nDESCRIPTION: This snippet demonstrates how to import the Pika icon component and render its combined variant.  It uses Flexbox for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pika/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pika } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Pika.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with V0 in React (TypeScript)\nDESCRIPTION: This snippet imports the V0 icon component from the @lobehub/icons library and renders it with a specified size of 64 pixels. It demonstrates the basic usage of the V0 component in a functional React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/V0/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { V0 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <V0 size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Snowflake Avatars with Flexbox - React\nDESCRIPTION: This snippet renders Snowflake avatar icons within a Flexbox layout. It includes variations in shape, where one avatar is a standard circle and another is square-shaped, both with a size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Snowflake/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Snowflake } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Snowflake.Avatar size={64} />\n    <Snowflake.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with Flexbox in React (Icons)\nDESCRIPTION: This snippet demonstrates how to render the Make icon component with a size of 64 pixels inside a Flexbox container aligned horizontally. It showcases the use of the Make icon's default and color variations.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Make/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Make } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Make size={64} />\n    <Make.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeepMind Text Icon in React\nDESCRIPTION: This snippet shows how to use the text version of the DeepMind icon. It imports the DeepMind component and renders its Text subcomponent.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepMind/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepMind } from '@lobehub/icons';\n\nexport default () => <DeepMind.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering AiHubMix Icons in React\nDESCRIPTION: Demonstrates how to import and use the AiHubMix icon component in both regular and colored versions. The icons are displayed in a horizontal flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiHubMix/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiHubMix } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <AiHubMix size={64} />\n    <AiHubMix.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Hunyuan Primary Color in React\nDESCRIPTION: This code snippet demonstrates how to access and display the primary color associated with the Hunyuan icon using the Hunyuan.colorPrimary property from the @lobehub/icons library. It imports the Hunyuan component and utilizes a custom ColorPreview component to display the color. The Flexbox component from react-layout-kit is used for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hunyuan/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hunyuan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Hunyuan.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using vLLM Brand Colors\nDESCRIPTION: Demonstrates how to access and display the primary brand color of vLLM using the ColorPreview component. This is useful for maintaining consistent branding across applications.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Vllm/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Vllm } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Vllm.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Aya Text Icon\nDESCRIPTION: Shows how to implement the text version of the Aya icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aya/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aya } from '@lobehub/icons';\n\nexport default () => <Aya.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Render Railway Text Icon in React\nDESCRIPTION: This snippet demonstrates rendering the `Railway.Text` variant of the Railway icon.  The `size` prop determines the size of the text icon.  It imports the Railway icon from the @lobehub/icons library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Railway/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Railway } from '@lobehub/icons';\n\nexport default () => <Railway.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Exa Primary Color in React\nDESCRIPTION: This snippet shows how to access and use the primary color associated with the Exa icon component in a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Exa/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Exa } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Exa.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Colors with Kling Icons\nDESCRIPTION: This snippet imports the Kling icon component and Flexbox layout, along with a custom ColorPreview component. It displays previews of primary and gradient colors from the Kling library in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kling/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kling } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Kling.colorPrimary} />\n    <ColorPreview color={Kling.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CogView Text Variant in TSX\nDESCRIPTION: Shows how to use the text variant of the CogView icon. This example imports the CogView component and renders its Text subcomponent with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogView/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogView } from '@lobehub/icons';\n\nexport default () => <CogView.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Flowith Avatars in React\nDESCRIPTION: This example demonstrates how to use the Flowith.Avatar component to create circular and square avatars.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flowith/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flowith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Flowith.Avatar size={64} />\n    <Flowith.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with ModelScope in React\nDESCRIPTION: This example demonstrates the use of the ModelScope library to render a text component with a specified size. It showcases how to directly render ModelScope text elements in React with minimal layout modifications.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ModelScope/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModelScope } from '@lobehub/icons';\n\nexport default () => <ModelScope.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Cloudflare Text Icon in React\nDESCRIPTION: This code shows how to use the text version of the Cloudflare icon from the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cloudflare/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cloudflare } from '@lobehub/icons';\n\nexport default () => <Cloudflare.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Flowith Text Component in React\nDESCRIPTION: This example demonstrates how to use the Flowith.Text component to render text-only version of the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flowith/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flowith } from '@lobehub/icons';\n\nexport default () => <Flowith.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Kimi Avatar Icons\nDESCRIPTION: Shows avatar icon rendering with different sizes and shapes using Flexbox\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kimi/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kimi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Kimi.Avatar size={64} />\n    <Kimi.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering IFlyTekCloud Text in React\nDESCRIPTION: This snippet renders the text variant of the IFlyTekCloud icon using the IFlyTekCloud package. The size property specifies the size of the text. The snippet requires the \\'@lobehub/icons\\' package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/IFlyTekCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IFlyTekCloud } from '@lobehub/icons';\n\nexport default () => <IFlyTekCloud.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Recraft Icon Component in React\nDESCRIPTION: This snippet demonstrates importing the Recraft component from the @lobehub/icons library and displaying it with a specific size using JSX. The component Recraft is rendered with a size of 64 pixels. Ensure the @lobehub/icons library is installed as a dependency.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Recraft/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Recraft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Recraft size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Cloudflare Avatar Icons in React\nDESCRIPTION: This snippet shows how to use the Cloudflare avatar icon in both circular and square shapes using the @lobehub/icons package and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cloudflare/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cloudflare } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Cloudflare.Avatar size={64} />\n    <Cloudflare.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon with Liquid in TypeScript\nDESCRIPTION: This snippet demonstrates rendering a Liquid icon with a size of 64 pixels using the Liquid library from @lobehub/icons. The Liquid component is used to display icons with specific dimensions.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Liquid/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Liquid } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Liquid size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Alibaba Text Icons in React\nDESCRIPTION: This code shows how to use the text variants of the Alibaba icon, including both standard and Chinese versions. It uses Flexbox for vertical alignment with a gap between components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Alibaba/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alibaba } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Alibaba.Text size={48} />\n    <Alibaba.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying the Parasail Icon\nDESCRIPTION: This snippet demonstrates how to import and render the basic Parasail icon component from the @lobehub/icons library. It utilizes React and sets the size of the icon to 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Parasail/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Parasail } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Parasail size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing LobeHub Colors with Flexbox in React\nDESCRIPTION: This snippet demonstrates how to use the LobeHub primary color in a ColorPreview component, arranged in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LobeHub/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LobeHub } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LobeHub.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying Upstage Brand Colors\nDESCRIPTION: Demonstrates how to access and display the primary brand color defined within the Upstage component using a ColorPreview helper component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Upstage/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Upstage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Upstage.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering AiStudio Text Icon\nDESCRIPTION: Shows how to display the text-only version of the AiStudio icon with custom sizing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiStudio/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiStudio } from '@lobehub/icons';\n\nexport default () => <AiStudio.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Clipdrop Text Icon in React\nDESCRIPTION: This snippet demonstrates how to use the text version of the Clipdrop icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Clipdrop/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Clipdrop } from '@lobehub/icons';\n\nexport default () => <Clipdrop.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Accessing VertexAI Brand Colors\nDESCRIPTION: Demonstrates how to access and preview the primary brand color associated with VertexAI through the colorPrimary static property.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VertexAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VertexAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={VertexAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Showing Targon Colors with Flexbox in TSX\nDESCRIPTION: This snippet highlights the use of a ColorPreview component to display Targon's primary color within a Flexbox layout. It depends on the @lobehub/icons and react-layout-kit, as well as a local ColorPreview component. The key parameter 'color' defines which Targon color is previewed.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Targon/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Targon } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Targon.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering CodeGeeX Text-Only Icon\nDESCRIPTION: Shows how to display the text-only version of the CodeGeeX icon. The example imports the CodeGeeX component and renders its Text subcomponent with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CodeGeeX/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeGeeX } from '@lobehub/icons';\n\nexport default () => <CodeGeeX.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars - React\nDESCRIPTION: This snippet imports LmStudio icons and renders three avatar components with various properties using Flexbox for layout. The avatars have different backgrounds and shapes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LmStudio/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LmStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LmStudio.Avatar size={64} background={LmStudio.colorPrimary} />\n    <LmStudio.Avatar size={64} />\n    <LmStudio.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining SearchApi Icon with Flexbox in React\nDESCRIPTION: This snippet shows how to combine the SearchApi icon with a Flexbox layout, allowing for flexible placement and alignment within a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SearchApi/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchApi } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <SearchApi.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LiveKit Text Icon\nDESCRIPTION: Displays the LiveKit text icon with a specified size using the Text variant\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LiveKit/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKit } from '@lobehub/icons';\n\nexport default () => <LiveKit.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Doc2X Text Icon in React\nDESCRIPTION: This code shows how to use the text variant of the Doc2X icon component, setting a custom size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doc2X/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doc2X } from '@lobehub/icons';\n\nexport default () => <Doc2X.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Spark Text Icon\nDESCRIPTION: This snippet shows how to display the text representation of the Spark icon using `Spark.Text` component.  The component is imported from the `@lobehub/icons` library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Spark/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spark } from '@lobehub/icons';\n\nexport default () => <Spark.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Coze Icon\nDESCRIPTION: Demonstrates the combined version of the Coze icon within a flex container with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coze/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coze } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Coze.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LiveKit Icons with Size Variations\nDESCRIPTION: Demonstrates rendering default and color LiveKit icons with customizable size using React components\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LiveKit/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <LiveKit size={64} />\n    <LiveKit.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Claude Text Icon in React\nDESCRIPTION: Shows how to use the Text variant of the Claude icon. This renders the textual version of the Claude brand at a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Claude/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Claude } from '@lobehub/icons';\n\nexport default () => <Claude.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying VectorizerAI Text Icon\nDESCRIPTION: This snippet shows how to render the Text variant of the VectorizerAI icon with a specified size. It imports the VectorizerAI component from the @lobehub/icons library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VectorizerAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VectorizerAI } from '@lobehub/icons';\n\nexport default () => <VectorizerAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Langfuse Text Icon in TypeScript\nDESCRIPTION: This snippet shows how to render the 'Langfuse.Text' icon with a size of 48. The icon is imported from '@lobehub/icons'. It does not utilize additional layout components and directly renders the text icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Langfuse/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Langfuse } from '@lobehub/icons';\n\nexport default () => <Langfuse.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with Liquid in TypeScript\nDESCRIPTION: This snippet demonstrates rendering text using the Liquid.Text component with a size of 48 pixels. It uses the Liquid library and does not rely on additional layout components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Liquid/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Liquid } from '@lobehub/icons';\n\nexport default () => <Liquid.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Haiper Color\nDESCRIPTION: Demonstrates how to preview the primary color of the Haiper icon\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Haiper/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Haiper } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Haiper.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Gemma Icon Colors in React\nDESCRIPTION: This example shows how to use and display the primary color and gradient color associated with the Gemma icon. It uses a custom ColorPreview component to visualize the colors.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gemma/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gemma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Gemma.colorPrimary} />\n    <ColorPreview color={Gemma.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TII Text Icon\nDESCRIPTION: Displays the text variant of the TII icon with configurable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TII/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TII } from '@lobehub/icons';\n\nexport default () => <TII.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering TopazLabs Text Icon\nDESCRIPTION: This snippet shows how to render the TopazLabs text icon at a size of 48 pixels using a stateless functional component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TopazLabs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TopazLabs } from '@lobehub/icons';\n\nexport default () => <TopazLabs.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using DeepInfra Color Constants\nDESCRIPTION: Demonstrates how to use the DeepInfra color constants with a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepInfra/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepInfra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={DeepInfra.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Structure in Markdown\nDESCRIPTION: Standard format for version entries in the changelog, showing version number, date, and categorized changes including features, fixes and styles\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [Version 1.59.0](https://github.com/lobehub/lobe-icons/compare/v1.58.2...v1.59.0)\n\n<sup>Released on **2024-12-30**</sup>\n\n#### ✨ Features\n\n- **auto**: Auto build static icons.\n\n#### 💄 Styles\n\n- **misc**: Add o3.\n```\n\n----------------------------------------\n\nTITLE: Rendering Targon Text Component in TSX\nDESCRIPTION: This snippet shows how to render a text component using the Targon library. It is a simple demonstration that imports the Targon module and configures the Text component with a defined size parameter. Dependencies include the @lobehub/icons package.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Targon/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Targon } from '@lobehub/icons';\n\nexport default () => <Targon.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Higress Avatars in Horizontal Flexbox - TypeScript\nDESCRIPTION: Shows how to import and utilize Higress Avatar icons from the '@lobehub/icons' package in a horizontal Flexbox layout. It demonstrates rendering avatars with different properties such as background color, size, and shape using the 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Higress/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Higress } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Higress.Avatar size={64} background={Higress.colorPrimary} />\n    <Higress.Avatar size={64} />\n    <Higress.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Version of Automatic1111 Icon\nDESCRIPTION: Shows how to implement the text version of the Automatic1111 icon with a specified size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Automatic/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Automatic } from '@lobehub/icons';\n\nexport default () => <Automatic.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Cerebras Text Icon\nDESCRIPTION: Shows how to use the text variant of the Cerebras icon with a specific size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cerebras/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cerebras } from '@lobehub/icons';\n\nexport default () => <Cerebras.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying InternLM Text Icon - TSX\nDESCRIPTION: This snippet shows how to render the text variant of the InternLM icon with a specified size. It's a simple component that exports a single text icon rendered directly.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/InternLM/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InternLM } from '@lobehub/icons';\n\nexport default () => <InternLM.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Icons\nDESCRIPTION: Displays Infinigence avatar icons with different shapes and sizes\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infinigence/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Infinigence } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Infinigence.Avatar size={64} />\n    <Infinigence.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering FishAudio Text Icon in React\nDESCRIPTION: Shows how to use the text version of the FishAudio icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/FishAudio/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FishAudio } from '@lobehub/icons';\n\nexport default () => <FishAudio.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Perplexity Text Icon\nDESCRIPTION: This snippet shows how to render the text representation of the Perplexity icon using `Perplexity.Text`. It imports the Perplexity component and then renders the `.Text` variant, setting its size to 48.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Perplexity/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Perplexity } from '@lobehub/icons';\n\nexport default () => <Perplexity.Text size={48} />;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Infermatic.Text Icon Component\nDESCRIPTION: Demonstrates rendering the Infermatic.Text icon component. Requires 'lobehub/icons' library. Set icon size using the size prop. Expected output is an Infermatic.Text icon of size 48. There are no additional constraints.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infermatic/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Infermatic } from '@lobehub/icons';\n\nexport default () => <Infermatic.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering SenseNova Text Icon\nDESCRIPTION: Displays the SenseNova text icon with configurable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SenseNova/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SenseNova } from '@lobehub/icons';\n\nexport default () => <SenseNova.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Import and Render Pika Text Icon (tsx)\nDESCRIPTION: This snippet shows how to import the Pika icon component and render its text variant.  It also demonstrates setting the size of the text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pika/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pika } from '@lobehub/icons';\n\nexport default () => <Pika.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Coqui Color in React\nDESCRIPTION: This code demonstrates how to preview the primary color of the Coqui icon. It imports a custom ColorPreview component and uses it to display the Coqui.colorPrimary value within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coqui/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coqui } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Coqui.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering GiteeAI Text Icon in React\nDESCRIPTION: This snippet shows how to use the text version of the GiteeAI icon component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GiteeAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GiteeAI } from '@lobehub/icons';\n\nexport default () => <GiteeAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Ai21 Text Icon in React\nDESCRIPTION: This code demonstrates how to use the text version of the Ai21 icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai21/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai21 } from '@lobehub/icons';\n\nexport default () => <Ai21.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering SearchApi Text in React\nDESCRIPTION: This snippet demonstrates the usage of SearchApi's Text component, rendering it within a React functional component with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SearchApi/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SearchApi } from '@lobehub/icons';\n\nexport default () => <SearchApi.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Colors with Flexbox in TypeScript\nDESCRIPTION: The snippet shows how to use Flexbox to preview colors from the Poe icon set. It includes a custom 'ColorPreview' component demonstrating the primary color from the Poe library. Components are arranged with a horizontal gap using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Poe/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Poe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Poe.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hero Section in YAML\nDESCRIPTION: YAML configuration block that defines the title and description for the hero section of the LobeHub Icons project page. The title includes HTML formatting for bold text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhero:\n  title: LobeHub <b>Icons</b>\n  description: Popular AI / LLM Model Brand SVG Logo and Icon Collection\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Editor Navigation Configuration\nDESCRIPTION: YAML configuration block that defines the navigation settings for the Icon Editor page, including title and ordering information.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/editor/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Icon Editor\ndescription: Icon Editor for @lobehub/icons\nnav:\n  title: Editor\n  order: 888\n```\n\n----------------------------------------\n\nTITLE: Implementing Fal Avatars\nDESCRIPTION: Shows different avatar implementations including circular and square shapes, arranged horizontally with a gap.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fal/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fal } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Fal.Avatar size={64} />\n    <Fal.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Including TSX Editor Component\nDESCRIPTION: Code reference that imports and renders the main Editor component from the src/components directory.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/editor/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"../../src/components/Editor/index.tsx\" inline></code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Manus Text Icon\nDESCRIPTION: Shows how to render the Manus text variant of the icon with a custom size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Manus/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manus } from '@lobehub/icons';\n\nexport default () => <Manus.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering TencentCloud Text Icon\nDESCRIPTION: This snippet presents a simple React component that renders the TencentCloud text icon with a size of 48. It utilizes the LobeHub Icons library to display the icon effectively.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TencentCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TencentCloud } from '@lobehub/icons';\n\nexport default () => <TencentCloud.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Phidata Text\nDESCRIPTION: This snippet imports the Phidata icon and renders its text variant. It showcases how to display Phidata as text using the `Phidata.Text` component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Phidata/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Phidata } from '@lobehub/icons';\n\nexport default () => <Phidata.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Icon in TSX\nDESCRIPTION: This snippet illustrates how to render a 'Stability.Text' icon in a React component. It specifies the icon size to customize the visual presentation within the component layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stability/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stability } from '@lobehub/icons';\n\nexport default () => <Stability.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Exa Text Icon in React\nDESCRIPTION: This example shows how to use the Exa.Text component to render a text-based icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Exa/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Exa } from '@lobehub/icons';\n\nexport default () => <Exa.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Lightricks Text Component\nDESCRIPTION: This snippet shows how to import and render the Lightricks text component at a specified size within a functional React component, sourced from the same icon library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lightricks/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lightricks } from '@lobehub/icons';\n\nexport default () => <Lightricks.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Hedra Text Icon\nDESCRIPTION: Shows how to render a Hedra text icon with specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hedra/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hedra } from '@lobehub/icons';\n\nexport default () => <Hedra.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering NPLCloud Text Icon\nDESCRIPTION: Displays the text-based variant of the NPLCloud icon with size configuration\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/NPLCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NPLCloud } from '@lobehub/icons';\n\nexport default () => <NPLCloud.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Cohere Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Cohere icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It employs media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/cohere\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/cohere-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/cohere-color.png\\\" /></picture><br/>Cohere                                        \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Ollama Text Icon\nDESCRIPTION: Renders the Ollama text logo with configurable size using the @lobehub/icons library\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ollama/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ollama } from '@lobehub/icons';\n\nexport default () => <Ollama.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering AionLabs Text Icon\nDESCRIPTION: Shows how to implement the text variant of the AionLabs icon with a specified size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AionLabs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AionLabs } from '@lobehub/icons';\n\nexport default () => <AionLabs.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering LangGraph Text Icon\nDESCRIPTION: Shows how to render the text variant of the LangGraph icon with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangGraph/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangGraph } from '@lobehub/icons';\n\nexport default () => <LangGraph.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing DocSearch Primary Color in React\nDESCRIPTION: This snippet shows how to display a preview of the DocSearch primary color using a custom ColorPreview component and the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DocSearch/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocSearch } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={DocSearch.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Collapsible Table of Contents in Markdown\nDESCRIPTION: This snippet shows how to create a collapsible table of contents using HTML details and summary tags within a Markdown file. It includes links to various sections of the README.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary><kbd>Table of contents</kbd></summary>\n\n#### TOC\n\n- [✨ Features](#-features)\n- [🤯 CDN Usage](#-cdn-usage)\n  - [`A` CDN with SVG](#a-cdn-with-svg)\n  - [`B` CDN with PNG](#b-cdn-with-png)\n  - [`C` CDN with WEBP](#c-cdn-with-webp)\n  - [Static Packages](#static-packages)\n- [📦 Installation](#-installation)\n  - [Compile with NextJS](#compile-with-nextjs)\n- [⌨️ Local Development](#️-local-development)\n- [🤝 Contributing](#-contributing)\n- [🩷 Sponsor](#-sponsor)\n- [🔗 Links](#-links)\n  - [More Products](#more-products)\n  - [Design Resources](#design-resources)\n  - [Development Resources](#development-resources)\n\n####\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Inline TSX Component Reference\nDESCRIPTION: TSX code reference that includes an inline component from an index file. This suggests the hero section is rendered using a React/TSX component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./index.tsx\" inline></code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Voyage Avatar Components\nDESCRIPTION: Demonstrates the usage of Voyage avatar components with different configurations. The example shows both a circular avatar (default) and a square avatar with customized size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Voyage/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Voyage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Voyage.Avatar size={64} />\n    <Voyage.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Text Icon from Lobe Icons (HTML)\nDESCRIPTION: This example demonstrates how to use the OpenAI text icon from Lobe Icons, serving it from CDN (unpkg or npmmirror) with support for light and dark color schemes.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"https://unpkg.com/@lobehub/icons-static-png@latest/dark/openai-text.png\"\n  />\n  <img height=\"64\" src=\"https://unpkg.com/@lobehub/icons-static-png@latest/light/openai-text.png\" />\n</picture>\n\n<picture>\n  <source\n    media=\"(prefers-color-scheme: dark)\"\n    srcset=\"\n      https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/dark/openai-text.png\n    \"\n  />\n  <img\n    height=\"64\"\n    src=\"https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/openai-text.png\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Back to Top Navigation Link\nDESCRIPTION: A markdown link with HTML alignment for navigation back to top of page.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-webp/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)\n```\n\n----------------------------------------\n\nTITLE: Displaying DeepAI Icon Colors in React\nDESCRIPTION: This snippet demonstrates how to access and display the primary color of the DeepAI icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={DeepAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering RWKV Text Icon - TypeScript React\nDESCRIPTION: This snippet demonstrates the usage of the Rwkv.Text icon component from '@lobehub/icons', rendering it with a specified size of 48. The component is a standalone representation aimed at displaying text icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Rwkv/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rwkv } from '@lobehub/icons';\n\nexport default () => <Rwkv.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined CentML Icons\nDESCRIPTION: Demonstrates the combined icon variant with both default and color types, arranged vertically\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CentML/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CentML } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <CentML.Combine size={64} />\n    <CentML.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Wenxin Text Representation\nDESCRIPTION: Shows how to use the text representation of the Wenxin icon, which displays the textual logo instead of the graphical icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Wenxin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wenxin } from '@lobehub/icons';\n\nexport default () => <Wenxin.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Colab Text Icon\nDESCRIPTION: Shows how to render the text variant of the Colab icon. This variant displays the Google Colab name as text instead of using the graphical logo.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Colab/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Colab } from '@lobehub/icons';\n\nexport default () => <Colab.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Luma Text Icon\nDESCRIPTION: This snippet demonstrates how to render the text version of the Luma icon. It imports the `Luma` component from `@lobehub/icons` and renders `Luma.Text` with a size of 48.  The component is exported as the default export of the module.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Luma/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Luma } from '@lobehub/icons';\n\nexport default () => <Luma.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Voyage Text Representation\nDESCRIPTION: Shows how to use the text variant of the Voyage icon. This example imports the Voyage component and renders its Text subcomponent with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Voyage/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Voyage } from '@lobehub/icons';\n\nexport default () => <Voyage.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering SiliconCloud Text Icon in React\nDESCRIPTION: In this snippet, a SiliconCloud text icon is rendered with a size of 48 pixels. This demonstrates the usage of the SiliconCloud component to display text-style icons within a React function component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SiliconCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SiliconCloud } from '@lobehub/icons';\n\nexport default () => <SiliconCloud.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Civitai Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Civitai icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It utilizes media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/civitai\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/civitai-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/civitai-color.png\\\" /></picture><br/>Civitai                                    \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Haiper Text Icon\nDESCRIPTION: Renders the Haiper text icon with a size of 48 pixels\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Haiper/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Haiper } from '@lobehub/icons';\n\nexport default () => <Haiper.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Access and Display MCP Color Variable in React\nDESCRIPTION: This example shows how to access a color variable defined within the MCP component (`MCP.colorPrimary`). The `ColorPreview` component (assumed to be a custom component) is used to display the color. The Flexbox component is used for horizontal layout with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MCP/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MCP } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={MCP.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenWebUI Text Icon\nDESCRIPTION: This snippet demonstrates how to use the OpenWebUI component to render text icons with a size of 48 pixels. It imports the required OpenWebUI component for text.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenWebUI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenWebUI } from '@lobehub/icons';\n\nexport default () => <OpenWebUI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Previews of SiliconCloud Icons in React\nDESCRIPTION: In this snippet, a color preview component is utilized to display the primary color associated with SiliconCloud icons. This showcases how to integrate color attributes into Flexbox layouts in React.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SiliconCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SiliconCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={SiliconCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding CHANGELOG.md Using HTML Embed Tag\nDESCRIPTION: Using the HTML embed tag to include the CHANGELOG.md file from the parent directory into the current page. This allows for displaying the changelog content within the documentation site without duplicating content.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<embed src=\"../CHANGELOG.md\"></embed>\n```\n\n----------------------------------------\n\nTITLE: Rendering Stepfun Text in TypeScript\nDESCRIPTION: This code snippet illustrates the rendering of Stepfun text components at a size of 48 pixels. It imports the Stepfun module from '@lobehub/icons' and renders text using the Stepfun.Text component. No additional layout components are used.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Stepfun/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Stepfun } from '@lobehub/icons';\n\nexport default () => <Stepfun.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Ideogram Avatars\nDESCRIPTION: This snippet provides a way to render two Ideogram avatars within a horizontal Flexbox layout. The first avatar uses a default size of 64 pixels, while the second avatar uses the same size but with a square shape.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ideogram/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ideogram } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Ideogram.Avatar size={64} />\n    <Ideogram.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Colab Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Colab icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It leverages media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/colab\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/colab-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/colab-color.png\\\" /></picture><br/>Google (Colab)                       \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Gemma Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Gemma icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme.  The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/gemma\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/gemma-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/gemma-color.png\\\" /></picture><br/>Gemma (Google)                 \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Sync Colors with Flexbox\nDESCRIPTION: Demonstrates the use of '@lobehub/icons' colors, showing integration in a Flexbox layout for visual display. Requires React, 'react-layout-kit', and a custom 'ColorPreview' component to show the icons' primary color. Outputs a horizontal Flexbox element displaying the color preview.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Sync/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sync } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Sync.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Tiangong Text Icon in React\nDESCRIPTION: This snippet shows how to render the text representation of the Tiangong icon. It imports the `Tiangong` component and renders the `Tiangong.Text` sub-component, setting the size to 48. The `Tiangong` component is imported from the `@lobehub/icons` library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tiangong/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tiangong } from '@lobehub/icons';\n\nexport default () => <Tiangong.Text size={48} />;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Hedra Combined Icon\nDESCRIPTION: Displays a Hedra combined icon within a flexible layout container\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hedra/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hedra } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Hedra.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Icon with Qingyan\nDESCRIPTION: This snippet illustrates how to render the text variant of the Qingyan icon. It imports the Qingyan component and sets the size to 48 pixels. This is part of a simple export structure with no additional styling frameworks involved.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qingyan/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qingyan } from '@lobehub/icons';\n\nexport default () => <Qingyan.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Kling Text Icon\nDESCRIPTION: This snippet imports the Kling icon component and renders the Kling text icon at a size of 48 pixels. It demonstrates how to display text-based icons using the Kling library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kling/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kling } from '@lobehub/icons';\n\nexport default () => <Kling.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing DBRX Text Icon\nDESCRIPTION: Shows how to use the text version of the DBRX icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dbrx/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dbrx } from '@lobehub/icons';\n\nexport default () => <Dbrx.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering PaLM Text Icon\nDESCRIPTION: Displays the PaLM text icon with a specific size configuration\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PaLM/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PaLM } from '@lobehub/icons';\n\nexport default () => <PaLM.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying AntGroup Text Components\nDESCRIPTION: Shows how to implement AntGroup text components in both default and Chinese variations, arranged vertically.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AntGroup/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AntGroup } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AntGroup.Text size={48} />\n    <AntGroup.TextCn size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Greptile Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Greptile icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/greptile\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/greptile-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/greptile-color.png\\\" /></picture><br/>Greptile                    \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Hyperbolic Text Icon\nDESCRIPTION: This snippet demonstrates how to import and render the Hyperbolic text icon at size 48 using a functional React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hyperbolic/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hyperbolic } from '@lobehub/icons';\n\nexport default () => <Hyperbolic.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Inflection Color Palette\nDESCRIPTION: Shows how to retrieve and preview the primary Inflection color\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inflection/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inflection } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Inflection.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Fireworks Text Component\nDESCRIPTION: Shows how to implement the text variant of the Fireworks icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fireworks/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fireworks } from '@lobehub/icons';\n\nexport default () => <Fireworks.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Using Gradio Colors in React with ColorPreview\nDESCRIPTION: This snippet demonstrates how to incorporate Gradio's color constants into a React component, utilizing a custom ColorPreview component to display the primary color. This example shows integration with additional custom components for enhanced UX.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gradio/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gradio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Gradio.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars with Flexbox in React\nDESCRIPTION: This snippet illustrates the display of Udio avatars within a Flexbox layout. It shows two avatar components, one with a square shape, both set to size 64, facilitating a responsive design.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Udio/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Udio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Udio.Avatar size={64} />\n    <Udio.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Exa Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Exa icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/exa\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/exa-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/exa-color.png\\\" /></picture><br/>Exa                                                    \"\n```\n\n----------------------------------------\n\nTITLE: Displaying DeepInfra Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the DeepInfra icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It leverages media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/deepinfra\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/deepinfra-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/deepinfra-color.png\\\" /></picture><br/>DeepInfra                            \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Microsoft Color Preview\nDESCRIPTION: Shows how to preview the primary color of Microsoft icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Microsoft/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Microsoft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Microsoft.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Crusoe Text Icon in React\nDESCRIPTION: This code shows how to render the text version of the Crusoe icon. It uses the Text subcomponent of the Crusoe icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Crusoe/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Crusoe } from '@lobehub/icons';\n\nexport default () => <Crusoe.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Gradio Text Icon in React\nDESCRIPTION: This snippet focuses on rendering a Gradio Text icon with a predefined size. It is a simple React component setup, demonstrating how to import and utilize the Gradio.Text component from the '@lobehub/icons' library.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Gradio/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gradio } from '@lobehub/icons';\n\nexport default () => <Gradio.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Midjourney Text Component\nDESCRIPTION: This example demonstrates rendering the Text variant of the Midjourney icon from the '@lobehub/icons' package. The Text component is rendered at a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Midjourney/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Midjourney } from '@lobehub/icons';\n\nexport default () => <Midjourney.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Icon in TypeScript\nDESCRIPTION: This snippet illustrates the use of the 'Poe.Text' component to display a text-based icon with a size of 48 pixels. It does not require the Flexbox layout, focusing solely on rendering a text variant of the Poe icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Poe/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Poe } from '@lobehub/icons';\n\nexport default () => <Poe.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Kluster Text Component in React\nDESCRIPTION: Illustrates the rendering of a Kluster text component in a React component. By importing Kluster from '@lobehub/icons', it uses the Kluster.Text subcomponent with a size of 48 pixels. This snippet is a simple representation of using Kluster's text features independently.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kluster/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Kluster } from '@lobehub/icons';\n\nexport default () => <Kluster.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Xuanyuan Text Representation\nDESCRIPTION: Shows how to use the text-only version of the Xuanyuan icon with a specified size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xuanyuan/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xuanyuan } from '@lobehub/icons';\n\nexport default () => <Xuanyuan.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Jina Text Component - React TSX\nDESCRIPTION: This snippet shows how to import and render the Jina text component using JSX. The Jina text is displayed with a size of 48 pixels, providing a straightforward and lightweight text rendition.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Jina/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Jina } from '@lobehub/icons';\n\nexport default () => <Jina.Text size={48} />;\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Crusoe Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Crusoe icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It leverages media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/crusoe\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/crusoe-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/crusoe-color.png\\\" /></picture><br/>Crusoe                                        \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Mistral Primary Color\nDESCRIPTION: This snippet demonstrates how to import the Mistral icon component from the '@lobehub/icons' library and display its primary color using a ColorPreview component and React and react-layout-kit.  It uses Flexbox for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Mistral/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Mistral } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Mistral.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: TII Color Preview\nDESCRIPTION: Displays the primary color of the Technology Innovation Institute using a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TII/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TII } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={TII.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Kera Text Icon\nDESCRIPTION: Renders a text-based Kera icon with a custom size using the Text variant from @lobehub/icons\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kera/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kera } from '@lobehub/icons';\n\nexport default () => <Kera.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying DeepSeek Color Palette in React\nDESCRIPTION: This snippet demonstrates how to access and display the primary color of the DeepSeek icon. It uses a custom ColorPreview component to render the color swatch.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepSeek/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepSeek } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={DeepSeek.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Haiper Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Haiper icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It utilizes media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/haiper\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/haiper.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/haiper.png\\\" /></picture><br/>Haiper                                        \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Hailuo Icon Colors\nDESCRIPTION: This snippet demonstrates how to display the primary and gradient colors associated with the Hailuo icon using the `Hailuo.colorPrimary` and `Hailuo.colorGradient` properties. It utilizes a `ColorPreview` component (defined elsewhere) to render the colors. `Flexbox` arranges the color previews horizontally.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Hailuo/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hailuo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Hailuo.colorPrimary} />\n    <ColorPreview color={Hailuo.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering StateCloud Text Icon in React\nDESCRIPTION: This TypeScript snippet illustrates rendering a StateCloud.Text icon with a size of 48 pixels in a React application. The StateCloud component is imported from @lobehub/icons and used directly in a default export for JSX rendering.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/StateCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StateCloud } from '@lobehub/icons';\n\nexport default () => <StateCloud.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Azure Color Preview\nDESCRIPTION: Demonstrates how to use Azure's primary color in a preview component using the ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Azure/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Azure } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Azure.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenChat Text Icon\nDESCRIPTION: Shows how to render the text-specific variant of the OpenChat icon with size configuration\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/OpenChat/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OpenChat } from '@lobehub/icons';\n\nexport default () => <OpenChat.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Friendli Text Component\nDESCRIPTION: Shows how to use the text variant of the Friendli icon component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Friendli/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Friendli } from '@lobehub/icons';\n\nexport default () => <Friendli.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying LlamaIndex Primary Color in TSX\nDESCRIPTION: This snippet demonstrates how to display the primary color associated with the LlamaIndex icon using the `LlamaIndex.colorPrimary` property from the `@lobehub/icons` library. It utilizes a custom `ColorPreview` component (imported from `../components/ColorPreview`) to render the color. `Flexbox` from `react-layout-kit` is used for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LlamaIndex/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LlamaIndex } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LlamaIndex.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Goose Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Goose icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It utilizes media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/goose\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/goose.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/goose.png\\\" /></picture><br/>Goose (codename)                                 \"\n```\n\n----------------------------------------\n\nTITLE: Rendering Tripo Text Icon in React\nDESCRIPTION: This snippet demonstrates how to render the text variant of the `Tripo` icon using React. It imports the `Tripo` component from `@lobehub/icons` and renders the `Tripo.Text` component. The `size` prop determines the font size of the text icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tripo/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tripo } from '@lobehub/icons';\n\nexport default () => <Tripo.Text size={48} />;\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Liquid Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the Liquid icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It utilizes media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/liquid\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/liquid.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/liquid.png\\\" /></picture><br/>Liquid                                  \"\n```\n\n----------------------------------------\n\nTITLE: Using CogVideo Color Values\nDESCRIPTION: Demonstrates how to access and preview the primary color of the CogVideo icon using a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogVideo/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogVideo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={CogVideo.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Inflection Icon\nDESCRIPTION: Demonstrates how to import and render the primary Inflection icon with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Inflection/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inflection } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Inflection size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Using AdobeFirefly Color Values\nDESCRIPTION: Demonstrates how to access and display the primary color value of the AdobeFirefly icon using a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AdobeFirefly/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdobeFirefly } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AdobeFirefly.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Preview with Qingyan\nDESCRIPTION: This snippet demonstrates how to display a color preview using a specific color from the Qingyan library. It imports a ColorPreview component and organizes it within a Flexbox container, ensuring a horizontal layout with a gap of 16 pixels. The primary color from the Qingyan icon set is passed as a prop to the ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Qingyan/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Qingyan } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Qingyan.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing AssemblyAI Primary Color in React\nDESCRIPTION: This snippet shows how to display a color preview of the AssemblyAI primary color using a custom ColorPreview component and the @lobehub/icons package in a React component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AssemblyAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssemblyAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AssemblyAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Colors with Midjourney Icons\nDESCRIPTION: This code demonstrates using the Midjourney colorPrimary property with a Flexbox layout. The `ColorPreview` component is used to preview colors, requiring a custom component alongside '@lobehub/icons' and 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Midjourney/index.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Midjourney } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Midjourney.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Replicate Primary Color\nDESCRIPTION: Shows how to preview the primary color of the Replicate icon using a custom ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replicate/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replicate } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Replicate.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Unstructured Text Icon in React\nDESCRIPTION: This snippet specifically imports and displays the text variant of the Unstructured icon. It's a simple component that demonstrates the usage of the Unstructured.Text icon with a predefined size, useful for scenarios where textual representation is needed.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Unstructured/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unstructured } from '@lobehub/icons';\n\nexport default () => <Unstructured.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Coqui Text Icon in React\nDESCRIPTION: This code shows how to use the text version of the Coqui icon. It imports the necessary components and renders the Coqui.Text icon with a size of 48 pixels within a Flexbox container.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coqui/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coqui } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Coqui.Text size={48} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Langfuse Color in Flexbox with TypeScript\nDESCRIPTION: This code example shows how to display a preview of a primary color from Langfuse using a Flexbox layout. It imports a 'ColorPreview' component for displaying the color value retrieved from 'Langfuse.colorPrimary'. Layout handling uses the 'react-layout-kit'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Langfuse/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Langfuse } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Langfuse.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using AiStudio Color Constants\nDESCRIPTION: Demonstrates how to access and use the predefined color values from the AiStudio component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiStudio/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiStudio } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AiStudio.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining TopazLabs Icon with Flexbox\nDESCRIPTION: This snippet demonstrates how to use the TopazLabs Combine icon within a Flexbox layout, allowing for easy arrangement of elements with specified gaps and alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TopazLabs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TopazLabs } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <TopazLabs.Combine size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Badge Image Link in Markdown\nDESCRIPTION: Example of a markdown image badge link for navigation\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying CodeGeeX Color Properties\nDESCRIPTION: Demonstrates how to access and use the color properties exported by the CodeGeeX component. The example imports a ColorPreview component to display swatches of the component's primary color and gradient color values.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CodeGeeX/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeGeeX } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={CodeGeeX.colorPrimary} />\n    <ColorPreview color={CodeGeeX.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering GiteeAI Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the GiteeAI icon component with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/GiteeAI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GiteeAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <GiteeAI size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Using Anyscale Color Preview\nDESCRIPTION: Demonstrates how to display the primary color of the Anyscale brand using a ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Anyscale/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Anyscale } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Anyscale.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Utilizing Alibaba Brand Colors in React\nDESCRIPTION: This code demonstrates how to access and display the primary color of the Alibaba brand. It uses a custom ColorPreview component to render the color swatch, arranged with Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Alibaba/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alibaba } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Alibaba.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering TencentCloud Color Preview\nDESCRIPTION: This component renders a color preview based on TencentCloud's primary color using Flexbox layout. It imports a ColorPreview component to display the color effectively.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/TencentCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TencentCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={TencentCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ComfyUI Color Constants in React\nDESCRIPTION: Example showing how to access and preview ComfyUI's primary color and gradient color values using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ComfyUI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComfyUI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={ComfyUI.colorPrimary} />\n    <ColorPreview color={ComfyUI.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Adobe Color Preview\nDESCRIPTION: Demonstrates how to use Adobe's primary color in a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Adobe/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Adobe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Adobe.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Replicate Brand Icons\nDESCRIPTION: Shows how to use the Replicate brand icon variant with size and alignment configuration\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Replicate/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Replicate } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Replicate.Brand size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering MyShell Text Icon in React\nDESCRIPTION: This snippet showcases the MyShell.Text component being rendered with a size prop within a functional React component. It demonstrates a simple usage of the MyShell icon library without additional layout components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MyShell/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyShell } from '@lobehub/icons';\n\nexport default () => <MyShell.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Lambda Color Preview\nDESCRIPTION: Renders the primary color of the Lambda brand using a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lambda/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lambda } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Lambda.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying DALL·E Color Preview in React\nDESCRIPTION: This snippet shows how to use the primary color of the DALL·E icon in a color preview component, utilizing the @lobehub/icons package and a custom ColorPreview component in a React application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Dalle/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dalle } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Dalle.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering the Yandex Text Component\nDESCRIPTION: This snippet shows how to use the Text variant of the Yandex icon, which likely displays a text-based representation of the Yandex logo with a size of 48 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Yandex/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Yandex } from '@lobehub/icons';\n\nexport default () => <Yandex.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Formatting Feature Section in Markdown\nDESCRIPTION: Demonstrates how to structure the feature section of a changelog entry using Markdown headings and bullet points.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n#### ✨ Features\n\n- **auto**: Auto build static icons.\n```\n\n----------------------------------------\n\nTITLE: Displaying AlibabaCloud Brand Colors in React\nDESCRIPTION: Shows how to access and display the primary brand color of AlibabaCloud using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlibabaCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlibabaCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AlibabaCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Tripo Icons in React\nDESCRIPTION: This snippet demonstrates how to import and render basic `Tripo` icons with different sizes using React and react-layout-kit. It imports the `Tripo` component from `@lobehub/icons` and uses the `Flexbox` component from `react-layout-kit` to display the icons horizontally with a gap. The `size` prop controls the dimensions of the icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Tripo/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tripo } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Tripo size={64} />\n    <Tripo.Color size={64} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Luma Colors\nDESCRIPTION: This code demonstrates how to display a color preview using the primary color defined in the Luma icon set. It imports `Luma` from `@lobehub/icons`, `Flexbox` from `react-layout-kit`, and `ColorPreview` from a local component.  It then displays the `Luma.colorPrimary` within the `ColorPreview` component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Luma/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Luma } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Luma.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining LangSmith Icons with Different Types\nDESCRIPTION: Shows LangSmith combined icons in default and color variants using a Flexbox layout\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangSmith/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangSmith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <LangSmith.Combine size={64} />\n    <LangSmith.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Volcengine Brand Colors in React\nDESCRIPTION: Demonstrates how to access and display the primary brand color of Volcengine. The color is displayed using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Volcengine/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Volcengine } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Volcengine.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Previews with ModelScope in React\nDESCRIPTION: This snippet illustrates how to display color previews using a custom ColorPreview component alongside the ModelScope library to access color constants. It demonstrates integrating ModelScope color constants within a layout, enabling a visual representation of primary colors using Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/ModelScope/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModelScope } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={ModelScope.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CrewAI Text Component\nDESCRIPTION: Shows how to use the text variant of the CrewAI icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CrewAI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CrewAI } from '@lobehub/icons';\n\nexport default () => <CrewAI.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering CentML Text Icon\nDESCRIPTION: Shows how to use the text variant of the CentML icon with a specified size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CentML/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CentML } from '@lobehub/icons';\n\nexport default () => <CentML.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering CogVideo Text Icon\nDESCRIPTION: Shows how to use the text variant of the CogVideo icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogVideo/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogVideo } from '@lobehub/icons';\n\nexport default () => <CogVideo.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Preview for Lightricks Icons\nDESCRIPTION: This snippet uses a ColorPreview component to display the primary color associated with Lightricks icons. It showcases how to integrate a color preview with a Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Lightricks/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lightricks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Lightricks.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying DeepMind Icon Colors in React\nDESCRIPTION: This example demonstrates how to access and display the primary color of the DeepMind icon. It uses a custom ColorPreview component and Flexbox for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/DeepMind/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeepMind } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={DeepMind.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Release Date in Markdown\nDESCRIPTION: Shows how to format the version number and release date for a changelog entry using Markdown syntax.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## [Version 1.9.0](https://github.com/lobehub/lobe-icons/compare/@lobehub/icons-static-png@1.8.0...@lobehub/icons-static-png@1.9.0)\n\n<sup>Released on **2024-12-07**</sup>\n```\n\n----------------------------------------\n\nTITLE: Previewing n8n Colors with Flexbox in TypeScript\nDESCRIPTION: This snippet uses the ColorPreview component to display a primary color from the n8n theme within a Flexbox layout. The color value is imported from the N8n module and a horizontal Flexbox layout is used to maintain consistent spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/N8n/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { N8n } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={N8n.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Ai360 Color Previews\nDESCRIPTION: Demonstrates how to preview the primary and gradient colors associated with the Ai360 icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai360/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai360 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Ai360.colorPrimary} />\n    <ColorPreview color={Ai360.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LLaVA Colors\nDESCRIPTION: This snippet showcases how to render color previews using LLaVA's color palette.  It imports LLaVA from @lobehub/icons and Flexbox from react-layout-kit, along with a ColorPreview component from a local file.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LLaVA/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LLaVA } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LLaVA.colorPrimary} />\n    <ColorPreview color={LLaVA.colorGradient} />\n  </Flexbox>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Alibaba Avatar Icons in React\nDESCRIPTION: This snippet shows how to use the Alibaba avatar component with different shapes. It demonstrates both circular and square avatars using the shape prop, arranged horizontally with Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Alibaba/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alibaba } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Alibaba.Avatar size={64} />\n    <Alibaba.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Manus Color Preview\nDESCRIPTION: Shows how to access and preview the primary color of the Manus icon library\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Manus/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Manus } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Manus.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Ai21 Brand Colors in React\nDESCRIPTION: This code shows how to access and display the primary and gradient colors associated with the Ai21 brand.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai21/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai21 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Ai21.colorPrimary} />\n    <ColorPreview color={Ai21.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Crusoe Icon Color in React\nDESCRIPTION: This snippet demonstrates how to display the primary color of the Crusoe icon using a custom ColorPreview component. It accesses the colorPrimary property of the Crusoe icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Crusoe/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Crusoe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Crusoe.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying AiMass Text Icon in React\nDESCRIPTION: This example demonstrates how to use the text version of the AiMass icon with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiMass/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiMass } from '@lobehub/icons';\n\nexport default () => <AiMass.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Cursor Icon Primary Color\nDESCRIPTION: This snippet shows how to access and display the primary color of the Cursor icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cursor/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cursor } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Cursor.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Magic Colors Preview\nDESCRIPTION: This snippet demonstrates how to display a color preview associated with the Magic icon using `Magic.colorPrimary`. It imports the `Magic` component, `Flexbox` from `react-layout-kit`, and a custom `ColorPreview` component. The `ColorPreview` component receives `Magic.colorPrimary` as a prop to display the primary color of the icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Magic/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Magic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Magic.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying DeepMind Icon with Light/Dark Mode Support\nDESCRIPTION: This snippet displays the DeepMind icon using HTML's <picture> element with <source> elements to support both light and dark color schemes. It uses media queries to determine which image to display based on the user's preferred color scheme. The image sources point to the Lobe Icons GitHub repository.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"https://lobehub.com/icons/deepmind\\\"><picture><source media=\\\"(prefers-color-scheme: dark)\\\" srcset=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/deepmind-color.png\\\" /><img height=\\\"56px\\\" width=\\\"56px\\\" src=\\\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/deepmind-color.png\\\" /></picture><br/>DeepMind (Google)                       \"\n```\n\n----------------------------------------\n\nTITLE: Displaying Fal Color Preview\nDESCRIPTION: Demonstrates how to use the primary color of the Fal component within a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fal/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fal } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Fal.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Import and Render Pika Color Preview (tsx)\nDESCRIPTION: This snippet demonstrates how to import the Pika icon component and use its primary color in a ColorPreview component. It shows how to access Pika's color variables.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pika/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pika } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Pika.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Nebius Colors with Flexbox\nDESCRIPTION: This snippet illustrates how to preview a specific color from the Nebius package using a Flexbox layout for organization. The ColorPreview component is utilized for displaying the color, requiring a path to '../components/ColorPreview' to access the component definition.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Nebius/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Nebius } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Nebius.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimax Color Previews in React\nDESCRIPTION: This snippet is a React functional component that imports Minimax color values and displays them using ColorPreview components within a horizontal Flexbox layout. It demonstrates how to showcase color attributes effectively.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Minimax/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Minimax } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Minimax.colorPrimary} />\n    <ColorPreview color={Minimax.colorGradient} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Coze Color Properties\nDESCRIPTION: Demonstrates how to access and preview the primary color of the Coze icon using a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Coze/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Coze } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Coze.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Volcengine Icon to lobe-icons\nDESCRIPTION: This snippet shows the addition of the Volcengine icon to the lobe-icons project in version 1.72.0.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [Version 1.72.0](https://github.com/lobehub/lobe-icons/compare/v1.71.0...v1.72.0)\n\n<sup>Released on **2025-02-15**</sup>\n\n#### ✨ Features\n\n- **auto**: Auto build static icons.\n- **misc**: Add Volcengine.\n```\n\n----------------------------------------\n\nTITLE: Displaying BaiduCloud Text Icon in React\nDESCRIPTION: This example demonstrates how to use the text version of the BaiduCloud icon. It imports the BaiduCloud component and renders its Text subcomponent with a specified size.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BaiduCloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaiduCloud } from '@lobehub/icons';\n\nexport default () => <BaiduCloud.Text size={48} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Preview of MyShell Icon in React\nDESCRIPTION: In this snippet, a ColorPreview component is used alongside MyShell icons to visualize a primary color property from the MyShell icon library within a Flexbox layout. This demonstrates integration of UI components.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/MyShell/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyShell } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={MyShell.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Snowflake Color Preview - React\nDESCRIPTION: This snippet shows how to utilize the ColorPreview component to display the primary color associated with the Snowflake icon. It organizes the display within a Flexbox layout, showcasing effective color representation.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Snowflake/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Snowflake } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Snowflake.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying AiHubMix Color Preview in React\nDESCRIPTION: Shows how to access and display the primary color of the AiHubMix icon. It uses a custom ColorPreview component to render the color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AiHubMix/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AiHubMix } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AiHubMix.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering LangSmith Primary Color Preview\nDESCRIPTION: Displays the primary color of the LangSmith icon using a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangSmith/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangSmith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LangSmith.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Cerebras Color Preview\nDESCRIPTION: Shows how to use the primary color constant from the Cerebras icon package with a color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cerebras/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cerebras } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Cerebras.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Ai21 Icons in React\nDESCRIPTION: This snippet shows how to use the combined version of Ai21 icons, including a color variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Ai21/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ai21 } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Ai21.Combine size={64} />\n    <Ai21.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Showcasing Groq Colors\nDESCRIPTION: Strategy for displaying a color preview, utilizing a Groq color constant and Flexbox for horizontal arrangement. Dependencies include '@lobehub/icons', 'react-layout-kit', and a component named 'ColorPreview'.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Groq/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Groq } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Groq.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Doc2X Primary Color in React\nDESCRIPTION: This code demonstrates how to access and display the primary color associated with the Doc2X icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doc2X/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doc2X } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Doc2X.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Version reference link in Markdown\nDESCRIPTION: A markdown link showing the version comparison between releases.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-webp/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Version 1.26.0](https://github.com/lobehub/lobe-icons/compare/@lobehub/icons-static-webp@1.25.0...@lobehub/icons-static-webp@1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Cline Icon\nDESCRIPTION: Demonstrates how to render the basic Cline icon component with a specified size of 64 pixels.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Cline/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cline } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => <Cline size={64} />;\n```\n\n----------------------------------------\n\nTITLE: Previewing Colors from InternLM - TSX\nDESCRIPTION: This snippet introduces how to use the ColorPreview component to display a color from the InternLM icon set within a horizontal Flexbox layout. The color is sourced from the InternLM properties.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/InternLM/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InternLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={InternLM.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Fireworks Color Preview\nDESCRIPTION: Demonstrates how to implement a color preview using the Fireworks primary color with a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Fireworks/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fireworks } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Fireworks.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Combined ProviderIcon with Color\nDESCRIPTION: Shows the implementation of combined provider icons with color customization\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/provder-icon.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demos/provider-icon/CombineColor.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Displaying LangGraph Primary Color\nDESCRIPTION: Demonstrates how to preview the primary color of the LangGraph icon using a ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LangGraph/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LangGraph } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LangGraph.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: SenseNova Color Preview\nDESCRIPTION: Shows how to preview the primary color of the SenseNova icon system\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/SenseNova/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SenseNova } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={SenseNova.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Details Section Format in Markdown\nDESCRIPTION: Collapsible details section showing improvements and fixes with commit references\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary><kbd>Improvements and Fixes</kbd></summary>\n\n#### What's improved\n\n- **auto**: Auto build static icons ([3646e7c](https://github.com/lobehub/lobe-icons/commit/3646e7c))\n\n#### Styles\n\n- **misc**: Add o3 ([91ae94f](https://github.com/lobehub/lobe-icons/commit/91ae94f))\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Using Friendli Color Properties\nDESCRIPTION: Demonstrates how to access and preview the primary color of the Friendli icon component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Friendli/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Friendli } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Friendli.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using AlephAlpha Color Properties\nDESCRIPTION: Demonstrates how to access and display the primary color of the AlephAlpha icon using a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AlephAlpha/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlephAlpha } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AlephAlpha.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using CrewAI Color Preview\nDESCRIPTION: Shows how to implement a color preview component using CrewAI's primary color.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CrewAI/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CrewAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={CrewAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying PaLM Color Palette\nDESCRIPTION: Renders a color preview of the primary PaLM color using a custom color preview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/PaLM/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PaLM } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={PaLM.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: LiveKit Color Preview\nDESCRIPTION: Renders a color preview component using LiveKit's primary color\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/LiveKit/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKit } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={LiveKit.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying VectorizerAI Primary Color\nDESCRIPTION: This snippet demonstrates how to access and display the primary color of the VectorizerAI icon component within a Flexbox layout. It imports the VectorizerAI component from @lobehub/icons, react-layout-kit for Flexbox and ColorPreview.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/VectorizerAI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VectorizerAI } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={VectorizerAI.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying StateCloud Colors in React\nDESCRIPTION: This TypeScript snippet demonstrates how to render color previews using the ColorPreview component and StateCloud color properties. It sets up a layout with Flexbox, with StateCloud.colorPrimary used as the color source for ColorPreview. Import dependencies include @lobehub/icons and react-layout-kit.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/StateCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StateCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={StateCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Glif Color Properties\nDESCRIPTION: Shows how to access and display the primary color of the Glif component using a ColorPreview component\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Glif/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Glif } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Glif.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using AntGroup Color Utilities\nDESCRIPTION: Demonstrates how to utilize AntGroup's primary color in a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AntGroup/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AntGroup } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={AntGroup.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Brand Icons in Markdown Table\nDESCRIPTION: This code snippet demonstrates how to create a markdown table that displays supported brand icons with light and dark theme variations. It uses HTML picture elements to switch between themes and provides links to each icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Model                                                                                                                                                                                                                                                                                                                                                                                                                             | Provider                                                                                                                                                                                                                                                                                                                                                                                                                                            | Application                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <a href=\"https://lobehub.com/icons/ai21\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/ai21.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/ai21.png\" /></picture><br/>Ai21Labs (Jamba)                              | <a href=\"https://lobehub.com/icons/zeroone\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/zeroone.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/zeroone.png\" /></picture><br/>01.AI (零一万物)                                       | <a href=\"https://lobehub.com/icons/adobe\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/adobe-color.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/adobe-color.png\" /></picture><br/>Adobe                                |\n```\n\n----------------------------------------\n\nTITLE: Integrating Color Preview with Infermatic Colors\nDESCRIPTION: Integrates Infermatic library colors with a ColorPreview component inside a Flexbox layout from react-layout-kit. Requires 'lobehub/icons' and '../components/ColorPreview'. Pass the desired color as a prop to ColorPreview. Displays a color preview inside a Flexbox. Needs appropriate component structure.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infermatic/index.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Infermatic } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Infermatic.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: AWS Color Preview\nDESCRIPTION: Shows how to use AWS primary color with a custom ColorPreview component in a horizontal Flexbox layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Aws/index.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aws } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Aws.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Commit Reference Link in Markdown\nDESCRIPTION: Example of a commit reference link using GitHub's commit hash format\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n([d1e2c0b](https://github.com/lobehub/lobe-icons/commit/d1e2c0b))\n```\n\n----------------------------------------\n\nTITLE: Previewing Flowith Primary Color in React\nDESCRIPTION: This snippet shows how to access and preview the primary color of the Flowith icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flowith/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flowith } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Flowith.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Pollinations Color Preview\nDESCRIPTION: This snippet demonstrates how to use the Pollinations color value in a ColorPreview component, accompanied by a Flexbox layout. It showcases how to integrate color representation alongside icons.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Pollinations/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pollinations } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Pollinations.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Responsive Icon with Light/Dark Mode in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display a responsive icon image that changes based on the user's color scheme preference (light or dark mode). It uses the <picture> element with <source> for dark mode and a fallback <img> for light mode.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/README.md#2025-04-21_snippet_29\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://lobehub.com/icons/novita\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/dark/novita-color.png\" /><img height=\"56px\" width=\"56px\" src=\"https://raw.githubusercontent.com/lobehub/lobe-icons/refs/heads/master/packages/static-png/light/novita-color.png\" /></picture><br/>Novita\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Update in Markdown\nDESCRIPTION: Shows the version update from 1.37.0 to 1.37.1 with release date and link to compare changes on GitHub.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 1.37.1](https://github.com/lobehub/lobe-icons/compare/v1.37.0...v1.37.1)\n\n<sup>Released on **2024-10-31**</sup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Brand Color Palette\nDESCRIPTION: Demonstrates how to access and preview Infinigence brand's primary color\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Infinigence/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Infinigence } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Infinigence.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Flora Primary Color in React\nDESCRIPTION: This snippet shows how to access and display the primary color of the Flora icon using a custom ColorPreview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Flora/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flora } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Flora.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Phidata Colors\nDESCRIPTION: This snippet imports the Phidata icon and demonstrates how to display the primary color associated with the icon. It uses a ColorPreview component (assumed to be defined elsewhere) to render the color specified by `Phidata.colorPrimary`, arranged horizontally using react-layout-kit's Flexbox.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Phidata/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Phidata } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Phidata.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying BaiduCloud Color Preview in React\nDESCRIPTION: This snippet demonstrates how to access and display the primary color of the BaiduCloud icon. It uses a custom ColorPreview component to render the color, wrapped in a Flexbox for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/BaiduCloud/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaiduCloud } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={BaiduCloud.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Baidu Brand Colors in React\nDESCRIPTION: Demonstrates how to access and display the primary brand color of Baidu using a custom ColorPreview component. This allows for consistent brand color usage across the application.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Baidu/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Baidu } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Baidu.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing CogView Color Constants in TSX\nDESCRIPTION: Demonstrates how to access and use the primary color constant defined in the CogView component. This example uses a ColorPreview component to display the CogView.colorPrimary value.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/CogView/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CogView } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={CogView.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Unstructured Icons with Flexbox in React\nDESCRIPTION: This snippet imports the Unstructured icon component along with Flexbox for layout. It renders the Unstructured icon and its color variant side by side with a specified gap between them, making it easy to visualize icon sizes and styles in a responsive layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Unstructured/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unstructured } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Unstructured size={64} />\n    <Unstructured.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Recraft Avatar Component in React with Flexbox\nDESCRIPTION: This example showcases how the Recraft.Avatar component can be integrated with a horizontal Flexbox layout. It displays two avatar components with different shapes, both sized at 64 pixels. The react-layout-kit is required for Flexbox functionalities.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Recraft/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Recraft } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Recraft.Avatar size={64} />\n    <Recraft.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Combined Crusoe Icons in React\nDESCRIPTION: This snippet demonstrates how to render combined Crusoe icons, including both standard and colored versions. It uses the Combine subcomponent of the Crusoe icon and the Flexbox component for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Crusoe/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Crusoe } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <Crusoe.Combine size={64} />\n    <Crusoe.Combine size={64} type={'color'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Colab Avatar Icons with Different Styles\nDESCRIPTION: Shows how to use the Colab icon as an avatar with different configurations including a custom background color, default styling, and square shape variant.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Colab/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Colab } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Colab.Avatar size={64} background={Colab.colorPrimary} />\n    <Colab.Avatar size={64} />\n    <Colab.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Google Colab Icons in Regular and Color Variants\nDESCRIPTION: Demonstrates how to import and render both the standard Colab icon and its colored version. Uses Flexbox from react-layout-kit to arrange icons horizontally with spacing.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Colab/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Colab } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Colab size={64} />\n    <Colab.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Upstage Icons in Standard and Color Variants\nDESCRIPTION: Demonstrates how to import and render the Upstage icon in both standard and color variants using the @lobehub/icons package and react-layout-kit for layout.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Upstage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Upstage } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Upstage size={64} />\n    <Upstage.Color size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Details Section in Markdown\nDESCRIPTION: Shows how to create a collapsible 'Improvements and Fixes' section using HTML details and summary tags in Markdown.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n<details>\n<summary><kbd>Improvements and Fixes</kbd></summary>\n\n#### What's improved\n\n- **auto**: Auto build static icons ([9fd9e0b](https://github.com/lobehub/lobe-icons/commit/9fd9e0b))\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Version Release Links in Markdown\nDESCRIPTION: Examples of version comparison links using GitHub repository URL formatting\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/packages/static-png/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Version 1.44.0](https://github.com/lobehub/lobe-icons/compare/@lobehub/icons-static-png@1.43.0...@lobehub/icons-static-png@1.44.0)\n```\n\n----------------------------------------\n\nTITLE: Implementing AntGroup Brand Logos\nDESCRIPTION: Demonstrates the usage of AntGroup brand logos in both standard and colored versions with vertical alignment.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/AntGroup/index.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AntGroup } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} align={'flex-start'}>\n    <AntGroup.Brand size={64} />\n    <AntGroup.BrandColor size={64} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Xinference Avatar Components\nDESCRIPTION: Shows how to use the Xinference.Avatar component to display circular or square avatar representations of the Xinference icon.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Xinference/index.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Xinference } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <Xinference.Avatar size={64} />\n    <Xinference.Avatar size={64} shape={'square'} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Doubao Color Schemes\nDESCRIPTION: Demonstrates how to use the primary color scheme of the Doubao icon with a color preview component.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Doubao/index.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Doubao } from '@lobehub/icons';\nimport { Flexbox } from 'react-layout-kit';\n\nimport ColorPreview from '../components/ColorPreview';\n\nexport default () => (\n  <Flexbox gap={16} horizontal>\n    <ColorPreview color={Doubao.colorPrimary} />\n  </Flexbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding Component Demo in Markdown\nDESCRIPTION: Code that embeds the IconCombine component demo using the 'code' tag with a source path and center alignment attribute.\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/docs/features/icon-combine.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demos/IconCombine.tsx\" center></code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Kimi Text Icons\nDESCRIPTION: Shows how to render text-based Kimi icons with configurable size\nSOURCE: https://github.com/lobehub/lobe-icons/blob/master/src/Kimi/index.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Kimi } from '@lobehub/icons';\n\nexport default () => <Kimi.Text size={48} />;\n```"
  }
]