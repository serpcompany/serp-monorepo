[
  {
    "owner": "prosemirror",
    "repo": "website",
    "content": "TITLE: Creating a Minimal ProseMirror Editor in JavaScript\nDESCRIPTION: Demonstrates how to create a basic ProseMirror editor by importing the schema, creating an editor state, and initializing an editor view. This minimal example creates an empty document conforming to the schema with a default selection at the start.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {schema} from \"prosemirror-schema-basic\"\nimport {EditorState} from \"prosemirror-state\"\nimport {EditorView} from \"prosemirror-view\"\n\nlet state = EditorState.create({schema})\nlet view = new EditorView(document.body, {state})\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic ProseMirror editor with example-setup in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a basic ProseMirror editor using the example-setup package. It imports the necessary modules, creates a schema that extends the basic schema with list nodes, and then initializes an editor with various plugins for a complete editing experience.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/basic/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPART(code)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collaborative Editor with ProseMirror collab Module in JavaScript\nDESCRIPTION: This code demonstrates how to set up a collaborative editor using ProseMirror's collab module. It creates an editor view with the collab plugin, tracks local changes, receives remote changes, and communicates with the central authority to synchronize document state across multiple editors.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/collab.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {EditorState} from \"prosemirror-state\"\nimport {EditorView} from \"prosemirror-view\"\nimport {schema} from \"prosemirror-schema-basic\"\nimport collab from \"prosemirror-collab\"\n\nfunction collabEditor(authority, place) {\n  let view = new EditorView(place, {\n    state: EditorState.create({\n      doc: authority.doc,\n      plugins: [collab.collab({version: authority.steps.length})]\n    }),\n    dispatchTransaction(transaction) {\n      let newState = view.state.apply(transaction)\n      view.updateState(newState)\n      let sendable = collab.sendableSteps(newState)\n      if (sendable)\n        authority.receiveSteps(sendable.version, sendable.steps,\n                               sendable.clientID)\n    }\n  })\n\n  authority.onNewSteps.push(function() {\n    let newData = authority.stepsSince(collab.getVersion(view.state))\n    view.dispatch(\n      collab.receiveTransaction(view.state, newData.steps, newData.clientIDs))\n  })\n\n  return view\n}\n```\n\n----------------------------------------\n\nTITLE: Adding History and Keymap Plugins to ProseMirror\nDESCRIPTION: Demonstrates how to extend the editor functionality using plugins. This example adds undo/redo capability with the history plugin and registers keyboard shortcuts for these functions with the keymap plugin.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/intro.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// (Omitted repeated imports)\nimport {undo, redo, history} from \"prosemirror-history\"\nimport {keymap} from \"prosemirror-keymap\"\n\nlet state = EditorState.create({\n  schema,\n  plugins: [\n    history(),\n    keymap({\"Mod-z\": undo, \"Mod-y\": redo})\n  ]\n})\nlet view = new EditorView(document.body, {state})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Schema with Node Types in JavaScript\nDESCRIPTION: Example of creating a simple ProseMirror schema with basic node types. The schema defines a document structure where the document contains paragraphs, and paragraphs contain text.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/schema.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst trivialSchema = new Schema({\n  nodes: {\n    doc: {content: \"paragraph+\"},\n    paragraph: {content: \"text*\"},\n    text: {inline: true},\n    /* ... and so on */\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Central Authority for ProseMirror Collaborative Editing in JavaScript\nDESCRIPTION: This code defines an Authority class that tracks document versions, accepts changes from editors, and provides a way for editors to receive changes since a given version. It handles the central coordination of collaborative editing by managing steps, client IDs, and document state.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/collab.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Authority {\n  constructor(doc) {\n    this.doc = doc\n    this.steps = []\n    this.stepClientIDs = []\n    this.onNewSteps = []\n  }\n\n  receiveSteps(version, steps, clientID) {\n    if (version != this.steps.length) return\n\n    // Apply and accumulate new steps\n    steps.forEach(step => {\n      this.doc = step.apply(this.doc).doc\n      this.steps.push(step)\n      this.stepClientIDs.push(clientID)\n    })\n    // Signal listeners\n    this.onNewSteps.forEach(function(f) { f() })\n  }\n\n  stepsSince(version) {\n    return {\n      steps: this.steps.slice(version),\n      clientIDs: this.stepClientIDs.slice(version)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Examining Editor State in ProseMirror (JavaScript)\nDESCRIPTION: Demonstrates how to create a basic editor state using ProseMirror and examine its document and selection properties. The code imports the basic schema and EditorState, creates a new state, and logs its initial document content and selection position.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/state.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {schema} from \"prosemirror-schema-basic\"\nimport {EditorState} from \"prosemirror-state\"\n\nlet state = EditorState.create({schema})\nconsole.log(state.doc.toString()) // An empty paragraph\nconsole.log(state.selection.from) // 1, the start of the paragraph\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with ProseMirror Schema\nDESCRIPTION: A JavaScript example demonstrating how to programmatically create a ProseMirror document by using the schema's node and text methods. It creates a document with two paragraphs separated by a horizontal rule.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/doc.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {schema} from \"prosemirror-schema-basic\"\n\n// (The null arguments are where you can specify attributes, if necessary.)\nlet doc = schema.node(\"doc\", null, [\n  schema.node(\"paragraph\", null, [schema.text(\"One.\")]),\n  schema.node(\"horizontal_rule\"),\n  schema.node(\"paragraph\", null, [schema.text(\"Two!\")])\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Editor Commands with ProseMirror\nDESCRIPTION: Shows how to add basic editing functionality by implementing common commands. This example adds the baseKeymap which provides expected behavior for keys like Enter and Delete, along with previously configured undo/redo functionality.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/intro.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// (Omitted repeated imports)\nimport {baseKeymap} from \"prosemirror-commands\"\n\nlet state = EditorState.create({\n  schema,\n  plugins: [\n    history(),\n    keymap({\"Mod-z\": undo, \"Mod-y\": redo}),\n    keymap(baseKeymap)\n  ]\n})\nlet view = new EditorView(document.body, {state})\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Items for ProseMirror in JavaScript\nDESCRIPTION: This code creates menu items for a basic ProseMirror menu with text formatting (strong, emphasis) and block type (paragraph, heading) options. Each menu item has a DOM element and a command to execute when clicked.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/menu/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Helper function to create menu items\nfunction item(command, content) {\n  let dom = document.createElement(\"button\")\n  dom.appendChild(typeof content === \"string\" ? document.createTextNode(content) : content)\n  return {command, dom}\n}\n\n// Create an icon element for font style buttons\nfunction fontIcon(text, name) {\n  let span = document.createElement(\"span\")\n  span.className = \"font-icon \" + name\n  span.textContent = text\n  return span\n}\n\n// A set of basic menu items\nlet menu = [\n  item(toggleMark(schema.marks.strong), fontIcon(\"B\", \"strong\")),\n  item(toggleMark(schema.marks.em), fontIcon(\"i\", \"em\")),\n  item(setBlockType(schema.nodes.paragraph), \"paragraph\"),\n  item(setBlockType(schema.nodes.heading, {level: 1}), \"heading\")\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ProseMirror-based Markdown View in JavaScript\nDESCRIPTION: This code defines a ProseMirrorView class that integrates a WYSIWYG editor using ProseMirror for editing markdown content. It handles converting between markdown text and ProseMirror documents, sets up plugins for the editor, and provides the same interface as the MarkdownView.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/markdown/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProseMirrorView {\n  constructor(target, content) {\n    // Create a new editor state with the markdown schema and plugins\n    this.state = EditorState.create({\n      doc: markdownParser.parse(content),\n      plugins: [keymap(baseKeymap)]\n    })\n    // Create an editor view in the target element\n    this.view = new EditorView(target, {\n      state: this.state,\n      dispatchTransaction: transaction => {\n        this.state = this.state.apply(transaction)\n        this.view.updateState(this.state)\n      }\n    })\n  }\n\n  get content() {\n    return markdownSerializer.serialize(this.state.doc)\n  }\n\n  focus() { this.view.focus() }\n  destroy() { this.view.destroy() }\n\n  update(content) {\n    let newDoc = markdownParser.parse(content)\n    if (!this.state.doc.eq(newDoc)) {\n      this.view.dispatch(this.state.tr.replaceWith(0, this.state.doc.content.size, newDoc.content))\n      return true\n    }\n    return false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Selection in ProseMirror Transactions (JavaScript)\nDESCRIPTION: Demonstrates how selections are automatically mapped through transaction steps and how to explicitly set a new selection. The example shows selection position changes when deleting content and manually setting a selection.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/state.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet tr = state.tr\nconsole.log(tr.selection.from) // → 10\ntr.delete(6, 8)\nconsole.log(tr.selection.from) // → 8 (moved back)\ntr.setSelection(TextSelection.create(tr.doc, 3))\nconsole.log(tr.selection.from) // → 3\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with Node Groups in JavaScript\nDESCRIPTION: Demonstrates how to use node groups in a ProseMirror schema. This example creates a 'block' group containing paragraph and blockquote nodes, allowing for more flexible content expressions.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/schema.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst groupSchema = new Schema({\n  nodes: {\n    doc: {content: \"block+\"},\n    paragraph: {group: \"block\", content: \"text*\"},\n    blockquote: {group: \"block\", content: \"block+\"},\n    text: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Star Schema with Inline Nodes and Marks in ProseMirror\nDESCRIPTION: This snippet creates a more advanced schema that includes inline 'star' nodes and various marks like 'shouting' and 'link'. It demonstrates how to define node groups, restrict mark usage, and configure DOM rendering and parsing for custom elements.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst starSchema = new Schema({\n  nodes: {\n    doc: {content: \"block+\"},\n    paragraph: {\n      group: \"block\",\n      content: \"inline*\",\n      toDOM: () => [\"p\", 0]\n    },\n    boring_paragraph: {\n      group: \"block\",\n      content: \"text*\",\n      marks: \"\",\n      toDOM: () => [\"p\", {class: \"boring\"}, 0]\n    },\n    text: {group: \"inline\"},\n    star: {\n      group: \"inline\",\n      inline: true,\n      toDOM: () => [\"star\", \"★\"],\n      parseDOM: [{tag: \"star\"}]\n    }\n  },\n  marks: {\n    shouting: {\n      toDOM: () => [\"shouting\", 0],\n      parseDOM: [{tag: \"shouting\"}]\n    },\n    link: {\n      attrs: {href: {}},\n      toDOM: spec => [\"a\", {href: spec.href}, 0],\n      parseDOM: [{tag: \"a\", getAttrs: dom => ({href: dom.href})}],\n      inclusive: false\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with Optional Dispatch in JavaScript\nDESCRIPTION: An improved version of the deleteSelection command that handles the optional dispatch argument. This pattern allows the command to be used both for execution and for querying whether the command is applicable in the current state.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  if (dispatch) dispatch(state.tr.deleteSelection())\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Transactions in ProseMirror (JavaScript)\nDESCRIPTION: Shows how to create a transaction from the current state, modify document content by inserting text, and apply the transaction to generate a new state. The example demonstrates how document size changes after text insertion.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/state.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet tr = state.tr\nconsole.log(tr.doc.content.size) // 25\ntr.insertText(\"hello\") // Replaces selection with 'hello'\nlet newState = state.apply(tr)\nconsole.log(tr.doc.content.size) // 30\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Linting Functions in ProseMirror\nDESCRIPTION: A function that analyzes a ProseMirror document and returns an array of detected problems. It iterates through all document nodes, checking for issues like empty blocks, trailing whitespace, and duplicate headings, and provides appropriate fix methods.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/lint/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction lint(doc) {\n  let result = []\n  let headers = Object.create(null)\n\n  function record(node, from, to, message, fix) {\n    result.push({node, from, to, message, fix})\n  }\n\n  doc.descendants((node, pos) => {\n    if (node.isText) {\n      // Warn about suspicious characters\n      let m, re = /\\w[\\^\\|\\$%\\*][\\w\\[\\]\\(\\),]/g\n      while (m = re.exec(node.text))\n        record(node, pos + m.index, pos + m.index + 1,\n               \"Suspicious character: \" + m[0][1])\n\n      // Warn about repeated words\n      let word = /\\w+/g, lastWord = null, lastWordPos = 0\n      while (m = word.exec(node.text)) {\n        if (m[0].toLowerCase() == lastWord)\n          record(node, pos + lastWordPos, pos + word.lastIndex,\n                 \"Duplicate word: \" + m[0],\n                 deleteRange(pos + lastWordPos, pos + word.lastIndex))\n        lastWord = m[0].toLowerCase()\n        lastWordPos = m.index\n      }\n    } else if (node.type.name == \"heading\") {\n      let plain = node.content.content[0]?.textContent.trim() || \"\"\n      if (plain in headers)\n        record(node, pos, pos + node.nodeSize,\n               \"Duplicate heading: \" + plain,\n               deleteRange(pos, pos + node.nodeSize))\n      headers[plain] = pos\n    } else if (node.type.name == \"image\" && !node.attrs.alt) {\n      record(node, pos, pos + node.nodeSize,\n             \"Image without alt text\",\n             addAlt(pos))\n    } else if (node.type.name == \"paragraph\" && node.content.size == 0) {\n      record(node, pos, pos + node.nodeSize,\n             \"Empty paragraph\",\n             deleteRange(pos, pos + node.nodeSize))\n    } else if (node.type.name == \"blockquote\" && node.childCount == 0) {\n      record(node, pos, pos + node.nodeSize,\n             \"Empty blockquote\",\n             deleteRange(pos, pos + node.nodeSize))\n    } else if (node.type.name == \"heading\" && node.attrs.level > 2 &&\n               node.textContent.length > 100) {\n      record(node, pos, pos + node.nodeSize,\n             \"Long heading\")\n    } else if (node.isTextblock && node.content.size > 0) {\n      let last = node.content.content[node.content.content.length - 1]\n      if (last.isText && /\\s$/.test(last.text)) {\n        record(node, pos + node.nodeSize - 2, pos + node.nodeSize - 1,\n               \"Trailing whitespace\",\n               deleteRange(pos + node.nodeSize - 2, pos + node.nodeSize - 1))\n      }\n    }\n  })\n\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ProseMirror Transactions with Custom Dispatch Function\nDESCRIPTION: Shows how to hook into ProseMirror's state transaction system by defining a custom dispatchTransaction function. This example logs document size changes and demonstrates the explicit state update pattern required in ProseMirror.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/intro.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// (Imports omitted)\n\nlet state = EditorState.create({schema})\nlet view = new EditorView(document.body, {\n  state,\n  dispatchTransaction(transaction) {\n    console.log(\"Document size went from\", transaction.before.content.size,\n                \"to\", transaction.doc.content.size)\n    let newState = view.state.apply(transaction)\n    view.updateState(newState)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema with Marks in JavaScript\nDESCRIPTION: Shows how to define marks in a ProseMirror schema. This example creates strong and emphasis marks that can be applied to text in paragraphs but not in headings.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/schema.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst markSchema = new Schema({\n  nodes: {\n    doc: {content: \"block+\"},\n    paragraph: {group: \"block\", content: \"text*\", marks: \"_\"},\n    heading: {group: \"block\", content: \"text*\", marks: \"\"},\n    text: {inline: true}\n  },\n  marks: {\n    strong: {},\n    em: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing toggleLink Command for Star Schema in ProseMirror\nDESCRIPTION: This snippet defines a custom command for toggling links in the star schema. It checks if a link is being added or removed, prompts for a URL if adding, and then applies or removes the link mark accordingly.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction toggleLink(state, dispatch) {\n  let {doc, selection} = state\n  if (selection.empty) return false\n  let attrs = null\n  if (!doc.rangeHasMark(selection.from, selection.to, state.schema.marks.link)) {\n    attrs = {href: prompt(\"Link to where?\", \"\")}\n    if (!attrs.href) return false\n  }\n  return toggleMark(state.schema.marks.link, attrs)(state, dispatch)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ProseMirror Plugin (JavaScript)\nDESCRIPTION: Demonstrates how to create a simple ProseMirror plugin that adds event handling to the editor. The example creates a plugin that logs when keys are pressed and initializes an editor state with this plugin.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/state.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet myPlugin = new Plugin({\n  props: {\n    handleKeyDown(view, event) {\n      console.log(\"A key was pressed!\")\n      return false // We did not handle this\n    }\n  }\n})\n\nlet state = EditorState.create({schema, plugins: [myPlugin]})\n```\n\n----------------------------------------\n\nTITLE: Initializing ProseMirror with Content from DOM\nDESCRIPTION: Demonstrates how to initialize a ProseMirror editor with existing content by parsing DOM nodes. This uses the DOMParser mechanism to convert HTML content from an element with ID 'content' into a ProseMirror document structure based on the schema.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/intro.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DOMParser} from \"prosemirror-model\"\nimport {EditorState} from \"prosemirror-state\"\nimport {schema} from \"prosemirror-schema-basic\"\n\nlet content = document.getElementById(\"content\")\nlet state = EditorState.create({\n  doc: DOMParser.fromSchema(schema).parse(content)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting CodeMirror Selection from ProseMirror\nDESCRIPTION: This method handles setting the CodeMirror selection when ProseMirror tries to put the selection inside the node. It ensures the CodeMirror selection matches the position passed in.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview_setSelection)\n```\n\n----------------------------------------\n\nTITLE: Defining TrackState for Change Tracking in ProseMirror\nDESCRIPTION: This code snippet defines the TrackState class, which is used to track the commit history in a ProseMirror editor. It maintains an array of commits, each containing steps, inverses, and metadata.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/track/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass TrackState {\n  constructor(commits) {\n    this.commits = commits\n  }\n\n  addCommit(message, time, steps, inverseSteps) {\n    this.commits.push({\n      message, time, steps,\n      inverseSteps,\n      hidden: false\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProseMirror State Management with Redux-like Flow\nDESCRIPTION: Example showing how to integrate ProseMirror's transaction system with a Redux-like state management architecture, including state updates and UI refresh logic.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet appState = {\n  editor: EditorState.create({schema}),\n  score: 0\n}\n\nlet view = new EditorView(document.body, {\n  state: appState.editor,\n  dispatchTransaction(transaction) {\n    update({type: \"EDITOR_TRANSACTION\", transaction})\n  }\n})\n\nfunction update(event) {\n  if (event.type == \"EDITOR_TRANSACTION\")\n    appState.editor = appState.editor.apply(event.transaction)\n  else if (event.type == \"SCORE_POINT\")\n    appState.score++\n  draw()\n}\n\nfunction draw() {\n  document.querySelector(\"#score\").textContent = appState.score\n  view.updateState(appState.editor)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor View Switching in JavaScript\nDESCRIPTION: This code sets up radio buttons that allow users to switch between the raw markdown textarea view and the WYSIWYG ProseMirror view. It handles synchronizing content between the views when switching and initializes the editor with default content.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/markdown/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet place = document.querySelector(\"#editor\")\nlet view = new MarkdownView(place, \"# Hello\\n\\nThis is a comment written in [Markdown](http://commonmark.org).\\n\\n* You can use formatting like **emphasis** and lists\\n* You can add [links](http://example.com)\\n* Even `inline code` and code blocks are supported\\n\\n        And that's about it\\n\")\n\nfunction update(type) {\n  if (view.constructor.name == type.name) return\n  let content = view.content\n  view.destroy()\n  view = new type(place, content)\n  view.focus()\n}\n\nfor (let input of document.querySelectorAll(\"input[type=radio]\")) {\n  input.addEventListener(\"click\", () => update(input.value == \"markdown\" ? MarkdownView : ProseMirrorView))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Plugin for ProseMirror in JavaScript\nDESCRIPTION: This code defines a plugin that creates and manages a MenuView for a ProseMirror editor. The plugin handles initializing the MenuView, updating it when the editor state changes, and destroying it when the editor is destroyed.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/menu/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction menuPlugin(items) {\n  return new Plugin({\n    view(editorView) {\n      let menuView = new MenuView(items, editorView)\n      editorView.dom.parentNode.insertBefore(menuView.dom, editorView.dom)\n      return menuView\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Text Schema in ProseMirror\nDESCRIPTION: This snippet defines a simple ProseMirror schema that allows only text content. It creates a document node that can contain one or more paragraph nodes, which in turn can contain text.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst textSchema = new Schema({\n  nodes: {\n    doc: {content: \"paragraph+\"},\n    paragraph: {content: \"text*\", toDOM: () => [\"p\", 0]},\n    text: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating CodeMirror Content from ProseMirror\nDESCRIPTION: This method handles updates coming from ProseMirror, such as undo actions. It compares the old and new content to generate a minimal replacement for the changed range in the inner editor.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview_update)\n```\n\n----------------------------------------\n\nTITLE: Implementing Commit Reversion in ProseMirror\nDESCRIPTION: This function reverts a specific commit by rebasing the inverted form of its steps over all intermediate steps. It handles the complexities of moving changes across each other, which can sometimes lead to unintuitive results in complicated scenarios.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/track/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction revertCommit(state, commit) {\n  let trackState = trackPlugin.getState(state)\n  let index = trackState.commits.indexOf(commit)\n  let nextCommits = trackState.commits.slice(index + 1)\n  let steps = commit.inverseSteps.slice()\n\n  for (let i = index + 1; i < trackState.commits.length; i++) {\n    let inv = trackState.commits[i].inverseSteps\n    for (let j = inv.length - 1; j >= 0; j--)\n      steps = Transform.mapStep(steps, inv[j])\n    for (let j = 0; j < steps.length; j++)\n      inv = Transform.mapStep(inv, steps[j])\n  }\n\n  let tr = state.tr\n  for (let i = 0; i < steps.length; i++) tr.step(steps[i])\n  return tr\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Node Attributes in JavaScript\nDESCRIPTION: Demonstrates how to define node attributes in a ProseMirror schema. This example adds a 'level' attribute to heading nodes with a default value of 1.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/schema.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  heading: {\n    content: \"text*\",\n    attrs: {level: {default: 1}}\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Inner Transactions in ProseMirror Footnote\nDESCRIPTION: Implements the dispatchInner method to handle transactions in the footnote sub-editor. This method applies the changes from the inner editor to the outer document, handling appended transactions and avoiding infinite loops.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndispatchInner(tr) {\n  let {state, transactions} = this.innerView.state.applyTransaction(tr)\n  this.innerView.updateState(state)\n\n  if (!tr.getMeta(\"fromOutside\")) {\n    let outerTr = this.outerView.state.tr, offsetMap = StepMap.offset(this.getPos() + 1)\n    for (let i = 0; i < transactions.length; i++) {\n      let steps = transactions[i].steps\n      for (let j = 0; j < steps.length; j++)\n        outerTr.step(steps[j].map(offsetMap))\n    }\n    if (outerTr.docChanged) this.outerView.dispatch(outerTr)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Node View Implementation in ProseMirror\nDESCRIPTION: Creates a custom node view for image nodes with click event handling. Demonstrates basic node view creation and event management.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet view = new EditorView({\n  state,\n  nodeViews: {\n    image(node) { return new ImageView(node) }\n  }\n})\n\nclass ImageView {\n  constructor(node) {\n    // The editor will use this as the node's DOM representation\n    this.dom = document.createElement(\"img\")\n    this.dom.src = node.attrs.src\n    this.dom.addEventListener(\"click\", e => {\n      console.log(\"You clicked me!\")\n      e.preventDefault()\n    })\n  }\n\n  stopEvent() { return true }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeMirror Node View in ProseMirror\nDESCRIPTION: This snippet sets up the basic structure of a CodeMirror node view for ProseMirror. It creates a CodeMirror editor with custom extensions and key bindings, and sets up an update listener for synchronization.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview_start)\n```\n\n----------------------------------------\n\nTITLE: Applying a ReplaceStep in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and apply a ReplaceStep to delete content between positions 3 and 5 in a document.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/transform.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(myDoc.toString()) // → p(\"hello\")\n// A step that deletes the content between positions 3 and 5\nlet step = new ReplaceStep(3, 5, Slice.empty)\nlet result = step.apply(myDoc)\nconsole.log(result.doc.toString()) // → p(\"heo\")\n```\n\n----------------------------------------\n\nTITLE: Synchronizing CodeMirror Updates to ProseMirror\nDESCRIPTION: This function forwards updates from CodeMirror to ProseMirror when the code editor is focused. It translates document and selection changes into ProseMirror transactions.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview_forwardUpdate)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Transform in JavaScript\nDESCRIPTION: This example shows how to create a Transform object, perform multiple operations (delete and split), and access the resulting document and step count.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/transform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet tr = new Transform(myDoc)\ntr.delete(5, 7) // Delete between position 5 and 7\ntr.split(5)     // Split the parent node at position 5\nconsole.log(tr.doc.toString()) // The modified document\nconsole.log(tr.steps.length)   // → 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Fold Toggle Functionality in ProseMirror\nDESCRIPTION: This function dispatches transactions to toggle the folded state of a section. It also ensures the selection is moved outside of a section when it's being folded to maintain usability.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/fold/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPART(setFolding)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tooltip Component for ProseMirror\nDESCRIPTION: This snippet defines a Tooltip class that creates and manages a tooltip DOM element. It handles the tooltip's creation, positioning, and updates based on the editor's state changes. The positioning is calculated using ProseMirror's coordsAtPos method.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/tooltip/index.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Tooltip {\n  constructor(view) {\n    this.tooltip = document.createElement(\"div\")\n    this.tooltip.className = \"tooltip\"\n    view.dom.parentNode.appendChild(this.tooltip)\n    this.update(view, null)\n  }\n\n  update(view, lastState) {\n    let state = view.state\n    // Don't do anything if the document/selection didn't change\n    if (lastState && lastState.doc.eq(state.doc) &&\n        lastState.selection.eq(state.selection)) return\n\n    // Hide the tooltip if the selection is empty\n    if (state.selection.empty) {\n      this.tooltip.style.display = \"none\"\n      return\n    }\n\n    // Otherwise, reposition it and update its content\n    this.tooltip.style.display = \"\"\n    let {from, to} = state.selection\n    // These are in screen coordinates\n    let start = view.coordsAtPos(from), end = view.coordsAtPos(to)\n    // The box in which the tooltip is positioned, to use as base\n    let box = this.tooltip.offsetParent.getBoundingClientRect()\n    // Find a center-ish x position from the selection endpoints (when\n    // crossing lines, end may be more to the left than start, so take\n    // the min of their left sides and the max of their right sides).\n    let left = Math.max((start.left + end.left) / 2, start.left, end.left)\n    left = (left - box.left - this.tooltip.offsetWidth / 2) + \"px\"\n    this.tooltip.style.left = left\n    this.tooltip.style.bottom = (box.bottom - start.top) + \"px\"\n    this.tooltip.textContent =\n      state.doc.textBetween(from, to, \" \")\n  }\n\n  destroy() { this.tooltip.remove() }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MenuView Component for ProseMirror in JavaScript\nDESCRIPTION: This code creates a MenuView class that renders menu items in a menu bar and handles click events to trigger the corresponding commands. It also manages updating which menu items are visible based on their applicability to the current editor state.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/menu/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MenuView {\n  constructor(items, editorView) {\n    this.items = items\n    this.editorView = editorView\n\n    this.dom = document.createElement(\"div\")\n    this.dom.className = \"menubar\"\n    items.forEach(({dom}) => this.dom.appendChild(dom))\n    this.update()\n\n    this.dom.addEventListener(\"mousedown\", e => {\n      e.preventDefault()\n      editorView.focus()\n      items.forEach(({command, dom}) => {\n        if (dom.contains(e.target))\n          command(editorView.state, editorView.dispatch, editorView)\n      })\n    })\n  }\n\n  update() {\n    this.items.forEach(({command, dom}) => {\n      let active = command(this.editorView.state, null, this.editorView)\n      dom.style.display = active ? \"\" : \"none\"\n    })\n  }\n\n  destroy() { this.dom.remove() }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Input Events for Image Upload in ProseMirror\nDESCRIPTION: Event handler for file input changes that initiates image uploads. It performs validation checks on selected files before starting the upload process.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/upload/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector(\"#image-upload\").addEventListener(\"change\", e => {\n  if (view.isDestroyed) return\n  let file = e.target.files[0]\n  if (!file) return\n  if (!file.type.startsWith(\"image/\")) return\n  if (file.size < 20 || file.size > 10000000) return\n\n  startImageUpload(file, view, view.state.selection.from)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Textarea-based Markdown View in JavaScript\nDESCRIPTION: This code defines a MarkdownView class that wraps a textarea element for editing markdown content. It provides methods to update the content, get the current content, and focus the editor.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/markdown/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MarkdownView {\n  constructor(target, content) {\n    this.textarea = target.appendChild(document.createElement(\"textarea\"))\n    this.textarea.value = content\n  }\n\n  get content() { return this.textarea.value }\n  focus() { this.textarea.focus() }\n  destroy() { this.textarea.remove() }\n\n  // :: (string) → bool\n  // Update the editor's content, and return a boolean that indicates\n  // whether anything changed.\n  update(content) {\n    if (this.textarea.value != content) {\n      this.textarea.value = content\n      return true\n    }\n    return false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Note Schema with Groups in ProseMirror\nDESCRIPTION: This snippet creates a more complex schema with notes that can be optionally grouped. It defines custom DOM elements for notes and note groups, and includes toDOM and parseDOM methods for proper rendering and parsing.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst noteSchema = new Schema({\n  nodes: {\n    doc: {content: \"(note | notegroup)+\"},\n    notegroup: {\n      content: \"note+\",\n      toDOM: () => [\"notegroup\", 0],\n      parseDOM: [{tag: \"notegroup\"}]\n    },\n    note: {\n      content: \"text*\",\n      toDOM: () => [\"note\", 0],\n      parseDOM: [{tag: \"note\"}]\n    },\n    text: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with View Access in JavaScript\nDESCRIPTION: A command that interacts with the editor's DOM. This example demonstrates how commands can use the optional third parameter (view) to perform actions that require access to the DOM, such as visual effects or positioning dialogs.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/commands.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction blinkView(_state, dispatch, view) {\n  if (dispatch) {\n    view.dom.style.background = \"yellow\"\n    setTimeout(() => view.dom.style.background = \"\", 1000)\n  }\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Footnote Node View in ProseMirror\nDESCRIPTION: Implements the update method for the footnote node view. This method handles updates from the outer editor, carefully finding and applying differences to maintain cursor position when possible.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nupdate(node) {\n  if (!node.sameMarkup(this.node)) return false\n  this.node = node\n  if (this.innerView) {\n    let state = this.innerView.state\n    let start = node.content.findDiffStart(state.doc.content)\n    if (start != null) {\n      let {a: endA, b: endB} = node.content.findDiffEnd(state.doc.content)\n      let overlap = start - Math.min(endA, endB)\n      if (overlap > 0) { endA += overlap; endB += overlap }\n      this.innerView.dispatch(\n        state.tr\n          .replace(start, endB, node.slice(start, endA))\n          .setMeta(\"fromOutside\", true))\n    }\n  }\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Folding Plugin for ProseMirror\nDESCRIPTION: This code defines a plugin that tracks and manages folding decorations. It maintains the fold state across editor updates, handles transactions with folding metadata, and installs the foldable node view.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/fold/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPART(plugin)\n```\n\n----------------------------------------\n\nTITLE: Creating Visual Decorations for ProseMirror Linter\nDESCRIPTION: This function generates decorations for highlighting detected problems in the document. It creates a gutter icon and applies a background decoration to the problematic text, with styles applied via CSS.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/lint/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction diagnosticToDecorations(diagnostic) {\n  let result = []\n  diagnostic.forEach(prob => {\n    let from = prob.from, to = prob.to\n    let widget = document.createElement(\"div\")\n    widget.className = \"lint-icon\"\n    widget.problem = prob\n    widget.title = prob.message\n    result.push(Decoration.widget({widget, side: 1}).range(from))\n    if (from != to)\n      result.push(Decoration.inline(from, to, {class: \"lint-annotation\"}))\n  })\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Positions with StepMap in JavaScript\nDESCRIPTION: This snippet illustrates how to create a StepMap from a ReplaceStep and use it to map positions from the old document to the new one.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/transform.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet step = new ReplaceStep(4, 6, Slice.empty) // Delete 4-5\nlet map = step.getMap()\nconsole.log(map.map(8)) // → 6\nconsole.log(map.map(2)) // → 2 (nothing changes before the change)\n```\n\n----------------------------------------\n\nTITLE: Creating ProseMirror Linter Plugin\nDESCRIPTION: A plugin implementation that integrates linting into ProseMirror. It tracks document changes, updates decorations, and handles icon click events to select issues or apply fixes when double-clicked.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/lint/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass LintPlugin {\n  constructor(view) {\n    this.view = view\n    this.problems = lint(view.state.doc)\n    this.decorations = DecorationSet.create(view.state.doc, diagnosticToDecorations(this.problems))\n\n    this.update(view, null)\n  }\n\n  update(view, oldState) {\n    if (oldState && oldState.doc.eq(view.state.doc)) return false\n    this.problems = lint(view.state.doc)\n    this.decorations = DecorationSet.create(view.state.doc, diagnosticToDecorations(this.problems))\n    return true\n  }\n}\n\nfunction handleClick(view, pos, event) {\n  if (!event.target.problem) return false\n  let prob = event.target.problem\n  if (event.type == \"dblclick\") {\n    if (prob.fix) prob.fix(view)\n    return true\n  }\n  view.dispatch(view.state.tr.setSelection(TextSelection.create(view.state.doc, prob.from, prob.to)))\n  return true\n}\n\nlet lintPlugin = new Plugin({\n  key: new PluginKey(\"lint\"),\n  state: {\n    init(_, {doc}) { return {doc, problems: lint(doc), decorations: []} },\n    apply(tr, prev, oldState, state) {\n      if (tr.docChanged) {\n        let problems = lint(tr.doc)\n        return {doc: tr.doc, problems, decorations: diagnosticToDecorations(problems)}\n      }\n      return prev\n    }\n  },\n  props: {\n    decorations(state) {\n      return this.getState(state).decorations\n    },\n    handleClick\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Cursor Movement from ProseMirror to CodeMirror\nDESCRIPTION: This function creates arrow key handlers for the outer editor to manage cursor movement from ProseMirror into the CodeMirror editor when the cursor is at the end of a textblock adjacent to a code block.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPART(arrowHandlers)\n```\n\n----------------------------------------\n\nTITLE: Setting Up ProseMirror Editor with Footnotes\nDESCRIPTION: Creates a ProseMirror editor instance with the custom footnote schema and node view. This setup enables footnote functionality in the editor.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.view = new EditorView(document.querySelector(\"#editor\"), {\n  state: EditorState.create({schema, plugins: [exampleSetup({schema})]}),\n  nodeViews: {\n    footnote(node, view, getPos) { return new FootnoteView(node, view, getPos) }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Image Upload in ProseMirror\nDESCRIPTION: Function that handles the complete image upload process, from creating a placeholder to replacing it with the actual image when upload completes. It manages document transactions to maintain placeholder positions.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/upload/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction startImageUpload(file, view, pos) {\n  // A fresh object to act as the ID for this upload\n  let id = {}\n\n  // Replace the selection with a placeholder\n  let tr = view.state.tr\n  if (!tr.selection.empty) tr.deleteSelection()\n  tr.setMeta(placeholderPlugin, {add: {id, pos}})\n  view.dispatch(tr)\n\n  uploadFile(file).then(url => {\n    let pos = findPlaceholder(view.state, id)\n    // If the content around the placeholder has been deleted, drop\n    // the image\n    if (pos == null) return\n    // Otherwise, insert it at the placeholder's position, and remove\n    // the placeholder\n    view.dispatch(view.state.tr\n                 .replaceWith(pos, pos, schema.nodes.image.create({src: url}))\n                 .setMeta(placeholderPlugin, {remove: {id}}))\n  }, () => {\n    // On failure, just clean up the placeholder\n    view.dispatch(view.state.tr.setMeta(placeholderPlugin, {remove: {id}}))\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Command: Delete Selection in JavaScript\nDESCRIPTION: A simple ProseMirror command that deletes the current selection. The command checks if a selection exists, and if so, dispatches a transaction to delete it. It demonstrates the basic command pattern of checking applicability and performing an action.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  dispatch(state.tr.deleteSelection())\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Placeholder Decoration Plugin in ProseMirror\nDESCRIPTION: A plugin that manages widget decorations representing image upload placeholders. It maintains a decoration set and provides methods to add and remove decorations by ID.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/upload/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction placeholderPlugin() {\n  return new Plugin({\n    state: {\n      init() { return DecorationSet.empty },\n      apply(tr, set) {\n        // Adjust decoration positions to changes made by the transaction\n        set = set.map(tr.mapping, tr.doc)\n        // See if the transaction adds or removes any placeholders\n        let action = tr.getMeta(this)\n        if (action && action.add) {\n          let widget = document.createElement(\"placeholder\")\n          let deco = Decoration.widget(action.add.pos, widget, {id: action.add.id})\n          set = set.add(tr.doc, [deco])\n        } else if (action && action.remove) {\n          set = set.remove(set.find(null, null,\n                                      spec => spec.id == action.remove.id))\n        }\n        return set\n      }\n    },\n    props: {\n      decorations(state) { return this.getState(state) }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Image Node View with Alt Text Editing in ProseMirror\nDESCRIPTION: Extends the image node view to allow alt text editing through click interactions. Shows how to update node attributes using transactions.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet view = new EditorView({\n  state,\n  nodeViews: {\n    image(node, view, getPos) { return new ImageView(node, view, getPos) }\n  }\n})\n\nclass ImageView {\n  constructor(node, view, getPos) {\n    this.dom = document.createElement(\"img\")\n    this.dom.src = node.attrs.src\n    this.dom.alt = node.attrs.alt\n    this.dom.addEventListener(\"click\", e => {\n      e.preventDefault()\n      let alt = prompt(\"New alt text:\", \"\")\n      if (alt) view.dispatch(view.state.tr.setNodeMarkup(getPos(), null, {\n        src: node.attrs.src,\n        alt\n      }))\n    })\n  }\n\n  stopEvent() { return true }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ProseMirror Editor View Props\nDESCRIPTION: Demonstration of setting up ProseMirror editor view props, including read-only behavior and event handling configuration.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet view = new EditorView({\n  state: myState,\n  editable() { return false }, // Enables read-only behavior\n  handleDoubleClick() { console.log(\"Double click!\") }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a ProseMirror Plugin with State Management (JavaScript)\nDESCRIPTION: Shows how to create a plugin that maintains its own state within the editor state. This example implements a transaction counter plugin that increments its value each time a transaction is applied.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/state.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet transactionCounter = new Plugin({\n  state: {\n    init() { return 0 },\n    apply(tr, value) { return value + 1 }\n  }\n})\n\nfunction getTransactionCount(state) {\n  return transactionCounter.getState(state)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ProseMirror Plugin for Tooltip Management\nDESCRIPTION: This snippet defines a ProseMirror plugin that manages the lifecycle of a tooltip. It creates a plugin view that handles the creation, updating, and destruction of the tooltip based on the editor's state.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/tooltip/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Plugin({\n  view(editorView) { return new Tooltip(editorView) }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Schema with Section Nodes in ProseMirror\nDESCRIPTION: This code defines a modified schema that structures content as sections, each containing a heading followed by arbitrary blocks. It extends the basic schema to support the folding functionality.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/fold/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPART(schema)\n```\n\n----------------------------------------\n\nTITLE: Finalizing CodeMirror Node View Setup\nDESCRIPTION: This snippet completes the setup of the CodeMirror node view, including methods for destroying the view and ignoring mutations.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview_end)\n```\n\n----------------------------------------\n\nTITLE: Defining Footnote Schema in ProseMirror\nDESCRIPTION: Defines the schema for footnote nodes in ProseMirror. Footnotes are implemented as inline nodes with content, marked as atoms for special handling.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nschema: {\n  nodes: {\n    doc: {content: \"block+\"},\n    paragraph: {group: \"block\", content: \"inline*\"},\n    text: {group: \"inline\"},\n    footnote: {\n      inline: true,\n      group: \"inline\",\n      content: \"inline*\",\n      atom: true,\n      toDOM: () => [\"footnote\", 0],\n      parseDOM: [{tag: \"footnote\"}]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Footnote Node View in ProseMirror\nDESCRIPTION: Implements the destroy method and event handling for the footnote node view. This includes cleanup on destruction and defining which events should be handled by the outer editor.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndestroy() {\n  if (this.innerView) this.closeInner()\n}\n\nstopEvent(event) {\n  return this.innerView && this.innerView.dom.contains(event.target)\n}\n\nignoredClick(event) {\n  return this.innerView && this.innerView.dom.contains(event.target)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Footnote Node View in ProseMirror\nDESCRIPTION: Sets up the basic structure for a custom node view to handle footnotes. This includes creating DOM elements and initializing variables for the node view.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass FootnoteView {\n  constructor(node, view, getPos) {\n    this.node = node\n    this.outerView = view\n    this.getPos = getPos\n\n    this.dom = document.createElement(\"footnote\")\n    this.open = false\n    this.innerView = null\n  }\n\n  selectNode() {\n    this.dom.classList.add(\"ProseMirror-selectednode\")\n    if (!this.open) this.open = this.openInner()\n  }\n\n  deselectNode() {\n    this.dom.classList.remove(\"ProseMirror-selectednode\")\n    if (this.open) {\n      this.closeInner()\n      this.open = false\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a ProseMirror Plugin for Change Tracking\nDESCRIPTION: This snippet defines a ProseMirror plugin that observes transactions and updates the TrackState. It processes commit transactions by extracting the commit message from the transaction's meta property.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/track/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst trackPlugin = new Plugin({\n  state: {\n    init() { return new TrackState([]) },\n    apply(tr, trackState) {\n      let newState = trackState\n      let commitMessage = tr.getMeta(trackPlugin)\n      if (commitMessage) {\n        let startState = tr.startState\n        let steps = tr.steps.slice()\n        newState = new TrackState(trackState.commits.slice())\n        newState.addCommit(commitMessage, Date.now(), steps,\n                          invertedSteps(steps, startState.doc, tr.doc))\n      }\n      return newState\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Document Slices in JavaScript with ProseMirror\nDESCRIPTION: This JavaScript code demonstrates how to create slices from a ProseMirror document using the slice method. It shows how to extract different parts of the document and check their open depths.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/doc.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// doc holds two paragraphs, containing text \"a\" and \"b\"\nlet slice1 = doc.slice(0, 3) // The first paragraph\nconsole.log(slice1.openStart, slice1.openEnd) // → 0 0\nlet slice2 = doc.slice(1, 5) // From start of first paragraph\n                             // to end of second\nconsole.log(slice2.openStart, slice2.openEnd) // → 1 1\n```\n\n----------------------------------------\n\nTITLE: Custom Paragraph Node View with Empty State Styling in ProseMirror\nDESCRIPTION: Implements a paragraph node view that adds special styling for empty paragraphs. Demonstrates content DOM handling and node updates.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet view = new EditorView({\n  state,\n  nodeViews: {\n    paragraph(node) { return new ParagraphView(node) }\n  }\n})\n\nclass ParagraphView {\n  constructor(node) {\n    this.dom = this.contentDOM = document.createElement(\"p\")\n    if (node.content.size == 0) this.dom.classList.add(\"empty\")\n  }\n\n  update(node) {\n    if (node.content.size > 0) this.dom.classList.remove(\"empty\")\n    else this.dom.classList.add(\"empty\")\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Document Structure in ProseMirror\nDESCRIPTION: This HTML snippet illustrates the structure of a simple document in ProseMirror, showing how paragraphs, blockquotes, and images are represented.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/doc.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>One</p>\n<blockquote><p>Two<img src=\"...\"></p></blockquote>\n```\n\n----------------------------------------\n\nTITLE: Setting up ProseMirror Editor with Custom Dinosaur Functionality\nDESCRIPTION: This snippet creates the ProseMirror editor state and view with the custom dinosaur schema and menu items. It uses the example setup and extends it with the custom functionality.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/dino/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {exampleSetup, buildMenuItems} from \"prosemirror-example-setup\"\nimport {EditorState} from \"prosemirror-state\"\nimport {EditorView} from \"prosemirror-view\"\n\nlet menu = buildMenuItems(dinoSchema)\nmenu.insertMenu.content.push(dinoItem)\nmenu.insertMenu.content.push(dinoItems)\n\nwindow.view = new EditorView(document.querySelector(\"#editor\"), {\n  state: EditorState.create({\n    doc: doc,\n    plugins: exampleSetup({schema: dinoSchema, menuContent: menu.fullMenu})\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dinosaur Node Spec in JavaScript\nDESCRIPTION: This snippet defines a custom node spec for dinosaurs in ProseMirror. It specifies the node's attributes, inline status, group, and how it should be rendered in the DOM.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/dino/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dinoNodeSpec = {\n  attrs: {type: {default: \"brontosaurus\"}},\n  inline: true,\n  group: \"inline\",\n  draggable: true,\n\n  toDOM: node => [\"img\", {\n    \"dino-type\": node.attrs.type,\n    src: \"/img/dino/\" + node.attrs.type + \".png\",\n    title: node.attrs.type,\n    class: \"dinosaur\"\n  }],\n  parseDOM: [{\n    tag: \"img[dino-type]\",\n    getAttrs: dom => {\n      let type = dom.getAttribute(\"dino-type\")\n      return type ? {type} : false\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing makeNoteGroup Command in ProseMirror\nDESCRIPTION: This snippet defines a custom editing command that creates a note group around selected notes. It checks if the selection is valid for grouping and then wraps the selected notes in a new notegroup node.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction makeNoteGroup(state, dispatch) {\n  let range = state.selection\n  let from = range.$from.start(1), to = range.$to.end(1)\n  let applicable = false\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock) return false\n    if (!applicable && node.type.name == \"note\") applicable = true\n  })\n  if (!applicable) return false\n  if (dispatch)\n    dispatch(state.tr.wrap(range, [{type: state.schema.nodes.notegroup}]))\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ProseMirror State Module - CommonJS\nDESCRIPTION: Demonstrates how to import and initialize the EditorState module using CommonJS require syntax. Creates a new editor state instance with a schema configuration.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/ref_intro.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar EditorState = require(\"prosemirror-state\").EditorState\nvar state = EditorState.create({schema: mySchema})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Schema with Dinosaur Node in JavaScript\nDESCRIPTION: This snippet extends the basic schema with the custom dinosaur node. It then uses this schema to parse HTML content into a ProseMirror document.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/dino/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Schema} from \"prosemirror-model\"\nimport {schema} from \"prosemirror-schema-basic\"\n\nconst dinoSchema = new Schema({\n  nodes: schema.spec.nodes.addBefore(\"image\", \"dino\", dinoNodeSpec),\n  marks: schema.spec.marks\n})\n\nlet content = document.querySelector(\"#content\")\nlet doc = DOMParser.fromSchema(dinoSchema).parse(content)\n```\n\n----------------------------------------\n\nTITLE: Importing ProseMirror State Module - ES6\nDESCRIPTION: Shows how to import and initialize the EditorState module using ES6 import syntax. Creates a new editor state instance with a schema configuration.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/ref_intro.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {EditorState} from \"prosemirror-state\"\nlet state = EditorState.create({schema: mySchema})\n```\n\n----------------------------------------\n\nTITLE: Implementing Foldable Node View in ProseMirror\nDESCRIPTION: This code creates a node view that displays sections with a foldable interface. It shows a header with a button that toggles folding, and responds to decorations with the 'foldSection' property to hide or show content.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/fold/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview)\n```\n\n----------------------------------------\n\nTITLE: Handling Key Events in CodeMirror Node View\nDESCRIPTION: This keymap handles cursor movement across the edges of the inner editor, as well as undo, redo, and ctrl-enter actions. It allows the user to move the selection out of the code editor when appropriate.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/codemirror/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPART(nodeview_keymap)\n```\n\n----------------------------------------\n\nTITLE: Defining Node DOM Representation in ProseMirror Schema\nDESCRIPTION: Example schema definition with toDOM field for a paragraph node. The toDOM function returns an array describing how to render the node as a p element with a hole (0) for its content.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/schema.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  nodes: {\n    doc: {content: \"paragraph+\"},\n    paragraph: {\n      content: \"text*\",\n      toDOM(node) { return [\"p\", 0] }\n    },\n    text: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Styling ProseMirror Box Components with CSS\nDESCRIPTION: CSS styles defining the appearance of box components used in the ProseMirror editor interface, including color, display, border-radius, padding and margin properties.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.box {\n  color: white;\n  display: inline-block;\n  border-radius: 5px;\n  padding: 6px 10px;\n  margin: 3px 0;\n  vertical-align: top;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dinosaur Insertion Command in JavaScript\nDESCRIPTION: This snippet defines a command for inserting dinosaurs into the document. It creates a new node of type 'dino' with the specified dinosaur type and inserts it at the current selection.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/dino/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction insertDino(type) {\n  return function(state, dispatch) {\n    let {$from} = state.selection, index = $from.index()\n    if (!$from.parent.canReplaceWith(index, index, dinoSchema.nodes.dino))\n      return false\n    if (dispatch)\n      dispatch(state.tr.replaceSelectionWith(dinoSchema.nodes.dino.create({type})))\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Example of DOM Tree Structure\nDESCRIPTION: An HTML example showing how a paragraph with markup is represented as a tree in the DOM, with nested elements for strong and emphasized text.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/doc.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>This is <strong>strong text with <em>emphasis</em></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Star Schema Keymap in ProseMirror\nDESCRIPTION: This snippet defines a custom keymap for the star schema. It includes commands for toggling the 'shouting' mark, inserting a star node, and toggling links with a URL prompt.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst starKeymap = keymap({\n  \"Mod-b\": toggleMark(schema.marks.shouting),\n  \"Mod-l\": toggleLink,\n  \"Mod-Space\": insertStar\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Purple Text Decoration Plugin in ProseMirror\nDESCRIPTION: Creates a ProseMirror plugin that applies purple color styling to all text in the document using inline decorations. Demonstrates basic decoration creation and application.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet purplePlugin = new Plugin({\n  props: {\n    decorations(state) {\n      return DecorationSet.create(state.doc, [\n        Decoration.inline(0, state.doc.content.size, {style: \"color: purple\"})\n      ])\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fix Utilities for ProseMirror Linter\nDESCRIPTION: Helper functions that create fix commands for document linting issues. These include functions to delete ranges of text, set attributes, and insert nodes, which are used by the linter to automatically correct detected problems.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/lint/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteRange(from, to) {\n  return view => {\n    let tr = view.state.tr.delete(from, to)\n    view.dispatch(tr)\n  }\n}\n\nfunction addAlt(pos) {\n  return view => {\n    let alt = prompt(\"Alt text\", \"\")\n    if (alt)\n      view.dispatch(view.state.tr.setNodeMarkup(pos, null, {alt, src: view.state.doc.nodeAt(pos).attrs.src}))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Speckled Background Decoration Plugin in ProseMirror\nDESCRIPTION: Implements a plugin that adds yellow background decorations at regular intervals throughout the document. Shows how to maintain decoration state and map it through document changes.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet specklePlugin = new Plugin({\n  state: {\n    init(_, {doc}) {\n      let speckles = []\n      for (let pos = 1; pos < doc.content.size; pos += 4)\n        speckles.push(Decoration.inline(pos - 1, pos, {style: \"background: yellow\"}))\n      return DecorationSet.create(doc, speckles)\n    },\n    apply(tr, set) { return set.map(tr.mapping, tr.doc) }\n  },\n  props: {\n    decorations(state) { return specklePlugin.getState(state) }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dinosaur Menu Items in JavaScript\nDESCRIPTION: This snippet creates menu items for inserting different types of dinosaurs. It uses the insertDino command and defines icons and labels for each dinosaur type.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/dino/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {MenuItem} from \"prosemirror-menu\"\n\nconst dinoItem = new MenuItem({\n  title: \"Insert dinosaur\",\n  label: \"Dino\",\n  enable(state) { return insertDino(\"brontosaurus\")(state) },\n  run: insertDino(\"brontosaurus\")\n})\n\nconst dinoItems = new MenuItemGroup([\n  new MenuItem({title: \"Brontosaurus\", label: \"🦕\", select: \"dino\", attrs: {type: \"brontosaurus\"}}),\n  new MenuItem({title: \"Stegosaurus\", label: \"🦖\", select: \"dino\", attrs: {type: \"stegosaurus\"}}),\n  new MenuItem({title: \"Tyrannosaurus\", label: \"🦖\", select: \"dino\", attrs: {type: \"tyrannosaurus\"}}),\n  new MenuItem({title: \"Pterodactyl\", label: \"🦅\", select: \"dino\", attrs: {type: \"pterodactyl\"}})\n])\n```\n\n----------------------------------------\n\nTITLE: Using Transform Mapping in JavaScript\nDESCRIPTION: This example demonstrates how to use the mapping accumulated by a Transform object to map positions through multiple steps, including the use of bias.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/transform.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet tr = new Transform(myDoc)\ntr.split(10)    // split a node, +2 tokens at 10\ntr.delete(2, 5) // -3 tokens at 2\nconsole.log(tr.mapping.map(15)) // → 14\nconsole.log(tr.mapping.map(6))  // → 3\nconsole.log(tr.mapping.map(10)) // → 9\n\nconsole.log(tr.mapping.map(10, -1)) // → 7\n```\n\n----------------------------------------\n\nTITLE: Opening Footnote Sub-Editor in ProseMirror\nDESCRIPTION: Implements the openInner method to create a sub-editor for the footnote content. This includes setting up DOM elements, creating a new EditorView, and handling key bindings.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/footnote/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nopenInner() {\n  let tooltip = this.dom.appendChild(document.createElement(\"div\"))\n  tooltip.className = \"footnote-tooltip\"\n  this.innerView = new EditorView(tooltip, {\n    state: EditorState.create({\n      doc: this.node.content,\n      plugins: [keymap({\n        \"Mod-z\": () => undo(this.outerView.state, this.outerView.dispatch),\n        \"Mod-y\": () => redo(this.outerView.state, this.outerView.dispatch)\n      })]\n    }),\n    dispatchTransaction: this.dispatchInner.bind(this),\n    handleDOMEvents: {\n      mousedown: () => {\n        if (this.outerView.hasFocus()) this.innerView.focus()\n      }\n    }\n  })\n  tooltip.addEventListener(\"mousedown\", e => e.preventDefault())\n  return () => tooltip.remove()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ProseMirror Plugin with Size Limit\nDESCRIPTION: Example of creating a ProseMirror plugin that implements a maximum size limit through the props system.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/view.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction maxSizePlugin(max) {\n  return new Plugin({\n    props: {\n      editable(state) { return state.doc.content.size < max }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Metadata in ProseMirror Plugins (JavaScript)\nDESCRIPTION: Demonstrates how to use transaction metadata to mark transactions for special handling by plugins. The example shows a transaction counter that ignores transactions marked with specific metadata.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/state.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet transactionCounter = new Plugin({\n  state: {\n    init() { return 0 },\n    apply(tr, value) {\n      if (tr.getMeta(transactionCounter)) return value\n      else return value + 1\n    }\n  }\n})\n\nfunction markAsUncounted(tr) {\n  tr.setMeta(transactionCounter, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing insertStar Command for Star Schema in ProseMirror\nDESCRIPTION: This snippet defines a custom command for inserting a star node in the star schema. It checks if a star can be inserted at the current position and replaces the selection with a new star node if possible.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/schema/index.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction insertStar(state, dispatch) {\n  let type = state.schema.nodes.star\n  let {$from} = state.selection\n  if (!$from.parent.canReplaceWith($from.index(), $from.index(), type)) return false\n  dispatch(state.tr.replaceSelectionWith(type.create()))\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Placeholder Position in ProseMirror Document\nDESCRIPTION: A utility function that finds the current position of a placeholder decoration by its ID. Returns null if the placeholder no longer exists in the document.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/upload/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction findPlaceholder(state, id) {\n  let decos = placeholderPlugin.getState(state)\n  let found = decos.find(null, null, spec => spec.id == id)\n  return found.length ? found[0].from : null\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding ProseMirror Collaborative Editor in HTML\nDESCRIPTION: This HTML snippet embeds the ProseMirror collaborative editor example into the page. It uses a custom HTML tag '@HTML' to indicate where the editor should be inserted.\nSOURCE: https://github.com/prosemirror/website/blob/master/pages/examples/collab/index.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n@HTML\n```\n\n----------------------------------------\n\nTITLE: Defining Mark Parsing Rules in ProseMirror Schema\nDESCRIPTION: Example of parseDOM rules for an emphasis mark. These rules define how to recognize emphasis in pasted content by matching em tags, i tags, and inline font-style CSS.\nSOURCE: https://github.com/prosemirror/website/blob/master/markdown/guide/schema.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  parseDOM: [\n    {tag: \"em\"},                 // Match <em> nodes\n    {tag: \"i\"},                  // and <i> nodes\n    {style: \"font-style=italic\"} // and inline 'font-style: italic'\n  ]\n```\n\n----------------------------------------\n\nTITLE: Running ProseMirror Development Server in Bash\nDESCRIPTION: Command to start a development server for the ProseMirror website on port 8888, which serves files from public/ directory and includes the collaborative editing backend.\nSOURCE: https://github.com/prosemirror/website/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run devserver -- --port 8888\n```\n\n----------------------------------------\n\nTITLE: Building ProseMirror Website Documentation in Bash\nDESCRIPTION: Command to build the ProseMirror documentation and demo JavaScript bundles using make, which populates the public/ directory with the website files.\nSOURCE: https://github.com/prosemirror/website/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for ProseMirror Website in Bash\nDESCRIPTION: Command to install all Node.js dependencies for the ProseMirror website project using npm.\nSOURCE: https://github.com/prosemirror/website/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```"
  }
]