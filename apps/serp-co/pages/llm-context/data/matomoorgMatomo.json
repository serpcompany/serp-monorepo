[
  {
    "owner": "matomo-org",
    "repo": "matomo",
    "content": "TITLE: JavaScript Tracker Consent Functions\nDESCRIPTION: Describes the new JavaScript tracker functions for managing user consent: `requireConsent`, `rememberConsentGiven`, `setConsentGiven`, `forgetConsentGiven`. These functions are part of the consent feature documented at [https://developer.matomo.org/guides/tracking-javascript-guide#asking-for-consent](https://developer.matomo.org/guides/tracking-javascript-guide#asking-for-consent).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Using JavaScript AjaxHelper::withTokenInUrl for CSRF protection\nDESCRIPTION: Describes how to use the JavaScript AjaxHelper's `withTokenInUrl()` method to send a token along with XHR requests, and how to check for the token's existence in the controller using `$this->checkTokenInUrl()` to prevent CSRF attacks.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_129\n\nLANGUAGE: Text\nCODE:\n```\n* The JavaScript AjaxHelper has a new method `ajaxHelper.withTokenInUrl()` to easily send a token along a XHR. Within the Controller the existence of this token can be checked via `$this->checkTokenInUrl();` to prevent CSRF attacks.\n```\n\n----------------------------------------\n\nTITLE: API: Segment Composition Using Union of Segments\nDESCRIPTION: Demonstrates how to compose segments by creating a union of multiple segments using the `$segment->setUnionOfSegments()` method. This allows creating a single segment based on the combination of several others.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_138\n\nLANGUAGE: PHP\nCODE:\n```\n$segment->setUnionOfSegments(array('outlinkUrl', 'downloadUrl'))\n```\n\n----------------------------------------\n\nTITLE: Robots.txt User-Agent and Disallow/Allow Rules\nDESCRIPTION: This robots.txt configuration specifies user-agents to target and define corresponding disallow/allow rules.  It disallows crawling the entire site for most bots while allowing access to specific Matomo files like matomo.php, piwik.php, matomo.js, piwik.js, and the /js/ directory. This configuration helps manage crawler traffic while ensuring essential Matomo resources are accessible.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: Googlebot\nUser-agent: AdsBot-Google\nUser-agent: AdsBot-Google-Mobile\nUser-agent: AdsBot-Google-Mobile-Apps\nUser-agent: Google Favicon\nUser-agent: Googlebot-News\nUser-agent: Googlebot-Image\nUser-agent: Googlebot-Video\nUser-agent: Mediapartners-Google\nUser-agent: APIs-Google\nUser-agent: DuplexWeb-Google\nUser-agent: Bingbot\nUser-agent: Slurp\nUser-agent: DuckDuckBot\nUser-agent: Baiduspider\nUser-agent: AhrefsBot\nUser-agent: rogerbot\nUser-agent: YandexBot\nUser-agent: DotBot\nUser-agent: Twitterbot\nUser-agent: BingPreview\nUser-agent: LinkedInBot\nUser-agent: Yandexbot\nUser-agent: facebot\nUser-agent: facebookexternalhit\nUser-agent: MSNBot\nUser-agent: MSNBot-Media\nDisallow: /\nAllow: /matomo.php\nAllow: /piwik.php\nAllow: /matomo.js\nAllow: /piwik.js\nAllow: /js/\n```\n\n----------------------------------------\n\nTITLE: Requiring Cookie Consent using JavaScript Tracker\nDESCRIPTION: This snippet shows how to require cookie consent before using cookies in the Matomo JavaScript tracker. Calling this method ensures that cookies are only used if the user has given their explicit consent. This is essential for compliance with privacy regulations like GDPR.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['requireCookieConsent']);\n```\n\n----------------------------------------\n\nTITLE: Binding Keyboard Shortcuts with Mousetrap\nDESCRIPTION: This snippet illustrates how to bind keyboard shortcuts using Mousetrap.  It demonstrates binding single keys, key combinations (using '+' to combine keys), key sequences (using spaces to separate keys), and specifying the event type (`keyup`).  Callbacks are executed when the bound keys are pressed. The `return false` prevents default browser behavior.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    // single keys\n    Mousetrap.bind('4', function() { console.log('4'); });\n    Mousetrap.bind(\"?\", function() { console.log('show shortcuts!'); });\n    Mousetrap.bind('esc', function() { console.log('escape'); }, 'keyup');\n\n    // combinations\n    Mousetrap.bind('command+shift+k', function() { console.log('command shift k'); });\n\n    // map multiple combinations to the same callback\n    Mousetrap.bind(['command+k', 'ctrl+k'], function() {\n        console.log('command k or control k');\n\n        // return false to prevent default browser behavior\n        // and stop event from bubbling\n        return false;\n    });\n\n    // gmail style sequences\n    Mousetrap.bind('g i', function() { console.log('go to inbox'); });\n    Mousetrap.bind('* a', function() { console.log('select all'); });\n\n    // konami code!\n    Mousetrap.bind('up up down down left right left right b a enter', function() {\n        console.log('konami code');\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Heartbeat Timer in JavaScript Tracker\nDESCRIPTION: Introduces a new method, `disableHeartBeatTimer()`, in the Piwik JavaScript Tracker to disable the heartbeat timer if it has been previously enabled. This offers more control over the timing of tracking events.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_130\n\nLANGUAGE: Text\nCODE:\n```\n* New Piwik JavaScript Tracker method `disableHeartBeatTimer()` to disable the heartbeat timer if it was previously enabled.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker: Enable Link Tracking (Multiple Calls)\nDESCRIPTION: The method `enableLinkTracking` can now be called several times to make Piwik aware of newly added links when your DOM changes.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nenableLinkTracking\n```\n\n----------------------------------------\n\nTITLE: Customizing Scheduled Task Behavior\nDESCRIPTION: Details the events `ScheduledTasks.shouldExecuteTask`, `ScheduledTasks.execute`, `ScheduledTasks.execute.end` that have been added to customize the behaviour of scheduled tasks. These enable more flexible task management.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Creating New Widgets with Piwik\\Widget Classes in PHP\nDESCRIPTION: Introduces new classes for creating widgets in Piwik.  The `Piwik\\Widget\\Widget`, `Piwik\\Widget\\WidgetConfig` and `Piwik\\Widget\\WidgetContainerConfig` classes enable developers to create and configure custom widgets for the Matomo platform.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_118\n\nLANGUAGE: Text\nCODE:\n```\n* The new classes `Piwik\\Widget\\Widget`, `Piwik\\Widget\\WidgetConfig` and `Piwik\\Widget\\WidgetContainerConfig` lets you create a new widget.\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Dimension Value in PHP Tracker\nDESCRIPTION: This code snippet demonstrates how to set a custom dimension value in the PHP tracker.  The `$tracker` object must be initialized and `$customDimensionId` and `$value` need to be defined.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CustomDimensions/docs/faq.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tracker->setCustomDimension($customDimensionId, $value);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Social Network Detections\nDESCRIPTION: Describes the `Tracker.detectReferrerSocialNetwork` event, enabling developers to define custom social network detections for referrer analysis in Matomo. This enhances the accuracy of social referral tracking.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Named Arguments with sprintf\nDESCRIPTION: This example shows how to use named arguments with the sprintf function. Instead of using positional arguments, you can pass an object with keys that match the names in the format string surrounded by parentheses.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = {\n    name: 'Dolly',\n}\nsprintf('Hello %(name)s', user)\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics via Event\nDESCRIPTION: Explains the `Metric.addMetrics` event, triggered to add new metrics that cannot be picked up automatically by the platform. This allows for extending metrics.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: Enabling Heartbeat Timer in JavaScript (Matomo)\nDESCRIPTION: This snippet shows how to enable the 'heart beat' feature in the Matomo JavaScript tracker to improve visit length accuracy. It demonstrates enabling the timer with default and custom ping delays using both the direct tracker method call and the `_paq.push` method. It allows for tracking visit duration more accurately.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_142\n\nLANGUAGE: JavaScript\nCODE:\n```\ntracker.enableHeartBeatTimer();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['enableHeartBeatTimer']);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntracker.enableHeartBeatTimer(10);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['enableHeartBeatTimer', 10]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dimensions via Dimension.addDimension Event in PHP\nDESCRIPTION: Introduces a new event, `Dimension.addDimension`, to allow developers to add custom dimensions to Matomo. This event can be leveraged to extend the data that Matomo tracks and reports on.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_120\n\nLANGUAGE: Text\nCODE:\n```\n* `Dimension.addDimension` lets you add custom dimensions\n```\n\n----------------------------------------\n\nTITLE: Creating a Promise with Deferred for asynchronous operation\nDESCRIPTION: This code uses `Q.defer()` to create a deferred object, which provides manual control over the resolution or rejection of a promise. It wraps the asynchronous `FS.readFile` function, resolving the promise with the file content on success and rejecting it with an error on failure. `deferred.promise` exposes the promise to the caller.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar deferred = Q.defer();\nFS.readFile(\"foo.txt\", \"utf-8\", function (error, text) {\n    if (error) {\n        deferred.reject(new Error(error));\n    } else {\n        deferred.resolve(text);\n    }\n});\nreturn deferred.promise;\n```\n\n----------------------------------------\n\nTITLE: Enabling auto-play only when the page is visible\nDESCRIPTION: This JavaScript code snippet shows how to enable auto-playing of a video only when the page is opened as a visible tab. It uses `Visibility.hidden()` to check if the page is hidden. If not hidden, it calls `VideoPlayer.play()` to start the video.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).load(function () {\n\n   if ( !Visibility.hidden() ) {\n       VideoPlayer.play();\n   }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamically Created Reports via Report.addReports Event in PHP\nDESCRIPTION: Introduces a new event, `Report.addReports`, that enables developers to add dynamically created reports to Matomo. This event facilitates the creation of customized reporting interfaces.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_122\n\nLANGUAGE: Text\nCODE:\n```\n* `Report.addReports` lets you add dynamically created reports\n```\n\n----------------------------------------\n\nTITLE: Using trackRequest to send Tracking Parameters in JavaScript\nDESCRIPTION: Introduces a new method `trackRequest` to allow sending any tracking parameters to Piwik. Includes a JavaScript example call.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_131\n\nLANGUAGE: JavaScript\nCODE:\n```\n* The Piwik JavaScript tracker has a new method `trackRequest` that allows you to send any tracking parameters to Piwik. For example  `_paq.push(['trackRequest', 'te=foo&bar=baz'])`\n```\n\n----------------------------------------\n\nTITLE: Q.async Generator Function with Promises in JavaScript\nDESCRIPTION: This code shows how to use `Q.async` to wrap a generator function and use `yield` to wait for promises to resolve.  The `eventualAdd` function takes two promises, `oneP` and `twoP`, resolves them using `yield`, and then returns the sum. Dependencies: Q promise library.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/examples/async-generators/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar eventualAdd = Q.async(function* (oneP, twoP) {\n    var one = yield oneP;\n    var two = yield twoP;\n    return one + two;\n});\n\neventualAdd(eventualOne, eventualTwo).then(function (three) {\n    three === 3;\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering on Successful Login\nDESCRIPTION: Describes the `Login.authenticate.successful` event that has been added, which is triggered when a user successful signs in. This facilitates integration with login flows.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: Privacy Manager Events for GDPR Compliance\nDESCRIPTION: Details the new events for enabling plugins to be GDPR compliant: `PrivacyManager.deleteLogsOlderThan`, `PrivacyManager.exportDataSubjects` and `PrivacyManager.deleteDataSubjects`. These events provide hooks for managing user data.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Controlling Ecommerce Cart via JS Tracker\nDESCRIPTION: Explains the addition of `removeEcommerceItem` and `clearEcommerceCart` methods to the JavaScript tracker.  These methods provide finer control over the contents of the e-commerce cart being tracked.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Adding Glossary Items via API Event\nDESCRIPTION: Explains the addition of the `API.addGlossaryItems` event, which allows developers to contribute items to the glossary within the Matomo platform. This expands the glossary's content and customization possibilities.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Using Visibility.every for visible page intervals\nDESCRIPTION: This JavaScript code snippet demonstrates using `Visibility.every` to execute a function every 1000ms (1 second) only when the page is visible. It updates a countdown animation using `updateCountdownAnimation()` function which is called when the page is visible.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nVisibility.every(1000, function () {\n    updateCountdownAnimation();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Segments via Segment.addSegments Event in PHP\nDESCRIPTION: Introduces a new event `Segment.addSegments` that allows adding custom segments. This new event allows extending segmentation possibilities and tailoring the data analysis to specific user groups.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_128\n\nLANGUAGE: Text\nCODE:\n```\n* New event `Segment.addSegments` that lets you add segments.\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Log Tables\nDESCRIPTION: Explains the `Db.getActionReferenceColumnsByTable` event, added in case a plugin defines a custom log table which references data to the log_action table. This ensures correct data relationships.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_71\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Tracker API: disableCampaignParameters\nDESCRIPTION: Introduces the `disableCampaignParameters` method in the JavaScript tracker.  This allows disabling the processing of campaign parameters and preventing them from being forwarded to the tracking endpoint, providing greater control over data collection.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThe method `disableCampaignParameters` have been added to the JavaScript tracker. It allows to disable processing of campaign parameters and forwarding them to the tracking endpoint.\n```\n\n----------------------------------------\n\nTITLE: Converting Other Promises to Q Promises\nDESCRIPTION: Explains how to convert promises from other libraries (e.g., jQuery's $.ajax) to Q promises using the Q() constructor, allowing them to be used with Q's extended functionality.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q($.ajax(...))\n.then(function () {\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker: Delete Custom Variables\nDESCRIPTION: Added JavaScript Tracker method `deleteCustomVariables` to delete all custom variables within a certain scope.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteCustomVariables\n```\n\n----------------------------------------\n\nTITLE: Getting Matomo/Piwik URL via JS Tracker\nDESCRIPTION: Explains the new JavaScript tracker method `getPiwikUrl` which has been added to retrieve the URL of where the Piwik instance is located. This is useful for dynamic configuration.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_73\n\n\n\n----------------------------------------\n\nTITLE: Chaining Promises Inside Handlers in JavaScript\nDESCRIPTION: This example shows how to chain promises by returning a new promise within the `then` handler function. It illustrates how to create nested promise chains.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreturn getUsername()\n.then(function (username) {\n    return getUser(username)\n    .then(function (user) {\n        // if we get here without an error,\n        // the value returned here\n        // or the exception thrown here\n        // resolves the promise returned\n        // by the first line\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting User and Visitor ID via JS Tracker\nDESCRIPTION: Details the new JavaScript tracker method `resetUserId` which has been added to allow clearing user and visitor IDs. This is useful for privacy and consent management.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_49\n\n\n\n----------------------------------------\n\nTITLE: Creating Update Migrations with Piwik\\Updater\\Migration\\Factory in PHP\nDESCRIPTION: Introduces a new class, `Piwik\\Updater\\Migration\\Factory`, that simplifies the creation of migrations that can be executed during an update, such as database or plugin migrations.  It also shows how to generate the migrations using the console command.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_124\n\nLANGUAGE: Text\nCODE:\n```\n* The new class `Piwik\\Updater\\Migration\\Factory` lets you easily create migrations that can be executed during an update. For example database or plugin related migrations. To generate a new update with migrations execute `./console generate:update`.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker: Setting Domains with Paths\nDESCRIPTION: Demonstrates how to use the `PiwikTracker.setDomains()` method in the JavaScript Tracker to handle paths. This allows specifying a path to be tracked under a given domain and treating requests to other paths on the same domain as outlinks.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_135\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['setDomains, '*.matomo.org/website1'])\n```\n\n----------------------------------------\n\nTITLE: Setting Visitor ID using JavaScript Tracker\nDESCRIPTION: This snippet demonstrates how to force a specific visitorId using the `setVisitorId` method in the Matomo JavaScript tracker. It takes a 16-digit hexadecimal string as the visitor ID. This is useful in scenarios where you need to manually associate a visitor with a known identifier.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['setVisitorId', visitorId]);\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL via JS Tracker\nDESCRIPTION: Describes the new JavaScript tracker method `getCurrentUrl` which has been added to retrieve the current URL of the website. This allows access to the current location.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: Remembering Cookie Consent using JavaScript Tracker\nDESCRIPTION: This snippet illustrates how to remember cookie consent using the Matomo JavaScript tracker. Calling this method stores the user's consent, allowing cookies to be used in subsequent visits. This allows tracking to continue as long as the user has provided consent.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['rememberCookieConsentGiven']);\n```\n\n----------------------------------------\n\nTITLE: Using 'fin' for Finalization Logic in JavaScript\nDESCRIPTION: This snippet shows how to use the `fin` (or `finally`) method to execute finalization logic regardless of whether the promise is fulfilled or rejected. This is useful for closing resources or cleaning up.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar outputPromise = getInputPromise()\n.fin(function () {\n    // close files, database connections, stop servers, conclude tests\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Global Keyboard Shortcut with Mousetrap\nDESCRIPTION: This snippet demonstrates how to bind a global keyboard shortcut using the `Mousetrap.bindGlobal` function.  When the user presses 'ctrl+s', the `_save()` function will be executed, regardless of whether they are focused on an input field or not. This relies on the Mousetrap library being included.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/global-bind/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMousetrap.bindGlobal('ctrl+s', function() {\n    _save();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Domain of a Color Scale - JavaScript\nDESCRIPTION: This code demonstrates how to specify the input range (domain) of a color scale using scale.domain(). It shows examples with a simple min/max range and with custom stops.  It also shows how to generate domain stops algorithmically, including logarithmic.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = chroma.scale(['lightyellow', 'navy']).domain([0, 400]);\nscale(200);  // #7F7FB0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = chroma.scale(['lightyellow', 'navy'])\n.domain([0, 100, 200, 300, 400]);\nscale(98);  // #7F7FB0\nscale(99);  // #7F7FB0\nscale(100);  // #AAAAC0\nscale(101);  // #AAAAC0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale(['#eee', '#900']).domain([0, 400], 7);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale(['#eee', '#900']).domain([1, 1000000], 7, 'log');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale(['white', 'red']).domain([0, 100], 4).domain() // [0, 25, 50, 75, 100]\n```\n\n----------------------------------------\n\nTITLE: Usage Example: Google Authenticator PHP\nDESCRIPTION: This code snippet demonstrates how to use the PHPGangsta_GoogleAuthenticator class to generate a secret, create a QR code URL, generate a code, and verify it.  It requires the PHPGangsta/GoogleAuthenticator.php file to be included and autoloaded. The snippet shows how to instantiate the class, generate a secret, get the QR code URL, generate a verification code, and verify the generated code against the secret with a tolerance of 2 time windows (2*30 seconds).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/libs/Authenticator/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once 'PHPGangsta/GoogleAuthenticator.php';\n\n$ga = new PHPGangsta_GoogleAuthenticator();\n$secret = $ga->createSecret();\necho \"Secret is: \".$secret.\"\\n\\n\";\n\n$qrCodeUrl = $ga->getQRCodeGoogleUrl('Blog', $secret);\necho \"Google Charts URL for the QR-Code: \".$qrCodeUrl.\"\\n\\n\";\n\n$oneCode = $ga->getCode($secret);\necho \"Checking Code '$oneCode' and Secret '$secret':\\n\";\n\n$checkResult = $ga->verifyCode($secret, $oneCode, 2);    // 2 = 2*30sec clock tolerance\nif ($checkResult) {\n    echo 'OK';\n} else {\n    echo 'FAILED';\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Q.nfcall and Q.nfapply for Node.js Callbacks\nDESCRIPTION: Shows how to use Q.nfcall and Q.nfapply to convert Node.js-style callback functions (err, result) into promises.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.nfcall(FS.readFile, \"foo.txt\", \"utf-8\");\nreturn Q.nfapply(FS.readFile, [\"foo.txt\", \"utf-8\"]);\n```\n\n----------------------------------------\n\nTITLE: New Piwik\\Plugin\\Archiver Method: shouldRunEvenWhenNoVisits() PHP\nDESCRIPTION: The `Piwik\\Plugin\\Archiver::shouldRunEvenWhenNoVisits()` method allows a plugin archiver to force archiving to run even when there were no visits for the website/date/period/segment combination, which is useful for specific archiving purposes.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_80\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Archiver::shouldRunEvenWhenNoVisits()\n```\n\n----------------------------------------\n\nTITLE: Filtering Reports via Report.filterReports Event in PHP\nDESCRIPTION: Introduces a new event, `Report.filterReports`, to allow developers to filter reports within Matomo. This gives developers greater control over which reports are displayed and used.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_123\n\nLANGUAGE: Text\nCODE:\n```\n* `Report.filterReports` lets you filter any report\n```\n\n----------------------------------------\n\nTITLE: Initializing Color from specific color space - JavaScript\nDESCRIPTION: This code shows how to initialize a color directly from specific color spaces using functions like chroma.rgb(), chroma.hsl(), chroma.hsv(), chroma.lab(), chroma.lch(), and chroma.gl(). Each function takes the color components appropriate for its color space as arguments.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.rgb(255, 0, 0);\nchroma.hsl(0, 1, 0.5);\nchroma.hsv(120, 0.5, 0.5);\nchroma.lab(53.24, 80.09, 67.20);\nchroma.lch(53.24, 104.55, 40);\nchroma.gl(1, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Wildcard Matching in setDomains JavaScript Tracker Function\nDESCRIPTION: Describes how the JS Tracker's `setDomains` function now supports page wildcards matching eg. `example.com/index*` which can be useful when [tracking a group of pages within a domain in a separate website in Piwik](http://developer.matomo.org/guides/tracking-javascript-guide#tracking-a-group-of-pages-in-a-separate-website)\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\n * JS Tracker: `setDomains` function now supports page wildcards matching eg. `example.com/index*` which can be useful when [tracking a group of pages within a domain in a separate website in Piwik](http://developer.matomo.org/guides/tracking-javascript-guide#tracking-a-group-of-pages-in-a-separate-website)\n```\n\n----------------------------------------\n\nTITLE: Disabling Empty Site Check\nDESCRIPTION: Explains the `SitesManager.shouldPerformEmptySiteCheck` event that allows plugins to disable the empty site check for individual sites. This provides flexibility in managing site validation.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_54\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Tracker: Logging All Content Blocks\nDESCRIPTION: Illustrates how to use the `logAllContentBlocksOnPage` method in the `piwik.js` Javascript Tracker to log all found content blocks within a page to the console. This is useful to debug / test content tracking.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_139\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['logAllContentBlocksOnPage'])\n```\n\n----------------------------------------\n\nTITLE: Including Mousetrap via HTML\nDESCRIPTION: This snippet demonstrates how to include the Mousetrap library in an HTML page using a `<script>` tag. It assumes that `mousetrap.min.js` is located at `/path/to/mousetrap.min.js`. This is the standard method for adding Mousetrap to a webpage when not using a module bundler.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/mousetrap.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding/Filtering System Summary Items\nDESCRIPTION: Details the events `System.addSystemSummaryItems` and `System.filterSystemSummaryItems` that have been added so plugins can add items and filter items of the system summary widget. These allow for customization of system information.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_72\n\n\n\n----------------------------------------\n\nTITLE: Showing Header Message in Reports\nDESCRIPTION: Describes that reports and visualizations can now show a message above the report with a new property `$view->config->show_header_message`. This adds customization for displaying context.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Including jQuery using a Script Tag\nDESCRIPTION: This example demonstrates how to include jQuery in an HTML document using a script tag that points to the jQuery CDN. This is the simplest method for adding jQuery to a webpage. The src attribute specifies the URL of the jQuery library.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.jquery.com/jquery-3.6.4.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing jQuery in ES Modules\nDESCRIPTION: This example shows how to import jQuery in an ECMAScript module (ESM) using the `import` keyword.  This approach is common when using module bundlers like Webpack, Browserify, or Babel.  It makes jQuery available as the `$` variable.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport $ from \"jquery\";\n```\n\n----------------------------------------\n\nTITLE: Parsing Matomo Analytics Data in XML Format\nDESCRIPTION: This XML snippet contains analytics data for a Matomo installation. It stores information about website visits, actions, goals, conversions, and revenue, organized by year and referrer. The data includes metrics like number of visits, number of actions, visit length, bounce count, and conversion details for specific goals.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_RowEvolution_exported.xml.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<results>\n\t<result date=\"2008\" />\n\t<result date=\"2009\" />\n\t<result date=\"2010\" />\n\t<result date=\"2011\" />\n\t<result date=\"2012\">\n\t\t<row>\n\t\t\t<label>referrer.com</label>\n\t\t\t<nb_visits>12</nb_visits>\n\t\t\t<nb_actions>52</nb_actions>\n\t\t\t<max_actions>7</max_actions>\n\t\t\t<sum_visit_length>9020</sum_visit_length>\n\t\t\t<bounce_count>2</bounce_count>\n\t\t\t<nb_visits_converted>12</nb_visits_converted>\n\t\t\t<goals>\n\t\t\t\t<row idgoal='1'>\n\t\t\t\t\t<nb_conversions>24</nb_conversions>\n\t\t\t\t\t<nb_visits_converted>12</nb_visits_converted>\n\t\t\t\t\t<revenue>120</revenue>\n\t\t\t\t</row>\n\t\t\t\t<row idgoal='2'>\n\t\t\t\t\t<nb_conversions>12</nb_conversions>\n\t\t\t\t\t<nb_visits_converted>12</nb_visits_converted>\n\t\t\t\t\t<revenue>60</revenue>\n\t\t\t\t</row>\n\t\t\t</goals>\n\t\t\t<nb_conversions>36</nb_conversions>\n\t\t\t<revenue>180</revenue>\n\t\t\t<sum_daily_nb_uniq_visitors>12</sum_daily_nb_uniq_visitors>\n\t\t\t<sum_daily_nb_users>2</sum_daily_nb_users>\n\t\t</row>\n\t</result>\n</results>\n```\n\n----------------------------------------\n\nTITLE: Granting User Capabilities\nDESCRIPTION: Details the `UsersManager.addCapabilities` API method for granting one or multiple capabilities to a user in Matomo. This enables dynamic modification of user permissions.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Piwik\\Request class introduction\nDESCRIPTION: Introduces the `Piwik\\Request` class. This class enables fetching parameters from a request and optionally validates and casts them to a defined type, providing type safety and data validation.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThe class `Piwik\\Request` has been introduced. It will allow fetching parameters from a request, optionally validated / casted to a certain type. Use this class in favor of `Common::getRequestVar`.\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Metrics via Event\nDESCRIPTION: Describes the `Metric.addComputedMetrics` event, triggered to add computed metrics that are not generated automatically. This enables the definition of custom metrics.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Ultra-Compact Promise Sequencing with reduce and Q.when\nDESCRIPTION: This snippet provides an ultra-compact way to chain promises using `reduce` with `Q.when`. `Q.when` is a shorthand for `then` that automatically handles both fulfilled and rejected promises. This approach assumes each function in `funcs` returns a promise.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nreturn funcs.reduce(Q.when, Q(initialVal));\n```\n\n----------------------------------------\n\nTITLE: Initializing IFrame Resizer with Options JavaScript\nDESCRIPTION: This JavaScript snippet shows how to initialize the IFrame Resizer library with optional settings. It takes an optional options object and a CSS selector or an iframe element as arguments. The library automatically resizes the specified iframes based on the content within them.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/iframe-resizer/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst iframes = iFrameResize( [{options}], [css selector] || [iframe] );\n```\n\n----------------------------------------\n\nTITLE: Forgetting Cookie Consent using JavaScript Tracker\nDESCRIPTION: This snippet demonstrates how to forget previously given cookie consent using the Matomo JavaScript tracker. Calling this method revokes the user's consent, preventing the use of cookies. This is used when the user withdraws their consent for cookie usage.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['forgetCookieConsentGiven']);\n```\n\n----------------------------------------\n\nTITLE: Fetching Available User Capabilities\nDESCRIPTION: Describes the `UsersManager.getAvailableCapabilities` API method, which allows fetching a list of all available capabilities that can be granted to users in Matomo. This API facilitates fine-grained access control.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Combining Promises with Q.all\nDESCRIPTION: This snippet uses `Q.all` to transform an array of promises into a single promise that resolves with an array of the fulfilled values. The `eventualAdd` function (assumed to be defined elsewhere) returns a promise. The `Q.all` function waits for all the promises to resolve before fulfilling its own promise with the results.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.all([\n    eventualAdd(2, 2),\n    eventualAdd(10, 20)\n]);\n```\n\n----------------------------------------\n\nTITLE: IFrame Resizer Typical Setup HTML/CSS/JavaScript\nDESCRIPTION: This example demonstrates a typical setup for the IFrame Resizer library, including CSS to set the iframe's width and min-width, an iframe element with a source URL, and JavaScript to initialize the IFrame Resizer with logging enabled. This setup allows the iframe height to scale to fit its content while maintaining a responsive width.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/iframe-resizer/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  iframe {\n    width: 1px;\n    min-width: 100%;\n  }\n</style>\n<iframe id=\"myIframe\" src=\"http://anotherdomain.com/iframe.html\"></iframe>\n<script>\n  iFrameResize({ log: true }, '#myIframe')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Q Promises as Proxies\nDESCRIPTION: Illustrates how Q promises can act as proxies for remote objects, allowing optimized property access and function calls using methods like .get(), .put(), .del(), .post(), .invoke(), .fapply(), and .fcall().\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.then(function (value) {\n    return value[0].foo;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Less Stylesheets\nDESCRIPTION: Explains the `AssetManager.addStylesheets` event which allows plugins to add additional LESS styles that are not located in a file. This enables dynamic styling customization.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_46\n\n\n\n----------------------------------------\n\nTITLE: Setting Cookie Consent for the Current Page View\nDESCRIPTION: This snippet illustrates how to set cookie consent for the current page view using the Matomo JavaScript tracker. This setting is not remembered across requests. This method is used to inform the tracker that consent has been given for the current page view only.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['setCookieConsentGiven']);\n```\n\n----------------------------------------\n\nTITLE: Report Flattening Support Configuration PHP\nDESCRIPTION: This code snippet shows the usage of the `$supportsFlatten` property in the `Report` class to define if a report supports flattening. Setting it to `false` will also set `ViewDataTable\\Config::$show_flatten_table` to `false`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\nReport::$supportsFlatten\n```\n\nLANGUAGE: php\nCODE:\n```\nViewDataTable\\Config::$show_flatten_table\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout with Deferred, Q.when and delay\nDESCRIPTION: This code shows a simplified implementation of `Q.timeout` using a deferred object, `Q.when`, and the `delay` function. The `Q.when` function attaches a resolver to the original promise, and `delay` creates a promise that rejects after a specified timeout if the original promise hasn't resolved by then.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfunction timeout(promise, ms) {\n    var deferred = Q.defer();\n    Q.when(promise, deferred.resolve);\n    delay(ms).then(function () {\n        deferred.reject(new Error(\"Timed out\"));\n    });\n    return deferred.promise;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic QR Code Generation JavaScript\nDESCRIPTION: This snippet demonstrates the most basic usage of the QRCode.js library. It creates a QR code within a div element with the ID 'qrcode', encoding the provided URL. No external dependencies are needed. The generated QR code is appended to the specified HTML element.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/qrcodejs2/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<div id=\"qrcode\"></div>\n<script type=\"text/javascript\">\nnew QRCode(document.getElementById(\"qrcode\"), \"http://jindo.dev.naver.com/collie\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Color Components - JavaScript\nDESCRIPTION: This code shows how to retrieve color components in different color spaces (hex, rgb, hsv, hsl, lab, lch, rgba) using the respective color.xxx() methods. It also demonstrates setting the alpha value using color.alpha() and obtaining the CSS color string for different color spaces.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('red').hex()  // \"#FF0000\"\nchroma('red').rgb()  // [255, 0, 0]\nchroma('red').hsv()  // [0, 1, 1]\nchroma('red').hsl()  // [0, 1, 0.5]\nchroma('red').lab()  // [53.2407, 80.0924, 67.2031]\nchroma('red').lch()  // [53.2407, 104.5517, 39.9990]\nchroma('red').rgba() // [255, 0, 0, 1]\nchroma('red').css()  // \"rgb(255,0,0)\"\nchroma('red').alpha(0.7).css()  // \"rgba(255,0,0,0.7)\"\nchroma('red').css('hsl')        // \"hsl(0,100%,50%)\"\nchroma('red').alpha(0.7).css('hsl')  // \"hsla(0,100%,50%,0.7)\"\nchroma('blue').css('hsla') // \"hsla(240,100%,50%,1)\"\n```\n\n----------------------------------------\n\nTITLE: Using jQuery in Node.js with jsdom\nDESCRIPTION: This example demonstrates how to use jQuery in a Node.js environment by mocking a browser environment using jsdom.  jsdom creates a virtual DOM, allowing jQuery to function as it would in a browser.  The `window` and `document` objects are created by jsdom, then passed to jQuery when it is required.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { JSDOM } = require( \"jsdom\" );\nconst { window } = new JSDOM( \"\" );\nconst $ = require( \"jquery\" )( window );\n```\n\n----------------------------------------\n\nTITLE: Report Class: getNthLevelTableDimension API\nDESCRIPTION: Introduces the method `getNthLevelTableDimension` in the `Report` class to support subtable reports with more than three levels.  This extends the capabilities for generating complex reports.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe method `getNthLevelTableDimension` has been added to the `Report` class. This extends support for subtable reports for more than three levels.\n```\n\n----------------------------------------\n\nTITLE: Customizable QR Code Generation JavaScript\nDESCRIPTION: This snippet illustrates how to create a QR code with customized options using the QRCode.js library. It allows specifying parameters such as text content, width, height, dark and light colors, and error correction level.  The 'test' string refers to the id to which the QR code will be appended.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/qrcodejs2/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar qrcode = new QRCode(\"test\", {\n\ttext: \"http://jindo.dev.naver.com/collie\",\n\twidth: 128,\n\theight: 128,\n\tcolorDark : \"#000000\",\n\tcolorLight : \"#ffffff\",\n\tcorrectLevel : QRCode.CorrectLevel.H\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Promise with Q.fcall for function call\nDESCRIPTION: This example demonstrates using `Q.fcall` to call a function that returns a promise itself, such as the `eventualAdd` function (defined earlier).  `Q.fcall` ensures that the function's return value (which is a promise) is properly integrated into the promise chain.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.fcall(eventualAdd, 2, 2);\n```\n\n----------------------------------------\n\nTITLE: Disabling 'All' Rows Limit Selector\nDESCRIPTION: Explains how reports and visualizations can now disable the 'all' rows limit selector using `$view->config->disable_all_rows_filter_limit`. This provides more control over data display.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_48\n\n\n\n----------------------------------------\n\nTITLE: Calculating Contrast Ratio - JavaScript\nDESCRIPTION: This code shows how to calculate the contrast ratio between two colors using chroma.contrast().  It returns the contrast ratio, which should be at least 4.5:1 for accessibility.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.contrast('white', 'navy')  // 16.00 – ok\nchroma.contrast('white', 'yellow')  // 1.07 – not ok!\n```\n\n----------------------------------------\n\nTITLE: Removing User Capabilities\nDESCRIPTION: Explains the `UsersManager.removeCapabilities` API method for removing one or multiple capabilities from a user in Matomo. This allows for revoking specific permissions.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: INI Configuration: Disable Automatic Logins\nDESCRIPTION: This snippet shows how to disable the `logme` method for automatic logins in the `config.ini.php` file. Disabling this feature enhances security, especially if it's not needed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_24\n\nLANGUAGE: INI\nCODE:\n```\nlogin_allow_logme = 0\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Text Color for Themes\nDESCRIPTION: Describes the addition of the ability for themes to customize the header text color using `@theme-color-header-text`. This allows for visual customization of the Matomo interface.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_57\n\n\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: JavaScript Tracking Initialization\nDESCRIPTION: When using the Piwik JavaScript Tracking via `_paq.push`, it is now required to configure the tracker (e.g., calling `setSiteId` and `setTrackerUrl`) before the `piwik.js` JavaScript tracker is loaded to ensure the tracker works correctly.  Failure to initialize correctly will result in a browser console error.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n_paq.push\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetSiteId\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetTrackerUrl\n```\n\n----------------------------------------\n\nTITLE: INI Configuration: Set Proxy IP Read Logic\nDESCRIPTION: This snippet demonstrates configuring Matomo to read the last IP address from proxy headers (like X-Forwarded-For) instead of the first one.  This approach is considered more secure when using proxy headers in conjunction with a load balancer.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_25\n\nLANGUAGE: INI\nCODE:\n```\n[General]\nproxy_ip_read_last_in_list = 1\n```\n\n----------------------------------------\n\nTITLE: Example of Authenticating Using Nested and Chained Promises in JavaScript\nDESCRIPTION: This code demonstrates a more complex example of using both chained and nested promises to implement an authentication function. It gets a username, then gets the user, then gets the password and validates it against the stored password hash.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction authenticate() {\n    return getUsername()\n    .then(function (username) {\n        return getUser(username);\n    })\n    // chained because we will not need the user name in the next event\n    .then(function (user) {\n        return getPassword()\n        // nested because we need both user and password next\n        .then(function (password) {\n            if (user.passwordHash !== hash(password)) {\n                throw new Error(\"Can't authenticate\");\n            }\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Access with Role and Capabilities\nDESCRIPTION: Describes the modification of the `UsersManager.setUserAccess` API method to accept an array for passing both a role and multiple capabilities simultaneously. This simplifies user access configuration.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Plugin Report: Get Metric Names To Process Report Totals PHP\nDESCRIPTION: Added a new method `Piwik\\Plugin\\Report::getMetricNamesToProcessReportTotals()` that lets you define which metrics should show percentages in the table report visualization on hover. If defined, these percentages will be automatically calculated.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_85\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Report::getMetricNamesToProcessReportTotals()\n```\n\n----------------------------------------\n\nTITLE: Using requestOkText and handling promise\nDESCRIPTION: This snippet shows how to call the `requestOkText` function and handle the resulting promise using `.then`. It logs the response text if the request is successful (status 200), logs an error if the request fails, and logs the progress of the request as it comes in.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nrequestOkText(\"http://localhost:3000\")\n.then(function (responseText) {\n    // If the HTTP response returns 200 OK, log the response text.\n    console.log(responseText);\n}, function (error) {\n    // If there's an error or a non-200 status code, log the error.\n    console.error(error);\n}, function (progress) {\n    // Log the progress as it comes in.\n    console.log(\"Request progress: \" + Math.round(progress * 100) + \"%\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Color with chroma() Factory Function - JavaScript\nDESCRIPTION: This code shows how to initialize a color using the generic chroma() factory function with different input formats such as color names, hex codes, RGB values, HSL values, and CSS color strings.  The mode parameter specifies the color space, defaulting to 'rgb' if not provided.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchroma(\"red\");\nchroma(\"#ff0000\");\nchroma(\"#f00\");\nchroma(\"FF0000\");\nchroma(255, 0, 0);\nchroma([255, 0, 0]);\nchroma(0, 1, 0.5, 'hsl');\nchroma([0, 1, 0.5], 'hsl');\nchroma(0, 1, 1, 'hsv');\nchroma(\"rgb(255,0,0)\");\nchroma(\"rgb(100%,0%,0%)\");\nchroma(\"hsl(0,100%,50%)\");\nchroma(53.24, 80.09, 67.20, 'lab');\nchroma(53.24, 104.55, 40, 'lch');\nchroma(1, 0, 0, 'gl');\n```\n\n----------------------------------------\n\nTITLE: XML Result Data Structure\nDESCRIPTION: This XML snippet defines a structure for storing result data. The root element is 'results', containing multiple 'result' elements, each representing data for a specific date. Each 'result' may contain metrics like 'nb_visits', 'nb_actions', etc., providing quantitative measurements related to website usage during that period.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_VisitsSummary.get_exported.xml.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<results>\n\t<result date=\"2008\" />\n\t<result date=\"2009\" />\n\t<result date=\"2010\" />\n\t<result date=\"2011\" />\n\t<result date=\"2012\">\n\t\t<nb_visits>390</nb_visits>\n\t\t<nb_actions>887</nb_actions>\n\t\t<nb_visits_converted>274</nb_visits_converted>\n\t\t<bounce_count>220</bounce_count>\n\t\t<sum_visit_length>122103</sum_visit_length>\n\t\t<max_actions>20</max_actions>\n\t\t<bounce_rate>56%</bounce_rate>\n\t\t<nb_actions_per_visit>2.3</nb_actions_per_visit>\n\t\t<avg_time_on_site>5 min 13s</avg_time_on_site>\n\t</result>\n</results>\n```\n\n----------------------------------------\n\nTITLE: Setting Interpolation Mode of a Color Scale - JavaScript\nDESCRIPTION: This code shows how to specify the color space for interpolation within a color scale using scale.mode().\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = chroma.scale(['lightyellow', 'navy']);\nscale.mode('hsv')(0.5);  // #54C08A\nscale.mode('hsl')(0.5);  // #31FF98\nscale.mode('lab')(0.5);  // #967CB2\nscale.mode('lch')(0.5);  // #D26662\n```\n\n----------------------------------------\n\nTITLE: New API Methods: SecurityPolicy Modifications\nDESCRIPTION: Documents the new API Methods for modifying Content Security Policy. `SecurityPolicy.addPolicy`, `SecurityPolicy.overridePolicy`, `SecurityPolicy.removeDirective`, `SecurityPolicy.allowEmbedPage`, `SecurityPolicy.disable`\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nSecurityPolicy.addPolicy\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSecurityPolicy.overridePolicy\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSecurityPolicy.removeDirective\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSecurityPolicy.allowEmbedPage\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSecurityPolicy.disable\n```\n\n----------------------------------------\n\nTITLE: Using Q.spread to handle promise arrays\nDESCRIPTION: This code defines an `eventualAdd` function that takes two values (a and b) and uses `Q.spread` to handle them as arguments to a function that adds them. `Q.spread` automatically waits for the input promises to resolve and passes their results to the provided function.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction eventualAdd(a, b) {\n    return Q.spread([a, b], function (a, b) {\n        return a + b;\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Tracker\nDESCRIPTION: Explains the new API class `Piwik\\Plugins\\CustomPiwikJs\\TrackerUpdater` that has been added to update the piwik.js JavaScript tracker. This is a tool for managing tracker versions.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Implementing Delay with Deferred and setTimeout\nDESCRIPTION: This code demonstrates a simplified implementation of `Q.delay` using a deferred object and `setTimeout`. The `setTimeout` function is used to schedule the resolution of the deferred's promise after a specified delay in milliseconds.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfunction delay(ms) {\n    var deferred = Q.defer();\n    setTimeout(deferred.resolve, ms);\n    return deferred.promise;\n}\n```\n\n----------------------------------------\n\nTITLE: Matomo XML Data Example\nDESCRIPTION: This XML snippet demonstrates the structure of data returned by Matomo analytics. It includes metrics like the number of conversions, revenue, unique visitors, and users, along with a subtable containing detailed information about individual rows of data, such as website URLs.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_Referrers.getWebsites_exported.xml.txt#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<nb_conversions>2</nb_conversions>\n<revenue>10</revenue>\n<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n<sum_daily_nb_users>1</sum_daily_nb_users>\n<subtable>\n\t<row>\n\t\t<label>http://whatever3.com/3</label>\n\t\t<nb_visits>1</nb_visits>\n\t\t<nb_actions>1</nb_actions>\n\t\t<max_actions>1</max_actions>\n\t\t<sum_visit_length>1</sum_visit_length>\n\t\t<bounce_count>1</bounce_count>\n\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t<sum_daily_nb_users>1</sum_daily_nb_users>\n\t</row>\n</subtable>\n</row>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Disabling DataTable Post Processing\nDESCRIPTION: Describes the `Request.shouldDisablePostProcessing` event which allows plugins to disable DataTable post processing for individual API requests. This can improve performance in some cases.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_53\n\n\n\n----------------------------------------\n\nTITLE: Sequentially Chaining Promises with .then\nDESCRIPTION: This snippet shows a simple, manual way to chain promises sequentially using `.then`. Each function (`foo`, `bar`, `baz`, `qux`) is assumed to return a promise, and the result of each promise is passed to the next function in the chain.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nreturn foo(initialVal).then(bar).then(baz).then(qux);\n```\n\n----------------------------------------\n\nTITLE: Changing Menu Item Order with Piwik\\Category\\Subcategory in PHP\nDESCRIPTION: Introduces a new class `Piwik\\Category\\Subcategory` to change the name and order of menu items. This allows for customization of the navigation within the Matomo user interface.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_119\n\nLANGUAGE: Text\nCODE:\n```\n* The new class `Piwik\\Category\\Subcategory` let you change the name and order of menu items\n```\n\n----------------------------------------\n\nTITLE: Dynamically Sequencing Promises with reduce\nDESCRIPTION: This code provides a more compact way to dynamically chain promises using the `reduce` function. The `funcs` array contains the functions to be executed sequentially. `reduce` accumulates the result of each promise and passes it to the next function in the sequence. `Q(initialVal)` initializes the sequence.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nreturn funcs.reduce(function (soFar, f) {\n    return soFar.then(f);\n}, Q(initialVal));\n```\n\n----------------------------------------\n\nTITLE: Enabling Link Tracking in JavaScript (Matomo)\nDESCRIPTION: This snippet demonstrates how to enable outlink and download tracking via context menu clicks using the Matomo JavaScript tracker. It shows both the direct tracker method call and the `_paq.push` method for asynchronous tracking. It enables link tracking, but is vulnerable to false positives.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_141\n\nLANGUAGE: JavaScript\nCODE:\n```\ntracker.enableLinkTracking(true)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['enableLinkTracking', true]);\n```\n\n----------------------------------------\n\nTITLE: API parameter introduction: showMetadata\nDESCRIPTION: Introduces the new API parameter `showMetadata` to toggle the display of metadata in API exports. The default value is `1` to maintain current behavior.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe new API parameter `showMetadata` was introduced. In can be used to toggle displaying of metadata in API exports. The default value is `1` to keep current behavior.\n```\n\n----------------------------------------\n\nTITLE: Command: plugin:install-or-update\nDESCRIPTION: Introduces the `plugin:install-or-update` command. This command allows installing or updating a plugin from the Marketplace, streamlining plugin management.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNew command `plugin:install-or-update` lets you install or update a plugin from the Marketplace.\n```\n\n----------------------------------------\n\nTITLE: Creating Color Scales with Chroma.js\nDESCRIPTION: This snippet demonstrates how to create a color scale using chroma.scale() with an array of colors. It then shows how to access a color from the scale using a value between 0 and 1 and convert it to its hexadecimal representation.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscale = chroma.scale(['white', 'red']);\nscale(0.5).hex(); // #FF7F7F\n```\n\n----------------------------------------\n\nTITLE: Adding deferred.makeNodeResolver() Q promise library\nDESCRIPTION: Adds 'deferred.makeNodeResolver()' to the Q promise library, serving as a replacement for the previously used 'deferred.node()' method. This function is intended to create a resolver for Node.js-style callbacks, where exceptions are handled and the resolver/rejecter are provided as arguments.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndeferred.makeNodeResolver()`` to replace the more cryptic\n   ``deferred.node()`` method.\n```\n\n----------------------------------------\n\nTITLE: Ending a Promise Chain with .done\nDESCRIPTION: This example demonstrates the use of `.done` to end a promise chain.  Using `.done` ensures that any unhandled errors in the chain are re-thrown and reported, preventing exceptions from going unnoticed. Alternatively, the last promise can be returned.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfoo()\n.then(function () {\n    return \"bar\";\n})\n.done();\n```\n\n----------------------------------------\n\nTITLE: Binding Mousewheel Event with jQuery\nDESCRIPTION: This example demonstrates how to bind the `mousewheel` event to an element using both the `on` method and the event helper method provided by the plugin. It logs the normalized deltaX, deltaY, and deltaFactor to the console.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery-mousewheel/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// using on\n$('#my_elem').on('mousewheel', function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n\n// using the event helper\n$('#my_elem').mousewheel(function(event) {\n    console.log(event.deltaX, event.deltaY, event.deltaFactor);\n});\n```\n\n----------------------------------------\n\nTITLE: Q.fcall with .all() Method\nDESCRIPTION: Illustrates an alternative way to use Q.all with Q.fcall to execute a function that returns an array of promises, then waits for all promises in the array to resolve.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.fcall(function () {\n    return [a, b];\n})\n.all();\n```\n\n----------------------------------------\n\nTITLE: New Config Settings: SSL Handling (INI)\nDESCRIPTION: Describes the addition of `ssl_disallow_self_signed`, `ssl_verify_peer`, and `ssl_verify_peer_name` settings to control SSL handling in SMTP requests.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_14\n\nLANGUAGE: INI\nCODE:\n```\nssl_disallow_self_signed\n```\n\nLANGUAGE: INI\nCODE:\n```\nssl_verify_peer\n```\n\nLANGUAGE: INI\nCODE:\n```\nssl_verify_peer_name\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Widget Class Changes PHP\nDESCRIPTION: The class `Piwik\\Plugin\\Widgets` has been removed and replaced by `Piwik\\Widget\\Widget`. The class `Piwik\\WidgetList` has been moved to `Piwik\\Widget\\WidgetsList`. Use `./console generate:widget` to create widgets.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Widgets\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Widget\\Widget\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\WidgetList\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Widget\\WidgetsList\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Keys with Mousetrap (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the Mousetrap library with an extension that allows binding multiple key combinations to their respective functions using a dictionary.  It binds the 'a' key to a function that logs 'a' to the console and the 'b' key to a function that logs 'b' to the console. No dependencies are explicitly mentioned, but the Mousetrap library and the specified extension must be loaded before running this code.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/bind-dictionary/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMousetrap.bind({\n    'a': function() { console.log('a'); },\n    'b': function() { console.log('b'); }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Asynchronously Created Tracker Instance\nDESCRIPTION: Describes how to get an asynchronously created tracker instance (`addTracker`) via the method `Piwik.getAsyncTracker(optionalPiwikUrl, optionalPiwikSiteId)`. This allows you to get the tracker instance and to send different tracking requests to this Piwik instance and to configure it differently than other tracker instances.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\n * It is possible to get an asynchronously created tracker instance (`addTracker`) via the method `Piwik.getAsyncTracker(optionalPiwikUrl, optionalPiwikSiteId)`. This allows you to get the tracker instance and to send different tracking requests to this Piwik instance and to configure it differently than other tracker instances.\n```\n\n----------------------------------------\n\nTITLE: Wrapping XMLHttpRequest with Q.Promise for progress\nDESCRIPTION: This code rewrites the previous `requestOkText` example using `Q.Promise` instead of `Q.defer`.  It provides the `resolve`, `reject`, and `notify` functions directly to the promise constructor, simplifying the structure and avoiding the need for a separate deferred object.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nfunction requestOkText(url) {\n    return Q.Promise(function(resolve, reject, notify) {\n        var request = new XMLHttpRequest();\n\n        request.open(\"GET\", url, true);\n        request.onload = onload;\n        request.onerror = onerror;\n        request.onprogress = onprogress;\n        request.send();\n\n        function onload() {\n            if (request.status === 200) {\n                resolve(request.responseText);\n            } else {\n                reject(new Error(\"Status code was \" + request.status));\n            }\n        }\n\n        function onerror() {\n            reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n        }\n\n        function onprogress(event) {\n            notify(event.loaded / event.total);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Notification in Promises\nDESCRIPTION: This example demonstrates how to receive progress notifications from a promise using the third parameter of the `.then` method. The `uploadFile` function is assumed to return a promise that emits progress updates. The progress callback receives progress values as the upload proceeds.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nreturn uploadFile()\n.then(function () {\n    // Success uploading the file\n}, function (err) {\n    // There was an error, and we get the reason for error\n}, function (progress) {\n    // We get notified of the upload's progress as it is executed\n});\n```\n\n----------------------------------------\n\nTITLE: Executing code after prerendering\nDESCRIPTION: This JavaScript code snippet shows how to use `Visibility.afterPrerendering` to execute a function `Statistics.countVisitor()` only after the browser has finished prerendering the page. This ensures that prerendered pages are not counted as actual visitors.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nVisibility.afterPrerendering(function () {\n    Statistics.countVisitor();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding defer().node() Q promise library\nDESCRIPTION: Adds 'defer().node()' to the Q promise library, which generates a Node callback. The callback accepts '(error, value)' or '(error, ...values)'. For multiple value arguments, the fulfillment value is an array, which can be useful with 'spread'.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndefer().node()`` Node callback generator.  The\n   callback accepts ``(error, value)`` or ``(error,\n   ...values)``.  For multiple value arguments, the\n   fulfillment value is an array, useful in conjunction with\n   ``spread``.\n```\n\n----------------------------------------\n\nTITLE: Deferred.makeNodeResolver for Raw Deferred Objects\nDESCRIPTION: Shows how to use `deferred.makeNodeResolver()` to create a Node.js-style resolver for a deferred object, allowing it to be used with callback-based APIs.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar deferred = Q.defer();\nFS.readFile(\"foo.txt\", \"utf-8\", deferred.makeNodeResolver());\nreturn deferred.promise;\n```\n\n----------------------------------------\n\nTITLE: Customizing Report Invalidation Behavior\nDESCRIPTION: Describes the `Archiving.getIdSitesToMarkArchivesAsInvalidated` event which allows plugins to customize the behavior of report invalidations.  This allows for finer control over archive refresh processes.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: Handling Errors in Promises with .fail\nDESCRIPTION: This example demonstrates how to handle errors that may occur within a promise chain. Exceptions thrown within the fulfillment handler of a `.then` call are not caught by the rejection handler of the same `.then` call. To catch these errors, a separate `.fail` handler should be chained after the `.then` block.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nreturn foo()\n.then(function (value) {\n    throw new Error(\"Can't bar.\");\n})\n.fail(function (error) {\n    // We get here with either foo's error or bar's error\n});\n```\n\n----------------------------------------\n\nTITLE: Q.denodeify and Q.nbind for Reusable Wrappers\nDESCRIPTION: Demonstrates creating reusable wrappers for Node.js-style functions and methods using Q.denodeify and Q.nbind.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar readFile = Q.denodeify(FS.readFile);\nreturn readFile(\"foo.txt\", \"utf-8\");\n\nvar redisClientGet = Q.nbind(redisClient.get, redisClient);\nreturn redisClientGet(\"user:1:id\");\n```\n\n----------------------------------------\n\nTITLE: Adding allResolved for Q promise library\nDESCRIPTION: Adds 'allResolved' to the Q promise library.  This is used to wait for every promise in a set to either be fulfilled or rejected, without propagating any errors encountered during rejection.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nallResolved`` for waiting for every promise to either be\n   fulfilled or rejected, without propagating an error.\n```\n\n----------------------------------------\n\nTITLE: sprintf and vsprintf Usage\nDESCRIPTION: This example demonstrates how to import and use the `sprintf` and `vsprintf` functions from the `sprintf-js` library in JavaScript. `sprintf` formats a string using a variable number of arguments, while `vsprintf` takes an array of arguments.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprintf = require('sprintf-js').sprintf,\n    vsprintf = require('sprintf-js').vsprintf\n\nsprintf('%2$s %3$s a %1$s', 'cracker', 'Polly', 'wants')\nvsprintf('The first 4 letters of the english alphabet are: %s, %s, %s and %s', ['a', 'b', 'c', 'd'])\n```\n\n----------------------------------------\n\nTITLE: Deprecating PHP Methods in Piwik\nDESCRIPTION: Deprecates two PHP methods within the Piwik\\Updates and Piwik\\Updater classes, renaming them for future removal in Piwik 4.0.0. This ensures a smooth transition for developers while maintaining backward compatibility for existing code.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_115\n\nLANGUAGE: Text\nCODE:\n```\n* The method `Piwik\\Updates::getMigrationQueries()` has been deprecated and renamed to `getMigrations()`. It is still supported to use the method, but the method will be removed in Piwik 4.0.0\n* The method `Piwik\\Updater::executeMigrationQueries()` has been deprecated and renamed to `executeMigrations`. It is still supported to use the method, but the method will be removed in Piwik 4.0.0.\n```\n\n----------------------------------------\n\nTITLE: Generator Function with Yield Value in JavaScript\nDESCRIPTION: This example demonstrates how a generator can receive a value via the `next` method and use it. The `buffer` generator yields a variable `x`, and the `next` method sets the value of `x` for the subsequent iteration.  This allows for two-way communication with the generator.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/examples/async-generators/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = (function* () {\n    var x;\n    while (true) {\n        x = yield x;\n    }\n}());\n\nbuffer.next(1).value === undefined;\nbuffer.next(\"a\").value === 1;\nbuffer.value(2).value === \"a\";\nbuffer.next().value === 2;\nbuffer.next().value === undefined;\nbuffer.next().value === undefined;\n```\n\n----------------------------------------\n\nTITLE: Handling the first fulfilled promise with Q.any\nDESCRIPTION: This code shows the use of `Q.any`, which takes an array of promises and returns a promise that fulfills with the value of the first promise to fulfill, or rejects if all promises reject. The `.then` method is used to handle fulfillment, while the second argument to `.then` handles rejection when all promises reject.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nQ.any(promises)\n.then(function (first) {\n    // Any of the promises was fulfilled.\n}, function (error) {\n    // All of the promises were rejected.\n});\n```\n\n----------------------------------------\n\nTITLE: Admin Notifications Event Trigger PHP\nDESCRIPTION: A new event `Controller.triggerAdminNotifications` is triggered to notify plugins when they should trigger notifications in the admin area. Plugins can listen for this event to display relevant admin notifications.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nController.triggerAdminNotifications\n```\n\n----------------------------------------\n\nTITLE: Chaining Promises with .spread after .then\nDESCRIPTION: This snippet shows how to use `spread` after a `then` call to handle an array of values returned from a promise. `getUsername` and `getUser` are assumed to be functions that return promises. The result of `getUsername` is used to call `getUser`, and then `spread` unpacks the resulting array for further processing.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nreturn getUsername()\n.then(function (username) {\n    return [username, getUser(username)];\n})\n.spread(function (username, user) {\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Available User Roles\nDESCRIPTION: Explains the `UsersManager.getAvailableRoles` API method for retrieving a list of available roles that can be assigned to users in Matomo. This provides a standardized way to manage user roles.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Bezier Color Interpolation - JavaScript\nDESCRIPTION: This snippet illustrates how to perform Bezier interpolation between multiple colors using chroma.interpolate.bezier(). The returned interpolator function can then be used to get colors along the Bezier curve.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbezInterpolator = chroma.interpolate.bezier(['white', 'yellow', 'red', 'black']);\nbezInterpolator(0).hex()  // #ffffff\nbezInterpolator(0.33).hex()  // #ffcc67\nbezInterpolator(0.66).hex()  // #b65f1a\nbezInterpolator(1).hex()  // #000000\n```\n\n----------------------------------------\n\nTITLE: Composer Autoload Include\nDESCRIPTION: This line includes the Composer autoloader, making the project's dependencies available for use. It needs to be placed at the top of any file that uses classes loaded by Composer.  It assumes the standard project structure where the vendor directory is located one level above the current file.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/libs/Authenticator/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__ . '/../vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Matomo Download Tracking URL Example\nDESCRIPTION: This example shows a Matomo tracking URL for recording a download event. The `download` parameter specifies the URL of the downloaded file, `idsite` specifies the site ID, `rand` is a random number for cache busting, `redirect` controls redirection, and `name` sets the download name.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/resources/test-download-outlink-page.txt#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nmatomo.php?idsite=1&download=http%3A//forum.piwik.org/mma mai ****/test.zip&rand=0.10591157392713457&redirect=0&name=my outlink name\n```\n\nLANGUAGE: URL\nCODE:\n```\nmatomo.php?idsite=1&download=http%3A//forum.piwik.org/test.zip&rand=0.10591157392713457&redirect=0\n```\n\n----------------------------------------\n\nTITLE: Stopping a Visibility.every timer\nDESCRIPTION: This JavaScript code snippet shows how to stop a timer created by `Visibility.every`. It defines a slideshow that advances every 5 seconds using `nextSlide()`, and stops it using `Visibility.stop()` when a `.stopSlideshow` element is clicked. The `slideshow` variable stores the timer ID returned by `Visibility.every()`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar slideshow = Visibility.every(5 * 1000, function () {\n    nextSlide();\n});\n\n$('.stopSlideshow').click(function () {\n    Visibility.stop(slideshow);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Asynchronous Operations with Q Promises in JavaScript\nDESCRIPTION: This code snippet demonstrates how to manage asynchronous operations using Q promises, flattening the pyramid of doom and improving readability. It showcases the use of `Q.fcall`, `then`, `catch`, and `done` for chaining promises and handling errors.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\n----------------------------------------\n\nTITLE: Dynamically Sequencing Promises with forEach\nDESCRIPTION: This code shows how to dynamically chain a sequence of promise-returning functions using `forEach`. The `funcs` array contains the functions to be executed in sequence. The result of each promise is passed to the next function in the loop. `Q(initialVal)` initializes the sequence with an initial value.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar funcs = [foo, bar, baz, qux];\n\nvar result = Q(initialVal);\nfuncs.forEach(function (f) {\n    result = result.then(f);\n});\nreturn result;\n```\n\n----------------------------------------\n\nTITLE: Getting Luminance of a Color - JavaScript\nDESCRIPTION: This snippet shows how to get the relative luminance of a color, and setting the luminance directly.  Luminance is a value between 0 (black) and 1 (white).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('black').luminance() // 0\nchroma('white').luminance() // 1\nchroma('red').luminance() // 0.2126\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('#ff0000').luminance(0.4).hex() // #ff8585\"\n```\n\n----------------------------------------\n\nTITLE: Report Unsubscribe Event\nDESCRIPTION: Details the `Report.unsubscribe` event, triggered when a user unsubscribes from a report in Matomo. This allows for custom actions to be performed upon unsubscription.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Interpolating Colors - JavaScript\nDESCRIPTION: This snippet shows how to interpolate between two colors using chroma.interpolate(). The 'f' parameter specifies the interpolation factor (0 to 1), and the 'mode' parameter specifies the color space to interpolate in.  It also demonstrates interpolation with alpha channels.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.interpolate('white', 'black', 0)  // #ffffff\nchroma.interpolate('white', 'black', 1)  // #000000\nchroma.interpolate('white', 'black', 0.5)  // #7f7f7f\nchroma.interpolate('white', 'black', 0.5, 'hsv')  // #808080\nchroma.interpolate('white', 'black', 0.5, 'lab')  // #777777\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.interpolate('rgba(0,0,0,0)', 'rgba(255,0,0,1)', 0.5).css()  //\"rgba(127.5,0,0,0.5)\"\n```\n\n----------------------------------------\n\nTITLE: Image Comparison with Resemble.js\nDESCRIPTION: This snippet illustrates how to compare two images using Resemble.js. It uses the `compareTo` method to compare two files and provides options like `ignoreColors`. The `onComplete` callback provides the comparison results, including the mismatch percentage, whether the dimensions are the same, and any dimension differences. The `getImageDataUrl` function is also available in the results.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/resemblejs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar diff = resemble(file).compareTo(file2).ignoreColors().onComplete(function(data){\n\tconsole.log(data);\n\t/*\n\t{\n\t  misMatchPercentage : 100, // %\n\t  isSameDimensions: true, // or false\n\t  dimensionDifference: { width: 0, height: -1 }, // defined if dimensions are not the same\n\t  getImageDataUrl: function(){}\n\t}\n\t*/\n});\n```\n\n----------------------------------------\n\nTITLE: Q.get Shorthand for Property Access\nDESCRIPTION: Demonstrates using the .get() method as shorthand for accessing properties of an object within a promise chain.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.get(0)\n.get(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery with npm\nDESCRIPTION: This example shows how to install jQuery as a project dependency using npm (Node Package Manager). This command downloads and installs jQuery into the `node_modules` directory of your project.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install jquery\n```\n\n----------------------------------------\n\nTITLE: Using 'then' method with fulfillment and rejection handlers in JavaScript\nDESCRIPTION: This snippet illustrates the basic usage of the `then` method in Q promises, showing how to handle both fulfillment (success) and rejection (error) scenarios. It takes a promise and defines two functions: one to be executed upon successful resolution and another to be executed upon rejection.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npromiseMeSomething()\n.then(function (value) {\n}, function (reason) {\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Reports to Reporting UI via Report Class in PHP\nDESCRIPTION: Introduces a new feature to add a report to the reporting UI by using the `Report::$subCategory` property. If the category doesn't exist, it is created automatically. Also introduces method `Report::getSubCategory()` to get this value.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_117\n\nLANGUAGE: Text\nCODE:\n```\n* There is a new property `Report::$subCategory` that lets you add a report to the reporting UI. If a page having that name does not exist yet, it will be created automatically. The newly added method `Report::getSubCategory()` lets you get this value.\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: API Event Parameter Indexing PHP\nDESCRIPTION: When posting one of the events `API.Request.dispatch`, `API.Request.dispatch.end`, `API.$plugin.$apiAction`, or `API.$plugin.$apiAction.end`, the `$finalParameters` parameter is indexed in Piwik 2 (e.g., `array(1, 6)`) and named in Piwik 3 (e.g., `array('idSite' => 1, 'idGoal' => 6)`)\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_114\n\nLANGUAGE: php\nCODE:\n```\nAPI.Request.dispatch\n```\n\nLANGUAGE: php\nCODE:\n```\nAPI.Request.dispatch.end\n```\n\nLANGUAGE: php\nCODE:\n```\nAPI.$plugin.$apiAction\n```\n\nLANGUAGE: php\nCODE:\n```\nAPI.$plugin.$apiAction.end\n```\n\n----------------------------------------\n\nTITLE: Custom Domains with Chroma.js\nDESCRIPTION: This snippet demonstrates how to create a color scale with a custom domain using chroma.scale() and domain(). It uses quantiles to map the input values to the color scale.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale('RdYlBu').domain(myValues, 7, 'quantiles');\n```\n\n----------------------------------------\n\nTITLE: Lab/Lch Interpolation in Chroma.js\nDESCRIPTION: This snippet showcases how to use Lab/Lch interpolation mode for color scales in Chroma.js, which often provides better visual results compared to RGB interpolation.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale(['white', 'red']).mode('lab');\n```\n\n----------------------------------------\n\nTITLE: New HTTP API for Matomo Version\nDESCRIPTION: Explains the introduction of the new HTTP API `API.getMatomoVersion`.  The older `API.getPiwikVersion` still works but is hidden from the API reference.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_56\n\n\n\n----------------------------------------\n\nTITLE: Requiring jQuery in CommonJS Modules\nDESCRIPTION: This example demonstrates how to include jQuery in a file that uses the CommonJS syntax, which is often used with Node.js or older JavaScript projects. The `require()` function imports the jQuery module, and the `$` variable becomes a reference to the jQuery object.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar $ = require( \"jquery\" );\n```\n\n----------------------------------------\n\nTITLE: Adding fapply, fcall, fbind for non-thisp Q promise library\nDESCRIPTION: Adds 'fapply', 'fcall', and 'fbind' to the Q promise library, designed for making promised function calls without explicitly specifying 'thisp'. These additions provide more flexibility in function invocation within a promise context.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfapply``, ``fcall``, ``fbind`` for non-thisp\n   promised function calls.\n```\n\n----------------------------------------\n\nTITLE: Adding Q.promise(maker(resolve, reject)) Q promise library\nDESCRIPTION: Adds 'Q.promise(maker(resolve, reject))' to the Q promise library, providing a means to create promises within a callback. This shorthand allows exceptions thrown in the callback to be caught and converted into rejections, simplifying promise construction.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nQ.promise(maker(resolve, reject))`` to make a\n   promise inside a callback, such that thrown exceptions in the\n   callback are converted and the resolver and rejecter are arguments.\n```\n\n----------------------------------------\n\nTITLE: Initializing Color from Hex/CSS - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a color instance from a hex code or CSS color string using the chroma.hex() function, which is also aliased as chroma.css(). It supports hex codes, named colors, and CSS rgb() syntax.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.hex(\"#ff0000\");\nchroma.hex(\"red\");\nchroma.hex(\"rgb(255, 0, 0)\");\n```\n\n----------------------------------------\n\nTITLE: Analyzing Goal Conversion Data Row in XML\nDESCRIPTION: This XML snippet represents a row for tracking goals. It records the number of conversions (`nb_conversions`), visits converted (`nb_visits_converted`), and the revenue associated with a specific goal, identified by `idgoal`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_Referrers.getWebsites_exported.xml.txt#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<row idgoal='1'>\n\t\t\t\t<nb_conversions>1</nb_conversions>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<revenue>5</revenue>\n\t\t\t</row>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple JavaScript Trackers\nDESCRIPTION: Describes how to create multiple JavaScript trackers using `_paq.push(['addTracker', piwikUrl, piwikSiteId])` and that all tracking requests will then be sent to all added Piwik trackers.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_132\n\nLANGUAGE: JavaScript\nCODE:\n```\n * Multiple JavaScript trackers can now be created easily via `_paq.push(['addTracker', piwikUrl, piwikSiteId])`. All tracking requests will be then sent to all added Piwik trackers. [Learn more.](https://developer.matomo.org/guides/tracking-javascript-guide#multiple-piwik-trackers)\n```\n\n----------------------------------------\n\nTITLE: Getting Cross Domain Linking URL Parameter\nDESCRIPTION: Details the new JavaScript tracker method `getCrossDomainLinkingUrlParameter` that is added so you can add cross domain tracking capability to dynamically created links. See [https://matomo.org/faq/how-to/faq_23654/](https://matomo.org/faq/how-to/faq_23654/) for usage details.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_55\n\n\n\n----------------------------------------\n\nTITLE: Enhanced Cookie Support via JS Tracker\nDESCRIPTION: Details the new JavaScript tracker methods `setSessionCookie`, `getCookie`, `hasCookies`, `getCookieDomain`, `getCookiePath`, and `getSessionCookieTimeout` that have been added for better cookie support in plugins. These improve cookie management within the tracker.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_76\n\n\n\n----------------------------------------\n\nTITLE: Renaming node export to nbind Q promise library\nDESCRIPTION: Renames the 'node' export to 'nbind' within the Q promise library and adds 'napply' to complete the set.  'node' is marked as deprecated. These functions are related to adapting Node.js-style callbacks to work with promises.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnode`` export to ``nbind``, and added ``napply`` to\n   complete the set. ``node`` remains as deprecated.\n```\n\n----------------------------------------\n\nTITLE: Building tracker JS using console command - Bash\nDESCRIPTION: This command builds and minifies the Matomo JavaScript tracker. This command should be executed from the Matomo root directory with Development Mode enabled.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/js/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ ./console development:build-tracker-js\n```\n\n----------------------------------------\n\nTITLE: Configuring Widgets via Report::configureWidgets() in PHP\nDESCRIPTION: Introduces a new API to create multiple widgets for a report using the `Report::configureWidgets()` method and related classes. This allows for more flexible and customizable reporting interfaces within Matomo.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_116\n\nLANGUAGE: Text\nCODE:\n```\n* Multiple widgets for one report can now be created via the `Report::configureWidgets()` method via the new classes `Piwik\\Widget\\ReportWidgetFactory` and `Piwik\\Widget\\ReportWidgetConfig`\n```\n\n----------------------------------------\n\nTITLE: Changing Comparison Method in Resemble.js\nDESCRIPTION: This snippet shows how to modify the comparison method after the initial analysis. Specifically, it demonstrates how to ignore antialiasing using `diff.ignoreAntialiasing()`. The other commented-out options, `diff.ignoreNothing()` and `diff.ignoreColors()`, indicate other available comparison adjustments. These methods allow fine-tuning of the image comparison process.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/resemblejs/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// diff.ignoreNothing();\n// diff.ignoreColors();\ndiff.ignoreAntialiasing();\n```\n\n----------------------------------------\n\nTITLE: Waiting for all promises to settle with Q.allSettled\nDESCRIPTION: This code demonstrates the use of `Q.allSettled`, which takes an array of promises and returns a promise that resolves when all input promises have either fulfilled or rejected. The result is an array of objects, each containing the state ('fulfilled' or 'rejected') and the corresponding value or reason.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nQ.allSettled(promises)\n.then(function (results) {\n    results.forEach(function (result) {\n        if (result.state === \"fulfilled\") {\n            var value = result.value;\n        } else {\n            var reason = result.reason;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Page Visibility API is supported\nDESCRIPTION: This JavaScript code snippet checks if the Page Visibility API is supported using `Visibility.isSupported()`. If supported, it starts tracking visibility using the `Statistics.startTrackingVisibility()` function.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nif( Visibility.isSupported() ) {\n    Statistics.startTrackingVisibility();\n}\n```\n\n----------------------------------------\n\nTITLE: Using jQuery Mousewheel with Browserify (Client-Side)\nDESCRIPTION: This code snippet demonstrates how to use jQuery Mousewheel with Browserify in client-side JavaScript. It requires the `jquery-browserify` and `jquery-mousewheel` modules.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery-mousewheel/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar $ = require('jquery-browserify');\nrequire('jquery-mousewheel')($);\n```\n\n----------------------------------------\n\nTITLE: Setting API URL in Piwik tracker - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the API URL in the Piwik tracker to point to the root directory of Matomo. This is necessary for Page Overlay functionality to work correctly. The variable `u` is assumed to contain the URL of the Matomo installation.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/js/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n_paq.push(['setAPIUrl', u]);\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Tracked Page Views\nDESCRIPTION: Explains the new JavaScript tracker method `getNumTrackedPageViews` which has been added to retrieve the number of tracked page views within the currently loaded page or web application. This allows for tracking single-page app interactions.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_75\n\n\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Report Category Changes PHP\nDESCRIPTION: The method `Report::getCategory()` has been moved to `Report::getCategoryId()` and no longer returns the translated category but the translation key of the category. The property `Report::$category` has been renamed to `Report::$categoryId`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_96\n\nLANGUAGE: php\nCODE:\n```\nReport::getCategory()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::getCategoryId()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::$category\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::$categoryId\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker Methods for Cross-Domain Tracking\nDESCRIPTION: The JavaScript Tracker now supports CrossDomain tracking using the `enableCrossDomainLinking`, `disableCrossDomainLinking`, and `isCrossDomainLinkingEnabled` methods.  These functions are used to enable, disable, and check the status of cross-domain linking, respectively.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nenableCrossDomainLinking\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndisableCrossDomainLinking\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisCrossDomainLinkingEnabled\n```\n\n----------------------------------------\n\nTITLE: Removing Q function module.exports alias Q promise library\nDESCRIPTION: Removes the 'Q' function 'module.exports' alias for 'Q.ref' in the Q promise library. This change resolves conflicts that arose with 'Q.apply', preventing it from being called correctly.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nRemoved the ``Q`` function module.exports alias\n   for ``Q.ref``. It conflicts with ``Q.apply`` in weird\n   ways, making it uncallable.\n```\n\n----------------------------------------\n\nTITLE: Adding Q.begin() Q promise library\nDESCRIPTION: Adds 'Q.begin()' to the Q promise library, intended to initiate chains of '.then' calls.  This is designed to facilitate the reordering of these calls without requiring modification of the initial step in the chain.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nQ.begin()`` that is intended to kick off chains\n   of ``.then`` so that each of these can be reordered without having to\n   edit the new and former first step.\n```\n\n----------------------------------------\n\nTITLE: Long Stack Trace Example\nDESCRIPTION: Illustrates the effect of enabling long stack traces, showing a code snippet with a function throwing an error, and the resulting stack trace with and without long stack support enabled. This highlights the debugging benefits.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nfunction theDepthsOfMyProgram() {\n  Q.delay(100).done(function explode() {\n    throw new Error(\"boo!\");\n  });\n}\n\ntheDepthsOfMyProgram();\n```\n\n----------------------------------------\n\nTITLE: Customizing Tracker Files Inclusion\nDESCRIPTION: Explains the `CustomPiwikJs.shouldAddTrackerFile` event that has been added to let plugins customize which tracker files should be included in piwik.js JavaScript tracker. This allows for custom tracker builds.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Removing Custom Dimension via Console\nDESCRIPTION: This command removes a custom dimension and its log data.  `$scope` and `$index` need to be replaced with the correct values. The indexes can be retrieved using `./console customdimensions:info`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CustomDimensions/docs/faq.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./console customdimensions:remove-custom-dimension --scope=\\$scope --index=\\$index\n```\n\n----------------------------------------\n\nTITLE: Installing Materialize Beta via NPM\nDESCRIPTION: This command installs the beta version of the Materialize CSS package from NPM. It allows access to the latest features and updates before the stable release.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/@materializecss/materialize/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @materializecss/materialize@next\n```\n\n----------------------------------------\n\nTITLE: Wrapping XMLHttpRequest with Deferred for progress\nDESCRIPTION: This code demonstrates wrapping an `XMLHttpRequest` (XHR) in a promise using a deferred object. It handles the `onload`, `onerror`, and `onprogress` events of the XHR, resolving or rejecting the promise accordingly and providing progress notifications via `deferred.notify`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nfunction requestOkText(url) {\n    var request = new XMLHttpRequest();\n    var deferred = Q.defer();\n\n    request.open(\"GET\", url, true);\n    request.onload = onload;\n    request.onerror = onerror;\n    request.onprogress = onprogress;\n    request.send();\n\n    function onload() {\n        if (request.status === 200) {\n            deferred.resolve(request.responseText);\n        } else {\n            deferred.reject(new Error(\"Status code was \" + request.status));\n        }\n    }\n\n    function onerror() {\n        deferred.reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n    }\n\n    function onprogress(event) {\n        deferred.notify(event.loaded / event.total);\n    }\n\n    return deferred.promise;\n}\n```\n\n----------------------------------------\n\nTITLE: Propagating Promise Resolution or Rejection in JavaScript\nDESCRIPTION: This snippet shows how the `then` method returns a promise and how the resolution or rejection of the input promise propagates to the output promise. It demonstrates the use of `then` without a rejection handler, where rejections from the input promise are automatically forwarded.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar outputPromise = getInputPromise()\n.then(function (input) {\n}, function (reason) {\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Scale - JavaScript\nDESCRIPTION: This code demonstrates how to create a color scale function using chroma.scale() with an array of colors. The scale function returns a color based on the input value (0 to 1).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = chroma.scale(['lightyellow', 'navy']);\nscale(0.5);  // #7F7FB0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale('RdYlBu');\n```\n\n----------------------------------------\n\nTITLE: Q.invoke Shorthand Example\nDESCRIPTION: Demonstrates using Q.invoke as a shorthand for wrapping a potentially non-Q promise and calling a method on an object.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.invoke($, 'ajax', ...)\n.then(function () {\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Q.bind transformation Q promise library\nDESCRIPTION: Adds 'Q.bind' to the Q promise library as a method to transform functions that either return or throw values into promise-returning functions. It enables the integration of synchronous functions with promise-based asynchronous workflows.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nQ.bind`` as a method to transform functions that\n   return and throw into promise-returning functions.\n```\n\n----------------------------------------\n\nTITLE: Transform Setting Value with Filter (PHP)\nDESCRIPTION: Demonstrates how to use a filter to transform a setting value, such as sanitizing input to prevent XSS vulnerabilities. It utilizes an anonymous function to call the `Common::sanitizeInputValue` method.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_143\n\nLANGUAGE: php\nCODE:\n```\n$setting->transform = function ($value) { return Common::sanitizeInputValue($value); }\n```\n\n----------------------------------------\n\nTITLE: Chaining Promises Outside Handlers in JavaScript\nDESCRIPTION: This example shows how to chain promises outside handlers by calling `.then` on the result of a previous `.then` call. This is an alternative approach to the nested chaining demonstrated above.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nreturn getUsername()\n.then(function (username) {\n    return getUser(username);\n})\n.then(function (user) {\n    // if we get here without an error,\n    // the value returned here\n    // or the exception thrown here\n    // resolves the promise returned\n    // by the first line\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Dimensions via Dimension.filterDimension Event in PHP\nDESCRIPTION: Introduces a new event, `Dimension.filterDimension`, to allow developers to filter dimensions in Matomo. This provides more control over the dimensions used in reports and data analysis.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_121\n\nLANGUAGE: Text\nCODE:\n```\n* `Dimension.filterDimension` lets you filter any dimensions\n```\n\n----------------------------------------\n\nTITLE: Filtering Visualizations via ViewDataTable.filterViewDataTable Event in PHP\nDESCRIPTION: Introduces a new event `ViewDataTable.filterViewDataTable` that enables filtering of available visualizations. This customization allows users to tailor the data presentation to their specific needs.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_127\n\nLANGUAGE: Text\nCODE:\n```\n* `ViewDataTable.filterViewDataTable` lets you filter available visualizations\n```\n\n----------------------------------------\n\nTITLE: Intercepting API Requests\nDESCRIPTION: Explains the `API.Request.intercept` event which allows plugins to intercept API requests to perform custom logic, overriding the original API method. This is a powerful tool for modifying core API behavior.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_52\n\n\n\n----------------------------------------\n\nTITLE: Adding Custom Action Types\nDESCRIPTION: Explains the `Actions.addActionTypes` event that has been added to allow plugins to add their custom action types. This allows for tracking new kinds of user activity.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_50\n\n\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Dashboard Widget Handling PHP\nDESCRIPTION: In the HTTP API methods `Dashboard.getDefaultDashboard` and `Dashboard.getUserDashboards`, not existing widgets are no longer removed as it is up to the client which widgets actually exist.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_99\n\nLANGUAGE: php\nCODE:\n```\nDashboard.getDefaultDashboard\n```\n\nLANGUAGE: php\nCODE:\n```\nDashboard.getUserDashboards\n```\n\n----------------------------------------\n\nTITLE: Enabling Q Long Stack Support\nDESCRIPTION: Explains how to enable long stack traces in Q for improved debugging of asynchronous operations, highlighting both programmatic and environment variable approaches.  Also mentions the potential performance impact.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nQ.longStackSupport = true;\n```\n\n----------------------------------------\n\nTITLE: Executing code when the page becomes visible\nDESCRIPTION: This JavaScript code snippet demonstrates how to use `Visibility.onVisible` to execute a function `startIntroAnimation()` only when the page becomes visible. This ensures that the animation starts only when the user switches to the tab.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nVisibility.onVisible(function () {\n    startIntroAnimation();\n});\n```\n\n----------------------------------------\n\nTITLE: Including Mousetrap via npm\nDESCRIPTION: This snippet demonstrates how to include the Mousetrap library in a JavaScript project using npm and the `require` function.  It assumes that Mousetrap has been installed using `npm install mousetrap`.  The `Mousetrap` variable will then contain the library's functionality.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Mousetrap = require('mousetrap');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker API: enableFileTracking\nDESCRIPTION: Introduces the `enableFileTracking` method in the JavaScript tracker to allow tracking of the `file://` protocol. This needs to be explicitly enabled as by default the protocol is no longer tracked.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nBy default, the `file://` protocol is no longer tracked. To enable tracking of the `file://` protocol use the new JavaScript tracker method `enableFileTracking` ([learn more](https://matomo.org/faq/how-to/why-is-no-data-tracked-for-local-files/)).\n```\n\n----------------------------------------\n\nTITLE: Using 'fail' Shorthand for Error Handling in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the `fail` shorthand for `then` when you are only interested in handling the error.  It is equivalent to using `then(null, function (error) { ... });`\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar outputPromise = getInputPromise()\n.fail(function (error) {\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Value - JavaScript\nDESCRIPTION: This code demonstrates how to set the alpha value of a color using the color.alpha() method. It shows how to modify an existing color object and retrieve the updated CSS color string.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar red = chroma('red');\nred.alpha(0.5);\nred.css();  // rgba(255,0,0,0.5);\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Color Scales with Chroma.js\nDESCRIPTION: This snippet demonstrates how to create a logarithmic color scale with chroma.scale() and domain(). It maps the input values to the color scale using a logarithmic scale.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale(['lightyellow', 'navy']).domain([1, 100000], 7, 'log');\n```\n\n----------------------------------------\n\nTITLE: Progress Callback Shorthand with .progress\nDESCRIPTION: This code illustrates the shorthand `.progress` method to listen for progress updates from a promise. The `uploadFile` function is assumed to return a promise that provides progress updates. The `.progress` method is a convenient way to attach a callback specifically for progress notifications.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nreturn uploadFile().progress(function (progress) {\n    // We get notified of the upload's progress\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Materialize via NPM\nDESCRIPTION: This command installs the Materialize CSS package from NPM (Node Package Manager). It adds Materialize as a dependency to your project, allowing you to use its CSS and JavaScript components.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/@materializecss/materialize/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @materializecss/materialize\n```\n\n----------------------------------------\n\nTITLE: UI Test Config Override\nDESCRIPTION: Shows how to override configuration settings within UI tests. The `overrideConfig` method allows adding new values to existing configuration arrays, avoiding overwriting the existing settings.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_140\n\nLANGUAGE: JavaScript\nCODE:\n```\ntestEnvironment.overrideConfig('group', 'name', '1')\n```\n\n----------------------------------------\n\nTITLE: Widget Iframe Output Customization\nDESCRIPTION: Explains the `Widgetize.shouldEmbedIframeEmpty` event added so plugins can optionally define the output of the widgetized HTML themselves. This offers more control over widget rendering.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_58\n\n\n\n----------------------------------------\n\nTITLE: Darkening a Color - JavaScript\nDESCRIPTION: This snippet shows how to darken a color using the color.darken() method. It decreases the lightness of the color in Lab color space and returns the hex code of the modified color.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('red').darken().hex()  // #BC0000\n```\n\n----------------------------------------\n\nTITLE: Adding/Filtering Visitor Details\nDESCRIPTION: Details the new events added to add and filter visitor details: `Live.addVisitorDetails` and `Live.filterVisitorDetails`. These events allow plugins to extend or modify the information displayed in visitor profiles.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: MenuAdmin::addSettingsItem() Removed PHP\nDESCRIPTION: The method `Piwik\\Menu\\MenuAdmin::addSettingsItem()` was removed; use `Piwik\\Menu\\MenuAdmin::addSystemItem()` instead. A new method `Piwik\\Menu\\MenuAdmin::addMeasurablesItem()` was added.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_107\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuAdmin::addSettingsItem()\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuAdmin::addSystemItem()\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuAdmin::addMeasurablesItem()\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Deprecated ViewDataTable and Login Events Removed PHP\nDESCRIPTION: The following deprecated events have been removed as mentioned:\n`ViewDataTable.addViewDataTable`, `ViewDataTable.getDefaultType`, `Login.authenticate`, `Login.initSession.end`, `Login.authenticate.successful`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_113\n\nLANGUAGE: php\nCODE:\n```\nViewDataTable.addViewDataTable\n```\n\nLANGUAGE: php\nCODE:\n```\nViewDataTable.getDefaultType\n```\n\nLANGUAGE: php\nCODE:\n```\nLogin.authenticate\n```\n\nLANGUAGE: php\nCODE:\n```\nLogin.initSession.end\n```\n\nLANGUAGE: php\nCODE:\n```\nLogin.authenticate.successful\n```\n\n----------------------------------------\n\nTITLE: CLI: Setting INI Config Options\nDESCRIPTION: Shows the usage of the `config:set` command for setting INI configuration options directly from the command line. This facilitates automation and simplifies configuration management.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_137\n\nLANGUAGE: Shell\nCODE:\n```\nconfig:set\n```\n\n----------------------------------------\n\nTITLE: Adding return for async generators Q promise library\nDESCRIPTION: Adds 'return' for async generators in the Q promise library, enabling generator functions to return values asynchronously. This functionality depends on the implementation of generators within the environment.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn`` for async generators, where generators\n   are implemented.\n```\n\n----------------------------------------\n\nTITLE: Minifying piwik.js with YUICompressor - Bash\nDESCRIPTION: This series of commands minifies the `piwik.js` file using YUICompressor.  It first removes DEBUG sections, replaces `eval` with a placeholder, compresses the code, and then restores `eval`. It also copies the minified file to `piwik.js` and `matomo.js` in the parent directory. Requires `sed`, `java`, and `cp`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/js/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd /path/to/piwik/js/\n$ sed '/<DEBUG>/,/</DEBUG>/d' < piwik.js | sed 's/eval/replacedEvilString/' | java -jar yuicompressor-2.4.8.jar --type js --line-break 1000 | sed 's/replacedEvilString/eval/' | sed 's/^[/][*]//*!/' > piwik.min.js && cp piwik.min.js ../piwik.js && cp piwik.min.js ../matomo.js\n```\n\n----------------------------------------\n\nTITLE: QRCode.js Method Usage JavaScript\nDESCRIPTION: This snippet showcases the use of the `clear()` and `makeCode()` methods provided by the QRCode.js library. `clear()` removes the existing QR code, and `makeCode()` generates a new QR code with the provided text. This allows for dynamic updates of the QR code content.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/qrcodejs2/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nqrcode.clear(); // clear the code.\nqrcode.makeCode(\"http://naver.com\"); // make another code.\n```\n\n----------------------------------------\n\nTITLE: Omitting Fulfillment Handler in JavaScript\nDESCRIPTION: This snippet demonstrates the omission of the fulfillment handler in the `then` method. If the input promise gets fulfilled, the value will go to `outputPromise`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar outputPromise = getInputPromise()\n.then(null, function (error) {\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking API Requests with Consent Parameter\nDESCRIPTION: Details that Tracking API requests now include `&consent=1` in the Tracking API URL when consent has been given by a user. This ensures compliance with privacy regulations.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Adding isFulfilled, isRejected, isResolved Q promise library\nDESCRIPTION: Adds 'isFulfilled', 'isRejected', and 'isResolved' to the promise prototype in the Q promise library. These methods enable checking the state of a promise, determining whether it is fulfilled, rejected, or resolved.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nisFulfilled``, ``isRejected``, and ``isResolved``\n   to the promise prototype.\n```\n\n----------------------------------------\n\nTITLE: Defining jQuery in AMD Modules\nDESCRIPTION: This example shows how to define jQuery as an AMD module using the `define()` function.  This pattern is typically used with module loaders like RequireJS. The function passed to `define` receives jQuery as the `$` parameter.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefine( [ \"jquery\" ], function( $ ) {\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding and Filtering Visitor Details\nDESCRIPTION: Details the new events added to add and filter visitor details: `Live.addProfileSummaries` and `Live.filterProfileSummaries`. These allow for extending the visitor profile information.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: Registering Keyboard Shortcuts via JS\nDESCRIPTION: Explains the new JavaScript method `piwikHelper.registerShortcut` that allows plugins to bind keyboard shortcuts. A summary for available shortcuts is shown by pressing `?`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_60\n\n\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Deprecated Tracker Events Removed PHP\nDESCRIPTION: The following deprecated events have been removed as mentioned:\n`Tracker.existingVisitInformation`, `Tracker.newVisitorInformation`, `Tracker.recordAction`, `Tracker.recordEcommerceGoal`, `Tracker.recordStandardGoals`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_111\n\nLANGUAGE: php\nCODE:\n```\nTracker.existingVisitInformation\n```\n\nLANGUAGE: php\nCODE:\n```\nTracker.newVisitorInformation\n```\n\nLANGUAGE: php\nCODE:\n```\nTracker.recordAction\n```\n\nLANGUAGE: php\nCODE:\n```\nTracker.recordEcommerceGoal\n```\n\nLANGUAGE: php\nCODE:\n```\nTracker.recordStandardGoals\n```\n\n----------------------------------------\n\nTITLE: Dashboard API Extensions\nDESCRIPTION: Describes the extensions to the Dashboard API including the methods `copyDashboardToUser`, `createNewDashboardForUser`, `removeDashboard` and `resetDashboardLayout`. This provides more automation control of dashboards.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_51\n\n\n\n----------------------------------------\n\nTITLE: Running documentation setup\nDESCRIPTION: These commands clone the repository, navigate to the project directory, and install the necessary dependencies for running the documentation locally. It requires Node.js and NPM installed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/@materializecss/materialize/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/materializecss/materialize\ncd materialize\nnpm install\n```\n\n----------------------------------------\n\nTITLE: New PHP Event: Login.userRequiresPasswordConfirmation\nDESCRIPTION: Explains the addition of the `Login.userRequiresPasswordConfirmation` event, allowing plugins to circumvent password confirmation in the UI and for certain API methods.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nLogin.userRequiresPasswordConfirmation\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for Long Stacks\nDESCRIPTION: Shows how to enable Q's long stack support using the Q_DEBUG environment variable. This allows enabling it across multiple Q instances.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nQ_DEBUG=1 node server.js\n```\n\n----------------------------------------\n\nTITLE: Changing the default settings of jQuery.scrollTo\nDESCRIPTION: This JavaScript code demonstrates how to change the default settings of the jQuery.scrollTo plugin using `$.extend`.  Here, the default `axis` and `duration` are overridden.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n$.extend($.scrollTo.defaults, {\n  axis: 'y',\n  duration: 800\n});\n```\n\n----------------------------------------\n\nTITLE: scrollTo basic usage in jQuery\nDESCRIPTION: This JavaScript code demonstrates the basic usage of the jQuery.scrollTo plugin. It scrolls the element specified by `$(element)` to the target location, with optional duration and settings.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n$(element).scrollTo(target[,duration][,settings]);\n```\n\n----------------------------------------\n\nTITLE: Omitting Rejection Handler in JavaScript\nDESCRIPTION: This snippet demonstrates the omission of the rejection handler in the `then` method. If the input promise gets rejected, the error will go to `outputPromise`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar outputPromise = getInputPromise()\n.then(function (value) {\n});\n```\n\n----------------------------------------\n\nTITLE: Including Mousetrap and a plugin in HTML\nDESCRIPTION: This snippet shows how to include Mousetrap and a plugin (mousetrap-record.js) in an HTML file.  First the core mousetrap.js file is included, followed by the specific plugin file. This allows the plugin's functionality to be available for use.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"mousetrap.js\"></script>\n<script src=\"mousetrap-record.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Operations with Callbacks in JavaScript\nDESCRIPTION: This code snippet demonstrates how asynchronous operations are typically handled using callbacks, leading to the 'Pyramid of Doom' issue.  It shows nested callbacks for sequential asynchronous steps.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Login Controller Visibility Changed PHP\nDESCRIPTION: The visibility of private properties and methods in `Piwik\\Plugins\\Login\\Controller` were changed to `protected`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_102\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugins\\Login\\Controller\n```\n\n----------------------------------------\n\nTITLE: Compiling Documentation\nDESCRIPTION: This command compiles the documentation using the build tools configured in the `package.json` file.  It is typically used after setting up the documentation locally.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/@materializecss/materialize/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics via Event\nDESCRIPTION: Explains the `Metric.filterMetrics` event, triggered to filter metrics. This allows plugins to modify the available metrics.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Brightening a Color - JavaScript\nDESCRIPTION: This code demonstrates how to brighten a color using the color.brighten() method and retrieves its hex code.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('red').brighten().hex()  // #FF603B\n```\n\n----------------------------------------\n\nTITLE: Installing jquery.scrollTo using composer\nDESCRIPTION: This command installs the jquery.scrollTo plugin using composer, a PHP dependency manager. Composer needs to be installed and configured for this command to work.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp composer.phar require --prefer-dist flesler/jquery.scrollto \"*\"\n```\n\n----------------------------------------\n\nTITLE: Saturating a Color - JavaScript\nDESCRIPTION: This snippet demonstrates how to increase the saturation of a color using the color.saturate() method, and then retrieves the resulting hex code.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('#eecc99').saturate().hex() // #fcc973\n```\n\n----------------------------------------\n\nTITLE: Retrieving Colors from a Color Scale - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the colors generated by a color scale with a distinct number of classes using scale.colors().\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale('RdYlGn').domain([0,1], 5).colors()\n// returns ['#a50026', '#f88d52', '#ffffbf', '#86cb66', '#006837']\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation with Chroma.js\nDESCRIPTION: This snippet demonstrates how to initialize a color using chroma(), darken it, and then convert it to its hexadecimal representation. It showcases basic color manipulation using the Chroma.js library.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('#D4F880').darken().hex();  // #9BC04B\n```\n\n----------------------------------------\n\nTITLE: Changing Color Range of a Scale - JavaScript\nDESCRIPTION: This code demonstrates how to change the color range of an existing color scale using scale.range().\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale().range(['lightyellow', 'navy']);\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Function in JavaScript\nDESCRIPTION: This code demonstrates a simple generator function that yields an incrementing counter. The `count` function uses `yield` to pause and resume execution, providing a new value each time `next()` is called. This showcases the basic functionality of ES6 generators.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/examples/async-generators/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* count() {\n    var i = 0;\n    while (true) {\n        yield i++;\n    }\n}\n\nvar counter = count();\ncounter.next().value === 0;\ncounter.next().value === 1;\ncounter.next().value === 2;\n```\n\n----------------------------------------\n\nTITLE: Detecting Root API Requests\nDESCRIPTION: Explains the addition of the `Piwik\\API\\Request::isRootRequestApiRequest()` method to detect if the root request is an API request within Matomo.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Checking for Segment Archiving via Piwik\\Segment::willBeArchived in PHP\nDESCRIPTION: Introduces a new method, `Piwik\\Segment::willBeArchived`, that allows developers to detect whether a segment will be archived or not. This feature enables better management of segment data within Matomo.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_125\n\nLANGUAGE: Text\nCODE:\n```\n* The new method `Piwik\\Segment::willBeArchived` lets you detect whether a segment will be archived or not.\n```\n\n----------------------------------------\n\nTITLE: Adding node and ncall Q promise library\nDESCRIPTION: Adds 'node' and 'ncall' to the Q promise library, both with the signature '(fun, thisp_opt, ...args)'.  'node' is a decorator, while 'ncall' calls immediately.  'node' optionally binds and partially applies, while 'ncall' can bind and pass arguments.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nnode`` and ``ncall``, both with the signature\n   ``(fun, thisp_opt, ...args)``.  The former is a decorator\n   and the latter calls immediately.  ``node`` optional\n   binds and partially applies.  ``ncall`` can bind and pass\n   arguments.\n```\n\n----------------------------------------\n\nTITLE: Fallback Archiving Command for Matomo (archive.php)\nDESCRIPTION: This command is a fallback for triggering Matomo archiving when console access is unavailable. It executes the archive.php script with the URL of the Matomo instance as a parameter.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CoreConsole/tests/System/expected/test_ArchiveCronTest_archive_php_cron_output.txt#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp archive.php --url=http://your.piwik/path\n```\n\n----------------------------------------\n\nTITLE: Hiding Export Icons in Reports\nDESCRIPTION: Explains that reports and visualizations can now hide the export icons with a new property `$view->config->show_export`. This allows for customization of report display.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Deprecated API and Menu Events Removed PHP\nDESCRIPTION: The following deprecated events have been removed as mentioned:\n`API.getSegmentDimensionMetadata`, `Menu.Admin.addItems`, `Menu.Reporting.addItems`, `Menu.Top.addItems`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_112\n\nLANGUAGE: php\nCODE:\n```\nAPI.getSegmentDimensionMetadata\n```\n\nLANGUAGE: php\nCODE:\n```\nMenu.Admin.addItems\n```\n\nLANGUAGE: php\nCODE:\n```\nMenu.Reporting.addItems\n```\n\nLANGUAGE: php\nCODE:\n```\nMenu.Top.addItems\n```\n\n----------------------------------------\n\nTITLE: Installing Visibility.js using NPM\nDESCRIPTION: This shell command installs the `visibilityjs` package using npm and saves it as a project dependency.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save visibilityjs\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Core Plugin Console Command Replaced PHP\nDESCRIPTION: The `core:plugin` console command has been removed in favor of the new `plugin:list`, `plugin:activate`, and `plugin:deactivate` commands.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_101\n\nLANGUAGE: php\nCODE:\n```\ncore:plugin\n```\n\nLANGUAGE: php\nCODE:\n```\nplugin:list\n```\n\nLANGUAGE: php\nCODE:\n```\nplugin:activate\n```\n\nLANGUAGE: php\nCODE:\n```\nplugin:deactivate\n```\n\n----------------------------------------\n\nTITLE: HTML Button for Recording\nDESCRIPTION: This HTML snippet creates a button that, when clicked, triggers the `recordSequence` function, which initiates the Mousetrap recording process. It requires the Mousetrap library to be included in the HTML.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/record/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button onclick=\"recordSequence()\">Record</button>\n```\n\n----------------------------------------\n\nTITLE: Using onAfter and requestAnimationFrame with scrollTo\nDESCRIPTION: This JavaScript code demonstrates how to use the `onAfter` callback with `requestAnimationFrame` to ensure the callback executes after the animation and before the `scroll` event.  A polyfill might be necessary for older browsers.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n$.scrollTo(100, {\n  onAfter: function() {\n    requestAnimationFrame(function() {\n        $(\".result\").addClass(\"selected\");\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deferred Reject Shorthand\nDESCRIPTION: This snippet shows that using `deferred.reject(new Error(\"Can't do it\"))` is the equivalent of resolving with a rejected promise created using `Q.fcall`. Both methods result in a promise that is rejected with the specified error.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// this:\ndeferred.reject(new Error(\"Can't do it\"));\n\n// is shorthand for:\nvar rejection = Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\ndeferred.resolve(rejection);\n```\n\n----------------------------------------\n\nTITLE: Matomo Outlink Tracking URL Example\nDESCRIPTION: This example demonstrates Matomo tracking URLs for recording outlink clicks. The `link` parameter specifies the URL of the external link, `idsite` specifies the site ID, `rand` is a random number for cache busting, and `redirect` controls redirection.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/resources/test-download-outlink-page.txt#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nmatomo.php?idsite=1&link=http%3A//www.example.org2/subcategory/subpage/&rand=0.10591157392713457&redirect=0\n```\n\nLANGUAGE: URL\nCODE:\n```\nmatomo.php?idsite=1&link=http%3A//example.org/subcategory/latest.zip/test/&rand=0.10591157392713457&redirect=0\n```\n\nLANGUAGE: URL\nCODE:\n```\nmatomo.php?idsite=1&link=mailto%3Atest@test.com&rand=0.15968200434074042&redirect=0\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: User Menu Replaced with Admin Menu PHP\nDESCRIPTION: The \"User Menu\" was removed and should be replaced by \"Admin Menu\". Change `configureUserMenu(MenuUser $menu)` to `configureAdminMenu(MenuAdmin $menu)` in your `Menu.php`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_105\n\nLANGUAGE: php\nCODE:\n```\nconfigureUserMenu(MenuUser $menu)\n```\n\nLANGUAGE: php\nCODE:\n```\nconfigureAdminMenu(MenuAdmin $menu)\n```\n\n----------------------------------------\n\nTITLE: Unbinding a Visibility.change listener\nDESCRIPTION: This JavaScript code snippet demonstrates how to unbind a listener added with `Visibility.change()`.  It first sets up a listener which pauses a `VideoPlayer` when the page becomes hidden. Then it calls `Visibility.unbind()` inside the `VideoPlayer.onFinish()` callback to remove the listener after the video finishes playing, preventing further pause calls. The listener ID is stored in the `listener` variable.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar listener = Visibility.change(function (e, state) {\n    if ( !Visibility.hidden() ) {\n       VideoPlayer.pause();\n    }\n});\n\nVideoPlayer.onFinish(function () {\n    Visibility.unbind(listener);\n});\n```\n\n----------------------------------------\n\nTITLE: Command: core:reset-invalidations\nDESCRIPTION: Introduces the `core:reset-invalidations` command, allowing administrators to reset stuck invalidations that are incorrectly marked as \"in progress.\" This helps resolve issues with data processing.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNew command `core:reset-invalidations` allows administrators to reset stuck invalidations that are incorrectly marked as \"in progress\".\n```\n\n----------------------------------------\n\nTITLE: Q.when Static Method Usage\nDESCRIPTION: Demonstrates using Q.when, the static equivalent of then, to handle a value or promise and execute a callback function based on the outcome (resolve or reject).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.when(valueOrPromise, function (value) {\n}, function (error) {\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jquery.scrollTo using bower\nDESCRIPTION: This command installs the jquery.scrollTo plugin using the bower package manager. Bower needs to be installed and configured for this command to work.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbower install jquery.scrollTo\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Settings Classes Split PHP\nDESCRIPTION: The class `Piwik\\Plugin\\Settings` has been split to `Piwik\\Settings\\Plugin\\SystemSettings` and `Piwik\\Settings\\Plugin\\UserSettings`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_108\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Settings\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Settings\\Plugin\\SystemSettings\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Settings\\Plugin\\UserSettings\n```\n\n----------------------------------------\n\nTITLE: Updated Command Parameter: Concurrent Archivers\nDESCRIPTION: Documents the change in the default maximum number of archiver processes and the use of the `--concurrent-archivers` parameter to adjust this limit.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_11\n\nLANGUAGE: INI\nCODE:\n```\n--concurrent-archivers\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Display in Resemble.js\nDESCRIPTION: This snippet demonstrates how to customize the output display style of the image comparison results. It uses `resemble.outputSettings` to configure the error color, error type, and transparency.  The example shows setting an error color with red and blue components and setting the transparency to 0.3. This allows users to tailor the visual output of the comparison to their specific needs.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/resemblejs/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nresemble.outputSettings({\n  errorColor: {\n    red: 255,\n    green: 0,\n    blue: 255\n  },\n  errorType: 'movement',\n  transparency: 0.3\n});\n// resembleControl.repaint();\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery Mousewheel with npm\nDESCRIPTION: These commands install the jQuery Mousewheel and jQuery Browserify packages using npm. These are required for using the plugin with Browserify.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery-mousewheel/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install jquery-mousewheel\nnpm install jquery-browserify\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Case-Sensitive Controller Actions PHP\nDESCRIPTION: Controller actions are now case sensitive. This means the URL and events must use the same case as the name of the action defined in a controller.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_103\n\n\n\n----------------------------------------\n\nTITLE: Console Archiving Help Command for Matomo\nDESCRIPTION: This command displays help information for the Matomo archiving process via the console. It specifies the path to the PHP executable, the Matomo console script, and the core:archive command with the --help flag.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CoreConsole/tests/System/expected/test_ArchiveCronTest_archive_php_cron_output.txt#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/path/to/php /home/travis/build/matomo-org/matomo/tests/PHPUnit/proxy/../../..//console core:archive --help\n```\n\n----------------------------------------\n\nTITLE: New Config Setting: enable_default_location_provider (INI)\nDESCRIPTION: Documents the addition of `enable_default_location_provider` in `Tracker` section. This option to disable the default location provider.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_19\n\nLANGUAGE: INI\nCODE:\n```\nenable_default_location_provider\n```\n\n----------------------------------------\n\nTITLE: Executing Single Migration via Piwik\\Updater::executeMigration in PHP\nDESCRIPTION: Introduces the `Piwik\\Updater::executeMigration` method, enabling the execution of a single migration. This provides more granular control over the update process in Matomo.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_126\n\nLANGUAGE: Text\nCODE:\n```\n* The new method `Piwik\\Updater::executeMigration` lets you execute a single migration.\n```\n\n----------------------------------------\n\nTITLE: CLI: Core Archive Command with PHP Options\nDESCRIPTION: Illustrates how to pass PHP CLI options to the `core:archive` command.  This allows customizing the PHP environment for the archiving process, such as setting the memory limit.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_136\n\nLANGUAGE: Shell\nCODE:\n```\n./console core:archive --php-cli-options=\"-d memory_limit=8G\"\n```\n\n----------------------------------------\n\nTITLE: Installing jquery.scrollTo using npm\nDESCRIPTION: This command installs the jquery.scrollTo plugin using the npm package manager. Node.js and npm need to be installed and configured for this command to work.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jquery.scrollto\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Menu::configureReportingMenu() Removed PHP\nDESCRIPTION: The method `Piwik\\Plugin\\Menu::configureReportingMenu` has been removed. To add something to the reporting menu, you need to create widgets.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_94\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Menu::configureReportingMenu\n```\n\n----------------------------------------\n\nTITLE: Correcting Lightness of a Color Scale - JavaScript\nDESCRIPTION: This code shows how to apply lightness correction to a color scale using scale.correctLightness(). This ensures a more perceptually uniform scale.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.scale(['lightyellow', 'navy']).correctLightness(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Matomo for XSS Referer Test\nDESCRIPTION: This snippet shows the configuration settings required in the `config.ini.php` file to enable detailed visitor tracking and disable unique visitor detection based on settings, which are necessary for the XSS referer test. Setting `always_archive_data` to 1 ensures that data is processed immediately for testing.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/resources/referer-xss.txt#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Tracker]\nvisit_standard_length = 1\nenable_detect_unique_visitor_using_settings = 0\n\n[Debug]\nalways_archive_data = 1\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format of a Color Scale - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a color scale to return colors in a specific format (e.g., hex) using scale.out().\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nscale = chroma.scale(['lightyellow', 'navy']).out('hex');\nscale(0.5);  // \"#7F7FB0\"\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies\nDESCRIPTION: This shell command installs all the npm dependencies listed in the project's `package.json` file.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Menu Classes Removed PHP\nDESCRIPTION: The menu classes `Piwik\\Menu\\MenuReporting` and `Piwik\\Menu\\MenuMain` have been removed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_90\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuReporting\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuMain\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker API: Referrer Exclusion\nDESCRIPTION: Documents the `setExcludedReferrers` and `getExcludedReferrers` methods for the JavaScript tracker, allowing setting and receiving referrers to ignore.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetExcludedReferrers\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetExcludedReferrers\n```\n\n----------------------------------------\n\nTITLE: Configuration: Trusted hosts\nDESCRIPTION: This snippet shows how to configure trusted hosts in the `config.ini.php` file. Allows redirects to trusted hosts with automatic logins.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_26\n\nLANGUAGE: INI\nCODE:\n```\ntrusted_hosts[] = \"example.com\"\n```\n\n----------------------------------------\n\nTITLE: SMS Provider Credential Fields Configuration PHP\nDESCRIPTION: SMS providers can define their credential fields by overwriting the `getCredentialFields()` method. This enables SMS providers to require more than just an API key. The `setSMSAPICredential()` method now accepts an array of credentials instead of a single API key.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_79\n\nLANGUAGE: php\nCODE:\n```\ngetCredentialFields()\n```\n\nLANGUAGE: php\nCODE:\n```\nsetSMSAPICredential()\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Controller::getEvolutionHtml Removed PHP\nDESCRIPTION: The method `Piwik\\Plugin\\Controller::getEvolutionHtml` has been removed without a replacement, as the evolution is generated by ViewDataTables directly.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_100\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Controller::getEvolutionHtml\n```\n\n----------------------------------------\n\nTITLE: Unpausing Mousetrap Events in JavaScript\nDESCRIPTION: This code snippet demonstrates how to unpause Mousetrap events, allowing keyboard shortcuts to fire again. It requires the Mousetrap library to be included in the project and assumes that Mousetrap was previously paused.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/pause/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// allow Mousetrap events to fire again\nMousetrap.unpause();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Referrer Data Row in XML\nDESCRIPTION: This XML snippet represents a single row of data for a referrer website. It includes key metrics like the referrer's label (website address), number of visits (`nb_visits`), actions (`nb_actions`), conversions (`nb_conversions`), and revenue.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_Referrers.getWebsites_exported.xml.txt#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<row>\n\t\t\t\t<label>http://www.external.com.vn/referrerPage-counted.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>722</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Materialize repository\nDESCRIPTION: This command clones the Materialize repository from GitHub to your local machine. It allows you to access the source code and contribute to the project.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/@materializecss/materialize/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/materializecss/materialize.git\n```\n\n----------------------------------------\n\nTITLE: Deprecated API Usage: Common::getRequestVar (PHP)\nDESCRIPTION: Documents the deprecation of the `Common::getRequestVar` method, noting its replacement with `Piwik\\Request` and the need for manual sanitization/escaping.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nCommon::getRequestVar\n```\n\nLANGUAGE: PHP\nCODE:\n```\nPiwik\\Request\n```\n\n----------------------------------------\n\nTITLE: Nested Named Arguments with sprintf\nDESCRIPTION: This example shows how to access nested properties within objects passed to the sprintf function using named arguments. It demonstrates accessing properties within an array of objects.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n    {name: 'Dolly'},\n    {name: 'Molly'},\n    {name: 'Polly'},\n]\nsprintf('Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s', {users: users})\n```\n\n----------------------------------------\n\nTITLE: Adding ref().spread Q promise library\nDESCRIPTION: Adds 'ref().spread(cb(...args))' to the Q promise library, which is a variant of 'then' that spreads an array across multiple arguments. This is designed to be useful in conjunction with 'all()'.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nref().spread(cb(...args))``, a variant of\n   ``then`` that spreads an array across multiple arguments.\n   Useful with ``all()``.\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: MenuAbstract::add() Removed PHP\nDESCRIPTION: The method `Piwik\\Menu\\MenuAbstract::add()` has been removed; use `Piwik\\Menu\\MenuAbstract::addItem()` instead.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_106\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuAbstract::add()\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Menu\\MenuAbstract::addItem()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This snippet shows the command used to run the Mousetrap unit tests using npm. It executes the `test` script defined in the project's `package.json` file, which typically invokes a test runner like Mocha. This command verifies the functionality of the Mousetrap library.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Image Analysis with Resemble.js\nDESCRIPTION: This snippet demonstrates how to retrieve basic analysis data on an image using Resemble.js. It takes file data as input and uses the `onComplete` callback to access the analysis results, which include red, green, blue, and brightness values. This example shows the basic usage pattern of Resemble.js for image analysis.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/resemblejs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar api = resemble(fileData).onComplete(function(data){\n\tconsole.log(data);\n\t/*\n\t{\n\t  red: 255,\n\t  green: 255,\n\t  blue: 255,\n\t  brightness: 255\n\t}\n\t*/\n});\n```\n\n----------------------------------------\n\nTITLE: Tracker: New Conversion Information Event Parameter PHP\nDESCRIPTION: The event `Tracker.newConversionInformation` now posts a new fourth parameter `$action`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_86\n\nLANGUAGE: php\nCODE:\n```\nTracker.newConversionInformation\n```\n\n----------------------------------------\n\nTITLE: Argument Swapping with sprintf\nDESCRIPTION: This example demonstrates how to use argument swapping within the sprintf function. The placeholders can be reordered using the `n$` notation, where `n` is the index of the argument.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf('%2$s %3$s a %1$s', 'cracker', 'Polly', 'wants')\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tracker: Get Link Tracking Timer\nDESCRIPTION: Added JavaScript Tracker method `getLinkTrackingTimer` to get the value of the configured link tracking time.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\ngetLinkTrackingTimer\n```\n\n----------------------------------------\n\nTITLE: Releasing a new version\nDESCRIPTION: This command runs the release script defined in `package.json`. It's used to build and publish new versions of the Materialize library, specifying the old and new versions.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/@materializecss/materialize/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run release -- --oldver=<current_version> --newver=<new_version>\n```\n\n----------------------------------------\n\nTITLE: Adding nfcall, nfapply, nfbind for Q promise library\nDESCRIPTION: Introduces 'nfcall', 'nfapply', and 'nfbind' as 'thisp'-less versions of 'ncall', 'napply', and 'nbind' for the Q promise library. The latter are now marked as deprecated, indicating a change in the preferred method for handling Node.js-style callbacks without binding 'this'.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnfcall``, ``nfapply``, and ``nfbind\n```\n\n----------------------------------------\n\nTITLE: Console Archiving Command for Matomo\nDESCRIPTION: This command triggers the Matomo archiving process using the console. It specifies the path to the PHP executable, the Matomo console script, the core:archive command, the URL of the Matomo instance, and forces archiving for the last N days.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CoreConsole/tests/System/expected/test_ArchiveCronTest_archive_php_cron_output.txt#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/path/to/php /home/travis/build/matomo-org/matomo/tests/PHPUnit/proxy/../../..//console core:archive --url=http://localhost/tests/PHPUnit/proxy/index.php --force-date-last-n=10\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Dimensions Info via Console\nDESCRIPTION: This command retrieves a list of all available custom dimension indexes. It's used in conjunction with the remove command.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CustomDimensions/docs/faq.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./console customdimensions:info\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: User Manager API\nDESCRIPTION: The UserManager API methods no longer return any `token_auth` properties when requesting a user.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_89\n\nLANGUAGE: php\nCODE:\n```\ntoken_auth\n```\n\n----------------------------------------\n\nTITLE: Unbinding Visibility.onVisible listener\nDESCRIPTION: This JavaScript code snippet demonstrates how to unbind a listener added with `Visibility.onVisible()`. It calls `notification.takeAttention()` when the page becomes visible. If `notification.onOutOfDate()` is called, it checks if the listener is still valid (a number), and then unbinds it using `Visibility.unbind(listener)`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar listener = Visibility.onVisible(function () {\n    notification.takeAttention();\n});\n\nnotification.onOutOfDate(function () {\n    if ( typeof(listener) == 'number' ) {\n        Visibility.unbind(listener);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Tracking API: Campaign Attribution Parameters\nDESCRIPTION: Documents that `_rcn` and `_rck` parameters are now used only to attribute conversions, not visits.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_13\n\nLANGUAGE: INI\nCODE:\n```\n_rcn\n```\n\nLANGUAGE: INI\nCODE:\n```\n_rck\n```\n\n----------------------------------------\n\nTITLE: Creating a Promise with Q.fcall for value\nDESCRIPTION: This snippet demonstrates creating a promise from a plain value using `Q.fcall`. The function passed to `Q.fcall` returns the value 10, which is then wrapped in a promise that immediately resolves with that value.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.fcall(function () {\n    return 10;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Luminance Using chroma.luminance - JavaScript\nDESCRIPTION: This snippet shows how to get the luminance of a color using the chroma.luminance() function.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nchroma.luminance('black') // 0\nchroma.luminance('white') // 1\nchroma.luminance('#ff0000') // 0.2126\n```\n\n----------------------------------------\n\nTITLE: Generate GeoIP2 Test Databases\nDESCRIPTION: This Perl script, adapted from MaxMind, converts JSON data into GeoIP2 test database files. It relies on the `GeoIP2-City.json` and `GeoIP2-Country.json` files for input, which define the IP addresses and their corresponding geographic locations. The output is the binary database file used for testing purposes.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/geoip-files/README.md#_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nwriteTestFiles.pl\n```\n\n----------------------------------------\n\nTITLE: Mousetrap Keyboard Recording\nDESCRIPTION: This JavaScript function utilizes the Mousetrap library to record a sequence of keyboard inputs. After recording, it displays the captured sequence in an alert box.  Requires the Mousetrap library to be available.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/record/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction recordSequence() {\n    Mousetrap.record(function(sequence) {\n        // sequence is an array like ['ctrl+k', 'c']\n        alert('You pressed: ' + sequence.join(' '));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Including jquery.scrollTo via jsdelivr CDN\nDESCRIPTION: This HTML snippet includes the jquery.scrollTo plugin via the jsdelivr CDN.  It links to a specific version (2.1.3) of the minified JavaScript file.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/jquery.scrollto@2.1.3/jquery.scrollTo.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Matomo dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the Matomo project using npm. It's typically executed in the root directory of the project.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/client/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] npm install .\n```\n\n----------------------------------------\n\nTITLE: Renaming nend to nodeify in Q promise library\nDESCRIPTION: Renames 'nend' to 'nodeify' within the Q promise library, modifying its behavior to no longer return an always-fulfilled promise when a Node.js-style callback is passed. This change affects how asynchronous operations are integrated with Node.js callbacks.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnend`` to ``nodeify``. It no longer returns an always-fulfilled\n   promise when a Node callback is passed\n```\n\n----------------------------------------\n\nTITLE: Listening to Visibility State Changes\nDESCRIPTION: This JavaScript code snippet shows how to listen to visibility state changing events using `Visibility.change()`. The callback function receives the event object and the new state. In this example, it calls the `Statistics.visibilityChange()` function with the state.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nVisibility.change(function (e, state) {\n    Statistics.visibilityChange(state);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding nend for Q promise library\nDESCRIPTION: Introduces 'nend' to the Q promise library, providing a mechanism to handle Node.js-style callbacks in conjunction with promises.  It is associated with progress notification support using methods like 'promise.then(onFulfilled, onRejected, onProgress)'.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnend\n```\n\nLANGUAGE: javascript\nCODE:\n```\npromise.then(onFulfilled, onRejected, onProgress)``,progress(onProgress)``, and ``deferred.notify(...progressData)\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: API::getLastDate() Removed PHP\nDESCRIPTION: The method `Piwik\\Plugins\\API\\API::getLastDate()` has been removed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_92\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugins\\API\\API::getLastDate()\n```\n\n----------------------------------------\n\nTITLE: New Config Setting: contact_email_address (INI)\nDESCRIPTION: Documents the addition of the `contact_email_address` setting in the `General` section for specifying a contact email.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_23\n\nLANGUAGE: INI\nCODE:\n```\ncontact_email_address\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Archive::getDataTableFromArchive() Removed PHP\nDESCRIPTION: The method `Piwik\\Archive::getDataTableFromArchive()` has been removed; use `Piwik\\Archive::createDataTableFromArchive` instead.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_93\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Archive::getDataTableFromArchive()\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Archive::createDataTableFromArchive\n```\n\n----------------------------------------\n\nTITLE: Adding thenResolve shortcut for fulfilled promises in Q\nDESCRIPTION: Introduces 'thenResolve' as a convenient shortcut within the Q promise library, allowing the return of a constant value upon a promise's fulfillment. This simplifies scenarios where a specific value needs to be returned after a successful asynchronous operation.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthenResolve`` as a shortcut for returning a constant value once a\n   promise is fulfilled\n```\n\n----------------------------------------\n\nTITLE: Composer Install Command\nDESCRIPTION: This command installs the necessary dependencies for the project using Composer.  It should be executed from the project root directory and requires Composer to be installed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/libs/Authenticator/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Visibility.every with different intervals for visible and hidden\nDESCRIPTION: This JavaScript code snippet shows how to use `Visibility.every` with different intervals for visible and hidden states.  It sets up a check for email updates every minute when the page is visible and every 5 minutes when the page is hidden. Requires a `checkForEmail` function to be defined elsewhere. Defines a variable `minute` equal to 60 seconds (60 * 1000 milliseconds).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar minute = 60 * 1000;\nVisibility.every(minute, 5 * minute, function () {\n    checkForEmail();\n});\n```\n\n----------------------------------------\n\nTITLE: Building Chroma.js from Source\nDESCRIPTION: These snippets show the commands required to compile the CoffeeScript source files for Chroma.js using make.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake clean\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding done replacement for end Q promise library\nDESCRIPTION: Adds 'done' as a substitute for 'end' in the Q promise library, accepting fulfillment, rejection, and progress handlers. It's functionally equivalent to calling 'then(f, r, p).end()', streamlining the process of handling promise outcomes.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndone`` as a replacement for ``end``, taking the usual fulfillment,\n   rejection, and progress handlers. It's essentially equivalent to\n   ``then(f, r, p).end()``.\n```\n\n----------------------------------------\n\nTITLE: Running tests using npm\nDESCRIPTION: This shell command runs the tests defined in the project's `package.json` file, usually using a test runner like Mocha or Jest.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Activating the CustomDimensions Plugin via Console\nDESCRIPTION: This command activates the CustomDimensions plugin. It is executed from the Piwik directory and requires console access.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CustomDimensions/docs/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./console plugin:activate CustomDimensions\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Report Properties Removed PHP\nDESCRIPTION: The properties `Report::$widgetTitle`, `Report::$widgetParams`, and `Report::$menuTitle` were removed; use the method `Report::configureWidgets()` to create widgets instead.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_98\n\nLANGUAGE: php\nCODE:\n```\nReport::$widgetTitle\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::$widgetParams\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::$menuTitle\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::configureWidgets()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dimension Slots via Console\nDESCRIPTION: These commands add new custom dimension slots for action and visit scopes. They are executed from the Piwik directory and require console access. The `--count` option can be added to create multiple slots at once.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CustomDimensions/docs/faq.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./console customdimensions:add-custom-dimension --scope=action\n```\n\nLANGUAGE: bash\nCODE:\n```\n./console customdimensions:add-custom-dimension --scope=visit\n```\n\n----------------------------------------\n\nTITLE: Using jQuery Mousewheel with Browserify (Server-Side)\nDESCRIPTION: This code snippet shows how to use jQuery Mousewheel with Browserify in server-side Node.js code using Express. It requires the `browserify`, `express`, `jquery-browserify`, and `jquery-mousewheel` modules.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery-mousewheel/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar express = require('express');\nvar app = express.createServer();\n\napp.use(require('browserify')({\n    require : [ 'jquery-browserify', 'jquery-mousewheel' ]\n}));\n```\n\n----------------------------------------\n\nTITLE: Computed Values with sprintf\nDESCRIPTION: This example illustrates how to pass a function to sprintf, which is then invoked to compute a dynamic value. The return value of the function is used in place of the placeholder.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf('Current date and time: %s', function() { return new Date().toString() })\n```\n\n----------------------------------------\n\nTITLE: Downloading YUICompressor - Bash\nDESCRIPTION: These commands download and unzip YUICompressor, which is used to minify the piwik.js file. The commands assume you are in the `/path/to/piwik/js/` directory.  Requires `wget` and `unzip` to be installed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/js/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd /path/to/piwik/js/\n$ wget https://github.com/yui/yuicompressor/releases/download/v2.4.8/yuicompressor-2.4.8.zip\n$ unzip yuicompressor-2.4.8.zip\n```\n\n----------------------------------------\n\nTITLE: Creating a Promise with Q.fcall for exception\nDESCRIPTION: This snippet shows how to use `Q.fcall` to create a promise that represents an exception. The function passed to `Q.fcall` throws an error, which results in a promise that immediately rejects with that error as the reason.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\n```\n\n----------------------------------------\n\nTITLE: Q.all Static Method Example\nDESCRIPTION: Shows how to use Q.all to wait for multiple promises to resolve. Demonstrates the equivalent functionality using Q.fcall and the .all() method.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.all([a, b]);\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma.js via npm\nDESCRIPTION: This snippet shows the command to install the Chroma.js library using npm (Node Package Manager).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install chroma-js\n```\n\n----------------------------------------\n\nTITLE: Install sprintf-js with NPM\nDESCRIPTION: This command installs the sprintf-js package using Node Package Manager (NPM). It allows you to use the sprintf and vsprintf functions in your Node.js projects.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install sprintf-js\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Test Execution\nDESCRIPTION: This command executes the PHPUnit tests for the project.  It should be run from the project root directory after installing the dependencies with Composer. It assumes the tests are located in the `tests` folder.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/libs/Authenticator/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphpunit tests\n```\n\n----------------------------------------\n\nTITLE: Install sprintf-js with Bower\nDESCRIPTION: This command installs the sprintf-js package using Bower, a package manager for the web. This allows you to use sprintf-js in your web browser projects.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/sprintf-js/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbower install sprintf\n```\n\n----------------------------------------\n\nTITLE: Overwriting Internet Connection Requirement\nDESCRIPTION: Details how plugin classes can overwrite the `requiresInternetConnection` method to define if they should be automatically unloaded when no internet connection is available. This is controlled by `enable_internet_features = 0`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Installing Node.js and npm (Ubuntu)\nDESCRIPTION: This shell command installs Node.js and npm on Ubuntu using the apt-get package manager.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get install nodejs npm\n```\n\n----------------------------------------\n\nTITLE: Aliasing properties for Q promise library\nDESCRIPTION: Adds experimental aliases for certain properties in the Q promise library. 'finally' is aliased to 'fin', 'catch' to 'fail', 'try' to 'call', and 'delete' to 'del', providing alternative names for these methods.  The properties are enquoted for cross-browser compatibility.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfinally`` alias for ``fin``, ``catch``\n   alias for ``fail``, ``try`` alias for ``call``, and ``delete`` alias\n   for ``del``.\n```\n\n----------------------------------------\n\nTITLE: Q.ninvoke and Q.npost for Node.js Methods\nDESCRIPTION: Illustrates the use of Q.ninvoke and Q.npost to call Node.js-style methods while maintaining the correct `this` context.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/README.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Q.ninvoke(redisClient, \"get\", \"user:1:id\");\nreturn Q.npost(redisClient, \"get\", [\"user:1:id\"]);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Testing\nDESCRIPTION: This snippet demonstrates the command used to install the necessary dependencies for running the Mousetrap unit tests. It utilizes `npm install` to install the dependencies defined in the project's `package.json` file. This command should be executed from the project's root directory.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /path/to/repo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Collecting Page Visibility Statistics\nDESCRIPTION: This JavaScript code snippet demonstrates collecting page visibility statistics using `Visibility.state()`. It checks the current visibility state on document load. If the page is hidden or prerendering, it calls the respective functions from the `Statistics` object: `userOpenPageInBackgroundTab()` or `pageIsPrerendering()`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/visibilityjs/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).load(function () {\n\n    if ( 'hidden' == Visibility.state() ) {\n        Statistics.userOpenPageInBackgroundTab();\n    }\n    if ( 'prerender' == Visibility.state() ) {\n        Statistics.pageIsPrerendering();\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Deprecated Template Attribute: template-file\nDESCRIPTION: Documents the `template-file` attribute is now considered deprecated and will be removed in Matomo 5, the `component` property should be used instead.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\ntemplate-file\n```\n\n----------------------------------------\n\nTITLE: Desaturating a Color - JavaScript\nDESCRIPTION: This code shows how to reduce the saturation of a color using the color.desaturate() method. It returns the hex code of the desaturated color.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/doc/api.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nchroma('red').desaturate().hex() // #ec3d23\n```\n\n----------------------------------------\n\nTITLE: Deprecated LESS Variables: Color Definitions\nDESCRIPTION: Highlights the deprecation of brand-related LESS color variables (`color-black-piwik`, `color-blue-piwik`, etc.) and the introduction of new variables using `matomo` instead of `piwik`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_8\n\nLANGUAGE: INI\nCODE:\n```\ncolor-black-piwik\ncolor-blue-piwik\ncolor-red-piwik\ncolor-green-piwik\n```\n\nLANGUAGE: INI\nCODE:\n```\ncolor-black-matomo\n```\n\n----------------------------------------\n\nTITLE: Pausing Mousetrap Events in JavaScript\nDESCRIPTION: This code snippet demonstrates how to pause Mousetrap events, preventing keyboard shortcuts from firing. It requires the Mousetrap library to be included in the project.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/mousetrap/plugins/pause/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// stop Mousetrap events from firing\nMousetrap.pause();\n```\n\n----------------------------------------\n\nTITLE: Removed Config: Segment Subquery Cache (INI)\nDESCRIPTION: Explains the removal of the segment subquery cache and related INI config options (`enable_segments_subquery_cache`, `segments_subquery_cache_ttl`, `segments_subquery_cache_limit`).\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_10\n\nLANGUAGE: INI\nCODE:\n```\nenable_segments_subquery_cache\n```\n\nLANGUAGE: INI\nCODE:\n```\nsegments_subquery_cache_ttl\n```\n\nLANGUAGE: INI\nCODE:\n```\nsegments_subquery_cache_limit\n```\n\n----------------------------------------\n\nTITLE: Including jquery.scrollTo via cdnjs CDN\nDESCRIPTION: This HTML snippet includes the jquery.scrollTo plugin via the cdnjs CDN.  It links to a specific version (2.1.3) of the minified JavaScript file.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/jquery.scrollto/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery-scrollTo/2.1.3/jquery.scrollTo.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: XML Structure for Referrer Data\nDESCRIPTION: This XML snippet defines the structure for representing referrer data. It includes metrics such as number of visits (nb_visits), number of actions (nb_actions), visit length, bounce count, conversions, and revenue. The 'row' elements represent individual referrers and their associated data, including nested 'goals' and 'subtable' elements for finer-grained analysis.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_Referrers.getWebsites_exported.xml.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<result>\n\t<row>\n\t\t<label>referrer.com</label>\n\t\t<nb_visits>12</nb_visits>\n\t\t<nb_actions>52</nb_actions>\n\t\t<max_actions>7</max_actions>\n\t\t<sum_visit_length>9020</sum_visit_length>\n\t\t<bounce_count>2</bounce_count>\n\t\t<nb_visits_converted>12</nb_visits_converted>\n\t\t<goals>\n\t\t\t<row idgoal='1'>\n\t\t\t\t<nb_conversions>24</nb_conversions>\n\t\t\t\t<nb_visits_converted>12</nb_visits_converted>\n\t\t\t\t<revenue>120</revenue>\n\t\t\t</row>\n\t\t\t<row idgoal='2'>\n\t\t\t\t<nb_conversions>12</nb_conversions>\n\t\t\t\t<nb_visits_converted>12</nb_visits_converted>\n\t\t\t\t<revenue>60</revenue>\n\t\t\t</row>\n\t\t</goals>\n\t\t<nb_conversions>36</nb_conversions>\n\t\t<revenue>180</revenue>\n\t\t<sum_daily_nb_uniq_visitors>12</sum_daily_nb_uniq_visitors>\n\t\t<sum_daily_nb_users>2</sum_daily_nb_users>\n\t\t<subtable>\n\t\t\t<row>\n\t\t\t\t<label>http://referrer.com/Other_Page.htm</label>\n\t\t\t\t<nb_visits>4</nb_visits>\n\t\t\t\t<nb_actions>18</nb_actions>\n\t\t\t\t<max_actions>5</max_actions>\n\t\t\t\t<sum_visit_length>2888</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>4</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>4</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>https://referrer.com/Other_Page.htm</label>\n\t\t\t\t<nb_visits>4</nb_visits>\n\t\t\t\t<nb_actions>18</nb_actions>\n\t\t\t\t<max_actions>5</max_actions>\n\t\t\t\t<sum_visit_length>2888</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>4</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>4</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://referrer.com/page.htm?param=valuewith some spaces</label>\n\t\t\t\t<nb_visits>2</nb_visits>\n\t\t\t\t<nb_actions>14</nb_actions>\n\t\t\t\t<max_actions>7</max_actions>\n\t\t\t\t<sum_visit_length>3244</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>2</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>2</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://referrer.com/&lt;script&gt;_x(8)&lt;/script&gt;</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>1</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>0</sum_visit_length>\n\t\t\t\t<bounce_count>1</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>1</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://referrer.com/{{_Vue.h.constructor`_x(20)`()}}</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>1</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>0</sum_visit_length>\n\t\t\t\t<bounce_count>1</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>1</sum_daily_nb_users>\n\t\t\t</row>\n\t\t</subtable>\n\t</row>\n\t<row>\n\t\t<label>www.referrer1.com</label>\n\t\t<nb_visits>8</nb_visits>\n\t\t<nb_actions>12</nb_actions>\n\t\t<max_actions>3</max_actions>\n\t\t<sum_visit_length>2194</sum_visit_length>\n\t\t<bounce_count>6</bounce_count>\n\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t<goals>\n\t\t\t<row idgoal='1'>\n\t\t\t\t<nb_conversions>13</nb_conversions>\n\t\t\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t\t\t<revenue>65</revenue>\n\t\t\t</row>\n\t\t\t<row idgoal='2'>\n\t\t\t\t<nb_conversions>8</nb_conversions>\n\t\t\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t\t\t<revenue>40</revenue>\n\t\t\t</row>\n\t\t</goals>\n\t\t<nb_conversions>21</nb_conversions>\n\t\t<revenue>105</revenue>\n\t\t<sum_daily_nb_uniq_visitors>8</sum_daily_nb_uniq_visitors>\n\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t<subtable>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer1.com/theReferrerPage0.html</label>\n\t\t\t\t<nb_visits>3</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>1095</sum_visit_length>\n\t\t\t\t<bounce_count>3</bounce_count>\n\t\t\t\t<nb_visits_converted>3</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>3</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer1.com/theReferrerPage1.html</label>\n\t\t\t\t<nb_visits>3</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>1095</sum_visit_length>\n\t\t\t\t<bounce_count>3</bounce_count>\n\t\t\t\t<nb_visits_converted>3</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>3</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer1.com/sub/dir/page1.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>2</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer1.com/sub/dir/page2.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>2</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t</subtable>\n\t</row>\n\t<row>\n\t\t<label>www.referrer2.com</label>\n\t\t<nb_visits>8</nb_visits>\n\t\t<nb_actions>12</nb_actions>\n\t\t<max_actions>3</max_actions>\n\t\t<sum_visit_length>2194</sum_visit_length>\n\t\t<bounce_count>6</bounce_count>\n\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t<goals>\n\t\t\t<row idgoal='1'>\n\t\t\t\t<nb_conversions>14</nb_conversions>\n\t\t\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t\t\t<revenue>70</revenue>\n\t\t\t</row>\n\t\t\t<row idgoal='2'>\n\t\t\t\t<nb_conversions>8</nb_conversions>\n\t\t\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t\t\t<revenue>40</revenue>\n\t\t\t</row>\n\t\t</goals>\n\t\t<nb_conversions>22</nb_conversions>\n\t\t<revenue>110</revenue>\n\t\t<sum_daily_nb_uniq_visitors>8</sum_daily_nb_uniq_visitors>\n\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t<subtable>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer2.com/theReferrerPage0.html</label>\n\t\t\t\t<nb_visits>3</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>1095</sum_visit_length>\n\t\t\t\t<bounce_count>3</bounce_count>\n\t\t\t\t<nb_visits_converted>3</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>3</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer2.com/theReferrerPage1.html</label>\n\t\t\t\t<nb_visits>3</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>1095</sum_visit_length>\n\t\t\t\t<bounce_count>3</bounce_count>\n\t\t\t\t<nb_visits_converted>3</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>3</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer2.com/sub/dir/page1.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>2</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer2.com/sub/dir/page2.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>2</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t</subtable>\n\t</row>\n\t<row>\n\t\t<label>www.referrer3.com</label>\n\t\t<nb_visits>8</nb_visits>\n\t\t<nb_actions>12</nb_actions>\n\t\t<max_actions>3</max_actions>\n\t\t<sum_visit_length>2194</sum_visit_length>\n\t\t<bounce_count>6</bounce_count>\n\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t<goals>\n\t\t\t<row idgoal='1'>\n\t\t\t\t<nb_conversions>14</nb_conversions>\n\t\t\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t\t\t<revenue>70</revenue>\n\t\t\t</row>\n\t\t\t<row idgoal='2'>\n\t\t\t\t<nb_conversions>8</nb_conversions>\n\t\t\t\t<nb_visits_converted>8</nb_visits_converted>\n\t\t\t\t<revenue>40</revenue>\n\t\t\t</row>\n\t\t</goals>\n\t\t<nb_conversions>22</nb_conversions>\n\t\t<revenue>110</revenue>\n\t\t<sum_daily_nb_uniq_visitors>8</sum_daily_nb_uniq_visitors>\n\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t<subtable>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer3.com/theReferrerPage0.html</label>\n\t\t\t\t<nb_visits>3</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>1095</sum_visit_length>\n\t\t\t\t<bounce_count>3</bounce_count>\n\t\t\t\t<nb_visits_converted>3</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>3</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer3.com/theReferrerPage1.html</label>\n\t\t\t\t<nb_visits>3</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>1095</sum_visit_length>\n\t\t\t\t<bounce_count>3</bounce_count>\n\t\t\t\t<nb_visits_converted>3</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>3</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer3.com/sub/dir/page1.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>2</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t\t<row>\n\t\t\t\t<label>http://www.referrer3.com/sub/dir/page2.html</label>\n\t\t\t\t<nb_visits>1</nb_visits>\n\t\t\t\t<nb_actions>3</nb_actions>\n\t\t\t\t<max_actions>3</max_actions>\n\t\t\t\t<sum_visit_length>2</sum_visit_length>\n\t\t\t\t<bounce_count>0</bounce_count>\n\t\t\t\t<nb_visits_converted>1</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n\t\t</subtable>\n\t</row>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Period Key Translation Removed PHP\nDESCRIPTION: If requesting multiple periods for one report, the keys that define the range are no longer translated.  For example before 3.0 an API response may contain: `<result date=\"From 2010-02-01 to 2010-02-07\">` which is now `<result date=\"2010-02-01,2010-02-07\">`.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_110\n\nLANGUAGE: php\nCODE:\n```\n<result date=\"From 2010-02-01 to 2010-02-07\">\n```\n\nLANGUAGE: php\nCODE:\n```\n<result date=\"2010-02-01,2010-02-07\">\n```\n\n----------------------------------------\n\nTITLE: New Config Setting: enable_opcache_reset (INI)\nDESCRIPTION: Documents the addition of `enable_opcache_reset` configuration switch for `opcache_reset` when general caches are cleared.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_15\n\nLANGUAGE: INI\nCODE:\n```\nenable_opcache_reset\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: HTTP Reporting API Filter Limit PHP\nDESCRIPTION: When calling the HTTP Reporting API, a default filter limit of 100 is now always applied.  Previously, the default filter limit was not applied to API calls that did not return reports.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_104\n\n\n\n----------------------------------------\n\nTITLE: New PHP Event: UsersManager.inviteUser Events\nDESCRIPTION: Describes the new `UsersManager.inviteUser` events triggered after inviting, resending, accepting, and declining user invitations.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nUsersManager.inviteUser.end\n```\n\nLANGUAGE: PHP\nCODE:\n```\nUsersManager.inviteUser.resendInvite\n```\n\nLANGUAGE: PHP\nCODE:\n```\nUsersManager.inviteUser.accepted\n```\n\nLANGUAGE: PHP\nCODE:\n```\nUsersManager.inviteUser.declined\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Report Widget Configuration Changes PHP\nDESCRIPTION: The methods `Report::configureWidget()`, `Report::getWidgetTitle()`, and `Report::configureReportingMenu()` have been removed; use the new method `Report::configureWidgets()` instead.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_95\n\nLANGUAGE: php\nCODE:\n```\nReport::configureWidget()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::getWidgetTitle()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::configureReportingMenu()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::configureWidgets()\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Report Factory Methods Moved PHP\nDESCRIPTION: The methods `Report::factory()`, `Report::getAllReportClasses()`, and `Report::getAllReports` have been moved to the `Piwik\\Plugin\\Reports` class.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_97\n\nLANGUAGE: php\nCODE:\n```\nReport::factory()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::getAllReportClasses()\n```\n\nLANGUAGE: php\nCODE:\n```\nReport::getAllReports\n```\n\nLANGUAGE: php\nCODE:\n```\nPiwik\\Plugin\\Reports\n```\n\n----------------------------------------\n\nTITLE: Piwik 3.0.0 Breaking Change: Settings Creation Method PHP\nDESCRIPTION: The creation of settings has slightly changed to improve performance. It is now possible to create new settings via the method `$this->makeSetting()`. Introductions for settings can no longer be defined.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_109\n\nLANGUAGE: php\nCODE:\n```\n$this->makeSetting()\n```\n\n----------------------------------------\n\nTITLE: Deprecating ref in favor of resolve Q promise library\nDESCRIPTION: Deprecates 'ref' in favor of 'resolve' within the Q promise library. This change aligns with recommendations to use 'resolve' as the preferred method for creating promises from values or other promises.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nref`` in favor of ``resolve``\n```\n\n----------------------------------------\n\nTITLE: Deprecated Technology: jQuery UI\nDESCRIPTION: Notes the deprecation of jQuery UI and suggests using Materialize CSS or Vue.js as alternatives.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery UI\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMaterialize CSS\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nVue.js\n```\n\n----------------------------------------\n\nTITLE: Removing enqueue, def, spy, wait, and join from Q promise library\nDESCRIPTION: Removes 'enqueue', 'def', 'spy', 'wait', and 'join' from the Q promise library. These removals represent significant API changes, with recommendations for alternative approaches using 'nextTick', 'master', 'fin', 'all(args).get(0)', and 'all(args).spread(callback)' respectively.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nenqueue`` removed.  Use ``nextTick`` instead.\n   This is more consistent with NodeJS and (subjectively)\n   more explicit and intuitive.\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndef`` removed.  Use ``master`` instead.  The\n   term ``def`` was too confusing to new users.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspy`` removed in favor of ``fin``.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwait`` removed. Do ``all(args).get(0)`` instead.\n```\n\nLANGUAGE: javascript\nCODE:\n```\njoin`` removed. Do ``all(args).spread(callback)`` instead.\n```\n\n----------------------------------------\n\nTITLE: New PHP Event: Segment.filterSegments\nDESCRIPTION: Documents the addition of `Segment.filterSegments`. Plugins can use this to filter segment definitions.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nSegment.filterSegments\n```\n\n----------------------------------------\n\nTITLE: Revising delay method Q promise library\nDESCRIPTION: Revises the 'delay' method in the Q promise library to accept either '(value, timeout)' or '(timeout)' variations based on the arguments length.  This makes the delay method more versatile.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/lib/q-1.4.1/CHANGES.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndelay`` so that it accepts both ``(value,\n   timeout)`` and ``(timeout)`` variations based on\n   arguments length.\n```\n\n----------------------------------------\n\nTITLE: New Config Setting: only_allow_secure_auth_tokens (INI)\nDESCRIPTION: Explains the introduction of the `only_allow_secure_auth_tokens` config setting, defaulting to `0`, which prevents the use of tokens in GET API requests.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_12\n\nLANGUAGE: INI\nCODE:\n```\nonly_allow_secure_auth_tokens\n```\n\n----------------------------------------\n\nTITLE: HTTP API Method: Get Country Code Mapping PHP\nDESCRIPTION: New HTTP API method `UserCountry.getCountryCodeMapping` to get a list of used country codes to country names.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/CHANGELOG.md#_snippet_87\n\nLANGUAGE: php\nCODE:\n```\nUserCountry.getCountryCodeMapping\n```\n\n----------------------------------------\n\nTITLE: Running Chroma.js Tests\nDESCRIPTION: This snippet shows the command to run the tests for Chroma.js, assuming vows is installed.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/node_modules/chroma-js/readme.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvows test/*.coffee\n```\n\n----------------------------------------\n\nTITLE: Analyzing Referrer Subtable Data Row in XML\nDESCRIPTION: This XML snippet represents a sub-row of data, providing more detailed information for a specific referrer website. It includes metrics similar to the parent row, offering granular insights into user behavior within that referral.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/tests/UI/expected-screenshots/ReportExporting_Referrers.getWebsites_exported.xml.txt#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<row>\n\t\t\t\t<label>http://xavierinstitute.org</label>\n\t\t\t\t<nb_visits>2</nb_visits>\n\t\t\t\t<nb_actions>1</nb_actions>\n\t\t\t\t<max_actions>1</max_actions>\n\t\t\t\t<sum_visit_length>3</sum_visit_length>\n\t\t\t\t<bounce_count>2</bounce_count>\n\t\t\t\t<nb_visits_converted>2</nb_visits_converted>\n\t\t\t\t<sum_daily_nb_uniq_visitors>1</sum_daily_nb_uniq_visitors>\n\t\t\t\t<sum_daily_nb_users>0</sum_daily_nb_users>\n\t\t\t</row>\n```\n\n----------------------------------------\n\nTITLE: XML Error Message\nDESCRIPTION: This XML snippet represents an error message indicating that a Matomo database upgrade is required. The `error` tag contains a `message` attribute describing the error.\nSOURCE: https://github.com/matomo-org/matomo/blob/5.x-dev/plugins/CoreUpdater/tests/UI/expected-screenshots/CoreUpdaterDb_CoreUpdater.API.ErrorMessageXML.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<result>\n\t<error message=\"Database Upgrade Required. Your Matomo database is out-of-date, and must be upgraded before you can continue.\" />\n</result>\n```"
  }
]