[
  {
    "owner": "instantdb",
    "repo": "instant",
    "content": "TITLE: Building a Todo App with InstantDB in Vanilla JavaScript\nDESCRIPTION: Complete TypeScript implementation of a todo application using InstantDB. Includes database initialization, schema definition, data operations (create, read, update, delete), and UI rendering for a fully functional todo list with real-time updates.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/start-vanilla.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, i, id, InstaQLEntity } from \"@instantdb/core\";\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\n\n// Optional: Declare your schema!\nconst schema = i.schema({\n  entities: {\n    todos: i.entity({\n      text: i.string(),\n      done: i.boolean(),\n      createdAt: i.date(),\n    }),\n  },\n});\n\ntype Todo = InstaQLEntity<typeof schema, \"todos\">;\n\n// Initialize the database\n// ---------\nconst db = init({ appId: APP_ID, schema });\n\n// Subscribe to data\n// ---------\ndb.subscribeQuery({ todos: {} }, (resp) => {\n  if (resp.error) {\n    renderError(resp.error.message); // Pro-tip: Check you have the right appId!\n    return;\n  }\n  if (resp.data) {\n    render(resp.data);\n  }\n});\n\n// Write Data\n// ---------\nfunction addTodo(text: string) {\n  db.transact(\n    db.tx.todos[id()].update({\n      text,\n      done: false,\n      createdAt: Date.now(),\n    })\n  );\n  focusInput();\n}\n\nfunction deleteTodoItem(todo: Todo) {\n  db.transact(db.tx.todos[todo.id].delete());\n}\n\nfunction toggleDone(todo: Todo) {\n  db.transact(db.tx.todos[todo.id].update({ done: !todo.done }));\n}\n\nfunction deleteCompleted(todos: Todo[]) {\n  const completed = todos.filter((todo) => todo.done);\n  const txs = completed.map((todo) => db.tx.todos[todo.id].delete());\n  db.transact(txs);\n}\n\nfunction toggleAllTodos(todos: Todo[]) {\n  const newVal = !todos.every((todo) => todo.done);\n  db.transact(\n    todos.map((todo) => db.tx.todos[todo.id].update({ done: newVal }))\n  );\n}\n\n// Styles\n// ---------\nconst styles: Record<string, string> = {\n  container: `\n    box-sizing: border-box;\n    background-color: #fafafa;\n    font-family: code, monospace;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n  `,\n  header: `\n    letter-spacing: 2px;\n    font-size: 50px;\n    color: lightgray;\n    margin-bottom: 10px;\n  `,\n  form: `\n    box-sizing: inherit;\n    display: flex;\n    border: 1px solid lightgray;\n    border-bottom-width: 0px;\n    width: 350px;\n  `,\n  toggleAll: `\n    font-size: 30px;\n    cursor: pointer;\n    margin-left: 11px;\n    margin-top: -6px;\n    width: 15px;\n    margin-right: 12px;\n  `,\n  input: `\n    background-color: transparent;\n    font-family: code, monospace;\n    width: 287px;\n    padding: 10px;\n    font-style: italic;\n  `,\n  todoList: `\n    box-sizing: inherit;\n    width: 350px;\n  `,\n  checkbox: `\n    font-size: 30px;\n    margin-left: 5px;\n    margin-right: 20px;\n    cursor: pointer;\n  `,\n  todo: `\n    display: flex;\n    align-items: center;\n    padding: 10px;\n    border: 1px solid lightgray;\n    border-bottom-width: 0px;\n  `,\n  todoText: `\n    flex-grow: 1;\n    overflow: hidden;\n  `,\n  delete: `\n    width: 25px;\n    cursor: pointer;\n    color: lightgray;\n  `,\n  actionBar: `\n    display: flex;\n    justify-content: space-between;\n    width: 328px;\n    padding: 10px;\n    border: 1px solid lightgray;\n    font-size: 10px;\n  `,\n  footer: `\n    margin-top: 20px;\n    font-size: 10px;\n  `,\n};\n\n// Render\n// ---------\nconst app = document.getElementById(\"app\")!;\napp.style.cssText = styles.container;\n\nfunction render(data: { todos: Todo[] }) {\n  app.innerHTML = \"\";\n\n  const { todos } = data;\n\n  const containerHTML = `\n    <div style=\"${styles.container}\">\n      <div style=\"${styles.header}\">todos</div>\n      ${TodoForm()}\n      ${TodoList(todos)}\n      ${ActionBar(todos)}\n      <div style=\"${\n        styles.footer\n      }\">Open another tab to see todos update in realtime!</div>\n    </div>\n  `;\n\n  app.innerHTML = containerHTML;\n\n  // Attach event listeners\n  document\n    .querySelector(\".toggle-all\")\n    ?.addEventListener(\"click\", () => toggleAllTodos(todos));\n  document.querySelector(\"form\")?.addEventListener(\"submit\", submitForm);\n  todos.forEach((todo) => {\n    document\n      .getElementById(`toggle-${todo.id}`)\n      ?.addEventListener(\"change\", () => toggleDone(todo));\n    document\n      .getElementById(`delete-${todo.id}`)\n      ?.addEventListener(\"click\", () => deleteTodoItem(todo));\n  });\n  document\n    .querySelector(\".delete-completed\")\n    ?.addEventListener(\"click\", () => deleteCompleted(todos));\n}\n\nfunction renderError(errorMessage: string) {\n  app.innerHTML = `\n    <div>${errorMessage}</div>\n  `;\n}\n\nfunction TodoForm() {\n  return `\n    <div style=\"${styles.form}\">\n      <div class=\"toggle-all\" style=\"${styles.toggleAll}\">‚åÑ</div>\n      <form>\n        <input style=\"${styles.input}\" placeholder=\"What needs to be done?\" type=\"text\" autofocus>\n      </form>\n    </div>\n  `;\n}\n\nfunction TodoList(todos: Todo[]) {\n  return `\n    <div style=\"${styles.todoList}\">\n      ${todos\n        .map(\n          (todo) => `\n        <div style=\"${styles.todo}\">\n          <input id=\"toggle-${todo.id}\" type=\"checkbox\" style=\"${\n            styles.checkbox\n          }\" ${todo.done ? \"checked\" : \"\"}>\n          <div style=\"${styles.todoText}\">\n            ${\n              todo.done\n                ? `<span style=\"text-decoration: line-through;\">${todo.text}</span>`\n                : `<span>${todo.text}</span>`\n            }\n          </div>\n          <span id=\"delete-${todo.id}\" style=\"${styles.delete}\">ùòü</span>\n        </div>\n      `\n        )\n        .join(\"\")}\n    </div>\n  `;\n}\n\nfunction ActionBar(todos: Todo[]) {\n  return `\n    <div style=\"${styles.actionBar}\">\n      <div>Remaining todos: ${todos.filter((todo) => !todo.done).length}</div>\n      <div class=\"delete-completed\" style=\"cursor: pointer;\">Delete Completed</div>\n    </div>\n  `;\n}\n\nfunction focusInput() {\n  const input = document.querySelector<HTMLInputElement>('input[type=\"text\"]');\n  if (input) {\n    input.focus();\n  }\n}\n\nfunction submitForm(event: Event) {\n  event.preventDefault();\n  const input = (event.target as HTMLFormElement).querySelector(\"input\");\n  if (input && input.value.trim()) {\n    addTodo(input.value);\n    input.value = \"\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Pagination in React with InstantDB\nDESCRIPTION: This React code demonstrates a complete implementation of cursor-based pagination with InstantDB, including functions to load next and previous pages. It maintains cursor state and handles navigation through result sets efficiently.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nconst pageSize = 10;\n\nconst [cursors, setCursors] = React.useState({ first: pageSize });\n\nconst query = {\n  todos: {\n    $: {\n      ...cursors,\n    },\n  },\n};\n\nconst { isLoading, error, data, pageInfo } = db.useQuery(query);\n\nconst loadNextPage = () => {\n  const endCursor = pageInfo?.todos?.endCursor;\n  if (endCursor) {\n    setCursors({ after: endCursor, first: pageSize });\n  }\n};\n\nconst loadPreviousPage = () => {\n  const startCursor = pageInfo?.todos?.startCursor;\n  if (startCursor) {\n    setCursors({\n      before: startCursor,\n      // Ask for the `last` 10 items so that we get the items just\n      // before our startCursor\n      last: pageSize,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Chat with Instant React SDK\nDESCRIPTION: A complete example showing how to build a real-time chat component using Instant's React SDK. It demonstrates reading data with useQuery, writing data with transactions, and rendering the UI with updated data. The component features instant updates, multiplayer functionality, and offline support.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/packages/react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§ Real-time Chat\n// ----------------------------------\n// * Updates instantly\n// * Multiplayer\n// * Works offline\nfunction Chat() {\n  // 1. Read\n  const { isLoading, error, data } = useQuery({\n    messages: {},\n  });\n\n  // 2. Write\n  const addMessage = (message) => {\n    transact(tx.messages[id()].update(message));\n  };\n\n  // 3. Render!\n  return <UI data={data} onAdd={addMessage} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Chat with InstantDB in React Native\nDESCRIPTION: Demonstrates how to create a real-time chat component using InstantDB in React Native. The example shows reading data with useQuery, writing data with transact, and basic component structure. Features instant updates, multiplayer support, and offline functionality.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/packages/react-native/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§ Real-time Chat\n// ----------------------------------\n// * Updates instantly\n// * Multiplayer\n// * Works offline\nfunction Chat() {\n  // 1. Read\n  const { isLoading, error, data } = useQuery({\n    messages: {},\n  });\n\n  // 2. Write\n  const addMessage = (message) => {\n    transact(tx.messages[id()].update(message));\n  };\n\n  // 3. Render!\n  return <UI data={data} onAdd={addMessage} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Google OAuth Profile Storage in InstantDB\nDESCRIPTION: Complete implementation showing how to parse Google OAuth ID tokens and store additional user profile data in InstantDB. The code includes token parsing, authentication setup, and profile data storage using the profiles namespace.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { init } from '@instantdb/react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID });\n\n// e.g. 89602129-cuf0j.apps.googleusercontent.com\nconst GOOGLE_CLIENT_ID = 'REPLACE_ME';\n\n// Use the google client name in the Instant dashboard auth tab\nconst GOOGLE_CLIENT_NAME = 'REPLACE_ME';\n\ntype JWTResponse = {\n  given_name: string;\n  email: string;\n  last_name: string;\n  picture?: string | undefined;\n};\n\n// 1. Parse the `given_name`, `last_name`, and `picture` from Google's `idToken`.\nfunction parseIdToken(idToken: string): JWTResponse {\n  const base64Paload = idToken.split('.')[1];\n  const decoded = Buffer.from(base64Paload, 'base64');\n  const parsed = JSON.parse(decoded.toString());\n  return parsed;\n}\n\nfunction Login() {\n  const [nonce] = useState(crypto.randomUUID());\n\n  return (\n    <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>\n      <GoogleLogin\n        nonce={nonce}\n        onError={() => alert('Login failed')}\n        onSuccess={async ({ credential }) => {\n          if (!credential) return;\n          const parsed = parseIdToken(credential);\n          const { user } = await db.auth.signInWithIdToken({\n            clientName: GOOGLE_CLIENT_NAME,\n            idToken: credential,\n            nonce,\n          });\n          // 2. Then save that info on a `profiles` namespace!\n          await db.transact([\n            db.tx.profiles[user.id].update({\n              firstName: parsed.given_name,\n              lastName: parsed.last_name,\n              googlePicture: parsed.picture,\n            }),\n          ]);\n        }}\n      />\n    </GoogleOAuthProvider>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing a todo app with Instant and React\nDESCRIPTION: This JavaScript code demonstrates how to create a todo app using Instant with React. It includes data reading and writing operations, schema definition, and components for the todo list interface.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport { id, i, init, InstaQLEntity } from \"@instantdb/react\";\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\n\n// Optional: Declare your schema!\nconst schema = i.schema({\n  entities: {\n    todos: i.entity({\n      text: i.string(),\n      done: i.boolean(),\n      createdAt: i.number(),\n    }),\n  },\n});\n\ntype Todo = InstaQLEntity<typeof schema, \"todos\">;\n\nconst db = init({ appId: APP_ID, schema });\n\nfunction App() {\n  // Read Data\n  const { isLoading, error, data } = db.useQuery({ todos: {} });\n  if (isLoading) {\n    return;\n  }\n  if (error) {\n    return <div className=\"text-red-500 p-4\">Error: {error.message}</div>;\n  }\n  const { todos } = data;\n  return (\n    <div className=\"font-mono min-h-screen flex justify-center items-center flex-col space-y-4\">\n      <h2 className=\"tracking-wide text-5xl text-gray-300\">todos</h2>\n      <div className=\"border border-gray-300 max-w-xs w-full\">\n        <TodoForm todos={todos} />\n        <TodoList todos={todos} />\n        <ActionBar todos={todos} />\n      </div>\n      <div className=\"text-xs text-center\">\n        Open another tab to see todos update in realtime!\n      </div>\n    </div>\n  );\n}\n\n// Write Data\n// ---------\nfunction addTodo(text: string) {\n  db.transact(\n    db.tx.todos[id()].update({\n      text,\n      done: false,\n      createdAt: Date.now(),\n    })\n  );\n}\n\nfunction deleteTodo(todo: Todo) {\n  db.transact(db.tx.todos[todo.id].delete());\n}\n\nfunction toggleDone(todo: Todo) {\n  db.transact(db.tx.todos[todo.id].update({ done: !todo.done }));\n}\n\nfunction deleteCompleted(todos: Todo[]) {\n  const completed = todos.filter((todo) => todo.done);\n  const txs = completed.map((todo) => db.tx.todos[todo.id].delete());\n  db.transact(txs);\n}\n\nfunction toggleAll(todos: Todo[]) {\n  const newVal = !todos.every((todo) => todo.done);\n  db.transact(\n    todos.map((todo) => db.tx.todos[todo.id].update({ done: newVal }))\n  );\n}\n\n\n// Components\n// ----------\nfunction ChevronDownIcon() {\n  return (\n    <svg viewBox=\"0 0 20 20\">\n      <path\n        d=\"M5 8 L10 13 L15 8\"\n        stroke=\"currentColor\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n}\n\nfunction TodoForm({ todos }: { todos: Todo[] }) {\n  return (\n    <div className=\"flex items-center h-10 border-b border-gray-300\">\n      <button\n        className=\"h-full px-2 border-r border-gray-300 flex items-center justify-center\"\n        onClick={() => toggleAll(todos)}\n      >\n        <div className=\"w-5 h-5\">\n          <ChevronDownIcon />\n        </div>\n      </button>\n      <form\n        className=\"flex-1 h-full\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          const input = e.currentTarget.input as HTMLInputElement;\n          addTodo(input.value);\n          input.value = \"\";\n        }}\n      >\n        <input\n          className=\"w-full h-full px-2 outline-none bg-transparent\"\n          autoFocus\n          placeholder=\"What needs to be done?\"\n          type=\"text\"\n          name=\"input\"\n        />\n      </form>\n    </div>\n  );\n}\n\nfunction TodoList({ todos }: { todos: Todo[] }) {\n  return (\n    <div className=\"divide-y divide-gray-300\">\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"flex items-center h-10\">\n          <div className=\"h-full px-2 flex items-center justify-center\">\n            <div className=\"w-5 h-5 flex items-center justify-center\">\n              <input\n                type=\"checkbox\"\n                className=\"cursor-pointer\"\n                checked={todo.done}\n                onChange={() => toggleDone(todo)}\n              />\n            </div>\n          </div>\n          <div className=\"flex-1 px-2 overflow-hidden flex items-center\">\n            {todo.done ? (\n              <span className=\"line-through\">{todo.text}</span>\n            ) : (\n              <span>{todo.text}</span>\n            )}\n          </div>\n          <button\n            className=\"h-full px-2 flex items-center justify-center text-gray-300 hover:text-gray-500\"\n            onClick={() => deleteTodo(todo)}\n          >\n            X\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction ActionBar({ todos }: { todos: Todo[] }) {\n  return (\n    <div className=\"flex justify-between items-center h-10 px-2 text-xs border-t border-gray-300\">\n      <div>Remaining todos: {todos.filter((todo) => !todo.done).length}</div>\n      <button\n        className=\" text-gray-300 hover:text-gray-500\"\n        onClick={() => deleteCompleted(todos)}\n      >\n        Delete Completed\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Code Authentication in React with InstantDB\nDESCRIPTION: A complete React implementation example for magic code authentication flow. It initializes the InstantDB client, handles authentication state, and includes components for login flow, code verification, and user dashboard.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/magic-codes.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { init, User } from \"@instantdb/react\";\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\nconst db = init({ appId: APP_ID });\n\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n\n  if (isLoading) {\n    return;\n  }\n\n  if (error) {\n    return <div className=\"p-4 text-red-500\">Uh oh! {error.message}</div>;\n  }\n\n  if (user) {\n    // The user is logged in! Let's load the `Main`\n    return <Main user={user} />;\n  }\n  // The use isn't logged in yet. Let's show them the `Login` component\n  return <Login />;\n}\n\nfunction Main({ user }: { user: User }) {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <h1 className=\"text-2xl font-bold\">Hello {user.email}!</h1>\n      <button\n        onClick={() => db.auth.signOut()}\n        className=\"px-3 py-1 bg-blue-600 text-white font-bold hover:bg-blue-700\"\n      >\n        Sign out\n      </button>\n    </div>\n  );\n}\n\nfunction Login() {\n  const [sentEmail, setSentEmail] = useState(\"\");\n\n  return (\n    <div className=\"flex justify-center items-center min-h-screen\">\n      <div className=\"max-w-sm\">\n        {!sentEmail ? (\n          <EmailStep onSendEmail={setSentEmail} />\n        ) : (\n          <CodeStep sentEmail={sentEmail} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction EmailStep({ onSendEmail }: { onSendEmail: (email: string) => void }) {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const inputEl = inputRef.current!;\n    const email = inputEl.value;\n    onSendEmail(email);\n    db.auth.sendMagicCode({ email }).catch((err) => {\n      alert(\"Uh oh :\" + err.body?.message);\n      onSendEmail(\"\");\n    });\n  };\n  return (\n    <form\n      key=\"email\"\n      onSubmit={handleSubmit}\n      className=\"flex flex-col space-y-4\"\n    >\n      <h2 className=\"text-xl font-bold\">Let's log you in</h2>\n      <p className=\"text-gray-700\">\n        Enter your email, and we'll send you a verification code. We'll create\n        an account for you too if you don't already have one.\n      </p>\n      <input\n        ref={inputRef}\n        type=\"email\"\n        className=\"border border-gray-300 px-3 py-1  w-full\"\n        placeholder=\"Enter your email\"\n        required\n        autoFocus\n      />\n      <button\n        type=\"submit\"\n        className=\"px-3 py-1 bg-blue-600 text-white font-bold hover:bg-blue-700 w-full\"\n      >\n        Send Code\n      </button>\n    </form>\n  );\n}\n\nfunction CodeStep({ sentEmail }: { sentEmail: string }) {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const inputEl = inputRef.current!;\n    const code = inputEl.value;\n    db.auth.signInWithMagicCode({ email: sentEmail, code }).catch((err) => {\n      inputEl.value = \"\";\n      alert(\"Uh oh :\" + err.body?.message);\n    });\n  };\n\n  return (\n    <form\n      key=\"code\"\n      onSubmit={handleSubmit}\n      className=\"flex flex-col space-y-4\"\n    >\n      <h2 className=\"text-xl font-bold\">Enter your code</h2>\n      <p className=\"text-gray-700\">\n        We sent an email to <strong>{sentEmail}</strong>. Check your email, and\n        paste the code you see.\n      </p>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"border border-gray-300 px-3 py-1  w-full\"\n        placeholder=\"123456...\"\n        required\n        autoFocus\n      />\n      <button\n        type=\"submit\"\n        className=\"px-3 py-1 bg-blue-600 text-white font-bold hover:bg-blue-700 w-full\"\n      >\n        Verify Code\n      </button>\n    </form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Google Sign-in Button Implementation with React\nDESCRIPTION: Complete example showing how to implement Google authentication in a React application using @react-oauth/google and InstantDB. It demonstrates the full flow from rendering the Google button to handling the authentication response.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport React, { useState } from 'react';\nimport { init } from '@instantdb/react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID });\n\n// e.g. 89602129-cuf0j.apps.googleusercontent.com\nconst GOOGLE_CLIENT_ID = 'REPLACE_ME';\n\n// Use the google client name in the Instant dashboard auth tab\nconst GOOGLE_CLIENT_NAME = 'REPLACE_ME';\n\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Uh oh! {error.message}</div>;\n  }\n  if (user) {\n    return <h1>Hello {user.email}!</h1>;\n  }\n\n  return <Login />;\n}\n\nfunction Login() {\n  const [nonce] = useState(crypto.randomUUID());\n\n  return (\n    <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>\n      <GoogleLogin\n        nonce={nonce}\n        onError={() => alert('Login failed')}\n        onSuccess={({ credential }) => {\n          db.auth\n            .signInWithIdToken({\n              clientName: GOOGLE_CLIENT_NAME,\n              idToken: credential,\n              // Make sure this is the same nonce you passed as a prop\n              // to the GoogleLogin button\n              nonce,\n            })\n            .catch((err) => {\n              alert('Uh oh: ' + err.body?.message);\n            });\n        }}\n      />\n    </GoogleOAuthProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Full Image Upload App with Instant Storage\nDESCRIPTION: Complete Next.js page component implementing image upload, display, and deletion using Instant's storage API.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport { init, InstaQLEntity } from '@instantdb/react';\nimport schema, { AppSchema } from '../instant.schema';\nimport React from 'react';\n\ntype InstantFile = InstaQLEntity<AppSchema, '$files'>\n\nconst APP_ID = process.env.NEXT_PUBLIC_INSTANT_APP_ID;\n\nconst db = init({ appId: APP_ID, schema });\n\n// `uploadFile` is what we use to do the actual upload!\n// the `$files` will automatically update once the upload is complete\nasync function uploadImage(file: File) {\n  try {\n    // Optional metadata you can set for uploads\n    const opts = {\n      // See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\n      // Default: 'application/octet-stream'\n      contentType: file.type,\n      // See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n      // Default: 'inline'\n      contentDisposition: 'attachment',\n    };\n    await db.storage.uploadFile(file.name, file, opts);\n  } catch (error) {\n    console.error('Error uploading image:', error);\n  }\n}\n\n// `delete` is what we use to delete a file from storage\n// `$files` will automatically update once the delete is complete\nasync function deleteImage(image: InstantFile) {\n  await db.storage.delete(image.path);\n}\n\nfunction App() {\n  // $files is the special namespace for querying storage data\n  const { isLoading, error, data } = db.useQuery({\n    $files: {\n      $: {\n        order: { serverCreatedAt: 'asc' },\n      },\n    },\n  });\n\n  if (isLoading) {\n    return null;\n  }\n\n  if (error) {\n    return <div>Error fetching data: {error.message}</div>;\n  }\n\n  // The result of a $files query will contain objects with\n  // metadata and a download URL you can use for serving files!\n  const { $files: images } = data\n  return (\n    <div className=\"box-border bg-gray-50 font-mono min-h-screen p-5 flex items-center flex-col\">\n      <div className=\"tracking-wider text-5xl text-gray-300 mb-8\">\n        Image Feed\n      </div>\n      <ImageUpload />\n      <div className=\"text-xs text-center py-4\">\n        Upload some images and they will appear below! Open another tab and see\n        the changes in real-time!\n      </div>\n      <ImageGrid images={images} />\n    </div>\n  );\n}\n\ninterface SelectedFile {\n  file: File;\n  previewURL: string;\n}\n\nfunction ImageUpload() {\n  const [selectedFile, setSelectedFile] = React.useState<SelectedFile | null>(null);\n  const [isUploading, setIsUploading] = React.useState(false);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n  const { previewURL } = selectedFile || {};\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const previewURL = URL.createObjectURL(file);\n      setSelectedFile({ file, previewURL });\n    }\n  };\n\n  const handleUpload = async () => {\n    if (selectedFile) {\n      setIsUploading(true);\n\n      await uploadImage(selectedFile.file);\n\n      URL.revokeObjectURL(selectedFile.previewURL);\n      setSelectedFile(null);\n      fileInputRef.current?.value && (fileInputRef.current.value = '');\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"mb-8 p-5 border-2 border-dashed border-gray-300 rounded-lg\">\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"font-mono\"\n      />\n      {isUploading ? (\n        <div className=\"mt-5 flex flex-col items-center\">\n          <div className=\"w-8 h-8 border-2 border-t-2 border-gray-200 border-t-green-500 rounded-full animate-spin\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Uploading...</p>\n        </div>\n      ) : previewURL && (\n        <div className=\"mt-5 flex flex-col items-center gap-3\">\n          <img src={previewURL} alt=\"Preview\" className=\"max-w-xs max-h-xs object-contain\" />\n          <button onClick={handleUpload} className=\"py-2 px-4 bg-green-500 text-white border-none rounded cursor-pointer font-mono\">\n            Upload Image\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ImageGrid({ images }: { images: InstantFile[] }) {\n  const [deletingIds, setDeletingIds] = React.useState<Set<string>>(new Set());\n\n  const handleDelete = async (image: InstantFile) => {\n    setDeletingIds((prev) => new Set([...prev, image.id]));\n\n    await deleteImage(image);\n\n    setDeletingIds((prev) => {\n      prev.delete(image.id);\n      return prev;\n    });\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5 w-full max-w-6xl\">\n      {images.map((image) => {\n        const isDeleting = deletingIds.has(image.id);\n        return (\n          <div key={image.id} className=\"border border-gray-300 rounded-lg overflow-hidden\">\n            <div className=\"relative\">\n              {/* $files entities come with a `url` property */}\n              <img src={image.url} alt={image.path} className=\"w-full h-64 object-cover\" />\n              {isDeleting && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                  <div className=\"w-8 h-8 border-2 border-t-2 border-gray-200 border-t-white rounded-full animate-spin\"></div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"p-3 flex justify-between items-center bg-white\">\n              <span>{image.path}</span>\n              <span onClick={() => handleDelete(image)} className=\"cursor-pointer text-gray-300 px-1\">\n                ùòü\n              </span>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React Native Color Picker App with InstantDB\nDESCRIPTION: Complete React Native application demonstrating InstantDB integration with a color picker interface. Includes schema definition, database initialization, real-time queries, and UI components.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/start-rn.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, i, InstaQLEntity } from \"@instantdb/react-native\";\nimport { View, Text, Button, StyleSheet } from \"react-native\";\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\n\n// Optional: You can declare a schema!\nconst schema = i.schema({\n  entities: {\n    colors: i.entity({\n      value: i.string(),\n    }),\n  },\n});\n\ntype Color = InstaQLEntity<typeof schema, \"colors\">;\n\nconst db = init({ appId: APP_ID, schema });\n\nconst selectId = \"4d39508b-9ee2-48a3-b70d-8192d9c5a059\";\n\nfunction App() {\n  const { isLoading, error, data } = db.useQuery({\n    colors: {\n      $: { where: { id: selectId } },\n    },\n  });\n  if (isLoading) {\n    return (\n      <View>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n  if (error) {\n    return (\n      <View>\n        <Text>Error: {error.message}</Text>\n      </View>\n    );\n  }\n\n  return <Main color={data.colors[0]} />;\n}\n\nfunction Main(props: { color?: Color }) {\n  const { value } = props.color || { value: \"lightgray\" };\n\n  return (\n    <View style={[styles.container, { backgroundColor: value  }]}>\n      <View style={[styles.contentSection]}>\n        <Text style={styles.header}>Hi! pick your favorite color</Text>\n        <View style={styles.spaceX4}>\n          {[\"green\", \"blue\", \"purple\"].map((c) => {\n            return (\n              <Button\n                title={c}\n                onPress={() => {\n                  db.transact(db.tx.colors[selectId].update({ value: c }));\n                }}\n                key={c}\n              />\n            );\n          })}\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  spaceY4: {\n    marginVertical: 16,\n  },\n  spaceX4: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginHorizontal: 16,\n  },\n  contentSection: {\n    backgroundColor: \"white\",\n    opacity: 0.8,\n    padding: 12,\n    borderRadius: 8,\n  },\n  header: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 16,\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Fetching All Entities of a Namespace in JavaScript\nDESCRIPTION: This snippet demonstrates how to query all entities of a namespace using InstaQL. It initializes the Instant database and uses the useQuery hook to fetch all goals.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n});\n\nfunction App() {\n  // Queries! üöÄ\n  const query = { goals: {} };\n  const { isLoading, error, data } = db.useQuery(query);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Instant Database with Schema in TypeScript\nDESCRIPTION: Shows how to initialize Instant Database with a schema for improved type safety and developer experience in TypeScript applications.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nimport schema from '../instant.schema.ts';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n  schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Complete Micro-blog Schema in TypeScript\nDESCRIPTION: Complete schema definition for a micro-blog application with users, profiles, posts, comments, and tags. Includes entity definitions, attributes with various constraints, and relationship links between entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nimport { i } from '@instantdb/react';\n\nconst _schema = i.schema({\n  entities: {\n    $users: i.entity({\n      email: i.string().unique().indexed(),\n    }),\n    profiles: i.entity({\n      nickname: i.string(),\n      createdAt: i.date(),\n    }),\n    posts: i.entity({\n      title: i.string(),\n      body: i.string(),\n      createdAt: i.date(),\n    }),\n    comments: i.entity({\n      body: i.string(),\n      createdAt: i.date(),\n    }),\n    tags: i.entity({\n      title: i.string(),\n    }),\n  },\n  links: {\n    postAuthor: {\n      forward: { on: 'posts', has: 'one', label: 'author' },\n      reverse: { on: 'profiles', has: 'many', label: 'authoredPosts' },\n    },\n    commentPost: {\n      forward: { on: 'comments', has: 'one', label: 'post' },\n      reverse: { on: 'posts', has: 'many', label: 'comments' },\n    },\n    commentAuthor: {\n      forward: { on: 'comments', has: 'one', label: 'author' },\n      reverse: { on: 'profiles', has: 'many', label: 'authoredComments' },\n    },\n    postsTags: {\n      forward: { on: 'posts', has: 'many', label: 'tags' },\n      reverse: { on: 'tags', has: 'many', label: 'posts' },\n    },\n    profileUser: {\n      forward: { on: 'profiles', has: 'one', label: '$user' },\n      reverse: { on: '$users', has: 'one', label: 'profile' },\n    },\n  },\n});\n\n// This helps Typescript display better intellisense\ntype _AppSchema = typeof _schema;\ninterface AppSchema extends _AppSchema {}\nconst schema: AppSchema = _schema;\n\nexport type { AppSchema };\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Implementing Online User Presence with usePresence Hook in TypeScript\nDESCRIPTION: Complete example of implementing a 'who's online' feature using Instant's usePresence hook. Shows how to publish presence data and display both the current user and other online peers.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\nconst db = init({ appId: APP_ID });\n\nconst room = db.room('chat', 'hacker-chat-room-id');\nconst randomId = Math.random().toString(36).slice(2, 6);\nconst user = {\n  name: `User#${randomId}`,\n};\n\nfunction App() {\n  const { user: myPresence, peers, publishPresence } = db.rooms.usePresence(room);\n\n  // Publish your presence to the room\n  useEffect(() => {\n    publishPresence({ name: user.name });\n  }, []);\n\n  if (!myPresence) {\n    return <p>App loading...</p>;\n  }\n\n  return (\n    <div>\n      <h1>Who's online?</h1>\n      <p>You are: {myPresence.name}</p>\n      <h2>Others:</h2>\n      <ul>\n      {/* Loop through all peers and render their names. Peers will have the\n          same properties as what you publish to the room. In this case, `name`\n          is the only property we're publishing. Use RoomSchema to get type\n          safety for your presence object.\n      */}\n        {Object.entries(peers).map(([peerId, peer]) => (\n          <li key={peerId}>{peer.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Results by Custom Indexed Fields in InstantDB\nDESCRIPTION: This snippet demonstrates how to order InstantDB query results by custom indexed fields. It shows fetching upcoming todos ordered by their due date in ascending order, retrieving only those with due dates in the future.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the todos that are due next\nconst query = {\n  todos: {\n    $: {\n      limit: 10,\n      where: {\n        dueDate: { $gt: Date.now() },\n      },\n      order: {\n        dueDate: 'asc',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: InstaQL Query Example for Relational Data\nDESCRIPTION: An example of Instant's InstaQL query language for accessing relational data. This query requests all users, their posts, and associated comments in a nested structure. InstaQL provides a GraphQL-like syntax for querying the database.\nSOURCE: https://github.com/instantdb/instant/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// give me all users, their posts and comments\n{\n  users: {\n    posts: {\n      comments: {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Query in InstantDB\nDESCRIPTION: This snippet demonstrates how to subscribe to a query for todo items using InstantDB's JavaScript SDK. The code shows how to handle both error and success responses, and renders the data when available.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/packages/core/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.subscribeQuery({ todos: {} }, (resp) => {\n  if (resp.error) {\n    renderError(resp.error.message);\n    return;\n  }\n  if (resp.data) {\n    render(resp.data); // wohoo!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset-based Pagination in React\nDESCRIPTION: This snippet provides a complete example of implementing offset-based pagination in a React application using InstaQL, including functions to load next and previous pages.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nconst [pageNumber, setPageNumber] = React.useState(1);\n\nconst pageSize = 10;\n\nconst query = {\n  todos: {\n    $: {\n      limit: pageSize,\n      offset: pageSize * (pageNumber - 1),\n    },\n  },\n};\n\nconst { isLoading, error, data } = db.useQuery(query);\n\n// Load the next page by increasing the page number, which will\n// increase the offset by the page size.\nconst loadNextPage = () => {\n  setPageNumber(pageNumber + 1);\n};\n\n// Load the previous page by decreasing the page number, which will\n// decrease the offset by the page size.\nconst loadPreviousPage = () => {\n  setPageNumber(pageNumber - 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Web Redirect Authentication Flow with InstantDB\nDESCRIPTION: Complete example showing how to implement Google authentication using the redirect flow with InstantDB. This approach uses a custom link instead of Google's styled buttons.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport React, { useState } from 'react';\nimport { init } from '@instantdb/react';\n\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID });\n\nconst url = db.auth.createAuthorizationURL({\n  // Use the google client name in the Instant dashboard auth tab\n  clientName: 'REPLACE_ME',\n  redirectURL: window.location.href,\n});\n\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Uh oh! {error.message}</div>;\n  }\n  if (user) {\n    return <h1>Hello {user.email}!</h1>;\n  }\n\n  return <Login />;\n}\n\nfunction Login() {\n  return <a href={url}>Log in with Google</a>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Users and Todos in InstantDB\nDESCRIPTION: This TypeScript snippet defines a schema with users and todos entities, establishing a relationship between them. It includes unique and indexed fields and defines one-to-many relationships.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n// Here we define users, todos, and a link between them.\nimport { i } from '@instantdb/core';\n\nconst _schema = i.schema({\n  entities: {\n    $users: i.entity({\n      email: i.string().unique().indexed(),\n    }),\n    todos: i.entity({\n      label: i.string(),\n    }),\n  },\n  links: {\n    userTodos: {\n      forward: {\n        on: 'todos',\n        has: 'one',\n        label: 'owner',\n      },\n      reverse: {\n        on: '$users',\n        has: 'many',\n        label: 'ownedTodos',\n      },\n    },\n  },\n});\n\n// This helps Typescript display nicer intellisense\ntype _AppSchema = typeof _schema;\ninterface AppSchema extends _AppSchema {}\nconst schema: AppSchema = _schema;\n\nexport type { AppSchema };\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In Popup Function with Apple and Instant\nDESCRIPTION: JavaScript function that handles the Apple authentication popup flow and then authenticates with Instant using the received ID token and a nonce for security.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function signInPopup() {\n  let nonce = crypto.randomUUID();\n\n  // authenticate with Apple\n  let resp = await AppleID.auth.signIn({\n    nonce: nonce,\n    usePopup: true,\n  });\n\n  // authenticate with Instant\n  await db.auth.signInWithIdToken({\n    clientName: '<clientName>',\n    idToken: resp.authorization.id_token,\n    nonce: nonce,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Transactions for Creating Multiple Entities in JavaScript\nDESCRIPTION: This snippet demonstrates how to batch a large number of entity creations (3000 goals) into smaller transaction groups (100 goals each) to avoid hitting transaction limits and timeouts. It creates batches, processes them, and handles any remaining items.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst batchSize = 100; // doing 100 txs should be pretty safe\nconst createGoals = async (total) => {\n  let goals = [];\n  const batches = [];\n\n  // iterate through all your goals and create batches\n  for (let i = 0; i < total; i++) {\n    const goalNumber = i + 1;\n    goals.push(\n      db.tx.goals[id()].update({ goalNumber, title: `Goal ${goalNumber}` }),\n    );\n\n    // We have enough goals to create a batch\n    if (goals.length >= batchSize) {\n      batches.push(goals);\n      goals = []; // reset goals for the next batch\n    }\n  }\n\n  // Add any remaining goals to the last batch\n  if (goals.length) {\n    batches.push(goals);\n  }\n\n  // Now that you have your batches, transact them\n  for (const batch of batches) {\n    await db.transact(batch);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Entity with Multiple Data Types\nDESCRIPTION: Shows how to create an entity with various data types including strings, numbers, booleans, arrays, and objects.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(\n  db.tx.goals[id()].update({\n    priority: 'none',\n    isSecret: true,\n    value: 10,\n    aList: [1, 2, 3],\n    anObject: { foo: 'bar' },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Native Google Sign-in Implementation with React Native\nDESCRIPTION: Complete example showing how to implement native Google authentication in a React Native app using @react-native-google-signin/google-signin and InstantDB. It demonstrates the full flow from initializing the Google client to handling the authentication response.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { init } from '@instantdb/react-native';\nimport {\n  GoogleSignin,\n  GoogleSigninButton,\n} from '@react-native-google-signin/google-signin';\n\nconst APP_ID = '__APP_ID__';\nconst db = init({ appId: APP_ID });\n\nGoogleSignin.configure({\n  scopes: ['https://www.googleapis.com/auth/drive.readonly'],\n  // See https://react-native-google-signin.github.io/docs/original#configure\n  iosClientId: 'YOUR_IOS_CLIENT_ID',\n});\n\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n\n  let content;\n  if (isLoading) {\n    content = <Text>Loading...</Text>;\n  } else if (error) {\n    content = <Text>Uh oh! {error.message}</Text>;\n  } else if (user) {\n    content = <Text>Hello {user.email}!</Text>;\n  } else {\n    content = <Login />;\n  }\n\n  return <View style={styles.container}>{content}</View>;\n}\n\nfunction Login() {\n  return (\n    <GoogleSigninButton\n      size={GoogleSigninButton.Size.Wide}\n      color={GoogleSigninButton.Color.Dark}\n      onPress={async () => {\n        // 1. Sign in to Google\n        await GoogleSignin.hasPlayServices();\n        const userInfo = await GoogleSignin.signIn();\n        const idToken = userInfo.data?.idToken;\n\n        if (!idToken) {\n          console.error('no ID token present!');\n          return;\n        }\n        // 2. Use your token, and sign into InstantDB!\n        try {\n          const res = await db.auth.signInWithIdToken({\n            // The unique name you gave the OAuth client when you\n\n\n```\n\n----------------------------------------\n\nTITLE: Querying Data with InstaQL in JavaScript\nDESCRIPTION: An example of an InstaQL query to retrieve team data with related tasks and their owners. InstaQL provides a simple way to express relational queries that work offline and apply changes instantly.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  teams: {\n    $: {where: {id: 1}},\n    tasks: {owner: {}}\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Associations in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch a specific entity in a namespace along with its related associations using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        id: healthId,\n      },\n    },\n    todos: {},\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Defining Instant Rules in TypeScript\nDESCRIPTION: This snippet demonstrates how to define permission rules for a 'todos' namespace using Instant's Rule Language in TypeScript. It shows how to set view, create, update, and delete permissions, as well as binding custom rules.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.perms.ts\nimport type { InstantRules } from '@instantdb/react';\n\nconst rules = {\n  todos: {\n    allow: {\n      view: 'auth.id != null',\n      create: 'isOwner',\n      update: 'isOwner',\n      delete: 'isOwner',\n    },\n    bind: ['isOwner', 'auth.id != null && auth.id == data.creatorId'],\n  },\n} satisfies InstantRules;\n\nexport default rules;\n```\n\n----------------------------------------\n\nTITLE: Impersonating Users for Permission-Respecting Operations\nDESCRIPTION: Shows how to use the asUser function to make queries or transactions on behalf of users while respecting permissions, either by email, auth token, or as a guest.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Scope by their email\nconst scopedDb = db.asUser({ email: 'alyssa_p_hacker@instantdb.com' });\n// Or with their auth token\nconst token = db.auth.createToken('alyssa_p_hacker@instantdb.com');\nconst scopedDb = db.asUser({ token });\n// Or use the db as a guest!\nconst scopedDb = db.asUser({ guest: true });\n// Queries and transactions will run with those permissions\nawait scopedDb.query({ logs: {} });\n```\n\n----------------------------------------\n\nTITLE: Using the tx Proxy Object Format in InstantDB\nDESCRIPTION: This snippet shows the format for using the db.tx proxy object to create transaction chunks for commit. It explains the structure, including namespace labels, entity identifiers, actions (update, merge, delete, link, unlink), and the appropriate data for each action type.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndb.tx.NAMESPACE_LABEL[ENTITY_IDENTIFIER].ACTION(ACTION_SPECIFIC_DATA)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Instant Storage API\nDESCRIPTION: Examples of using the storage.uploadFile method to upload files with different path options and metadata.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// use the file's current name as the path\nawait db.storage.uploadFile(file.name, file);\n\n// or, give the file a custom name\nconst path = `${user.id}/avatar.png`;\nawait db.storage.uploadFile(path, file);\n\n// or, set the content type and content disposition\nconst path = `${user.id}/orders/${orderId}.pdf`;\nawait db.storage.uploadFile(path, file, {\n  contentType: 'application/pdf',\n  contentDisporition: `attachment; filename=\"${orderId}-confirmation.pdf\"`,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Authentication with Instant in React/Next.js\nDESCRIPTION: Complete React component example showing how to integrate Clerk authentication with Instant in a Next.js application. It demonstrates signing in with a Clerk token, creating an Instant session, and handling sign-out flow for both services.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/clerk.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport {\n  useAuth,\n  ClerkProvider,\n  SignInButton,\n  SignedIn,\n  SignedOut,\n} from '@clerk/nextjs';\nimport { init } from '@instantdb/react';\nimport { useEffect } from 'react';\n\n// Instant app\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID });\n\n// Use the clerk client name you set in the Instant dashboard auth tab\nconst CLERK_CLIENT_NAME = 'REPLACE_ME';\n\nfunction ClerkSignedInComponent() {\n  const { getToken, signOut } = useAuth();\n\n  const signInToInstantWithClerkToken = async () => {\n    // getToken gets the jwt from Clerk for your signed in user.\n    const idToken = await getToken();\n\n    if (!idToken) {\n      // No jwt, can't sign in to instant\n      return;\n    }\n\n    // Create a long-lived session with Instant for your clerk user\n    // It will look up the user by email or create a new user with\n    // the email address in the session token.\n    db.auth.signInWithIdToken({\n      clientName: CLERK_CLIENT_NAME,\n      idToken: idToken,\n    });\n  };\n\n  useEffect(() => {\n    signInToInstantWithClerkToken();\n  }, []);\n\n  const { isLoading, user, error } = db.useAuth();\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Error signing in to Instant! {error.message}</div>;\n  }\n  if (user) {\n    return (\n      <div>\n        <p>Signed in with Instant through Clerk!</p>{' '}\n        <button\n          onClick={() => {\n            // First sign out of Instant to clear the Instant session.\n            db.auth.signOut().then(() => {\n              // Then sign out of Clerk to clear the Clerk session.\n              signOut();\n            });\n          }}\n        >\n          Sign out\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <button onClick={signInToInstantWithClerkToken}>\n        Sign in to Instant\n      </button>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <ClerkProvider>\n      <SignedOut>\n        <SignInButton />\n      </SignedOut>\n      <SignedIn>\n        <ClerkSignedInComponent />\n      </SignedIn>\n    </ClerkProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Matching with $ilike in JavaScript\nDESCRIPTION: Demonstrates the use of $ilike operator for case-insensitive matching in queries, returning goals with todos containing a specific word regardless of case.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        'todos.title': { $ilike: '%stand%' },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": standupId,\n      \"title\": \"Perform standup!\",\n    },\n    {\n      \"id\": standId,\n      \"title\": \"Stand up a food truck.\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the '$gt' comparison operator in InstantDB queries to filter results based on numeric field values. It retrieves todos with time estimates greater than 24 hours, showing how to apply numeric comparisons.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        timeEstimateHours: { $gt: 24 },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Avoiding Timeouts with Large Transaction Batches\nDESCRIPTION: Shows how to handle large transactions to avoid timeouts. Large transactions should be broken into smaller batches, and individual transactions should not be executed in a loop.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { id } from '@instantdb/react';\n\nconst txs = [];\nfor (let i = 0; i < 1000; i++) {\n  txs.push(\n    db.tx.todos[id()].update({\n      text: `Todo ${i}`,\n      done: false,\n    }),\n  );\n}\n\n// ‚ùå Bad: This will likely lead to a timeout!\nawait db.transact(txs);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { id } from '@instantdb/react';\n\n// ‚ùå Bad: This fire 1000 transactions at once and will lead to multiple\ntimeouts!;\nfor (let i = 0; i < 1000; i++) {\n  db.transact(\n    db.tx.todos[id()].update({\n      text: `Todo ${i}`,\n      done: false,\n    }),\n  );\n}\n\nawait db.transact(txs);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Batch large operations\nimport { id } from '@instantdb/react';\n\nconst batchSize = 100;\nconst createManyTodos = async (count) => {\n  for (let i = 0; i < count; i += batchSize) {\n    const batch = [];\n\n    // Create up to batchSize transactions\n    for (let j = 0; j < batchSize && i + j < count; j++) {\n      batch.push(\n        db.tx.todos[id()].update({\n          text: `Todo ${i + j}`,\n          done: false\n        })\n      );\n    }\n\n    // Execute this batch\n    await db.transact(batch);\n  }\n};\n\n// Create 1000 todos in batches\ncreateManyTodos(1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Reactions with Instant Hooks in React\nDESCRIPTION: This snippet demonstrates how to use Instant's usePublishTopic and useTopicEffect hooks to create a live reaction feature. It includes emoji broadcasting and animation functionality.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { init } from '@instantdb/react';\nimport { RefObject, createRef, useRef } from 'react';\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\n\n// Set up room schema\nconst emoji = {\n  fire: 'üî•',\n  wave: 'üëã',\n  confetti: 'üéâ',\n  heart: '‚ù§Ô∏è',\n} as const;\n\ntype EmojiName = keyof typeof emoji;\n\nconst db = init({\n  appId: APP_ID,\n});\n\nconst room = db.room('main');\n\nexport default function InstantTopics() {\n  // Use publishEmoji to broadcast to peers listening to `emoji` events.\n  const publishEmoji = db.rooms.usePublishTopic(room, 'emoji');\n\n  // Use useTopicEffect to listen for `emoji` events from peers\n  // and animate their emojis on the screen.\n  db.rooms.useTopicEffect(room, 'emoji', ({ name, directionAngle, rotationAngle }) => {\n    if (!emoji[name]) return;\n\n    animateEmoji(\n      { emoji: emoji[name], directionAngle, rotationAngle },\n      elRefsRef.current[name].current\n    );\n  });\n\n  const elRefsRef = useRef<{\n    [k: string]: RefObject<HTMLDivElement>;\n  }>(refsInit);\n\n  return (\n    <div className={containerClassNames}>\n      <div className=\"flex gap-4\">\n        {emojiNames.map((name) => (\n          <div className=\"relative\" key={name} ref={elRefsRef.current[name]}>\n            <button\n              className={emojiButtonClassNames}\n              /* We sent an emoji! Let's animate and broadcast it! */\n              onClick={() => {\n                const params = {\n                  name,\n                  rotationAngle: Math.random() * 360,\n                  directionAngle: Math.random() * 360,\n                };\n\n                /* Animate the emoji on our screen */\n                animateEmoji(\n                  {\n                    emoji: emoji[name],\n                    rotationAngle: params.rotationAngle,\n                    directionAngle: params.directionAngle,\n                  },\n                  elRefsRef.current[name].current\n                );\n\n                /* Broadcast our emoji to our peers! */\n                publishEmoji(params);\n              }}\n            >\n              {emoji[name]}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Below are helper functions and styles used to animate the emojis\n\nconst emojiNames = Object.keys(emoji) as EmojiName[];\n\nconst refsInit = Object.fromEntries(\n  emojiNames.map((name) => [name, createRef<HTMLDivElement>()])\n);\n\nconst containerClassNames =\n  'flex h-screen w-screen items-center justify-center overflow-hidden bg-gray-200 select-none';\n\nconst emojiButtonClassNames =\n  'rounded-lg bg-white p-3 text-3xl shadow-lg transition duration-200 ease-in-out hover:-translate-y-1 hover:shadow-xl';\n\nfunction animateEmoji(\n  config: { emoji: string; directionAngle: number; rotationAngle: number },\n  target: HTMLDivElement | null\n) {\n  if (!target) return;\n\n  const rootEl = document.createElement('div');\n  const directionEl = document.createElement('div');\n  const spinEl = document.createElement('div');\n\n  spinEl.innerText = config.emoji;\n  directionEl.appendChild(spinEl);\n  rootEl.appendChild(directionEl);\n  target.appendChild(rootEl);\n\n  style(rootEl, {\n    transform: `rotate(${config.directionAngle * 360}deg)`,\n    position: 'absolute',\n    top: '0',\n    left: '0',\n    right: '0',\n    bottom: '0',\n    margin: 'auto',\n    zIndex: '9999',\n    pointerEvents: 'none',\n  });\n\n  style(spinEl, {\n    transform: `rotateZ(${config.rotationAngle * 400}deg)`,\n    fontSize: `40px`,\n  });\n\n  setTimeout(() => {\n    style(directionEl, {\n      transform: `translateY(40vh) scale(2)`,\n      transition: 'all 400ms',\n      opacity: '0',\n    });\n  }, 20);\n\n  setTimeout(() => rootEl.remove(), 800);\n}\n\nfunction style(el: HTMLElement, styles: Partial<CSSStyleDeclaration>) {\n  Object.assign(el.style, styles);\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring InstantDB Connection Status in JavaScript and React\nDESCRIPTION: This JavaScript code demonstrates how to listen to InstantDB connection status changes in both vanilla JavaScript and React. It maps connection status values to more user-friendly states for display purposes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Vanilla JS\nconst unsub = db.subscribeConnectionStatus((status) => {\n  const statusMap = {\n    connecting: 'authenticating',\n    opened: 'authenticating',\n    authenticated: 'connected',\n    closed: 'closed',\n    errored: 'errored',\n  };\n\n  const connectionState = statusMap[status] || 'unexpected state';\n  console.log('Connection status:', connectionState);\n});\n\n// React/React Native\nfunction App() {\n  const statusMap = {\n    connecting: 'authenticating',\n    opened: 'authenticating',\n    authenticated: 'connected',\n    closed: 'closed',\n    errored: 'errored',\n  };\n  const status = db.useConnectionStatus();\n\n  const connectionState = statusMap[status] || 'unexpected state';\n  return <div>Connection state: {connectionState}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Initialization with Schema Definition\nDESCRIPTION: An example of initializing InstantDB with TypeScript, including a schema definition for auto-completion and type safety. The schema defines the structure of entities like todos with their respective field types.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/init.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, i } from '@instantdb/react';\n\n// Instant app\nconst APP_ID = '__APP_ID__';\n\nconst schema = i.schema({\n  entities: {\n    todos: i.entity({\n      text: i.string(),\n      done: i.boolean(),\n      createdAt: i.number(),\n    }),\n  },\n});\n\nconst db = init({ appId: APP_ID, schema });\n```\n\n----------------------------------------\n\nTITLE: Uploading Files in React Native with InstantDB using TypeScript\nDESCRIPTION: This snippet demonstrates how to upload a file in React Native using InstantDB, including converting a local file to a File object.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, InstaQLEntity } from '@instantdb/react-native';\nimport schema, { AppSchema } from '../instant.schema';\nimport * as FileSystem from 'expo-file-system';\n\nconst APP_ID = process.env.EXPO_PUBLIC_INSTANT_APP_ID;\n\nconst db = init({ appId: APP_ID, schema });\n\nconst localFilePath = 'file:///var/mobile/Containers/Data/my_file.m4a';\n\nconst fileInfo = await FileSystem.getInfoAsync(localFilePath);\n\nif (!fileInfo.exists) {\n  throw new Error(`File does not exist at path: ${localFilePath}`);\n}\n\n// Convert the local file to a File object\nconst res = await fetch(fileInfo.uri);\nconst blob = await res.blob();\nconst file = new File([blob], payload.recordingId, { type: 'audio/x-m4a' });\n\nawait db.storage.uploadFile('my_file.m4a', file);\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Chat with Instant in React\nDESCRIPTION: A simple example of a real-time chat application built with Instant's React SDK. The code demonstrates reading messages from the database, writing new messages, and rendering the UI. It features automatic real-time updates, multiplayer functionality, and offline support.\nSOURCE: https://github.com/instantdb/instant/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§ Real-time Chat\n// ----------------------------------\n// * Updates instantly\n// * Multiplayer\n// * Works offline\n\nimport { init, tx, id } from \"@instantdb/react\";\n\nconst db = init({ \n  appId: process.env.NEXT_PUBLIC_APP_ID,\n});\n\nfunction Chat() {\n  // 1. Read\n  const { isLoading, error, data } = db.useQuery({\n    messages: {},\n  });\n\n  // 2. Write\n  const addMessage = (message) => {\n    db.transact(tx.messages[id()].update(message));\n  };\n\n  // 3. Render!\n  return <UI data={data} onAdd={addMessage} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Flexible Initialization Pattern for InstantDB\nDESCRIPTION: A recommended pattern for initializing InstantDB by exporting a reference from a utility file. This approach maintains a single connection regardless of how many times init is called with the same app ID.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/init.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// util/instant.js\nimport { init } from '@instantdb/react';\n\nconst APP_ID = '__APP_ID__';\nexport const db = init({ appId: APP_ID });\n\n// component.js\nimport { db } from './util/instant';\n\nfunction MyComponent() {\n  // do some instant magic ü™Ñ\n  db.useQuery({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in InstantDB\nDESCRIPTION: This snippet shows how to order query results in InstantDB using the 'order' key in the option map. It demonstrates ordering todos by their creation time in descending order, with a limit of 10 results.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      limit: 10,\n      // Similar to limit, order is limited to top-level namespaces right now\n      order: {\n        serverCreatedAt: 'desc',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading and Linking Files in InstantDB using JavaScript\nDESCRIPTION: This snippet demonstrates how to upload a file and link it to a profile entity in InstantDB.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function uploadImage(file: File) {\n  try {\n    // Create an explicit upload path\n    const path = `${user.id}/avatar`;\n    // Upload the file\n    const { data } = await db.storage.uploadFile(path, file);\n    // Link it to a profile\n    await db.transact(db.tx.profiles[profileId].link({ avatar: data.id }));\n  } catch (error) {\n    console.error('Error uploading image:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing InstantDB with Schema for TypeSafety in TypeScript\nDESCRIPTION: Code showing how to initialize InstantDB with a schema file to provide automatic type safety for queries and transactions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nimport schema from '../instant.schema.ts';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n  schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Using CEL Expressions for Complex Permissions in JSON\nDESCRIPTION: This JSON snippet showcases the use of CEL (Common Expression Language) expressions to define complex permission rules for view, create, update, and delete actions on a 'todos' namespace.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"todos\": {\n    \"allow\": {\n      \"view\": \"auth.id != null\",\n      \"create\": \"auth.id in data.ref('creator.id')\",\n      \"update\": \"!(newData.title == data.title)\",\n      \"delete\": \"'joe@instantdb.com' in data.ref('users.email')\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using merge for Nested Object Updates\nDESCRIPTION: Shows how to update nested objects without overwriting unspecified fields. Use merge instead of update for nested objects to preserve existing data.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: This will overwrite the entire preferences object\ndb.transact(\n  db.tx.profiles[userId].update({\n    preferences: { theme: 'dark' }, // Any other preferences will be lost\n  }),\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Update nested values without losing other data\ndb.transact(db.tx.profiles[userId].merge({\n  preferences: {\n    theme: \"dark\"\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Verifying User Authentication Tokens with Instant DB in Express.js\nDESCRIPTION: This snippet demonstrates how to create an Express.js endpoint that verifies a user's authentication token using db.auth.verifyToken. It checks the token from the request headers and returns an appropriate response based on authentication status.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/custom_endpoint', async (req, res) => {\n  // verify the token this user passed in\n  const user = await db.auth.verifyToken(req.headers['token']);\n  if (!user) {\n    return res.status(400).send('Uh oh, you are not authenticated');\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with InstantDB Admin SDK\nDESCRIPTION: Demonstrates how to initialize the InstantDB admin client with credentials and perform a basic query. The example shows setting up the admin connection with an app ID and admin token, then querying nested data structures.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/packages/admin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, tx, id } from '@instantdb/admin';\n\nconst adminDB = init({\n  appId: 'my-instant-app-id',\n  adminToken: process.env.INSTANT_APP_ADMIN_TOKEN,\n});\n\nconst data = await adminDB.query(\n  { bookshelves: { books: {} } }, // wohoo!\n);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Composite Key Integrity with InstantDB Permissions\nDESCRIPTION: This JavaScript snippet shows how to use permissions rules to ensure composite key integrity in InstantDB. It validates that the latLong field always correctly reflects the combination of latitude and longitude values during create and update operations.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst rules = {\n  locations: {\n    allow: {\n      create: \"(data.latitude + '_' + data.longitude) == data.latLong\",\n      update: \"(newData.latitude + '_' + newData.longitude) == newData.latLong\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in React Native\nDESCRIPTION: JavaScript React Native code that implements Apple authentication and then authenticates with Instant using the received identity token. Includes error handling for canceled sign-in attempts.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst [nonce] = useState('' + Math.random());\ntry {\n  // sign in with Apple\n  const credential = await AppleAuthentication.signInAsync({\n    requestedScopes: [\n      AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n      AppleAuthentication.AppleAuthenticationScope.EMAIL,\n    ],\n    nonce: nonce,\n  });\n\n  // pass identityToken to Instant\n  db.auth\n    .signInWithIdToken({\n      clientName: '<clientName>',\n      idToken: credential.identityToken,\n      nonce: nonce,\n    })\n    .catch((err) => {\n      console.log('Error', err.body?.message, err);\n    });\n} catch (e) {\n  if (e.code === 'ERR_REQUEST_CANCELED') {\n    // handle that the user canceled the sign-in flow\n  } else {\n    // handle other errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Schema with Permissions in TypeScript\nDESCRIPTION: Defines permission rules that prevent schema modifications at runtime through client-side transactions, making the schema safe from unwanted changes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.perms.ts\nimport type { InstantRules } from '@instantdb/react';\n\nconst rules = {\n  attrs: {\n    allow: {\n      $default: 'false',\n    },\n  },\n} satisfies InstantRules;\n\nexport default rules;\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Limits with Permissions in InstantDB\nDESCRIPTION: This TypeScript snippet shows how to implement permissions that limit the number of entities a user can create. In this case, users are limited to creating at most 2 todos, using a size check on the related entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InstantRules } from '@instantdb/react';\n// instant.perms.ts\n// And now we reference the `owner` link for todos to check the number\n// of todos a user has created.\n// (Note): Make sure the `owner` link is already defined in the schema.\n// before you can reference it in the permissions.\nconst rules = {\n  todos: {\n    allow: {\n      create: \"size(data.ref('owner.todos.id')) <= 2\",\n    },\n  },\n} satisfies InstantRules;\n\nexport default rules;\n```\n\n----------------------------------------\n\nTITLE: Initializing Admin SDK for Server-side Access\nDESCRIPTION: Shows how to initialize Instant for server-side use with the Admin SDK. Requires an appId and adminToken for authentication against the admin API.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, id } from '@instantdb/admin';\n\nconst db = init({\n  appId: INSTANT_APP_ID,\n  adminToken: process.env.INSTANT_APP_ADMIN_TOKEN,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication Endpoint with Admin SDK\nDESCRIPTION: Shows how to create a custom sign-in endpoint that generates authentication tokens for users using auth.createToken.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/sign-in', async (req, res) => {\n  // your custom logic for signing users in\n  // ...\n  // on success, create and return a token\n  const token = await db.auth.createToken(email);\n  return res.status(200).send({ token });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up a new Instant project with Next.js\nDESCRIPTION: This shell command sequence creates a new Next.js project with Tailwind CSS, installs the Instant React package, and starts the development server.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app instant-demo --tailwind --yes\ncd instant-demo\nnpm i @instantdb/react\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the 'or' operator in InstantDB queries to find entities that match any of the specified conditions. It filters todos where the title matches either of the provided values.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        or: [{ title: 'Code a bunch' }, { title: 'Review PRs' }],\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Correct Approach for User Profile Updates\nDESCRIPTION: Proper way to store and update user-related information by using a linked profile namespace instead of directly modifying the $users namespace.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Update linked profile instead\ndb.transact(db.tx.profiles[profileId].update({ displayName: \"Alice\" }));\n```\n\n----------------------------------------\n\nTITLE: User Data Management Operations in InstantDB\nDESCRIPTION: Examples of creating todos and updating user profiles with proper linking to the current user.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/users.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst addTodo = (newTodo, currentUser) => {\n  const newId = id();\n  db.transact(\n    tx.todos[newId]\n      .update({ text: newTodo, userId: currentUser.id, completed: false })\n      .link({ owner: currentUser.id }),\n  );\n};\n\nconst updateNick = (newNick, currentUser) => {\n  const profileId = lookup('email', currentUser.email);\n  db.transact([\n    tx.profiles[profileId]\n      .update({ userId: currentUser.id, nickname: newNick })\n      .link({ user: currentUser.id }),\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Composite Keys in InstantDB Schema\nDESCRIPTION: This JavaScript snippet demonstrates how to implement composite uniqueness constraints in InstantDB by creating a dedicated composite column. It defines a locations entity with latitude and longitude fields plus a unique latLong compound field.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i } from '@instantdb/core';\nconst _schema = i.schema({\n  entities: {\n    // ...\n    locations: i.entity({\n      latitude: i.number().indexed(),\n      longitude: i.number().indexed(),\n      latLong: i.string().unique() // <-- our composite column\n    }),\n  },\n```\n\n----------------------------------------\n\nTITLE: Using queryOnce for One-Time Data Fetching in JavaScript\nDESCRIPTION: Demonstrates how to use the queryOnce method for fetching data once without creating a subscription, useful for initial page loads or checking data availability.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = { todos: {} };\nconst { data } = await db.queryOnce(query);\n// returns the same data as useQuery, but without the isLoading and error fields\n```\n\n----------------------------------------\n\nTITLE: Basic Initialization of InstantDB in JavaScript\nDESCRIPTION: A simple example of initializing InstantDB at the root of your application. This pattern creates a database instance with your app ID that can be used throughout your application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/init.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\n// Instant app\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID });\n\nfunction App() {\n  return <Main />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entities with update Method in InstantDB\nDESCRIPTION: Shows how to properly create new entities in InstantDB. There is no create method; use update to create new entities with generated IDs.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: `create` does not exist, use `update` instead!\ndb.transact(db.tx.todos[id()].create({ text: \"Buy groceries\" }));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Always use `update` to create new entities\ndb.transact(db.tx.todos[id()].update({\n  text: \"Properly generated ID todo\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Entity Creation and Update Example\nDESCRIPTION: Shows the process of creating and subsequently updating an entity with new values.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst eatId = id();\ndb.transact(\n  db.tx.goals[eatId].update({ priority: 'top', lastTimeEaten: 'Yesterday' }),\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(db.tx.goals[eatId].update({ lastTimeEaten: 'Today' }));\n```\n\n----------------------------------------\n\nTITLE: Getting Current Authentication State in InstantDB\nDESCRIPTION: Example of using getAuth to retrieve the current authentication state without subscribing to changes. This is useful for one-time checks of authentication status.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/magic-codes.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await db.getAuth();\nconsole.log('logged in as', user.email);\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields in Nested Relations\nDESCRIPTION: Demonstrates how to use the 'fields' parameter with nested relations, allowing fine-grained control over the data returned for both parent and child entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      fields: ['title'],\n    },\n    todos: {\n      $: {\n        fields: ['id'],\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": standupId,\n      \"title\": \"Perform standup!\",\n      \"todos\": [{\"id\": writeJokesId}, {\"id\": goToOpenMicId}]\n    },\n    {\n      \"id\": standId,\n      \"title\": \"Stand up a food truck.\",\n      \"todos\": [{\"id\": learnToCookId}, {\"id\": buyATruckId}]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with Admin SDK\nDESCRIPTION: Demonstrates how to retrieve a user record by email, ID, or refresh token using the auth.getUser function.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await db.auth.getUser({ email: 'alyssa_p_hacker@instantdb.com' });\nconst user = await db.auth.getUser({\n  id: userId,\n});\nconst user = await db.auth.getUser({\n  refresh_token: userRefreshToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Pagination with queryOnce in JavaScript\nDESCRIPTION: Shows how to implement pagination using the queryOnce method, allowing for fetching specific subsets of data with limit and offset parameters.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      limit: 10,\n      offset: 10,\n    },\n  },\n};\n\nconst { data, pageInfo } = await db.queryOnce(query);\n// pageInfo behaves the same as with useQuery\n```\n\n----------------------------------------\n\nTITLE: Using $not Operator in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the '$not' operator in InstantDB queries to find entities where a field doesn't match a specific value. It returns todos where the location is not 'work', including those where the field is null or undefined.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        location: { $not: 'work' },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Correct Use of Query in Admin SDK\nDESCRIPTION: Proper way to perform server-side querying using the admin SDK with db.query. This example shows fetching todos with error handling using try-catch blocks.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Server-side querying\nconst fetchTodos = async () => {\n  try {\n    const data = await db.query({ todos: {} });\n    const { todos } = data;\n    console.log(`Found ${todos.length} todos`);\n    return todos;\n  } catch (error) {\n    console.error('Error fetching todos:', error);\n    throw error;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Local IDs with React Hooks in InstantDB\nDESCRIPTION: This JavaScript snippet shows how to use the useLocalId hook in React to create persistent local IDs that remain consistent between page refreshes. It also demonstrates how different argument values produce different IDs.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nconst db = init({ appId: 'your-app-id' });\n\nfunction App() {\n  const id = db.useLocalId('guest');\n  if (!id) return;\n  console.log(id, 'stays the same even if you refresh');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Permissions in JSON\nDESCRIPTION: This JSON snippet shows how to explicitly set permissions for view, create, update, and delete actions on a 'todos' namespace. All actions are set to true in this example.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"todos\": {\n    \"allow\": {\n      \"view\": \"true\",\n      \"create\": \"true\",\n      \"update\": \"true\",\n      \"delete\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstantDB Schema with User Relationships\nDESCRIPTION: Defines a complete schema for a todo application including user relationships, profiles, roles, and todos with their respective links and attributes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/users.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i } from '@instantdb/react';\n\nconst _schema = i.schema({\n  entities: {\n    $users: i.entity({\n      email: i.any().unique().indexed(),\n    }),\n    profiles: i.entity({\n      nickname: i.string(), // We can't add this directly to `$users`\n      userId: i.string().unique(),\n    }),\n    roles: i.entity({\n      type: i.string().unique(), // We couldn't add this directly to `$users` either\n    }),\n    todos: i.entity({\n      text: i.string(),\n      userId: i.string(),\n      completed: i.boolean(),\n    }),\n  },\n  links: {\n    // `$users` is in the reverse direction for all these links!\n    todoOwner: {\n      forward: { on: 'todos', has: 'one', label: 'owner' },\n      reverse: { on: '$users', has: 'many', label: 'todos'},\n    },\n    userRoles: {\n      forward: { on: 'roles', has: 'many', label: 'users' },\n      reverse: { on: '$users', has: 'one', label: 'role' },\n    },\n    userProfiles: {\n      forward: { on: 'profiles', has: 'one', label: 'user' },\n      reverse: { on: '$users', has: 'one', label: 'profile' },\n    },\n  },\n});\n\ntype _AppSchema = typeof _schema;\ninterface AppSchema extends _AppSchema {}\nconst schema: AppSchema = _schema;\n\nexport type { AppSchema };\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Adding Multiplayer Cursors with Instant's Cursors Component in React\nDESCRIPTION: This snippet shows how to use Instant's Cursors component to add multiplayer cursor functionality to a React application. It demonstrates basic usage and customization options.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { init, Cursors } from '@instantdb/react';\n\n// Instant app\nconst APP_ID = \"__APP_ID__\";\n\nconst db = init({ appId: APP_ID });\n\nconst room = db.room(\"chat\", \"main\");\n\nexport default function App() {\n  return (\n    <Cursors room={room} className=\"h-full w-full\" userCursorColor=\"tomato\">\n      <div style={{ width: \"100vw\", height: \"100vh\" }}>\n        Open two tabs, and move your cursor around!\n      </div>\n    </Cursors>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Composite Key Values in InstantDB Transactions\nDESCRIPTION: This JavaScript function shows how to set a composite key value when creating entities in InstantDB. It creates a location with latitude and longitude coordinates while setting a combined latLong value to enforce uniqueness.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createLocation({ latitude, longitude }) {\n  db.transact(\n    db.tx.locations[id()].update({\n      latitude,\n      longitude,\n      latLong: `${latitude}_${longitude}`,\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Admin SDK with Schema for Type Safety\nDESCRIPTION: Demonstrates how to add a schema when initializing the Admin SDK to enable autocompletion and type safety for queries and transactions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, id } from '@instantdb/admin';\nimport schema from '../instant.schema.ts';\n\nconst db = init({\n  appId: process.env.INSTANT_APP_ID,\n  adminToken: process.env.INSTANT_APP_ADMIN_TOKEN,\n  schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of $isNull:true Query\nDESCRIPTION: This snippet shows the expected result format when using the '$isNull:true' operator in an InstantDB query. It displays todos where the location field is either null or undefined, capturing both explicit null values and missing fields.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"todos\": [\n    {\n      \"id\": readId,\n      \"title\": \"Read\",\n      \"location\": null\n    },\n    {\n      \"id\": napId,\n      \"title\": \"Take a nap\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing InstantDB Connection\nDESCRIPTION: Sets up the initial connection to InstantDB with an app ID and demonstrates basic entity creation.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, id } from '@instantdb/react';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n});\n\n// transact! üî•\ndb.transact(db.tx.goals[id()].update({ title: 'eat' }));\n```\n\n----------------------------------------\n\nTITLE: Initializing an Instant Room for Real-time Features in TypeScript\nDESCRIPTION: Basic setup for initializing an Instant database connection and creating a room for real-time interactions. This demonstrates how to obtain a room reference for sharing presence and topics.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\n// Instant app\nconst APP_ID = '__APP_ID__';\n\n// db will export all the presence hooks you need!\nconst db = init({ appId: APP_ID });\n\n// Specifying a room type and room id gives you the power to\n// restrict sharing to a specific room. However you can also just use\n// `db.room()` to share presence and topics to an Instant generated default room\nconst roomId = 'hacker-chat-room-id';\nconst room = db.room('chat', roomId);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Local IDs in InstantDB\nDESCRIPTION: This JavaScript code shows how to create multiple different local IDs by passing different arguments to the useLocalId hook. Each ID will remain consistent across refreshes but be different from each other.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst id1 = db.useLocalId('device');\nconst id2 = db.useLocalId('session');\nconsole.log(\n  id1,\n  id2,\n  'are different. But each will stay the same even if you refresh',\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Associated Files in InstantDB using JavaScript\nDESCRIPTION: This snippet demonstrates how to query files associated with a user's profile in InstantDB, using the defined schema relationships.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// app/page.tsx\n// ---------------\n// Find files associated with a profile\nconst { user } = db.useAuth();\nconst query = {\n  profiles: {\n    $: {\n      where: {\"$user.id\": user.id}\n    },\n    $files: {},\n  },\n});\n// Defer until we've fetched the user and then query associated files\nconst { isLoading, error, data } = db.useQuery(user ? query : null);\n```\n\n----------------------------------------\n\nTITLE: Querying Related Entities via Links\nDESCRIPTION: Examples showing how to query related entities in both directions using the defined links. The first query gets posts with their authors, while the second gets profiles with all their authored posts.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// This queries all posts with their author\nconst query1 = {\n  posts: {\n    author: {},\n  },\n};\n\n// This queries profiles, with all of their authoredPosts!\nconst query2 = {\n  profiles: {\n    authoredPosts: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Room Presence Data with Admin SDK\nDESCRIPTION: Shows how to query for presence data in a specific room using the rooms.getPresence function, which can be useful for features like notifications based on user online status.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await db.rooms.getPresence('chat', 'room-123');\nconsole.log(Object.values(data));\n// [{\n//     'peer-id': '...',\n//     user: { id: '...', email: 'foo@bar.com', ... },\n//     data: { typing: true, ... },\n//   },\n// ];\n```\n\n----------------------------------------\n\nTITLE: Transforming Normalized Data into View-Ready Graph Structure\nDESCRIPTION: A JavaScript function that transforms normalized data from an in-memory store into a graph structure suitable for rendering a team tasks page. The function joins team, task, and user data together for display.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction dataForTaskPage(store, teamId) {\n  return {\n    ...store.teams[teamId],\n    tasks: store.tasksForTeam(teamId).map((task) => {\n      return { ...task, owner: store.users[task.ownerId] };\n    }),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of OR Operator Query\nDESCRIPTION: This snippet shows the expected result format when using the 'or' operator in an InstantDB query. It displays the returned data structure containing filtered todos that match either of the specified title conditions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data);\n{\n  \"todos\": [\n    {\n      \"id\": focusId,\n      \"title\": \"Code a bunch\"\n    },\n    {\n      \"id\": reviewPRsId,\n      \"title\": \"Review PRs\"\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Namespaces in JavaScript\nDESCRIPTION: This snippet shows how to fetch multiple namespaces (goals and todos) in a single query using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = { goals: {}, todos: {} };\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Using Utility Types with Instant Database in TypeScript\nDESCRIPTION: Shows how to use utility types provided by Instant Database for improved type checking and intellisense in TypeScript, including InstaQLParams, InstaQLResult, and InstaQLEntity.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InstaQLParams, InstaQLResult, InstaQLEntity } from '@instantdb/react';\nimport { AppSchema } from '../instant.schema.ts';\n\n// `query` typechecks against our schema!\nconst query = {\n  goals: { todos: {} },\n} satisfies InstaQLParams<AppSchema>;\n\ntype GoalsTodosResult = InstaQLResult<AppSchema, { goals: { todos: {} } }>;\n\ntype Todo = InstaQLEntity<AppSchema, 'todos'>;\n\ntype TodoWithGoals = InstaQLEntity<AppSchema, 'todos', { goals: {} }>;\n```\n\n----------------------------------------\n\nTITLE: Generating Local IDs for Non-Authenticated Users in InstantDB JavaScript\nDESCRIPTION: Shows how to use db.useLocalId to generate IDs for non-authenticated users, which is useful for implementing guest-mode features.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/markdown/mar2025.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.useLocalId()\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Where Conditions in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using multiple conditions in the 'where' clause of an InstantDB query. It filters todos that are both completed and associated with a specific goal title, showing how to combine multiple criteria.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        completed: true,\n        'goals.title': 'Get promoted!',\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Schema Implementation\nDESCRIPTION: Shows how to implement type safety using schemas and utility types for custom update and link functions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpdateParams, LinkParams } from '@instantdb/react';\nimport { AppSchema } from '../instant.schema.ts';\n\ntype EntityTypes = keyof AppSchema['entities'];\n\nfunction myCustomUpdate<EType extends EntityTypes>(\n  etype: EType,\n  args: UpdateParams<AppSchema, EType>,\n) {\n  // ..\n}\n\nfunction myCustomLink<EType extends EntityTypes>(\n  etype: EType,\n  args: LinkParams<AppSchema, EType>,\n) {\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes for an Entity in Instant Schema\nDESCRIPTION: Example of defining attributes (properties/fields) for a posts entity. Shows how to declare title, body, and createdAt attributes with their respective types.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nconst _schema = i.schema({\n  entities: {\n    // ...\n    posts: i.entity({\n      title: i.string(),\n      body: i.string(),\n      createdAt: i.date(),\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using data.ref Correctly in Permissions\nDESCRIPTION: Shows how to properly use data.ref to reference linked data in permission rules. This example demonstrates referencing a post author in a comment permission rule.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: This will throw an error!\n{\n  \"comments\": {\n    \"allow\": {\n      \"update\": \"auth.id in data.post.author.id\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Permission based on linked data\n{\n  \"comments\": {\n    \"allow\": {\n      \"update\": \"auth.id in data.ref('post.author.id')\"  // Allow post authors to update comments\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data with Admin SDK's Transact Function\nDESCRIPTION: Shows how to create or update data using the transact function in the Admin SDK. Returns a transaction ID on success.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await db.transact([db.tx.todos[id()].update({ title: 'Get fit' })]);\nconsole.log('New todo entry made for with tx-id', res['tx-id']);\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema Changes to Production\nDESCRIPTION: Evaluates and publishes your schema definitions to production, migrating your data model based on changes in instant.schema.ts.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest push schema\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema for Instant Rooms and Presence in TypeScript\nDESCRIPTION: Creating a schema definition for Instant rooms that defines structure for presence data and topic payloads. This schema enables type checking for room interactions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nimport { i } from '@instantdb/core';\n\nconst _schema = i.schema({\n  // ...\n  rooms: {\n    // 1. `chat` is the `roomType`\n    chat: {\n      // 2. Choose what presence looks like here\n      presence: i.entity({\n        name: i.string(),\n        status: i.string(),\n      }),\n      topics: {\n        // 3. You can define payloads for different topics here\n        sendEmoji: i.entity({\n          emoji: i.string(),\n        }),\n      },\n    },\n  },\n});\n\n// This helps Typescript display better intellisense\ntype _AppSchema = typeof _schema;\ninterface AppSchema extends _AppSchema {}\nconst schema: AppSchema = _schema;\n\nexport type { AppSchema };\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Filtering Namespace by Associated Values in JavaScript\nDESCRIPTION: This snippet demonstrates how to filter goals based on their associated todos' attributes using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        'todos.title': 'Code a bunch',\n      },\n    },\n    todos: {},\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Sign In with Magic Code in InstantDB\nDESCRIPTION: Implementation of verifying a magic code for user authentication. This method submits the user's email and provided code to InstantDB for verification and handles authentication errors.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/magic-codes.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.auth.signInWithMagicCode({ email: sentEmail, code }).catch((err) => {\n  inputEl.value = '';\n  alert('Uh oh :' + err.body?.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Admin SDK\nDESCRIPTION: Demonstrates how to retrieve data using the Admin SDK's query function, which fires a query once and returns a result asynchronously, unlike the React SDK's live queries.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await db.query({ goals: {}, todos: {} });\nconst { goals, todos } = data;\n```\n\n----------------------------------------\n\nTITLE: Handling One-to-One Relationships with data.ref\nDESCRIPTION: Shows how to properly compare values in one-to-one relationships. Even in one-to-one relationships, data.ref returns a CEL list that must be checked with the 'in' operator.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: data.ref always returns a CEL list. This will throw an error!\n\"view\": \"auth.id == data.ref('owner.id')\"\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Extracting the first element from a one-to-one relationship\n\"view\": \"auth.id in data.ref('owner.id')\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Link Between Entities\nDESCRIPTION: Example of defining a link between posts and profiles entities, specifying both forward and reverse relationships. This creates a one-to-many relationship between profiles and posts.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npostAuthor: {\n  forward: { on: \"posts\", has: \"one\", label: \"author\" },\n  reverse: { on: \"profiles\", has: \"many\", label: \"authoredPosts\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Instant Database Schema in TypeScript\nDESCRIPTION: Demonstrates how to define a schema for Instant Database using TypeScript, including entity definitions and relationships between entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i } from '@instantdb/react';\n\nconst _schema = i.schema({\n  entities: {\n    goals: i.entity({\n      title: i.string(),\n    }),\n    todos: i.entity({\n      title: i.string(),\n      text: i.string(),\n      done: i.boolean(),\n      createdAt: i.date(),\n      dueDate: i.date(),\n    }),\n  },\n  links: {\n    goalsTodos: {\n      forward: { on: 'goals', has: 'many', label: 'todos' },\n      reverse: { on: 'todos', has: 'many', label: 'goals' },\n    },\n  },\n});\n\n// This helps Typescript display better intellisense\ntype _AppSchema = typeof _schema;\ninterface AppSchema extends _AppSchema {}\nconst schema: AppSchema = _schema;\n\nexport type { AppSchema };\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Correct Syntax for Filtering on Associated Values\nDESCRIPTION: Proper way to filter entities based on properties of associated entities using dot notation in the where clause.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Find goals that have todos with a specific title\nconst query = {\n  goals: {\n    $: {\n      where: {\n        'todos.title': 'Go running',\n      },\n    },\n    todos: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Out in React Native\nDESCRIPTION: React Native button component that signs the user out of the Instant authentication system when pressed.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  title=\"Sign Out\"\n  onPress={async () => {\n    await db.auth.signOut();\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using AND Operator in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the 'and' operator in InstantDB queries to find entities that match multiple associated values. It searches for goals that have todos with both specified titles, requiring all conditions to be met.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        and: [\n          { 'todos.title': 'Drink protein' },\n          { 'todos.title': 'Go on a run' },\n        ],\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Implementing Friendship Fact-Based Storage for Undo/Redo in JavaScript\nDESCRIPTION: This snippet demonstrates a fact-based approach to storing friendship relationships to support undo/redo functionality. Instead of traditional deletion, it records both the creation and disconnection of friendships with timestamps, allowing the system to determine the current state based on the most recent fact.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { status: 'friends', friend_one_id: 1, friend_two_id: 2, at: 1000 },\n  { status: 'disconnected', friend_one_id: 1, friend_two_id: 2, at: 10001 },\n];\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with Null Links in InstantDB\nDESCRIPTION: This JavaScript code shows how to find entities that have no links using the $isNull query filter. In this example, it finds all posts that are not linked to an author.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.useQuery({\n  posts: {\n    $: {\n      where: {\n        'author.id': {\n          $isNull: true,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Namespace Nesting in Queries\nDESCRIPTION: Proper way to structure a query to fetch goals and their associated todos by nesting the todos namespace within goals.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Fetch goals and their associated todos\nconst query = { goals: { todos: {} };\n```\n\n----------------------------------------\n\nTITLE: Correcting Schema Label Conflicts in InstantDB\nDESCRIPTION: Shows how to avoid conflicts when defining relationship labels. The mistake is reusing the same label for different links, which causes conflicts in the reverse relationship attributes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: Conflicting labels\nconst _schema = i.schema({\n  links: {\n    postAuthor: {\n      forward: { on: 'posts', has: 'one', label: 'author' },\n      reverse: { on: 'profiles', has: 'many', label: 'posts' }, // Creates 'posts' attr\n    },\n    postEditor: {\n      forward: { on: 'posts', has: 'one', label: 'editor' },\n      reverse: { on: 'profiles', has: 'many', label: 'posts' }, // Conflicts!\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Unique labels for each relationship\nconst _schema = i.schema({\n  links: {\n    postAuthor: {\n      forward: { on: 'posts', has: 'one', label: 'author' },\n      reverse: { on: 'profiles', has: 'many', label: 'authoredPosts' }, // Unique\n    },\n    postEditor: {\n      forward: { on: 'posts', has: 'one', label: 'editor' },\n      reverse: { on: 'profiles', has: 'many', label: 'editedPosts' }, // Unique\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Associations in JavaScript\nDESCRIPTION: This snippet shows how to fetch goals and their related todos using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    todos: {},\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Handling System Namespace Links in InstantDB\nDESCRIPTION: Demonstrates the correct way to link with system namespaces in InstantDB. System namespaces should always be linked in the reverse direction, not the forward direction.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: System namespace in forward direction\nprofileUser: {\n  forward: { on: '$users', has: 'one', label: 'profile' },\n  reverse: { on: 'profiles', has: 'one', label: '$user' },\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: System namespace in reverse direction\nprofileUser: {\n  forward: { on: 'profiles', has: 'one', label: '$user' },\n  reverse: { on: '$users', has: 'one', label: 'profile' },\n},\n```\n\n----------------------------------------\n\nTITLE: Reactive SQL Query Implementation in JavaScript\nDESCRIPTION: Example of how a reactive SQL-like query could work in a client-side database, demonstrating automatic updates and reactive data fetching\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nuser = useQuery('SELECT * FROM users WHERE id = ?', 10);\n```\n\n----------------------------------------\n\nTITLE: Entity Linking Operations\nDESCRIPTION: Demonstrates how to create associations between entities using the link operation, including single and multiple links.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact([\n  db.tx.todos[workoutId].update({ title: 'Go on a run' }),\n  db.tx.goals[healthId]\n    .update({ title: 'Get fit!' })\n    .link({ todos: workoutId }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in InstantDB using JavaScript\nDESCRIPTION: This snippet shows how to delete a file in InstantDB using the db.storage.delete() method.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// This will delete the file at 'demo.png'\nawait db.storage.delete('demo.png');\n```\n\n----------------------------------------\n\nTITLE: Fetching Inverse Associations in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch inverse associations (todos with their related goals) using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    goals: {},\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Deferring Queries in JavaScript\nDESCRIPTION: This snippet demonstrates how to defer a query until a condition is met, such as waiting for a user to be logged in before fetching their todos.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isLoading, user, error } = db.useAuth();\n\nconst {\n  isLoading: isLoadingTodos,\n  error,\n  data,\n} = db.useQuery(\n  user\n    ? {\n        // The query will run once user is populated\n        todos: {\n          $: {\n            where: {\n              userId: user.id,\n            },\n          },\n        },\n      }\n    : // Otherwise skip the query, which sets `isLoading` to true\n      null,\n);\n```\n\n----------------------------------------\n\nTITLE: User Permission Rules Implementation\nDESCRIPTION: Demonstrates how to implement permission rules for user-specific data access and updates using both direct and referenced approaches.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/users.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  todos: {\n    bind: [\n      'isAdmin',\n      \"'admin' in auth.ref('$user.role.type')\",\n      'isOwner',\n      \"data.id in auth.ref('$user.todos.id')\",\n    ],\n    allow: {\n      update: 'isAdmin || isOwner',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator with data.ref Lists\nDESCRIPTION: Demonstrates how to properly check if a value exists in a list returned by data.ref. Since data.ref always returns a CEL list, the 'in' operator must be used instead of equality operators.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: data.ref returns a list! This will throw an error!\n\"view\": \"data.ref('admins.id') == auth.id\"\n```\n\nLANGUAGE: json\nCODE:\n```\n‚úÖ Good: Checking if a user is in a list of admins\n\"view\": \"auth.id in data.ref('admins.id')\"\n```\n\n----------------------------------------\n\nTITLE: Querying by a Unique Attribute\nDESCRIPTION: Example of querying an entity by a unique attribute. Unique attributes have special indexing which makes queries using them very fast.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = {\n  posts: {\n    $: {\n      where: {\n        // Since `slug` is unique, this query is üöÄ fast\n        slug: 'completing_sicp',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding an Index to an Attribute\nDESCRIPTION: Example of adding an index to the createdAt attribute to make queries based on this field faster. Indexed attributes allow for quick lookups without scanning all entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nconst _schema = i.schema({\n  entities: {\n    // ...\n    posts: i.entity({\n      createdAt: i.date().indexed(), // üî•,\n      // ...\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using $isNull:true in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the '$isNull:true' operator in InstantDB queries to find entities where a field is either null or undefined. It filters todos where the location field is missing or explicitly set to null.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        location: { $isNull: true },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Correct Syntax for OR Operator in Where Clause\nDESCRIPTION: Proper way to use the 'or' operator in a where clause by providing an array of filter conditions for finding todos that match any of the specified criteria.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ Good: Find todos that are either high priority OR due soon\nconst query = {\n  todos: {\n    $: {\n      where: {\n        or: [{ priority: 'high' }, { dueDate: { $lt: tomorrow } }],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cascade Delete for Links\nDESCRIPTION: Example of configuring cascade delete behavior for links. When a profile is deleted, all linked posts will also be deleted automatically if onDelete is set to cascade.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npostAuthor: {\n  forward: { on: \"posts\", has: \"one\", label: \"author\", onDelete: \"cascade\" },\n  reverse: { on: \"profiles\", has: \"many\", label: \"authoredPosts\" },\n}\n\n// this will delete profile and all linked posts\ndb.tx.profiles[user_id].delete();\n```\n\n----------------------------------------\n\nTITLE: Sending Magic Code for Authentication in InstantDB\nDESCRIPTION: Implementation of sending a magic code to a user's email for authentication. This method generates a code on InstantDB's backend and handles error cases if the email delivery fails.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/magic-codes.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.auth.sendMagicCode({ email }).catch((err) => {\n  alert('Uh oh :' + err.body?.message);\n  onSendEmail('');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining User Permissions Rules in InstantDB\nDESCRIPTION: Sets up basic permission rules for the $users namespace, restricting access to only allow users to view their own data while preventing create, delete and update operations.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/users.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { InstantRules } from \"@instantdb/react\";\n\nconst rules = {\n  $users: {\n    allow: {\n      view: 'auth.id == data.id',\n      create: 'false',\n      delete: 'false',\n      update: 'false',\n    },\n  },\n} satisfies InstantRules;\n\nexport default rules;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in JavaScript\nDESCRIPTION: This snippet shows how to implement pagination by limiting the number of items returned from a top-level namespace using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    // limit is only supported for top-level namespaces right now\n    // and not for nested namespaces.\n    $: { limit: 10 },\n  },\n};\n\nconst { isLoading, error, data, pageInfo } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Constraint to an Attribute\nDESCRIPTION: Example of adding a unique constraint to a slug attribute for friendly URLs. The unique constraint guarantees no two posts will have the same slug value.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nconst _schema = i.schema({\n  entities: {\n    // ...\n    posts: i.entity({\n      slug: i.string().unique(),\n      // ...\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of $in Operator Query\nDESCRIPTION: This snippet shows the expected result format when using the '$in' operator in an InstantDB query. It displays the returned data structure containing filtered todos with titles matching any value in the provided list.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"todos\": [\n    {\n      \"id\": focusId,\n      \"title\": \"Code a bunch\"\n    },\n    {\n      \"id\": reviewPRsId,\n      \"title\": \"Review PRs\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in InstaQL Query\nDESCRIPTION: Shows how to use the 'fields' parameter to select specific fields in a query, reducing data transfer and potentially improving performance.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      fields: ['status'],\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": standupId, // id will always be returned even if not specified\n      \"status\": \"in-progress\"\n    },\n    {\n      \"id\": standId,\n      \"status\": \"completed\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Files in InstantDB using JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch all files from earliest to latest upload using the $files namespace in InstantDB.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  $files: {\n    $: {\n      order: { serverCreatedAt: 'asc' },\n    },\n  },\n});\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Using Rule Parameters in JavaScript Transaction\nDESCRIPTION: This JavaScript snippet shows how to pass rule parameters to a transaction using the 'ruleParams' method. This allows for conditional updates based on specific parameters.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(\n  db.tx.docs[id].ruleParams({ knownDocId: id }).update({ title: 'eat' }),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Type Safety to Instant Rooms in TypeScript\nDESCRIPTION: Setting up type safety for Instant rooms by initializing with a schema. This ensures that presence data and topics are properly typed for better developer experience.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\nimport schema from '../instant.schema.ts';\n\n// Instant app\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID, schema });\n\nconst roomId = 'hacker-chat-room-id';\n// The `chat` room is typed automatically from schema!\nconst room = db.room('chat', roomId);\n```\n\n----------------------------------------\n\nTITLE: Generating Magic Codes for Custom Email Providers\nDESCRIPTION: Shows how to generate magic codes for authentication while using your own email provider to send them to users.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/custom-send-magic-code', async (req, res) => {\n  const { code } = await db.auth.generateMagicCode(req.body.email);\n  // Now you can use your email provider to send magic codes\n  await sendMyCustomMagicCodeEmail(req.body.email, code);\n  return res.status(200).send({ token });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Namespace in Instant Schema\nDESCRIPTION: Example of creating a namespace (entity) in Instant's schema. Namespaces are equivalent to tables in relational databases or collections in NoSQL databases.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nconst _schema = i.schema({\n  entities: {\n    posts: i.entity({\n      // ...\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of Multiple Where Conditions Query\nDESCRIPTION: This snippet shows the expected result format when using multiple where conditions in an InstantDB query. It displays the returned data structure containing filtered todos that match all specified conditions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"todos\": [\n    {\n      \"id\": focusId,\n      \"title\": \"Code a bunch\",\n      \"completed\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Date Fields with Comparison Operators in InstantDB\nDESCRIPTION: This snippet demonstrates querying date fields using comparison operators in InstantDB. It filters todos with due dates less than or equal to the specified date using the '$lte' operator, showing how to work with ISO 8601 date strings.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = '2024-11-26T15:25:00.054Z';\nconst query = {\n  todos: {\n    $: { where: { dueDate: { $lte: now } } },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Using $in Operator in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the '$in' operator in InstantDB queries as a shorthand for 'or' on a single key. It filters todos where the title is in the provided list of values, making it concise to query for multiple possible values.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        title: { $in: ['Code a bunch', 'Review PRs'] },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Defining a String Attribute in Instant Schema\nDESCRIPTION: Example showing how to type a specific attribute as a string. When an attribute is typed, Instant ensures all values conform to that type and provides TypeScript hints.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// instant.schema.ts\n\nconst _schema = i.schema({\n  entities: {\n    // ...\n    posts: i.entity({\n      title: i.string(),\n      // ...\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Presence Data with usePresence Key Selection in TypeScript\nDESCRIPTION: Using the optional second parameter of usePresence to filter which presence data is returned. This demonstrates how to optimize rendering by only listening for specific property changes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst room = db.room('chat', 'hacker-chat-room-id');\n\n// We only return the `status` value for each peer\n// We will _only_ trigger an update when a user's `status` value changes\nconst { user, peers, publishPresence } = db.rooms.usePresence(room, {\n  keys: ['status'],\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Attributes with data.ref in Permissions\nDESCRIPTION: Shows how to properly specify an attribute when using data.ref in permission rules. The last part of the string must be an attribute, not just a relationship.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: No attribute specified. This will throw an error!\n\"view\": \"auth.id in data.ref('author')\"\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Correctly using data.ref to reference a linked attribute\n\"view\": \"auth.id in data.ref('author.id')\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the Main Query Function in JavaScript Datalog Engine\nDESCRIPTION: Executes a complete query with find and where clauses. Uses queryWhere to find matching contexts and then actualizes the find clause by replacing variables with their bound values.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction query({ find, where }, db) {\n  const contexts = queryWhere(where, db);\n  return contexts.map((context) => actualize(context, find));\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Schema and Permissions from Production\nDESCRIPTION: Retrieves the latest schema and permissions from your production environment and generates updated local files.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest pull\n```\n\n----------------------------------------\n\nTITLE: Querying Goals with $like Operator in JavaScript\nDESCRIPTION: Demonstrates how to use the $like operator to find goals that end with a specific word. The query is case-sensitive and uses the '%' wildcard for pattern matching.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        title: { $like: '%promoted!' },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": workId,\n      \"title\": \"Get promoted!\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Entity in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch a specific goal using the 'where' keyword in InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        id: healthId,\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Multi-Pattern Datalog Query for Joins\nDESCRIPTION: A more complex query that finds the name of a director for a specific movie. It demonstrates how Datalog implements joins by using shared variables across multiple patterns.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  find: [?directorName],\n  where: [\n    [?movieId, movie/title, \"The Terminator\"],\n    [?movieId, movie/director, ?directorId],\n    [?directorId, person/name, ?directorName],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextJS Caching for InstantDB Admin Queries\nDESCRIPTION: This JavaScript snippet demonstrates how to control NextJS caching behavior with InstantDB admin queries. It shows examples of setting revalidation intervals and custom cache tags for precise cache control.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait adminDB.query(\n  { goals: {} },\n  {\n    fetchOpts: {\n      next: { revalidate: 3600 },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Write-Only Presence Hook in Instant TypeScript\nDESCRIPTION: Configuring a 'write-only' presence hook that won't trigger re-renders on presence changes. This is useful for components that only need to publish presence data without listening for updates.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Will not trigger re-renders on presence changes\nconst room = db.room('chat', 'hacker-chat-room-id');\n\nconst { publishPresence } = db.rooms.usePresence(room, {\n  peers: [],\n  user: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Backward Pagination with Cursors in InstantDB\nDESCRIPTION: This snippet shows how to implement backward pagination in InstantDB queries using the 'startCursor' in the 'before' field. It retrieves the last 10 items before the specified cursor, allowing navigation to previous pages.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      last: 10,\n      before: pageInfo?.todos?.startCursor,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Local IDs in InstantDB with JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to create persistent local IDs in InstantDB that remain the same between refreshes. It's useful for features like guest mode where you need a consistent identifier before user registration.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nconst db = init({ appId: 'your-app-id' });\n\nconst id = await db.getLocalId('guest');\n\nconsole.log(id, 'stays the same even if you refresh');\n```\n\n----------------------------------------\n\nTITLE: Creating an Indexed Database for JavaScript Datalog Engine\nDESCRIPTION: Constructs a database object with indexes for entities, attributes, and values. This enables faster query performance by allowing direct lookup instead of scanning all triples.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createDB(triples) {\n  return {\n    triples,\n    entityIndex: indexBy(triples, 0),\n    attrIndex: indexBy(triples, 1),\n    valueIndex: indexBy(triples, 2),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth Flow in Frontend\nDESCRIPTION: Complete example of a custom authentication flow, combining a backend endpoint and frontend implementation using signInWithToken.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { init } from '@instantdb/react';\n\nconst APP_ID = \"__APP_ID__\";\n\nconst db = init({ appId: APP_ID });\n\nasync function customSignIn(\n  email: string,\n  password: string\n): Promise<{ token: string }> {\n  const response = await fetch('your-website.com/api/sign-in', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  });\n  const data = await response.json();\n  return data;\n}\n\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Uh oh! {error.message}</div>;\n  }\n  if (user) {\n    return <div>Hello {user.email}!</div>;\n  }\n  return <Login />;\n}\n\nfunction Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.target.value);\n  };\n\n  const handleSignIn = async () => {\n    const data = await customSignIn(email, password); // initiate your custom sign in flow\n    db.auth.signInWithToken(data.token); // sign in with the token on success\n  };\n\n  return (\n    <div>\n      <input\n        type=\"email\"\n        placeholder=\"Enter your email\"\n        value={email}\n        onChange={handleEmailChange}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Enter your password\"\n        value={password}\n        onChange={handlePasswordChange}\n      />\n      <button onClick={handleSignIn}>Sign In</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using auth.ref with $user Prefix\nDESCRIPTION: Shows how to properly use auth.ref to reference the authenticated user's linked data. When using auth.ref, you must include the $user prefix in the reference path.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: This will throw an error!\n{\n  \"adminActions\": {\n    \"allow\": {\n      \"create\": \"'admin' in auth.ref('role.type')\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Checking user roles\n{\n  \"adminActions\": {\n    \"allow\": {\n      \"create\": \"'admin' in auth.ref('$user.role.type')\"  // Allow admins only\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Use of Comparison Operators on Indexed Attributes\nDESCRIPTION: Proper way to use comparison operators on indexed attributes for filtering entities by numeric values. This example filters todos by time estimate.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ Good: Find todos that take more than 2 hours\nconst query = {\n  todos: {\n    $: {\n      where: {\n        timeEstimate: { $gt: 2 },\n      },\n    },\n  },\n};\n\n// Available operators: $gt, $lt, $gte, $lte\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Tags for InstantDB Admin Queries\nDESCRIPTION: This JavaScript code shows how to set specific cache tags for InstantDB admin queries when using NextJS. This allows for granular cache invalidation based on specific data types or operations.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait adminDB.query(\n  { goals: {} },\n  {\n    fetchOpts: {\n      next: { tags: ['goals:all'] },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using String Literals with ref Functions\nDESCRIPTION: Shows that ref arguments must be string literals. You cannot use variables or string concatenation in ref arguments.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: This will throw an error!\n\"view\": \"auth.id in data.ref(someVariable + '.members.id')\"\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Using string literals for ref arguments\n\"view\": \"auth.id in data.ref('team.members.id')\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Associations in JavaScript\nDESCRIPTION: This snippet demonstrates how to filter the associated data (todos) of goals using InstaQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    todos: {\n      $: {\n        where: {\n          'todos.title': 'Go on a run',\n        },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Correct Approach for Querying User Profiles\nDESCRIPTION: Proper way to query user information by accessing the profiles namespace instead of directly querying the $users namespace, which allows viewing all profiles while respecting security constraints.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ Good: View all profiles\ndb.useQuery({ profiles: {} });\n```\n\n----------------------------------------\n\nTITLE: Using Variables in HTML Email Template for Instant Magic Code\nDESCRIPTION: This HTML snippet demonstrates how to use provided variables in a custom email template for Instant's magic code emails. It shows the usage of {user_email}, {app_title}, and {code} variables within an HTML structure.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/emails.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>Hi {user_email}, here's your code for {app_title}:</p>\n\n<strong>{code}</strong>\n```\n\n----------------------------------------\n\nTITLE: Entity Deletion Operations\nDESCRIPTION: Shows different ways to delete entities, including single entity deletion and bulk deletion of all entities in a namespace.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(db.tx.goals[eatId].delete());\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isLoading, error, data } = db.useQuery({ goals: {} });\nconst { goals } = data;\n// ...\n\ndb.transact(goals.map((g) => db.tx.goals[g.id].delete()));\n```\n\n----------------------------------------\n\nTITLE: Sample Response from InstaQL Query in JavaScript\nDESCRIPTION: Shows the structured object data returned by an InstaQL query. The response demonstrates how relational data is represented with nested objects representing the relationships between teams, tasks and owners.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  teams: [\n    {\n      id: 1,\n      name: 'Awesome Team',\n      tasks: [{ id: 3, title: 'Code', owner: [{ id: 1, name: 'Joe' }] }],\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using InstantDB via CDN in Plain HTML\nDESCRIPTION: This JSX snippet shows how to use InstantDB via CDN with unpkg in a plain HTML page without build steps. It loads the standalone UMD module and demonstrates how to initialize the database and create a message.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<!-- Load Instant via unpkg. Consider replacing `@latest` with current version  -->\n<script src=\"https://www.unpkg.com/@instantdb/core@latest/dist/standalone/index.umd.js\"></script>\n\n<!-- Use Instant like normal -->\n<script>\n  const { init, id } = instant;\n  const db = init({ appId: 'your-app-id' });\n\n  async function createMessage() {\n    await db.transact(\n      db.tx.messages[id()].update({\n        text: 'Hello world!'\n      })\n    );\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nested $like Query for Goals and Todos in JavaScript\nDESCRIPTION: Shows how to use the $like operator in a nested query to find goals that have todos containing a specific word in their title.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    $: {\n      where: {\n        'todos.title': { $like: '%standup%' },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": standupId,\n      \"title\": \"Perform standup!\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using fetchOpts with db.query for NextJS Caching\nDESCRIPTION: A reference to the options parameter with fetchOpts that can be passed to db.query to make it work with NextJS caching system.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/txt/mar2025.txt#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.query\n```\n\n----------------------------------------\n\nTITLE: Using $isNull:false in InstantDB Queries\nDESCRIPTION: This snippet demonstrates using the '$isNull:false' operator in InstantDB queries to find entities where a field has a defined, non-null value. It filters todos where the location field exists and is not null.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      where: {\n        location: { $isNull: false },\n      },\n    },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Logging Query Results in JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when querying all goals. It demonstrates the format of the response object.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": healthId,\n      \"title\": \"Get fit!\"\n    },\n    {\n      \"id\": workId,\n      \"title\": \"Get promoted!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Lists with data.ref\nDESCRIPTION: Demonstrates how to correctly check whether there are no linked entities. Shows several incorrect approaches and the proper way to check for empty lists with data.ref.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: `data.ref` returns a CEL list so checking against null will throw an error!\n\"view\": \"data.ref('owner.id') != null\"\n\n// ‚ùå Bad: `data.ref` is a CEL list and does not support `length`\n\"view\": \"data.ref('owner.id').length > 0\"\n\n// ‚ùå Bad: You must specify an attribute when using `data.ref`\n\"view\": \"data.ref('owner') != []\"\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Checking if the list is empty\n\"view\": \"data.ref('owner.id') != []\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with Admin SDK in InstantDB using TypeScript\nDESCRIPTION: This snippet shows how to delete single or multiple files using the InstantDB Admin SDK.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst filename = 'demo.txt';\nawait db.storage.delete(filename);\n\nconst images = ['images/1.png', 'images/2.png', 'images/3.png'];\nawait db.storage.deleteMany(images);\n```\n\n----------------------------------------\n\nTITLE: Logging File Data in InstantDB using JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when querying files in InstantDB, including file ID, path, URL, and content information.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"$files\": [\n    {\n      \"id\": fileId,\n      \"path\": \"demo.png\"\n      // You can use this URL to serve the file\n      \"url\": \"https://instant-storage.s3.amazonaws.com/...\",\n      \"content-type\": \"image/png\",\n      \"content-disposition\": \"attachment; filename=\\\"demo.png\\\"\",\n    },\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Permissions in JSON\nDESCRIPTION: This JSON snippet demonstrates how to use the '$default' key to set default permissions for all actions in a namespace. In this case, all permissions for 'todos' are set to false by default.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"todos\": {\n    \"allow\": {\n      \"$default\": \"false\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of AND Operator Query\nDESCRIPTION: This snippet shows the expected result format when using the 'and' operator in an InstantDB query. It displays the returned data structure containing filtered goals that have todos matching both specified conditions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": healthId,\n      \"title\": \"Get fit!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting Files in Instant Storage\nDESCRIPTION: Example showing how files with the same path will be overwritten when uploaded again, highlighting the need for unique paths if overwriting is not desired.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Uploads a file to 'demo.png'\nawait db.storage.uploadFile('demo.png', file);\n\n// Overwrites the file at 'demo.png'\nawait db.storage.uploadFile('demo.png', file);\n```\n\n----------------------------------------\n\nTITLE: Merge Operation with Nested Objects\nDESCRIPTION: Demonstrates the merge operation for handling nested JSON objects and preventing data loss in concurrent updates.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// User 1 saves {'0-0': 'red'}\ndb.transact(db.tx.games[gameId].merge({ state: { '0-0': 'red' } }));\n\n// User 2 saves {'0-1': 'blue'}\ndb.transact(db.tx.games[gameId].merge({ state: { '0-1': 'blue' } }));\n```\n\n----------------------------------------\n\nTITLE: Deleting Users with Admin SDK\nDESCRIPTION: Shows how to delete a user record by email, ID, or refresh token, with a note that this only deletes the user record and associated data with cascade on delete.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedUser = await db.auth.deleteUser({\n  email: 'alyssa_p_hacker@instantdb.com',\n});\nconst deletedUser = await db.auth.deleteUser({\n  id: userId,\n});\nconst deletedUser = await db.auth.deleteUser({\n  refresh_token: userRefreshToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying by Date Attribute\nDESCRIPTION: Example of querying posts by their creation date. Without indexing, this query would become slower as the number of posts increases.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst rocketChopsticks = '2024-10-13T00:00:00Z';\nconst query = { posts: { $: { where: { createdAt: rocketChopsticks } } } };\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Admin SDK in InstantDB using TypeScript\nDESCRIPTION: This snippet shows how to upload a file using the InstantDB Admin SDK, which requires a Buffer instead of a File object.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\n\nasync function upload(filepath: string) {\n  const buffer = fs.readFileSync(filepath);\n  await db.storage.upload('images/demo.png', buffer, {\n    contentType: 'image/png',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Apple Auth for Web Popup Flow\nDESCRIPTION: JavaScript code to initialize Apple authentication in a web application using the popup flow. Requires the Services ID from Apple Developer account setup.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppleID.auth.init({\n  clientId: '<Services ID>',\n  scope: 'name email',\n  redirectURI: window.location.href,\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Out Users with Admin SDK\nDESCRIPTION: Demonstrates how to log out users from all sessions or a specific session using email, ID, or refresh token.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// All sessions for this email sign out\nawait db.auth.signOut({ email: 'alyssa_p_hacker@instantdb.com' });\n// All sessions for this user id sign out\nconst user = await db.auth.signOut({\n  id: userId,\n});\n// Just sign out the session for this refresh token\nawait db.auth.signOut({\n  refresh_token: userRefreshToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Google Sign-in Callback Function for Non-React Applications\nDESCRIPTION: Callback function implementation for handling Google Sign-in response in non-React web applications. This function receives the Google authentication response and uses InstantDB to complete the sign-in process.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleSignInWithGoogle(response) {\n  await db.auth.signInWithIdToken({\n    // Use the google client name in the Instant dashboard auth tab\n    clientName: 'REPLACE_ME',\n    idToken: response.credential,\n    // make sure this is the same nonce you set in data-nonce\n    nonce: 'REPLACE_ME',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: InstaQL Query Example\nDESCRIPTION: Demonstrates the InstaQL query syntax for retrieving nested team and task data\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  teams: {\n    $: {where: {id: 1}},\n    tasks: {owner: {}},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up User Data Before Deletion\nDESCRIPTION: Demonstrates how to manually clean up user-associated data before deleting a user account when there's data that might not be deleted by cascade operations.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { goals, todos } = await db.query({\n  goals: { $: { where: { creator: userId } } },\n  todos: { $: { where: { creator: userId } } },\n});\n\nawait db.transact([\n  ...goals.map((item) => db.tx.goals[item.id].delete()),\n  ...todos.map((item) => tx.todos[item.id].delete()),\n]);\n// Now we can delete the user\nawait db.auth.deleteUser({ id: userId });\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Authentication Token for CI Environments\nDESCRIPTION: Creates and displays an authentication token for use in CI environments without requiring web-based validation.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest login -p\n```\n\n----------------------------------------\n\nTITLE: Implementing Typing Indicators with Instant's useTypingIndicator Hook in React\nDESCRIPTION: This snippet demonstrates how to use Instant's useTypingIndicator hook to add typing indicators to a chat-style application. It includes presence syncing and custom typing indicator rendering.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/presence-and-topics.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\n\nimport { init } from '@instantdb/react';\n\n// Instant app\nconst APP_ID = '__APP_ID__';\n\nconst db = init({ appId: APP_ID });\n\nconst randomId = Math.random().toString(36).slice(2, 6);\nconst user = {\n  name: `User#${randomId}`,\n};\n\nconst room = db.room('chat', 'hacker-chat-room-id');\n\nexport default function InstantTypingIndicator() {\n  // 1. Publish your presence in the room.\n  db.rooms.useSyncPresence(room, user);\n\n  // 2. Use the typing indicator hook\n  const typing = db.rooms.useTypingIndicator(room, 'chat');\n\n  const onKeyDown = (e) => {\n    // 3. Render typing indicator\n    typing.inputProps.onKeyDown(e);\n\n    // 4. Optionally run your own onKeyDown logic\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      console.log('Message sent:', e.target.value);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen gap-3 p-2\">\n      <div key=\"main\" className=\"flex flex-1 flex-col justify-end\">\n        <textarea\n          onBlur={typing.inputProps.onBlur}\n          onKeyDown={onKeyDown}\n          placeholder=\"Open two tabs and start typing...\"\n          className=\"w-full rounded-md border-gray-300 p-2 text-sm\"\n        />\n        <div className=\"truncate text-xs text-gray-500\">\n          {typing.active.length ? typingInfo(typing.active) : <>&nbsp;</>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction typingInfo(users) {\n  if (users.length === 0) return null;\n  if (users.length === 1) return `${users[0].name} is typing...`;\n  if (users.length === 2)\n    return `${users[0].name} and ${users[1].name} are typing...`;\n\n  return `${users[0].name} and ${users.length - 1} others are typing...`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset-based Pagination in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement offset-based pagination using InstaQL, allowing for fetching subsequent pages of data.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      limit: 10,\n      // similar to `limit`, `offset` is only supported for top-level namespaces\n      offset: 10,\n    },\n  },\n};\n\nconst { isLoading, error, data, pageInfo } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Logging Multiple Namespace Query Results in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of the data returned when querying multiple namespaces (goals and todos).\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [...],\n  \"todos\": [\n    {\n      \"id\": focusId,\n      \"title\": \"Code a bunch\"\n    },\n    {\n      \"id\": proteinId,\n      \"title\": \"Drink protein\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Sign-in Package for React Native\nDESCRIPTION: Command to install the React Native Google Sign-in package for implementing native Google authentication in an Expo app.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install @react-native-google-signin/google-signin\n```\n\n----------------------------------------\n\nTITLE: Initializing an Instant App with CLI\nDESCRIPTION: The init command guides you through picking an Instant app and generates schema and permissions files for your project.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Correct Where Operator Placement\nDESCRIPTION: Proper way to use the 'where' operator by placing it inside the $ operator for filtering entities by specific criteria.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ Good: Fetch a specific goal by ID\nconst query = {\n  goals: {\n    $: {\n      where: {\n        id: 'goal-1',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Instant Database Connection with Local Server\nDESCRIPTION: JavaScript code snippet demonstrating how to initialize a connection to a local Instant database server for development purposes, specifying the app ID and local server URLs.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst APP_ID = '<your app id from your own server>'\nconst db = init({\n  appId: APP_ID,\n  apiURI: \"http://localhost:8888\",\n  websocketURI: \"ws://localhost:8888/runtime/session\",\n});\n```\n\n----------------------------------------\n\nTITLE: Simple JavaScript Object Query\nDESCRIPTION: This snippet shows a simple and intuitive way to express a nested data query in JavaScript. It's contrasted with the more complex SQL equivalent to highlight the potential for more user-friendly query languages.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/sync_future.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  goals: {\n    todos: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Expo Web Auth Implementation with InstantDB\nDESCRIPTION: Complete example showing how to implement Google authentication in a React Native app using Expo's AuthSession and InstantDB. It demonstrates the full flow from initializing auth to handling the redirect.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { init } from '@instantdb/react-native';\nimport {\n  makeRedirectUri,\n  useAuthRequest,\n  useAutoDiscovery,\n} from 'expo-auth-session';\n\nconst APP_ID = '__APP_ID__';\nconst db = init({ appId: APP_ID });\n\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n\n  let content;\n  if (isLoading) {\n    content = <Text>Loading...</Text>;\n  } else if (error) {\n    content = <Text>Uh oh! {error.message}</Text>;\n  } else if (user) {\n    content = <Text>Hello {user.email}!</Text>;\n  } else {\n    content = <Login />;\n  }\n\n  return <View style={styles.container}>{content}</View>;\n}\n\nfunction Login() {\n  const discovery = useAutoDiscovery(db.auth.issuerURI());\n  const [request, _response, promptAsync] = useAuthRequest(\n    {\n      // The unique name you gave the OAuth client when you\n      // registered it on the Instant dashboard\n      clientId: 'YOUR_INSTANT_AUTH_CLIENT_NAME',\n      redirectUri: makeRedirectUri(),\n    },\n    discovery,\n  );\n\n  return (\n    <Button\n      title=\"Log in\"\n      disabled={!request}\n      onPress={async () => {\n        try {\n          const res = await promptAsync();\n          if (res.type === 'error') {\n            alert(res.error || 'Something went wrong');\n          }\n          if (res.type === 'success') {\n            await db.auth\n              .exchangeOAuthCode({\n                code: res.params.code,\n                codeVerifier: request.codeVerifier,\n              })\n              .catch((e) => alert(e.body?.message || 'Something went wrong'));\n          } else {\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }}\n    ></Button>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized querySingle with Indexing in JavaScript Datalog Engine\nDESCRIPTION: Enhances querySingle to use indexes for more efficient querying. Instead of scanning all triples, it uses relevantTriples to find a subset of triples that could potentially match the pattern.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport function querySingle(pattern, db, context) {\n  return relevantTriples(pattern, db)\n    .map((triple) => matchPattern(pattern, triple, context))\n    .filter((x) => x);\n}\n```\n\n----------------------------------------\n\nTITLE: InstaQL Mutation Example\nDESCRIPTION: Shows how mutations are performed in InstaQL using JavaScript objects\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntransact([\n  tx.tasks[taskId]\n    .update({title: \"New Task\"})\n    .link({owner: ownerId}}\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Client and Error Handling in React Native\nDESCRIPTION: Authentication configuration with client ID and token handling, including error logging and component closure.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclientId: 'YOUR_INSTANT_AUTH_CLIENT_NAME',\nidToken,\n});\nconsole.log('logged in!', res);\n} catch (error) {\nconsole.log('error signing in', error);\n}\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pushing Permission Changes to Production\nDESCRIPTION: Publishes your permission rules to production based on changes in instant.perms.ts.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest push perms\n```\n\n----------------------------------------\n\nTITLE: Declarative Entity Permissions Model\nDESCRIPTION: Proposes a declarative approach to entity permissions that would be enforced at the database level, ensuring consistent security across all data access paths.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nUser {\n  view: [\n    IAllowIfAdmin(),\n    IAllowIfFriend(),\n    IAllowIfSameUser(),\n  ]\n  write: [\n    IAllowIfAdmin(),\n    IAllowIfSameUser(),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting New Attributes Creation with Permissions in InstantDB\nDESCRIPTION: This JSON snippet demonstrates how to prevent the creation of new attributes in your InstantDB application by setting restrictive permissions. This is useful when you want to lock down your schema.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/patterns.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attrs\": { \"allow\": { \"$default\": \"false\" } }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sign In with Apple Button for Web\nDESCRIPTION: Simple button implementation that triggers the Apple authentication popup flow when clicked.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={signInPopup}>Sign In with Apple</button>\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions in InstantDB using JSON\nDESCRIPTION: This snippet demonstrates different permission settings for file operations in InstantDB, including allowing public access, authenticated access, and user-specific access.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$files\": {\n    \"allow\": {\n      \"view\": \"true\",\n      \"create\": \"true\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$files\": {\n    \"allow\": {\n      \"view\": \"isLoggedIn\",\n      \"create\": \"isLoggedIn\"\n    },\n    \"bind\": [\"isLoggedIn\", \"auth.id != null\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$files\": {\n    \"allow\": {\n      \"view\": \"isOwner\",\n      \"create\": \"isOwner\"\n    },\n    \"bind\": [\"isOwner\", \"data.path.startsWith(auth.id + '/')\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Direct Modification of $users Namespace\nDESCRIPTION: Example of incorrectly trying to directly update properties in the read-only $users namespace, which will throw an error as this namespace cannot be modified directly.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: Directly updating $users will throw an error!\ndb.transact(db.tx.$users[userId].update({ nickname: 'Alice' }));\n```\n\n----------------------------------------\n\nTITLE: Correct $users Link Direction\nDESCRIPTION: Proper way to create links between profiles and the $users namespace by placing $users in the reverse direction as required by the system.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Create link between profiles and $users\nuserProfiles: {\n  forward: { on: 'profiles', has: 'one', label: '$user' },\n  reverse: { on: '$users', has: 'one', label: 'profile' },\n},\n```\n\n----------------------------------------\n\nTITLE: Publishing Schema to Production with Instant CLI\nDESCRIPTION: Command to push the schema to your production app using the Instant CLI. This will analyze changes between your local schema and the production schema and apply them.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest push schema\n```\n\n----------------------------------------\n\nTITLE: Setting up a Next.js project with Instant\nDESCRIPTION: Command line instructions for creating a new Next.js project with Tailwind CSS and installing the Instant React package.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app instant-storage --tailwind --yes\ncd instant-storage\nnpm i @instantdb/react\n```\n\n----------------------------------------\n\nTITLE: Logging Filtered Association Query Results in JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when filtering goals based on their associated todos.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": workId,\n      \"title\": \"Get promoted!\",\n      \"todos\": [\n        {\n          \"id\": focusId,\n          \"title\": \"Code a bunch\"\n        },\n        {\n          \"id\": reviewPRsId,\n          \"title\": \"Review PRs\"\n        },\n        {\n          \"id\": standupId,\n          \"title\": \"Do standup\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Direction for Cascade Delete Links\nDESCRIPTION: Example showing how to define the same cascade delete relationship but with the link direction reversed. Both approaches achieve the same functionality.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\npostAuthor: {\n  forward: { on: \"profiles\", has: \"many\", label: \"authoredPosts\" },\n  reverse: { on: \"posts\", has: \"one\", label: \"author\", onDelete: \"cascade\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Permission Changes to Production with CLI\nDESCRIPTION: This shell command demonstrates how to use the Instant CLI to push permission changes defined in 'instant.perms.ts' to production.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest push perms\n```\n\n----------------------------------------\n\nTITLE: Correct Use of Limit on Top-level Namespaces\nDESCRIPTION: Proper way to use the limit operator on top-level namespaces for pagination. These examples show how to get the first 10 todos and then the next 10 using limit and offset.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ Good: Get first 10 todos\nconst query = {\n  todos: {\n    $: {\n      limit: 10,\n    },\n  },\n};\n\n// ‚úÖ Good: Get next 10 todos\nconst query = {\n  todos: {\n    $: {\n      limit: 10,\n      offset: 10,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Devtool Position in TypeScript\nDESCRIPTION: Demonstrates how to initialize Instant DB with custom devtool positioning. Uses the position option to specify where the devtool widget appears in the viewport.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/devtool.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nimport schema from '../instant.schema.ts';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n  schema,\n  devtool: {\n    position: 'bottom-right',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Sorting with Order Operator\nDESCRIPTION: Proper way to sort query results using the 'order' operator. This example sorts todos by creation time in descending order.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ Good: Sort by creation time in descending order\nconst query = {\n  todos: {\n    $: {\n      order: {\n        serverCreatedAt: 'desc',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Pushing Permissions to Production with InstantDB CLI\nDESCRIPTION: Command line instruction for pushing permission rules to production using the InstantDB CLI tool.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx instant-cli@latest push perms\n```\n\n----------------------------------------\n\nTITLE: Logging Filtered Association Results in JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when filtering the associated todos of goals.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": healthId,\n      \"title\": \"Get fit!\",\n      \"todos\": [\n        {\n          \"id\": workoutId,\n          \"title\": \"Go on a run\"\n        }\n      ]\n    },\n    {\n      \"id\": workId,\n      \"title\": \"Get promoted!\",\n      \"todos\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript-Compatible Datalog Query Syntax\nDESCRIPTION: A modified syntax for Datalog queries that can be represented in JavaScript by converting variables and attributes to strings. This makes it possible to express Datalog queries directly in JavaScript code.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ find: [\"?id\"],\n  where: [\n    [\"?id\", \"movie/year\", 1987]\n  ] }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Namespace Nesting in Queries\nDESCRIPTION: Example of incorrectly structured query that fetches unrelated entities instead of associated ones. This approach will fetch all todos and all goals without establishing their relationships.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: This will fetch all todos and all goals instead of todos associated with their goals\nconst query = { goals: {}, todos: {} };\n```\n\n----------------------------------------\n\nTITLE: Implementing Forward Pagination with Cursors in InstantDB\nDESCRIPTION: This snippet demonstrates how to implement forward pagination in InstantDB queries using the 'endCursor' returned in the pageInfo object from previous results. The pagination is configured to fetch the next 10 items after the specified cursor.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: {\n      // These also are only supported for top-level namespaces\n      first: 10,\n      after: pageInfo?.todos?.endCursor,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Files with Admin SDK in InstantDB using TypeScript\nDESCRIPTION: This snippet demonstrates how to query files using the InstantDB Admin SDK, which uses db.query() instead of db.useQuery().\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = {\n  $files: {\n    $: {\n      order: { serverCreatedAt: 'asc' },\n    },\n  },\n});\nconst data = db.query(query);\n```\n\n----------------------------------------\n\nTITLE: Logging Association Query Results in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of the data returned when querying goals with their associated todos.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": healthId,\n      \"title\": \"Get fit!\",\n      \"todos\": [...],\n    },\n    {\n      \"id\": workId,\n      \"title\": \"Get promoted!\",\n      \"todos\": [...],\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Output for Pushing Permissions in InstantDB\nDESCRIPTION: Sample output from the InstantDB CLI when pushing permission rules, showing the changes that will be applied to the permissions configuration.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_17\n\nLANGUAGE: ansi\nCODE:\n```\nChecking for an Instant SDK...\nFound [32m@instantdb/react[39m in your package.json.\nFound [32mNEXT_PUBLIC_INSTANT_APP_ID[39m: *****\nPlanning perms...\nThe following changes will be applied to your perms:\n[31m-null[39m\n[32m+{[39m\n[32m+  attrs: {[39m\n[32m+    allow: {[39m\n[32m+      $default: \"false\"[39m\n[32m+    }[39m\n[32m+  }[39m\n[32m+}[39m\n[1mOK to proceed?[22m [36myes[39m[21\n[32mPermissions updated![39m\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of $isNull:false Query\nDESCRIPTION: This snippet shows the expected result format when using the '$isNull:false' operator in an InstantDB query. It displays todos where the location field has an actual value, excluding null or undefined fields.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"todos\": [\n    {\n      \"id\": cookId,\n      \"title\": \"Cook dinner\",\n      \"location\": \"home\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Rule Parameters in JavaScript Query\nDESCRIPTION: This JavaScript snippet demonstrates how to pass rule parameters to a query using the 'ruleParams' option. This can be used to implement conditional access based on specific parameters.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// You could get your doc's id from the URL for example\nconst myDocId = getId(window.location);\n\nconst query = {\n  docs: {},\n};\nconst { data } = db.useQuery(query, {\n  ruleParams: { knownDocId: myDocId }, // Pass the id to ruleParams!\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Comparison Operators on Non-Indexed Fields\nDESCRIPTION: This snippet demonstrates the error handling when trying to use comparison operators on non-indexed fields in InstantDB. It shows the detailed error message returned when attempting to use '$gt' on a field that isn't properly indexed.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  todos: {\n    $: { where: { priority: { $gt: 2 } } },\n  },\n};\nconst { isLoading, error, data } = db.useQuery(query);\n```\n\n----------------------------------------\n\nTITLE: Using useAuth Hook for Authentication State in InstantDB\nDESCRIPTION: Example of using the useAuth hook to manage authentication state in a React component. This hook provides loading state, user information, and error handling for authenticated sessions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/magic-codes.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const { isLoading, user, error } = db.useAuth();\n  if (isLoading) {\n    return;\n  }\n  if (error) {\n    return <div className=\"p-4 text-red-500\">Uh oh! {error.message}</div>;\n  }\n  if (user) {\n    return <Main />;\n  }\n  return <Login />;\n}\n```\n\n----------------------------------------\n\nTITLE: Base Authorization URL for OAuth in InstantDB\nDESCRIPTION: The base URL endpoint used to initiate the OAuth authorization flow where users will be redirected to grant permissions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.instantdb.com/platform/oauth/start\n```\n\n----------------------------------------\n\nTITLE: Creating Todos with Existing Attributes in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a todo item using existing attribute types when 'attrs' creation is restricted in the permissions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(db.tx.goals[id()].update({title: \"Hello World\"})\n```\n\n----------------------------------------\n\nTITLE: Logging Specific Entity Query Results in JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when querying a specific goal.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": healthId,\n      \"title\": \"Get fit!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of Comparison Operator Query\nDESCRIPTION: This snippet shows the expected result format when using comparison operators in an InstantDB query. It displays the returned data structure containing filtered todos with time estimates matching the specified condition.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data);\n{\n  \"todos\": [\n    {\n      \"id\": buildShipId,\n      \"title\": \"Build a starship prototype\",\n      \"timeEstimateHours\": 5000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Syntax for Filtering on Associated Values\nDESCRIPTION: Example of incorrect syntax when trying to filter entities based on properties of associated entities. This approach will cause an error.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: This will return an error!\nconst query = {\n  goals: {\n    $: {\n      where: {\n        todos: { title: 'Go running' }, // Wrong: use dot notation instead\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Session Token with Email Claim in JSON\nDESCRIPTION: JSON configuration for Clerk session token that includes the email claim. This configuration needs to be added to the Clerk dashboard in the Sessions section to enable proper authentication with Instant.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/clerk.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"{{user.primary_email_address}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Refresh Token for Authenticated Endpoints\nDESCRIPTION: Demonstrates how to access a user's refresh token in the frontend to pass to custom authenticated endpoints.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/backend.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// client\nimport { init } from '@instantdb/react';\n\nconst db = init(/* ... */)\n\nfunction App() {\n  const { user } = db.useAuth();\n  // call your api with `user.refresh_token`\n  function onClick() {\n    myAPI.customEndpoint(user.refresh_token, ...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL-Like Reactive Query\nDESCRIPTION: Proposes a reactive SQL query approach where views would automatically update when underlying data changes, eliminating manual handling of data synchronization.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT friends.* FROM users as friends JOIN friendships on friendship.user_one_id ...\n```\n\n----------------------------------------\n\nTITLE: Attempting to Create Todos with New Attributes in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates an attempt to create a todo item with a new attribute type, which would fail if 'attrs' creation is restricted in the permissions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(db.tx.goals[id()].update({title: \"Hello World\", priority: \"high\"})\n```\n\n----------------------------------------\n\nTITLE: Alternative SQL Approach for Fetching Associations\nDESCRIPTION: This snippet shows an alternative SQL approach to fetch goals and todos separately and then combine them on the client side.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst _goals = doSQL(\"SELECT * from goals\")\nconst _todos = doSQL(\"SELECT * from todos\")\nconst data = {goals: _goals.map(g => (\n  return {...g, todos: _todos.filter(t => t.goal_id === g.id)}\n))\n```\n\n----------------------------------------\n\nTITLE: API Middleware for Authentication\nDESCRIPTION: Shows the current approach of using middleware for authentication on API endpoints, illustrating the challenges of consistent permission enforcement.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.put(\"user\", auth, (req, res) => {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of Date Comparison Query\nDESCRIPTION: This snippet shows the expected result format when querying date fields with comparison operators in InstantDB. It displays the returned data structure containing filtered todos with due dates matching the specified date condition.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data);\n{\n  \"todos\": [\n    {\n      \"id\": slsFlightId,\n      \"title\": \"Space Launch System maiden flight\",\n      \"dueDate\": \"2017-01-01T00:00:00Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent for Fetching All Goals\nDESCRIPTION: This snippet provides the SQL equivalent of fetching all goals, demonstrating the simplicity of InstaQL compared to traditional SQL queries.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = { goals: doSQL('SELECT * FROM goals') };\n```\n\n----------------------------------------\n\nTITLE: Datalog Find Query Syntax\nDESCRIPTION: A complete Datalog query that finds movie IDs from 1987. It uses 'find' to specify which variables to return and 'where' to define the pattern to match against.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ find: [?id],\n  where: [\n    [?id, movie/year, 1987]\n  ] }\n```\n\n----------------------------------------\n\nTITLE: Defining InstantDB Schema with File Links using TypeScript\nDESCRIPTION: This snippet shows a simplified version of an InstantDB schema that includes entities for files, users, and profiles, with links between them.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// instant.schema.ts\n// simplfied version\nconst _schema = i.schema({\n  entities: {\n    $files: i.entity({\n      path: i.string().unique().indexed(),\n      url: i.string(),\n    }),\n    $users: i.entity({\n      email: i.string().unique().indexed(),\n    }),\n    profiles: i.entity({\n      createdAt: i.date().indexed(),\n      nickname: i.string().unique().indexed(),\n    }),\n  },\n  links: {\n    profiles$user: {\n      forward: {\n        on: 'profiles',\n        has: 'one',\n        label: '$user',\n      },\n      reverse: {\n        on: '$users',\n        has: 'one',\n        label: 'profile',\n      },\n    },\n    profilesAvatar: {\n      forward: {\n        on: 'profiles',\n        has: 'one',\n        label: 'avatar',\n      },\n      // Notice that $files is on the reverse side\n      reverse: {\n        on: '$files',\n        has: 'one',\n        label: 'profile',\n      },\n    },\n  },\n  rooms: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates with Error Handling\nDESCRIPTION: Demonstrates the current complex approach for implementing optimistic updates, showing how developers must manually handle both success and failure cases.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfriendPosts = userStore.getFriendPosts(friend);\nuserStore.remove(friend.id);\npostStore.removeUserPosts(friend.id);\ndeleteFriend(user, id).catch((e) => {\n  // undo\n  userStore.addFriend(friend);\n  postStore.addPosts(friendPosts);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Keys from Nested Objects with merge\nDESCRIPTION: Shows how to remove keys from nested objects by setting them to null with the merge method. Using update would overwrite the entire object.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: Calling `update` will overwrite the entire preferences object\ndb.transact(db.tx.profiles[userId].update({\n  preferences: {\n    notifications: null\n  }\n}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚úÖ Good: Remove a nested key\ndb.transact(db.tx.profiles[userId].merge({\n  preferences: {\n    notifications: null  // This will remove the notifications key\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Logging Inverse Association Query Results in JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when querying todos with their associated goals.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"todos\": [\n    {\n      \"id\": focusId,\n      \"title\": \"Code a bunch\",\n      \"goals\": [\n        {\n          \"id\": workId,\n          \"title\": \"Get promoted!\"\n        }\n      ]\n    },\n    ...,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing queryWhere for Multiple Pattern Matching in JavaScript Datalog Engine\nDESCRIPTION: Handles multiple patterns by starting with an empty context and progressively applying each pattern. Uses reduce and flatMap to build up contexts that satisfy all patterns.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction queryWhere(patterns, db) {\n  return patterns.reduce(\n    (contexts, pattern) => {\n      return contexts.flatMap((context) => querySingle(pattern, db, context));\n    },\n    [{}],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from auth.ref Lists\nDESCRIPTION: Shows how to properly extract elements from auth.ref lists. Since auth.ref returns a CEL list, you need to extract elements when comparing with scalar values.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: auth.ref returns a list! This will throw an error!\n\"create\": \"auth.ref('$user.role.type') == 'admin'\"\n```\n\nLANGUAGE: json\nCODE:\n```\n// ‚úÖ Good: Extracting the first element from auth.ref\n\"create\": \"auth.ref('$user.role.type')[0] == 'admin'\"\n```\n\n----------------------------------------\n\nTITLE: Data Normalization in JavaScript Client Store\nDESCRIPTION: Demonstrates the current approach to normalizing fetched post data into a central store, highlighting the manual effort required for data management in client applications.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// normalise [posts] -> {[id]: post}\nfetchRelevantPostsFor(user).then((posts) => {\n  posts.forEach((post) => {\n    store.addPost(post);\n  });\n});\n\n// see all posts by author:\nstore.posts.values().reduce((res, post) => {\n  res[post.authorId] = res[post.authorId] || [];\n  res[post.authorId].push(post);\n  return res;\n}, {});\n```\n\n----------------------------------------\n\nTITLE: Defining InstantDB Schema with File Associations using TypeScript\nDESCRIPTION: This snippet defines an InstantDB schema that includes entities for files, users, and profiles, along with their relationships and properties.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// instant.schema.ts\n// ---------------\nimport { i } from '@instantdb/core';\nconst _schema = i.schema({\n  entities: {\n    $files: i.entity({\n      path: i.string().unique().indexed(),\n      url: i.string(),\n    }),\n    $users: i.entity({\n      email: i.string().unique().indexed(),\n    }),\n    profiles: i.entity({\n      nickname: i.string(),\n      createdAt: i.date(),\n    }),\n  },\n  links: {\n    profileUser: {\n      forward: { on: 'profiles', has: 'one', label: '$user' },\n      reverse: { on: '$users', has: 'one', label: 'profile' },\n    },\n    profileUploads: {\n      forward: { on: 'profiles', has: 'many', label: '$files' },\n      reverse: { on: '$files', has: 'one', label: 'profile' },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Random Value Generation in Entity Creation\nDESCRIPTION: Demonstrates how to generate random values during entity creation using JavaScript array operations.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaml.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.transact(\n  db.tx.goals[id()].update({\n    title: ['eat', 'sleep', 'hack', 'repeat'][Math.floor(Math.random() * 4)],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent for Fetching Associations\nDESCRIPTION: This snippet provides the SQL equivalent of fetching goals with their associated todos, highlighting the complexity of nested queries in SQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = `\n  SELECT g.*, gt.todos\n  FROM goals g\n  JOIN (\n      SELECT g.id, json_agg(t.*) as todos\n      FROM goals g\n      LEFT JOIN todos t on g.id = t.goal_id\n      GROUP BY 1\n  ) gt on g.id = gt.id\n`;\nconst data = { goals: doSQL(query) };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Ordering of Non-Indexed Fields\nDESCRIPTION: Example of incorrectly trying to order results by a non-indexed field, which will fail as ordering requires indexed fields.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: Field must be indexed for ordering\nconst query = {\n  todos: {\n    $: {\n      order: {\n        nonIndexedField: 'desc', // Will fail if field isn't indexed\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing querySingle for JavaScript Datalog Engine\nDESCRIPTION: Matches a single pattern against a database of triples. Maps each triple through the matchPattern function and filters out non-matches (null results).\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction querySingle(pattern, db, context) {\n  return db\n    .map((triple) => matchPattern(pattern, triple, context))\n    .filter((x) => x);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent for Fetching Multiple Namespaces\nDESCRIPTION: This snippet shows the SQL equivalent of fetching multiple namespaces, highlighting the need for separate queries in SQL.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  goals: doSQL('SELECT * from goals'),\n  todos: doSQL('SELECT * from todos'),\n};\n```\n\n----------------------------------------\n\nTITLE: Proposed GraphQL-like Query Language in Clojure\nDESCRIPTION: A GraphQL-inspired query syntax that could enable a Local DB to handle nested relational data efficiently, supporting the same patterns manual query functions would provide.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\nteams {\n  ...\n  tasks: {\n    ...\n    owner: {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Rules with JavaScript Functions\nDESCRIPTION: A permissions system using JavaScript functions to control access to data. The example shows how to deny access to archived tasks while allowing team users to read and write tasks, similar to Facebook's permission design.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction IDenyIfArchived(_user, task) {\n  if (task.isArchived) {\n    return deny();\n  }\n  return allow();\n}\n// ...\n{\n  \"task\": {\n    read: [\n      IAllowIfTeamUser,\n    ],\n    write: [\n      IDenyIfArchived,\n      IAllowIfTeamUser,\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Revocation Endpoint\nDESCRIPTION: The endpoint URL used to invalidate an access token or refresh token when they are no longer needed.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.instantdb.com/platform/oauth/revoke\n```\n\n----------------------------------------\n\nTITLE: Understanding newData.ref Limitations\nDESCRIPTION: Demonstrates that newData.ref does not exist in update operations. You can only use newData to reference updated attributes directly, not to reference linked data.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// ‚ùå Bad: This will throw an error!\n// This will throw an error because newData.ref does not exist\n{\n  \"posts\": {\n    \"allow\": {\n      \"update\": \"auth.id == data.authorId && newData.ref('isPublished') == data.ref('isPublished')\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful OAuth Redirect Format\nDESCRIPTION: Example of the redirect URL format when a user successfully authorizes an application, containing the authorization code and state parameters.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYOUR_REDIRECT_URI?code=AUTHORIZATION_CODE&state=RANDOM_STATE_STRING\n```\n\n----------------------------------------\n\nTITLE: Incorrect Sorting with OrderBy Instead of Order\nDESCRIPTION: Example of incorrectly using 'orderBy' instead of the correct 'order' operator for sorting query results, which will cause an error.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: `orderBy` is not a valid operator. This will return an error!\nconst query = {\n  todos: {\n    $: {\n      orderBy: {\n        serverCreatedAt: 'desc',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Indexing Triples by Position in JavaScript Datalog Engine\nDESCRIPTION: Creates an index of triples based on the specified position (entity, attribute, or value). Uses reduce to build a map where keys are the values at the specified position and values are arrays of triples.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction indexBy(triples, idx) {\n  return triples.reduce((index, triple) => {\n    const k = triple[idx];\n    index[k] = index[k] || [];\n    index[k].push(triple);\n    return index;\n  }, {});\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Example for Authorization Code Exchange\nDESCRIPTION: A complete cURL command example showing how to exchange an authorization code for tokens using the token endpoint with proper headers and request body.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport CLIENT_ID=\"YOUR_CLIENT_ID\"\nexport CLIENT_SECRET=\"YOUR_CLIENT_SECRET\"\nexport REDIRECT_URI=\"YOUR_REDIRECT_URI\"\nexport CODE=\"YOUR_AUTHORIZATION_CODE\"\n\ncurl -v -X POST \"https://api.instantdb.com/platform/oauth/token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"client_id\\\": \\\"$CLIENT_ID\\\",\n        \\\"client_secret\\\": \\\"$CLIENT_SECRET\\\",\n        \\\"redirect_uri\\\": \\\"$REDIRECT_URI\\\",\n        \\\"grant_type\\\": \\\"authorization_code\\\",\n        \\\"code\\\": \\\"$CODE\\\"\n      }\"\n```\n\n----------------------------------------\n\nTITLE: Using ruleParams for Custom Access Rules in InstantDB JavaScript\nDESCRIPTION: Demonstrates how to use ruleParams to implement custom access rules in InstantDB. This example shows a rule that only allows access to documents if the user knows the document's ID.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/markdown/mar2025.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.query({\n  documents: {\n    id: true,\n    content: true,\n  }\n}, {\n  ruleParams: {\n    knownDocId: 'abc123'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Row-Level Updates in Supabase\nDESCRIPTION: This code shows how to use Supabase's realtime features to subscribe to row-level updates in a database. It specifically subscribes to all changes in friendships where the user with ID 200 is the first friend, demonstrating Supabase's reactive capabilities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst friendsChange = supabase\n  .from('friendships:friend_one_id=eq.200')\n  .on('*', handleFriendshipChange)\n  .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Direct Querying of $users Namespace\nDESCRIPTION: Example of incorrectly trying to directly query all users through the $users namespace, which by default will only return the current user due to permission restrictions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: This will likely only return the current user\ndb.useQuery({ $users: {} });\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Request Body\nDESCRIPTION: JSON request body format for refreshing an expired access token using a refresh token, including client credentials and the grant_type parameter.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"REFRESH_TOKEN_VALUE\", // The refresh token stored earlier\n  \"client_id\": \"YOUR_CLIENT_ID\",\n  \"client_secret\": \"YOUR_CLIENT_SECRET\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Prompt Template for Using InstantDB with Claude\nDESCRIPTION: A template prompt for using Claude with InstantDB, instructing the LLM to act as an expert developer and utilize the provided documentation files to generate complete code files.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/using-llms.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert Next.js, React, and InstantDB developer. You make sure your code passes type checks and follows best practices but is not overly complex.\n\nYou can find a list of guides on how to use instantdb in the provided llms.txt and you can find the full documentation on how to use instantdb in llms-full.txt\n\nYou ALWAYS output full files. I NEED full files so I can easily copy and paste them into my project.\n\nYou NEVER give me partial diffs or redacted code.\n\nIf you are ever interrupted while outputting a file and need to continue start the file from the beginning so I can get a FULL file\n\n// [Prompt for what you want to build]\n\n// [llms.txt and llms-full.txt pasted below]\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent for Fetching a Specific Entity\nDESCRIPTION: This snippet provides the SQL equivalent of fetching a specific goal, demonstrating the use of a WHERE clause.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = { goals: doSQL(\"SELECT * FROM goals WHERE id = 'healthId'\") };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Syntax for OR Operator in Where Clause\nDESCRIPTION: Example of incorrect syntax when using the 'or' operator for filtering. The 'or' operator requires an array of conditions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: This will return an error!\nconst query = {\n  todos: {\n    $: {\n      where: {\n        or: { priority: 'high', dueDate: { $lt: tomorrow } }, // Wrong: 'or' takes an array\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: cURL Example for API Call Using Access Token\nDESCRIPTION: Example cURL command demonstrating how to make an authenticated API call to fetch user's apps using the obtained access token in the Authorization header.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport ACCESS_TOKEN=\"ACCESS_TOKEN_VALUE\"\n\ncurl -v \"https://api.instantdb.com/superadmin/apps\" \\\n  -H \"Authorization: Bearer $ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Type-safe Initialization in InstantDB with TypeScript\nDESCRIPTION: Demonstrates the new default type-safe initialization pattern in InstantDB where schema types can be directly passed to the init function for type safety. This represents an improvement over the previous init_experimental approach.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/markdown/dec2024.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@instantdb/core\";\nimport { type Schema } from \"./schema\";\n\nconst db = createClient<Schema>({\n  appId: \"your-app-id\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an App Request Format in JSON\nDESCRIPTION: This JSON structure represents the request format for creating a new application. It requires specifying a non-blank title for the new application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"New App Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: matchPattern Function Implementation\nDESCRIPTION: The matchPattern function that compares each part of a pattern with the corresponding part of a triple, using the reduce method to build up the context of variable bindings.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction matchPattern(pattern, triple, context) {\n  return pattern.reduce((context, patternPart, idx) => {\n    const triplePart = triple[idx];\n    return matchPart(patternPart, triplePart, context);\n  }, context);\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Example for Token Refresh\nDESCRIPTION: cURL command example showing how to refresh an access token by making a POST request to the token endpoint with the appropriate parameters.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport CLIENT_ID=\"YOUR_CLIENT_ID\"\nexport CLIENT_SECRET=\"YOUR_CLIENT_SECRET\"\nexport REFRESH_TOKEN=\"REFRESH_TOKEN_VALUE\"\n\ncurl -v -X POST \"[https://api.instantdb.com/platform/oauth/token](https://api.instantdb.com/platform/oauth/token)\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"client_id\\\": \\\"$CLIENT_ID\\\",\n        \\\"client_secret\\\": \\\"$CLIENT_SECRET\\\",\n        \\\"grant_type\\\": \\\"refresh_token\\\",\n        \\\"refresh_token\\\": \\\"$REFRESH_TOKEN\\\"\n      }\"\n```\n\n----------------------------------------\n\nTITLE: Schema Push Planning Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format when planning schema changes. It includes the current schema, the proposed new schema, and a series of migration steps that would be required to transform the current schema into the new one.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"current-schema\": \"schema object (same structure as GET schema)\",\n  \"new-schema\": \"schema object (same structure as GET schema)\",\n  \"steps\": [\n    [\n      \"add-attr\",\n      {\n        \"id\": \"uuid\",\n        \"cardinality\": \"one | many\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"],\n        \"index?\": \"boolean\",\n        \"unique?\": \"boolean\",\n        \"checked-data-type\": \"'string' | 'number' | 'boolean' | 'date' | null\"\n      }\n    ],\n    [\n      \"add-attr\",\n      {\n        \"id\": \"uuid\",\n        \"cardinality\": \"one | many\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"],\n        \"index?\": \"boolean\",\n        \"unique?\": \"boolean\",\n        \"checked-data-type\": \"'string' | 'number' | 'boolean' | 'date' | null\"\n      }\n    ],\n    [\n      \"index\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"remove-index\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"unique\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"remove-unique\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"check-data-type\",\n      {\n        \"attr-id\": \"uuid\",,\n        \"checked-data-type\": \"'string' | 'boolean' | 'number' | 'date'\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"remove-data-type\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Error When Using Comparison Operators on Non-Indexed Fields\nDESCRIPTION: This snippet shows the error object returned when attempting to use comparison operators on non-indexed fields in InstantDB. It includes detailed information about the validation failure and hints for resolving the issue.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(error);\n{\n  \"message\": \"Validation failed for query\",\n  \"hint\": {\n    \"data-type\": \"query\",\n    \"errors\": [\n      {\n        \"expected?\": \"indexed?\",\n        \"in\": [\"priority\", \"$\", \"where\", \"priority\"],\n        \"message\": \"The `todos.priority` attribute must be indexed to use comparison operators.\"\n      }\n    ],\n    \"input\": {\n      \"todos\": {\n        \"$\": {\n          \"where\": {\n            \"priority\": {\n              \"$gt\": 2\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Where Operator Placement\nDESCRIPTION: Example showing incorrect placement of the 'where' operator for filtering entities. The where operator needs to be inside the $ operator to work properly.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: Filter must be inside $\nconst query = {\n  goals: {\n    where: { id: 'goal-1' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Exchange Request Body\nDESCRIPTION: JSON request body format for exchanging an authorization code for access and refresh tokens, including all required parameters.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"grant_type\": \"authorization_code\",\n  \"code\": \"YOUR_AUTHORIZATION_CODE\", // The code from Step 3\n  \"redirect_uri\": \"YOUR_REDIRECT_URI\", // The same redirect URI used in Step 2\n  \"client_id\": \"YOUR_CLIENT_ID\",\n  \"client_secret\": \"YOUR_CLIENT_SECRET\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Representation in Triple Store\nDESCRIPTION: Shows how references between nodes are stored as triples in the database\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[3, 'owner', 1][(2, 'tasks', 3)]\n```\n\n----------------------------------------\n\nTITLE: matchPart Function Implementation\nDESCRIPTION: Helper function that determines if a specific part of a pattern matches the corresponding part of a triple. It handles both variables and constants and returns an updated context or null if no match is found.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction matchPart(patternPart, triplePart, context) {\n  if (!context) return null;\n  if (isVariable(patternPart)) {\n    return matchVariable(patternPart, triplePart, context);\n  }\n  return patternPart === triplePart ? context : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Permissions Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format when retrieving the permission rules for an application. It contains a nested object structure defining the access rules for different operations on various entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"perms\": {\n    // Permissions code object\n    // e.g., {\"posts\": {\"allow\": {\"read\": \"true\", \"create\": \"auth.id != null\"}}}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Push Success Response Format in JSON\nDESCRIPTION: The JSON structure returned by a successful schema push operation. It includes the current schema, the new schema after the push, and a detailed list of the transformation steps that were executed to convert between them.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"current-schema\": \"schema object (same structure as GET schema)\",\n  \"new-schema\": \"schema object (same structure as GET schema)\",\n  \"steps\": [\n    [\n      \"add-attr\",\n      {\n        \"id\": \"uuid\",\n        \"cardinality\": \"one | many\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"],\n        \"index?\": \"boolean\",\n        \"unique?\": \"boolean\",\n        \"checked-data-type\": \"'string' | 'number' | 'boolean' | 'date' | null\"\n      }\n    ],\n    [\n      \"add-attr\",\n      {\n        \"id\": \"uuid\",\n        \"cardinality\": \"one | many\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"],\n        \"index?\": \"boolean\",\n        \"unique?\": \"boolean\",\n        \"checked-data-type\": \"'string' | 'number' | 'boolean' | 'date' | null\"\n      }\n    ],\n    [\n      \"index\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"remove-index\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"unique\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"remove-unique\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"check-data-type\",\n      {\n        \"attr-id\": \"uuid\",,\n        \"checked-data-type\": \"'string' | 'boolean' | 'number' | 'date'\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ],\n    [\n      \"remove-data-type\",\n      {\n        \"attr-id\": \"uuid\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Join Implementation in Firebase\nDESCRIPTION: This snippet demonstrates how to manually implement a join operation in Firebase to retrieve complete friendship data. Due to the denormalized structure, developers must write additional code to reconstruct relationships that would be handled by simple joins in relational databases.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n1. get `userA/friends`\n2. for each id, get `/${id}`\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Matching in JavaScript Datalog Engine\nDESCRIPTION: Matches a variable against a triple part in the context. If the variable is already bound, it compares the bound value with the triple part. Otherwise, it creates a new binding in the context.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction matchVariable(variable, triplePart, context) {\n  if (context.hasOwnProperty(variable)) {\n    const bound = context[variable];\n    return matchPart(bound, triplePart, context);\n  }\n  return { ...context, [variable]: triplePart };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instant Permissions for File Access\nDESCRIPTION: JavaScript code setting up permissions rules that allow viewing, creating, and deleting files in the Instant database.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { InstantRules } from \"@instantdb/react\";\n\n// Not recommended for production since this allows anyone to\n// upload/delete, but good for getting started\nconst rules = {\n  \"$files\": {\n    \"allow\": {\n      \"view\": \"true\",\n      \"create\": \"true\",\n      \"delete\": \"true\"\n    }\n  }\n} satisfies InstantRules;\n\nexport default rules;\n```\n\n----------------------------------------\n\nTITLE: Setting App ID in Environment File\nDESCRIPTION: Configures the app ID in your .env file for automatic detection by the CLI.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nINSTANT_APP_ID=*****\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Variable Binding in JavaScript Datalog Engine\nDESCRIPTION: Handles the case when a variable is already bound in the context. It retrieves the bound value and compares it with the triple part using matchPart.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nif (context.hasOwnProperty(variable)) {\n  const bound = context[variable];\n  return matchPart(bound, triplePart, context);\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format after successfully setting permission rules for an application. It includes the updated rules object that defines access controls for different operations on various entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    // Permissions code object\n    // e.g., {\"posts\": {\"allow\": {\"read\": \"true\", \"create\": \"false\"}}}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Push Request Body Format in JSON\nDESCRIPTION: The JSON structure required in the request body when planning or applying a schema push. It defines the entities and links that make up the schema, matching the structure defined in instant.schema.ts.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schema\": {\n    \"entities\": {\n      \"namespace-name\": {\n        \"attrs\": {\n          \"attribute-name\": {\n            \"valueType\": \"'string' | 'number' | 'boolean' | 'date' | 'json'\",\n            \"config\": { \"indexed\": \"boolean\", \"unique\": \"boolean\" }\n          }\n        }\n      }\n      // Rest of entities\n    },\n    \"links\": {\n      \"unique-string\": {\n        \"forward\": {\n          \"on\": \"forward-namespace-name\",\n          \"label\": \"forward-attr-label\",\n          \"has\": \"many | one\",\n          \"onDelete\": \"cascade | null\"\n        },\n        \"reverse\": {\n          \"on\": \"reverse-namespace-name\",\n          \"label\": \"reverse-attr-label\",\n          \"has\": \"many | one\"\n          \"onDelete\": \"cascade | null\"\n        }\n      }\n      // Rest of link attrs\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Notification System in JavaScript\nDESCRIPTION: This code demonstrates a simple implementation of a notification system when adding a post. It shows how developers must manually handle updating all relevant clients when data changes, highlighting the complexity of maintaining reactivity in traditional database systems.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addPost(post) {\n  db.addPost(post);\n  getAllFriends(post).forEach(notifyNewPost);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Fetch Errors in JavaScript\nDESCRIPTION: This snippet demonstrates the limitations of simple error handling in fetch requests. It highlights the need for more sophisticated sync mechanisms to handle various error scenarios and maintain data consistency.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/sync_future.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(new Request('/user/update', { method: 'POST' })).then((response) => {\n  if (!response.ok) {\n    // Do what? Pretend it never happened?\n    // Stop the entire application?\n    // Retry? What if user already issued another update that invalidates this one?\n    // What if update actually got through?\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Instant Schema with File Storage Support\nDESCRIPTION: JavaScript code defining the database schema with entities for file storage, including path and URL fields.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i } from \"@instantdb/react\";\n\nconst _schema = i.schema({\n  entities: {\n    $files: i.entity({\n      path: i.string().unique().indexed(),\n      url: i.string(),\n    }),\n    $users: i.entity({\n      email: i.string().unique().indexed(),\n    }),\n  },\n  links: {},\n  rooms: {},\n});\n\n// This helps Typescript display nicer intellisense\ntype _AppSchema = typeof _schema;\ninterface AppSchema extends _AppSchema {}\nconst schema: AppSchema = _schema;\n\nexport type { AppSchema };\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Inspecting Results of $not Operator Query\nDESCRIPTION: This snippet shows the expected result format when using the '$not' operator in an InstantDB query. It displays todos where the location is not the specified value, including those with null or undefined location values.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"todos\": [\n    {\n      \"id\": cookId,\n      \"title\": \"Cook dinner\",\n      \"location\": \"home\"\n    },\n    {\n      \"id\": readId,\n      \"title\": \"Read\",\n      \"location\": null\n    },\n        {\n      \"id\": napId,\n      \"title\": \"Take a nap\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Denormalizing Many-to-Many Relationships in Firebase\nDESCRIPTION: This code shows how Firebase's document model requires denormalizing many-to-many relationships like friendships. It demonstrates storing friendship data in two separate locations, which introduces data duplication and complexity in the data model.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nuserA: friends: userBId: true;\nuserB: friends: userAId: true;\n```\n\n----------------------------------------\n\nTITLE: Adding Sign In with Apple Link for Web Redirect Flow\nDESCRIPTION: HTML anchor tag implementation that uses the generated authorization URL for initiating the Apple sign-in redirect flow.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<a href={ authUrl }>Sign In with Apple</a>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of useQuery in Admin SDK\nDESCRIPTION: Example of incorrectly using the client-side 'useQuery' method in the server-side admin SDK, which is not the appropriate approach for server-side querying.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ùå Bad: Don't use useQuery on the server\nconst { data, isLoading, error } = db.useQuery({ todos: {} }); // Wrong approach!\n```\n\n----------------------------------------\n\nTITLE: Setting up Instant Client Development Environment\nDESCRIPTION: Commands to set up the development environment for the Instant client, including enabling pnpm, installing dependencies, and starting the development server.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client\ncorepack enable # enables pnpm\npnpm i\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Basic Triple Store Data Structure in JavaScript\nDESCRIPTION: Demonstrates how basic node attributes are represented as triples in a graph database\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 'name', 'Joe'][(2, 'name', 'Awesome Team')][(3, 'title', 'Code')]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Limit in Nested Namespaces\nDESCRIPTION: Example of incorrectly using the limit operator in nested namespaces, which will cause an error as limit only works on top-level namespaces.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: Limit only works on top-level namespaces. This will return an error!\nconst query = {\n  goals: {\n    todos: {\n      $: { limit: 5 }, // This won't work\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App for Apple Sign In\nDESCRIPTION: JSON configuration for app.json that enables Apple Sign In capability in an Expo-based React Native application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"usesAppleSignIn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing User Data in Supabase Event Handlers\nDESCRIPTION: This code shows how developers must manually fetch related data when using Supabase's realtime features. When a friendship change event occurs, the handler needs to check if the second friend's data is already in the local store and fetch it if missing.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleFriendshipChange(friendship) {\n  if (!userStore.get(friendship.friend_two_id)) {\n      fetchUser(...)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Online Users in a Room from Backend in InstantDB JavaScript\nDESCRIPTION: Demonstrates how to use adminDB.rooms.getPresence to check which users are online in a specific room from the backend.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/markdown/mar2025.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nadminDB.rooms.getPresence()\n```\n\n----------------------------------------\n\nTITLE: Complete React Native Example with Apple Authentication\nDESCRIPTION: Full React Native application example that implements Sign In with Apple authentication flow using Expo and Instant. Includes authentication state management, login UI, and sign out functionality.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, View, Text, StyleSheet } from 'react-native';\nimport { init, tx } from '@instantdb/react-native';\nimport * as AppleAuthentication from 'expo-apple-authentication';\n\nconst APP_ID = '__APP_ID__';\nconst db = init({ appId: APP_ID });\n\nexport default function App() {\n  const { isLoading, user, error } = db.useAuth();\n  if (isLoading) {\n    return (\n      <View style={styles.container}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n  if (error) {\n    return (\n      <View style={styles.container}>\n        <Text>Uh oh! {error.message}</Text>\n      </View>\n    );\n  }\n  if (user) {\n    return (\n      <View style={styles.container}>\n        <Text>Hello {user.email}!</Text>\n        <Button\n          title=\"Sign Out\"\n          onPress={async () => {\n            await db.auth.signOut();\n          }}\n        />\n      </View>\n    );\n  }\n  return <Login />;\n}\n\nfunction Login() {\n  const [nonce] = useState('' + Math.random());\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n              nonce: nonce,\n            });\n            // signed in\n            db.auth\n              .signInWithIdToken({\n                clientName: 'apple',\n                idToken: credential.identityToken,\n                nonce: nonce,\n              })\n              .catch((err) => {\n                console.log('Error', err.body?.message, err);\n              });\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: User Sign Out with db.auth.signOut in InstantDB\nDESCRIPTION: Reference to the db.auth.signOut function which now accepts refresh tokens and user IDs in addition to emails, allowing developers to log out users from specific devices instead of all devices.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/txt/mar2025.txt#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.auth.signOut\n```\n\n----------------------------------------\n\nTITLE: Incorrect $users Link Direction\nDESCRIPTION: Example of incorrectly placing the $users namespace in the forward direction when creating links. The $users namespace must be in the reverse direction.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: $users must be in the reverse direction\nuserProfiles: {\n  forward: { on: '$users', has: 'one', label: 'profile' },\n  reverse: { on: 'profiles', has: 'one', label: '$user' },\n},\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Response Format\nDESCRIPTION: JSON response format returned after a successful token refresh request, providing a new access token and potentially a new refresh token.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"NEW_ACCESS_TOKEN_VALUE\",\n  \"refresh_token\": \"NEW_REFRESH_TOKEN_VALUE\", // May or may not be included/changed\n  \"expires_in\": 1209600,\n  \"scope\": \"apps-read apps-write\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Query Function for Task Page in JavaScript\nDESCRIPTION: JavaScript function that assembles data for a task page, demonstrating manual relation building that could be replaced by a database query system.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction dataForTaskPage(store, teamId) {\n  return {\n    ...store.teams[teamId],\n    tasks: store.tasksForTeam(teamId).map((task) => {\n      return { ...task, owner: store.users[task.ownerId] };\n    }),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Nested Data Querying in JavaScript\nDESCRIPTION: This code snippet shows an inefficient way of querying nested data structures in JavaScript. It illustrates the need for more sophisticated querying mechanisms, such as those provided by databases.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/sync_future.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (id of ids) {\n  const user = users[id];\n  for (const post_id of user.post_ids) {\n    const post = posts[post_id];\n    for (const comment_id of post.comment_ids) {\n      const comment = comments[comment_id];\n      if (comment.author_id === id) {\n        // there must be a better way...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual State Management on Friend Deletion\nDESCRIPTION: Illustrates the current approach of manually updating client state after a friend deletion, showing how developers must track all affected data.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteFriend(user, friend.id).then((res) => {\n  userStore.remove(friend.id);\n  postStore.removeUserPosts(friend.id);\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating InstantDB Queries with NextJS Caching in JavaScript\nDESCRIPTION: Shows how to use fetchOpts to make InstantDB queries work with NextJS caching system for improved performance.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/markdown/mar2025.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.query({\n  // query details\n}, {\n  fetchOpts: {\n    // NextJS caching options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an App Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format after successfully creating an application. It includes the newly created app's identifier, title, creator ID, and creation timestamp.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"id\": \"uuid\",\n    \"title\": \"string\",\n    \"creator_id\": \"uuid\",\n    \"created_at\": \"timestamp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Push Planning Request Format in JSON\nDESCRIPTION: This JSON structure represents the request format for planning schema changes without applying them. It requires providing a complete schema definition with entities and their attributes, as well as links between entities including cardinality and cascade behavior.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schema\": {\n    \"entities\": {\n      \"namespace-name\": {\n        \"attrs\": {\n          \"attribute-name\": {\n            \"valueType\": \"'string' | 'number' | 'boolean' | 'date' | 'json'\",\n            \"config\": { \"indexed\": \"boolean\", \"unique\": \"boolean\" }\n          }\n        }\n      }\n      // Rest of entities\n    },\n    \"links\": {\n      \"unique-string\": {\n        \"forward\": {\n          \"on\": \"forward-namespace-name\",\n          \"label\": \"forward-attr-label\",\n          \"has\": \"many | one\",\n          \"onDelete\": \"cascade | null\"\n        },\n        \"reverse\": {\n          \"on\": \"reverse-namespace-name\",\n          \"label\": \"reverse-attr-label\",\n          \"has\": \"many | one\"\n          \"onDelete\": \"cascade | null\"\n        }\n      }\n      // Rest of link attrs\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a new InstantDB project with Vite\nDESCRIPTION: Shell commands to create a new Vanilla TypeScript project with Vite and install the InstantDB core package.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/start-vanilla.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-vite@latest -t vanilla-ts instant-vanilla\ncd instant-vanilla\nnpm i @instantdb/core\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Database Migration and Server Setup Commands\nDESCRIPTION: Series of make commands to initialize the database, bootstrap configuration, and start the development server.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake dev-up\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake bootstrap-oss\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Conceptual Pipeline Syntax for Derived Data in JavaScript\nDESCRIPTION: This conceptual code demonstrates Martin Kleppman's suggested syntax for connecting a database to derived data stores like ElasticSearch, Analytics, and Redis. It illustrates how derived data connections could be simplified with a more expressive database interface.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndb |> ElasticSearch;\ndb |> Analytics;\ndb.user |> Redis;\n// Bam, we've connected elastic search, analytics, and redis to our db\n```\n\n----------------------------------------\n\nTITLE: Using Local IDs with db.useLocalId for Guest Users in InstantDB\nDESCRIPTION: A reference to the db.useLocalId function for generating IDs for non-authenticated users. This is particularly useful for implementing guest-mode features in applications built with InstantDB.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/txt/mar2025.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.useLocalId\n```\n\n----------------------------------------\n\nTITLE: Deleting App Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format after successfully marking an application for deletion. It includes details of the deleted app including its identifier, title, creator ID, and creation timestamp.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"id\": \"uuid\",\n    \"title\": \"string\",\n    \"creator_id\": \"uuid\",\n    \"created_at\": \"timestamp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Scheme in Expo app.json\nDESCRIPTION: JSON configuration to set up the custom URL scheme in an Expo app, which is required for the OAuth redirect flow.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Specific Association Query Results in JavaScript\nDESCRIPTION: This snippet shows the structure of the data returned when querying a specific goal with its associated todos.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/instaql.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(data)\n{\n  \"goals\": [\n    {\n      \"id\": healthId,\n      \"title\": \"Get fit!\",\n      \"todos\": [\n        {\n          \"id\": proteinId,\n          \"title\": \"Drink protein\"\n        },\n        {\n          \"id\": sleepId,\n          \"title\": \"Go to bed early\"\n        },\n        {\n          \"id\": workoutId,\n          \"title\": \"Go on a run\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Schema and Permissions for InstantDB Project\nDESCRIPTION: Commands to pull schema and permissions information, with options for both production and development environments.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/flags-config/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run pull\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:pull\n```\n\n----------------------------------------\n\nTITLE: Datalog Query Example in Clojure\nDESCRIPTION: Example of a Datalog query that finds all messages with user information for an active thread in the current session\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_22\n\nLANGUAGE: clojure\nCODE:\n```\n[:find [(pull ?c [:conversation/user :conversation/message]) ...]\n :where [?e :session/thread ?thread-id]\n        [?c :conversation/thread ?thread-id]]\n```\n\n----------------------------------------\n\nTITLE: Advanced SQL Query with JSON Aggregation\nDESCRIPTION: Complex SQL query using JSON functions to transform flat results into a nested structure, demonstrating the mismatch between SQL's design and frontend data needs.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  teams.*,\n  json_group_array(\n    json_object(\n      'id', tasks.id,\n      'title', tasks.title,\n      'owner', json_object('id', owner.id, 'name', owner.name))\n  ) as tasks\nFROM teams\nJOIN tasks ON tasks.team_id = teams.id\nJOIN users as owner ON owner.id = tasks.owner_id\nGROUP BY teams.id\nWHERE teams.id = ?\n```\n\n----------------------------------------\n\nTITLE: Including Apple Sign In JavaScript Library\nDESCRIPTION: URL to include Apple's authentication JavaScript library in your web application for the popup flow.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Auth Dependencies for React Native\nDESCRIPTION: Command to install the necessary Expo packages for implementing authentication in React Native applications.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-auth-session expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Finding Relevant Triples Using Indexes in JavaScript Datalog Engine\nDESCRIPTION: Determines which triples are relevant to a pattern by using the appropriate index. Checks if any part of the pattern is a constant (not a variable) and uses the corresponding index for that part.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction relevantTriples(pattern, db) {\n  const [id, attribute, value] = pattern;\n  if (!isVariable(id)) {\n    return db.entityIndex[id];\n  }\n  if (!isVariable(attribute)) {\n    return db.attrIndex[attribute];\n  }\n  if (!isVariable(value)) {\n    return db.valueIndex[value];\n  }\n  return db.triples;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing InstantDB Dependencies for React Native\nDESCRIPTION: Commands to create a new Expo app and install InstantDB along with its required peer dependencies for React Native integration.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/start-rn.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create an app with expo\nnpx create-expo-app instant-rn-demo\ncd instant-rn-demo\n\n# Install instant\nnpm i @instantdb/react-native\n\n# Install peer dependencies\nnpm i @react-native-async-storage/async-storage @react-native-community/netinfo react-native-get-random-values\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for InstantDB React Sandbox\nDESCRIPTION: Commands to create and configure the environment variables file for the InstantDB React sandbox application. Requires copying the example environment file and manually filling in the necessary variables.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/react-nextjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# fill in the variables in .env\n```\n\n----------------------------------------\n\nTITLE: Datalog Query for Task Owners\nDESCRIPTION: Example of a Datalog query to find task owners where a person is a subscriber\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_13\n\nLANGUAGE: clojure\nCODE:\n```\n{:find ?owner,\n :where [[?task :task/owner ?owner]\n         [?task :task/subscriber sub-id]}\n```\n\n----------------------------------------\n\nTITLE: List Apps API Response Format\nDESCRIPTION: JSON response format for the List Apps API endpoint, showing the structure of the returned app data including IDs, titles, creator information, and creation timestamps.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apps\": [\n    {\n      \"id\": \"uuid\",\n      \"title\": \"string\",\n      \"creator_id\": \"uuid\",\n      \"created_at\": \"timestamp\"\n    }\n    // ... more apps\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Apple Authentication Package for React Native\nDESCRIPTION: Shell command to install the Expo Apple Authentication library, which is required for implementing Apple authentication in a React Native application using Expo.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-apple-authentication\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo server for InstantDB React Native sandbox\nDESCRIPTION: Command to start the Expo development server for the InstantDB React Native sandbox application. This launches the application in development mode.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/react-native-expo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database Permission System in JavaScript\nDESCRIPTION: Example of Firebase Realtime Database's permission system using boolean expressions, which can become unmaintainable for complex applications.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nauth != null && (!data.exists() || data.child('users').hasChild(auth.id));\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Comparison Operators on Non-Indexed Attributes\nDESCRIPTION: Example of incorrectly using comparison operators on non-indexed attributes, which will fail because comparison operators require indexed attributes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/common-mistakes.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Bad: Attribute must be indexed for comparison operators\nconst query = {\n  todos: {\n    $: {\n      where: {\n        nonIndexedAttr: { $gt: 5 }, // Will fail if attr isn't indexed\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: SQL-Like Query in Browser\nDESCRIPTION: Shows the proposed SQL-like approach for querying client-side data, illustrating how browser databases could simplify data retrieval.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT posts WHERE post.author_id = ?;\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema and Permissions to Instant App\nDESCRIPTION: Shell command to push schema and permissions configurations to your Instant application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest push\n```\n\n----------------------------------------\n\nTITLE: isVariable Function Implementation\nDESCRIPTION: Simple utility function that checks if a pattern part is a variable by verifying if it's a string that starts with a question mark (?). This identifies variables within patterns.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isVariable(x) {\n  return typeof x === 'string' && x.startsWith('?');\n}\n```\n\n----------------------------------------\n\nTITLE: Non-variable Equality Check in JavaScript Datalog Engine\nDESCRIPTION: Compares non-variable pattern parts with triple parts for exact equality. Returns the context if they match, null otherwise.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nreturn patternPart === triplePart ? context : null;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for InstantDB Admin SDK\nDESCRIPTION: Commands to create and configure the environment variables file for the InstantDB admin sandbox application. Requires copying the example environment file and manually filling in the necessary variables.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/admin-sdk-express/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# fill in the variables in .env\n```\n\n----------------------------------------\n\nTITLE: Representing Triples in JavaScript\nDESCRIPTION: Two examples showing how to represent movie data as triples, where each triple consists of an ID, attribute, and value. This represents the basic data structure used in Datalog databases.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[200, movie / title, 'The Terminator'][(200, movie / year, 1987)];\n```\n\n----------------------------------------\n\nTITLE: Disabling the Instant Devtool\nDESCRIPTION: Example of how to completely disable the devtool widget in the application configuration.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/devtool.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nimport schema from '../instant.schema.ts';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n  schema,\n  devtool: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Permission Rules Definition in JavaScript\nDESCRIPTION: Example of a declarative permission system defining view and write access rules for a User entity using composable permission functions\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nUser {\n  view: [\n    IAllowIfAdmin(),\n    IAllowIfFriend(),\n    IAllowIfSameUser(),\n  ]\n  write: [\n    IAllowIfAdmin(),\n    IAllowIfFriend(),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Datalog Pattern for Querying\nDESCRIPTION: A pattern that matches any movie released in 1987. The variable ?id can be any value, while the attribute and value must match exactly as specified.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[?id, movie/year, 1987]\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Backend for Development\nDESCRIPTION: JavaScript code to set a localStorage flag that redirects API requests to a local backend running on localhost:8888 instead of the production API.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem('devBackend', true);\n```\n\n----------------------------------------\n\nTITLE: Checking Postgres Search Path\nDESCRIPTION: SQL query to check the current search path setting in Postgres, which determines where Postgres looks for objects like functions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nshow search_path;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Instant App in Bash\nDESCRIPTION: This snippet shows how to copy the example environment file and prompts the user to fill in the necessary variables. It's a crucial step in setting up the Instant app for development.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/strong-init-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# fill in the variables in .env\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Logical Replication Configuration\nDESCRIPTION: Required PostgreSQL configuration setting to enable logical replication by setting the WAL level.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/README.md#2025-04-16_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nwal_level = logical\n```\n\n----------------------------------------\n\nTITLE: Generating Instant Permissions File with CLI\nDESCRIPTION: This shell command uses the Instant CLI to generate an 'instant.perms.ts' file, which is used to define permission rules in code.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing Example Triples for Query Testing\nDESCRIPTION: Code snippet showing how to import the sample data for testing the query engine. This provides the data against which patterns will be matched.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport exampleTriples from './exampleTriples';\n```\n\n----------------------------------------\n\nTITLE: Expanding Context with New Variable Binding in JavaScript Datalog Engine\nDESCRIPTION: Creates a new binding in the context when a variable is encountered for the first time, mapping the variable to the corresponding triple part.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nreturn { ...context, [variable]: triplePart };\n```\n\n----------------------------------------\n\nTITLE: Specifying App ID in CLI Command\nDESCRIPTION: Provides the app ID directly as a command-line option when running CLI commands.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest init --app $MY_APP_ID\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Instant CLI\nDESCRIPTION: Creates a local environment file from the example template. Users must manually fill in the required variables in the .env file to configure the Instant app connection.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/cli-nodejs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# fill in the variables in .env\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database\nDESCRIPTION: Command to create a new PostgreSQL database named 'instant' for local development.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncreatedb instant\n```\n\n----------------------------------------\n\nTITLE: Initializing Instant CLI for Schema Generation\nDESCRIPTION: Command to generate the initial schema and permissions files using the Instant CLI. This creates instant.schema.ts and instant.perms.ts files in your project.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/modeling-data.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Testing Pattern Matching Function\nDESCRIPTION: Test cases for the matchPattern function that verifies if a pattern successfully matches a triple given a context of variable bindings. It shows both successful and failed matching scenarios.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(\n  matchPattern(\n    ['?movieId', 'movie/director', '?directorId'],\n    [200, 'movie/director', 100],\n    { '?movieId': 200 },\n  ),\n).toEqual({ '?movieId': 200, '?directorId': 100 });\nexpect(\n  matchPattern(\n    ['?movieId', 'movie/director', '?directorId'],\n    [200, 'movie/director', 100],\n    { '?movieId': 202 },\n  ),\n).toEqual(null);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Event Handling for Friend Removal\nDESCRIPTION: Shows the current approach for handling real-time updates via WebSockets, highlighting the manual work required to update client state for external changes.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nws.listen(`${user.id}/friends-removed`, friend => {\n  userStore.remove(friend.id);\n  postStore.removeUserPosts(friend.id);\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Container Styling with StyleSheet\nDESCRIPTION: Defines basic container styles using React Native's StyleSheet.create() for centering content with flex layout.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for InstantDB React Native sandbox\nDESCRIPTION: Instructions for creating and configuring the environment variables file needed for the InstantDB React Native sandbox application. The user needs to copy the example file and fill in the required variables.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/react-native-expo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# fill in the variables in .env\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for InstantDB Project\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/flags-config/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing React OAuth Google Package for Web Authentication\nDESCRIPTION: Command to install the @react-oauth/google package which provides a ready-to-use Google Sign-in Button component for React applications.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/google-oauth.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-oauth/google\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Query for Nested Data\nDESCRIPTION: This SQL query demonstrates the complexity of expressing nested data relationships in SQL. It's presented as a contrast to the simpler JavaScript object query, highlighting the potential for more intuitive query languages.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/sync_future.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT g.*, gt.todos\nFROM goals g\nJOIN (\n  SELECT g.id, json_agg(t.*) as todos\n  FROM goals g\n  LEFT JOIN todos t on g.id = t.goal_id\n  GROUP BY 1\n) gt on g.id = gt.id\n```\n\n----------------------------------------\n\nTITLE: Refetching Data After Friend Deletion\nDESCRIPTION: Shows an alternative approach where developers refetch all potentially affected data after a friend deletion, highlighting performance issues.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteFriend(user, id).then((res) => {\n  fetchFriends(user);\n  fetchPostsRelevantToTheUser(user);\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Function Definition for Replication\nDESCRIPTION: SQL function definition comparison showing how to explicitly specify the schema name to solve replication issues between Postgres versions.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Before:\ncreate or replace function is_jsonb_valid_timestamp(value jsonb)\n-- After:                   üëá\ncreate or replace function public.is_jsonb_valid_timestamp(value jsonb)\n```\n\n----------------------------------------\n\nTITLE: Updating App Name Request Format in JSON\nDESCRIPTION: This JSON structure represents the request format for updating an application's name. It requires providing a new non-blank title for the application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"New App Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Function in Postgres\nDESCRIPTION: SQL query to test if a custom timestamp validation function works correctly in Postgres when executed directly.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect is_jsonb_valid_timestamp('1724344362000'::jsonb);\n```\n\n----------------------------------------\n\nTITLE: Token Revocation URL Example\nDESCRIPTION: Example URL for revoking a token, showing the endpoint with the required token parameter.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.instantdb.com/platform/oauth/revoke?token=YOUR_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Postgres Search Path Result\nDESCRIPTION: Output showing the default Postgres search path which includes the current user's schema and the public schema.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n   search_path\n-----------------\n \"$user\", public\n```\n\n----------------------------------------\n\nTITLE: Installing Instant-CLI with NPX\nDESCRIPTION: Command to initialize a new InstantDB application using the instant-cli tool via npx without requiring a global installation.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/packages/cli/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpx instant-cli init\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Logging for Development\nDESCRIPTION: JavaScript code to enable development logs for the Instant client by setting a localStorage flag.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem(\"__instantLogging\", true);\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema and Permissions for InstantDB Project\nDESCRIPTION: Commands to push schema and permissions information, with options for both production and development environments.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/flags-config/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run push\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:push\n```\n\n----------------------------------------\n\nTITLE: Function Test Result in Postgres\nDESCRIPTION: Output showing that the custom timestamp validation function returns true when executed directly in Postgres.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n is_jsonb_valid_timestamp\n--------------------------\n t\n```\n\n----------------------------------------\n\nTITLE: Zero Downtime Algorithm Reference in Clojure\nDESCRIPTION: Reference to a Clojure implementation that checks for data integrity across database tables during a zero-downtime upgrade process. The script is part of the project's approach to ensuring no data loss during database migration.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_6\n\nLANGUAGE: clojure\nCODE:\n```\nhttps://github.com/instantdb/instant/blob/main/server/src/instant/jdbc/failover.clj#L258\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Hosts for Devtool Display\nDESCRIPTION: Shows how to configure which hosts are allowed to display the devtool widget. Useful for development environments beyond localhost.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/devtool.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init } from '@instantdb/react';\n\nimport schema from '../instant.schema.ts';\n\nconst db = init({\n  appId: process.env.NEXT_PUBLIC_INSTANT_APP_ID!,\n  schema,\n  devtool: {\n    allowedHosts: ['localhost', 'site.local'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Postgres Function Error during Replication\nDESCRIPTION: An error message showing that a custom function wasn't found during replication between Postgres instances, despite the function existing on both machines.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/pg_upgrade.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n:ERROR: function is_jsonb_valid_timestamp(jsonb) does not exist at character 1\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for InstantDB in Bash\nDESCRIPTION: This snippet shows how to copy the example environment file and prompts the user to fill in the necessary variables for InstantDB configuration.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/vanilla-js-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n# fill in the variables in .env\n```\n\n----------------------------------------\n\nTITLE: Retrieving Schema Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format when retrieving the schema for an application. It includes detailed information about blobs (entities) and refs (relationships) with their attributes, cardinality, and configuration settings.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schema\": {\n    \"blobs\": {\n      \"namespace-name\": {\n        \"attribute-name\": {\n          \"id\": \"uuid\",\n          \"cardinality\": \"one | many\",\n          \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"],\n          \"index?\": \"boolean\",\n          \"unique?\": \"boolean\",\n          \"checked-data-type\": \"'string' | 'number' | 'boolean' | 'date' | null\"\n        }\n      }\n      // Rest of blob attrs\n    },\n    \"refs\": {\n      \"ref-string\": {\n        \"id\": \"uuid\",\n        \"cardinality\": \"one | many\",\n        \"forward-identity\": [\"uuid\", \"namespace-name\", \"attribute-name\"],\n        \"reverse-identity\": [\n          \"uuid\",\n          \"linked-namespace-name\",\n          \"linked-attribute-name\"\n        ],\n        \"index?\": \"boolean\",\n        \"unique?\": \"boolean\"\n      }\n      // Rest of ref attrs\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Paths in Environment Variables\nDESCRIPTION: Sets custom file paths for schema and permissions files in your .env file.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/cli.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# in your .env file\nINSTANT_SCHEMA_FILE_PATH=./src/db/instant.schema.ts\nINSTANT_PERMS_FILE_PATH=./src/db/instant.perms.ts\n```\n\n----------------------------------------\n\nTITLE: Logging in to InstantDB Project\nDESCRIPTION: Commands for logging into the InstantDB project, with options for both production and development environments.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/flags-config/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run login\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:login\n```\n\n----------------------------------------\n\nTITLE: Initializing Instant Schema and Permissions\nDESCRIPTION: Command to initialize your Instant schema and permissions using the CLI tool.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx instant-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Development Server\nDESCRIPTION: Shell command to start the Next.js development server to test the Instant Storage application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/storage.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Datalog Query Example\nDESCRIPTION: Demonstrates a nested query in Datalog for pulling team, task, and owner data\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_11\n\nLANGUAGE: clojure\nCODE:\n```\n(pull db '[* {:team/task [* {:task/owner [*]}]}] team-id)\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server\nDESCRIPTION: Command to start the Expo development server for running the React Native application.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/start-rn.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Server-Side Database and API Endpoint Boilerplate\nDESCRIPTION: Illustrates the typical boilerplate code required to create API endpoints that fetch data from a database, highlighting redundancy in backend development.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// db.js\nfunction getRelevantPostsFor(userId) {\n  db.exec('SELECT * FROM posts WHERE ...');\n}\n\n// api.js\napp.get('relevantPosts', (req, res) => {\n  res.status(200).send(getRelevantPosts(req.userId));\n});\n```\n\n----------------------------------------\n\nTITLE: SQL-Like Friend Deletion with Automatic Updates\nDESCRIPTION: Proposes an ideal SQL-like approach where deleting a friendship would automatically update all affected client-side data without manual intervention.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM friendships WHERE friend_one_id = ? AND friend_two_id = ?\n-- Browser magically updates with all the friend and post information removed\n```\n\n----------------------------------------\n\nTITLE: Redis Cache Pipeline Configuration\nDESCRIPTION: Example of declarative cache configuration showing how to pipe user data to Redis cache\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndb.user |> Redis;\n```\n\n----------------------------------------\n\nTITLE: Actualizing Find Clause Results in JavaScript Datalog Engine\nDESCRIPTION: Transforms the find clause by replacing variables with their bound values from the context. For each part in the find array, it substitutes variables with their bindings.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction actualize(context, find) {\n  return find.map((findPart) => {\n    return isVariable(findPart) ? context[findPart] : findPart;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Room Presence in Backend with adminDB.rooms.getPresence\nDESCRIPTION: A reference to the adminDB.rooms.getPresence function that allows developers to check which users are online in a room from backend code.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_emails/txt/mar2025.txt#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadminDB.rooms.getPresence\n```\n\n----------------------------------------\n\nTITLE: Property Storage Example\nDESCRIPTION: Shows how properties are stored as separate triples to avoid conflicts in collaborative environments\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 'fontSize', 20][(1, 'backgroundColor', 'blue')]\n```\n\n----------------------------------------\n\nTITLE: Single Triple Example\nDESCRIPTION: Illustrates the basic triple structure with id, attribute, and value\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 'name', 'Joe']\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Join Query for Related Data\nDESCRIPTION: SQL query demonstrating how to retrieve team data with related tasks and owners, which returns a flat result requiring client-side transformation.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  teams.*, tasks.*, owner.*\nFROM teams\nJOIN tasks ON tasks.team_id = teams.id\nJOIN users as owner ON tasks.owner_id = owner.id\nWHERE teams.id = ?\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions Request Format in JSON\nDESCRIPTION: This JSON structure represents the request format for setting permission rules for an application. It requires providing a complete permissions code object that defines access rules for different operations on various entities.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": {\n    // Permissions code object\n    // e.g., {\"posts\": {\"allow\": {\"read\": \"true\", \"create\": \"false\"}}}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating App Name Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format after successfully updating an application's name. It includes the app's identifier, updated title, creator ID, and creation timestamp.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"id\": \"uuid\",\n    \"title\": \"string\",\n    \"creator_id\": \"uuid\",\n    \"created_at\": \"timestamp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving App Details Response Format in JSON\nDESCRIPTION: This JSON structure represents the response format when retrieving an application's details. It includes the app's unique identifier, title, creator ID, and creation timestamp.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"id\": \"uuid\",\n    \"title\": \"string\",\n    \"creator_id\": \"uuid\",\n    \"created_at\": \"timestamp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Firestore Permission Function in JavaScript\nDESCRIPTION: Firestore's improved permission system using function-like abstractions, though still limited for complex rules with no support for early returns.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/next_firebase.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isAuthorOrAdmin(userId, article) {\n  let isAuthor = article.author == userId;\n  let isAdmin = exists(/databases/$(database)/documents/admins/$(userId));\n  return isAuthor || isAdmin;\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Token Exchange Response\nDESCRIPTION: JSON response format returned after a successful token exchange request, containing access_token, refresh_token, expiration time, scope, and token type.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"ACCESS_TOKEN_VALUE\",\n  \"refresh_token\": \"REFRESH_TOKEN_VALUE\",\n  \"expires_in\": 1209600, // Lifetime in seconds (e.g., 2 weeks)\n  \"scope\": \"apps-read apps-write\", // Scopes granted\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Authorization URL for InstantDB OAuth\nDESCRIPTION: A complete example of an authorization URL with all required parameters including client_id, response_type, redirect_uri, scope, and state parameter for CSRF protection.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.instantdb.com/platform/oauth/start?client_id=YOUR_CLIENT_ID&response_type=code&redirect_uri=YOUR_REDIRECT_URI&scope=apps-read%20apps-write&state=RANDOM_STATE_STRING\n```\n\n----------------------------------------\n\nTITLE: Sample Triple Data Structure\nDESCRIPTION: An excerpt from the example data file showing how triples are stored as arrays containing an ID, attribute, and value. This represents the raw data that queries will run against.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/datalogjs.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// exampleTriples.js\nexport default [\n  [100, 'person/name', 'James Cameron'],\n  [100, 'person/born', '1954-08-16T00:00:00Z'],\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Web Redirect Flow\nDESCRIPTION: JavaScript code that creates an authorization URL for the web redirect flow using Instant's API with the specified client name and current URL as the redirect target.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/apple.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst authUrl = db.auth.createAuthorizationURL({\n  clientName: '<clientName>',\n  redirectURL: window.location.href,\n});\n```\n\n----------------------------------------\n\nTITLE: Failed OAuth Redirect Format\nDESCRIPTION: Example of the redirect URL format when authorization fails, containing error information and the original state parameter.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nYOUR_REDIRECT_URI?error=access_denied&state=RANDOM_STATE_STRING\n```\n\n----------------------------------------\n\nTITLE: SQL-Like Optimistic Updates\nDESCRIPTION: Proposes an ideal SQL-like approach for optimistic updates where the database system would handle successful operations and rollbacks automatically.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/_posts/db_browser.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDELETE friendship WHERE friend_one_id = ? AND friend_two_id = ?\n-- local store optimistically updated, if operation fails we undo\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in InstantDB\nDESCRIPTION: Simple implementation of the sign out functionality that invalidates the user's refresh token and ends their authenticated session.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/magic-codes.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndb.auth.signOut();\n```\n\n----------------------------------------\n\nTITLE: Running Instant CLI in development mode\nDESCRIPTION: Executes the instant-cli command with the development flag enabled. This shows how to run the CLI help command with the proper environment variable set.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/sandbox/cli-nodejs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINSTANT_CLI_DEV=1 pnpm exec instant-cli -h\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Endpoint for InstantDB OAuth\nDESCRIPTION: The endpoint URL used to exchange an authorization code for access and refresh tokens.\nSOURCE: https://github.com/instantdb/instant/blob/main/client/www/pages/docs/auth/platform-oauth.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.instantdb.com/platform/oauth/token\n```\n\n----------------------------------------\n\nTITLE: Login to ECR Registry\nDESCRIPTION: Command to authenticate with the InstantDB public ECR registry\nSOURCE: https://github.com/instantdb/instant/blob/main/server/dev-postgres/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake ecr-login\n```\n\n----------------------------------------\n\nTITLE: Build and Push Docker Image\nDESCRIPTION: Command to build the Postgres Docker image and push it to the ECR registry\nSOURCE: https://github.com/instantdb/instant/blob/main/server/dev-postgres/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake build-and-push-image\n```\n\n----------------------------------------\n\nTITLE: Test Setup Commands\nDESCRIPTION: Commands to compile Java dependencies and run tests for the Instant server.\nSOURCE: https://github.com/instantdb/instant/blob/main/server/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake compile-java\nmake test\n```"
  }
]